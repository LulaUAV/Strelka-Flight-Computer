
Radio_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b564  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800b6ec  0800b6ec  0001b6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b7e4  0800b7e4  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800b7e4  0800b7e4  0001b7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7ec  0800b7ec  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7ec  0800b7ec  0001b7ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7f0  0800b7f0  0001b7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800b7f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00001e14  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001f7c  20001f7c  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c099  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d3b  00000000  00000000  0003c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0003ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001538  00000000  00000000  00041630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d77  00000000  00000000  00042b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb0c  00000000  00000000  000668df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c86c6  00000000  00000000  000823eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014aab1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065a0  00000000  00000000  0014ab04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b6d4 	.word	0x0800b6d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	0800b6d4 	.word	0x0800b6d4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004cc:	b4b0      	push	{r4, r5, r7}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004d4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004d8:	62bb      	str	r3, [r7, #40]	; 0x28
	new_LoRa.spredingFactor        = SF_7      ;
 80004da:	2307      	movs	r3, #7
 80004dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	new_LoRa.crcRate               = CR_4_5    ;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	new_LoRa.power				   = POWER_20db;
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.overCurrentProtection = 100       ;
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	new_LoRa.preamble			   = 8         ;
 80004f8:	2308      	movs	r3, #8
 80004fa:	863b      	strh	r3, [r7, #48]	; 0x30

	return new_LoRa;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	461d      	mov	r5, r3
 8000500:	f107 0408 	add.w	r4, r7, #8
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000510:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	373c      	adds	r7, #60	; 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr

0800051e <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6898      	ldr	r0, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	899b      	ldrh	r3, [r3, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f002 f997 	bl	8002864 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f001 fb46 	bl	8001bc8 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f002 f98c 	bl	8002864 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 fb3b 	bl	8001bc8 <HAL_Delay>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 fa56 	bl	8000a18 <LoRa_read>
 800056c:	4603      	mov	r3, r0
 800056e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d107      	bne.n	800058a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f023 0307 	bic.w	r3, r3, #7
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e05e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == STNBY_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e04e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_TX) {
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x02;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = FS_MODE_TX;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2202      	movs	r2, #2
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e03e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == TRANSMIT_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d10c      	bne.n	80005ea <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x03;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0303 	orr.w	r3, r3, #3
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2203      	movs	r2, #3
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	e02e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_RX){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d10c      	bne.n	800060a <LoRa_gotoMode+0xb0>
		data = (read & 0xF8) | 0x04;
 80005f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f4:	f023 0307 	bic.w	r3, r3, #7
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2203      	movs	r2, #3
 8000606:	61da      	str	r2, [r3, #28]
 8000608:	e01e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == RXCONTIN_MODE){
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b05      	cmp	r3, #5
 800060e:	d10c      	bne.n	800062a <LoRa_gotoMode+0xd0>
		data = (read & 0xF8) | 0x05;
 8000610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000614:	f023 0307 	bic.w	r3, r3, #7
 8000618:	b25b      	sxtb	r3, r3
 800061a:	f043 0305 	orr.w	r3, r3, #5
 800061e:	b25b      	sxtb	r3, r3
 8000620:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2205      	movs	r2, #5
 8000626:	61da      	str	r2, [r3, #28]
 8000628:	e00e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == RXSINGLE_MODE){
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2b06      	cmp	r3, #6
 800062e:	d10b      	bne.n	8000648 <LoRa_gotoMode+0xee>
		data = (read & 0xF8) | 0x06;
 8000630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000634:	f023 0307 	bic.w	r3, r3, #7
 8000638:	b25b      	sxtb	r3, r3
 800063a:	f043 0306 	orr.w	r3, r3, #6
 800063e:	b25b      	sxtb	r3, r3
 8000640:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2206      	movs	r2, #6
 8000646:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	461a      	mov	r2, r3
 800064c:	2101      	movs	r1, #1
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f9fc 	bl	8000a4c <LoRa_write>
	HAL_Delay(10);
 8000654:	200a      	movs	r0, #10
 8000656:	f001 fab7 	bl	8001bc8 <HAL_Delay>
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <LoRa_setModulation>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes. 0->FSK, 1->OOK, 2->LoRa
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setModulation(LoRa* _LoRa, int mode) {
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
 800066a:	6039      	str	r1, [r7, #0]
	uint8_t read = LoRa_read(_LoRa, RegOpMode);
 800066c:	2101      	movs	r1, #1
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f000 f9d2 	bl	8000a18 <LoRa_read>
 8000674:	4603      	mov	r3, r0
 8000676:	73fb      	strb	r3, [r7, #15]
	uint8_t data = read;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
 800067a:	73bb      	strb	r3, [r7, #14]
//	uint8_t prev_mode = _LoRa->current_mode;

	// Set modem to sleep mode
	LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800067c:	2100      	movs	r1, #0
 800067e:	6878      	ldr	r0, [r7, #4]
 8000680:	f7ff ff6b 	bl	800055a <LoRa_gotoMode>

	// Toggle first RegOpMode bit
	if(mode == 2) {	// LoRa
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2b02      	cmp	r3, #2
 8000688:	d109      	bne.n	800069e <LoRa_setModulation+0x3c>
		LoRa_write(_LoRa, RegOpMode, 0x41);
 800068a:	2241      	movs	r2, #65	; 0x41
 800068c:	2101      	movs	r1, #1
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f9dc 	bl	8000a4c <LoRa_write>
//		LoRa_write(_LoRa, RegOpMode, (read & 0x7F) | 0x80);
		_LoRa->modulationMode = LORA_MODULATION;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2202      	movs	r2, #2
 8000698:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800069c:	e037      	b.n	800070e <LoRa_setModulation+0xac>
	}
	else if (mode == 1) {	// OOK
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d11b      	bne.n	80006dc <LoRa_setModulation+0x7a>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	461a      	mov	r2, r3
 80006ae:	2101      	movs	r1, #1
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f9cb 	bl	8000a4c <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60) | 0x20);
 80006b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	b25b      	sxtb	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	2101      	movs	r1, #1
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f9bd 	bl	8000a4c <LoRa_write>
		_LoRa->modulationMode = OOK_MODULATION;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2201      	movs	r2, #1
 80006d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80006da:	e018      	b.n	800070e <LoRa_setModulation+0xac>
	}
	else if (mode == 0) {	// FSK
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d115      	bne.n	800070e <LoRa_setModulation+0xac>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f9ac 	bl	8000a4c <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60));
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	2101      	movs	r1, #1
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f9a3 	bl	8000a4c <LoRa_write>
		_LoRa->modulationMode = FSK_MODULATION;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2200      	movs	r2, #0
 800070a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	HAL_Delay(10);
 800070e:	200a      	movs	r0, #10
 8000710:	f001 fa5a 	bl	8001bc8 <HAL_Delay>
//	LoRa_gotoMode(_LoRa, prev_mode);
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	4613      	mov	r3, r2
 800072a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	889b      	ldrh	r3, [r3, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	f002 f894 	bl	8002864 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	6998      	ldr	r0, [r3, #24]
 8000740:	88fa      	ldrh	r2, [r7, #6]
 8000742:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000746:	68b9      	ldr	r1, [r7, #8]
 8000748:	f004 f81d 	bl	8004786 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800074c:	bf00      	nop
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	4618      	mov	r0, r3
 8000754:	f004 fc06 	bl	8004f64 <HAL_SPI_GetState>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d1f7      	bne.n	800074e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6998      	ldr	r0, [r3, #24]
 8000762:	8b3a      	ldrh	r2, [r7, #24]
 8000764:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000768:	6839      	ldr	r1, [r7, #0]
 800076a:	f004 f948 	bl	80049fe <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800076e:	bf00      	nop
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	4618      	mov	r0, r3
 8000776:	f004 fbf5 	bl	8004f64 <HAL_SPI_GetState>
 800077a:	4603      	mov	r3, r0
 800077c:	2b01      	cmp	r3, #1
 800077e:	d1f7      	bne.n	8000770 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	889b      	ldrh	r3, [r3, #4]
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	f002 f86a 	bl	8002864 <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	4613      	mov	r3, r2
 80007a6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	f002 f856 	bl	8002864 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	6998      	ldr	r0, [r3, #24]
 80007bc:	88fa      	ldrh	r2, [r7, #6]
 80007be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007c2:	68b9      	ldr	r1, [r7, #8]
 80007c4:	f003 ffdf 	bl	8004786 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007c8:	bf00      	nop
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 fbc8 	bl	8004f64 <HAL_SPI_GetState>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d1f7      	bne.n	80007ca <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	6998      	ldr	r0, [r3, #24]
 80007de:	8b3a      	ldrh	r2, [r7, #24]
 80007e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007e4:	6839      	ldr	r1, [r7, #0]
 80007e6:	f003 ffce 	bl	8004786 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80007ea:	bf00      	nop
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f004 fbb7 	bl	8004f64 <HAL_SPI_GetState>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d1f7      	bne.n	80007ec <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	889b      	ldrh	r3, [r3, #4]
 8000804:	2201      	movs	r2, #1
 8000806:	4619      	mov	r1, r3
 8000808:	f002 f82c 	bl	8002864 <HAL_GPIO_WritePin>
}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	04db      	lsls	r3, r3, #19
 8000822:	115b      	asrs	r3, r3, #5
 8000824:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	0c1b      	lsrs	r3, r3, #16
 800082a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800082c:	7afb      	ldrb	r3, [r7, #11]
 800082e:	461a      	mov	r2, r3
 8000830:	2106      	movs	r1, #6
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f000 f90a 	bl	8000a4c <LoRa_write>
	HAL_Delay(5);
 8000838:	2005      	movs	r0, #5
 800083a:	f001 f9c5 	bl	8001bc8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	0a1b      	lsrs	r3, r3, #8
 8000842:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000844:	7afb      	ldrb	r3, [r7, #11]
 8000846:	461a      	mov	r2, r3
 8000848:	2107      	movs	r1, #7
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f000 f8fe 	bl	8000a4c <LoRa_write>
	HAL_Delay(5);
 8000850:	2005      	movs	r0, #5
 8000852:	f001 f9b9 	bl	8001bc8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800085a:	7afb      	ldrb	r3, [r7, #11]
 800085c:	461a      	mov	r2, r3
 800085e:	2108      	movs	r1, #8
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 f8f3 	bl	8000a4c <LoRa_write>
	HAL_Delay(5);
 8000866:	2005      	movs	r0, #5
 8000868:	f001 f9ae 	bl	8001bc8 <HAL_Delay>
}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2b0c      	cmp	r3, #12
 8000882:	dd01      	ble.n	8000888 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000884:	230c      	movs	r3, #12
 8000886:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b06      	cmp	r3, #6
 800088c:	dc01      	bgt.n	8000892 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800088e:	2307      	movs	r3, #7
 8000890:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000892:	211e      	movs	r1, #30
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f000 f8bf 	bl	8000a18 <LoRa_read>
 800089a:	4603      	mov	r3, r0
 800089c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800089e:	200a      	movs	r0, #10
 80008a0:	f001 f992 	bl	8001bc8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4413      	add	r3, r2
 80008b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	461a      	mov	r2, r3
 80008bc:	211e      	movs	r1, #30
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 f8c4 	bl	8000a4c <LoRa_write>
	HAL_Delay(10);
 80008c4:	200a      	movs	r0, #10
 80008c6:	f001 f97f 	bl	8001bc8 <HAL_Delay>
}
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	460b      	mov	r3, r1
 80008dc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80008de:	78fb      	ldrb	r3, [r7, #3]
 80008e0:	461a      	mov	r2, r3
 80008e2:	2109      	movs	r1, #9
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f000 f8b1 	bl	8000a4c <LoRa_write>
	HAL_Delay(10);
 80008ea:	200a      	movs	r0, #10
 80008ec:	f001 f96c 	bl	8001bc8 <HAL_Delay>
}
 80008f0:	bf00      	nop
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	460b      	mov	r3, r1
 8000902:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	2b2c      	cmp	r3, #44	; 0x2c
 800090c:	d801      	bhi.n	8000912 <LoRa_setOCP+0x1a>
		current = 45;
 800090e:	232d      	movs	r3, #45	; 0x2d
 8000910:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	2bf0      	cmp	r3, #240	; 0xf0
 8000916:	d901      	bls.n	800091c <LoRa_setOCP+0x24>
		current = 240;
 8000918:	23f0      	movs	r3, #240	; 0xf0
 800091a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b78      	cmp	r3, #120	; 0x78
 8000920:	d809      	bhi.n	8000936 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000922:	78fb      	ldrb	r3, [r7, #3]
 8000924:	3b2d      	subs	r3, #45	; 0x2d
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <LoRa_setOCP+0x78>)
 8000928:	fb82 1203 	smull	r1, r2, r2, r3
 800092c:	1052      	asrs	r2, r2, #1
 800092e:	17db      	asrs	r3, r3, #31
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e00b      	b.n	800094e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	2bf0      	cmp	r3, #240	; 0xf0
 800093a:	d808      	bhi.n	800094e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800093c:	78fb      	ldrb	r3, [r7, #3]
 800093e:	331e      	adds	r3, #30
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <LoRa_setOCP+0x78>)
 8000942:	fb82 1203 	smull	r1, r2, r2, r3
 8000946:	1092      	asrs	r2, r2, #2
 8000948:	17db      	asrs	r3, r3, #31
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800094e:	7bfb      	ldrb	r3, [r7, #15]
 8000950:	3320      	adds	r3, #32
 8000952:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	461a      	mov	r2, r3
 8000958:	210b      	movs	r1, #11
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f876 	bl	8000a4c <LoRa_write>
	HAL_Delay(10);
 8000960:	200a      	movs	r0, #10
 8000962:	f001 f931 	bl	8001bc8 <HAL_Delay>
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	66666667 	.word	0x66666667

08000974 <LoRa_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setCRCon(LoRa* _LoRa) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000982:	2b02      	cmp	r3, #2
 8000984:	d110      	bne.n	80009a8 <LoRa_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 8000986:	211e      	movs	r1, #30
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f845 	bl	8000a18 <LoRa_read>
 800098e:	4603      	mov	r3, r0
 8000990:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xFB) | 0x04;
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 800099a:	7bbb      	ldrb	r3, [r7, #14]
 800099c:	461a      	mov	r2, r3
 800099e:	211e      	movs	r1, #30
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f853 	bl	8000a4c <LoRa_write>
	else {
		read = LoRa_read(_LoRa, RegPacketConfig1);
		data = (read & 0xEF) | 0x10;
		LoRa_write(_LoRa, RegModemConfig2, data);
	}
}
 80009a6:	e00f      	b.n	80009c8 <LoRa_setCRCon+0x54>
		read = LoRa_read(_LoRa, RegPacketConfig1);
 80009a8:	2130      	movs	r1, #48	; 0x30
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 f834 	bl	8000a18 <LoRa_read>
 80009b0:	4603      	mov	r3, r0
 80009b2:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xEF) | 0x10;
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 80009bc:	7bbb      	ldrb	r3, [r7, #14]
 80009be:	461a      	mov	r2, r3
 80009c0:	211e      	movs	r1, #30
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 f842 	bl	8000a4c <LoRa_write>
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80009de:	2b02      	cmp	r3, #2
 80009e0:	d110      	bne.n	8000a04 <LoRa_setTOMsb_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 80009e2:	211e      	movs	r1, #30
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f000 f817 	bl	8000a18 <LoRa_read>
 80009ea:	4603      	mov	r3, r0
 80009ec:	73fb      	strb	r3, [r7, #15]
		data = read | 0x07;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	f043 0307 	orr.w	r3, r3, #7
 80009f4:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 80009f6:	7bbb      	ldrb	r3, [r7, #14]
 80009f8:	461a      	mov	r2, r3
 80009fa:	211e      	movs	r1, #30
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f825 	bl	8000a4c <LoRa_write>
 8000a02:	e002      	b.n	8000a0a <LoRa_setTOMsb_setCRCon+0x3a>
	}
	else {
		LoRa_setCRCon(_LoRa);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ffb5 	bl	8000974 <LoRa_setCRCon>
	}

	HAL_Delay(10);
 8000a0a:	200a      	movs	r0, #10
 8000a0c:	f001 f8dc 	bl	8001bc8 <HAL_Delay>
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af02      	add	r7, sp, #8
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000a24:	78fb      	ldrb	r3, [r7, #3]
 8000a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000a2e:	f107 030f 	add.w	r3, r7, #15
 8000a32:	f107 010e 	add.w	r1, r7, #14
 8000a36:	2201      	movs	r2, #1
 8000a38:	9200      	str	r2, [sp, #0]
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff fe6d 	bl	800071c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	460b      	mov	r3, r1
 8000a56:	70fb      	strb	r3, [r7, #3]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000a5c:	78fb      	ldrb	r3, [r7, #3]
 8000a5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000a66:	78bb      	ldrb	r3, [r7, #2]
 8000a68:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000a6a:	f107 030f 	add.w	r3, r7, #15
 8000a6e:	f107 010e 	add.w	r1, r7, #14
 8000a72:	2201      	movs	r2, #1
 8000a74:	9200      	str	r2, [sp, #0]
 8000a76:	2201      	movs	r2, #1
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fe8d 	bl	8000798 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000a7e:	bf00      	nop
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}

08000a86 <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000a86:	b580      	push	{r7, lr}
 8000a88:	b086      	sub	sp, #24
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	60f8      	str	r0, [r7, #12]
 8000a8e:	607a      	str	r2, [r7, #4]
 8000a90:	461a      	mov	r2, r3
 8000a92:	460b      	mov	r3, r1
 8000a94:	72fb      	strb	r3, [r7, #11]
 8000a96:	4613      	mov	r3, r2
 8000a98:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8000a9a:	7afb      	ldrb	r3, [r7, #11]
 8000a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	6818      	ldr	r0, [r3, #0]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	889b      	ldrh	r3, [r3, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f001 fed8 	bl	8002864 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	6998      	ldr	r0, [r3, #24]
 8000ab8:	f107 0117 	add.w	r1, r7, #23
 8000abc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f003 fe60 	bl	8004786 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ac6:	bf00      	nop
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 fa49 	bl	8004f64 <HAL_SPI_GetState>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d1f7      	bne.n	8000ac8 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6998      	ldr	r0, [r3, #24]
 8000adc:	7abb      	ldrb	r3, [r7, #10]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000ae4:	6879      	ldr	r1, [r7, #4]
 8000ae6:	f003 fe4e 	bl	8004786 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000aea:	bf00      	nop
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	4618      	mov	r0, r3
 8000af2:	f004 fa37 	bl	8004f64 <HAL_SPI_GetState>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d1f7      	bne.n	8000aec <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	889b      	ldrh	r3, [r3, #4]
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	f001 feac 	bl	8002864 <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

	return 1;
 8000b1c:	2301      	movs	r3, #1
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	4611      	mov	r1, r2
 8000b36:	461a      	mov	r2, r3
 8000b38:	460b      	mov	r3, r1
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b46:	2101      	movs	r1, #1
 8000b48:	68f8      	ldr	r0, [r7, #12]
 8000b4a:	f7ff fd06 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000b4e:	210e      	movs	r1, #14
 8000b50:	68f8      	ldr	r0, [r7, #12]
 8000b52:	f7ff ff61 	bl	8000a18 <LoRa_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b5a:	7cfb      	ldrb	r3, [r7, #19]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	210d      	movs	r1, #13
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff ff73 	bl	8000a4c <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	2132      	movs	r1, #50	; 0x32
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f7ff ff6d 	bl	8000a4c <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	68ba      	ldr	r2, [r7, #8]
 8000b76:	2100      	movs	r1, #0
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f7ff ff84 	bl	8000a86 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000b7e:	2103      	movs	r1, #3
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	f7ff fcea 	bl	800055a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000b86:	2112      	movs	r1, #18
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f7ff ff45 	bl	8000a18 <LoRa_read>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000b92:	7cfb      	ldrb	r3, [r7, #19]
 8000b94:	f003 0308 	and.w	r3, r3, #8
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00a      	beq.n	8000bb2 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b9c:	22ff      	movs	r2, #255	; 0xff
 8000b9e:	2112      	movs	r1, #18
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff ff53 	bl	8000a4c <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000ba6:	6979      	ldr	r1, [r7, #20]
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f7ff fcd6 	bl	800055a <LoRa_gotoMode>
			return 1;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000bb2:	88bb      	ldrh	r3, [r7, #4]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	80bb      	strh	r3, [r7, #4]
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d105      	bne.n	8000bca <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000bbe:	6979      	ldr	r1, [r7, #20]
 8000bc0:	68f8      	ldr	r0, [r7, #12]
 8000bc2:	f7ff fcca 	bl	800055a <LoRa_gotoMode>
				return 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e003      	b.n	8000bd2 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f000 fffc 	bl	8001bc8 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000bd0:	e7d9      	b.n	8000b86 <LoRa_transmit+0x5c>
	}

}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000be2:	2105      	movs	r1, #5
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fcb8 	bl	800055a <LoRa_gotoMode>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000bf2:	b590      	push	{r4, r7, lr}
 8000bf4:	b089      	sub	sp, #36	; 0x24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	e007      	b.n	8000c1a <LoRa_receive+0x28>
		data[i]=0;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	68ba      	ldr	r2, [r7, #8]
 8000c0e:	4413      	add	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	3301      	adds	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	dbf3      	blt.n	8000c0a <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c22:	2101      	movs	r1, #1
 8000c24:	68f8      	ldr	r0, [r7, #12]
 8000c26:	f7ff fc98 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000c2a:	2112      	movs	r1, #18
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f7ff fef3 	bl	8000a18 <LoRa_read>
 8000c32:	4603      	mov	r3, r0
 8000c34:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000c36:	7cfb      	ldrb	r3, [r7, #19]
 8000c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d02f      	beq.n	8000ca0 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000c40:	22ff      	movs	r2, #255	; 0xff
 8000c42:	2112      	movs	r1, #18
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff ff01 	bl	8000a4c <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000c4a:	2113      	movs	r1, #19
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff fee3 	bl	8000a18 <LoRa_read>
 8000c52:	4603      	mov	r3, r0
 8000c54:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000c56:	2110      	movs	r1, #16
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff fedd 	bl	8000a18 <LoRa_read>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000c62:	7cfb      	ldrb	r3, [r7, #19]
 8000c64:	461a      	mov	r2, r3
 8000c66:	210d      	movs	r1, #13
 8000c68:	68f8      	ldr	r0, [r7, #12]
 8000c6a:	f7ff feef 	bl	8000a4c <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000c6e:	7cba      	ldrb	r2, [r7, #18]
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	bf28      	it	cs
 8000c76:	4613      	movcs	r3, r2
 8000c78:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	e00b      	b.n	8000c98 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	18d4      	adds	r4, r2, r3
 8000c86:	2100      	movs	r1, #0
 8000c88:	68f8      	ldr	r0, [r7, #12]
 8000c8a:	f7ff fec5 	bl	8000a18 <LoRa_read>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	3301      	adds	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	7ffb      	ldrb	r3, [r7, #31]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dbef      	blt.n	8000c80 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff fc59 	bl	800055a <LoRa_gotoMode>
    return min;
 8000ca8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd90      	pop	{r4, r7, pc}

08000cb2 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b084      	sub	sp, #16
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	// Check modulation mode
	read = LoRa_read(_LoRa, RegOpMode);
 8000cba:	2101      	movs	r1, #1
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff feab 	bl	8000a18 <LoRa_read>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	73fb      	strb	r3, [r7, #15]
	if((read & 0x80) == 0x80) _LoRa->modulationMode = LORA_MODULATION;
 8000cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	da04      	bge.n	8000cd8 <LoRa_init+0x26>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000cd6:	e012      	b.n	8000cfe <LoRa_init+0x4c>
	else {
		if((read & 0x60) == 0x00) _LoRa->modulationMode = FSK_MODULATION;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d104      	bne.n	8000cec <LoRa_init+0x3a>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000cea:	e008      	b.n	8000cfe <LoRa_init+0x4c>
		else if((read & 0x60) == 0x20) _LoRa->modulationMode = OOK_MODULATION;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000cf2:	2b20      	cmp	r3, #32
 8000cf4:	d103      	bne.n	8000cfe <LoRa_init+0x4c>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(LoRa_isvalid(_LoRa)){
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ff08 	bl	8000b14 <LoRa_isvalid>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 80c8 	beq.w	8000e9c <LoRa_init+0x1ea>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff fc23 	bl	800055a <LoRa_gotoMode>
			HAL_Delay(10);
 8000d14:	200a      	movs	r0, #10
 8000d16:	f000 ff57 	bl	8001bc8 <HAL_Delay>
			if( _LoRa->modulationMode == LORA_MODULATION) {
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d115      	bne.n	8000d50 <LoRa_init+0x9e>
				// turn on lora mode:
				read = LoRa_read(_LoRa, RegOpMode);
 8000d24:	2101      	movs	r1, #1
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff fe76 	bl	8000a18 <LoRa_read>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	73fb      	strb	r3, [r7, #15]
				HAL_Delay(10);
 8000d30:	200a      	movs	r0, #10
 8000d32:	f000 ff49 	bl	8001bc8 <HAL_Delay>
				data = read | 0x80;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3c:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegOpMode, data);
 8000d3e:	7bbb      	ldrb	r3, [r7, #14]
 8000d40:	461a      	mov	r2, r3
 8000d42:	2101      	movs	r1, #1
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fe81 	bl	8000a4c <LoRa_write>
				HAL_Delay(100);
 8000d4a:	2064      	movs	r0, #100	; 0x64
 8000d4c:	f000 ff3c 	bl	8001bc8 <HAL_Delay>
			}

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fd5c 	bl	8000814 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d62:	4619      	mov	r1, r3
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff fdb4 	bl	80008d2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fdc0 	bl	80008f8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000d78:	2223      	movs	r2, #35	; 0x23
 8000d7a:	210c      	movs	r1, #12
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fe65 	bl	8000a4c <LoRa_write>

		// Set Tx start condition
			if(_LoRa->modulationMode != LORA_MODULATION) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d004      	beq.n	8000d96 <LoRa_init+0xe4>
				LoRa_write(_LoRa, RegFifoThresh, 0x80);
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	2135      	movs	r1, #53	; 0x35
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff fe5b 	bl	8000a4c <LoRa_write>
			}

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fe1a 	bl	80009d0 <LoRa_setTOMsb_setCRCon>
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d11f      	bne.n	8000de6 <LoRa_init+0x134>
				LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff fd60 	bl	8000874 <LoRa_setSpreadingFactor>
				// set Timeout Lsb:
				LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000db4:	22ff      	movs	r2, #255	; 0xff
 8000db6:	211f      	movs	r1, #31
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff fe47 	bl	8000a4c <LoRa_write>
				// set bandwidth, coding rate and expilicit mode:
				// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
				//       bits represent --> |   bandwidth   |     CR    |I/E|
				data = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73bb      	strb	r3, [r7, #14]
				data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dc8:	011b      	lsls	r3, r3, #4
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegModemConfig1, data);
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	211d      	movs	r1, #29
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff fe33 	bl	8000a4c <LoRa_write>
			}

		// set preamble:
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d112      	bne.n	8000e16 <LoRa_init+0x164>
				LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b29b      	uxth	r3, r3
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fe24 	bl	8000a4c <LoRa_write>
				LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2121      	movs	r1, #33	; 0x21
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff fe1c 	bl	8000a4c <LoRa_write>
 8000e14:	e004      	b.n	8000e20 <LoRa_init+0x16e>
			}
			else {
				LoRa_write(_LoRa, RegPreambleDetect, 0xAA);		// Preamble detect ON, preable detect size 2 bytes, detector tolerance 0x0A (default)
 8000e16:	22aa      	movs	r2, #170	; 0xaa
 8000e18:	211f      	movs	r1, #31
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe16 	bl	8000a4c <LoRa_write>
			}

		// DIO mapping:   --> DIO: RxDone
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d110      	bne.n	8000e4c <LoRa_init+0x19a>
				read = LoRa_read(_LoRa, RegDioMapping1);
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff fdf3 	bl	8000a18 <LoRa_read>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e3c:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	461a      	mov	r2, r3
 8000e42:	2140      	movs	r1, #64	; 0x40
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fe01 	bl	8000a4c <LoRa_write>
 8000e4a:	e00f      	b.n	8000e6c <LoRa_init+0x1ba>
			}
			else {
				// DIO2: RxDone
				read = LoRa_read(_LoRa, RegDioMapping1);
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff fde2 	bl	8000a18 <LoRa_read>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000e5e:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 8000e60:	7bbb      	ldrb	r3, [r7, #14]
 8000e62:	461a      	mov	r2, r3
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff fdf0 	bl	8000a4c <LoRa_write>
			}


		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff fb73 	bl	800055a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000e7a:	200a      	movs	r0, #10
 8000e7c:	f000 fea4 	bl	8001bc8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000e80:	2142      	movs	r1, #66	; 0x42
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff fdc8 	bl	8000a18 <LoRa_read>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d101      	bne.n	8000e96 <LoRa_init+0x1e4>
				return LORA_OK;
 8000e92:	23c8      	movs	r3, #200	; 0xc8
 8000e94:	e004      	b.n	8000ea0 <LoRa_init+0x1ee>
			else
				return LORA_NOT_FOUND;
 8000e96:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000e9a:	e001      	b.n	8000ea0 <LoRa_init+0x1ee>
	}
	else {
		return LORA_UNAVAILABLE;
 8000e9c:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <LoRa_received_bytes>:
		description : check number of bytes available in FIFO RX buffer
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : 8 bit integer, number of bytes available to read from FIFO RX buffer
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_received_bytes(LoRa* _LoRa) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	return LoRa_read(_LoRa, RegRxNbBytes);
 8000eb0:	2113      	movs	r1, #19
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fdb0 	bl	8000a18 <LoRa_read>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <debug_print>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
LoRa LoRaClass;
uint8_t RF_available_bytes = 0;

void debug_print(char* packet, size_t length) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
	#ifdef DEBUG
	CDC_Transmit_HS(packet, length);
 8000ecc:	6839      	ldr	r1, [r7, #0]
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f009 fb2a 	bl	800a528 <CDC_Transmit_HS>
	#endif
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <Blocking_LED_Blink>:

void Blocking_LED_Blink(uint8_t freq) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
	while(1) {
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2104      	movs	r1, #4
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <Blocking_LED_Blink+0x40>)
 8000eec:	f001 fcba 	bl	8002864 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ef6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fe64 	bl	8001bc8 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000f00:	2200      	movs	r2, #0
 8000f02:	2104      	movs	r1, #4
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <Blocking_LED_Blink+0x40>)
 8000f06:	f001 fcad 	bl	8002864 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f10:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fe57 	bl	8001bc8 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000f1a:	e7e4      	b.n	8000ee6 <Blocking_LED_Blink+0xa>
 8000f1c:	40020c00 	.word	0x40020c00

08000f20 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LoRaClass.DIO0_pin){
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f2c:	8a9b      	ldrh	r3, [r3, #20]
 8000f2e:	88fa      	ldrh	r2, [r7, #6]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d106      	bne.n	8000f42 <HAL_GPIO_EXTI_Callback+0x22>
		RF_available_bytes = LoRa_received_bytes(&LoRaClass);
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000f36:	f7ff ffb7 	bl	8000ea8 <LoRa_received_bytes>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <HAL_GPIO_EXTI_Callback+0x30>)
 8000f40:	701a      	strb	r2, [r3, #0]
	}
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000320 	.word	0x20000320
 8000f50:	20000350 	.word	0x20000350

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b092      	sub	sp, #72	; 0x48
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8000f5a:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <main+0x14c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 fada 	bl	8001518 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f64:	f000 fdbe 	bl	8001ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f68:	f000 f8ac 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6c:	f000 fa0c 	bl	8001388 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f70:	f000 f996 	bl	80012a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f74:	f000 f9be 	bl	80012f4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000f78:	f000 f90e 	bl	8001198 <MX_SPI1_Init>
  MX_DMA_Init();
 8000f7c:	f000 f9e4 	bl	8001348 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f80:	f000 f940 	bl	8001204 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000f84:	f009 fa12 	bl	800a3ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // LoRa Class definitions
  LoRaClass = newLoRa();
 8000f88:	4c46      	ldr	r4, [pc, #280]	; (80010a4 <main+0x150>)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fa9d 	bl	80004cc <newLoRa>
 8000f92:	4625      	mov	r5, r4
 8000f94:	463c      	mov	r4, r7
 8000f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fa2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  LoRaClass.hSPIx                 = RF_SPI;
 8000fa6:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <main+0x154>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a3e      	ldr	r2, [pc, #248]	; (80010a4 <main+0x150>)
 8000fac:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 8000fae:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <main+0x150>)
 8000fb0:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <main+0x158>)
 8000fb2:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <main+0x150>)
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 8000fba:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <main+0x150>)
 8000fbc:	4a3c      	ldr	r2, [pc, #240]	; (80010b0 <main+0x15c>)
 8000fbe:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <main+0x150>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO0_RF_GPIO_Port;
 8000fc6:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <main+0x150>)
 8000fc8:	4a39      	ldr	r2, [pc, #228]	; (80010b0 <main+0x15c>)
 8000fca:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO0_RF_Pin;
 8000fcc:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <main+0x150>)
 8000fce:	2202      	movs	r2, #2
 8000fd0:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 8000fd2:	4b34      	ldr	r3, [pc, #208]	; (80010a4 <main+0x150>)
 8000fd4:	f240 3293 	movw	r2, #915	; 0x393
 8000fd8:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8000fda:	4b32      	ldr	r3, [pc, #200]	; (80010a4 <main+0x150>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8000fe2:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <main+0x150>)
 8000fe4:	2207      	movs	r2, #7
 8000fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <main+0x150>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8000ff2:	4b2c      	ldr	r3, [pc, #176]	; (80010a4 <main+0x150>)
 8000ff4:	22ff      	movs	r2, #255	; 0xff
 8000ff6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8000ffa:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <main+0x150>)
 8000ffc:	2278      	movs	r2, #120	; 0x78
 8000ffe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 8;		  					// default = 8;
 8001002:	4b28      	ldr	r3, [pc, #160]	; (80010a4 <main+0x150>)
 8001004:	2208      	movs	r2, #8
 8001006:	851a      	strh	r2, [r3, #40]	; 0x28

//  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_SET);

  LoRa_reset(&LoRaClass);
 8001008:	4826      	ldr	r0, [pc, #152]	; (80010a4 <main+0x150>)
 800100a:	f7ff fa88 	bl	800051e <LoRa_reset>
  LoRa_setModulation(&LoRaClass, LORA_MODULATION);
 800100e:	2102      	movs	r1, #2
 8001010:	4824      	ldr	r0, [pc, #144]	; (80010a4 <main+0x150>)
 8001012:	f7ff fb26 	bl	8000662 <LoRa_setModulation>
  uint32_t result = LoRa_init(&LoRaClass);
 8001016:	4823      	ldr	r0, [pc, #140]	; (80010a4 <main+0x150>)
 8001018:	f7ff fe4b 	bl	8000cb2 <LoRa_init>
 800101c:	4603      	mov	r3, r0
 800101e:	647b      	str	r3, [r7, #68]	; 0x44

  if(result == LORA_NOT_FOUND) {
 8001020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001022:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8001026:	d103      	bne.n	8001030 <main+0xdc>
	  Blocking_LED_Blink(1);
 8001028:	2001      	movs	r0, #1
 800102a:	f7ff ff57 	bl	8000edc <Blocking_LED_Blink>
 800102e:	e007      	b.n	8001040 <main+0xec>
  }
  else if(result == LORA_UNAVAILABLE) {
 8001030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001032:	f240 12f7 	movw	r2, #503	; 0x1f7
 8001036:	4293      	cmp	r3, r2
 8001038:	d102      	bne.n	8001040 <main+0xec>
	  Blocking_LED_Blink(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff ff4e 	bl	8000edc <Blocking_LED_Blink>
  }

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <main+0x150>)
 8001042:	f7ff fdca 	bl	8000bda <LoRa_startReceiving>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(RF_available_bytes) {
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <main+0x160>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d018      	beq.n	8001080 <main+0x12c>
		  // Bytes in buffer
		  LoRa_receive(&LoRaClass, RF_RX_Buff, RF_available_bytes);
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <main+0x160>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	4918      	ldr	r1, [pc, #96]	; (80010b8 <main+0x164>)
 8001056:	4813      	ldr	r0, [pc, #76]	; (80010a4 <main+0x150>)
 8001058:	f7ff fdcb 	bl	8000bf2 <LoRa_receive>
		  RF_available_bytes = 0;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <main+0x160>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]

		  // Extract header
		  uint8_t header = RF_RX_Buff[0];
 8001062:	4b15      	ldr	r3, [pc, #84]	; (80010b8 <main+0x164>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		  switch(header) {
 800106a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800106e:	2b01      	cmp	r3, #1
 8001070:	d001      	beq.n	8001076 <main+0x122>
 8001072:	2b02      	cmp	r3, #2
		  case 0x01:
			  debug_print("Received packet type 1\r\n", sizeof("Received packet type 1\r\n"));
			  break;
		  case 0x02:

			  break;
 8001074:	e005      	b.n	8001082 <main+0x12e>
			  debug_print("Received packet type 1\r\n", sizeof("Received packet type 1\r\n"));
 8001076:	2119      	movs	r1, #25
 8001078:	4810      	ldr	r0, [pc, #64]	; (80010bc <main+0x168>)
 800107a:	f7ff ff22 	bl	8000ec2 <debug_print>
			  break;
 800107e:	e000      	b.n	8001082 <main+0x12e>
		  }
	  }
 8001080:	bf00      	nop
	  char send_buff[] = "hello world\r\n";
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <main+0x16c>)
 8001084:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001088:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800108a:	c407      	stmia	r4!, {r0, r1, r2}
 800108c:	8023      	strh	r3, [r4, #0]
	  LoRa_transmit(&LoRaClass, send_buff, sizeof(send_buff), 1000);
 800108e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	220e      	movs	r2, #14
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <main+0x150>)
 800109a:	f7ff fd46 	bl	8000b2a <LoRa_transmit>
  {
 800109e:	e7d2      	b.n	8001046 <main+0xf2>
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000320 	.word	0x20000320
 80010a8:	20000004 	.word	0x20000004
 80010ac:	40020000 	.word	0x40020000
 80010b0:	40020400 	.word	0x40020400
 80010b4:	20000350 	.word	0x20000350
 80010b8:	2000030c 	.word	0x2000030c
 80010bc:	0800b6ec 	.word	0x0800b6ec
 80010c0:	0800b708 	.word	0x0800b708

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	; 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f009 feb0 	bl	800ae38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <SystemClock_Config+0xcc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	4a27      	ldr	r2, [pc, #156]	; (8001190 <SystemClock_Config+0xcc>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <SystemClock_Config+0xcc>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <SystemClock_Config+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <SystemClock_Config+0xd0>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <SystemClock_Config+0xd0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001134:	230c      	movs	r3, #12
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001138:	23a8      	movs	r3, #168	; 0xa8
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001140:	2307      	movs	r3, #7
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fe3b 	bl	8003dc4 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001154:	f000 f9da 	bl	800150c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001164:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2105      	movs	r1, #5
 8001176:	4618      	mov	r0, r3
 8001178:	f003 f89c 	bl	80042b4 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001182:	f000 f9c3 	bl	800150c <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <MX_SPI1_Init+0x64>)
 800119e:	4a18      	ldr	r2, [pc, #96]	; (8001200 <MX_SPI1_Init+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_SPI1_Init+0x64>)
 80011a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <MX_SPI1_Init+0x64>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_SPI1_Init+0x64>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_SPI1_Init+0x64>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_SPI1_Init+0x64>)
 80011c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_SPI1_Init+0x64>)
 80011cc:	2230      	movs	r2, #48	; 0x30
 80011ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_SPI1_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_SPI1_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_SPI1_Init+0x64>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_SPI1_Init+0x64>)
 80011e4:	220a      	movs	r2, #10
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_SPI1_Init+0x64>)
 80011ea:	f003 fa43 	bl	8004674 <HAL_SPI_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011f4:	f000 f98a 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000184 	.word	0x20000184
 8001200:	40013000 	.word	0x40013000

08001204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0308 	add.w	r3, r7, #8
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <MX_TIM2_Init+0x98>)
 8001222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001226:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2500;
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <MX_TIM2_Init+0x98>)
 800122a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800122e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <MX_TIM2_Init+0x98>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <MX_TIM2_Init+0x98>)
 8001238:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800123c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <MX_TIM2_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001244:	4b15      	ldr	r3, [pc, #84]	; (800129c <MX_TIM2_Init+0x98>)
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124a:	4814      	ldr	r0, [pc, #80]	; (800129c <MX_TIM2_Init+0x98>)
 800124c:	f003 ffc8 	bl	80051e0 <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001256:	f000 f959 	bl	800150c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_TIM2_Init+0x98>)
 8001268:	f004 f911 	bl	800548e <HAL_TIM_ConfigClockSource>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001272:	f000 f94b 	bl	800150c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4619      	mov	r1, r3
 8001282:	4806      	ldr	r0, [pc, #24]	; (800129c <MX_TIM2_Init+0x98>)
 8001284:	f004 fb36 	bl	80058f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800128e:	f000 f93d 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200001dc 	.word	0x200001dc

080012a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_USART1_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012ac:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80012b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012d8:	f004 fb9c 	bl	8005a14 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012e2:	f000 f913 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000224 	.word	0x20000224
 80012f0:	40011000 	.word	0x40011000

080012f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_USART2_UART_Init+0x50>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001300:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001320:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001324:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800132e:	f004 fb71 	bl	8005a14 <HAL_UART_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001338:	f000 f8e8 	bl	800150c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000268 	.word	0x20000268
 8001344:	40004400 	.word	0x40004400

08001348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_DMA_Init+0x3c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <MX_DMA_Init+0x3c>)
 8001358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_DMA_Init+0x3c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	203a      	movs	r0, #58	; 0x3a
 8001370:	f000 fd29 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001374:	203a      	movs	r0, #58	; 0x3a
 8001376:	f000 fd42 	bl	8001dfe <HAL_NVIC_EnableIRQ>

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023800 	.word	0x40023800

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b56      	ldr	r3, [pc, #344]	; (80014fc <MX_GPIO_Init+0x174>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a55      	ldr	r2, [pc, #340]	; (80014fc <MX_GPIO_Init+0x174>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b53      	ldr	r3, [pc, #332]	; (80014fc <MX_GPIO_Init+0x174>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b4f      	ldr	r3, [pc, #316]	; (80014fc <MX_GPIO_Init+0x174>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a4e      	ldr	r2, [pc, #312]	; (80014fc <MX_GPIO_Init+0x174>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <MX_GPIO_Init+0x174>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4b48      	ldr	r3, [pc, #288]	; (80014fc <MX_GPIO_Init+0x174>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a47      	ldr	r2, [pc, #284]	; (80014fc <MX_GPIO_Init+0x174>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b45      	ldr	r3, [pc, #276]	; (80014fc <MX_GPIO_Init+0x174>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <MX_GPIO_Init+0x174>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a40      	ldr	r2, [pc, #256]	; (80014fc <MX_GPIO_Init+0x174>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <MX_GPIO_Init+0x174>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <MX_GPIO_Init+0x174>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a39      	ldr	r2, [pc, #228]	; (80014fc <MX_GPIO_Init+0x174>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <MX_GPIO_Init+0x174>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2110      	movs	r1, #16
 800142e:	4834      	ldr	r0, [pc, #208]	; (8001500 <MX_GPIO_Init+0x178>)
 8001430:	f001 fa18 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	2101      	movs	r1, #1
 8001438:	4832      	ldr	r0, [pc, #200]	; (8001504 <MX_GPIO_Init+0x17c>)
 800143a:	f001 fa13 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2104      	movs	r1, #4
 8001442:	4831      	ldr	r0, [pc, #196]	; (8001508 <MX_GPIO_Init+0x180>)
 8001444:	f001 fa0e 	bl	8002864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_NSS_Pin;
 8001448:	2310      	movs	r3, #16
 800144a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4828      	ldr	r0, [pc, #160]	; (8001500 <MX_GPIO_Init+0x178>)
 8001460:	f001 f864 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 8001464:	2301      	movs	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	4822      	ldr	r0, [pc, #136]	; (8001504 <MX_GPIO_Init+0x17c>)
 800147c:	f001 f856 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 8001480:	f643 4302 	movw	r3, #15362	; 0x3c02
 8001484:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001486:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800148a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	481b      	ldr	r0, [pc, #108]	; (8001504 <MX_GPIO_Init+0x17c>)
 8001498:	f001 f848 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 800149c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4813      	ldr	r0, [pc, #76]	; (8001500 <MX_GPIO_Init+0x178>)
 80014b4:	f001 f83a 	bl	800252c <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 80014b8:	2304      	movs	r3, #4
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4619      	mov	r1, r3
 80014ce:	480e      	ldr	r0, [pc, #56]	; (8001508 <MX_GPIO_Init+0x180>)
 80014d0:	f001 f82c 	bl	800252c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2007      	movs	r0, #7
 80014da:	f000 fc74 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014de:	2007      	movs	r0, #7
 80014e0:	f000 fc8d 	bl	8001dfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2028      	movs	r0, #40	; 0x28
 80014ea:	f000 fc6c 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014ee:	2028      	movs	r0, #40	; 0x28
 80014f0:	f000 fc85 	bl	8001dfe <HAL_NVIC_EnableIRQ>

}
 80014f4:	bf00      	nop
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020c00 	.word	0x40020c00

0800150c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001510:	b672      	cpsid	i
}
 8001512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001514:	e7fe      	b.n	8001514 <Error_Handler+0x8>
	...

08001518 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <RetargetInit+0x28>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <RetargetInit+0x2c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6898      	ldr	r0, [r3, #8]
 800152c:	2300      	movs	r3, #0
 800152e:	2202      	movs	r2, #2
 8001530:	2100      	movs	r1, #0
 8001532:	f009 fc89 	bl	800ae48 <setvbuf>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000354 	.word	0x20000354
 8001544:	20000104 	.word	0x20000104

08001548 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d002      	beq.n	8001560 <_write+0x18>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d111      	bne.n	8001584 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <_write+0x54>)
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	b29a      	uxth	r2, r3
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	f004 fa9e 	bl	8005aae <HAL_UART_Transmit>
 8001572:	4603      	mov	r3, r0
 8001574:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001576:	7dfb      	ldrb	r3, [r7, #23]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <_write+0x38>
      return len;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	e008      	b.n	8001592 <_write+0x4a>
    else
      return EIO;
 8001580:	2305      	movs	r3, #5
 8001582:	e006      	b.n	8001592 <_write+0x4a>
  }
  errno = EBADF;
 8001584:	f009 fc2e 	bl	800ade4 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	2209      	movs	r2, #9
 800158c:	601a      	str	r2, [r3, #0]
  return -1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000354 	.word	0x20000354

080015a0 <_close>:

int _close(int fd) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db04      	blt.n	80015b8 <_close+0x18>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	dc01      	bgt.n	80015b8 <_close+0x18>
    return 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e006      	b.n	80015c6 <_close+0x26>

  errno = EBADF;
 80015b8:	f009 fc14 	bl	800ade4 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	2209      	movs	r2, #9
 80015c0:	601a      	str	r2, [r3, #0]
  return -1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80015da:	f009 fc03 	bl	800ade4 <__errno>
 80015de:	4603      	mov	r3, r0
 80015e0:	2209      	movs	r2, #9
 80015e2:	601a      	str	r2, [r3, #0]
  return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_read>:

int _read(int fd, char* ptr, int len) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d110      	bne.n	8001624 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <_read+0x4c>)
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	2201      	movs	r2, #1
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	f004 fae0 	bl	8005bd2 <HAL_UART_Receive>
 8001612:	4603      	mov	r3, r0
 8001614:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001616:	7dfb      	ldrb	r3, [r7, #23]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <_read+0x30>
      return 1;
 800161c:	2301      	movs	r3, #1
 800161e:	e008      	b.n	8001632 <_read+0x42>
    else
      return EIO;
 8001620:	2305      	movs	r3, #5
 8001622:	e006      	b.n	8001632 <_read+0x42>
  }
  errno = EBADF;
 8001624:	f009 fbde 	bl	800ade4 <__errno>
 8001628:	4603      	mov	r3, r0
 800162a:	2209      	movs	r2, #9
 800162c:	601a      	str	r2, [r3, #0]
  return -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000354 	.word	0x20000354

08001640 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db08      	blt.n	8001662 <_fstat+0x22>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b02      	cmp	r3, #2
 8001654:	dc05      	bgt.n	8001662 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800165c:	605a      	str	r2, [r3, #4]
    return 0;
 800165e:	2300      	movs	r3, #0
 8001660:	e005      	b.n	800166e <_fstat+0x2e>
  }

  errno = EBADF;
 8001662:	f009 fbbf 	bl	800ade4 <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2209      	movs	r2, #9
 800166a:	601a      	str	r2, [r3, #0]
  return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_MspInit+0x4c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_MspInit+0x4c>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <HAL_MspInit+0x4c>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_MspInit+0x4c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_MspInit+0x4c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_SPI_MspInit+0x84>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d12b      	bne.n	8001742 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	4b18      	ldr	r3, [pc, #96]	; (8001750 <HAL_SPI_MspInit+0x88>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a17      	ldr	r2, [pc, #92]	; (8001750 <HAL_SPI_MspInit+0x88>)
 80016f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_SPI_MspInit+0x88>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_SPI_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_SPI_MspInit+0x88>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_SPI_MspInit+0x88>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001722:	23e0      	movs	r3, #224	; 0xe0
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001732:	2305      	movs	r3, #5
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_SPI_MspInit+0x8c>)
 800173e:	f000 fef5 	bl	800252c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40013000 	.word	0x40013000
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001768:	d115      	bne.n	8001796 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_TIM_Base_MspInit+0x48>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <HAL_TIM_Base_MspInit+0x48>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_TIM_Base_MspInit+0x48>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2102      	movs	r1, #2
 800178a:	201c      	movs	r0, #28
 800178c:	f000 fb1b 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001790:	201c      	movs	r0, #28
 8001792:	f000 fb34 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a52      	ldr	r2, [pc, #328]	; (800190c <HAL_UART_MspInit+0x168>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d164      	bne.n	8001890 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	4b51      	ldr	r3, [pc, #324]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a50      	ldr	r2, [pc, #320]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f003 0310 	and.w	r3, r3, #16
 80017de:	61bb      	str	r3, [r7, #24]
 80017e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	4b4a      	ldr	r3, [pc, #296]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a49      	ldr	r2, [pc, #292]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b47      	ldr	r3, [pc, #284]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017fe:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001810:	2307      	movs	r3, #7
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	483e      	ldr	r0, [pc, #248]	; (8001914 <HAL_UART_MspInit+0x170>)
 800181c:	f000 fe86 	bl	800252c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001820:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001822:	4a3e      	ldr	r2, [pc, #248]	; (800191c <HAL_UART_MspInit+0x178>)
 8001824:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001826:	4b3c      	ldr	r3, [pc, #240]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001828:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800182c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800182e:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_UART_MspInit+0x174>)
 800183c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001840:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001842:	4b35      	ldr	r3, [pc, #212]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001844:	2200      	movs	r2, #0
 8001846:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001848:	4b33      	ldr	r3, [pc, #204]	; (8001918 <HAL_UART_MspInit+0x174>)
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001854:	4b30      	ldr	r3, [pc, #192]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800185a:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <HAL_UART_MspInit+0x174>)
 800185c:	2204      	movs	r2, #4
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001862:	2201      	movs	r2, #1
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001868:	2200      	movs	r2, #0
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_UART_MspInit+0x174>)
 800186e:	2200      	movs	r2, #0
 8001870:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001872:	4829      	ldr	r0, [pc, #164]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001874:	f000 fade 	bl	8001e34 <HAL_DMA_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800187e:	f7ff fe45 	bl	800150c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a24      	ldr	r2, [pc, #144]	; (8001918 <HAL_UART_MspInit+0x174>)
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
 8001888:	4a23      	ldr	r2, [pc, #140]	; (8001918 <HAL_UART_MspInit+0x174>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800188e:	e038      	b.n	8001902 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a22      	ldr	r2, [pc, #136]	; (8001920 <HAL_UART_MspInit+0x17c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d133      	bne.n	8001902 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_UART_MspInit+0x16c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80018d2:	230f      	movs	r3, #15
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	2303      	movs	r3, #3
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e2:	2307      	movs	r3, #7
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e6:	f107 031c 	add.w	r3, r7, #28
 80018ea:	4619      	mov	r1, r3
 80018ec:	4809      	ldr	r0, [pc, #36]	; (8001914 <HAL_UART_MspInit+0x170>)
 80018ee:	f000 fe1d 	bl	800252c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2101      	movs	r1, #1
 80018f6:	2026      	movs	r0, #38	; 0x26
 80018f8:	f000 fa65 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018fc:	2026      	movs	r0, #38	; 0x26
 80018fe:	f000 fa7e 	bl	8001dfe <HAL_NVIC_EnableIRQ>
}
 8001902:	bf00      	nop
 8001904:	3730      	adds	r7, #48	; 0x30
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40011000 	.word	0x40011000
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000
 8001918:	200002ac 	.word	0x200002ac
 800191c:	40026440 	.word	0x40026440
 8001920:	40004400 	.word	0x40004400

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <NMI_Handler+0x4>

0800192a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <HardFault_Handler+0x4>

08001930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <MemManage_Handler+0x4>

08001936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193a:	e7fe      	b.n	800193a <BusFault_Handler+0x4>

0800193c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001940:	e7fe      	b.n	8001940 <UsageFault_Handler+0x4>

08001942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001970:	f000 f90a 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	bd80      	pop	{r7, pc}

08001978 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO0_RF_Pin);
 800197c:	2002      	movs	r0, #2
 800197e:	f000 ff8b 	bl	8002898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800198c:	4802      	ldr	r0, [pc, #8]	; (8001998 <TIM2_IRQHandler+0x10>)
 800198e:	f003 fc76 	bl	800527e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	200001dc 	.word	0x200001dc

0800199c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <USART2_IRQHandler+0x10>)
 80019a2:	f004 f9b9 	bl	8005d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000268 	.word	0x20000268

080019b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO1_RF_Pin);
 80019b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019b8:	f000 ff6e 	bl	8002898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO2_RF_Pin);
 80019bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019c0:	f000 ff6a 	bl	8002898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO3_RF_Pin);
 80019c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019c8:	f000 ff66 	bl	8002898 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO4_RF_Pin);
 80019cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019d0:	f000 ff62 	bl	8002898 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <DMA2_Stream2_IRQHandler+0x10>)
 80019de:	f000 fb69 	bl	80020b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200002ac 	.word	0x200002ac

080019ec <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <OTG_HS_IRQHandler+0x10>)
 80019f2:	f001 f8b9 	bl	8002b68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20001840 	.word	0x20001840

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d207      	bcs.n	8001a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a30:	f009 f9d8 	bl	800ade4 <__errno>
 8001a34:	4603      	mov	r3, r0
 8001a36:	220c      	movs	r2, #12
 8001a38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	e009      	b.n	8001a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <_sbrk+0x64>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <_sbrk+0x64>)
 8001a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20020000 	.word	0x20020000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	20000358 	.word	0x20000358
 8001a68:	20001f80 	.word	0x20001f80

08001a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <SystemInit+0x20>)
 8001a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <SystemInit+0x20>)
 8001a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a94:	480d      	ldr	r0, [pc, #52]	; (8001acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a96:	490e      	ldr	r1, [pc, #56]	; (8001ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a98:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a9c:	e002      	b.n	8001aa4 <LoopCopyDataInit>

08001a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa2:	3304      	adds	r3, #4

08001aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa8:	d3f9      	bcc.n	8001a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aac:	4c0b      	ldr	r4, [pc, #44]	; (8001adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab0:	e001      	b.n	8001ab6 <LoopFillZerobss>

08001ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab4:	3204      	adds	r2, #4

08001ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab8:	d3fb      	bcc.n	8001ab2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aba:	f7ff ffd7 	bl	8001a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001abe:	f009 f997 	bl	800adf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac2:	f7ff fa47 	bl	8000f54 <main>
  bx  lr    
 8001ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad0:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001ad4:	0800b7f4 	.word	0x0800b7f4
  ldr r2, =_sbss
 8001ad8:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001adc:	20001f7c 	.word	0x20001f7c

08001ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae0:	e7fe      	b.n	8001ae0 <ADC_IRQHandler>
	...

08001ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae8:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_Init+0x40>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0d      	ldr	r2, [pc, #52]	; (8001b24 <HAL_Init+0x40>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_Init+0x40>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_Init+0x40>)
 8001afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_Init+0x40>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <HAL_Init+0x40>)
 8001b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f94f 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fdae 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023c00 	.word	0x40023c00

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f967 	bl	8001e1a <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f92f 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	; (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	20000010 	.word	0x20000010
 8001b84:	2000000c 	.word	0x2000000c

08001b88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <HAL_IncTick+0x20>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x24>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a04      	ldr	r2, [pc, #16]	; (8001bac <HAL_IncTick+0x24>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000010 	.word	0x20000010
 8001bac:	2000035c 	.word	0x2000035c

08001bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_GetTick+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	2000035c 	.word	0x2000035c

08001bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd0:	f7ff ffee 	bl	8001bb0 <HAL_GetTick>
 8001bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be0:	d005      	beq.n	8001bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_Delay+0x44>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bee:	bf00      	nop
 8001bf0:	f7ff ffde 	bl	8001bb0 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d8f7      	bhi.n	8001bf0 <HAL_Delay+0x28>
  {
  }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000010 	.word	0x20000010

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	; (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff29 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff3e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff31 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff feb6 	bl	8001bb0 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e099      	b.n	8001f84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e70:	e00f      	b.n	8001e92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e72:	f7ff fe9d 	bl	8001bb0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d908      	bls.n	8001e92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e078      	b.n	8001f84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e8      	bne.n	8001e72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <HAL_DMA_Init+0x158>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d107      	bne.n	8001efc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f023 0307 	bic.w	r3, r3, #7
 8001f12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d117      	bne.n	8001f56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fa7b 	bl	8002434 <DMA_CheckFifoParam>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2240      	movs	r2, #64	; 0x40
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f52:	2301      	movs	r3, #1
 8001f54:	e016      	b.n	8001f84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fa32 	bl	80023c8 <DMA_CalcBaseAndBitshift>
 8001f64:	4603      	mov	r3, r0
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	223f      	movs	r2, #63	; 0x3f
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	f010803f 	.word	0xf010803f

08001f90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f9e:	f7ff fe07 	bl	8001bb0 <HAL_GetTick>
 8001fa2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d008      	beq.n	8001fc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e052      	b.n	8002068 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0216 	bic.w	r2, r2, #22
 8001fd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <HAL_DMA_Abort+0x62>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0208 	bic.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0201 	bic.w	r2, r2, #1
 8002010:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002012:	e013      	b.n	800203c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002014:	f7ff fdcc 	bl	8001bb0 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b05      	cmp	r3, #5
 8002020:	d90c      	bls.n	800203c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2220      	movs	r2, #32
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2203      	movs	r2, #3
 800202c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e015      	b.n	8002068 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1e4      	bne.n	8002014 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	223f      	movs	r2, #63	; 0x3f
 8002050:	409a      	lsls	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d004      	beq.n	800208e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2280      	movs	r2, #128	; 0x80
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e00c      	b.n	80020a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2205      	movs	r2, #5
 8002092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0201 	bic.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c0:	4b8e      	ldr	r3, [pc, #568]	; (80022fc <HAL_DMA_IRQHandler+0x248>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a8e      	ldr	r2, [pc, #568]	; (8002300 <HAL_DMA_IRQHandler+0x24c>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0a9b      	lsrs	r3, r3, #10
 80020cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2208      	movs	r2, #8
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d01a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210c:	2208      	movs	r2, #8
 800210e:	409a      	lsls	r2, r3
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002124:	2201      	movs	r2, #1
 8002126:	409a      	lsls	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d012      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002142:	2201      	movs	r2, #1
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	f043 0202 	orr.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	2204      	movs	r2, #4
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	2204      	movs	r2, #4
 800217a:	409a      	lsls	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	2210      	movs	r2, #16
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d043      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d03c      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2210      	movs	r2, #16
 80021b0:	409a      	lsls	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d018      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d108      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d024      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e01f      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
 80021f4:	e016      	b.n	8002224 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0208 	bic.w	r2, r2, #8
 8002212:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2220      	movs	r2, #32
 800222a:	409a      	lsls	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 808f 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8087 	beq.w	8002354 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	2220      	movs	r2, #32
 800224c:	409a      	lsls	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b05      	cmp	r3, #5
 800225c:	d136      	bne.n	80022cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0216 	bic.w	r2, r2, #22
 800226c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_DMA_IRQHandler+0x1da>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0208 	bic.w	r2, r2, #8
 800229c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a2:	223f      	movs	r2, #63	; 0x3f
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07e      	beq.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	4798      	blx	r3
        }
        return;
 80022ca:	e079      	b.n	80023c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01d      	beq.n	8002316 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d031      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
 80022f8:	e02c      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
 80022fa:	bf00      	nop
 80022fc:	20000008 	.word	0x20000008
 8002300:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	2b00      	cmp	r3, #0
 800230a:	d023      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
 8002314:	e01e      	b.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0210 	bic.w	r2, r2, #16
 8002332:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002358:	2b00      	cmp	r3, #0
 800235a:	d032      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b00      	cmp	r3, #0
 8002366:	d022      	beq.n	80023ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2205      	movs	r2, #5
 800236c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3301      	adds	r3, #1
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	d307      	bcc.n	800239c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f2      	bne.n	8002380 <HAL_DMA_IRQHandler+0x2cc>
 800239a:	e000      	b.n	800239e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800239c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
 80023be:	e000      	b.n	80023c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023c0:	bf00      	nop
    }
  }
}
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3b10      	subs	r3, #16
 80023d8:	4a14      	ldr	r2, [pc, #80]	; (800242c <DMA_CalcBaseAndBitshift+0x64>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023e2:	4a13      	ldr	r2, [pc, #76]	; (8002430 <DMA_CalcBaseAndBitshift+0x68>)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d909      	bls.n	800240a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	1d1a      	adds	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	659a      	str	r2, [r3, #88]	; 0x58
 8002408:	e007      	b.n	800241a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	aaaaaaab 	.word	0xaaaaaaab
 8002430:	0800b778 	.word	0x0800b778

08002434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243c:	2300      	movs	r3, #0
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d11f      	bne.n	800248e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d856      	bhi.n	8002502 <DMA_CheckFifoParam+0xce>
 8002454:	a201      	add	r2, pc, #4	; (adr r2, 800245c <DMA_CheckFifoParam+0x28>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	0800246d 	.word	0x0800246d
 8002460:	0800247f 	.word	0x0800247f
 8002464:	0800246d 	.word	0x0800246d
 8002468:	08002503 	.word	0x08002503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d046      	beq.n	8002506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247c:	e043      	b.n	8002506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002486:	d140      	bne.n	800250a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800248c:	e03d      	b.n	800250a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002496:	d121      	bne.n	80024dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b03      	cmp	r3, #3
 800249c:	d837      	bhi.n	800250e <DMA_CheckFifoParam+0xda>
 800249e:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <DMA_CheckFifoParam+0x70>)
 80024a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	080024bb 	.word	0x080024bb
 80024ac:	080024b5 	.word	0x080024b5
 80024b0:	080024cd 	.word	0x080024cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e030      	b.n	800251c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d025      	beq.n	8002512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ca:	e022      	b.n	8002512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024d4:	d11f      	bne.n	8002516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024da:	e01c      	b.n	8002516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d903      	bls.n	80024ea <DMA_CheckFifoParam+0xb6>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d003      	beq.n	80024f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024e8:	e018      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
      break;
 80024ee:	e015      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002500:	e00b      	b.n	800251a <DMA_CheckFifoParam+0xe6>
      break;
 8002502:	bf00      	nop
 8002504:	e00a      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
 8002508:	e008      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800250a:	bf00      	nop
 800250c:	e006      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e004      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e002      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;   
 8002516:	bf00      	nop
 8002518:	e000      	b.n	800251c <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
    }
  } 
  
  return status; 
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop

0800252c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800252c:	b480      	push	{r7}
 800252e:	b089      	sub	sp, #36	; 0x24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	e16b      	b.n	8002820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	4013      	ands	r3, r2
 800255a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	f040 815a 	bne.w	800281a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b01      	cmp	r3, #1
 8002570:	d005      	beq.n	800257e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257a:	2b02      	cmp	r3, #2
 800257c:	d130      	bne.n	80025e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b4:	2201      	movs	r2, #1
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 0201 	and.w	r2, r3, #1
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d017      	beq.n	800261c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d123      	bne.n	8002670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	08da      	lsrs	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3208      	adds	r2, #8
 8002630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	220f      	movs	r2, #15
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	08da      	lsrs	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3208      	adds	r2, #8
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0203 	and.w	r2, r3, #3
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80b4 	beq.w	800281a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b60      	ldr	r3, [pc, #384]	; (8002838 <HAL_GPIO_Init+0x30c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	4a5f      	ldr	r2, [pc, #380]	; (8002838 <HAL_GPIO_Init+0x30c>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c0:	6453      	str	r3, [r2, #68]	; 0x44
 80026c2:	4b5d      	ldr	r3, [pc, #372]	; (8002838 <HAL_GPIO_Init+0x30c>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ce:	4a5b      	ldr	r2, [pc, #364]	; (800283c <HAL_GPIO_Init+0x310>)
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0303 	and.w	r3, r3, #3
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	220f      	movs	r2, #15
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a52      	ldr	r2, [pc, #328]	; (8002840 <HAL_GPIO_Init+0x314>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02b      	beq.n	8002752 <HAL_GPIO_Init+0x226>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a51      	ldr	r2, [pc, #324]	; (8002844 <HAL_GPIO_Init+0x318>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d025      	beq.n	800274e <HAL_GPIO_Init+0x222>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a50      	ldr	r2, [pc, #320]	; (8002848 <HAL_GPIO_Init+0x31c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d01f      	beq.n	800274a <HAL_GPIO_Init+0x21e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a4f      	ldr	r2, [pc, #316]	; (800284c <HAL_GPIO_Init+0x320>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d019      	beq.n	8002746 <HAL_GPIO_Init+0x21a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a4e      	ldr	r2, [pc, #312]	; (8002850 <HAL_GPIO_Init+0x324>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d013      	beq.n	8002742 <HAL_GPIO_Init+0x216>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4d      	ldr	r2, [pc, #308]	; (8002854 <HAL_GPIO_Init+0x328>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_GPIO_Init+0x212>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4c      	ldr	r2, [pc, #304]	; (8002858 <HAL_GPIO_Init+0x32c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d007      	beq.n	800273a <HAL_GPIO_Init+0x20e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_GPIO_Init+0x330>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_GPIO_Init+0x20a>
 8002732:	2307      	movs	r3, #7
 8002734:	e00e      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002736:	2308      	movs	r3, #8
 8002738:	e00c      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800273a:	2306      	movs	r3, #6
 800273c:	e00a      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800273e:	2305      	movs	r3, #5
 8002740:	e008      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002742:	2304      	movs	r3, #4
 8002744:	e006      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002746:	2303      	movs	r3, #3
 8002748:	e004      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800274a:	2302      	movs	r3, #2
 800274c:	e002      	b.n	8002754 <HAL_GPIO_Init+0x228>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_GPIO_Init+0x228>
 8002752:	2300      	movs	r3, #0
 8002754:	69fa      	ldr	r2, [r7, #28]
 8002756:	f002 0203 	and.w	r2, r2, #3
 800275a:	0092      	lsls	r2, r2, #2
 800275c:	4093      	lsls	r3, r2
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002764:	4935      	ldr	r1, [pc, #212]	; (800283c <HAL_GPIO_Init+0x310>)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002772:	4b3b      	ldr	r3, [pc, #236]	; (8002860 <HAL_GPIO_Init+0x334>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002796:	4a32      	ldr	r2, [pc, #200]	; (8002860 <HAL_GPIO_Init+0x334>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800279c:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_GPIO_Init+0x334>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <HAL_GPIO_Init+0x334>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_GPIO_Init+0x334>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ea:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_GPIO_Init+0x334>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_GPIO_Init+0x334>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002814:	4a12      	ldr	r2, [pc, #72]	; (8002860 <HAL_GPIO_Init+0x334>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b0f      	cmp	r3, #15
 8002824:	f67f ae90 	bls.w	8002548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40023800 	.word	0x40023800
 800283c:	40013800 	.word	0x40013800
 8002840:	40020000 	.word	0x40020000
 8002844:	40020400 	.word	0x40020400
 8002848:	40020800 	.word	0x40020800
 800284c:	40020c00 	.word	0x40020c00
 8002850:	40021000 	.word	0x40021000
 8002854:	40021400 	.word	0x40021400
 8002858:	40021800 	.word	0x40021800
 800285c:	40021c00 	.word	0x40021c00
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
 8002870:	4613      	mov	r3, r2
 8002872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002874:	787b      	ldrb	r3, [r7, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800287a:	887a      	ldrh	r2, [r7, #2]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002880:	e003      	b.n	800288a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002882:	887b      	ldrh	r3, [r7, #2]
 8002884:	041a      	lsls	r2, r3, #16
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
	...

08002898 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ae:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fb32 	bl	8000f20 <HAL_GPIO_EXTI_Callback>
  }
}
 80028bc:	bf00      	nop
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40013c00 	.word	0x40013c00

080028c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ca:	b08f      	sub	sp, #60	; 0x3c
 80028cc:	af0a      	add	r7, sp, #40	; 0x28
 80028ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e10f      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d106      	bne.n	80028fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f007 ff5f 	bl	800a7b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2203      	movs	r2, #3
 80028fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fa46 	bl	8006daa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	603b      	str	r3, [r7, #0]
 8002924:	687e      	ldr	r6, [r7, #4]
 8002926:	466d      	mov	r5, sp
 8002928:	f106 0410 	add.w	r4, r6, #16
 800292c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800292e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002938:	e885 0003 	stmia.w	r5, {r0, r1}
 800293c:	1d33      	adds	r3, r6, #4
 800293e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002940:	6838      	ldr	r0, [r7, #0]
 8002942:	f004 f91d 	bl	8006b80 <USB_CoreInit>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0d0      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f004 fa34 	bl	8006dcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
 8002968:	e04a      	b.n	8002a00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	333d      	adds	r3, #61	; 0x3d
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	333c      	adds	r3, #60	; 0x3c
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	b298      	uxth	r0, r3
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3344      	adds	r3, #68	; 0x44
 80029a6:	4602      	mov	r2, r0
 80029a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3340      	adds	r3, #64	; 0x40
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3348      	adds	r3, #72	; 0x48
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	334c      	adds	r3, #76	; 0x4c
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029e6:	7bfa      	ldrb	r2, [r7, #15]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3354      	adds	r3, #84	; 0x54
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	3301      	adds	r3, #1
 80029fe:	73fb      	strb	r3, [r7, #15]
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d3af      	bcc.n	800296a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	e044      	b.n	8002a9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a22:	2200      	movs	r2, #0
 8002a24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a3c:	7bfa      	ldrb	r2, [r7, #15]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a7e:	7bfa      	ldrb	r2, [r7, #15]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	3301      	adds	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3b5      	bcc.n	8002a10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	687e      	ldr	r6, [r7, #4]
 8002aac:	466d      	mov	r5, sp
 8002aae:	f106 0410 	add.w	r4, r6, #16
 8002ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ac2:	1d33      	adds	r3, r6, #4
 8002ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f004 f9cc 	bl	8006e64 <USB_DevInit>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00d      	b.n	8002afa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f005 fb1b 	bl	800812e <USB_DevDisconnect>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_Start+0x1c>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e020      	b.n	8002b60 <HAL_PCD_Start+0x5e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d109      	bne.n	8002b42 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d005      	beq.n	8002b42 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f004 f91e 	bl	8006d88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f005 facb 	bl	80080ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b08d      	sub	sp, #52	; 0x34
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b76:	6a3b      	ldr	r3, [r7, #32]
 8002b78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f005 fb89 	bl	8008296 <USB_GetMode>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 848a 	bne.w	80034a0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f005 faed 	bl	8008170 <USB_ReadInterrupts>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8480 	beq.w	800349e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f005 fada 	bl	8008170 <USB_ReadInterrupts>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f002 0202 	and.w	r2, r2, #2
 8002bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f005 fac8 	bl	8008170 <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d161      	bne.n	8002cae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0210 	bic.w	r2, r2, #16
 8002bf8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	f003 020f 	and.w	r2, r3, #15
 8002c06:	4613      	mov	r3, r2
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	3304      	adds	r3, #4
 8002c18:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	0c5b      	lsrs	r3, r3, #17
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d124      	bne.n	8002c70 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d035      	beq.n	8002c9e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	6a38      	ldr	r0, [r7, #32]
 8002c46:	f005 f8ff 	bl	8007e48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c56:	441a      	add	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	6a1a      	ldr	r2, [r3, #32]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	091b      	lsrs	r3, r3, #4
 8002c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c68:	441a      	add	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	621a      	str	r2, [r3, #32]
 8002c6e:	e016      	b.n	8002c9e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	0c5b      	lsrs	r3, r3, #17
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d110      	bne.n	8002c9e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c82:	2208      	movs	r2, #8
 8002c84:	4619      	mov	r1, r3
 8002c86:	6a38      	ldr	r0, [r7, #32]
 8002c88:	f005 f8de 	bl	8007e48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c98:	441a      	add	r2, r3
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0210 	orr.w	r2, r2, #16
 8002cac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f005 fa5c 	bl	8008170 <USB_ReadInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cc2:	f040 80a7 	bne.w	8002e14 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f005 fa61 	bl	8008196 <USB_ReadDevAllOutEpInterrupt>
 8002cd4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002cd6:	e099      	b.n	8002e0c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 808e 	beq.w	8002e00 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f005 fa85 	bl	80081fe <USB_ReadDevOutEPInterrupt>
 8002cf4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00c      	beq.n	8002d1a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2301      	movs	r3, #1
 8002d10:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fec3 	bl	8003aa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00c      	beq.n	8002d3e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d30:	461a      	mov	r2, r3
 8002d32:	2308      	movs	r3, #8
 8002d34:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 ff99 	bl	8003c70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d54:	461a      	mov	r2, r3
 8002d56:	2310      	movs	r3, #16
 8002d58:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d030      	beq.n	8002dc6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6c:	2b80      	cmp	r3, #128	; 0x80
 8002d6e:	d109      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d82:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	78db      	ldrb	r3, [r3, #3]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d108      	bne.n	8002db4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2200      	movs	r2, #0
 8002da6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f007 fe04 	bl	800a9bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2320      	movs	r3, #32
 8002de0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d009      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002dfe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	3301      	adds	r3, #1
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f47f af62 	bne.w	8002cd8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f005 f9a9 	bl	8008170 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e28:	f040 80db 	bne.w	8002fe2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 f9ca 	bl	80081ca <USB_ReadDevAllInEpInterrupt>
 8002e36:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e3c:	e0cd      	b.n	8002fda <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80c2 	beq.w	8002fce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 f9f0 	bl	800823a <USB_ReadDevInEPInterrupt>
 8002e5a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d057      	beq.n	8002f16 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69f9      	ldr	r1, [r7, #28]
 8002e82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e86:	4013      	ands	r3, r2
 8002e88:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e96:	461a      	mov	r2, r3
 8002e98:	2301      	movs	r3, #1
 8002e9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d132      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334c      	adds	r3, #76	; 0x4c
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4403      	add	r3, r0
 8002ec4:	3348      	adds	r3, #72	; 0x48
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4419      	add	r1, r3
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4403      	add	r3, r0
 8002ed8:	334c      	adds	r3, #76	; 0x4c
 8002eda:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d113      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x3a2>
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3354      	adds	r3, #84	; 0x54
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d108      	bne.n	8002f0a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f02:	461a      	mov	r2, r3
 8002f04:	2101      	movs	r1, #1
 8002f06:	f005 f9f7 	bl	80082f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	4619      	mov	r1, r3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f007 fcce 	bl	800a8b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2308      	movs	r3, #8
 8002f30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2310      	movs	r3, #16
 8002f4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f64:	461a      	mov	r2, r3
 8002f66:	2340      	movs	r3, #64	; 0x40
 8002f68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d023      	beq.n	8002fbc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f76:	6a38      	ldr	r0, [r7, #32]
 8002f78:	f004 f8d8 	bl	800712c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	3338      	adds	r3, #56	; 0x38
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	78db      	ldrb	r3, [r3, #3]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d108      	bne.n	8002faa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f007 fd1b 	bl	800a9e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2302      	movs	r3, #2
 8002fba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fcdb 	bl	8003984 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	085b      	lsrs	r3, r3, #1
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f47f af2e 	bne.w	8002e3e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f005 f8c2 	bl	8008170 <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ff6:	d122      	bne.n	800303e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003012:	2b01      	cmp	r3, #1
 8003014:	d108      	bne.n	8003028 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800301e:	2100      	movs	r1, #0
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fec3 	bl	8003dac <HAL_PCDEx_LPM_Callback>
 8003026:	e002      	b.n	800302e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f007 fcb9 	bl	800a9a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800303c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f005 f894 	bl	8008170 <USB_ReadInterrupts>
 8003048:	4603      	mov	r3, r0
 800304a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003052:	d112      	bne.n	800307a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d102      	bne.n	800306a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f007 fc75 	bl	800a954 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003078:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f005 f876 	bl	8008170 <USB_ReadInterrupts>
 8003084:	4603      	mov	r3, r0
 8003086:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	f040 80b7 	bne.w	8003200 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2110      	movs	r1, #16
 80030ac:	4618      	mov	r0, r3
 80030ae:	f004 f83d 	bl	800712c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b2:	2300      	movs	r3, #0
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b6:	e046      	b.n	8003146 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030c4:	461a      	mov	r2, r3
 80030c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030dc:	0151      	lsls	r1, r2, #5
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	440a      	add	r2, r1
 80030e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	461a      	mov	r2, r3
 80030fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003110:	0151      	lsls	r1, r2, #5
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	440a      	add	r2, r1
 8003116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800311a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800311e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003130:	0151      	lsls	r1, r2, #5
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	440a      	add	r2, r1
 8003136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800313a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800313e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	3301      	adds	r3, #1
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314c:	429a      	cmp	r2, r3
 800314e:	d3b3      	bcc.n	80030b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003162:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	2b00      	cmp	r3, #0
 800316a:	d016      	beq.n	800319a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800317c:	f043 030b 	orr.w	r3, r3, #11
 8003180:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003192:	f043 030b 	orr.w	r3, r3, #11
 8003196:	6453      	str	r3, [r2, #68]	; 0x44
 8003198:	e015      	b.n	80031c6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c0:	f043 030b 	orr.w	r3, r3, #11
 80031c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031ea:	461a      	mov	r2, r3
 80031ec:	f005 f884 	bl	80082f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80031fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f004 ffb3 	bl	8008170 <USB_ReadInterrupts>
 800320a:	4603      	mov	r3, r0
 800320c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003214:	d124      	bne.n	8003260 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f005 f849 	bl	80082b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f003 fffe 	bl	8007226 <USB_GetDevSpeed>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681c      	ldr	r4, [r3, #0]
 8003236:	f001 f9e9 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800323a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	4620      	mov	r0, r4
 8003246:	f003 fcfd 	bl	8006c44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f007 fb59 	bl	800a902 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800325e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f004 ff83 	bl	8008170 <USB_ReadInterrupts>
 800326a:	4603      	mov	r3, r0
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b08      	cmp	r3, #8
 8003272:	d10a      	bne.n	800328a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f007 fb36 	bl	800a8e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f002 0208 	and.w	r2, r2, #8
 8003288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f004 ff6e 	bl	8008170 <USB_ReadInterrupts>
 8003294:	4603      	mov	r3, r0
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b80      	cmp	r3, #128	; 0x80
 800329c:	d122      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032aa:	2301      	movs	r3, #1
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
 80032ae:	e014      	b.n	80032da <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d105      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 fb27 	bl	8003922 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	3301      	adds	r3, #1
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d3e5      	bcc.n	80032b0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f004 ff41 	bl	8008170 <USB_ReadInterrupts>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032f8:	d13b      	bne.n	8003372 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fa:	2301      	movs	r3, #1
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	e02b      	b.n	8003358 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3340      	adds	r3, #64	; 0x40
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d115      	bne.n	8003352 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003326:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003328:	2b00      	cmp	r3, #0
 800332a:	da12      	bge.n	8003352 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	333f      	adds	r3, #63	; 0x3f
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003348:	b2db      	uxtb	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 fae8 	bl	8003922 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	3301      	adds	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335e:	429a      	cmp	r2, r3
 8003360:	d3ce      	bcc.n	8003300 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f004 fefa 	bl	8008170 <USB_ReadInterrupts>
 800337c:	4603      	mov	r3, r0
 800337e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003382:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003386:	d155      	bne.n	8003434 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003388:	2301      	movs	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	e045      	b.n	800341a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d12e      	bne.n	8003414 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	da2b      	bge.n	8003414 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80033c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d121      	bne.n	8003414 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800340c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003410:	6053      	str	r3, [r2, #4]
            break;
 8003412:	e007      	b.n	8003424 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	3301      	adds	r3, #1
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	429a      	cmp	r2, r3
 8003422:	d3b4      	bcc.n	800338e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695a      	ldr	r2, [r3, #20]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003432:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f004 fe99 	bl	8008170 <USB_ReadInterrupts>
 800343e:	4603      	mov	r3, r0
 8003440:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003448:	d10a      	bne.n	8003460 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f007 fada 	bl	800aa04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800345e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f004 fe83 	bl	8008170 <USB_ReadInterrupts>
 800346a:	4603      	mov	r3, r0
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d115      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b00      	cmp	r3, #0
 8003484:	d002      	beq.n	800348c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f007 faca 	bl	800aa20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	e000      	b.n	80034a0 <HAL_PCD_IRQHandler+0x938>
      return;
 800349e:	bf00      	nop
    }
  }
}
 80034a0:	3734      	adds	r7, #52	; 0x34
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd90      	pop	{r4, r7, pc}

080034a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	460b      	mov	r3, r1
 80034b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_PCD_SetAddress+0x1a>
 80034bc:	2302      	movs	r3, #2
 80034be:	e013      	b.n	80034e8 <HAL_PCD_SetAddress+0x42>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f004 fde1 	bl	80080a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	4608      	mov	r0, r1
 80034fa:	4611      	mov	r1, r2
 80034fc:	461a      	mov	r2, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	70fb      	strb	r3, [r7, #3]
 8003502:	460b      	mov	r3, r1
 8003504:	803b      	strh	r3, [r7, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800350e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da0f      	bge.n	8003536 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	3338      	adds	r3, #56	; 0x38
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	3304      	adds	r3, #4
 800352c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	705a      	strb	r2, [r3, #1]
 8003534:	e00f      	b.n	8003556 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	b2da      	uxtb	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003562:	883a      	ldrh	r2, [r7, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	78ba      	ldrb	r2, [r7, #2]
 800356c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	785b      	ldrb	r3, [r3, #1]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d004      	beq.n	8003580 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003580:	78bb      	ldrb	r3, [r7, #2]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d102      	bne.n	800358c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_PCD_EP_Open+0xaa>
 8003596:	2302      	movs	r3, #2
 8003598:	e00e      	b.n	80035b8 <HAL_PCD_EP_Open+0xc8>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f003 fe61 	bl	8007270 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80035b6:	7afb      	ldrb	r3, [r7, #11]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da0f      	bge.n	80035f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	3338      	adds	r3, #56	; 0x38
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4413      	add	r3, r2
 80035e8:	3304      	adds	r3, #4
 80035ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	705a      	strb	r2, [r3, #1]
 80035f2:	e00f      	b.n	8003614 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 020f 	and.w	r2, r3, #15
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	3304      	adds	r3, #4
 800360c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	b2da      	uxtb	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003626:	2b01      	cmp	r3, #1
 8003628:	d101      	bne.n	800362e <HAL_PCD_EP_Close+0x6e>
 800362a:	2302      	movs	r3, #2
 800362c:	e00e      	b.n	800364c <HAL_PCD_EP_Close+0x8c>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68f9      	ldr	r1, [r7, #12]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 fe9f 	bl	8007380 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607a      	str	r2, [r7, #4]
 800365e:	603b      	str	r3, [r7, #0]
 8003660:	460b      	mov	r3, r1
 8003662:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003664:	7afb      	ldrb	r3, [r7, #11]
 8003666:	f003 020f 	and.w	r2, r3, #15
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4413      	add	r3, r2
 800367a:	3304      	adds	r3, #4
 800367c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2200      	movs	r2, #0
 800368e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2200      	movs	r2, #0
 8003694:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003696:	7afb      	ldrb	r3, [r7, #11]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	b2da      	uxtb	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d102      	bne.n	80036b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	6979      	ldr	r1, [r7, #20]
 80036c8:	f004 f97e 	bl	80079c8 <USB_EP0StartXfer>
 80036cc:	e008      	b.n	80036e0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6818      	ldr	r0, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	6979      	ldr	r1, [r7, #20]
 80036dc:	f003 ff2c 	bl	8007538 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	f003 020f 	and.w	r2, r3, #15
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800370c:	681b      	ldr	r3, [r3, #0]
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	460b      	mov	r3, r1
 8003728:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372a:	7afb      	ldrb	r3, [r7, #11]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3338      	adds	r3, #56	; 0x38
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2201      	movs	r2, #1
 8003758:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800375a:	7afb      	ldrb	r3, [r7, #11]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	b2da      	uxtb	r2, r3
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d102      	bne.n	8003774 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003774:	7afb      	ldrb	r3, [r7, #11]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	6979      	ldr	r1, [r7, #20]
 800378c:	f004 f91c 	bl	80079c8 <USB_EP0StartXfer>
 8003790:	e008      	b.n	80037a4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	6979      	ldr	r1, [r7, #20]
 80037a0:	f003 feca 	bl	8007538 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	f003 020f 	and.w	r2, r3, #15
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d901      	bls.n	80037cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e050      	b.n	800386e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da0f      	bge.n	80037f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	f003 020f 	and.w	r2, r3, #15
 80037da:	4613      	mov	r3, r2
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	3338      	adds	r3, #56	; 0x38
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	4413      	add	r3, r2
 80037e8:	3304      	adds	r3, #4
 80037ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2201      	movs	r2, #1
 80037f0:	705a      	strb	r2, [r3, #1]
 80037f2:	e00d      	b.n	8003810 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	b2da      	uxtb	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_PCD_EP_SetStall+0x82>
 800382c:	2302      	movs	r3, #2
 800382e:	e01e      	b.n	800386e <HAL_PCD_EP_SetStall+0xc0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	4618      	mov	r0, r3
 8003840:	f004 fb5a 	bl	8007ef8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10a      	bne.n	8003864 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	b2d9      	uxtb	r1, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800385e:	461a      	mov	r2, r3
 8003860:	f004 fd4a 	bl	80082f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	f003 020f 	and.w	r2, r3, #15
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	d901      	bls.n	8003894 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e042      	b.n	800391a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003894:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003898:	2b00      	cmp	r3, #0
 800389a:	da0f      	bge.n	80038bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	f003 020f 	and.w	r2, r3, #15
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	3338      	adds	r3, #56	; 0x38
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	4413      	add	r3, r2
 80038b0:	3304      	adds	r3, #4
 80038b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	705a      	strb	r2, [r3, #1]
 80038ba:	e00f      	b.n	80038dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	3304      	adds	r3, #4
 80038d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_PCD_EP_ClrStall+0x86>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e00e      	b.n	800391a <HAL_PCD_EP_ClrStall+0xa4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68f9      	ldr	r1, [r7, #12]
 800390a:	4618      	mov	r0, r3
 800390c:	f004 fb62 	bl	8007fd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3710      	adds	r7, #16
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	460b      	mov	r3, r1
 800392c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800392e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003932:	2b00      	cmp	r3, #0
 8003934:	da0c      	bge.n	8003950 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 020f 	and.w	r2, r3, #15
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	3338      	adds	r3, #56	; 0x38
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	4413      	add	r3, r2
 800394a:	3304      	adds	r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e00c      	b.n	800396a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	f003 020f 	and.w	r2, r3, #15
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	3304      	adds	r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68f9      	ldr	r1, [r7, #12]
 8003970:	4618      	mov	r0, r3
 8003972:	f004 f981 	bl	8007c78 <USB_EPStopXfer>
 8003976:	4603      	mov	r3, r0
 8003978:	72fb      	strb	r3, [r7, #11]

  return ret;
 800397a:	7afb      	ldrb	r3, [r7, #11]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af02      	add	r7, sp, #8
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	3338      	adds	r3, #56	; 0x38
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4413      	add	r3, r2
 80039a8:	3304      	adds	r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d901      	bls.n	80039bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e06c      	b.n	8003a96 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d902      	bls.n	80039d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	3303      	adds	r3, #3
 80039dc:	089b      	lsrs	r3, r3, #2
 80039de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039e0:	e02b      	b.n	8003a3a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d902      	bls.n	80039fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3303      	adds	r3, #3
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6919      	ldr	r1, [r3, #16]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6978      	ldr	r0, [r7, #20]
 8003a1e:	f004 f9d5 	bl	8007dcc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	441a      	add	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	441a      	add	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d809      	bhi.n	8003a64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d203      	bcs.n	8003a64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1be      	bne.n	80039e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d811      	bhi.n	8003a94 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	2201      	movs	r2, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	6939      	ldr	r1, [r7, #16]
 8003a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a90:	4013      	ands	r3, r2
 8003a92:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	333c      	adds	r3, #60	; 0x3c
 8003ab8:	3304      	adds	r3, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d17b      	bne.n	8003bce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d015      	beq.n	8003b0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4a61      	ldr	r2, [pc, #388]	; (8003c68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	f240 80b9 	bls.w	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80b3 	beq.w	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	461a      	mov	r2, r3
 8003b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b08:	6093      	str	r3, [r2, #8]
 8003b0a:	e0a7      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f003 0320 	and.w	r3, r3, #32
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	461a      	mov	r2, r3
 8003b24:	2320      	movs	r3, #32
 8003b26:	6093      	str	r3, [r2, #8]
 8003b28:	e098      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 8093 	bne.w	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4a4b      	ldr	r2, [pc, #300]	; (8003c68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d90f      	bls.n	8003b5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b54:	461a      	mov	r2, r3
 8003b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5a:	6093      	str	r3, [r2, #8]
 8003b5c:	e07e      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3304      	adds	r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	0159      	lsls	r1, r3, #5
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	440b      	add	r3, r1
 8003b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d114      	bne.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2101      	movs	r1, #1
 8003bac:	f004 fba4 	bl	80082f8 <USB_EP0_OutStart>
 8003bb0:	e006      	b.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	441a      	add	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f006 fe58 	bl	800a87c <HAL_PCD_DataOutStageCallback>
 8003bcc:	e046      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	4a26      	ldr	r2, [pc, #152]	; (8003c6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d124      	bne.n	8003c20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf2:	6093      	str	r3, [r2, #8]
 8003bf4:	e032      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f003 0320 	and.w	r3, r3, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2320      	movs	r3, #32
 8003c10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f006 fe2f 	bl	800a87c <HAL_PCD_DataOutStageCallback>
 8003c1e:	e01d      	b.n	8003c5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d114      	bne.n	8003c50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c48:	461a      	mov	r2, r3
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f004 fb54 	bl	80082f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f006 fe10 	bl	800a87c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	4f54300a 	.word	0x4f54300a
 8003c6c:	4f54310a 	.word	0x4f54310a

08003c70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	333c      	adds	r3, #60	; 0x3c
 8003c88:	3304      	adds	r3, #4
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d90e      	bls.n	8003cc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f006 fdc7 	bl	800a858 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d90c      	bls.n	8003cec <PCD_EP_OutSetupPacket_int+0x7c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d108      	bne.n	8003cec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	f004 fb06 	bl	80082f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	4f54300a 	.word	0x4f54300a

08003cfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d107      	bne.n	8003d2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d1a:	883b      	ldrh	r3, [r7, #0]
 8003d1c:	0419      	lsls	r1, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
 8003d28:	e028      	b.n	8003d7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4413      	add	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	e00d      	b.n	8003d5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	3340      	adds	r3, #64	; 0x40
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4413      	add	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	3301      	adds	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
 8003d5a:	7bfa      	ldrb	r2, [r7, #15]
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3ec      	bcc.n	8003d3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d64:	883b      	ldrh	r3, [r7, #0]
 8003d66:	0418      	lsls	r0, r3, #16
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6819      	ldr	r1, [r3, #0]
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	4302      	orrs	r2, r0
 8003d74:	3340      	adds	r3, #64	; 0x40
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	887a      	ldrh	r2, [r7, #2]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e267      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d075      	beq.n	8003ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de2:	4b88      	ldr	r3, [pc, #544]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d00c      	beq.n	8003e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dee:	4b85      	ldr	r3, [pc, #532]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d112      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dfa:	4b82      	ldr	r3, [pc, #520]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e06:	d10b      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e08:	4b7e      	ldr	r3, [pc, #504]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d05b      	beq.n	8003ecc <HAL_RCC_OscConfig+0x108>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d157      	bne.n	8003ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e242      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e28:	d106      	bne.n	8003e38 <HAL_RCC_OscConfig+0x74>
 8003e2a:	4b76      	ldr	r3, [pc, #472]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a75      	ldr	r2, [pc, #468]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e01d      	b.n	8003e74 <HAL_RCC_OscConfig+0xb0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCC_OscConfig+0x98>
 8003e42:	4b70      	ldr	r3, [pc, #448]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a6f      	ldr	r2, [pc, #444]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a6c      	ldr	r2, [pc, #432]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCC_OscConfig+0xb0>
 8003e5c:	4b69      	ldr	r3, [pc, #420]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a68      	ldr	r2, [pc, #416]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a65      	ldr	r2, [pc, #404]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d013      	beq.n	8003ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fe98 	bl	8001bb0 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fd fe94 	bl	8001bb0 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e207      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b5b      	ldr	r3, [pc, #364]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0xc0>
 8003ea2:	e014      	b.n	8003ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7fd fe84 	bl	8001bb0 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fd fe80 	bl	8001bb0 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e1f3      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b51      	ldr	r3, [pc, #324]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0xe8>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d063      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eda:	4b4a      	ldr	r3, [pc, #296]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00b      	beq.n	8003efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee6:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d11c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ef2:	4b44      	ldr	r3, [pc, #272]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d116      	bne.n	8003f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efe:	4b41      	ldr	r3, [pc, #260]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d005      	beq.n	8003f16 <HAL_RCC_OscConfig+0x152>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d001      	beq.n	8003f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e1c7      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f16:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4937      	ldr	r1, [pc, #220]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2a:	e03a      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d020      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f34:	4b34      	ldr	r3, [pc, #208]	; (8004008 <HAL_RCC_OscConfig+0x244>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3a:	f7fd fe39 	bl	8001bb0 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f42:	f7fd fe35 	bl	8001bb0 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e1a8      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b28      	ldr	r3, [pc, #160]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4925      	ldr	r1, [pc, #148]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	600b      	str	r3, [r1, #0]
 8003f74:	e015      	b.n	8003fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCC_OscConfig+0x244>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7c:	f7fd fe18 	bl	8001bb0 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f84:	f7fd fe14 	bl	8001bb0 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e187      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d036      	beq.n	800401c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d016      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_RCC_OscConfig+0x248>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fd fdf8 	bl	8001bb0 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc4:	f7fd fdf4 	bl	8001bb0 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e167      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x200>
 8003fe2:	e01b      	b.n	800401c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe4:	4b09      	ldr	r3, [pc, #36]	; (800400c <HAL_RCC_OscConfig+0x248>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fea:	f7fd fde1 	bl	8001bb0 <HAL_GetTick>
 8003fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ff0:	e00e      	b.n	8004010 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ff2:	f7fd fddd 	bl	8001bb0 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d907      	bls.n	8004010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e150      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
 8004004:	40023800 	.word	0x40023800
 8004008:	42470000 	.word	0x42470000
 800400c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004010:	4b88      	ldr	r3, [pc, #544]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1ea      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8097 	beq.w	8004158 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402e:	4b81      	ldr	r3, [pc, #516]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10f      	bne.n	800405a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	4b7d      	ldr	r3, [pc, #500]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	4a7c      	ldr	r2, [pc, #496]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004048:	6413      	str	r3, [r2, #64]	; 0x40
 800404a:	4b7a      	ldr	r3, [pc, #488]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004056:	2301      	movs	r3, #1
 8004058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b77      	ldr	r3, [pc, #476]	; (8004238 <HAL_RCC_OscConfig+0x474>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d118      	bne.n	8004098 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004066:	4b74      	ldr	r3, [pc, #464]	; (8004238 <HAL_RCC_OscConfig+0x474>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a73      	ldr	r2, [pc, #460]	; (8004238 <HAL_RCC_OscConfig+0x474>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004072:	f7fd fd9d 	bl	8001bb0 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407a:	f7fd fd99 	bl	8001bb0 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e10c      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408c:	4b6a      	ldr	r3, [pc, #424]	; (8004238 <HAL_RCC_OscConfig+0x474>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x2ea>
 80040a0:	4b64      	ldr	r3, [pc, #400]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a4:	4a63      	ldr	r2, [pc, #396]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	6713      	str	r3, [r2, #112]	; 0x70
 80040ac:	e01c      	b.n	80040e8 <HAL_RCC_OscConfig+0x324>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d10c      	bne.n	80040d0 <HAL_RCC_OscConfig+0x30c>
 80040b6:	4b5f      	ldr	r3, [pc, #380]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a5e      	ldr	r2, [pc, #376]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040bc:	f043 0304 	orr.w	r3, r3, #4
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	4b5c      	ldr	r3, [pc, #368]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a5b      	ldr	r2, [pc, #364]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
 80040ce:	e00b      	b.n	80040e8 <HAL_RCC_OscConfig+0x324>
 80040d0:	4b58      	ldr	r3, [pc, #352]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	4a57      	ldr	r2, [pc, #348]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040d6:	f023 0301 	bic.w	r3, r3, #1
 80040da:	6713      	str	r3, [r2, #112]	; 0x70
 80040dc:	4b55      	ldr	r3, [pc, #340]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4a54      	ldr	r2, [pc, #336]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80040e2:	f023 0304 	bic.w	r3, r3, #4
 80040e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d015      	beq.n	800411c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fd fd5e 	bl	8001bb0 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f6:	e00a      	b.n	800410e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f8:	f7fd fd5a 	bl	8001bb0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	f241 3288 	movw	r2, #5000	; 0x1388
 8004106:	4293      	cmp	r3, r2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e0cb      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	4b49      	ldr	r3, [pc, #292]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0ee      	beq.n	80040f8 <HAL_RCC_OscConfig+0x334>
 800411a:	e014      	b.n	8004146 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411c:	f7fd fd48 	bl	8001bb0 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004122:	e00a      	b.n	800413a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004124:	f7fd fd44 	bl	8001bb0 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0b5      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413a:	4b3e      	ldr	r3, [pc, #248]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1ee      	bne.n	8004124 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004146:	7dfb      	ldrb	r3, [r7, #23]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d105      	bne.n	8004158 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414c:	4b39      	ldr	r3, [pc, #228]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	4a38      	ldr	r2, [pc, #224]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004156:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80a1 	beq.w	80042a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004162:	4b34      	ldr	r3, [pc, #208]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	2b08      	cmp	r3, #8
 800416c:	d05c      	beq.n	8004228 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d141      	bne.n	80041fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004176:	4b31      	ldr	r3, [pc, #196]	; (800423c <HAL_RCC_OscConfig+0x478>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417c:	f7fd fd18 	bl	8001bb0 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	e008      	b.n	8004196 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004184:	f7fd fd14 	bl	8001bb0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e087      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004196:	4b27      	ldr	r3, [pc, #156]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f0      	bne.n	8004184 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	3b01      	subs	r3, #1
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	061b      	lsls	r3, r3, #24
 80041c6:	491b      	ldr	r1, [pc, #108]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <HAL_RCC_OscConfig+0x478>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d2:	f7fd fced 	bl	8001bb0 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041da:	f7fd fce9 	bl	8001bb0 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e05c      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x416>
 80041f8:	e054      	b.n	80042a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <HAL_RCC_OscConfig+0x478>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004200:	f7fd fcd6 	bl	8001bb0 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd fcd2 	bl	8001bb0 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e045      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <HAL_RCC_OscConfig+0x470>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x444>
 8004226:	e03d      	b.n	80042a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d107      	bne.n	8004240 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e038      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
 8004234:	40023800 	.word	0x40023800
 8004238:	40007000 	.word	0x40007000
 800423c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x4ec>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d028      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004258:	429a      	cmp	r2, r3
 800425a:	d121      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d11a      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004270:	4013      	ands	r3, r2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004278:	4293      	cmp	r3, r2
 800427a:	d111      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	3b01      	subs	r3, #1
 800428a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d107      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40023800 	.word	0x40023800

080042b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e0cc      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c8:	4b68      	ldr	r3, [pc, #416]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d90c      	bls.n	80042f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d6:	4b65      	ldr	r3, [pc, #404]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042de:	4b63      	ldr	r3, [pc, #396]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d001      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0b8      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d020      	beq.n	800433e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004308:	4b59      	ldr	r3, [pc, #356]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	4a58      	ldr	r2, [pc, #352]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004320:	4b53      	ldr	r3, [pc, #332]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a52      	ldr	r2, [pc, #328]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800432a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800432c:	4b50      	ldr	r3, [pc, #320]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	494d      	ldr	r1, [pc, #308]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d044      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d107      	bne.n	8004362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d119      	bne.n	8004392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e07f      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d003      	beq.n	8004372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436e:	2b03      	cmp	r3, #3
 8004370:	d107      	bne.n	8004382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004372:	4b3f      	ldr	r3, [pc, #252]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e06f      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004382:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e067      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004392:	4b37      	ldr	r3, [pc, #220]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f023 0203 	bic.w	r2, r3, #3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4934      	ldr	r1, [pc, #208]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a4:	f7fd fc04 	bl	8001bb0 <HAL_GetTick>
 80043a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043aa:	e00a      	b.n	80043c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ac:	f7fd fc00 	bl	8001bb0 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e04f      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c2:	4b2b      	ldr	r3, [pc, #172]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 020c 	and.w	r2, r3, #12
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d1eb      	bne.n	80043ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d4:	4b25      	ldr	r3, [pc, #148]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d20c      	bcs.n	80043fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b22      	ldr	r3, [pc, #136]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b20      	ldr	r3, [pc, #128]	; (800446c <HAL_RCC_ClockConfig+0x1b8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e032      	b.n	8004462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004408:	4b19      	ldr	r3, [pc, #100]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4916      	ldr	r1, [pc, #88]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004426:	4b12      	ldr	r3, [pc, #72]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	490e      	ldr	r1, [pc, #56]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800443a:	f000 f821 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 800443e:	4602      	mov	r2, r0
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <HAL_RCC_ClockConfig+0x1bc>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	091b      	lsrs	r3, r3, #4
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	490a      	ldr	r1, [pc, #40]	; (8004474 <HAL_RCC_ClockConfig+0x1c0>)
 800444c:	5ccb      	ldrb	r3, [r1, r3]
 800444e:	fa22 f303 	lsr.w	r3, r2, r3
 8004452:	4a09      	ldr	r2, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c4>)
 8004454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_RCC_ClockConfig+0x1c8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd fb64 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40023c00 	.word	0x40023c00
 8004470:	40023800 	.word	0x40023800
 8004474:	0800b760 	.word	0x0800b760
 8004478:	20000008 	.word	0x20000008
 800447c:	2000000c 	.word	0x2000000c

08004480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004484:	b090      	sub	sp, #64	; 0x40
 8004486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
 800448c:	2300      	movs	r3, #0
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004490:	2300      	movs	r3, #0
 8004492:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d00d      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x40>
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	f200 80a1 	bhi.w	80045ec <HAL_RCC_GetSysClockFreq+0x16c>
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_RCC_GetSysClockFreq+0x34>
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0x3a>
 80044b2:	e09b      	b.n	80045ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b4:	4b53      	ldr	r3, [pc, #332]	; (8004604 <HAL_RCC_GetSysClockFreq+0x184>)
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80044b8:	e09b      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044ba:	4b53      	ldr	r3, [pc, #332]	; (8004608 <HAL_RCC_GetSysClockFreq+0x188>)
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044be:	e098      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044c0:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ca:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d028      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	099b      	lsrs	r3, r3, #6
 80044dc:	2200      	movs	r2, #0
 80044de:	623b      	str	r3, [r7, #32]
 80044e0:	627a      	str	r2, [r7, #36]	; 0x24
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80044e8:	2100      	movs	r1, #0
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_GetSysClockFreq+0x188>)
 80044ec:	fb03 f201 	mul.w	r2, r3, r1
 80044f0:	2300      	movs	r3, #0
 80044f2:	fb00 f303 	mul.w	r3, r0, r3
 80044f6:	4413      	add	r3, r2
 80044f8:	4a43      	ldr	r2, [pc, #268]	; (8004608 <HAL_RCC_GetSysClockFreq+0x188>)
 80044fa:	fba0 1202 	umull	r1, r2, r0, r2
 80044fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004500:	460a      	mov	r2, r1
 8004502:	62ba      	str	r2, [r7, #40]	; 0x28
 8004504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004506:	4413      	add	r3, r2
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
 800450a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450c:	2200      	movs	r2, #0
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	61fa      	str	r2, [r7, #28]
 8004512:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004516:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800451a:	f7fb fe55 	bl	80001c8 <__aeabi_uldivmod>
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4613      	mov	r3, r2
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004526:	e053      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	099b      	lsrs	r3, r3, #6
 800452e:	2200      	movs	r2, #0
 8004530:	613b      	str	r3, [r7, #16]
 8004532:	617a      	str	r2, [r7, #20]
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800453a:	f04f 0b00 	mov.w	fp, #0
 800453e:	4652      	mov	r2, sl
 8004540:	465b      	mov	r3, fp
 8004542:	f04f 0000 	mov.w	r0, #0
 8004546:	f04f 0100 	mov.w	r1, #0
 800454a:	0159      	lsls	r1, r3, #5
 800454c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004550:	0150      	lsls	r0, r2, #5
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	ebb2 080a 	subs.w	r8, r2, sl
 800455a:	eb63 090b 	sbc.w	r9, r3, fp
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800456a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800456e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004572:	ebb2 0408 	subs.w	r4, r2, r8
 8004576:	eb63 0509 	sbc.w	r5, r3, r9
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	00eb      	lsls	r3, r5, #3
 8004584:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004588:	00e2      	lsls	r2, r4, #3
 800458a:	4614      	mov	r4, r2
 800458c:	461d      	mov	r5, r3
 800458e:	eb14 030a 	adds.w	r3, r4, sl
 8004592:	603b      	str	r3, [r7, #0]
 8004594:	eb45 030b 	adc.w	r3, r5, fp
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045a6:	4629      	mov	r1, r5
 80045a8:	028b      	lsls	r3, r1, #10
 80045aa:	4621      	mov	r1, r4
 80045ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b0:	4621      	mov	r1, r4
 80045b2:	028a      	lsls	r2, r1, #10
 80045b4:	4610      	mov	r0, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ba:	2200      	movs	r2, #0
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	60fa      	str	r2, [r7, #12]
 80045c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c4:	f7fb fe00 	bl	80001c8 <__aeabi_uldivmod>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4613      	mov	r3, r2
 80045ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_GetSysClockFreq+0x180>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	0c1b      	lsrs	r3, r3, #16
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80045e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045ea:	e002      	b.n	80045f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HAL_RCC_GetSysClockFreq+0x184>)
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3740      	adds	r7, #64	; 0x40
 80045f8:	46bd      	mov	sp, r7
 80045fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	00f42400 	.word	0x00f42400
 8004608:	016e3600 	.word	0x016e3600

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000008 	.word	0x20000008

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	0800b770 	.word	0x0800b770

0800464c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004650:	f7ff ffdc 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	0b5b      	lsrs	r3, r3, #13
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4903      	ldr	r1, [pc, #12]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40023800 	.word	0x40023800
 8004670:	0800b770 	.word	0x0800b770

08004674 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07b      	b.n	800477e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	2b00      	cmp	r3, #0
 800468c:	d108      	bne.n	80046a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004696:	d009      	beq.n	80046ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	61da      	str	r2, [r3, #28]
 800469e:	e005      	b.n	80046ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d106      	bne.n	80046cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fc fffe 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	ea42 0103 	orr.w	r1, r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004738:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0104 	and.w	r1, r3, #4
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f003 0210 	and.w	r2, r3, #16
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b088      	sub	sp, #32
 800478a:	af00      	add	r7, sp, #0
 800478c:	60f8      	str	r0, [r7, #12]
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	4613      	mov	r3, r2
 8004794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_SPI_Transmit+0x22>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e126      	b.n	80049f6 <HAL_SPI_Transmit+0x270>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047b0:	f7fd f9fe 	bl	8001bb0 <HAL_GetTick>
 80047b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047b6:	88fb      	ldrh	r3, [r7, #6]
 80047b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d002      	beq.n	80047cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
 80047c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047ca:	e10b      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_SPI_Transmit+0x52>
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047dc:	e102      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2203      	movs	r2, #3
 80047e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	88fa      	ldrh	r2, [r7, #6]
 80047fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004824:	d10f      	bne.n	8004846 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004844:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004850:	2b40      	cmp	r3, #64	; 0x40
 8004852:	d007      	beq.n	8004864 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004862:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800486c:	d14b      	bne.n	8004906 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_SPI_Transmit+0xf6>
 8004876:	8afb      	ldrh	r3, [r7, #22]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d13e      	bne.n	80048fa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	881a      	ldrh	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	1c9a      	adds	r2, r3, #2
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048a0:	e02b      	b.n	80048fa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d112      	bne.n	80048d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	881a      	ldrh	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c0:	1c9a      	adds	r2, r3, #2
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80048d4:	e011      	b.n	80048fa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048d6:	f7fd f96b 	bl	8001bb0 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d803      	bhi.n	80048ee <HAL_SPI_Transmit+0x168>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ec:	d102      	bne.n	80048f4 <HAL_SPI_Transmit+0x16e>
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048f8:	e074      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ce      	bne.n	80048a2 <HAL_SPI_Transmit+0x11c>
 8004904:	e04c      	b.n	80049a0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_SPI_Transmit+0x18e>
 800490e:	8afb      	ldrh	r3, [r7, #22]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d140      	bne.n	8004996 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	330c      	adds	r3, #12
 800491e:	7812      	ldrb	r2, [r2, #0]
 8004920:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800493a:	e02c      	b.n	8004996 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d113      	bne.n	8004972 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	330c      	adds	r3, #12
 8004954:	7812      	ldrb	r2, [r2, #0]
 8004956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004966:	b29b      	uxth	r3, r3
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004970:	e011      	b.n	8004996 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004972:	f7fd f91d 	bl	8001bb0 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d803      	bhi.n	800498a <HAL_SPI_Transmit+0x204>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004988:	d102      	bne.n	8004990 <HAL_SPI_Transmit+0x20a>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004994:	e026      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1cd      	bne.n	800493c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	6839      	ldr	r1, [r7, #0]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fbd9 	bl	800515c <SPI_EndRxTxTransaction>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10a      	bne.n	80049d4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e000      	b.n	80049e4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80049e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b088      	sub	sp, #32
 8004a02:	af02      	add	r7, sp, #8
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a1a:	d112      	bne.n	8004a42 <HAL_SPI_Receive+0x44>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10e      	bne.n	8004a42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2204      	movs	r2, #4
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a2c:	88fa      	ldrh	r2, [r7, #6]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f8f1 	bl	8004c20 <HAL_SPI_TransmitReceive>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	e0ea      	b.n	8004c18 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_SPI_Receive+0x52>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e0e3      	b.n	8004c18 <HAL_SPI_Receive+0x21a>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a58:	f7fd f8aa 	bl	8001bb0 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a6e:	e0ca      	b.n	8004c06 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Receive+0x7e>
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d102      	bne.n	8004a82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a80:	e0c1      	b.n	8004c06 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2204      	movs	r2, #4
 8004a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	88fa      	ldrh	r2, [r7, #6]
 8004a9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac8:	d10f      	bne.n	8004aea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ae8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af4:	2b40      	cmp	r3, #64	; 0x40
 8004af6:	d007      	beq.n	8004b08 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b06:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d162      	bne.n	8004bd6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b10:	e02e      	b.n	8004b70 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d115      	bne.n	8004b4c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f103 020c 	add.w	r2, r3, #12
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	7812      	ldrb	r2, [r2, #0]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b4a:	e011      	b.n	8004b70 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4c:	f7fd f830 	bl	8001bb0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d803      	bhi.n	8004b64 <HAL_SPI_Receive+0x166>
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b62:	d102      	bne.n	8004b6a <HAL_SPI_Receive+0x16c>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d102      	bne.n	8004b70 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b6e:	e04a      	b.n	8004c06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1cb      	bne.n	8004b12 <HAL_SPI_Receive+0x114>
 8004b7a:	e031      	b.n	8004be0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d113      	bne.n	8004bb2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	b292      	uxth	r2, r2
 8004b96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	1c9a      	adds	r2, r3, #2
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bb0:	e011      	b.n	8004bd6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb2:	f7fc fffd 	bl	8001bb0 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d803      	bhi.n	8004bca <HAL_SPI_Receive+0x1cc>
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc8:	d102      	bne.n	8004bd0 <HAL_SPI_Receive+0x1d2>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d102      	bne.n	8004bd6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004bd4:	e017      	b.n	8004c06 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1cd      	bne.n	8004b7c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	6839      	ldr	r1, [r7, #0]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fa53 	bl	8005090 <SPI_EndRxTransaction>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	75fb      	strb	r3, [r7, #23]
 8004c02:	e000      	b.n	8004c06 <HAL_SPI_Receive+0x208>
  }

error :
 8004c04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	; 0x30
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_SPI_TransmitReceive+0x26>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e18a      	b.n	8004f5c <HAL_SPI_TransmitReceive+0x33c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c4e:	f7fc ffaf 	bl	8001bb0 <HAL_GetTick>
 8004c52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c64:	887b      	ldrh	r3, [r7, #2]
 8004c66:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d00f      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x70>
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c76:	d107      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <HAL_SPI_TransmitReceive+0x68>
 8004c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d003      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c8e:	e15b      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x82>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_TransmitReceive+0x82>
 8004c9c:	887b      	ldrh	r3, [r7, #2]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d103      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ca8:	e14e      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d003      	beq.n	8004cbe <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2205      	movs	r2, #5
 8004cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	887a      	ldrh	r2, [r7, #2]
 8004cce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	887a      	ldrh	r2, [r7, #2]
 8004ce0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b40      	cmp	r3, #64	; 0x40
 8004d00:	d007      	beq.n	8004d12 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d1a:	d178      	bne.n	8004e0e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_SPI_TransmitReceive+0x10a>
 8004d24:	8b7b      	ldrh	r3, [r7, #26]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d166      	bne.n	8004df8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	881a      	ldrh	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	1c9a      	adds	r2, r3, #2
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d4e:	e053      	b.n	8004df8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d11b      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x176>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d016      	beq.n	8004d96 <HAL_SPI_TransmitReceive+0x176>
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d113      	bne.n	8004d96 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d92:	2300      	movs	r3, #0
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d119      	bne.n	8004dd8 <HAL_SPI_TransmitReceive+0x1b8>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d014      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	b292      	uxth	r2, r2
 8004dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	1c9a      	adds	r2, r3, #2
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dd8:	f7fc feea 	bl	8001bb0 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d807      	bhi.n	8004df8 <HAL_SPI_TransmitReceive+0x1d8>
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dee:	d003      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004df6:	e0a7      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1a6      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x130>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1a1      	bne.n	8004d50 <HAL_SPI_TransmitReceive+0x130>
 8004e0c:	e07c      	b.n	8004f08 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_SPI_TransmitReceive+0x1fc>
 8004e16:	8b7b      	ldrh	r3, [r7, #26]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d16b      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	7812      	ldrb	r2, [r2, #0]
 8004e28:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e42:	e057      	b.n	8004ef4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d11c      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x26c>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d017      	beq.n	8004e8c <HAL_SPI_TransmitReceive+0x26c>
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d114      	bne.n	8004e8c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	7812      	ldrb	r2, [r2, #0]
 8004e6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d119      	bne.n	8004ece <HAL_SPI_TransmitReceive+0x2ae>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d014      	beq.n	8004ece <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	b29a      	uxth	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ece:	f7fc fe6f 	bl	8001bb0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d803      	bhi.n	8004ee6 <HAL_SPI_TransmitReceive+0x2c6>
 8004ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d102      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x2cc>
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d103      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ef2:	e029      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1a2      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x224>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d19d      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f000 f925 	bl	800515c <SPI_EndRxTxTransaction>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d006      	beq.n	8004f26 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f24:	e010      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	e000      	b.n	8004f48 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f58:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3730      	adds	r7, #48	; 0x30
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f72:	b2db      	uxtb	r3, r3
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f90:	f7fc fe0e 	bl	8001bb0 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fa0:	f7fc fe06 	bl	8001bb0 <HAL_GetTick>
 8004fa4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fa6:	4b39      	ldr	r3, [pc, #228]	; (800508c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	015b      	lsls	r3, r3, #5
 8004fac:	0d1b      	lsrs	r3, r3, #20
 8004fae:	69fa      	ldr	r2, [r7, #28]
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb6:	e054      	b.n	8005062 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d050      	beq.n	8005062 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fc0:	f7fc fdf6 	bl	8001bb0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d902      	bls.n	8004fd6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d13d      	bne.n	8005052 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fe4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fee:	d111      	bne.n	8005014 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff8:	d004      	beq.n	8005004 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005002:	d107      	bne.n	8005014 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005012:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800501c:	d10f      	bne.n	800503e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800503c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e017      	b.n	8005082 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3b01      	subs	r3, #1
 8005060:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4013      	ands	r3, r2
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	429a      	cmp	r2, r3
 8005070:	bf0c      	ite	eq
 8005072:	2301      	moveq	r3, #1
 8005074:	2300      	movne	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	429a      	cmp	r2, r3
 800507e:	d19b      	bne.n	8004fb8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3720      	adds	r7, #32
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20000008 	.word	0x20000008

08005090 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a4:	d111      	bne.n	80050ca <SPI_EndRxTransaction+0x3a>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ae:	d004      	beq.n	80050ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b8:	d107      	bne.n	80050ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050d2:	d12a      	bne.n	800512a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050dc:	d012      	beq.n	8005104 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	2180      	movs	r1, #128	; 0x80
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff49 	bl	8004f80 <SPI_WaitFlagStateUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02d      	beq.n	8005150 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f8:	f043 0220 	orr.w	r2, r3, #32
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e026      	b.n	8005152 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	2101      	movs	r1, #1
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff ff36 	bl	8004f80 <SPI_WaitFlagStateUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01a      	beq.n	8005150 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511e:	f043 0220 	orr.w	r2, r3, #32
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e013      	b.n	8005152 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	9300      	str	r3, [sp, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2200      	movs	r2, #0
 8005132:	2101      	movs	r1, #1
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff ff23 	bl	8004f80 <SPI_WaitFlagStateUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	f043 0220 	orr.w	r2, r3, #32
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e000      	b.n	8005152 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005168:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <SPI_EndRxTxTransaction+0x7c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <SPI_EndRxTxTransaction+0x80>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	0d5b      	lsrs	r3, r3, #21
 8005174:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005178:	fb02 f303 	mul.w	r3, r2, r3
 800517c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005186:	d112      	bne.n	80051ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2200      	movs	r2, #0
 8005190:	2180      	movs	r1, #128	; 0x80
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff fef4 	bl	8004f80 <SPI_WaitFlagStateUntilTimeout>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	f043 0220 	orr.w	r2, r3, #32
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e00f      	b.n	80051ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	3b01      	subs	r3, #1
 80051b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c4:	2b80      	cmp	r3, #128	; 0x80
 80051c6:	d0f2      	beq.n	80051ae <SPI_EndRxTxTransaction+0x52>
 80051c8:	e000      	b.n	80051cc <SPI_EndRxTxTransaction+0x70>
        break;
 80051ca:	bf00      	nop
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000008 	.word	0x20000008
 80051dc:	165e9f81 	.word	0x165e9f81

080051e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e041      	b.n	8005276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc faa6 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f000 fa2e 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	d122      	bne.n	80052da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d11b      	bne.n	80052da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0202 	mvn.w	r2, #2
 80052aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f9bf 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 80052c6:	e005      	b.n	80052d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f9b1 	bl	8005630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f9c2 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d122      	bne.n	800532e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d11b      	bne.n	800532e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f06f 0204 	mvn.w	r2, #4
 80052fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005310:	2b00      	cmp	r3, #0
 8005312:	d003      	beq.n	800531c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f995 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 800531a:	e005      	b.n	8005328 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f987 	bl	8005630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f998 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d122      	bne.n	8005382 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0308 	and.w	r3, r3, #8
 8005346:	2b08      	cmp	r3, #8
 8005348:	d11b      	bne.n	8005382 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f06f 0208 	mvn.w	r2, #8
 8005352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2204      	movs	r2, #4
 8005358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f96b 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 800536e:	e005      	b.n	800537c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f95d 	bl	8005630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f96e 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b10      	cmp	r3, #16
 800538e:	d122      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f003 0310 	and.w	r3, r3, #16
 800539a:	2b10      	cmp	r3, #16
 800539c:	d11b      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f06f 0210 	mvn.w	r2, #16
 80053a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2208      	movs	r2, #8
 80053ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f941 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 80053c2:	e005      	b.n	80053d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f933 	bl	8005630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f944 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10e      	bne.n	8005402 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0201 	mvn.w	r2, #1
 80053fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f90d 	bl	800561c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d10e      	bne.n	800542e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b80      	cmp	r3, #128	; 0x80
 800541c:	d107      	bne.n	800542e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fae9 	bl	8005a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b40      	cmp	r3, #64	; 0x40
 800543a:	d10e      	bne.n	800545a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005446:	2b40      	cmp	r3, #64	; 0x40
 8005448:	d107      	bne.n	800545a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f909 	bl	800566c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b20      	cmp	r3, #32
 8005466:	d10e      	bne.n	8005486 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b20      	cmp	r3, #32
 8005474:	d107      	bne.n	8005486 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f06f 0220 	mvn.w	r2, #32
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fab3 	bl	80059ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005486:	bf00      	nop
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
 8005496:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_ConfigClockSource+0x1c>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e0b4      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x186>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e2:	d03e      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0xd4>
 80054e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e8:	f200 8087 	bhi.w	80055fa <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f0:	f000 8086 	beq.w	8005600 <HAL_TIM_ConfigClockSource+0x172>
 80054f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f8:	d87f      	bhi.n	80055fa <HAL_TIM_ConfigClockSource+0x16c>
 80054fa:	2b70      	cmp	r3, #112	; 0x70
 80054fc:	d01a      	beq.n	8005534 <HAL_TIM_ConfigClockSource+0xa6>
 80054fe:	2b70      	cmp	r3, #112	; 0x70
 8005500:	d87b      	bhi.n	80055fa <HAL_TIM_ConfigClockSource+0x16c>
 8005502:	2b60      	cmp	r3, #96	; 0x60
 8005504:	d050      	beq.n	80055a8 <HAL_TIM_ConfigClockSource+0x11a>
 8005506:	2b60      	cmp	r3, #96	; 0x60
 8005508:	d877      	bhi.n	80055fa <HAL_TIM_ConfigClockSource+0x16c>
 800550a:	2b50      	cmp	r3, #80	; 0x50
 800550c:	d03c      	beq.n	8005588 <HAL_TIM_ConfigClockSource+0xfa>
 800550e:	2b50      	cmp	r3, #80	; 0x50
 8005510:	d873      	bhi.n	80055fa <HAL_TIM_ConfigClockSource+0x16c>
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d058      	beq.n	80055c8 <HAL_TIM_ConfigClockSource+0x13a>
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d86f      	bhi.n	80055fa <HAL_TIM_ConfigClockSource+0x16c>
 800551a:	2b30      	cmp	r3, #48	; 0x30
 800551c:	d064      	beq.n	80055e8 <HAL_TIM_ConfigClockSource+0x15a>
 800551e:	2b30      	cmp	r3, #48	; 0x30
 8005520:	d86b      	bhi.n	80055fa <HAL_TIM_ConfigClockSource+0x16c>
 8005522:	2b20      	cmp	r3, #32
 8005524:	d060      	beq.n	80055e8 <HAL_TIM_ConfigClockSource+0x15a>
 8005526:	2b20      	cmp	r3, #32
 8005528:	d867      	bhi.n	80055fa <HAL_TIM_ConfigClockSource+0x16c>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d05c      	beq.n	80055e8 <HAL_TIM_ConfigClockSource+0x15a>
 800552e:	2b10      	cmp	r3, #16
 8005530:	d05a      	beq.n	80055e8 <HAL_TIM_ConfigClockSource+0x15a>
 8005532:	e062      	b.n	80055fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6899      	ldr	r1, [r3, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f000 f9b6 	bl	80058b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005556:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	609a      	str	r2, [r3, #8]
      break;
 8005560:	e04f      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6899      	ldr	r1, [r3, #8]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f000 f99f 	bl	80058b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005584:	609a      	str	r2, [r3, #8]
      break;
 8005586:	e03c      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6818      	ldr	r0, [r3, #0]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	6859      	ldr	r1, [r3, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	461a      	mov	r2, r3
 8005596:	f000 f913 	bl	80057c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2150      	movs	r1, #80	; 0x50
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f96c 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055a6:	e02c      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	461a      	mov	r2, r3
 80055b6:	f000 f932 	bl	800581e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2160      	movs	r1, #96	; 0x60
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f95c 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055c6:	e01c      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6859      	ldr	r1, [r3, #4]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	461a      	mov	r2, r3
 80055d6:	f000 f8f3 	bl	80057c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2140      	movs	r1, #64	; 0x40
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 f94c 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055e6:	e00c      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4619      	mov	r1, r3
 80055f2:	4610      	mov	r0, r2
 80055f4:	f000 f943 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 80055f8:	e003      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	73fb      	strb	r3, [r7, #15]
      break;
 80055fe:	e000      	b.n	8005602 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005600:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a40      	ldr	r2, [pc, #256]	; (8005794 <TIM_Base_SetConfig+0x114>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a3d      	ldr	r2, [pc, #244]	; (8005798 <TIM_Base_SetConfig+0x118>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3c      	ldr	r2, [pc, #240]	; (800579c <TIM_Base_SetConfig+0x11c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3b      	ldr	r2, [pc, #236]	; (80057a0 <TIM_Base_SetConfig+0x120>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3a      	ldr	r2, [pc, #232]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d108      	bne.n	80056d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <TIM_Base_SetConfig+0x114>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e0:	d027      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2c      	ldr	r2, [pc, #176]	; (8005798 <TIM_Base_SetConfig+0x118>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d023      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2b      	ldr	r2, [pc, #172]	; (800579c <TIM_Base_SetConfig+0x11c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <TIM_Base_SetConfig+0x120>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d017      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a28      	ldr	r2, [pc, #160]	; (80057a8 <TIM_Base_SetConfig+0x128>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a27      	ldr	r2, [pc, #156]	; (80057ac <TIM_Base_SetConfig+0x12c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <TIM_Base_SetConfig+0x130>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <TIM_Base_SetConfig+0x134>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a24      	ldr	r2, [pc, #144]	; (80057b8 <TIM_Base_SetConfig+0x138>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a23      	ldr	r2, [pc, #140]	; (80057bc <TIM_Base_SetConfig+0x13c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <TIM_Base_SetConfig+0x114>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d103      	bne.n	8005780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	615a      	str	r2, [r3, #20]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010000 	.word	0x40010000
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800
 80057b4:	40001800 	.word	0x40001800
 80057b8:	40001c00 	.word	0x40001c00
 80057bc:	40002000 	.word	0x40002000

080057c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 030a 	bic.w	r3, r3, #10
 80057fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800581e:	b480      	push	{r7}
 8005820:	b087      	sub	sp, #28
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	f023 0210 	bic.w	r2, r3, #16
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005848:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	031b      	lsls	r3, r3, #12
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	4313      	orrs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800585a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	621a      	str	r2, [r3, #32]
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	f043 0307 	orr.w	r3, r3, #7
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	609a      	str	r2, [r3, #8]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	609a      	str	r2, [r3, #8]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005908:	2302      	movs	r3, #2
 800590a:	e05a      	b.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a21      	ldr	r2, [pc, #132]	; (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005958:	d01d      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a1d      	ldr	r2, [pc, #116]	; (80059d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d018      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1b      	ldr	r2, [pc, #108]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1a      	ldr	r2, [pc, #104]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00e      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d009      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d004      	beq.n	8005996 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a15      	ldr	r2, [pc, #84]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40000400 	.word	0x40000400
 80059d8:	40000800 	.word	0x40000800
 80059dc:	40000c00 	.word	0x40000c00
 80059e0:	40010400 	.word	0x40010400
 80059e4:	40014000 	.word	0x40014000
 80059e8:	40001800 	.word	0x40001800

080059ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e03f      	b.n	8005aa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fb feb2 	bl	80017a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2224      	movs	r2, #36	; 0x24
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fe1d 	bl	8006698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68da      	ldr	r2, [r3, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b08a      	sub	sp, #40	; 0x28
 8005ab2:	af02      	add	r7, sp, #8
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b20      	cmp	r3, #32
 8005acc:	d17c      	bne.n	8005bc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_UART_Transmit+0x2c>
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e075      	b.n	8005bca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_UART_Transmit+0x3e>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e06e      	b.n	8005bca <HAL_UART_Transmit+0x11c>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2221      	movs	r2, #33	; 0x21
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b02:	f7fc f855 	bl	8001bb0 <HAL_GetTick>
 8005b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	88fa      	ldrh	r2, [r7, #6]
 8005b0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1c:	d108      	bne.n	8005b30 <HAL_UART_Transmit+0x82>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e003      	b.n	8005b38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b40:	e02a      	b.n	8005b98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	2180      	movs	r1, #128	; 0x80
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 fb9b 	bl	8006288 <UART_WaitOnFlagUntilTimeout>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e036      	b.n	8005bca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10b      	bne.n	8005b7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	3302      	adds	r3, #2
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e007      	b.n	8005b8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	3301      	adds	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1cf      	bne.n	8005b42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2140      	movs	r1, #64	; 0x40
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 fb6b 	bl	8006288 <UART_WaitOnFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e006      	b.n	8005bca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e000      	b.n	8005bca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bc8:	2302      	movs	r3, #2
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b08a      	sub	sp, #40	; 0x28
 8005bd6:	af02      	add	r7, sp, #8
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	603b      	str	r3, [r7, #0]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	f040 808c 	bne.w	8005d0c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d002      	beq.n	8005c00 <HAL_UART_Receive+0x2e>
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e084      	b.n	8005d0e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_UART_Receive+0x40>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e07d      	b.n	8005d0e <HAL_UART_Receive+0x13c>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2222      	movs	r2, #34	; 0x22
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c2e:	f7fb ffbf 	bl	8001bb0 <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c48:	d108      	bne.n	8005c5c <HAL_UART_Receive+0x8a>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005c52:	2300      	movs	r3, #0
 8005c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61bb      	str	r3, [r7, #24]
 8005c5a:	e003      	b.n	8005c64 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005c6c:	e043      	b.n	8005cf6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	2120      	movs	r1, #32
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fb05 	bl	8006288 <UART_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e042      	b.n	8005d0e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	3302      	adds	r3, #2
 8005ca4:	61bb      	str	r3, [r7, #24]
 8005ca6:	e01f      	b.n	8005ce8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb0:	d007      	beq.n	8005cc2 <HAL_UART_Receive+0xf0>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <HAL_UART_Receive+0xfe>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e008      	b.n	8005ce2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1b6      	bne.n	8005c6e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e000      	b.n	8005d0e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2302      	movs	r3, #2
  }
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b0ba      	sub	sp, #232	; 0xe8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10f      	bne.n	8005d7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d009      	beq.n	8005d7e <HAL_UART_IRQHandler+0x66>
 8005d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fbd3 	bl	8006522 <UART_Receive_IT>
      return;
 8005d7c:	e256      	b.n	800622c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 80de 	beq.w	8005f44 <HAL_UART_IRQHandler+0x22c>
 8005d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80d1 	beq.w	8005f44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xae>
 8005dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d005      	beq.n	8005dc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f043 0201 	orr.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <HAL_UART_IRQHandler+0xd2>
 8005dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f043 0202 	orr.w	r2, r3, #2
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <HAL_UART_IRQHandler+0xf6>
 8005df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d005      	beq.n	8005e0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e06:	f043 0204 	orr.w	r2, r3, #4
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d011      	beq.n	8005e3e <HAL_UART_IRQHandler+0x126>
 8005e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1e:	f003 0320 	and.w	r3, r3, #32
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f043 0208 	orr.w	r2, r3, #8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 81ed 	beq.w	8006222 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_UART_IRQHandler+0x14e>
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fb5e 	bl	8006522 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b40      	cmp	r3, #64	; 0x40
 8005e72:	bf0c      	ite	eq
 8005e74:	2301      	moveq	r3, #1
 8005e76:	2300      	movne	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <HAL_UART_IRQHandler+0x17a>
 8005e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04f      	beq.n	8005f32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa66 	bl	8006364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b40      	cmp	r3, #64	; 0x40
 8005ea4:	d141      	bne.n	8005f2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3314      	adds	r3, #20
 8005eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3314      	adds	r3, #20
 8005ece:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ed2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ede:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1d9      	bne.n	8005ea6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d013      	beq.n	8005f22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efe:	4a7d      	ldr	r2, [pc, #500]	; (80060f4 <HAL_UART_IRQHandler+0x3dc>)
 8005f00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fc f8b2 	bl	8002070 <HAL_DMA_Abort_IT>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d016      	beq.n	8005f40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f20:	e00e      	b.n	8005f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f99a 	bl	800625c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f28:	e00a      	b.n	8005f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f996 	bl	800625c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	e006      	b.n	8005f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f992 	bl	800625c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f3e:	e170      	b.n	8006222 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f40:	bf00      	nop
    return;
 8005f42:	e16e      	b.n	8006222 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	f040 814a 	bne.w	80061e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f52:	f003 0310 	and.w	r3, r3, #16
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 8143 	beq.w	80061e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 813c 	beq.w	80061e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f8a:	2b40      	cmp	r3, #64	; 0x40
 8005f8c:	f040 80b4 	bne.w	80060f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8140 	beq.w	8006226 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	f080 8139 	bcs.w	8006226 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc6:	f000 8088 	beq.w	80060da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800600e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1d9      	bne.n	8005fca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3314      	adds	r3, #20
 800601c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3314      	adds	r3, #20
 8006036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800603a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800603e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800604c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e1      	bne.n	8006016 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3314      	adds	r3, #20
 8006058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3314      	adds	r3, #20
 8006072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006078:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800607c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e3      	bne.n	8006052 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a2:	e853 3f00 	ldrex	r3, [r3]
 80060a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060aa:	f023 0310 	bic.w	r3, r3, #16
 80060ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	330c      	adds	r3, #12
 80060b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80060be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e3      	bne.n	8006098 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fb ff5b 	bl	8001f90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f8c0 	bl	8006270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060f0:	e099      	b.n	8006226 <HAL_UART_IRQHandler+0x50e>
 80060f2:	bf00      	nop
 80060f4:	0800642b 	.word	0x0800642b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006100:	b29b      	uxth	r3, r3
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 808b 	beq.w	800622a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8086 	beq.w	800622a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006142:	647a      	str	r2, [r7, #68]	; 0x44
 8006144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e3      	bne.n	800611e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3314      	adds	r3, #20
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	623b      	str	r3, [r7, #32]
   return(result);
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3314      	adds	r3, #20
 8006176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800617a:	633a      	str	r2, [r7, #48]	; 0x30
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006182:	e841 2300 	strex	r3, r2, [r1]
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e3      	bne.n	8006156 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0310 	bic.w	r3, r3, #16
 80061b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	330c      	adds	r3, #12
 80061bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061c0:	61fa      	str	r2, [r7, #28]
 80061c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c4:	69b9      	ldr	r1, [r7, #24]
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	e841 2300 	strex	r3, r2, [r1]
 80061cc:	617b      	str	r3, [r7, #20]
   return(result);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e3      	bne.n	800619c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f848 	bl	8006270 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061e0:	e023      	b.n	800622a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <HAL_UART_IRQHandler+0x4ea>
 80061ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f929 	bl	8006452 <UART_Transmit_IT>
    return;
 8006200:	e014      	b.n	800622c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00e      	beq.n	800622c <HAL_UART_IRQHandler+0x514>
 800620e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f969 	bl	80064f2 <UART_EndTransmit_IT>
    return;
 8006220:	e004      	b.n	800622c <HAL_UART_IRQHandler+0x514>
    return;
 8006222:	bf00      	nop
 8006224:	e002      	b.n	800622c <HAL_UART_IRQHandler+0x514>
      return;
 8006226:	bf00      	nop
 8006228:	e000      	b.n	800622c <HAL_UART_IRQHandler+0x514>
      return;
 800622a:	bf00      	nop
  }
}
 800622c:	37e8      	adds	r7, #232	; 0xe8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop

08006234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b090      	sub	sp, #64	; 0x40
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006298:	e050      	b.n	800633c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800629a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a0:	d04c      	beq.n	800633c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80062a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80062a8:	f7fb fc82 	bl	8001bb0 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d241      	bcs.n	800633c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	330c      	adds	r3, #12
 80062be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	330c      	adds	r3, #12
 80062d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062d8:	637a      	str	r2, [r7, #52]	; 0x34
 80062da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e5      	bne.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3314      	adds	r3, #20
 80062f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	613b      	str	r3, [r7, #16]
   return(result);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3314      	adds	r3, #20
 800630a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800630c:	623a      	str	r2, [r7, #32]
 800630e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	69f9      	ldr	r1, [r7, #28]
 8006312:	6a3a      	ldr	r2, [r7, #32]
 8006314:	e841 2300 	strex	r3, r2, [r1]
 8006318:	61bb      	str	r3, [r7, #24]
   return(result);
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1e5      	bne.n	80062ec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e00f      	b.n	800635c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4013      	ands	r3, r2
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	429a      	cmp	r2, r3
 800634a:	bf0c      	ite	eq
 800634c:	2301      	moveq	r3, #1
 800634e:	2300      	movne	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	461a      	mov	r2, r3
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	429a      	cmp	r2, r3
 8006358:	d09f      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3740      	adds	r7, #64	; 0x40
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b095      	sub	sp, #84	; 0x54
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800638c:	643a      	str	r2, [r7, #64]	; 0x40
 800638e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800639a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e5      	bne.n	800636c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3314      	adds	r3, #20
 80063a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	e853 3f00 	ldrex	r3, [r3]
 80063ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	f023 0301 	bic.w	r3, r3, #1
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3314      	adds	r3, #20
 80063be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c8:	e841 2300 	strex	r3, r2, [r1]
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1e5      	bne.n	80063a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d119      	bne.n	8006410 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f023 0310 	bic.w	r3, r3, #16
 80063f2:	647b      	str	r3, [r7, #68]	; 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063fc:	61ba      	str	r2, [r7, #24]
 80063fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	6979      	ldr	r1, [r7, #20]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	613b      	str	r3, [r7, #16]
   return(result);
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800641e:	bf00      	nop
 8006420:	3754      	adds	r7, #84	; 0x54
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f7ff ff09 	bl	800625c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800644a:	bf00      	nop
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006452:	b480      	push	{r7}
 8006454:	b085      	sub	sp, #20
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b21      	cmp	r3, #33	; 0x21
 8006464:	d13e      	bne.n	80064e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646e:	d114      	bne.n	800649a <UART_Transmit_IT+0x48>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d110      	bne.n	800649a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800648c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	1c9a      	adds	r2, r3, #2
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	621a      	str	r2, [r3, #32]
 8006498:	e008      	b.n	80064ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	1c59      	adds	r1, r3, #1
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	6211      	str	r1, [r2, #32]
 80064a4:	781a      	ldrb	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4619      	mov	r1, r3
 80064ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10f      	bne.n	80064e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68da      	ldr	r2, [r3, #12]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e000      	b.n	80064e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006508:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff fe8e 	bl	8006234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b08c      	sub	sp, #48	; 0x30
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b22      	cmp	r3, #34	; 0x22
 8006534:	f040 80ab 	bne.w	800668e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006540:	d117      	bne.n	8006572 <UART_Receive_IT+0x50>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d113      	bne.n	8006572 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	b29b      	uxth	r3, r3
 800655c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006560:	b29a      	uxth	r2, r3
 8006562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006564:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	1c9a      	adds	r2, r3, #2
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28
 8006570:	e026      	b.n	80065c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006578:	2300      	movs	r3, #0
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006584:	d007      	beq.n	8006596 <UART_Receive_IT+0x74>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10a      	bne.n	80065a4 <UART_Receive_IT+0x82>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	b2da      	uxtb	r2, r3
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	e008      	b.n	80065b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4619      	mov	r1, r3
 80065ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d15a      	bne.n	800668a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0220 	bic.w	r2, r2, #32
 80065e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0201 	bic.w	r2, r2, #1
 8006602:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006610:	2b01      	cmp	r3, #1
 8006612:	d135      	bne.n	8006680 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	330c      	adds	r3, #12
 8006620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	e853 3f00 	ldrex	r3, [r3]
 8006628:	613b      	str	r3, [r7, #16]
   return(result);
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f023 0310 	bic.w	r3, r3, #16
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663a:	623a      	str	r2, [r7, #32]
 800663c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663e:	69f9      	ldr	r1, [r7, #28]
 8006640:	6a3a      	ldr	r2, [r7, #32]
 8006642:	e841 2300 	strex	r3, r2, [r1]
 8006646:	61bb      	str	r3, [r7, #24]
   return(result);
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e5      	bne.n	800661a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b10      	cmp	r3, #16
 800665a:	d10a      	bne.n	8006672 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800665c:	2300      	movs	r3, #0
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fdf9 	bl	8006270 <HAL_UARTEx_RxEventCallback>
 800667e:	e002      	b.n	8006686 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7ff fde1 	bl	8006248 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e002      	b.n	8006690 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
  }
}
 8006690:	4618      	mov	r0, r3
 8006692:	3730      	adds	r7, #48	; 0x30
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800669c:	b0c0      	sub	sp, #256	; 0x100
 800669e:	af00      	add	r7, sp, #0
 80066a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	68d9      	ldr	r1, [r3, #12]
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	ea40 0301 	orr.w	r3, r0, r1
 80066c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066f0:	f021 010c 	bic.w	r1, r1, #12
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066fe:	430b      	orrs	r3, r1
 8006700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006712:	6999      	ldr	r1, [r3, #24]
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	ea40 0301 	orr.w	r3, r0, r1
 800671e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4b8f      	ldr	r3, [pc, #572]	; (8006964 <UART_SetConfig+0x2cc>)
 8006728:	429a      	cmp	r2, r3
 800672a:	d005      	beq.n	8006738 <UART_SetConfig+0xa0>
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b8d      	ldr	r3, [pc, #564]	; (8006968 <UART_SetConfig+0x2d0>)
 8006734:	429a      	cmp	r2, r3
 8006736:	d104      	bne.n	8006742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006738:	f7fd ff88 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 800673c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006740:	e003      	b.n	800674a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006742:	f7fd ff6f 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8006746:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800674a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006754:	f040 810c 	bne.w	8006970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675c:	2200      	movs	r2, #0
 800675e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006762:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800676a:	4622      	mov	r2, r4
 800676c:	462b      	mov	r3, r5
 800676e:	1891      	adds	r1, r2, r2
 8006770:	65b9      	str	r1, [r7, #88]	; 0x58
 8006772:	415b      	adcs	r3, r3
 8006774:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800677a:	4621      	mov	r1, r4
 800677c:	eb12 0801 	adds.w	r8, r2, r1
 8006780:	4629      	mov	r1, r5
 8006782:	eb43 0901 	adc.w	r9, r3, r1
 8006786:	f04f 0200 	mov.w	r2, #0
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800679a:	4690      	mov	r8, r2
 800679c:	4699      	mov	r9, r3
 800679e:	4623      	mov	r3, r4
 80067a0:	eb18 0303 	adds.w	r3, r8, r3
 80067a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067a8:	462b      	mov	r3, r5
 80067aa:	eb49 0303 	adc.w	r3, r9, r3
 80067ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067c6:	460b      	mov	r3, r1
 80067c8:	18db      	adds	r3, r3, r3
 80067ca:	653b      	str	r3, [r7, #80]	; 0x50
 80067cc:	4613      	mov	r3, r2
 80067ce:	eb42 0303 	adc.w	r3, r2, r3
 80067d2:	657b      	str	r3, [r7, #84]	; 0x54
 80067d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067dc:	f7f9 fcf4 	bl	80001c8 <__aeabi_uldivmod>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4b61      	ldr	r3, [pc, #388]	; (800696c <UART_SetConfig+0x2d4>)
 80067e6:	fba3 2302 	umull	r2, r3, r3, r2
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	011c      	lsls	r4, r3, #4
 80067ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006800:	4642      	mov	r2, r8
 8006802:	464b      	mov	r3, r9
 8006804:	1891      	adds	r1, r2, r2
 8006806:	64b9      	str	r1, [r7, #72]	; 0x48
 8006808:	415b      	adcs	r3, r3
 800680a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800680c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006810:	4641      	mov	r1, r8
 8006812:	eb12 0a01 	adds.w	sl, r2, r1
 8006816:	4649      	mov	r1, r9
 8006818:	eb43 0b01 	adc.w	fp, r3, r1
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800682c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006830:	4692      	mov	sl, r2
 8006832:	469b      	mov	fp, r3
 8006834:	4643      	mov	r3, r8
 8006836:	eb1a 0303 	adds.w	r3, sl, r3
 800683a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800683e:	464b      	mov	r3, r9
 8006840:	eb4b 0303 	adc.w	r3, fp, r3
 8006844:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006854:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800685c:	460b      	mov	r3, r1
 800685e:	18db      	adds	r3, r3, r3
 8006860:	643b      	str	r3, [r7, #64]	; 0x40
 8006862:	4613      	mov	r3, r2
 8006864:	eb42 0303 	adc.w	r3, r2, r3
 8006868:	647b      	str	r3, [r7, #68]	; 0x44
 800686a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800686e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006872:	f7f9 fca9 	bl	80001c8 <__aeabi_uldivmod>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4611      	mov	r1, r2
 800687c:	4b3b      	ldr	r3, [pc, #236]	; (800696c <UART_SetConfig+0x2d4>)
 800687e:	fba3 2301 	umull	r2, r3, r3, r1
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	2264      	movs	r2, #100	; 0x64
 8006886:	fb02 f303 	mul.w	r3, r2, r3
 800688a:	1acb      	subs	r3, r1, r3
 800688c:	00db      	lsls	r3, r3, #3
 800688e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006892:	4b36      	ldr	r3, [pc, #216]	; (800696c <UART_SetConfig+0x2d4>)
 8006894:	fba3 2302 	umull	r2, r3, r3, r2
 8006898:	095b      	lsrs	r3, r3, #5
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068a0:	441c      	add	r4, r3
 80068a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068b4:	4642      	mov	r2, r8
 80068b6:	464b      	mov	r3, r9
 80068b8:	1891      	adds	r1, r2, r2
 80068ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80068bc:	415b      	adcs	r3, r3
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068c4:	4641      	mov	r1, r8
 80068c6:	1851      	adds	r1, r2, r1
 80068c8:	6339      	str	r1, [r7, #48]	; 0x30
 80068ca:	4649      	mov	r1, r9
 80068cc:	414b      	adcs	r3, r1
 80068ce:	637b      	str	r3, [r7, #52]	; 0x34
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068dc:	4659      	mov	r1, fp
 80068de:	00cb      	lsls	r3, r1, #3
 80068e0:	4651      	mov	r1, sl
 80068e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068e6:	4651      	mov	r1, sl
 80068e8:	00ca      	lsls	r2, r1, #3
 80068ea:	4610      	mov	r0, r2
 80068ec:	4619      	mov	r1, r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	4642      	mov	r2, r8
 80068f2:	189b      	adds	r3, r3, r2
 80068f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068f8:	464b      	mov	r3, r9
 80068fa:	460a      	mov	r2, r1
 80068fc:	eb42 0303 	adc.w	r3, r2, r3
 8006900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006910:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006918:	460b      	mov	r3, r1
 800691a:	18db      	adds	r3, r3, r3
 800691c:	62bb      	str	r3, [r7, #40]	; 0x28
 800691e:	4613      	mov	r3, r2
 8006920:	eb42 0303 	adc.w	r3, r2, r3
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800692a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800692e:	f7f9 fc4b 	bl	80001c8 <__aeabi_uldivmod>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4b0d      	ldr	r3, [pc, #52]	; (800696c <UART_SetConfig+0x2d4>)
 8006938:	fba3 1302 	umull	r1, r3, r3, r2
 800693c:	095b      	lsrs	r3, r3, #5
 800693e:	2164      	movs	r1, #100	; 0x64
 8006940:	fb01 f303 	mul.w	r3, r1, r3
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	3332      	adds	r3, #50	; 0x32
 800694a:	4a08      	ldr	r2, [pc, #32]	; (800696c <UART_SetConfig+0x2d4>)
 800694c:	fba2 2303 	umull	r2, r3, r2, r3
 8006950:	095b      	lsrs	r3, r3, #5
 8006952:	f003 0207 	and.w	r2, r3, #7
 8006956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4422      	add	r2, r4
 800695e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006960:	e105      	b.n	8006b6e <UART_SetConfig+0x4d6>
 8006962:	bf00      	nop
 8006964:	40011000 	.word	0x40011000
 8006968:	40011400 	.word	0x40011400
 800696c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006974:	2200      	movs	r2, #0
 8006976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800697a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800697e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006982:	4642      	mov	r2, r8
 8006984:	464b      	mov	r3, r9
 8006986:	1891      	adds	r1, r2, r2
 8006988:	6239      	str	r1, [r7, #32]
 800698a:	415b      	adcs	r3, r3
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
 800698e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006992:	4641      	mov	r1, r8
 8006994:	1854      	adds	r4, r2, r1
 8006996:	4649      	mov	r1, r9
 8006998:	eb43 0501 	adc.w	r5, r3, r1
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	00eb      	lsls	r3, r5, #3
 80069a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069aa:	00e2      	lsls	r2, r4, #3
 80069ac:	4614      	mov	r4, r2
 80069ae:	461d      	mov	r5, r3
 80069b0:	4643      	mov	r3, r8
 80069b2:	18e3      	adds	r3, r4, r3
 80069b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069b8:	464b      	mov	r3, r9
 80069ba:	eb45 0303 	adc.w	r3, r5, r3
 80069be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069de:	4629      	mov	r1, r5
 80069e0:	008b      	lsls	r3, r1, #2
 80069e2:	4621      	mov	r1, r4
 80069e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069e8:	4621      	mov	r1, r4
 80069ea:	008a      	lsls	r2, r1, #2
 80069ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069f0:	f7f9 fbea 	bl	80001c8 <__aeabi_uldivmod>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4b60      	ldr	r3, [pc, #384]	; (8006b7c <UART_SetConfig+0x4e4>)
 80069fa:	fba3 2302 	umull	r2, r3, r3, r2
 80069fe:	095b      	lsrs	r3, r3, #5
 8006a00:	011c      	lsls	r4, r3, #4
 8006a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a14:	4642      	mov	r2, r8
 8006a16:	464b      	mov	r3, r9
 8006a18:	1891      	adds	r1, r2, r2
 8006a1a:	61b9      	str	r1, [r7, #24]
 8006a1c:	415b      	adcs	r3, r3
 8006a1e:	61fb      	str	r3, [r7, #28]
 8006a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a24:	4641      	mov	r1, r8
 8006a26:	1851      	adds	r1, r2, r1
 8006a28:	6139      	str	r1, [r7, #16]
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	414b      	adcs	r3, r1
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	f04f 0300 	mov.w	r3, #0
 8006a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	00cb      	lsls	r3, r1, #3
 8006a40:	4651      	mov	r1, sl
 8006a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a46:	4651      	mov	r1, sl
 8006a48:	00ca      	lsls	r2, r1, #3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4603      	mov	r3, r0
 8006a50:	4642      	mov	r2, r8
 8006a52:	189b      	adds	r3, r3, r2
 8006a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a58:	464b      	mov	r3, r9
 8006a5a:	460a      	mov	r2, r1
 8006a5c:	eb42 0303 	adc.w	r3, r2, r3
 8006a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	f04f 0300 	mov.w	r3, #0
 8006a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	008b      	lsls	r3, r1, #2
 8006a80:	4641      	mov	r1, r8
 8006a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a86:	4641      	mov	r1, r8
 8006a88:	008a      	lsls	r2, r1, #2
 8006a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a8e:	f7f9 fb9b 	bl	80001c8 <__aeabi_uldivmod>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4b39      	ldr	r3, [pc, #228]	; (8006b7c <UART_SetConfig+0x4e4>)
 8006a98:	fba3 1302 	umull	r1, r3, r3, r2
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	2164      	movs	r1, #100	; 0x64
 8006aa0:	fb01 f303 	mul.w	r3, r1, r3
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	3332      	adds	r3, #50	; 0x32
 8006aaa:	4a34      	ldr	r2, [pc, #208]	; (8006b7c <UART_SetConfig+0x4e4>)
 8006aac:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ab6:	441c      	add	r4, r3
 8006ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006abc:	2200      	movs	r2, #0
 8006abe:	673b      	str	r3, [r7, #112]	; 0x70
 8006ac0:	677a      	str	r2, [r7, #116]	; 0x74
 8006ac2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	464b      	mov	r3, r9
 8006aca:	1891      	adds	r1, r2, r2
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	415b      	adcs	r3, r3
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ad6:	4641      	mov	r1, r8
 8006ad8:	1851      	adds	r1, r2, r1
 8006ada:	6039      	str	r1, [r7, #0]
 8006adc:	4649      	mov	r1, r9
 8006ade:	414b      	adcs	r3, r1
 8006ae0:	607b      	str	r3, [r7, #4]
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006aee:	4659      	mov	r1, fp
 8006af0:	00cb      	lsls	r3, r1, #3
 8006af2:	4651      	mov	r1, sl
 8006af4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006af8:	4651      	mov	r1, sl
 8006afa:	00ca      	lsls	r2, r1, #3
 8006afc:	4610      	mov	r0, r2
 8006afe:	4619      	mov	r1, r3
 8006b00:	4603      	mov	r3, r0
 8006b02:	4642      	mov	r2, r8
 8006b04:	189b      	adds	r3, r3, r2
 8006b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b08:	464b      	mov	r3, r9
 8006b0a:	460a      	mov	r2, r1
 8006b0c:	eb42 0303 	adc.w	r3, r2, r3
 8006b10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8006b1c:	667a      	str	r2, [r7, #100]	; 0x64
 8006b1e:	f04f 0200 	mov.w	r2, #0
 8006b22:	f04f 0300 	mov.w	r3, #0
 8006b26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	008b      	lsls	r3, r1, #2
 8006b2e:	4641      	mov	r1, r8
 8006b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b34:	4641      	mov	r1, r8
 8006b36:	008a      	lsls	r2, r1, #2
 8006b38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b3c:	f7f9 fb44 	bl	80001c8 <__aeabi_uldivmod>
 8006b40:	4602      	mov	r2, r0
 8006b42:	460b      	mov	r3, r1
 8006b44:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <UART_SetConfig+0x4e4>)
 8006b46:	fba3 1302 	umull	r1, r3, r3, r2
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	2164      	movs	r1, #100	; 0x64
 8006b4e:	fb01 f303 	mul.w	r3, r1, r3
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	3332      	adds	r3, #50	; 0x32
 8006b58:	4a08      	ldr	r2, [pc, #32]	; (8006b7c <UART_SetConfig+0x4e4>)
 8006b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5e:	095b      	lsrs	r3, r3, #5
 8006b60:	f003 020f 	and.w	r2, r3, #15
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4422      	add	r2, r4
 8006b6c:	609a      	str	r2, [r3, #8]
}
 8006b6e:	bf00      	nop
 8006b70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b74:	46bd      	mov	sp, r7
 8006b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b7a:	bf00      	nop
 8006b7c:	51eb851f 	.word	0x51eb851f

08006b80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b80:	b084      	sub	sp, #16
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	f107 001c 	add.w	r0, r7, #28
 8006b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d122      	bne.n	8006bde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d105      	bne.n	8006bd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 fbee 	bl	80083b4 <USB_CoreReset>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	73fb      	strb	r3, [r7, #15]
 8006bdc:	e01a      	b.n	8006c14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fbe2 	bl	80083b4 <USB_CoreReset>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
 8006c06:	e005      	b.n	8006c14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d10b      	bne.n	8006c32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f043 0206 	orr.w	r2, r3, #6
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f043 0220 	orr.w	r2, r3, #32
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c3e:	b004      	add	sp, #16
 8006c40:	4770      	bx	lr
	...

08006c44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c52:	79fb      	ldrb	r3, [r7, #7]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d165      	bne.n	8006d24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4a41      	ldr	r2, [pc, #260]	; (8006d60 <USB_SetTurnaroundTime+0x11c>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d906      	bls.n	8006c6e <USB_SetTurnaroundTime+0x2a>
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4a40      	ldr	r2, [pc, #256]	; (8006d64 <USB_SetTurnaroundTime+0x120>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d202      	bcs.n	8006c6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c68:	230f      	movs	r3, #15
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	e062      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	4a3c      	ldr	r2, [pc, #240]	; (8006d64 <USB_SetTurnaroundTime+0x120>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d306      	bcc.n	8006c84 <USB_SetTurnaroundTime+0x40>
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4a3b      	ldr	r2, [pc, #236]	; (8006d68 <USB_SetTurnaroundTime+0x124>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d202      	bcs.n	8006c84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c7e:	230e      	movs	r3, #14
 8006c80:	617b      	str	r3, [r7, #20]
 8006c82:	e057      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4a38      	ldr	r2, [pc, #224]	; (8006d68 <USB_SetTurnaroundTime+0x124>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d306      	bcc.n	8006c9a <USB_SetTurnaroundTime+0x56>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4a37      	ldr	r2, [pc, #220]	; (8006d6c <USB_SetTurnaroundTime+0x128>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d202      	bcs.n	8006c9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c94:	230d      	movs	r3, #13
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	e04c      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	4a33      	ldr	r2, [pc, #204]	; (8006d6c <USB_SetTurnaroundTime+0x128>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d306      	bcc.n	8006cb0 <USB_SetTurnaroundTime+0x6c>
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	4a32      	ldr	r2, [pc, #200]	; (8006d70 <USB_SetTurnaroundTime+0x12c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d802      	bhi.n	8006cb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006caa:	230c      	movs	r3, #12
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	e041      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4a2f      	ldr	r2, [pc, #188]	; (8006d70 <USB_SetTurnaroundTime+0x12c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d906      	bls.n	8006cc6 <USB_SetTurnaroundTime+0x82>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4a2e      	ldr	r2, [pc, #184]	; (8006d74 <USB_SetTurnaroundTime+0x130>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d802      	bhi.n	8006cc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006cc0:	230b      	movs	r3, #11
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	e036      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4a2a      	ldr	r2, [pc, #168]	; (8006d74 <USB_SetTurnaroundTime+0x130>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d906      	bls.n	8006cdc <USB_SetTurnaroundTime+0x98>
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	4a29      	ldr	r2, [pc, #164]	; (8006d78 <USB_SetTurnaroundTime+0x134>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d802      	bhi.n	8006cdc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006cd6:	230a      	movs	r3, #10
 8006cd8:	617b      	str	r3, [r7, #20]
 8006cda:	e02b      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4a26      	ldr	r2, [pc, #152]	; (8006d78 <USB_SetTurnaroundTime+0x134>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d906      	bls.n	8006cf2 <USB_SetTurnaroundTime+0xae>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <USB_SetTurnaroundTime+0x138>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d202      	bcs.n	8006cf2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006cec:	2309      	movs	r3, #9
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	e020      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	4a21      	ldr	r2, [pc, #132]	; (8006d7c <USB_SetTurnaroundTime+0x138>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d306      	bcc.n	8006d08 <USB_SetTurnaroundTime+0xc4>
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	4a20      	ldr	r2, [pc, #128]	; (8006d80 <USB_SetTurnaroundTime+0x13c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d802      	bhi.n	8006d08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d02:	2308      	movs	r3, #8
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	e015      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4a1d      	ldr	r2, [pc, #116]	; (8006d80 <USB_SetTurnaroundTime+0x13c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d906      	bls.n	8006d1e <USB_SetTurnaroundTime+0xda>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4a1c      	ldr	r2, [pc, #112]	; (8006d84 <USB_SetTurnaroundTime+0x140>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d202      	bcs.n	8006d1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d18:	2307      	movs	r3, #7
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	e00a      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d1e:	2306      	movs	r3, #6
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	e007      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d24:	79fb      	ldrb	r3, [r7, #7]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d102      	bne.n	8006d30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d2a:	2309      	movs	r3, #9
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e001      	b.n	8006d34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d30:	2309      	movs	r3, #9
 8006d32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	029b      	lsls	r3, r3, #10
 8006d48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	00d8acbf 	.word	0x00d8acbf
 8006d64:	00e4e1c0 	.word	0x00e4e1c0
 8006d68:	00f42400 	.word	0x00f42400
 8006d6c:	01067380 	.word	0x01067380
 8006d70:	011a499f 	.word	0x011a499f
 8006d74:	01312cff 	.word	0x01312cff
 8006d78:	014ca43f 	.word	0x014ca43f
 8006d7c:	016e3600 	.word	0x016e3600
 8006d80:	01a6ab1f 	.word	0x01a6ab1f
 8006d84:	01e84800 	.word	0x01e84800

08006d88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f043 0201 	orr.w	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f023 0201 	bic.w	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d115      	bne.n	8006e1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	f7fa fee4 	bl	8001bc8 <HAL_Delay>
      ms++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 fa45 	bl	8008296 <USB_GetMode>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d01e      	beq.n	8006e50 <USB_SetCurrentMode+0x84>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b31      	cmp	r3, #49	; 0x31
 8006e16:	d9f0      	bls.n	8006dfa <USB_SetCurrentMode+0x2e>
 8006e18:	e01a      	b.n	8006e50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e1a:	78fb      	ldrb	r3, [r7, #3]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d115      	bne.n	8006e4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	f7fa fecb 	bl	8001bc8 <HAL_Delay>
      ms++;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 fa2c 	bl	8008296 <USB_GetMode>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <USB_SetCurrentMode+0x84>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b31      	cmp	r3, #49	; 0x31
 8006e48:	d9f0      	bls.n	8006e2c <USB_SetCurrentMode+0x60>
 8006e4a:	e001      	b.n	8006e50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e005      	b.n	8006e5c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b32      	cmp	r3, #50	; 0x32
 8006e54:	d101      	bne.n	8006e5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e64:	b084      	sub	sp, #16
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e7e:	2300      	movs	r3, #0
 8006e80:	613b      	str	r3, [r7, #16]
 8006e82:	e009      	b.n	8006e98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	3340      	adds	r3, #64	; 0x40
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	2200      	movs	r2, #0
 8006e90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	3301      	adds	r3, #1
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b0e      	cmp	r3, #14
 8006e9c:	d9f2      	bls.n	8006e84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d11c      	bne.n	8006ede <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eb2:	f043 0302 	orr.w	r3, r3, #2
 8006eb6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	639a      	str	r2, [r3, #56]	; 0x38
 8006edc:	e00b      	b.n	8006ef6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006efc:	461a      	mov	r2, r3
 8006efe:	2300      	movs	r3, #0
 8006f00:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f08:	4619      	mov	r1, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f10:	461a      	mov	r2, r3
 8006f12:	680b      	ldr	r3, [r1, #0]
 8006f14:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d10c      	bne.n	8006f36 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d104      	bne.n	8006f2c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f22:	2100      	movs	r1, #0
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f000 f965 	bl	80071f4 <USB_SetDevSpeed>
 8006f2a:	e008      	b.n	8006f3e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f960 	bl	80071f4 <USB_SetDevSpeed>
 8006f34:	e003      	b.n	8006f3e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f36:	2103      	movs	r1, #3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f95b 	bl	80071f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f3e:	2110      	movs	r1, #16
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f8f3 	bl	800712c <USB_FlushTxFifo>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 f91f 	bl	8007194 <USB_FlushRxFifo>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	461a      	mov	r2, r3
 8006f68:	2300      	movs	r3, #0
 8006f6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	461a      	mov	r2, r3
 8006f74:	2300      	movs	r3, #0
 8006f76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2300      	movs	r3, #0
 8006f82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	e043      	b.n	8007012 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa0:	d118      	bne.n	8006fd4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d10a      	bne.n	8006fbe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	015a      	lsls	r2, r3, #5
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	e013      	b.n	8006fe6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	015a      	lsls	r2, r3, #5
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	e008      	b.n	8006fe6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007004:	461a      	mov	r2, r3
 8007006:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800700a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	3301      	adds	r3, #1
 8007010:	613b      	str	r3, [r7, #16]
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	429a      	cmp	r2, r3
 8007018:	d3b7      	bcc.n	8006f8a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800701a:	2300      	movs	r3, #0
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	e043      	b.n	80070a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007036:	d118      	bne.n	800706a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10a      	bne.n	8007054 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800704a:	461a      	mov	r2, r3
 800704c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	e013      	b.n	800707c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007060:	461a      	mov	r2, r3
 8007062:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007066:	6013      	str	r3, [r2, #0]
 8007068:	e008      	b.n	800707c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	461a      	mov	r2, r3
 8007078:	2300      	movs	r3, #0
 800707a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007088:	461a      	mov	r2, r3
 800708a:	2300      	movs	r3, #0
 800708c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	461a      	mov	r2, r3
 800709c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	3301      	adds	r3, #1
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d3b7      	bcc.n	8007020 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d105      	bne.n	80070e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	f043 0210 	orr.w	r2, r3, #16
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699a      	ldr	r2, [r3, #24]
 80070e8:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <USB_DevInit+0x2c4>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	f043 0208 	orr.w	r2, r3, #8
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007104:	2b01      	cmp	r3, #1
 8007106:	d107      	bne.n	8007118 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007110:	f043 0304 	orr.w	r3, r3, #4
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007118:	7dfb      	ldrb	r3, [r7, #23]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007124:	b004      	add	sp, #16
 8007126:	4770      	bx	lr
 8007128:	803c3800 	.word	0x803c3800

0800712c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007136:	2300      	movs	r3, #0
 8007138:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4a13      	ldr	r2, [pc, #76]	; (8007190 <USB_FlushTxFifo+0x64>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e01b      	b.n	8007184 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	daf2      	bge.n	800713a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	019b      	lsls	r3, r3, #6
 800715c:	f043 0220 	orr.w	r2, r3, #32
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3301      	adds	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4a08      	ldr	r2, [pc, #32]	; (8007190 <USB_FlushTxFifo+0x64>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d901      	bls.n	8007176 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e006      	b.n	8007184 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b20      	cmp	r3, #32
 8007180:	d0f0      	beq.n	8007164 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	00030d40 	.word	0x00030d40

08007194 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4a11      	ldr	r2, [pc, #68]	; (80071f0 <USB_FlushRxFifo+0x5c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d901      	bls.n	80071b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e018      	b.n	80071e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	daf2      	bge.n	80071a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2210      	movs	r2, #16
 80071c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	4a08      	ldr	r2, [pc, #32]	; (80071f0 <USB_FlushRxFifo+0x5c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d901      	bls.n	80071d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e006      	b.n	80071e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0310 	and.w	r3, r3, #16
 80071de:	2b10      	cmp	r3, #16
 80071e0:	d0f0      	beq.n	80071c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	00030d40 	.word	0x00030d40

080071f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007214:	4313      	orrs	r3, r2
 8007216:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007226:	b480      	push	{r7}
 8007228:	b087      	sub	sp, #28
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0306 	and.w	r3, r3, #6
 800723e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d102      	bne.n	800724c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007246:	2300      	movs	r3, #0
 8007248:	75fb      	strb	r3, [r7, #23]
 800724a:	e00a      	b.n	8007262 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d002      	beq.n	8007258 <USB_GetDevSpeed+0x32>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b06      	cmp	r3, #6
 8007256:	d102      	bne.n	800725e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007258:	2302      	movs	r3, #2
 800725a:	75fb      	strb	r3, [r7, #23]
 800725c:	e001      	b.n	8007262 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800725e:	230f      	movs	r3, #15
 8007260:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
}
 8007264:	4618      	mov	r0, r3
 8007266:	371c      	adds	r7, #28
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	785b      	ldrb	r3, [r3, #1]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d13a      	bne.n	8007302 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	2101      	movs	r1, #1
 800729e:	fa01 f303 	lsl.w	r3, r1, r3
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	68f9      	ldr	r1, [r7, #12]
 80072a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072aa:	4313      	orrs	r3, r2
 80072ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d155      	bne.n	8007370 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	791b      	ldrb	r3, [r3, #4]
 80072de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	059b      	lsls	r3, r3, #22
 80072e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072e8:	4313      	orrs	r3, r2
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	0151      	lsls	r1, r2, #5
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	440a      	add	r2, r1
 80072f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fe:	6013      	str	r3, [r2, #0]
 8007300:	e036      	b.n	8007370 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007308:	69da      	ldr	r2, [r3, #28]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	2101      	movs	r1, #1
 8007314:	fa01 f303 	lsl.w	r3, r1, r3
 8007318:	041b      	lsls	r3, r3, #16
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007320:	4313      	orrs	r3, r2
 8007322:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d11a      	bne.n	8007370 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	791b      	ldrb	r3, [r3, #4]
 8007354:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007356:	430b      	orrs	r3, r1
 8007358:	4313      	orrs	r3, r2
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	0151      	lsls	r1, r2, #5
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	440a      	add	r2, r1
 8007362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800736a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800736e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
	...

08007380 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	785b      	ldrb	r3, [r3, #1]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d161      	bne.n	8007460 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b2:	d11f      	bne.n	80073f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	f003 030f 	and.w	r3, r3, #15
 8007404:	2101      	movs	r1, #1
 8007406:	fa01 f303 	lsl.w	r3, r1, r3
 800740a:	b29b      	uxth	r3, r3
 800740c:	43db      	mvns	r3, r3
 800740e:	68f9      	ldr	r1, [r7, #12]
 8007410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007414:	4013      	ands	r3, r2
 8007416:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	f003 030f 	and.w	r3, r3, #15
 8007428:	2101      	movs	r1, #1
 800742a:	fa01 f303 	lsl.w	r3, r1, r3
 800742e:	b29b      	uxth	r3, r3
 8007430:	43db      	mvns	r3, r3
 8007432:	68f9      	ldr	r1, [r7, #12]
 8007434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007438:	4013      	ands	r3, r2
 800743a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	015a      	lsls	r2, r3, #5
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4413      	add	r3, r2
 8007444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	0159      	lsls	r1, r3, #5
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	440b      	add	r3, r1
 8007452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007456:	4619      	mov	r1, r3
 8007458:	4b35      	ldr	r3, [pc, #212]	; (8007530 <USB_DeactivateEndpoint+0x1b0>)
 800745a:	4013      	ands	r3, r2
 800745c:	600b      	str	r3, [r1, #0]
 800745e:	e060      	b.n	8007522 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007476:	d11f      	bne.n	80074b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	440a      	add	r2, r1
 800748e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007492:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007496:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	2101      	movs	r1, #1
 80074ca:	fa01 f303 	lsl.w	r3, r1, r3
 80074ce:	041b      	lsls	r3, r3, #16
 80074d0:	43db      	mvns	r3, r3
 80074d2:	68f9      	ldr	r1, [r7, #12]
 80074d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074d8:	4013      	ands	r3, r2
 80074da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	69da      	ldr	r2, [r3, #28]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	2101      	movs	r1, #1
 80074ee:	fa01 f303 	lsl.w	r3, r1, r3
 80074f2:	041b      	lsls	r3, r3, #16
 80074f4:	43db      	mvns	r3, r3
 80074f6:	68f9      	ldr	r1, [r7, #12]
 80074f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074fc:	4013      	ands	r3, r2
 80074fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	0159      	lsls	r1, r3, #5
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	440b      	add	r3, r1
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	4619      	mov	r1, r3
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <USB_DeactivateEndpoint+0x1b4>)
 800751e:	4013      	ands	r3, r2
 8007520:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	ec337800 	.word	0xec337800
 8007534:	eff37800 	.word	0xeff37800

08007538 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af02      	add	r7, sp, #8
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	785b      	ldrb	r3, [r3, #1]
 8007554:	2b01      	cmp	r3, #1
 8007556:	f040 815c 	bne.w	8007812 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d132      	bne.n	80075c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	69ba      	ldr	r2, [r7, #24]
 8007572:	0151      	lsls	r1, r2, #5
 8007574:	69fa      	ldr	r2, [r7, #28]
 8007576:	440a      	add	r2, r1
 8007578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007580:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c0:	0cdb      	lsrs	r3, r3, #19
 80075c2:	04db      	lsls	r3, r3, #19
 80075c4:	6113      	str	r3, [r2, #16]
 80075c6:	e074      	b.n	80076b2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e2:	0cdb      	lsrs	r3, r3, #19
 80075e4:	04db      	lsls	r3, r3, #19
 80075e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007602:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007606:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800760a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007618:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6999      	ldr	r1, [r3, #24]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	440b      	add	r3, r1
 8007624:	1e59      	subs	r1, r3, #1
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	fbb1 f3f3 	udiv	r3, r1, r3
 800762e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007630:	4b9d      	ldr	r3, [pc, #628]	; (80078a8 <USB_EPStartXfer+0x370>)
 8007632:	400b      	ands	r3, r1
 8007634:	69b9      	ldr	r1, [r7, #24]
 8007636:	0148      	lsls	r0, r1, #5
 8007638:	69f9      	ldr	r1, [r7, #28]
 800763a:	4401      	add	r1, r0
 800763c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007640:	4313      	orrs	r3, r2
 8007642:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800765a:	69b9      	ldr	r1, [r7, #24]
 800765c:	0148      	lsls	r0, r1, #5
 800765e:	69f9      	ldr	r1, [r7, #28]
 8007660:	4401      	add	r1, r0
 8007662:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007666:	4313      	orrs	r3, r2
 8007668:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	791b      	ldrb	r3, [r3, #4]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d11f      	bne.n	80076b2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800768c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007690:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076b0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d14b      	bne.n	8007750 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d009      	beq.n	80076d4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076cc:	461a      	mov	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	791b      	ldrb	r3, [r3, #4]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d128      	bne.n	800772e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d110      	bne.n	800770e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	69ba      	ldr	r2, [r7, #24]
 80076fc:	0151      	lsls	r1, r2, #5
 80076fe:	69fa      	ldr	r2, [r7, #28]
 8007700:	440a      	add	r2, r1
 8007702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800770a:	6013      	str	r3, [r2, #0]
 800770c:	e00f      	b.n	800772e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	0151      	lsls	r1, r2, #5
 8007720:	69fa      	ldr	r2, [r7, #28]
 8007722:	440a      	add	r2, r1
 8007724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007748:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800774c:	6013      	str	r3, [r2, #0]
 800774e:	e133      	b.n	80079b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	0151      	lsls	r1, r2, #5
 8007762:	69fa      	ldr	r2, [r7, #28]
 8007764:	440a      	add	r2, r1
 8007766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800776a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800776e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	791b      	ldrb	r3, [r3, #4]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d015      	beq.n	80077a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 811b 	beq.w	80079b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	f003 030f 	and.w	r3, r3, #15
 8007792:	2101      	movs	r1, #1
 8007794:	fa01 f303 	lsl.w	r3, r1, r3
 8007798:	69f9      	ldr	r1, [r7, #28]
 800779a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800779e:	4313      	orrs	r3, r2
 80077a0:	634b      	str	r3, [r1, #52]	; 0x34
 80077a2:	e109      	b.n	80079b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d110      	bne.n	80077d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	e00f      	b.n	80077f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	69ba      	ldr	r2, [r7, #24]
 80077e6:	0151      	lsls	r1, r2, #5
 80077e8:	69fa      	ldr	r2, [r7, #28]
 80077ea:	440a      	add	r2, r1
 80077ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6919      	ldr	r1, [r3, #16]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	781a      	ldrb	r2, [r3, #0]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	b298      	uxth	r0, r3
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	9300      	str	r3, [sp, #0]
 8007808:	4603      	mov	r3, r0
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 fade 	bl	8007dcc <USB_WritePacket>
 8007810:	e0d2      	b.n	80079b8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	0151      	lsls	r1, r2, #5
 8007824:	69fa      	ldr	r2, [r7, #28]
 8007826:	440a      	add	r2, r1
 8007828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800782c:	0cdb      	lsrs	r3, r3, #19
 800782e:	04db      	lsls	r3, r3, #19
 8007830:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007850:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007854:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d126      	bne.n	80078ac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	4413      	add	r3, r2
 8007866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007874:	69b9      	ldr	r1, [r7, #24]
 8007876:	0148      	lsls	r0, r1, #5
 8007878:	69f9      	ldr	r1, [r7, #28]
 800787a:	4401      	add	r1, r0
 800787c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007880:	4313      	orrs	r3, r2
 8007882:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	69ba      	ldr	r2, [r7, #24]
 8007894:	0151      	lsls	r1, r2, #5
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	440a      	add	r2, r1
 800789a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800789e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078a2:	6113      	str	r3, [r2, #16]
 80078a4:	e03a      	b.n	800791c <USB_EPStartXfer+0x3e4>
 80078a6:	bf00      	nop
 80078a8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	699a      	ldr	r2, [r3, #24]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	1e5a      	subs	r2, r3, #1
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	8afa      	ldrh	r2, [r7, #22]
 80078c8:	fb03 f202 	mul.w	r2, r3, r2
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	8afb      	ldrh	r3, [r7, #22]
 80078e0:	04d9      	lsls	r1, r3, #19
 80078e2:	4b38      	ldr	r3, [pc, #224]	; (80079c4 <USB_EPStartXfer+0x48c>)
 80078e4:	400b      	ands	r3, r1
 80078e6:	69b9      	ldr	r1, [r7, #24]
 80078e8:	0148      	lsls	r0, r1, #5
 80078ea:	69f9      	ldr	r1, [r7, #28]
 80078ec:	4401      	add	r1, r0
 80078ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078f2:	4313      	orrs	r3, r2
 80078f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007902:	691a      	ldr	r2, [r3, #16]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800790c:	69b9      	ldr	r1, [r7, #24]
 800790e:	0148      	lsls	r0, r1, #5
 8007910:	69f9      	ldr	r1, [r7, #28]
 8007912:	4401      	add	r1, r0
 8007914:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007918:	4313      	orrs	r3, r2
 800791a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d10d      	bne.n	800793e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d009      	beq.n	800793e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	6919      	ldr	r1, [r3, #16]
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793a:	460a      	mov	r2, r1
 800793c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	791b      	ldrb	r3, [r3, #4]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d128      	bne.n	8007998 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007952:	2b00      	cmp	r3, #0
 8007954:	d110      	bne.n	8007978 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	0151      	lsls	r1, r2, #5
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	440a      	add	r2, r1
 800796c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007970:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	e00f      	b.n	8007998 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	0151      	lsls	r1, r2, #5
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	440a      	add	r2, r1
 800798e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007996:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	0151      	lsls	r1, r2, #5
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	440a      	add	r2, r1
 80079ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3720      	adds	r7, #32
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	1ff80000 	.word	0x1ff80000

080079c8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	4613      	mov	r3, r2
 80079d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	f040 80ce 	bne.w	8007b86 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	699b      	ldr	r3, [r3, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d132      	bne.n	8007a58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	0151      	lsls	r1, r2, #5
 8007a04:	697a      	ldr	r2, [r7, #20]
 8007a06:	440a      	add	r2, r1
 8007a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	0151      	lsls	r1, r2, #5
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	440a      	add	r2, r1
 8007a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	015a      	lsls	r2, r3, #5
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	0151      	lsls	r1, r2, #5
 8007a48:	697a      	ldr	r2, [r7, #20]
 8007a4a:	440a      	add	r2, r1
 8007a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a50:	0cdb      	lsrs	r3, r3, #19
 8007a52:	04db      	lsls	r3, r3, #19
 8007a54:	6113      	str	r3, [r2, #16]
 8007a56:	e04e      	b.n	8007af6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	015a      	lsls	r2, r3, #5
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	4413      	add	r3, r2
 8007a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	693a      	ldr	r2, [r7, #16]
 8007a68:	0151      	lsls	r1, r2, #5
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	440a      	add	r2, r1
 8007a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a72:	0cdb      	lsrs	r3, r3, #19
 8007a74:	04db      	lsls	r3, r3, #19
 8007a76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	699a      	ldr	r2, [r3, #24]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d903      	bls.n	8007ab0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	68da      	ldr	r2, [r3, #12]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	0151      	lsls	r1, r2, #5
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	440a      	add	r2, r1
 8007ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ace:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ae6:	6939      	ldr	r1, [r7, #16]
 8007ae8:	0148      	lsls	r0, r1, #5
 8007aea:	6979      	ldr	r1, [r7, #20]
 8007aec:	4401      	add	r1, r0
 8007aee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007af2:	4313      	orrs	r3, r2
 8007af4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d11e      	bne.n	8007b3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d009      	beq.n	8007b18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b10:	461a      	mov	r2, r3
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	e097      	b.n	8007c6a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	0151      	lsls	r1, r2, #5
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	440a      	add	r2, r1
 8007b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8083 	beq.w	8007c6a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 030f 	and.w	r3, r3, #15
 8007b74:	2101      	movs	r1, #1
 8007b76:	fa01 f303 	lsl.w	r3, r1, r3
 8007b7a:	6979      	ldr	r1, [r7, #20]
 8007b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b80:	4313      	orrs	r3, r2
 8007b82:	634b      	str	r3, [r1, #52]	; 0x34
 8007b84:	e071      	b.n	8007c6a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ba0:	0cdb      	lsrs	r3, r3, #19
 8007ba2:	04db      	lsls	r3, r3, #19
 8007ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	697a      	ldr	r2, [r7, #20]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	69db      	ldr	r3, [r3, #28]
 8007c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c18:	6939      	ldr	r1, [r7, #16]
 8007c1a:	0148      	lsls	r0, r1, #5
 8007c1c:	6979      	ldr	r1, [r7, #20]
 8007c1e:	4401      	add	r1, r0
 8007c20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c24:	4313      	orrs	r3, r2
 8007c26:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d10d      	bne.n	8007c4a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	6919      	ldr	r1, [r3, #16]
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	015a      	lsls	r2, r3, #5
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	4413      	add	r3, r2
 8007c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c46:	460a      	mov	r2, r1
 8007c48:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	0151      	lsls	r1, r2, #5
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	440a      	add	r2, r1
 8007c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b087      	sub	sp, #28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	785b      	ldrb	r3, [r3, #1]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d14a      	bne.n	8007d2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cae:	f040 8086 	bne.w	8007dbe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	015a      	lsls	r2, r3, #5
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	7812      	ldrb	r2, [r2, #0]
 8007cc6:	0151      	lsls	r1, r2, #5
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	440a      	add	r2, r1
 8007ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	7812      	ldrb	r2, [r2, #0]
 8007cea:	0151      	lsls	r1, r2, #5
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	440a      	add	r2, r1
 8007cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cf8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d902      	bls.n	8007d10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007d0e:	e056      	b.n	8007dbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d28:	d0e7      	beq.n	8007cfa <USB_EPStopXfer+0x82>
 8007d2a:	e048      	b.n	8007dbe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d44:	d13b      	bne.n	8007dbe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	0151      	lsls	r1, r2, #5
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	440a      	add	r2, r1
 8007d60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	7812      	ldrb	r2, [r2, #0]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3301      	adds	r3, #1
 8007d92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d902      	bls.n	8007da4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	75fb      	strb	r3, [r7, #23]
          break;
 8007da2:	e00c      	b.n	8007dbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dbc:	d0e7      	beq.n	8007d8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	371c      	adds	r7, #28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b089      	sub	sp, #36	; 0x24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	60b9      	str	r1, [r7, #8]
 8007dd6:	4611      	mov	r1, r2
 8007dd8:	461a      	mov	r2, r3
 8007dda:	460b      	mov	r3, r1
 8007ddc:	71fb      	strb	r3, [r7, #7]
 8007dde:	4613      	mov	r3, r2
 8007de0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007dea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d123      	bne.n	8007e3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007df2:	88bb      	ldrh	r3, [r7, #4]
 8007df4:	3303      	adds	r3, #3
 8007df6:	089b      	lsrs	r3, r3, #2
 8007df8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	e018      	b.n	8007e32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	031a      	lsls	r2, r3, #12
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	3301      	adds	r3, #1
 8007e18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	3301      	adds	r3, #1
 8007e24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	61bb      	str	r3, [r7, #24]
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d3e2      	bcc.n	8007e00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3724      	adds	r7, #36	; 0x24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b08b      	sub	sp, #44	; 0x2c
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e5e:	88fb      	ldrh	r3, [r7, #6]
 8007e60:	089b      	lsrs	r3, r3, #2
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	623b      	str	r3, [r7, #32]
 8007e72:	e014      	b.n	8007e9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	3301      	adds	r3, #1
 8007e84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	3301      	adds	r3, #1
 8007e8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	3301      	adds	r3, #1
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	3301      	adds	r3, #1
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	623b      	str	r3, [r7, #32]
 8007e9e:	6a3a      	ldr	r2, [r7, #32]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3e6      	bcc.n	8007e74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007ea6:	8bfb      	ldrh	r3, [r7, #30]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d01e      	beq.n	8007eea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f107 0310 	add.w	r3, r7, #16
 8007ebc:	6812      	ldr	r2, [r2, #0]
 8007ebe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	701a      	strb	r2, [r3, #0]
      i++;
 8007ed2:	6a3b      	ldr	r3, [r7, #32]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	3301      	adds	r3, #1
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007ede:	8bfb      	ldrh	r3, [r7, #30]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ee4:	8bfb      	ldrh	r3, [r7, #30]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1ea      	bne.n	8007ec0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	372c      	adds	r7, #44	; 0x2c
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d12c      	bne.n	8007f6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	db12      	blt.n	8007f4c <USB_EPSetStall+0x54>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00f      	beq.n	8007f4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	0151      	lsls	r1, r2, #5
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	440a      	add	r2, r1
 8007f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	0151      	lsls	r1, r2, #5
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	440a      	add	r2, r1
 8007f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	e02b      	b.n	8007fc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	db12      	blt.n	8007fa6 <USB_EPSetStall+0xae>
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	015a      	lsls	r2, r3, #5
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	0151      	lsls	r1, r2, #5
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	440a      	add	r2, r1
 8007f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fa4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	0151      	lsls	r1, r2, #5
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	440a      	add	r2, r1
 8007fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d128      	bne.n	8008042 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	0151      	lsls	r1, r2, #5
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	440a      	add	r2, r1
 8008006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800800e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	791b      	ldrb	r3, [r3, #4]
 8008014:	2b03      	cmp	r3, #3
 8008016:	d003      	beq.n	8008020 <USB_EPClearStall+0x4c>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	791b      	ldrb	r3, [r3, #4]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d138      	bne.n	8008092 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	0151      	lsls	r1, r2, #5
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	440a      	add	r2, r1
 8008036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800803a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800803e:	6013      	str	r3, [r2, #0]
 8008040:	e027      	b.n	8008092 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68ba      	ldr	r2, [r7, #8]
 8008052:	0151      	lsls	r1, r2, #5
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	440a      	add	r2, r1
 8008058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800805c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008060:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	791b      	ldrb	r3, [r3, #4]
 8008066:	2b03      	cmp	r3, #3
 8008068:	d003      	beq.n	8008072 <USB_EPClearStall+0x9e>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	791b      	ldrb	r3, [r3, #4]
 800806e:	2b02      	cmp	r3, #2
 8008070:	d10f      	bne.n	8008092 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	0151      	lsls	r1, r2, #5
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	440a      	add	r2, r1
 8008088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800808c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008090:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	78fb      	ldrb	r3, [r7, #3]
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80080d4:	68f9      	ldr	r1, [r7, #12]
 80080d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080da:	4313      	orrs	r3, r2
 80080dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008106:	f023 0303 	bic.w	r3, r3, #3
 800810a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800811a:	f023 0302 	bic.w	r3, r3, #2
 800811e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3714      	adds	r7, #20
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008148:	f023 0303 	bic.w	r3, r3, #3
 800814c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800815c:	f043 0302 	orr.w	r3, r3, #2
 8008160:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4013      	ands	r3, r2
 8008186:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008188:	68fb      	ldr	r3, [r7, #12]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008196:	b480      	push	{r7}
 8008198:	b085      	sub	sp, #20
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081a8:	699b      	ldr	r3, [r3, #24]
 80081aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4013      	ands	r3, r2
 80081b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	0c1b      	lsrs	r3, r3, #16
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e6:	69db      	ldr	r3, [r3, #28]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	4013      	ands	r3, r2
 80081ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	b29b      	uxth	r3, r3
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3714      	adds	r7, #20
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80081fe:	b480      	push	{r7}
 8008200:	b085      	sub	sp, #20
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	460b      	mov	r3, r1
 8008208:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4013      	ands	r3, r2
 800822a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800822c:	68bb      	ldr	r3, [r7, #8]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800823a:	b480      	push	{r7}
 800823c:	b087      	sub	sp, #28
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800825e:	78fb      	ldrb	r3, [r7, #3]
 8008260:	f003 030f 	and.w	r3, r3, #15
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	fa22 f303 	lsr.w	r3, r2, r3
 800826a:	01db      	lsls	r3, r3, #7
 800826c:	b2db      	uxtb	r3, r3
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	4313      	orrs	r3, r2
 8008272:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	4013      	ands	r3, r2
 8008286:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008288:	68bb      	ldr	r3, [r7, #8]
}
 800828a:	4618      	mov	r0, r3
 800828c:	371c      	adds	r7, #28
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	f003 0301 	and.w	r3, r3, #1
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b085      	sub	sp, #20
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082d0:	f023 0307 	bic.w	r3, r3, #7
 80082d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3714      	adds	r7, #20
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	460b      	mov	r3, r1
 8008302:	607a      	str	r2, [r7, #4]
 8008304:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	333c      	adds	r3, #60	; 0x3c
 800830e:	3304      	adds	r3, #4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	4a26      	ldr	r2, [pc, #152]	; (80083b0 <USB_EP0_OutStart+0xb8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d90a      	bls.n	8008332 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800832c:	d101      	bne.n	8008332 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	e037      	b.n	80083a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008338:	461a      	mov	r2, r3
 800833a:	2300      	movs	r3, #0
 800833c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800834c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008350:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008360:	f043 0318 	orr.w	r3, r3, #24
 8008364:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	697a      	ldr	r2, [r7, #20]
 8008370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008374:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008378:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10f      	bne.n	80083a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008386:	461a      	mov	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800839a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800839e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	4f54300a 	.word	0x4f54300a

080083b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	3301      	adds	r3, #1
 80083c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4a13      	ldr	r2, [pc, #76]	; (8008418 <USB_CoreReset+0x64>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d901      	bls.n	80083d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e01b      	b.n	800840a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	daf2      	bge.n	80083c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	f043 0201 	orr.w	r2, r3, #1
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4a09      	ldr	r2, [pc, #36]	; (8008418 <USB_CoreReset+0x64>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d901      	bls.n	80083fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e006      	b.n	800840a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b01      	cmp	r3, #1
 8008406:	d0f0      	beq.n	80083ea <USB_CoreReset+0x36>

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	00030d40 	.word	0x00030d40

0800841c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008428:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800842c:	f002 fc96 	bl	800ad5c <USBD_static_malloc>
 8008430:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d109      	bne.n	800844c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	32b0      	adds	r2, #176	; 0xb0
 8008442:	2100      	movs	r1, #0
 8008444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008448:	2302      	movs	r3, #2
 800844a:	e0d4      	b.n	80085f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800844c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008450:	2100      	movs	r1, #0
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f002 fcf0 	bl	800ae38 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	32b0      	adds	r2, #176	; 0xb0
 8008462:	68f9      	ldr	r1, [r7, #12]
 8008464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	32b0      	adds	r2, #176	; 0xb0
 8008472:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7c1b      	ldrb	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d138      	bne.n	80084f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008484:	4b5e      	ldr	r3, [pc, #376]	; (8008600 <USBD_CDC_Init+0x1e4>)
 8008486:	7819      	ldrb	r1, [r3, #0]
 8008488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800848c:	2202      	movs	r2, #2
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f002 fb41 	bl	800ab16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008494:	4b5a      	ldr	r3, [pc, #360]	; (8008600 <USBD_CDC_Init+0x1e4>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	f003 020f 	and.w	r2, r3, #15
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	4613      	mov	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	3324      	adds	r3, #36	; 0x24
 80084aa:	2201      	movs	r2, #1
 80084ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80084ae:	4b55      	ldr	r3, [pc, #340]	; (8008604 <USBD_CDC_Init+0x1e8>)
 80084b0:	7819      	ldrb	r1, [r3, #0]
 80084b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084b6:	2202      	movs	r2, #2
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f002 fb2c 	bl	800ab16 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80084be:	4b51      	ldr	r3, [pc, #324]	; (8008604 <USBD_CDC_Init+0x1e8>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f003 020f 	and.w	r2, r3, #15
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084d6:	2201      	movs	r2, #1
 80084d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80084da:	4b4b      	ldr	r3, [pc, #300]	; (8008608 <USBD_CDC_Init+0x1ec>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	f003 020f 	and.w	r2, r3, #15
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	3326      	adds	r3, #38	; 0x26
 80084f0:	2210      	movs	r2, #16
 80084f2:	801a      	strh	r2, [r3, #0]
 80084f4:	e035      	b.n	8008562 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80084f6:	4b42      	ldr	r3, [pc, #264]	; (8008600 <USBD_CDC_Init+0x1e4>)
 80084f8:	7819      	ldrb	r1, [r3, #0]
 80084fa:	2340      	movs	r3, #64	; 0x40
 80084fc:	2202      	movs	r2, #2
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f002 fb09 	bl	800ab16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008504:	4b3e      	ldr	r3, [pc, #248]	; (8008600 <USBD_CDC_Init+0x1e4>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 020f 	and.w	r2, r3, #15
 800850c:	6879      	ldr	r1, [r7, #4]
 800850e:	4613      	mov	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	440b      	add	r3, r1
 8008518:	3324      	adds	r3, #36	; 0x24
 800851a:	2201      	movs	r2, #1
 800851c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800851e:	4b39      	ldr	r3, [pc, #228]	; (8008604 <USBD_CDC_Init+0x1e8>)
 8008520:	7819      	ldrb	r1, [r3, #0]
 8008522:	2340      	movs	r3, #64	; 0x40
 8008524:	2202      	movs	r2, #2
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f002 faf5 	bl	800ab16 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800852c:	4b35      	ldr	r3, [pc, #212]	; (8008604 <USBD_CDC_Init+0x1e8>)
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	f003 020f 	and.w	r2, r3, #15
 8008534:	6879      	ldr	r1, [r7, #4]
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	009b      	lsls	r3, r3, #2
 800853e:	440b      	add	r3, r1
 8008540:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008544:	2201      	movs	r2, #1
 8008546:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008548:	4b2f      	ldr	r3, [pc, #188]	; (8008608 <USBD_CDC_Init+0x1ec>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	f003 020f 	and.w	r2, r3, #15
 8008550:	6879      	ldr	r1, [r7, #4]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	3326      	adds	r3, #38	; 0x26
 800855e:	2210      	movs	r2, #16
 8008560:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008562:	4b29      	ldr	r3, [pc, #164]	; (8008608 <USBD_CDC_Init+0x1ec>)
 8008564:	7819      	ldrb	r1, [r3, #0]
 8008566:	2308      	movs	r3, #8
 8008568:	2203      	movs	r2, #3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f002 fad3 	bl	800ab16 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008570:	4b25      	ldr	r3, [pc, #148]	; (8008608 <USBD_CDC_Init+0x1ec>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f003 020f 	and.w	r2, r3, #15
 8008578:	6879      	ldr	r1, [r7, #4]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	440b      	add	r3, r1
 8008584:	3324      	adds	r3, #36	; 0x24
 8008586:	2201      	movs	r2, #1
 8008588:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	33b0      	adds	r3, #176	; 0xb0
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80085c0:	2302      	movs	r3, #2
 80085c2:	e018      	b.n	80085f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	7c1b      	ldrb	r3, [r3, #16]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10a      	bne.n	80085e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80085cc:	4b0d      	ldr	r3, [pc, #52]	; (8008604 <USBD_CDC_Init+0x1e8>)
 80085ce:	7819      	ldrb	r1, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f002 fb8a 	bl	800acf4 <USBD_LL_PrepareReceive>
 80085e0:	e008      	b.n	80085f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80085e2:	4b08      	ldr	r3, [pc, #32]	; (8008604 <USBD_CDC_Init+0x1e8>)
 80085e4:	7819      	ldrb	r1, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085ec:	2340      	movs	r3, #64	; 0x40
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f002 fb80 	bl	800acf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	2000009b 	.word	0x2000009b
 8008604:	2000009c 	.word	0x2000009c
 8008608:	2000009d 	.word	0x2000009d

0800860c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	460b      	mov	r3, r1
 8008616:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008618:	4b3a      	ldr	r3, [pc, #232]	; (8008704 <USBD_CDC_DeInit+0xf8>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f002 fa9f 	bl	800ab62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008624:	4b37      	ldr	r3, [pc, #220]	; (8008704 <USBD_CDC_DeInit+0xf8>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 020f 	and.w	r2, r3, #15
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	3324      	adds	r3, #36	; 0x24
 800863a:	2200      	movs	r2, #0
 800863c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800863e:	4b32      	ldr	r3, [pc, #200]	; (8008708 <USBD_CDC_DeInit+0xfc>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f002 fa8c 	bl	800ab62 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800864a:	4b2f      	ldr	r3, [pc, #188]	; (8008708 <USBD_CDC_DeInit+0xfc>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	f003 020f 	and.w	r2, r3, #15
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	440b      	add	r3, r1
 800865e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008662:	2200      	movs	r2, #0
 8008664:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008666:	4b29      	ldr	r3, [pc, #164]	; (800870c <USBD_CDC_DeInit+0x100>)
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f002 fa78 	bl	800ab62 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008672:	4b26      	ldr	r3, [pc, #152]	; (800870c <USBD_CDC_DeInit+0x100>)
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	f003 020f 	and.w	r2, r3, #15
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4613      	mov	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	3324      	adds	r3, #36	; 0x24
 8008688:	2200      	movs	r2, #0
 800868a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800868c:	4b1f      	ldr	r3, [pc, #124]	; (800870c <USBD_CDC_DeInit+0x100>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	f003 020f 	and.w	r2, r3, #15
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	440b      	add	r3, r1
 80086a0:	3326      	adds	r3, #38	; 0x26
 80086a2:	2200      	movs	r2, #0
 80086a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	32b0      	adds	r2, #176	; 0xb0
 80086b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01f      	beq.n	80086f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	33b0      	adds	r3, #176	; 0xb0
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	32b0      	adds	r2, #176	; 0xb0
 80086d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086da:	4618      	mov	r0, r3
 80086dc:	f002 fb4c 	bl	800ad78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	32b0      	adds	r2, #176	; 0xb0
 80086ea:	2100      	movs	r1, #0
 80086ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	2000009b 	.word	0x2000009b
 8008708:	2000009c 	.word	0x2000009c
 800870c:	2000009d 	.word	0x2000009d

08008710 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	32b0      	adds	r2, #176	; 0xb0
 8008724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008728:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800873c:	2303      	movs	r3, #3
 800873e:	e0bf      	b.n	80088c0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008748:	2b00      	cmp	r3, #0
 800874a:	d050      	beq.n	80087ee <USBD_CDC_Setup+0xde>
 800874c:	2b20      	cmp	r3, #32
 800874e:	f040 80af 	bne.w	80088b0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	88db      	ldrh	r3, [r3, #6]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d03a      	beq.n	80087d0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	b25b      	sxtb	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	da1b      	bge.n	800879c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	33b0      	adds	r3, #176	; 0xb0
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800877a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	88d2      	ldrh	r2, [r2, #6]
 8008780:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	88db      	ldrh	r3, [r3, #6]
 8008786:	2b07      	cmp	r3, #7
 8008788:	bf28      	it	cs
 800878a:	2307      	movcs	r3, #7
 800878c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	89fa      	ldrh	r2, [r7, #14]
 8008792:	4619      	mov	r1, r3
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f001 fd89 	bl	800a2ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800879a:	e090      	b.n	80088be <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	785a      	ldrb	r2, [r3, #1]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	88db      	ldrh	r3, [r3, #6]
 80087aa:	2b3f      	cmp	r3, #63	; 0x3f
 80087ac:	d803      	bhi.n	80087b6 <USBD_CDC_Setup+0xa6>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	88db      	ldrh	r3, [r3, #6]
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	e000      	b.n	80087b8 <USBD_CDC_Setup+0xa8>
 80087b6:	2240      	movs	r2, #64	; 0x40
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80087be:	6939      	ldr	r1, [r7, #16]
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80087c6:	461a      	mov	r2, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 fd9b 	bl	800a304 <USBD_CtlPrepareRx>
      break;
 80087ce:	e076      	b.n	80088be <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	33b0      	adds	r3, #176	; 0xb0
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	7850      	ldrb	r0, [r2, #1]
 80087e6:	2200      	movs	r2, #0
 80087e8:	6839      	ldr	r1, [r7, #0]
 80087ea:	4798      	blx	r3
      break;
 80087ec:	e067      	b.n	80088be <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	2b0b      	cmp	r3, #11
 80087f4:	d851      	bhi.n	800889a <USBD_CDC_Setup+0x18a>
 80087f6:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <USBD_CDC_Setup+0xec>)
 80087f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fc:	0800882d 	.word	0x0800882d
 8008800:	080088a9 	.word	0x080088a9
 8008804:	0800889b 	.word	0x0800889b
 8008808:	0800889b 	.word	0x0800889b
 800880c:	0800889b 	.word	0x0800889b
 8008810:	0800889b 	.word	0x0800889b
 8008814:	0800889b 	.word	0x0800889b
 8008818:	0800889b 	.word	0x0800889b
 800881c:	0800889b 	.word	0x0800889b
 8008820:	0800889b 	.word	0x0800889b
 8008824:	08008857 	.word	0x08008857
 8008828:	08008881 	.word	0x08008881
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b03      	cmp	r3, #3
 8008836:	d107      	bne.n	8008848 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008838:	f107 030a 	add.w	r3, r7, #10
 800883c:	2202      	movs	r2, #2
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fd33 	bl	800a2ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008846:	e032      	b.n	80088ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008848:	6839      	ldr	r1, [r7, #0]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fcbd 	bl	800a1ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008850:	2303      	movs	r3, #3
 8008852:	75fb      	strb	r3, [r7, #23]
          break;
 8008854:	e02b      	b.n	80088ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b03      	cmp	r3, #3
 8008860:	d107      	bne.n	8008872 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008862:	f107 030d 	add.w	r3, r7, #13
 8008866:	2201      	movs	r2, #1
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fd1e 	bl	800a2ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008870:	e01d      	b.n	80088ae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 fca8 	bl	800a1ca <USBD_CtlError>
            ret = USBD_FAIL;
 800887a:	2303      	movs	r3, #3
 800887c:	75fb      	strb	r3, [r7, #23]
          break;
 800887e:	e016      	b.n	80088ae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b03      	cmp	r3, #3
 800888a:	d00f      	beq.n	80088ac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f001 fc9b 	bl	800a1ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008894:	2303      	movs	r3, #3
 8008896:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008898:	e008      	b.n	80088ac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 fc94 	bl	800a1ca <USBD_CtlError>
          ret = USBD_FAIL;
 80088a2:	2303      	movs	r3, #3
 80088a4:	75fb      	strb	r3, [r7, #23]
          break;
 80088a6:	e002      	b.n	80088ae <USBD_CDC_Setup+0x19e>
          break;
 80088a8:	bf00      	nop
 80088aa:	e008      	b.n	80088be <USBD_CDC_Setup+0x1ae>
          break;
 80088ac:	bf00      	nop
      }
      break;
 80088ae:	e006      	b.n	80088be <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80088b0:	6839      	ldr	r1, [r7, #0]
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 fc89 	bl	800a1ca <USBD_CtlError>
      ret = USBD_FAIL;
 80088b8:	2303      	movs	r3, #3
 80088ba:	75fb      	strb	r3, [r7, #23]
      break;
 80088bc:	bf00      	nop
  }

  return (uint8_t)ret;
 80088be:	7dfb      	ldrb	r3, [r7, #23]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	460b      	mov	r3, r1
 80088d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	32b0      	adds	r2, #176	; 0xb0
 80088e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e065      	b.n	80089be <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	32b0      	adds	r2, #176	; 0xb0
 80088fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008900:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	f003 020f 	and.w	r2, r3, #15
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	4613      	mov	r3, r2
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	4413      	add	r3, r2
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	440b      	add	r3, r1
 8008914:	3318      	adds	r3, #24
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d02f      	beq.n	800897c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	f003 020f 	and.w	r2, r3, #15
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	3318      	adds	r3, #24
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	f003 010f 	and.w	r1, r3, #15
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	460b      	mov	r3, r1
 800893c:	00db      	lsls	r3, r3, #3
 800893e:	440b      	add	r3, r1
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	4403      	add	r3, r0
 8008944:	3348      	adds	r3, #72	; 0x48
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	fbb2 f1f3 	udiv	r1, r2, r3
 800894c:	fb01 f303 	mul.w	r3, r1, r3
 8008950:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008952:	2b00      	cmp	r3, #0
 8008954:	d112      	bne.n	800897c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	f003 020f 	and.w	r2, r3, #15
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	4613      	mov	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	440b      	add	r3, r1
 8008968:	3318      	adds	r3, #24
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800896e:	78f9      	ldrb	r1, [r7, #3]
 8008970:	2300      	movs	r3, #0
 8008972:	2200      	movs	r2, #0
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f002 f99c 	bl	800acb2 <USBD_LL_Transmit>
 800897a:	e01f      	b.n	80089bc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	33b0      	adds	r3, #176	; 0xb0
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	4413      	add	r3, r2
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d010      	beq.n	80089bc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	33b0      	adds	r3, #176	; 0xb0
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80089b8:	78fa      	ldrb	r2, [r7, #3]
 80089ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b084      	sub	sp, #16
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	460b      	mov	r3, r1
 80089d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	32b0      	adds	r2, #176	; 0xb0
 80089dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	32b0      	adds	r2, #176	; 0xb0
 80089ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e01a      	b.n	8008a2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f002 f99a 	bl	800ad36 <USBD_LL_GetRxDataSize>
 8008a02:	4602      	mov	r2, r0
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	33b0      	adds	r3, #176	; 0xb0
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a28:	4611      	mov	r1, r2
 8008a2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	32b0      	adds	r2, #176	; 0xb0
 8008a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e025      	b.n	8008aa4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	33b0      	adds	r3, #176	; 0xb0
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d01a      	beq.n	8008aa2 <USBD_CDC_EP0_RxReady+0x6c>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a72:	2bff      	cmp	r3, #255	; 0xff
 8008a74:	d015      	beq.n	8008aa2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	33b0      	adds	r3, #176	; 0xb0
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008a8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008a96:	b292      	uxth	r2, r2
 8008a98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	22ff      	movs	r2, #255	; 0xff
 8008a9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ab4:	2182      	movs	r1, #130	; 0x82
 8008ab6:	4818      	ldr	r0, [pc, #96]	; (8008b18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ab8:	f000 fd4f 	bl	800955a <USBD_GetEpDesc>
 8008abc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008abe:	2101      	movs	r1, #1
 8008ac0:	4815      	ldr	r0, [pc, #84]	; (8008b18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ac2:	f000 fd4a 	bl	800955a <USBD_GetEpDesc>
 8008ac6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ac8:	2181      	movs	r1, #129	; 0x81
 8008aca:	4813      	ldr	r0, [pc, #76]	; (8008b18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008acc:	f000 fd45 	bl	800955a <USBD_GetEpDesc>
 8008ad0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2210      	movs	r2, #16
 8008adc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d006      	beq.n	8008af2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aec:	711a      	strb	r2, [r3, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d006      	beq.n	8008b06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b00:	711a      	strb	r2, [r3, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2243      	movs	r2, #67	; 0x43
 8008b0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b0c:	4b02      	ldr	r3, [pc, #8]	; (8008b18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000058 	.word	0x20000058

08008b1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b24:	2182      	movs	r1, #130	; 0x82
 8008b26:	4818      	ldr	r0, [pc, #96]	; (8008b88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b28:	f000 fd17 	bl	800955a <USBD_GetEpDesc>
 8008b2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b2e:	2101      	movs	r1, #1
 8008b30:	4815      	ldr	r0, [pc, #84]	; (8008b88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b32:	f000 fd12 	bl	800955a <USBD_GetEpDesc>
 8008b36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b38:	2181      	movs	r1, #129	; 0x81
 8008b3a:	4813      	ldr	r0, [pc, #76]	; (8008b88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b3c:	f000 fd0d 	bl	800955a <USBD_GetEpDesc>
 8008b40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	2210      	movs	r2, #16
 8008b4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d006      	beq.n	8008b62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2200      	movs	r2, #0
 8008b58:	711a      	strb	r2, [r3, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f042 0202 	orr.w	r2, r2, #2
 8008b60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d006      	beq.n	8008b76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	711a      	strb	r2, [r3, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f042 0202 	orr.w	r2, r2, #2
 8008b74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2243      	movs	r2, #67	; 0x43
 8008b7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b7c:	4b02      	ldr	r3, [pc, #8]	; (8008b88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20000058 	.word	0x20000058

08008b8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b94:	2182      	movs	r1, #130	; 0x82
 8008b96:	4818      	ldr	r0, [pc, #96]	; (8008bf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008b98:	f000 fcdf 	bl	800955a <USBD_GetEpDesc>
 8008b9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	4815      	ldr	r0, [pc, #84]	; (8008bf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ba2:	f000 fcda 	bl	800955a <USBD_GetEpDesc>
 8008ba6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ba8:	2181      	movs	r1, #129	; 0x81
 8008baa:	4813      	ldr	r0, [pc, #76]	; (8008bf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008bac:	f000 fcd5 	bl	800955a <USBD_GetEpDesc>
 8008bb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2210      	movs	r2, #16
 8008bbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d006      	beq.n	8008bd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bcc:	711a      	strb	r2, [r3, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d006      	beq.n	8008be6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008be0:	711a      	strb	r2, [r3, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2243      	movs	r2, #67	; 0x43
 8008bea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008bec:	4b02      	ldr	r3, [pc, #8]	; (8008bf8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000058 	.word	0x20000058

08008bfc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	220a      	movs	r2, #10
 8008c08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c0a:	4b03      	ldr	r3, [pc, #12]	; (8008c18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	20000014 	.word	0x20000014

08008c1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e009      	b.n	8008c44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	33b0      	adds	r3, #176	; 0xb0
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	32b0      	adds	r2, #176	; 0xb0
 8008c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e008      	b.n	8008c88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	371c      	adds	r7, #28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	32b0      	adds	r2, #176	; 0xb0
 8008ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d101      	bne.n	8008cb8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e004      	b.n	8008cc2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
	...

08008cd0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	32b0      	adds	r2, #176	; 0xb0
 8008ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	32b0      	adds	r2, #176	; 0xb0
 8008cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e025      	b.n	8008d4e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d11f      	bne.n	8008d4c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008d14:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <USBD_CDC_TransmitPacket+0x88>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	f003 020f 	and.w	r2, r3, #15
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4403      	add	r3, r0
 8008d2e:	3318      	adds	r3, #24
 8008d30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <USBD_CDC_TransmitPacket+0x88>)
 8008d34:	7819      	ldrb	r1, [r3, #0]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 ffb5 	bl	800acb2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	2000009b 	.word	0x2000009b

08008d5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	32b0      	adds	r2, #176	; 0xb0
 8008d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	32b0      	adds	r2, #176	; 0xb0
 8008d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e018      	b.n	8008dbc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	7c1b      	ldrb	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10a      	bne.n	8008da8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008d92:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <USBD_CDC_ReceivePacket+0x68>)
 8008d94:	7819      	ldrb	r1, [r3, #0]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 ffa7 	bl	800acf4 <USBD_LL_PrepareReceive>
 8008da6:	e008      	b.n	8008dba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008da8:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <USBD_CDC_ReceivePacket+0x68>)
 8008daa:	7819      	ldrb	r1, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008db2:	2340      	movs	r3, #64	; 0x40
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 ff9d 	bl	800acf4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	2000009c 	.word	0x2000009c

08008dc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e01f      	b.n	8008e20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d003      	beq.n	8008e06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	79fa      	ldrb	r2, [r7, #7]
 8008e12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e14:	68f8      	ldr	r0, [r7, #12]
 8008e16:	f001 fe11 	bl	800aa3c <USBD_LL_Init>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3718      	adds	r7, #24
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e025      	b.n	8008e8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	32ae      	adds	r2, #174	; 0xae
 8008e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00f      	beq.n	8008e7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	32ae      	adds	r2, #174	; 0xae
 8008e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6c:	f107 020e 	add.w	r2, r7, #14
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
 8008e74:	4602      	mov	r2, r0
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 fe1f 	bl	800aae0 <USBD_LL_Start>
 8008ea2:	4603      	mov	r3, r0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008eb4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d009      	beq.n	8008ef0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	4798      	blx	r3
 8008eec:	4603      	mov	r3, r0
 8008eee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	460b      	mov	r3, r1
 8008f04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	78fa      	ldrb	r2, [r7, #3]
 8008f14:	4611      	mov	r1, r2
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	4798      	blx	r3
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 f908 	bl	800a156 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008f54:	461a      	mov	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008f62:	f003 031f 	and.w	r3, r3, #31
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d01a      	beq.n	8008fa0 <USBD_LL_SetupStage+0x72>
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d822      	bhi.n	8008fb4 <USBD_LL_SetupStage+0x86>
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d002      	beq.n	8008f78 <USBD_LL_SetupStage+0x4a>
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d00a      	beq.n	8008f8c <USBD_LL_SetupStage+0x5e>
 8008f76:	e01d      	b.n	8008fb4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fb5f 	bl	8009644 <USBD_StdDevReq>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]
      break;
 8008f8a:	e020      	b.n	8008fce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f92:	4619      	mov	r1, r3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fbc7 	bl	8009728 <USBD_StdItfReq>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f9e:	e016      	b.n	8008fce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 fc29 	bl	8009800 <USBD_StdEPReq>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fb2:	e00c      	b.n	8008fce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f001 fdec 	bl	800aba0 <USBD_LL_StallEP>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
      break;
 8008fcc:	bf00      	nop
  }

  return ret;
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	607a      	str	r2, [r7, #4]
 8008fe4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008fea:	7afb      	ldrb	r3, [r7, #11]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d16e      	bne.n	80090ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008ff6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ffe:	2b03      	cmp	r3, #3
 8009000:	f040 8098 	bne.w	8009134 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	429a      	cmp	r2, r3
 800900e:	d913      	bls.n	8009038 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	689a      	ldr	r2, [r3, #8]
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	1ad2      	subs	r2, r2, r3
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	4293      	cmp	r3, r2
 8009028:	bf28      	it	cs
 800902a:	4613      	movcs	r3, r2
 800902c:	461a      	mov	r2, r3
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f001 f984 	bl	800a33e <USBD_CtlContinueRx>
 8009036:	e07d      	b.n	8009134 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800903e:	f003 031f 	and.w	r3, r3, #31
 8009042:	2b02      	cmp	r3, #2
 8009044:	d014      	beq.n	8009070 <USBD_LL_DataOutStage+0x98>
 8009046:	2b02      	cmp	r3, #2
 8009048:	d81d      	bhi.n	8009086 <USBD_LL_DataOutStage+0xae>
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <USBD_LL_DataOutStage+0x7c>
 800904e:	2b01      	cmp	r3, #1
 8009050:	d003      	beq.n	800905a <USBD_LL_DataOutStage+0x82>
 8009052:	e018      	b.n	8009086 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	75bb      	strb	r3, [r7, #22]
            break;
 8009058:	e018      	b.n	800908c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009060:	b2db      	uxtb	r3, r3
 8009062:	4619      	mov	r1, r3
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 fa5e 	bl	8009526 <USBD_CoreFindIF>
 800906a:	4603      	mov	r3, r0
 800906c:	75bb      	strb	r3, [r7, #22]
            break;
 800906e:	e00d      	b.n	800908c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009076:	b2db      	uxtb	r3, r3
 8009078:	4619      	mov	r1, r3
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 fa60 	bl	8009540 <USBD_CoreFindEP>
 8009080:	4603      	mov	r3, r0
 8009082:	75bb      	strb	r3, [r7, #22]
            break;
 8009084:	e002      	b.n	800908c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009086:	2300      	movs	r3, #0
 8009088:	75bb      	strb	r3, [r7, #22]
            break;
 800908a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800908c:	7dbb      	ldrb	r3, [r7, #22]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d119      	bne.n	80090c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b03      	cmp	r3, #3
 800909c:	d113      	bne.n	80090c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800909e:	7dba      	ldrb	r2, [r7, #22]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	32ae      	adds	r2, #174	; 0xae
 80090a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80090ae:	7dba      	ldrb	r2, [r7, #22]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80090b6:	7dba      	ldrb	r2, [r7, #22]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	32ae      	adds	r2, #174	; 0xae
 80090bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f001 f94a 	bl	800a360 <USBD_CtlSendStatus>
 80090cc:	e032      	b.n	8009134 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	4619      	mov	r1, r3
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f000 fa31 	bl	8009540 <USBD_CoreFindEP>
 80090de:	4603      	mov	r3, r0
 80090e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090e2:	7dbb      	ldrb	r3, [r7, #22]
 80090e4:	2bff      	cmp	r3, #255	; 0xff
 80090e6:	d025      	beq.n	8009134 <USBD_LL_DataOutStage+0x15c>
 80090e8:	7dbb      	ldrb	r3, [r7, #22]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d122      	bne.n	8009134 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d117      	bne.n	800912a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80090fa:	7dba      	ldrb	r2, [r7, #22]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	32ae      	adds	r2, #174	; 0xae
 8009100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00f      	beq.n	800912a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800910a:	7dba      	ldrb	r2, [r7, #22]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009112:	7dba      	ldrb	r2, [r7, #22]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	32ae      	adds	r2, #174	; 0xae
 8009118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	7afa      	ldrb	r2, [r7, #11]
 8009120:	4611      	mov	r1, r2
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	4798      	blx	r3
 8009126:	4603      	mov	r3, r0
 8009128:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800912a:	7dfb      	ldrb	r3, [r7, #23]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009130:	7dfb      	ldrb	r3, [r7, #23]
 8009132:	e000      	b.n	8009136 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b086      	sub	sp, #24
 8009142:	af00      	add	r7, sp, #0
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	460b      	mov	r3, r1
 8009148:	607a      	str	r2, [r7, #4]
 800914a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d16f      	bne.n	8009232 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	3314      	adds	r3, #20
 8009156:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800915e:	2b02      	cmp	r3, #2
 8009160:	d15a      	bne.n	8009218 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	429a      	cmp	r2, r3
 800916c:	d914      	bls.n	8009198 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	1ad2      	subs	r2, r2, r3
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	461a      	mov	r2, r3
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f001 f8ac 	bl	800a2e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800918a:	2300      	movs	r3, #0
 800918c:	2200      	movs	r2, #0
 800918e:	2100      	movs	r1, #0
 8009190:	68f8      	ldr	r0, [r7, #12]
 8009192:	f001 fdaf 	bl	800acf4 <USBD_LL_PrepareReceive>
 8009196:	e03f      	b.n	8009218 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	68da      	ldr	r2, [r3, #12]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d11c      	bne.n	80091de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	685a      	ldr	r2, [r3, #4]
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d316      	bcc.n	80091de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	685a      	ldr	r2, [r3, #4]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d20f      	bcs.n	80091de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091be:	2200      	movs	r2, #0
 80091c0:	2100      	movs	r1, #0
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f001 f88d 	bl	800a2e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091d0:	2300      	movs	r3, #0
 80091d2:	2200      	movs	r2, #0
 80091d4:	2100      	movs	r1, #0
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f001 fd8c 	bl	800acf4 <USBD_LL_PrepareReceive>
 80091dc:	e01c      	b.n	8009218 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d10f      	bne.n	800920a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d009      	beq.n	800920a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800920a:	2180      	movs	r1, #128	; 0x80
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f001 fcc7 	bl	800aba0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f001 f8b7 	bl	800a386 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d03a      	beq.n	8009298 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7ff fe42 	bl	8008eac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009230:	e032      	b.n	8009298 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009232:	7afb      	ldrb	r3, [r7, #11]
 8009234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009238:	b2db      	uxtb	r3, r3
 800923a:	4619      	mov	r1, r3
 800923c:	68f8      	ldr	r0, [r7, #12]
 800923e:	f000 f97f 	bl	8009540 <USBD_CoreFindEP>
 8009242:	4603      	mov	r3, r0
 8009244:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	2bff      	cmp	r3, #255	; 0xff
 800924a:	d025      	beq.n	8009298 <USBD_LL_DataInStage+0x15a>
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d122      	bne.n	8009298 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b03      	cmp	r3, #3
 800925c:	d11c      	bne.n	8009298 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800925e:	7dfa      	ldrb	r2, [r7, #23]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	32ae      	adds	r2, #174	; 0xae
 8009264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d014      	beq.n	8009298 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800926e:	7dfa      	ldrb	r2, [r7, #23]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009276:	7dfa      	ldrb	r2, [r7, #23]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	32ae      	adds	r2, #174	; 0xae
 800927c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	7afa      	ldrb	r2, [r7, #11]
 8009284:	4611      	mov	r1, r2
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	4798      	blx	r3
 800928a:	4603      	mov	r3, r0
 800928c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800928e:	7dbb      	ldrb	r3, [r7, #22]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009294:	7dbb      	ldrb	r3, [r7, #22]
 8009296:	e000      	b.n	800929a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3718      	adds	r7, #24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b084      	sub	sp, #16
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d014      	beq.n	8009308 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00e      	beq.n	8009308 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	6852      	ldr	r2, [r2, #4]
 80092f6:	b2d2      	uxtb	r2, r2
 80092f8:	4611      	mov	r1, r2
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	4798      	blx	r3
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009304:	2303      	movs	r3, #3
 8009306:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009308:	2340      	movs	r3, #64	; 0x40
 800930a:	2200      	movs	r2, #0
 800930c:	2100      	movs	r1, #0
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 fc01 	bl	800ab16 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2240      	movs	r2, #64	; 0x40
 8009320:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009324:	2340      	movs	r3, #64	; 0x40
 8009326:	2200      	movs	r2, #0
 8009328:	2180      	movs	r1, #128	; 0x80
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f001 fbf3 	bl	800ab16 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2240      	movs	r2, #64	; 0x40
 800933a:	621a      	str	r2, [r3, #32]

  return ret;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
}
 800933e:	4618      	mov	r0, r3
 8009340:	3710      	adds	r7, #16
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	370c      	adds	r7, #12
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009374:	b2da      	uxtb	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2204      	movs	r2, #4
 8009380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	d106      	bne.n	80093b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b082      	sub	sp, #8
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d110      	bne.n	80093f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00b      	beq.n	80093f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	460b      	mov	r3, r1
 800940c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	32ae      	adds	r2, #174	; 0xae
 8009418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009420:	2303      	movs	r3, #3
 8009422:	e01c      	b.n	800945e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b03      	cmp	r3, #3
 800942e:	d115      	bne.n	800945c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	32ae      	adds	r2, #174	; 0xae
 800943a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00b      	beq.n	800945c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	32ae      	adds	r2, #174	; 0xae
 800944e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	4611      	mov	r1, r2
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b082      	sub	sp, #8
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	32ae      	adds	r2, #174	; 0xae
 800947c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009484:	2303      	movs	r3, #3
 8009486:	e01c      	b.n	80094c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800948e:	b2db      	uxtb	r3, r3
 8009490:	2b03      	cmp	r3, #3
 8009492:	d115      	bne.n	80094c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	32ae      	adds	r2, #174	; 0xae
 800949e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00b      	beq.n	80094c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	32ae      	adds	r2, #174	; 0xae
 80094b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	4611      	mov	r1, r2
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b083      	sub	sp, #12
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00e      	beq.n	800951c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6852      	ldr	r2, [r2, #4]
 800950a:	b2d2      	uxtb	r2, r2
 800950c:	4611      	mov	r1, r2
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	4798      	blx	r3
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009518:	2303      	movs	r3, #3
 800951a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800951c:	7bfb      	ldrb	r3, [r7, #15]
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009532:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800954c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800954e:	4618      	mov	r0, r3
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b086      	sub	sp, #24
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800956e:	2300      	movs	r3, #0
 8009570:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	885b      	ldrh	r3, [r3, #2]
 8009576:	b29a      	uxth	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	429a      	cmp	r2, r3
 8009580:	d920      	bls.n	80095c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	b29b      	uxth	r3, r3
 8009588:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800958a:	e013      	b.n	80095b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800958c:	f107 030a 	add.w	r3, r7, #10
 8009590:	4619      	mov	r1, r3
 8009592:	6978      	ldr	r0, [r7, #20]
 8009594:	f000 f81b 	bl	80095ce <USBD_GetNextDesc>
 8009598:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	785b      	ldrb	r3, [r3, #1]
 800959e:	2b05      	cmp	r3, #5
 80095a0:	d108      	bne.n	80095b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	789b      	ldrb	r3, [r3, #2]
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d008      	beq.n	80095c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	885b      	ldrh	r3, [r3, #2]
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	897b      	ldrh	r3, [r7, #10]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d8e5      	bhi.n	800958c <USBD_GetEpDesc+0x32>
 80095c0:	e000      	b.n	80095c4 <USBD_GetEpDesc+0x6a>
          break;
 80095c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80095c4:	693b      	ldr	r3, [r7, #16]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3718      	adds	r7, #24
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b085      	sub	sp, #20
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	881a      	ldrh	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	4413      	add	r3, r2
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	461a      	mov	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4413      	add	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80095fa:	68fb      	ldr	r3, [r7, #12]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009608:	b480      	push	{r7}
 800960a:	b087      	sub	sp, #28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	3301      	adds	r3, #1
 800961e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009626:	8a3b      	ldrh	r3, [r7, #16]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	b21a      	sxth	r2, r3
 800962c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009630:	4313      	orrs	r3, r2
 8009632:	b21b      	sxth	r3, r3
 8009634:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009636:	89fb      	ldrh	r3, [r7, #14]
}
 8009638:	4618      	mov	r0, r3
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800965a:	2b40      	cmp	r3, #64	; 0x40
 800965c:	d005      	beq.n	800966a <USBD_StdDevReq+0x26>
 800965e:	2b40      	cmp	r3, #64	; 0x40
 8009660:	d857      	bhi.n	8009712 <USBD_StdDevReq+0xce>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00f      	beq.n	8009686 <USBD_StdDevReq+0x42>
 8009666:	2b20      	cmp	r3, #32
 8009668:	d153      	bne.n	8009712 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	32ae      	adds	r2, #174	; 0xae
 8009674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	4798      	blx	r3
 8009680:	4603      	mov	r3, r0
 8009682:	73fb      	strb	r3, [r7, #15]
      break;
 8009684:	e04a      	b.n	800971c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	785b      	ldrb	r3, [r3, #1]
 800968a:	2b09      	cmp	r3, #9
 800968c:	d83b      	bhi.n	8009706 <USBD_StdDevReq+0xc2>
 800968e:	a201      	add	r2, pc, #4	; (adr r2, 8009694 <USBD_StdDevReq+0x50>)
 8009690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009694:	080096e9 	.word	0x080096e9
 8009698:	080096fd 	.word	0x080096fd
 800969c:	08009707 	.word	0x08009707
 80096a0:	080096f3 	.word	0x080096f3
 80096a4:	08009707 	.word	0x08009707
 80096a8:	080096c7 	.word	0x080096c7
 80096ac:	080096bd 	.word	0x080096bd
 80096b0:	08009707 	.word	0x08009707
 80096b4:	080096df 	.word	0x080096df
 80096b8:	080096d1 	.word	0x080096d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa3c 	bl	8009b3c <USBD_GetDescriptor>
          break;
 80096c4:	e024      	b.n	8009710 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fba1 	bl	8009e10 <USBD_SetAddress>
          break;
 80096ce:	e01f      	b.n	8009710 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80096d0:	6839      	ldr	r1, [r7, #0]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fbe0 	bl	8009e98 <USBD_SetConfig>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
          break;
 80096dc:	e018      	b.n	8009710 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fc83 	bl	8009fec <USBD_GetConfig>
          break;
 80096e6:	e013      	b.n	8009710 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fcb4 	bl	800a058 <USBD_GetStatus>
          break;
 80096f0:	e00e      	b.n	8009710 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80096f2:	6839      	ldr	r1, [r7, #0]
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fce3 	bl	800a0c0 <USBD_SetFeature>
          break;
 80096fa:	e009      	b.n	8009710 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fd07 	bl	800a112 <USBD_ClrFeature>
          break;
 8009704:	e004      	b.n	8009710 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fd5e 	bl	800a1ca <USBD_CtlError>
          break;
 800970e:	bf00      	nop
      }
      break;
 8009710:	e004      	b.n	800971c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fd58 	bl	800a1ca <USBD_CtlError>
      break;
 800971a:	bf00      	nop
  }

  return ret;
 800971c:	7bfb      	ldrb	r3, [r7, #15]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop

08009728 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800973e:	2b40      	cmp	r3, #64	; 0x40
 8009740:	d005      	beq.n	800974e <USBD_StdItfReq+0x26>
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d852      	bhi.n	80097ec <USBD_StdItfReq+0xc4>
 8009746:	2b00      	cmp	r3, #0
 8009748:	d001      	beq.n	800974e <USBD_StdItfReq+0x26>
 800974a:	2b20      	cmp	r3, #32
 800974c:	d14e      	bne.n	80097ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009754:	b2db      	uxtb	r3, r3
 8009756:	3b01      	subs	r3, #1
 8009758:	2b02      	cmp	r3, #2
 800975a:	d840      	bhi.n	80097de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	889b      	ldrh	r3, [r3, #4]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b01      	cmp	r3, #1
 8009764:	d836      	bhi.n	80097d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	889b      	ldrh	r3, [r3, #4]
 800976a:	b2db      	uxtb	r3, r3
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fed9 	bl	8009526 <USBD_CoreFindIF>
 8009774:	4603      	mov	r3, r0
 8009776:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	2bff      	cmp	r3, #255	; 0xff
 800977c:	d01d      	beq.n	80097ba <USBD_StdItfReq+0x92>
 800977e:	7bbb      	ldrb	r3, [r7, #14]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d11a      	bne.n	80097ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009784:	7bba      	ldrb	r2, [r7, #14]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	32ae      	adds	r2, #174	; 0xae
 800978a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00f      	beq.n	80097b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009794:	7bba      	ldrb	r2, [r7, #14]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800979c:	7bba      	ldrb	r2, [r7, #14]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	32ae      	adds	r2, #174	; 0xae
 80097a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	6839      	ldr	r1, [r7, #0]
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
 80097ae:	4603      	mov	r3, r0
 80097b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097b2:	e004      	b.n	80097be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80097b4:	2303      	movs	r3, #3
 80097b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097b8:	e001      	b.n	80097be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80097ba:	2303      	movs	r3, #3
 80097bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	88db      	ldrh	r3, [r3, #6]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d110      	bne.n	80097e8 <USBD_StdItfReq+0xc0>
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10d      	bne.n	80097e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 fdc7 	bl	800a360 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097d2:	e009      	b.n	80097e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80097d4:	6839      	ldr	r1, [r7, #0]
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fcf7 	bl	800a1ca <USBD_CtlError>
          break;
 80097dc:	e004      	b.n	80097e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fcf2 	bl	800a1ca <USBD_CtlError>
          break;
 80097e6:	e000      	b.n	80097ea <USBD_StdItfReq+0xc2>
          break;
 80097e8:	bf00      	nop
      }
      break;
 80097ea:	e004      	b.n	80097f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fceb 	bl	800a1ca <USBD_CtlError>
      break;
 80097f4:	bf00      	nop
  }

  return ret;
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800980a:	2300      	movs	r3, #0
 800980c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	889b      	ldrh	r3, [r3, #4]
 8009812:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800981c:	2b40      	cmp	r3, #64	; 0x40
 800981e:	d007      	beq.n	8009830 <USBD_StdEPReq+0x30>
 8009820:	2b40      	cmp	r3, #64	; 0x40
 8009822:	f200 817f 	bhi.w	8009b24 <USBD_StdEPReq+0x324>
 8009826:	2b00      	cmp	r3, #0
 8009828:	d02a      	beq.n	8009880 <USBD_StdEPReq+0x80>
 800982a:	2b20      	cmp	r3, #32
 800982c:	f040 817a 	bne.w	8009b24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009830:	7bbb      	ldrb	r3, [r7, #14]
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff fe83 	bl	8009540 <USBD_CoreFindEP>
 800983a:	4603      	mov	r3, r0
 800983c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800983e:	7b7b      	ldrb	r3, [r7, #13]
 8009840:	2bff      	cmp	r3, #255	; 0xff
 8009842:	f000 8174 	beq.w	8009b2e <USBD_StdEPReq+0x32e>
 8009846:	7b7b      	ldrb	r3, [r7, #13]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f040 8170 	bne.w	8009b2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800984e:	7b7a      	ldrb	r2, [r7, #13]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009856:	7b7a      	ldrb	r2, [r7, #13]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	32ae      	adds	r2, #174	; 0xae
 800985c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 8163 	beq.w	8009b2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009868:	7b7a      	ldrb	r2, [r7, #13]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	32ae      	adds	r2, #174	; 0xae
 800986e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	4798      	blx	r3
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800987e:	e156      	b.n	8009b2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	785b      	ldrb	r3, [r3, #1]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d008      	beq.n	800989a <USBD_StdEPReq+0x9a>
 8009888:	2b03      	cmp	r3, #3
 800988a:	f300 8145 	bgt.w	8009b18 <USBD_StdEPReq+0x318>
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 809b 	beq.w	80099ca <USBD_StdEPReq+0x1ca>
 8009894:	2b01      	cmp	r3, #1
 8009896:	d03c      	beq.n	8009912 <USBD_StdEPReq+0x112>
 8009898:	e13e      	b.n	8009b18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d002      	beq.n	80098ac <USBD_StdEPReq+0xac>
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d016      	beq.n	80098d8 <USBD_StdEPReq+0xd8>
 80098aa:	e02c      	b.n	8009906 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00d      	beq.n	80098ce <USBD_StdEPReq+0xce>
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	2b80      	cmp	r3, #128	; 0x80
 80098b6:	d00a      	beq.n	80098ce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098b8:	7bbb      	ldrb	r3, [r7, #14]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 f96f 	bl	800aba0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098c2:	2180      	movs	r1, #128	; 0x80
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f001 f96b 	bl	800aba0 <USBD_LL_StallEP>
 80098ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098cc:	e020      	b.n	8009910 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80098ce:	6839      	ldr	r1, [r7, #0]
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fc7a 	bl	800a1ca <USBD_CtlError>
              break;
 80098d6:	e01b      	b.n	8009910 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	885b      	ldrh	r3, [r3, #2]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10e      	bne.n	80098fe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80098e0:	7bbb      	ldrb	r3, [r7, #14]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00b      	beq.n	80098fe <USBD_StdEPReq+0xfe>
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
 80098e8:	2b80      	cmp	r3, #128	; 0x80
 80098ea:	d008      	beq.n	80098fe <USBD_StdEPReq+0xfe>
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	88db      	ldrh	r3, [r3, #6]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d104      	bne.n	80098fe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 f951 	bl	800aba0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fd2e 	bl	800a360 <USBD_CtlSendStatus>

              break;
 8009904:	e004      	b.n	8009910 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fc5e 	bl	800a1ca <USBD_CtlError>
              break;
 800990e:	bf00      	nop
          }
          break;
 8009910:	e107      	b.n	8009b22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b02      	cmp	r3, #2
 800991c:	d002      	beq.n	8009924 <USBD_StdEPReq+0x124>
 800991e:	2b03      	cmp	r3, #3
 8009920:	d016      	beq.n	8009950 <USBD_StdEPReq+0x150>
 8009922:	e04b      	b.n	80099bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009924:	7bbb      	ldrb	r3, [r7, #14]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00d      	beq.n	8009946 <USBD_StdEPReq+0x146>
 800992a:	7bbb      	ldrb	r3, [r7, #14]
 800992c:	2b80      	cmp	r3, #128	; 0x80
 800992e:	d00a      	beq.n	8009946 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009930:	7bbb      	ldrb	r3, [r7, #14]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f001 f933 	bl	800aba0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800993a:	2180      	movs	r1, #128	; 0x80
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 f92f 	bl	800aba0 <USBD_LL_StallEP>
 8009942:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009944:	e040      	b.n	80099c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 fc3e 	bl	800a1ca <USBD_CtlError>
              break;
 800994e:	e03b      	b.n	80099c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	885b      	ldrh	r3, [r3, #2]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d136      	bne.n	80099c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800995e:	2b00      	cmp	r3, #0
 8009960:	d004      	beq.n	800996c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	4619      	mov	r1, r3
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f001 f939 	bl	800abde <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fcf7 	bl	800a360 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009972:	7bbb      	ldrb	r3, [r7, #14]
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7ff fde2 	bl	8009540 <USBD_CoreFindEP>
 800997c:	4603      	mov	r3, r0
 800997e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009980:	7b7b      	ldrb	r3, [r7, #13]
 8009982:	2bff      	cmp	r3, #255	; 0xff
 8009984:	d01f      	beq.n	80099c6 <USBD_StdEPReq+0x1c6>
 8009986:	7b7b      	ldrb	r3, [r7, #13]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d11c      	bne.n	80099c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800998c:	7b7a      	ldrb	r2, [r7, #13]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009994:	7b7a      	ldrb	r2, [r7, #13]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	32ae      	adds	r2, #174	; 0xae
 800999a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d010      	beq.n	80099c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099a4:	7b7a      	ldrb	r2, [r7, #13]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	32ae      	adds	r2, #174	; 0xae
 80099aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	4798      	blx	r3
 80099b6:	4603      	mov	r3, r0
 80099b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80099ba:	e004      	b.n	80099c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fc03 	bl	800a1ca <USBD_CtlError>
              break;
 80099c4:	e000      	b.n	80099c8 <USBD_StdEPReq+0x1c8>
              break;
 80099c6:	bf00      	nop
          }
          break;
 80099c8:	e0ab      	b.n	8009b22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d002      	beq.n	80099dc <USBD_StdEPReq+0x1dc>
 80099d6:	2b03      	cmp	r3, #3
 80099d8:	d032      	beq.n	8009a40 <USBD_StdEPReq+0x240>
 80099da:	e097      	b.n	8009b0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d007      	beq.n	80099f2 <USBD_StdEPReq+0x1f2>
 80099e2:	7bbb      	ldrb	r3, [r7, #14]
 80099e4:	2b80      	cmp	r3, #128	; 0x80
 80099e6:	d004      	beq.n	80099f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fbed 	bl	800a1ca <USBD_CtlError>
                break;
 80099f0:	e091      	b.n	8009b16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80099f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	da0b      	bge.n	8009a12 <USBD_StdEPReq+0x212>
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	3310      	adds	r3, #16
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	3304      	adds	r3, #4
 8009a10:	e00b      	b.n	8009a2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a18:	4613      	mov	r3, r2
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	4413      	add	r3, r2
 8009a28:	3304      	adds	r3, #4
 8009a2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2202      	movs	r2, #2
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fc37 	bl	800a2ac <USBD_CtlSendData>
              break;
 8009a3e:	e06a      	b.n	8009b16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	da11      	bge.n	8009a6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a48:	7bbb      	ldrb	r3, [r7, #14]
 8009a4a:	f003 020f 	and.w	r2, r3, #15
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	440b      	add	r3, r1
 8009a5a:	3324      	adds	r3, #36	; 0x24
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d117      	bne.n	8009a92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 fbb0 	bl	800a1ca <USBD_CtlError>
                  break;
 8009a6a:	e054      	b.n	8009b16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	f003 020f 	and.w	r2, r3, #15
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	440b      	add	r3, r1
 8009a7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d104      	bne.n	8009a92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fb9d 	bl	800a1ca <USBD_CtlError>
                  break;
 8009a90:	e041      	b.n	8009b16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da0b      	bge.n	8009ab2 <USBD_StdEPReq+0x2b2>
 8009a9a:	7bbb      	ldrb	r3, [r7, #14]
 8009a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	4413      	add	r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	3310      	adds	r3, #16
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	3304      	adds	r3, #4
 8009ab0:	e00b      	b.n	8009aca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
 8009ab4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ab8:	4613      	mov	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4413      	add	r3, r2
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3304      	adds	r3, #4
 8009aca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009acc:	7bbb      	ldrb	r3, [r7, #14]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d002      	beq.n	8009ad8 <USBD_StdEPReq+0x2d8>
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
 8009ad4:	2b80      	cmp	r3, #128	; 0x80
 8009ad6:	d103      	bne.n	8009ae0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	e00e      	b.n	8009afe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f001 f899 	bl	800ac1c <USBD_LL_IsStallEP>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d003      	beq.n	8009af8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2201      	movs	r2, #1
 8009af4:	601a      	str	r2, [r3, #0]
 8009af6:	e002      	b.n	8009afe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2202      	movs	r2, #2
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 fbd1 	bl	800a2ac <USBD_CtlSendData>
              break;
 8009b0a:	e004      	b.n	8009b16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fb5b 	bl	800a1ca <USBD_CtlError>
              break;
 8009b14:	bf00      	nop
          }
          break;
 8009b16:	e004      	b.n	8009b22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fb55 	bl	800a1ca <USBD_CtlError>
          break;
 8009b20:	bf00      	nop
      }
      break;
 8009b22:	e005      	b.n	8009b30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 fb4f 	bl	800a1ca <USBD_CtlError>
      break;
 8009b2c:	e000      	b.n	8009b30 <USBD_StdEPReq+0x330>
      break;
 8009b2e:	bf00      	nop
  }

  return ret;
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b46:	2300      	movs	r3, #0
 8009b48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	885b      	ldrh	r3, [r3, #2]
 8009b56:	0a1b      	lsrs	r3, r3, #8
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	2b06      	cmp	r3, #6
 8009b5e:	f200 8128 	bhi.w	8009db2 <USBD_GetDescriptor+0x276>
 8009b62:	a201      	add	r2, pc, #4	; (adr r2, 8009b68 <USBD_GetDescriptor+0x2c>)
 8009b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b68:	08009b85 	.word	0x08009b85
 8009b6c:	08009b9d 	.word	0x08009b9d
 8009b70:	08009bdd 	.word	0x08009bdd
 8009b74:	08009db3 	.word	0x08009db3
 8009b78:	08009db3 	.word	0x08009db3
 8009b7c:	08009d53 	.word	0x08009d53
 8009b80:	08009d7f 	.word	0x08009d7f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	7c12      	ldrb	r2, [r2, #16]
 8009b90:	f107 0108 	add.w	r1, r7, #8
 8009b94:	4610      	mov	r0, r2
 8009b96:	4798      	blx	r3
 8009b98:	60f8      	str	r0, [r7, #12]
      break;
 8009b9a:	e112      	b.n	8009dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	7c1b      	ldrb	r3, [r3, #16]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10d      	bne.n	8009bc0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bac:	f107 0208 	add.w	r2, r7, #8
 8009bb0:	4610      	mov	r0, r2
 8009bb2:	4798      	blx	r3
 8009bb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	2202      	movs	r2, #2
 8009bbc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bbe:	e100      	b.n	8009dc2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	f107 0208 	add.w	r2, r7, #8
 8009bcc:	4610      	mov	r0, r2
 8009bce:	4798      	blx	r3
 8009bd0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	701a      	strb	r2, [r3, #0]
      break;
 8009bda:	e0f2      	b.n	8009dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	885b      	ldrh	r3, [r3, #2]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b05      	cmp	r3, #5
 8009be4:	f200 80ac 	bhi.w	8009d40 <USBD_GetDescriptor+0x204>
 8009be8:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <USBD_GetDescriptor+0xb4>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c09 	.word	0x08009c09
 8009bf4:	08009c3d 	.word	0x08009c3d
 8009bf8:	08009c71 	.word	0x08009c71
 8009bfc:	08009ca5 	.word	0x08009ca5
 8009c00:	08009cd9 	.word	0x08009cd9
 8009c04:	08009d0d 	.word	0x08009d0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	7c12      	ldrb	r2, [r2, #16]
 8009c20:	f107 0108 	add.w	r1, r7, #8
 8009c24:	4610      	mov	r0, r2
 8009c26:	4798      	blx	r3
 8009c28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c2a:	e091      	b.n	8009d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c2c:	6839      	ldr	r1, [r7, #0]
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 facb 	bl	800a1ca <USBD_CtlError>
            err++;
 8009c34:	7afb      	ldrb	r3, [r7, #11]
 8009c36:	3301      	adds	r3, #1
 8009c38:	72fb      	strb	r3, [r7, #11]
          break;
 8009c3a:	e089      	b.n	8009d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00b      	beq.n	8009c60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	7c12      	ldrb	r2, [r2, #16]
 8009c54:	f107 0108 	add.w	r1, r7, #8
 8009c58:	4610      	mov	r0, r2
 8009c5a:	4798      	blx	r3
 8009c5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c5e:	e077      	b.n	8009d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fab1 	bl	800a1ca <USBD_CtlError>
            err++;
 8009c68:	7afb      	ldrb	r3, [r7, #11]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009c6e:	e06f      	b.n	8009d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00b      	beq.n	8009c94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	7c12      	ldrb	r2, [r2, #16]
 8009c88:	f107 0108 	add.w	r1, r7, #8
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	4798      	blx	r3
 8009c90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c92:	e05d      	b.n	8009d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fa97 	bl	800a1ca <USBD_CtlError>
            err++;
 8009c9c:	7afb      	ldrb	r3, [r7, #11]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ca2:	e055      	b.n	8009d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00b      	beq.n	8009cc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	7c12      	ldrb	r2, [r2, #16]
 8009cbc:	f107 0108 	add.w	r1, r7, #8
 8009cc0:	4610      	mov	r0, r2
 8009cc2:	4798      	blx	r3
 8009cc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cc6:	e043      	b.n	8009d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fa7d 	bl	800a1ca <USBD_CtlError>
            err++;
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cd6:	e03b      	b.n	8009d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00b      	beq.n	8009cfc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cea:	695b      	ldr	r3, [r3, #20]
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	7c12      	ldrb	r2, [r2, #16]
 8009cf0:	f107 0108 	add.w	r1, r7, #8
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	4798      	blx	r3
 8009cf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cfa:	e029      	b.n	8009d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cfc:	6839      	ldr	r1, [r7, #0]
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fa63 	bl	800a1ca <USBD_CtlError>
            err++;
 8009d04:	7afb      	ldrb	r3, [r7, #11]
 8009d06:	3301      	adds	r3, #1
 8009d08:	72fb      	strb	r3, [r7, #11]
          break;
 8009d0a:	e021      	b.n	8009d50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d00b      	beq.n	8009d30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	7c12      	ldrb	r2, [r2, #16]
 8009d24:	f107 0108 	add.w	r1, r7, #8
 8009d28:	4610      	mov	r0, r2
 8009d2a:	4798      	blx	r3
 8009d2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d2e:	e00f      	b.n	8009d50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fa49 	bl	800a1ca <USBD_CtlError>
            err++;
 8009d38:	7afb      	ldrb	r3, [r7, #11]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d3e:	e007      	b.n	8009d50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fa41 	bl	800a1ca <USBD_CtlError>
          err++;
 8009d48:	7afb      	ldrb	r3, [r7, #11]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009d4e:	bf00      	nop
      }
      break;
 8009d50:	e037      	b.n	8009dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	7c1b      	ldrb	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d109      	bne.n	8009d6e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d62:	f107 0208 	add.w	r2, r7, #8
 8009d66:	4610      	mov	r0, r2
 8009d68:	4798      	blx	r3
 8009d6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d6c:	e029      	b.n	8009dc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fa2a 	bl	800a1ca <USBD_CtlError>
        err++;
 8009d76:	7afb      	ldrb	r3, [r7, #11]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009d7c:	e021      	b.n	8009dc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	7c1b      	ldrb	r3, [r3, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10d      	bne.n	8009da2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	f107 0208 	add.w	r2, r7, #8
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
 8009d96:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	2207      	movs	r2, #7
 8009d9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009da0:	e00f      	b.n	8009dc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fa10 	bl	800a1ca <USBD_CtlError>
        err++;
 8009daa:	7afb      	ldrb	r3, [r7, #11]
 8009dac:	3301      	adds	r3, #1
 8009dae:	72fb      	strb	r3, [r7, #11]
      break;
 8009db0:	e007      	b.n	8009dc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fa08 	bl	800a1ca <USBD_CtlError>
      err++;
 8009dba:	7afb      	ldrb	r3, [r7, #11]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8009dc0:	bf00      	nop
  }

  if (err != 0U)
 8009dc2:	7afb      	ldrb	r3, [r7, #11]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d11e      	bne.n	8009e06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	88db      	ldrh	r3, [r3, #6]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d016      	beq.n	8009dfe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009dd0:	893b      	ldrh	r3, [r7, #8]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00e      	beq.n	8009df4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	88da      	ldrh	r2, [r3, #6]
 8009dda:	893b      	ldrh	r3, [r7, #8]
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	bf28      	it	cs
 8009de0:	4613      	movcs	r3, r2
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009de6:	893b      	ldrh	r3, [r7, #8]
 8009de8:	461a      	mov	r2, r3
 8009dea:	68f9      	ldr	r1, [r7, #12]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fa5d 	bl	800a2ac <USBD_CtlSendData>
 8009df2:	e009      	b.n	8009e08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f9e7 	bl	800a1ca <USBD_CtlError>
 8009dfc:	e004      	b.n	8009e08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 faae 	bl	800a360 <USBD_CtlSendStatus>
 8009e04:	e000      	b.n	8009e08 <USBD_GetDescriptor+0x2cc>
    return;
 8009e06:	bf00      	nop
  }
}
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop

08009e10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	889b      	ldrh	r3, [r3, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d131      	bne.n	8009e86 <USBD_SetAddress+0x76>
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	88db      	ldrh	r3, [r3, #6]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d12d      	bne.n	8009e86 <USBD_SetAddress+0x76>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	885b      	ldrh	r3, [r3, #2]
 8009e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e30:	d829      	bhi.n	8009e86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	885b      	ldrh	r3, [r3, #2]
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d104      	bne.n	8009e54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e4a:	6839      	ldr	r1, [r7, #0]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f9bc 	bl	800a1ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e52:	e01d      	b.n	8009e90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	7bfa      	ldrb	r2, [r7, #15]
 8009e58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 ff07 	bl	800ac74 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fa7a 	bl	800a360 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2202      	movs	r2, #2
 8009e76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7a:	e009      	b.n	8009e90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e84:	e004      	b.n	8009e90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009e86:	6839      	ldr	r1, [r7, #0]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f99e 	bl	800a1ca <USBD_CtlError>
  }
}
 8009e8e:	bf00      	nop
 8009e90:	bf00      	nop
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	885b      	ldrh	r3, [r3, #2]
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	4b4e      	ldr	r3, [pc, #312]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009eae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009eb0:	4b4d      	ldr	r3, [pc, #308]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d905      	bls.n	8009ec4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 f985 	bl	800a1ca <USBD_CtlError>
    return USBD_FAIL;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e08c      	b.n	8009fde <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d002      	beq.n	8009ed6 <USBD_SetConfig+0x3e>
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d029      	beq.n	8009f28 <USBD_SetConfig+0x90>
 8009ed4:	e075      	b.n	8009fc2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009ed6:	4b44      	ldr	r3, [pc, #272]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d020      	beq.n	8009f20 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009ede:	4b42      	ldr	r3, [pc, #264]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ee8:	4b3f      	ldr	r3, [pc, #252]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	4619      	mov	r1, r3
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7fe ffe7 	bl	8008ec2 <USBD_SetClassConfig>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d008      	beq.n	8009f10 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009efe:	6839      	ldr	r1, [r7, #0]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f962 	bl	800a1ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2202      	movs	r2, #2
 8009f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f0e:	e065      	b.n	8009fdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 fa25 	bl	800a360 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2203      	movs	r2, #3
 8009f1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f1e:	e05d      	b.n	8009fdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fa1d 	bl	800a360 <USBD_CtlSendStatus>
      break;
 8009f26:	e059      	b.n	8009fdc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f28:	4b2f      	ldr	r3, [pc, #188]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d112      	bne.n	8009f56 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f38:	4b2b      	ldr	r3, [pc, #172]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f42:	4b29      	ldr	r3, [pc, #164]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7fe ffd6 	bl	8008efa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa06 	bl	800a360 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f54:	e042      	b.n	8009fdc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009f56:	4b24      	ldr	r3, [pc, #144]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d02a      	beq.n	8009fba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f7fe ffc4 	bl	8008efa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f72:	4b1d      	ldr	r3, [pc, #116]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	461a      	mov	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f7c:	4b1a      	ldr	r3, [pc, #104]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	4619      	mov	r1, r3
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f7fe ff9d 	bl	8008ec2 <USBD_SetClassConfig>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009f8c:	7bfb      	ldrb	r3, [r7, #15]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00f      	beq.n	8009fb2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009f92:	6839      	ldr	r1, [r7, #0]
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f918 	bl	800a1ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7fe ffa9 	bl	8008efa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2202      	movs	r2, #2
 8009fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009fb0:	e014      	b.n	8009fdc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f9d4 	bl	800a360 <USBD_CtlSendStatus>
      break;
 8009fb8:	e010      	b.n	8009fdc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f9d0 	bl	800a360 <USBD_CtlSendStatus>
      break;
 8009fc0:	e00c      	b.n	8009fdc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 f900 	bl	800a1ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009fca:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <USBD_SetConfig+0x150>)
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7fe ff92 	bl	8008efa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8009fda:	bf00      	nop
  }

  return ret;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000360 	.word	0x20000360

08009fec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	88db      	ldrh	r3, [r3, #6]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d004      	beq.n	800a008 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f8e2 	bl	800a1ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a006:	e023      	b.n	800a050 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b02      	cmp	r3, #2
 800a012:	dc02      	bgt.n	800a01a <USBD_GetConfig+0x2e>
 800a014:	2b00      	cmp	r3, #0
 800a016:	dc03      	bgt.n	800a020 <USBD_GetConfig+0x34>
 800a018:	e015      	b.n	800a046 <USBD_GetConfig+0x5a>
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d00b      	beq.n	800a036 <USBD_GetConfig+0x4a>
 800a01e:	e012      	b.n	800a046 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3308      	adds	r3, #8
 800a02a:	2201      	movs	r2, #1
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f93c 	bl	800a2ac <USBD_CtlSendData>
        break;
 800a034:	e00c      	b.n	800a050 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3304      	adds	r3, #4
 800a03a:	2201      	movs	r2, #1
 800a03c:	4619      	mov	r1, r3
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f934 	bl	800a2ac <USBD_CtlSendData>
        break;
 800a044:	e004      	b.n	800a050 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f8be 	bl	800a1ca <USBD_CtlError>
        break;
 800a04e:	bf00      	nop
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d81e      	bhi.n	800a0ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	88db      	ldrh	r3, [r3, #6]
 800a074:	2b02      	cmp	r3, #2
 800a076:	d004      	beq.n	800a082 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f8a5 	bl	800a1ca <USBD_CtlError>
        break;
 800a080:	e01a      	b.n	800a0b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d005      	beq.n	800a09e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f043 0202 	orr.w	r2, r3, #2
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f900 	bl	800a2ac <USBD_CtlSendData>
      break;
 800a0ac:	e004      	b.n	800a0b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f88a 	bl	800a1ca <USBD_CtlError>
      break;
 800a0b6:	bf00      	nop
  }
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	885b      	ldrh	r3, [r3, #2]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d107      	bne.n	800a0e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f940 	bl	800a360 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a0e0:	e013      	b.n	800a10a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	885b      	ldrh	r3, [r3, #2]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d10b      	bne.n	800a102 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	889b      	ldrh	r3, [r3, #4]
 800a0ee:	0a1b      	lsrs	r3, r3, #8
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f930 	bl	800a360 <USBD_CtlSendStatus>
}
 800a100:	e003      	b.n	800a10a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f860 	bl	800a1ca <USBD_CtlError>
}
 800a10a:	bf00      	nop
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a122:	b2db      	uxtb	r3, r3
 800a124:	3b01      	subs	r3, #1
 800a126:	2b02      	cmp	r3, #2
 800a128:	d80b      	bhi.n	800a142 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	885b      	ldrh	r3, [r3, #2]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d10c      	bne.n	800a14c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f910 	bl	800a360 <USBD_CtlSendStatus>
      }
      break;
 800a140:	e004      	b.n	800a14c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f840 	bl	800a1ca <USBD_CtlError>
      break;
 800a14a:	e000      	b.n	800a14e <USBD_ClrFeature+0x3c>
      break;
 800a14c:	bf00      	nop
  }
}
 800a14e:	bf00      	nop
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b084      	sub	sp, #16
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	781a      	ldrb	r2, [r3, #0]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3301      	adds	r3, #1
 800a170:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	781a      	ldrb	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff fa41 	bl	8009608 <SWAPBYTE>
 800a186:	4603      	mov	r3, r0
 800a188:	461a      	mov	r2, r3
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3301      	adds	r3, #1
 800a192:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3301      	adds	r3, #1
 800a198:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f7ff fa34 	bl	8009608 <SWAPBYTE>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff fa27 	bl	8009608 <SWAPBYTE>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	461a      	mov	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	80da      	strh	r2, [r3, #6]
}
 800a1c2:	bf00      	nop
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1d4:	2180      	movs	r1, #128	; 0x80
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fce2 	bl	800aba0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a1dc:	2100      	movs	r1, #0
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 fcde 	bl	800aba0 <USBD_LL_StallEP>
}
 800a1e4:	bf00      	nop
 800a1e6:	3708      	adds	r7, #8
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d036      	beq.n	800a270 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a206:	6938      	ldr	r0, [r7, #16]
 800a208:	f000 f836 	bl	800a278 <USBD_GetLen>
 800a20c:	4603      	mov	r3, r0
 800a20e:	3301      	adds	r3, #1
 800a210:	b29b      	uxth	r3, r3
 800a212:	005b      	lsls	r3, r3, #1
 800a214:	b29a      	uxth	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a21a:	7dfb      	ldrb	r3, [r7, #23]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	4413      	add	r3, r2
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	7812      	ldrb	r2, [r2, #0]
 800a224:	701a      	strb	r2, [r3, #0]
  idx++;
 800a226:	7dfb      	ldrb	r3, [r7, #23]
 800a228:	3301      	adds	r3, #1
 800a22a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a22c:	7dfb      	ldrb	r3, [r7, #23]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	4413      	add	r3, r2
 800a232:	2203      	movs	r2, #3
 800a234:	701a      	strb	r2, [r3, #0]
  idx++;
 800a236:	7dfb      	ldrb	r3, [r7, #23]
 800a238:	3301      	adds	r3, #1
 800a23a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a23c:	e013      	b.n	800a266 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	4413      	add	r3, r2
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	7812      	ldrb	r2, [r2, #0]
 800a248:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3301      	adds	r3, #1
 800a24e:	613b      	str	r3, [r7, #16]
    idx++;
 800a250:	7dfb      	ldrb	r3, [r7, #23]
 800a252:	3301      	adds	r3, #1
 800a254:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	68ba      	ldr	r2, [r7, #8]
 800a25a:	4413      	add	r3, r2
 800a25c:	2200      	movs	r2, #0
 800a25e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a260:	7dfb      	ldrb	r3, [r7, #23]
 800a262:	3301      	adds	r3, #1
 800a264:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1e7      	bne.n	800a23e <USBD_GetString+0x52>
 800a26e:	e000      	b.n	800a272 <USBD_GetString+0x86>
    return;
 800a270:	bf00      	nop
  }
}
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a288:	e005      	b.n	800a296 <USBD_GetLen+0x1e>
  {
    len++;
 800a28a:	7bfb      	ldrb	r3, [r7, #15]
 800a28c:	3301      	adds	r3, #1
 800a28e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	3301      	adds	r3, #1
 800a294:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1f5      	bne.n	800a28a <USBD_GetLen+0x12>
  }

  return len;
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2202      	movs	r2, #2
 800a2bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68ba      	ldr	r2, [r7, #8]
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	68f8      	ldr	r0, [r7, #12]
 800a2d4:	f000 fced 	bl	800acb2 <USBD_LL_Transmit>

  return USBD_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 fcdc 	bl	800acb2 <USBD_LL_Transmit>

  return USBD_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2203      	movs	r2, #3
 800a314:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	2100      	movs	r1, #0
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 fce0 	bl	800acf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	2100      	movs	r1, #0
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 fccf 	bl	800acf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2204      	movs	r2, #4
 800a36c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a370:	2300      	movs	r3, #0
 800a372:	2200      	movs	r2, #0
 800a374:	2100      	movs	r1, #0
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fc9b 	bl	800acb2 <USBD_LL_Transmit>

  return USBD_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2205      	movs	r2, #5
 800a392:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a396:	2300      	movs	r3, #0
 800a398:	2200      	movs	r2, #0
 800a39a:	2100      	movs	r1, #0
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fca9 	bl	800acf4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	4912      	ldr	r1, [pc, #72]	; (800a3fc <MX_USB_DEVICE_Init+0x50>)
 800a3b4:	4812      	ldr	r0, [pc, #72]	; (800a400 <MX_USB_DEVICE_Init+0x54>)
 800a3b6:	f7fe fd07 	bl	8008dc8 <USBD_Init>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d001      	beq.n	800a3c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3c0:	f7f7 f8a4 	bl	800150c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a3c4:	490f      	ldr	r1, [pc, #60]	; (800a404 <MX_USB_DEVICE_Init+0x58>)
 800a3c6:	480e      	ldr	r0, [pc, #56]	; (800a400 <MX_USB_DEVICE_Init+0x54>)
 800a3c8:	f7fe fd2e 	bl	8008e28 <USBD_RegisterClass>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3d2:	f7f7 f89b 	bl	800150c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a3d6:	490c      	ldr	r1, [pc, #48]	; (800a408 <MX_USB_DEVICE_Init+0x5c>)
 800a3d8:	4809      	ldr	r0, [pc, #36]	; (800a400 <MX_USB_DEVICE_Init+0x54>)
 800a3da:	f7fe fc1f 	bl	8008c1c <USBD_CDC_RegisterInterface>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3e4:	f7f7 f892 	bl	800150c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a3e8:	4805      	ldr	r0, [pc, #20]	; (800a400 <MX_USB_DEVICE_Init+0x54>)
 800a3ea:	f7fe fd53 	bl	8008e94 <USBD_Start>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3f4:	f7f7 f88a 	bl	800150c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3f8:	bf00      	nop
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	200000b4 	.word	0x200000b4
 800a400:	20000364 	.word	0x20000364
 800a404:	20000020 	.word	0x20000020
 800a408:	200000a0 	.word	0x200000a0

0800a40c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a410:	2200      	movs	r2, #0
 800a412:	4905      	ldr	r1, [pc, #20]	; (800a428 <CDC_Init_HS+0x1c>)
 800a414:	4805      	ldr	r0, [pc, #20]	; (800a42c <CDC_Init_HS+0x20>)
 800a416:	f7fe fc1b 	bl	8008c50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a41a:	4905      	ldr	r1, [pc, #20]	; (800a430 <CDC_Init_HS+0x24>)
 800a41c:	4803      	ldr	r0, [pc, #12]	; (800a42c <CDC_Init_HS+0x20>)
 800a41e:	f7fe fc39 	bl	8008c94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a422:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a424:	4618      	mov	r0, r3
 800a426:	bd80      	pop	{r7, pc}
 800a428:	20000e40 	.word	0x20000e40
 800a42c:	20000364 	.word	0x20000364
 800a430:	20000640 	.word	0x20000640

0800a434 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a434:	b480      	push	{r7}
 800a436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a438:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a444:	b480      	push	{r7}
 800a446:	b083      	sub	sp, #12
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	6039      	str	r1, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
 800a450:	4613      	mov	r3, r2
 800a452:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	2b23      	cmp	r3, #35	; 0x23
 800a458:	d84a      	bhi.n	800a4f0 <CDC_Control_HS+0xac>
 800a45a:	a201      	add	r2, pc, #4	; (adr r2, 800a460 <CDC_Control_HS+0x1c>)
 800a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a460:	0800a4f1 	.word	0x0800a4f1
 800a464:	0800a4f1 	.word	0x0800a4f1
 800a468:	0800a4f1 	.word	0x0800a4f1
 800a46c:	0800a4f1 	.word	0x0800a4f1
 800a470:	0800a4f1 	.word	0x0800a4f1
 800a474:	0800a4f1 	.word	0x0800a4f1
 800a478:	0800a4f1 	.word	0x0800a4f1
 800a47c:	0800a4f1 	.word	0x0800a4f1
 800a480:	0800a4f1 	.word	0x0800a4f1
 800a484:	0800a4f1 	.word	0x0800a4f1
 800a488:	0800a4f1 	.word	0x0800a4f1
 800a48c:	0800a4f1 	.word	0x0800a4f1
 800a490:	0800a4f1 	.word	0x0800a4f1
 800a494:	0800a4f1 	.word	0x0800a4f1
 800a498:	0800a4f1 	.word	0x0800a4f1
 800a49c:	0800a4f1 	.word	0x0800a4f1
 800a4a0:	0800a4f1 	.word	0x0800a4f1
 800a4a4:	0800a4f1 	.word	0x0800a4f1
 800a4a8:	0800a4f1 	.word	0x0800a4f1
 800a4ac:	0800a4f1 	.word	0x0800a4f1
 800a4b0:	0800a4f1 	.word	0x0800a4f1
 800a4b4:	0800a4f1 	.word	0x0800a4f1
 800a4b8:	0800a4f1 	.word	0x0800a4f1
 800a4bc:	0800a4f1 	.word	0x0800a4f1
 800a4c0:	0800a4f1 	.word	0x0800a4f1
 800a4c4:	0800a4f1 	.word	0x0800a4f1
 800a4c8:	0800a4f1 	.word	0x0800a4f1
 800a4cc:	0800a4f1 	.word	0x0800a4f1
 800a4d0:	0800a4f1 	.word	0x0800a4f1
 800a4d4:	0800a4f1 	.word	0x0800a4f1
 800a4d8:	0800a4f1 	.word	0x0800a4f1
 800a4dc:	0800a4f1 	.word	0x0800a4f1
 800a4e0:	0800a4f1 	.word	0x0800a4f1
 800a4e4:	0800a4f1 	.word	0x0800a4f1
 800a4e8:	0800a4f1 	.word	0x0800a4f1
 800a4ec:	0800a4f1 	.word	0x0800a4f1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4f0:	bf00      	nop
  }

  return (USBD_OK);
 800a4f2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	4805      	ldr	r0, [pc, #20]	; (800a524 <CDC_Receive_HS+0x24>)
 800a50e:	f7fe fbc1 	bl	8008c94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a512:	4804      	ldr	r0, [pc, #16]	; (800a524 <CDC_Receive_HS+0x24>)
 800a514:	f7fe fc22 	bl	8008d5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a518:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	20000364 	.word	0x20000364

0800a528 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800a538:	4b0d      	ldr	r3, [pc, #52]	; (800a570 <CDC_Transmit_HS+0x48>)
 800a53a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a53e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e00b      	b.n	800a566 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800a54e:	887b      	ldrh	r3, [r7, #2]
 800a550:	461a      	mov	r2, r3
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	4806      	ldr	r0, [pc, #24]	; (800a570 <CDC_Transmit_HS+0x48>)
 800a556:	f7fe fb7b 	bl	8008c50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800a55a:	4805      	ldr	r0, [pc, #20]	; (800a570 <CDC_Transmit_HS+0x48>)
 800a55c:	f7fe fbb8 	bl	8008cd0 <USBD_CDC_TransmitPacket>
 800a560:	4603      	mov	r3, r0
 800a562:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	20000364 	.word	0x20000364

0800a574 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a574:	b480      	push	{r7}
 800a576:	b087      	sub	sp, #28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	4613      	mov	r3, r2
 800a580:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800a586:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr
	...

0800a598 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	6039      	str	r1, [r7, #0]
 800a5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	2212      	movs	r2, #18
 800a5a8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a5aa:	4b03      	ldr	r3, [pc, #12]	; (800a5b8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	200000d0 	.word	0x200000d0

0800a5bc <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	6039      	str	r1, [r7, #0]
 800a5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a5ce:	4b03      	ldr	r3, [pc, #12]	; (800a5dc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	200000e4 	.word	0x200000e4

0800a5e0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d105      	bne.n	800a5fe <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	4907      	ldr	r1, [pc, #28]	; (800a614 <USBD_HS_ProductStrDescriptor+0x34>)
 800a5f6:	4808      	ldr	r0, [pc, #32]	; (800a618 <USBD_HS_ProductStrDescriptor+0x38>)
 800a5f8:	f7ff fdf8 	bl	800a1ec <USBD_GetString>
 800a5fc:	e004      	b.n	800a608 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	4904      	ldr	r1, [pc, #16]	; (800a614 <USBD_HS_ProductStrDescriptor+0x34>)
 800a602:	4805      	ldr	r0, [pc, #20]	; (800a618 <USBD_HS_ProductStrDescriptor+0x38>)
 800a604:	f7ff fdf2 	bl	800a1ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a608:	4b02      	ldr	r3, [pc, #8]	; (800a614 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	20001640 	.word	0x20001640
 800a618:	0800b718 	.word	0x0800b718

0800a61c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	6039      	str	r1, [r7, #0]
 800a626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	4904      	ldr	r1, [pc, #16]	; (800a63c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a62c:	4804      	ldr	r0, [pc, #16]	; (800a640 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a62e:	f7ff fddd 	bl	800a1ec <USBD_GetString>
  return USBD_StrDesc;
 800a632:	4b02      	ldr	r3, [pc, #8]	; (800a63c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20001640 	.word	0x20001640
 800a640:	0800b730 	.word	0x0800b730

0800a644 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	4603      	mov	r3, r0
 800a64c:	6039      	str	r1, [r7, #0]
 800a64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	221a      	movs	r2, #26
 800a654:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a656:	f000 f843 	bl	800a6e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a65a:	4b02      	ldr	r3, [pc, #8]	; (800a664 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	200000e8 	.word	0x200000e8

0800a668 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	4603      	mov	r3, r0
 800a670:	6039      	str	r1, [r7, #0]
 800a672:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a674:	79fb      	ldrb	r3, [r7, #7]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d105      	bne.n	800a686 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a67a:	683a      	ldr	r2, [r7, #0]
 800a67c:	4907      	ldr	r1, [pc, #28]	; (800a69c <USBD_HS_ConfigStrDescriptor+0x34>)
 800a67e:	4808      	ldr	r0, [pc, #32]	; (800a6a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a680:	f7ff fdb4 	bl	800a1ec <USBD_GetString>
 800a684:	e004      	b.n	800a690 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	4904      	ldr	r1, [pc, #16]	; (800a69c <USBD_HS_ConfigStrDescriptor+0x34>)
 800a68a:	4805      	ldr	r0, [pc, #20]	; (800a6a0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a68c:	f7ff fdae 	bl	800a1ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a690:	4b02      	ldr	r3, [pc, #8]	; (800a69c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a692:	4618      	mov	r0, r3
 800a694:	3708      	adds	r7, #8
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20001640 	.word	0x20001640
 800a6a0:	0800b744 	.word	0x0800b744

0800a6a4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	6039      	str	r1, [r7, #0]
 800a6ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a6b0:	79fb      	ldrb	r3, [r7, #7]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d105      	bne.n	800a6c2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	4907      	ldr	r1, [pc, #28]	; (800a6d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a6ba:	4808      	ldr	r0, [pc, #32]	; (800a6dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a6bc:	f7ff fd96 	bl	800a1ec <USBD_GetString>
 800a6c0:	e004      	b.n	800a6cc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	4904      	ldr	r1, [pc, #16]	; (800a6d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a6c6:	4805      	ldr	r0, [pc, #20]	; (800a6dc <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a6c8:	f7ff fd90 	bl	800a1ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800a6cc:	4b02      	ldr	r3, [pc, #8]	; (800a6d8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3708      	adds	r7, #8
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	20001640 	.word	0x20001640
 800a6dc:	0800b750 	.word	0x0800b750

0800a6e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <Get_SerialNum+0x44>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6ec:	4b0e      	ldr	r3, [pc, #56]	; (800a728 <Get_SerialNum+0x48>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6f2:	4b0e      	ldr	r3, [pc, #56]	; (800a72c <Get_SerialNum+0x4c>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d009      	beq.n	800a71a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a706:	2208      	movs	r2, #8
 800a708:	4909      	ldr	r1, [pc, #36]	; (800a730 <Get_SerialNum+0x50>)
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 f814 	bl	800a738 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a710:	2204      	movs	r2, #4
 800a712:	4908      	ldr	r1, [pc, #32]	; (800a734 <Get_SerialNum+0x54>)
 800a714:	68b8      	ldr	r0, [r7, #8]
 800a716:	f000 f80f 	bl	800a738 <IntToUnicode>
  }
}
 800a71a:	bf00      	nop
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	1fff7a10 	.word	0x1fff7a10
 800a728:	1fff7a14 	.word	0x1fff7a14
 800a72c:	1fff7a18 	.word	0x1fff7a18
 800a730:	200000ea 	.word	0x200000ea
 800a734:	200000fa 	.word	0x200000fa

0800a738 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	4613      	mov	r3, r2
 800a744:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a74a:	2300      	movs	r3, #0
 800a74c:	75fb      	strb	r3, [r7, #23]
 800a74e:	e027      	b.n	800a7a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	0f1b      	lsrs	r3, r3, #28
 800a754:	2b09      	cmp	r3, #9
 800a756:	d80b      	bhi.n	800a770 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	0f1b      	lsrs	r3, r3, #28
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	7dfb      	ldrb	r3, [r7, #23]
 800a760:	005b      	lsls	r3, r3, #1
 800a762:	4619      	mov	r1, r3
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	440b      	add	r3, r1
 800a768:	3230      	adds	r2, #48	; 0x30
 800a76a:	b2d2      	uxtb	r2, r2
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	e00a      	b.n	800a786 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	0f1b      	lsrs	r3, r3, #28
 800a774:	b2da      	uxtb	r2, r3
 800a776:	7dfb      	ldrb	r3, [r7, #23]
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	4619      	mov	r1, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	440b      	add	r3, r1
 800a780:	3237      	adds	r2, #55	; 0x37
 800a782:	b2d2      	uxtb	r2, r2
 800a784:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	011b      	lsls	r3, r3, #4
 800a78a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a78c:	7dfb      	ldrb	r3, [r7, #23]
 800a78e:	005b      	lsls	r3, r3, #1
 800a790:	3301      	adds	r3, #1
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	4413      	add	r3, r2
 800a796:	2200      	movs	r2, #0
 800a798:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a79a:	7dfb      	ldrb	r3, [r7, #23]
 800a79c:	3301      	adds	r3, #1
 800a79e:	75fb      	strb	r3, [r7, #23]
 800a7a0:	7dfa      	ldrb	r2, [r7, #23]
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d3d3      	bcc.n	800a750 <IntToUnicode+0x18>
  }
}
 800a7a8:	bf00      	nop
 800a7aa:	bf00      	nop
 800a7ac:	371c      	adds	r7, #28
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b08a      	sub	sp, #40	; 0x28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7c0:	f107 0314 	add.w	r3, r7, #20
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	601a      	str	r2, [r3, #0]
 800a7c8:	605a      	str	r2, [r3, #4]
 800a7ca:	609a      	str	r2, [r3, #8]
 800a7cc:	60da      	str	r2, [r3, #12]
 800a7ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a1d      	ldr	r2, [pc, #116]	; (800a84c <HAL_PCD_MspInit+0x94>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d134      	bne.n	800a844 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7da:	2300      	movs	r3, #0
 800a7dc:	613b      	str	r3, [r7, #16]
 800a7de:	4b1c      	ldr	r3, [pc, #112]	; (800a850 <HAL_PCD_MspInit+0x98>)
 800a7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e2:	4a1b      	ldr	r2, [pc, #108]	; (800a850 <HAL_PCD_MspInit+0x98>)
 800a7e4:	f043 0302 	orr.w	r3, r3, #2
 800a7e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a7ea:	4b19      	ldr	r3, [pc, #100]	; (800a850 <HAL_PCD_MspInit+0x98>)
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ee:	f003 0302 	and.w	r3, r3, #2
 800a7f2:	613b      	str	r3, [r7, #16]
 800a7f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800a7f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a7fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a800:	2300      	movs	r3, #0
 800a802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a804:	2303      	movs	r3, #3
 800a806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800a808:	230c      	movs	r3, #12
 800a80a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a80c:	f107 0314 	add.w	r3, r7, #20
 800a810:	4619      	mov	r1, r3
 800a812:	4810      	ldr	r0, [pc, #64]	; (800a854 <HAL_PCD_MspInit+0x9c>)
 800a814:	f7f7 fe8a 	bl	800252c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a818:	2300      	movs	r3, #0
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	4b0c      	ldr	r3, [pc, #48]	; (800a850 <HAL_PCD_MspInit+0x98>)
 800a81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a820:	4a0b      	ldr	r2, [pc, #44]	; (800a850 <HAL_PCD_MspInit+0x98>)
 800a822:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a826:	6313      	str	r3, [r2, #48]	; 0x30
 800a828:	4b09      	ldr	r3, [pc, #36]	; (800a850 <HAL_PCD_MspInit+0x98>)
 800a82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a830:	60fb      	str	r3, [r7, #12]
 800a832:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800a834:	2200      	movs	r2, #0
 800a836:	2101      	movs	r1, #1
 800a838:	204d      	movs	r0, #77	; 0x4d
 800a83a:	f7f7 fac4 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a83e:	204d      	movs	r0, #77	; 0x4d
 800a840:	f7f7 fadd 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a844:	bf00      	nop
 800a846:	3728      	adds	r7, #40	; 0x28
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	40040000 	.word	0x40040000
 800a850:	40023800 	.word	0x40023800
 800a854:	40020400 	.word	0x40020400

0800a858 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a86c:	4619      	mov	r1, r3
 800a86e:	4610      	mov	r0, r2
 800a870:	f7fe fb5d 	bl	8008f2e <USBD_LL_SetupStage>
}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	460b      	mov	r3, r1
 800a886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a88e:	78fa      	ldrb	r2, [r7, #3]
 800a890:	6879      	ldr	r1, [r7, #4]
 800a892:	4613      	mov	r3, r2
 800a894:	00db      	lsls	r3, r3, #3
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	440b      	add	r3, r1
 800a89c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a8a0:	681a      	ldr	r2, [r3, #0]
 800a8a2:	78fb      	ldrb	r3, [r7, #3]
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	f7fe fb97 	bl	8008fd8 <USBD_LL_DataOutStage>
}
 800a8aa:	bf00      	nop
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a8c4:	78fa      	ldrb	r2, [r7, #3]
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	00db      	lsls	r3, r3, #3
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	440b      	add	r3, r1
 800a8d2:	334c      	adds	r3, #76	; 0x4c
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	78fb      	ldrb	r3, [r7, #3]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	f7fe fc30 	bl	800913e <USBD_LL_DataInStage>
}
 800a8de:	bf00      	nop
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fe fd64 	bl	80093c2 <USBD_LL_SOF>
}
 800a8fa:	bf00      	nop
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}

0800a902 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a902:	b580      	push	{r7, lr}
 800a904:	b084      	sub	sp, #16
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a90a:	2301      	movs	r3, #1
 800a90c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d102      	bne.n	800a91c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]
 800a91a:	e008      	b.n	800a92e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	2b02      	cmp	r3, #2
 800a922:	d102      	bne.n	800a92a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a924:	2301      	movs	r3, #1
 800a926:	73fb      	strb	r3, [r7, #15]
 800a928:	e001      	b.n	800a92e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a92a:	f7f6 fdef 	bl	800150c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a934:	7bfa      	ldrb	r2, [r7, #15]
 800a936:	4611      	mov	r1, r2
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe fd04 	bl	8009346 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe fcac 	bl	80092a2 <USBD_LL_Reset>
}
 800a94a:	bf00      	nop
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b082      	sub	sp, #8
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fcff 	bl	8009366 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	6812      	ldr	r2, [r2, #0]
 800a976:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a97a:	f043 0301 	orr.w	r3, r3, #1
 800a97e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d005      	beq.n	800a994 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a988:	4b04      	ldr	r3, [pc, #16]	; (800a99c <HAL_PCD_SuspendCallback+0x48>)
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	4a03      	ldr	r2, [pc, #12]	; (800a99c <HAL_PCD_SuspendCallback+0x48>)
 800a98e:	f043 0306 	orr.w	r3, r3, #6
 800a992:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a994:	bf00      	nop
 800a996:	3708      	adds	r7, #8
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	e000ed00 	.word	0xe000ed00

0800a9a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b082      	sub	sp, #8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7fe fcef 	bl	8009392 <USBD_LL_Resume>
}
 800a9b4:	bf00      	nop
 800a9b6:	3708      	adds	r7, #8
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9ce:	78fa      	ldrb	r2, [r7, #3]
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fe fd47 	bl	8009466 <USBD_LL_IsoOUTIncomplete>
}
 800a9d8:	bf00      	nop
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	460b      	mov	r3, r1
 800a9ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9f2:	78fa      	ldrb	r2, [r7, #3]
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe fd03 	bl	8009402 <USBD_LL_IsoINIncomplete>
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7fe fd59 	bl	80094ca <USBD_LL_DevConnected>
}
 800aa18:	bf00      	nop
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7fe fd56 	bl	80094e0 <USBD_LL_DevDisconnected>
}
 800aa34:	bf00      	nop
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d140      	bne.n	800aace <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800aa4c:	4a22      	ldr	r2, [pc, #136]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	4a20      	ldr	r2, [pc, #128]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa58:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800aa5c:	4b1e      	ldr	r3, [pc, #120]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa5e:	4a1f      	ldr	r2, [pc, #124]	; (800aadc <USBD_LL_Init+0xa0>)
 800aa60:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800aa62:	4b1d      	ldr	r3, [pc, #116]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa64:	2206      	movs	r2, #6
 800aa66:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800aa68:	4b1b      	ldr	r3, [pc, #108]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa6a:	2202      	movs	r2, #2
 800aa6c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800aa6e:	4b1a      	ldr	r3, [pc, #104]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800aa74:	4b18      	ldr	r3, [pc, #96]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa76:	2202      	movs	r2, #2
 800aa78:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800aa7a:	4b17      	ldr	r3, [pc, #92]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800aa80:	4b15      	ldr	r3, [pc, #84]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800aa86:	4b14      	ldr	r3, [pc, #80]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800aa8c:	4b12      	ldr	r3, [pc, #72]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800aa92:	4b11      	ldr	r3, [pc, #68]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa94:	2200      	movs	r2, #0
 800aa96:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800aa98:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800aa9e:	480e      	ldr	r0, [pc, #56]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aaa0:	f7f7 ff12 	bl	80028c8 <HAL_PCD_Init>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d001      	beq.n	800aaae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800aaaa:	f7f6 fd2f 	bl	800150c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800aaae:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aab2:	4809      	ldr	r0, [pc, #36]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aab4:	f7f9 f969 	bl	8003d8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800aab8:	2280      	movs	r2, #128	; 0x80
 800aaba:	2100      	movs	r1, #0
 800aabc:	4806      	ldr	r0, [pc, #24]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aabe:	f7f9 f91d 	bl	8003cfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800aac2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800aac6:	2101      	movs	r1, #1
 800aac8:	4803      	ldr	r0, [pc, #12]	; (800aad8 <USBD_LL_Init+0x9c>)
 800aaca:	f7f9 f917 	bl	8003cfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	20001840 	.word	0x20001840
 800aadc:	40040000 	.word	0x40040000

0800aae0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaec:	2300      	movs	r3, #0
 800aaee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7f8 f803 	bl	8002b02 <HAL_PCD_Start>
 800aafc:	4603      	mov	r3, r0
 800aafe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 f942 	bl	800ad8c <USBD_Get_USB_Status>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	4608      	mov	r0, r1
 800ab20:	4611      	mov	r1, r2
 800ab22:	461a      	mov	r2, r3
 800ab24:	4603      	mov	r3, r0
 800ab26:	70fb      	strb	r3, [r7, #3]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	70bb      	strb	r3, [r7, #2]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab34:	2300      	movs	r3, #0
 800ab36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab3e:	78bb      	ldrb	r3, [r7, #2]
 800ab40:	883a      	ldrh	r2, [r7, #0]
 800ab42:	78f9      	ldrb	r1, [r7, #3]
 800ab44:	f7f8 fcd4 	bl	80034f0 <HAL_PCD_EP_Open>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab4c:	7bfb      	ldrb	r3, [r7, #15]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 f91c 	bl	800ad8c <USBD_Get_USB_Status>
 800ab54:	4603      	mov	r3, r0
 800ab56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab7c:	78fa      	ldrb	r2, [r7, #3]
 800ab7e:	4611      	mov	r1, r2
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7f8 fd1d 	bl	80035c0 <HAL_PCD_EP_Close>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 f8fd 	bl	800ad8c <USBD_Get_USB_Status>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abba:	78fa      	ldrb	r2, [r7, #3]
 800abbc:	4611      	mov	r1, r2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7f8 fdf5 	bl	80037ae <HAL_PCD_EP_SetStall>
 800abc4:	4603      	mov	r3, r0
 800abc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc8:	7bfb      	ldrb	r3, [r7, #15]
 800abca:	4618      	mov	r0, r3
 800abcc:	f000 f8de 	bl	800ad8c <USBD_Get_USB_Status>
 800abd0:	4603      	mov	r3, r0
 800abd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	460b      	mov	r3, r1
 800abe8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abf8:	78fa      	ldrb	r2, [r7, #3]
 800abfa:	4611      	mov	r1, r2
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7f8 fe3a 	bl	8003876 <HAL_PCD_EP_ClrStall>
 800ac02:	4603      	mov	r3, r0
 800ac04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 f8bf 	bl	800ad8c <USBD_Get_USB_Status>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	460b      	mov	r3, r1
 800ac26:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac2e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	da0b      	bge.n	800ac50 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	4613      	mov	r3, r2
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	440b      	add	r3, r1
 800ac4a:	333e      	adds	r3, #62	; 0x3e
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	e00b      	b.n	800ac68 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac50:	78fb      	ldrb	r3, [r7, #3]
 800ac52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac56:	68f9      	ldr	r1, [r7, #12]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	440b      	add	r3, r1
 800ac62:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ac66:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3714      	adds	r7, #20
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac8e:	78fa      	ldrb	r2, [r7, #3]
 800ac90:	4611      	mov	r1, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7f8 fc07 	bl	80034a6 <HAL_PCD_SetAddress>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 f874 	bl	800ad8c <USBD_Get_USB_Status>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b086      	sub	sp, #24
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	60f8      	str	r0, [r7, #12]
 800acba:	607a      	str	r2, [r7, #4]
 800acbc:	603b      	str	r3, [r7, #0]
 800acbe:	460b      	mov	r3, r1
 800acc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800acd0:	7af9      	ldrb	r1, [r7, #11]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	f7f8 fd20 	bl	800371a <HAL_PCD_EP_Transmit>
 800acda:	4603      	mov	r3, r0
 800acdc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 f853 	bl	800ad8c <USBD_Get_USB_Status>
 800ace6:	4603      	mov	r3, r0
 800ace8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acea:	7dbb      	ldrb	r3, [r7, #22]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3718      	adds	r7, #24
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	607a      	str	r2, [r7, #4]
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	460b      	mov	r3, r1
 800ad02:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad12:	7af9      	ldrb	r1, [r7, #11]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	f7f8 fc9c 	bl	8003654 <HAL_PCD_EP_Receive>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad20:	7dfb      	ldrb	r3, [r7, #23]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 f832 	bl	800ad8c <USBD_Get_USB_Status>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad2c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3718      	adds	r7, #24
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}

0800ad36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad36:	b580      	push	{r7, lr}
 800ad38:	b082      	sub	sp, #8
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	6078      	str	r0, [r7, #4]
 800ad3e:	460b      	mov	r3, r1
 800ad40:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad48:	78fa      	ldrb	r2, [r7, #3]
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f8 fccc 	bl	80036ea <HAL_PCD_EP_GetRxCount>
 800ad52:	4603      	mov	r3, r0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ad64:	4b03      	ldr	r3, [pc, #12]	; (800ad74 <USBD_static_malloc+0x18>)
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	20001d4c 	.word	0x20001d4c

0800ad78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]

}
 800ad80:	bf00      	nop
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4603      	mov	r3, r0
 800ad94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	2b03      	cmp	r3, #3
 800ad9e:	d817      	bhi.n	800add0 <USBD_Get_USB_Status+0x44>
 800ada0:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <USBD_Get_USB_Status+0x1c>)
 800ada2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada6:	bf00      	nop
 800ada8:	0800adb9 	.word	0x0800adb9
 800adac:	0800adbf 	.word	0x0800adbf
 800adb0:	0800adc5 	.word	0x0800adc5
 800adb4:	0800adcb 	.word	0x0800adcb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
    break;
 800adbc:	e00b      	b.n	800add6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800adbe:	2303      	movs	r3, #3
 800adc0:	73fb      	strb	r3, [r7, #15]
    break;
 800adc2:	e008      	b.n	800add6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800adc4:	2301      	movs	r3, #1
 800adc6:	73fb      	strb	r3, [r7, #15]
    break;
 800adc8:	e005      	b.n	800add6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800adca:	2303      	movs	r3, #3
 800adcc:	73fb      	strb	r3, [r7, #15]
    break;
 800adce:	e002      	b.n	800add6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800add0:	2303      	movs	r3, #3
 800add2:	73fb      	strb	r3, [r7, #15]
    break;
 800add4:	bf00      	nop
  }
  return usb_status;
 800add6:	7bfb      	ldrb	r3, [r7, #15]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3714      	adds	r7, #20
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <__errno>:
 800ade4:	4b01      	ldr	r3, [pc, #4]	; (800adec <__errno+0x8>)
 800ade6:	6818      	ldr	r0, [r3, #0]
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	20000104 	.word	0x20000104

0800adf0 <__libc_init_array>:
 800adf0:	b570      	push	{r4, r5, r6, lr}
 800adf2:	4d0d      	ldr	r5, [pc, #52]	; (800ae28 <__libc_init_array+0x38>)
 800adf4:	4c0d      	ldr	r4, [pc, #52]	; (800ae2c <__libc_init_array+0x3c>)
 800adf6:	1b64      	subs	r4, r4, r5
 800adf8:	10a4      	asrs	r4, r4, #2
 800adfa:	2600      	movs	r6, #0
 800adfc:	42a6      	cmp	r6, r4
 800adfe:	d109      	bne.n	800ae14 <__libc_init_array+0x24>
 800ae00:	4d0b      	ldr	r5, [pc, #44]	; (800ae30 <__libc_init_array+0x40>)
 800ae02:	4c0c      	ldr	r4, [pc, #48]	; (800ae34 <__libc_init_array+0x44>)
 800ae04:	f000 fc66 	bl	800b6d4 <_init>
 800ae08:	1b64      	subs	r4, r4, r5
 800ae0a:	10a4      	asrs	r4, r4, #2
 800ae0c:	2600      	movs	r6, #0
 800ae0e:	42a6      	cmp	r6, r4
 800ae10:	d105      	bne.n	800ae1e <__libc_init_array+0x2e>
 800ae12:	bd70      	pop	{r4, r5, r6, pc}
 800ae14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae18:	4798      	blx	r3
 800ae1a:	3601      	adds	r6, #1
 800ae1c:	e7ee      	b.n	800adfc <__libc_init_array+0xc>
 800ae1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae22:	4798      	blx	r3
 800ae24:	3601      	adds	r6, #1
 800ae26:	e7f2      	b.n	800ae0e <__libc_init_array+0x1e>
 800ae28:	0800b7ec 	.word	0x0800b7ec
 800ae2c:	0800b7ec 	.word	0x0800b7ec
 800ae30:	0800b7ec 	.word	0x0800b7ec
 800ae34:	0800b7f0 	.word	0x0800b7f0

0800ae38 <memset>:
 800ae38:	4402      	add	r2, r0
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d100      	bne.n	800ae42 <memset+0xa>
 800ae40:	4770      	bx	lr
 800ae42:	f803 1b01 	strb.w	r1, [r3], #1
 800ae46:	e7f9      	b.n	800ae3c <memset+0x4>

0800ae48 <setvbuf>:
 800ae48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae4c:	461d      	mov	r5, r3
 800ae4e:	4b5d      	ldr	r3, [pc, #372]	; (800afc4 <setvbuf+0x17c>)
 800ae50:	681f      	ldr	r7, [r3, #0]
 800ae52:	4604      	mov	r4, r0
 800ae54:	460e      	mov	r6, r1
 800ae56:	4690      	mov	r8, r2
 800ae58:	b127      	cbz	r7, 800ae64 <setvbuf+0x1c>
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	b913      	cbnz	r3, 800ae64 <setvbuf+0x1c>
 800ae5e:	4638      	mov	r0, r7
 800ae60:	f000 f9d2 	bl	800b208 <__sinit>
 800ae64:	4b58      	ldr	r3, [pc, #352]	; (800afc8 <setvbuf+0x180>)
 800ae66:	429c      	cmp	r4, r3
 800ae68:	d167      	bne.n	800af3a <setvbuf+0xf2>
 800ae6a:	687c      	ldr	r4, [r7, #4]
 800ae6c:	f1b8 0f02 	cmp.w	r8, #2
 800ae70:	d006      	beq.n	800ae80 <setvbuf+0x38>
 800ae72:	f1b8 0f01 	cmp.w	r8, #1
 800ae76:	f200 809f 	bhi.w	800afb8 <setvbuf+0x170>
 800ae7a:	2d00      	cmp	r5, #0
 800ae7c:	f2c0 809c 	blt.w	800afb8 <setvbuf+0x170>
 800ae80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae82:	07db      	lsls	r3, r3, #31
 800ae84:	d405      	bmi.n	800ae92 <setvbuf+0x4a>
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	0598      	lsls	r0, r3, #22
 800ae8a:	d402      	bmi.n	800ae92 <setvbuf+0x4a>
 800ae8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae8e:	f000 fa59 	bl	800b344 <__retarget_lock_acquire_recursive>
 800ae92:	4621      	mov	r1, r4
 800ae94:	4638      	mov	r0, r7
 800ae96:	f000 f923 	bl	800b0e0 <_fflush_r>
 800ae9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae9c:	b141      	cbz	r1, 800aeb0 <setvbuf+0x68>
 800ae9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aea2:	4299      	cmp	r1, r3
 800aea4:	d002      	beq.n	800aeac <setvbuf+0x64>
 800aea6:	4638      	mov	r0, r7
 800aea8:	f000 fa7c 	bl	800b3a4 <_free_r>
 800aeac:	2300      	movs	r3, #0
 800aeae:	6363      	str	r3, [r4, #52]	; 0x34
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	61a3      	str	r3, [r4, #24]
 800aeb4:	6063      	str	r3, [r4, #4]
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	0619      	lsls	r1, r3, #24
 800aeba:	d503      	bpl.n	800aec4 <setvbuf+0x7c>
 800aebc:	6921      	ldr	r1, [r4, #16]
 800aebe:	4638      	mov	r0, r7
 800aec0:	f000 fa70 	bl	800b3a4 <_free_r>
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800aeca:	f023 0303 	bic.w	r3, r3, #3
 800aece:	f1b8 0f02 	cmp.w	r8, #2
 800aed2:	81a3      	strh	r3, [r4, #12]
 800aed4:	d06c      	beq.n	800afb0 <setvbuf+0x168>
 800aed6:	ab01      	add	r3, sp, #4
 800aed8:	466a      	mov	r2, sp
 800aeda:	4621      	mov	r1, r4
 800aedc:	4638      	mov	r0, r7
 800aede:	f000 fa33 	bl	800b348 <__swhatbuf_r>
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	4318      	orrs	r0, r3
 800aee6:	81a0      	strh	r0, [r4, #12]
 800aee8:	2d00      	cmp	r5, #0
 800aeea:	d130      	bne.n	800af4e <setvbuf+0x106>
 800aeec:	9d00      	ldr	r5, [sp, #0]
 800aeee:	4628      	mov	r0, r5
 800aef0:	f000 fa50 	bl	800b394 <malloc>
 800aef4:	4606      	mov	r6, r0
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d155      	bne.n	800afa6 <setvbuf+0x15e>
 800aefa:	f8dd 9000 	ldr.w	r9, [sp]
 800aefe:	45a9      	cmp	r9, r5
 800af00:	d14a      	bne.n	800af98 <setvbuf+0x150>
 800af02:	f04f 35ff 	mov.w	r5, #4294967295
 800af06:	2200      	movs	r2, #0
 800af08:	60a2      	str	r2, [r4, #8]
 800af0a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800af0e:	6022      	str	r2, [r4, #0]
 800af10:	6122      	str	r2, [r4, #16]
 800af12:	2201      	movs	r2, #1
 800af14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af18:	6162      	str	r2, [r4, #20]
 800af1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af1c:	f043 0302 	orr.w	r3, r3, #2
 800af20:	07d2      	lsls	r2, r2, #31
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	d405      	bmi.n	800af32 <setvbuf+0xea>
 800af26:	f413 7f00 	tst.w	r3, #512	; 0x200
 800af2a:	d102      	bne.n	800af32 <setvbuf+0xea>
 800af2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af2e:	f000 fa0a 	bl	800b346 <__retarget_lock_release_recursive>
 800af32:	4628      	mov	r0, r5
 800af34:	b003      	add	sp, #12
 800af36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af3a:	4b24      	ldr	r3, [pc, #144]	; (800afcc <setvbuf+0x184>)
 800af3c:	429c      	cmp	r4, r3
 800af3e:	d101      	bne.n	800af44 <setvbuf+0xfc>
 800af40:	68bc      	ldr	r4, [r7, #8]
 800af42:	e793      	b.n	800ae6c <setvbuf+0x24>
 800af44:	4b22      	ldr	r3, [pc, #136]	; (800afd0 <setvbuf+0x188>)
 800af46:	429c      	cmp	r4, r3
 800af48:	bf08      	it	eq
 800af4a:	68fc      	ldreq	r4, [r7, #12]
 800af4c:	e78e      	b.n	800ae6c <setvbuf+0x24>
 800af4e:	2e00      	cmp	r6, #0
 800af50:	d0cd      	beq.n	800aeee <setvbuf+0xa6>
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	b913      	cbnz	r3, 800af5c <setvbuf+0x114>
 800af56:	4638      	mov	r0, r7
 800af58:	f000 f956 	bl	800b208 <__sinit>
 800af5c:	f1b8 0f01 	cmp.w	r8, #1
 800af60:	bf08      	it	eq
 800af62:	89a3      	ldrheq	r3, [r4, #12]
 800af64:	6026      	str	r6, [r4, #0]
 800af66:	bf04      	itt	eq
 800af68:	f043 0301 	orreq.w	r3, r3, #1
 800af6c:	81a3      	strheq	r3, [r4, #12]
 800af6e:	89a2      	ldrh	r2, [r4, #12]
 800af70:	f012 0308 	ands.w	r3, r2, #8
 800af74:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800af78:	d01c      	beq.n	800afb4 <setvbuf+0x16c>
 800af7a:	07d3      	lsls	r3, r2, #31
 800af7c:	bf41      	itttt	mi
 800af7e:	2300      	movmi	r3, #0
 800af80:	426d      	negmi	r5, r5
 800af82:	60a3      	strmi	r3, [r4, #8]
 800af84:	61a5      	strmi	r5, [r4, #24]
 800af86:	bf58      	it	pl
 800af88:	60a5      	strpl	r5, [r4, #8]
 800af8a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800af8c:	f015 0501 	ands.w	r5, r5, #1
 800af90:	d115      	bne.n	800afbe <setvbuf+0x176>
 800af92:	f412 7f00 	tst.w	r2, #512	; 0x200
 800af96:	e7c8      	b.n	800af2a <setvbuf+0xe2>
 800af98:	4648      	mov	r0, r9
 800af9a:	f000 f9fb 	bl	800b394 <malloc>
 800af9e:	4606      	mov	r6, r0
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d0ae      	beq.n	800af02 <setvbuf+0xba>
 800afa4:	464d      	mov	r5, r9
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	e7d0      	b.n	800af52 <setvbuf+0x10a>
 800afb0:	2500      	movs	r5, #0
 800afb2:	e7a8      	b.n	800af06 <setvbuf+0xbe>
 800afb4:	60a3      	str	r3, [r4, #8]
 800afb6:	e7e8      	b.n	800af8a <setvbuf+0x142>
 800afb8:	f04f 35ff 	mov.w	r5, #4294967295
 800afbc:	e7b9      	b.n	800af32 <setvbuf+0xea>
 800afbe:	2500      	movs	r5, #0
 800afc0:	e7b7      	b.n	800af32 <setvbuf+0xea>
 800afc2:	bf00      	nop
 800afc4:	20000104 	.word	0x20000104
 800afc8:	0800b7a4 	.word	0x0800b7a4
 800afcc:	0800b7c4 	.word	0x0800b7c4
 800afd0:	0800b784 	.word	0x0800b784

0800afd4 <__sflush_r>:
 800afd4:	898a      	ldrh	r2, [r1, #12]
 800afd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afda:	4605      	mov	r5, r0
 800afdc:	0710      	lsls	r0, r2, #28
 800afde:	460c      	mov	r4, r1
 800afe0:	d458      	bmi.n	800b094 <__sflush_r+0xc0>
 800afe2:	684b      	ldr	r3, [r1, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dc05      	bgt.n	800aff4 <__sflush_r+0x20>
 800afe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	dc02      	bgt.n	800aff4 <__sflush_r+0x20>
 800afee:	2000      	movs	r0, #0
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aff6:	2e00      	cmp	r6, #0
 800aff8:	d0f9      	beq.n	800afee <__sflush_r+0x1a>
 800affa:	2300      	movs	r3, #0
 800affc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b000:	682f      	ldr	r7, [r5, #0]
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	d032      	beq.n	800b06c <__sflush_r+0x98>
 800b006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	075a      	lsls	r2, r3, #29
 800b00c:	d505      	bpl.n	800b01a <__sflush_r+0x46>
 800b00e:	6863      	ldr	r3, [r4, #4]
 800b010:	1ac0      	subs	r0, r0, r3
 800b012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b014:	b10b      	cbz	r3, 800b01a <__sflush_r+0x46>
 800b016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b018:	1ac0      	subs	r0, r0, r3
 800b01a:	2300      	movs	r3, #0
 800b01c:	4602      	mov	r2, r0
 800b01e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b020:	6a21      	ldr	r1, [r4, #32]
 800b022:	4628      	mov	r0, r5
 800b024:	47b0      	blx	r6
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	d106      	bne.n	800b03a <__sflush_r+0x66>
 800b02c:	6829      	ldr	r1, [r5, #0]
 800b02e:	291d      	cmp	r1, #29
 800b030:	d82c      	bhi.n	800b08c <__sflush_r+0xb8>
 800b032:	4a2a      	ldr	r2, [pc, #168]	; (800b0dc <__sflush_r+0x108>)
 800b034:	40ca      	lsrs	r2, r1
 800b036:	07d6      	lsls	r6, r2, #31
 800b038:	d528      	bpl.n	800b08c <__sflush_r+0xb8>
 800b03a:	2200      	movs	r2, #0
 800b03c:	6062      	str	r2, [r4, #4]
 800b03e:	04d9      	lsls	r1, r3, #19
 800b040:	6922      	ldr	r2, [r4, #16]
 800b042:	6022      	str	r2, [r4, #0]
 800b044:	d504      	bpl.n	800b050 <__sflush_r+0x7c>
 800b046:	1c42      	adds	r2, r0, #1
 800b048:	d101      	bne.n	800b04e <__sflush_r+0x7a>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	b903      	cbnz	r3, 800b050 <__sflush_r+0x7c>
 800b04e:	6560      	str	r0, [r4, #84]	; 0x54
 800b050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b052:	602f      	str	r7, [r5, #0]
 800b054:	2900      	cmp	r1, #0
 800b056:	d0ca      	beq.n	800afee <__sflush_r+0x1a>
 800b058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b05c:	4299      	cmp	r1, r3
 800b05e:	d002      	beq.n	800b066 <__sflush_r+0x92>
 800b060:	4628      	mov	r0, r5
 800b062:	f000 f99f 	bl	800b3a4 <_free_r>
 800b066:	2000      	movs	r0, #0
 800b068:	6360      	str	r0, [r4, #52]	; 0x34
 800b06a:	e7c1      	b.n	800aff0 <__sflush_r+0x1c>
 800b06c:	6a21      	ldr	r1, [r4, #32]
 800b06e:	2301      	movs	r3, #1
 800b070:	4628      	mov	r0, r5
 800b072:	47b0      	blx	r6
 800b074:	1c41      	adds	r1, r0, #1
 800b076:	d1c7      	bne.n	800b008 <__sflush_r+0x34>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0c4      	beq.n	800b008 <__sflush_r+0x34>
 800b07e:	2b1d      	cmp	r3, #29
 800b080:	d001      	beq.n	800b086 <__sflush_r+0xb2>
 800b082:	2b16      	cmp	r3, #22
 800b084:	d101      	bne.n	800b08a <__sflush_r+0xb6>
 800b086:	602f      	str	r7, [r5, #0]
 800b088:	e7b1      	b.n	800afee <__sflush_r+0x1a>
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	e7ad      	b.n	800aff0 <__sflush_r+0x1c>
 800b094:	690f      	ldr	r7, [r1, #16]
 800b096:	2f00      	cmp	r7, #0
 800b098:	d0a9      	beq.n	800afee <__sflush_r+0x1a>
 800b09a:	0793      	lsls	r3, r2, #30
 800b09c:	680e      	ldr	r6, [r1, #0]
 800b09e:	bf08      	it	eq
 800b0a0:	694b      	ldreq	r3, [r1, #20]
 800b0a2:	600f      	str	r7, [r1, #0]
 800b0a4:	bf18      	it	ne
 800b0a6:	2300      	movne	r3, #0
 800b0a8:	eba6 0807 	sub.w	r8, r6, r7
 800b0ac:	608b      	str	r3, [r1, #8]
 800b0ae:	f1b8 0f00 	cmp.w	r8, #0
 800b0b2:	dd9c      	ble.n	800afee <__sflush_r+0x1a>
 800b0b4:	6a21      	ldr	r1, [r4, #32]
 800b0b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0b8:	4643      	mov	r3, r8
 800b0ba:	463a      	mov	r2, r7
 800b0bc:	4628      	mov	r0, r5
 800b0be:	47b0      	blx	r6
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	dc06      	bgt.n	800b0d2 <__sflush_r+0xfe>
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e78e      	b.n	800aff0 <__sflush_r+0x1c>
 800b0d2:	4407      	add	r7, r0
 800b0d4:	eba8 0800 	sub.w	r8, r8, r0
 800b0d8:	e7e9      	b.n	800b0ae <__sflush_r+0xda>
 800b0da:	bf00      	nop
 800b0dc:	20400001 	.word	0x20400001

0800b0e0 <_fflush_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	690b      	ldr	r3, [r1, #16]
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	b913      	cbnz	r3, 800b0f0 <_fflush_r+0x10>
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	b118      	cbz	r0, 800b0fa <_fflush_r+0x1a>
 800b0f2:	6983      	ldr	r3, [r0, #24]
 800b0f4:	b90b      	cbnz	r3, 800b0fa <_fflush_r+0x1a>
 800b0f6:	f000 f887 	bl	800b208 <__sinit>
 800b0fa:	4b14      	ldr	r3, [pc, #80]	; (800b14c <_fflush_r+0x6c>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	d11b      	bne.n	800b138 <_fflush_r+0x58>
 800b100:	686c      	ldr	r4, [r5, #4]
 800b102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0ef      	beq.n	800b0ea <_fflush_r+0xa>
 800b10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b10c:	07d0      	lsls	r0, r2, #31
 800b10e:	d404      	bmi.n	800b11a <_fflush_r+0x3a>
 800b110:	0599      	lsls	r1, r3, #22
 800b112:	d402      	bmi.n	800b11a <_fflush_r+0x3a>
 800b114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b116:	f000 f915 	bl	800b344 <__retarget_lock_acquire_recursive>
 800b11a:	4628      	mov	r0, r5
 800b11c:	4621      	mov	r1, r4
 800b11e:	f7ff ff59 	bl	800afd4 <__sflush_r>
 800b122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b124:	07da      	lsls	r2, r3, #31
 800b126:	4605      	mov	r5, r0
 800b128:	d4e0      	bmi.n	800b0ec <_fflush_r+0xc>
 800b12a:	89a3      	ldrh	r3, [r4, #12]
 800b12c:	059b      	lsls	r3, r3, #22
 800b12e:	d4dd      	bmi.n	800b0ec <_fflush_r+0xc>
 800b130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b132:	f000 f908 	bl	800b346 <__retarget_lock_release_recursive>
 800b136:	e7d9      	b.n	800b0ec <_fflush_r+0xc>
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <_fflush_r+0x70>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d101      	bne.n	800b142 <_fflush_r+0x62>
 800b13e:	68ac      	ldr	r4, [r5, #8]
 800b140:	e7df      	b.n	800b102 <_fflush_r+0x22>
 800b142:	4b04      	ldr	r3, [pc, #16]	; (800b154 <_fflush_r+0x74>)
 800b144:	429c      	cmp	r4, r3
 800b146:	bf08      	it	eq
 800b148:	68ec      	ldreq	r4, [r5, #12]
 800b14a:	e7da      	b.n	800b102 <_fflush_r+0x22>
 800b14c:	0800b7a4 	.word	0x0800b7a4
 800b150:	0800b7c4 	.word	0x0800b7c4
 800b154:	0800b784 	.word	0x0800b784

0800b158 <std>:
 800b158:	2300      	movs	r3, #0
 800b15a:	b510      	push	{r4, lr}
 800b15c:	4604      	mov	r4, r0
 800b15e:	e9c0 3300 	strd	r3, r3, [r0]
 800b162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b166:	6083      	str	r3, [r0, #8]
 800b168:	8181      	strh	r1, [r0, #12]
 800b16a:	6643      	str	r3, [r0, #100]	; 0x64
 800b16c:	81c2      	strh	r2, [r0, #14]
 800b16e:	6183      	str	r3, [r0, #24]
 800b170:	4619      	mov	r1, r3
 800b172:	2208      	movs	r2, #8
 800b174:	305c      	adds	r0, #92	; 0x5c
 800b176:	f7ff fe5f 	bl	800ae38 <memset>
 800b17a:	4b05      	ldr	r3, [pc, #20]	; (800b190 <std+0x38>)
 800b17c:	6263      	str	r3, [r4, #36]	; 0x24
 800b17e:	4b05      	ldr	r3, [pc, #20]	; (800b194 <std+0x3c>)
 800b180:	62a3      	str	r3, [r4, #40]	; 0x28
 800b182:	4b05      	ldr	r3, [pc, #20]	; (800b198 <std+0x40>)
 800b184:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b186:	4b05      	ldr	r3, [pc, #20]	; (800b19c <std+0x44>)
 800b188:	6224      	str	r4, [r4, #32]
 800b18a:	6323      	str	r3, [r4, #48]	; 0x30
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	bf00      	nop
 800b190:	0800b585 	.word	0x0800b585
 800b194:	0800b5a7 	.word	0x0800b5a7
 800b198:	0800b5df 	.word	0x0800b5df
 800b19c:	0800b603 	.word	0x0800b603

0800b1a0 <_cleanup_r>:
 800b1a0:	4901      	ldr	r1, [pc, #4]	; (800b1a8 <_cleanup_r+0x8>)
 800b1a2:	f000 b8af 	b.w	800b304 <_fwalk_reent>
 800b1a6:	bf00      	nop
 800b1a8:	0800b0e1 	.word	0x0800b0e1

0800b1ac <__sfmoreglue>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	2268      	movs	r2, #104	; 0x68
 800b1b0:	1e4d      	subs	r5, r1, #1
 800b1b2:	4355      	muls	r5, r2
 800b1b4:	460e      	mov	r6, r1
 800b1b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1ba:	f000 f95f 	bl	800b47c <_malloc_r>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	b140      	cbz	r0, 800b1d4 <__sfmoreglue+0x28>
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1c8:	300c      	adds	r0, #12
 800b1ca:	60a0      	str	r0, [r4, #8]
 800b1cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1d0:	f7ff fe32 	bl	800ae38 <memset>
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}

0800b1d8 <__sfp_lock_acquire>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__sfp_lock_acquire+0x8>)
 800b1da:	f000 b8b3 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b1de:	bf00      	nop
 800b1e0:	20001f6d 	.word	0x20001f6d

0800b1e4 <__sfp_lock_release>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__sfp_lock_release+0x8>)
 800b1e6:	f000 b8ae 	b.w	800b346 <__retarget_lock_release_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	20001f6d 	.word	0x20001f6d

0800b1f0 <__sinit_lock_acquire>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <__sinit_lock_acquire+0x8>)
 800b1f2:	f000 b8a7 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	20001f6e 	.word	0x20001f6e

0800b1fc <__sinit_lock_release>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__sinit_lock_release+0x8>)
 800b1fe:	f000 b8a2 	b.w	800b346 <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	20001f6e 	.word	0x20001f6e

0800b208 <__sinit>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	4604      	mov	r4, r0
 800b20c:	f7ff fff0 	bl	800b1f0 <__sinit_lock_acquire>
 800b210:	69a3      	ldr	r3, [r4, #24]
 800b212:	b11b      	cbz	r3, 800b21c <__sinit+0x14>
 800b214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b218:	f7ff bff0 	b.w	800b1fc <__sinit_lock_release>
 800b21c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b220:	6523      	str	r3, [r4, #80]	; 0x50
 800b222:	4b13      	ldr	r3, [pc, #76]	; (800b270 <__sinit+0x68>)
 800b224:	4a13      	ldr	r2, [pc, #76]	; (800b274 <__sinit+0x6c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	62a2      	str	r2, [r4, #40]	; 0x28
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	bf04      	itt	eq
 800b22e:	2301      	moveq	r3, #1
 800b230:	61a3      	streq	r3, [r4, #24]
 800b232:	4620      	mov	r0, r4
 800b234:	f000 f820 	bl	800b278 <__sfp>
 800b238:	6060      	str	r0, [r4, #4]
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 f81c 	bl	800b278 <__sfp>
 800b240:	60a0      	str	r0, [r4, #8]
 800b242:	4620      	mov	r0, r4
 800b244:	f000 f818 	bl	800b278 <__sfp>
 800b248:	2200      	movs	r2, #0
 800b24a:	60e0      	str	r0, [r4, #12]
 800b24c:	2104      	movs	r1, #4
 800b24e:	6860      	ldr	r0, [r4, #4]
 800b250:	f7ff ff82 	bl	800b158 <std>
 800b254:	68a0      	ldr	r0, [r4, #8]
 800b256:	2201      	movs	r2, #1
 800b258:	2109      	movs	r1, #9
 800b25a:	f7ff ff7d 	bl	800b158 <std>
 800b25e:	68e0      	ldr	r0, [r4, #12]
 800b260:	2202      	movs	r2, #2
 800b262:	2112      	movs	r1, #18
 800b264:	f7ff ff78 	bl	800b158 <std>
 800b268:	2301      	movs	r3, #1
 800b26a:	61a3      	str	r3, [r4, #24]
 800b26c:	e7d2      	b.n	800b214 <__sinit+0xc>
 800b26e:	bf00      	nop
 800b270:	0800b780 	.word	0x0800b780
 800b274:	0800b1a1 	.word	0x0800b1a1

0800b278 <__sfp>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	4607      	mov	r7, r0
 800b27c:	f7ff ffac 	bl	800b1d8 <__sfp_lock_acquire>
 800b280:	4b1e      	ldr	r3, [pc, #120]	; (800b2fc <__sfp+0x84>)
 800b282:	681e      	ldr	r6, [r3, #0]
 800b284:	69b3      	ldr	r3, [r6, #24]
 800b286:	b913      	cbnz	r3, 800b28e <__sfp+0x16>
 800b288:	4630      	mov	r0, r6
 800b28a:	f7ff ffbd 	bl	800b208 <__sinit>
 800b28e:	3648      	adds	r6, #72	; 0x48
 800b290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b294:	3b01      	subs	r3, #1
 800b296:	d503      	bpl.n	800b2a0 <__sfp+0x28>
 800b298:	6833      	ldr	r3, [r6, #0]
 800b29a:	b30b      	cbz	r3, 800b2e0 <__sfp+0x68>
 800b29c:	6836      	ldr	r6, [r6, #0]
 800b29e:	e7f7      	b.n	800b290 <__sfp+0x18>
 800b2a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2a4:	b9d5      	cbnz	r5, 800b2dc <__sfp+0x64>
 800b2a6:	4b16      	ldr	r3, [pc, #88]	; (800b300 <__sfp+0x88>)
 800b2a8:	60e3      	str	r3, [r4, #12]
 800b2aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2ae:	6665      	str	r5, [r4, #100]	; 0x64
 800b2b0:	f000 f847 	bl	800b342 <__retarget_lock_init_recursive>
 800b2b4:	f7ff ff96 	bl	800b1e4 <__sfp_lock_release>
 800b2b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2c0:	6025      	str	r5, [r4, #0]
 800b2c2:	61a5      	str	r5, [r4, #24]
 800b2c4:	2208      	movs	r2, #8
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2cc:	f7ff fdb4 	bl	800ae38 <memset>
 800b2d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2d8:	4620      	mov	r0, r4
 800b2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2dc:	3468      	adds	r4, #104	; 0x68
 800b2de:	e7d9      	b.n	800b294 <__sfp+0x1c>
 800b2e0:	2104      	movs	r1, #4
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	f7ff ff62 	bl	800b1ac <__sfmoreglue>
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	6030      	str	r0, [r6, #0]
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d1d5      	bne.n	800b29c <__sfp+0x24>
 800b2f0:	f7ff ff78 	bl	800b1e4 <__sfp_lock_release>
 800b2f4:	230c      	movs	r3, #12
 800b2f6:	603b      	str	r3, [r7, #0]
 800b2f8:	e7ee      	b.n	800b2d8 <__sfp+0x60>
 800b2fa:	bf00      	nop
 800b2fc:	0800b780 	.word	0x0800b780
 800b300:	ffff0001 	.word	0xffff0001

0800b304 <_fwalk_reent>:
 800b304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b308:	4606      	mov	r6, r0
 800b30a:	4688      	mov	r8, r1
 800b30c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b310:	2700      	movs	r7, #0
 800b312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b316:	f1b9 0901 	subs.w	r9, r9, #1
 800b31a:	d505      	bpl.n	800b328 <_fwalk_reent+0x24>
 800b31c:	6824      	ldr	r4, [r4, #0]
 800b31e:	2c00      	cmp	r4, #0
 800b320:	d1f7      	bne.n	800b312 <_fwalk_reent+0xe>
 800b322:	4638      	mov	r0, r7
 800b324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b328:	89ab      	ldrh	r3, [r5, #12]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d907      	bls.n	800b33e <_fwalk_reent+0x3a>
 800b32e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b332:	3301      	adds	r3, #1
 800b334:	d003      	beq.n	800b33e <_fwalk_reent+0x3a>
 800b336:	4629      	mov	r1, r5
 800b338:	4630      	mov	r0, r6
 800b33a:	47c0      	blx	r8
 800b33c:	4307      	orrs	r7, r0
 800b33e:	3568      	adds	r5, #104	; 0x68
 800b340:	e7e9      	b.n	800b316 <_fwalk_reent+0x12>

0800b342 <__retarget_lock_init_recursive>:
 800b342:	4770      	bx	lr

0800b344 <__retarget_lock_acquire_recursive>:
 800b344:	4770      	bx	lr

0800b346 <__retarget_lock_release_recursive>:
 800b346:	4770      	bx	lr

0800b348 <__swhatbuf_r>:
 800b348:	b570      	push	{r4, r5, r6, lr}
 800b34a:	460e      	mov	r6, r1
 800b34c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b350:	2900      	cmp	r1, #0
 800b352:	b096      	sub	sp, #88	; 0x58
 800b354:	4614      	mov	r4, r2
 800b356:	461d      	mov	r5, r3
 800b358:	da08      	bge.n	800b36c <__swhatbuf_r+0x24>
 800b35a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	602a      	str	r2, [r5, #0]
 800b362:	061a      	lsls	r2, r3, #24
 800b364:	d410      	bmi.n	800b388 <__swhatbuf_r+0x40>
 800b366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b36a:	e00e      	b.n	800b38a <__swhatbuf_r+0x42>
 800b36c:	466a      	mov	r2, sp
 800b36e:	f000 f96f 	bl	800b650 <_fstat_r>
 800b372:	2800      	cmp	r0, #0
 800b374:	dbf1      	blt.n	800b35a <__swhatbuf_r+0x12>
 800b376:	9a01      	ldr	r2, [sp, #4]
 800b378:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b37c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b380:	425a      	negs	r2, r3
 800b382:	415a      	adcs	r2, r3
 800b384:	602a      	str	r2, [r5, #0]
 800b386:	e7ee      	b.n	800b366 <__swhatbuf_r+0x1e>
 800b388:	2340      	movs	r3, #64	; 0x40
 800b38a:	2000      	movs	r0, #0
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	b016      	add	sp, #88	; 0x58
 800b390:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b394 <malloc>:
 800b394:	4b02      	ldr	r3, [pc, #8]	; (800b3a0 <malloc+0xc>)
 800b396:	4601      	mov	r1, r0
 800b398:	6818      	ldr	r0, [r3, #0]
 800b39a:	f000 b86f 	b.w	800b47c <_malloc_r>
 800b39e:	bf00      	nop
 800b3a0:	20000104 	.word	0x20000104

0800b3a4 <_free_r>:
 800b3a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b3a6:	2900      	cmp	r1, #0
 800b3a8:	d044      	beq.n	800b434 <_free_r+0x90>
 800b3aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3ae:	9001      	str	r0, [sp, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b3b6:	bfb8      	it	lt
 800b3b8:	18e4      	addlt	r4, r4, r3
 800b3ba:	f000 f96d 	bl	800b698 <__malloc_lock>
 800b3be:	4a1e      	ldr	r2, [pc, #120]	; (800b438 <_free_r+0x94>)
 800b3c0:	9801      	ldr	r0, [sp, #4]
 800b3c2:	6813      	ldr	r3, [r2, #0]
 800b3c4:	b933      	cbnz	r3, 800b3d4 <_free_r+0x30>
 800b3c6:	6063      	str	r3, [r4, #4]
 800b3c8:	6014      	str	r4, [r2, #0]
 800b3ca:	b003      	add	sp, #12
 800b3cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3d0:	f000 b968 	b.w	800b6a4 <__malloc_unlock>
 800b3d4:	42a3      	cmp	r3, r4
 800b3d6:	d908      	bls.n	800b3ea <_free_r+0x46>
 800b3d8:	6825      	ldr	r5, [r4, #0]
 800b3da:	1961      	adds	r1, r4, r5
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	bf01      	itttt	eq
 800b3e0:	6819      	ldreq	r1, [r3, #0]
 800b3e2:	685b      	ldreq	r3, [r3, #4]
 800b3e4:	1949      	addeq	r1, r1, r5
 800b3e6:	6021      	streq	r1, [r4, #0]
 800b3e8:	e7ed      	b.n	800b3c6 <_free_r+0x22>
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	b10b      	cbz	r3, 800b3f4 <_free_r+0x50>
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	d9fa      	bls.n	800b3ea <_free_r+0x46>
 800b3f4:	6811      	ldr	r1, [r2, #0]
 800b3f6:	1855      	adds	r5, r2, r1
 800b3f8:	42a5      	cmp	r5, r4
 800b3fa:	d10b      	bne.n	800b414 <_free_r+0x70>
 800b3fc:	6824      	ldr	r4, [r4, #0]
 800b3fe:	4421      	add	r1, r4
 800b400:	1854      	adds	r4, r2, r1
 800b402:	42a3      	cmp	r3, r4
 800b404:	6011      	str	r1, [r2, #0]
 800b406:	d1e0      	bne.n	800b3ca <_free_r+0x26>
 800b408:	681c      	ldr	r4, [r3, #0]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	6053      	str	r3, [r2, #4]
 800b40e:	4421      	add	r1, r4
 800b410:	6011      	str	r1, [r2, #0]
 800b412:	e7da      	b.n	800b3ca <_free_r+0x26>
 800b414:	d902      	bls.n	800b41c <_free_r+0x78>
 800b416:	230c      	movs	r3, #12
 800b418:	6003      	str	r3, [r0, #0]
 800b41a:	e7d6      	b.n	800b3ca <_free_r+0x26>
 800b41c:	6825      	ldr	r5, [r4, #0]
 800b41e:	1961      	adds	r1, r4, r5
 800b420:	428b      	cmp	r3, r1
 800b422:	bf04      	itt	eq
 800b424:	6819      	ldreq	r1, [r3, #0]
 800b426:	685b      	ldreq	r3, [r3, #4]
 800b428:	6063      	str	r3, [r4, #4]
 800b42a:	bf04      	itt	eq
 800b42c:	1949      	addeq	r1, r1, r5
 800b42e:	6021      	streq	r1, [r4, #0]
 800b430:	6054      	str	r4, [r2, #4]
 800b432:	e7ca      	b.n	800b3ca <_free_r+0x26>
 800b434:	b003      	add	sp, #12
 800b436:	bd30      	pop	{r4, r5, pc}
 800b438:	20001f70 	.word	0x20001f70

0800b43c <sbrk_aligned>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	4e0e      	ldr	r6, [pc, #56]	; (800b478 <sbrk_aligned+0x3c>)
 800b440:	460c      	mov	r4, r1
 800b442:	6831      	ldr	r1, [r6, #0]
 800b444:	4605      	mov	r5, r0
 800b446:	b911      	cbnz	r1, 800b44e <sbrk_aligned+0x12>
 800b448:	f000 f88c 	bl	800b564 <_sbrk_r>
 800b44c:	6030      	str	r0, [r6, #0]
 800b44e:	4621      	mov	r1, r4
 800b450:	4628      	mov	r0, r5
 800b452:	f000 f887 	bl	800b564 <_sbrk_r>
 800b456:	1c43      	adds	r3, r0, #1
 800b458:	d00a      	beq.n	800b470 <sbrk_aligned+0x34>
 800b45a:	1cc4      	adds	r4, r0, #3
 800b45c:	f024 0403 	bic.w	r4, r4, #3
 800b460:	42a0      	cmp	r0, r4
 800b462:	d007      	beq.n	800b474 <sbrk_aligned+0x38>
 800b464:	1a21      	subs	r1, r4, r0
 800b466:	4628      	mov	r0, r5
 800b468:	f000 f87c 	bl	800b564 <_sbrk_r>
 800b46c:	3001      	adds	r0, #1
 800b46e:	d101      	bne.n	800b474 <sbrk_aligned+0x38>
 800b470:	f04f 34ff 	mov.w	r4, #4294967295
 800b474:	4620      	mov	r0, r4
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	20001f74 	.word	0x20001f74

0800b47c <_malloc_r>:
 800b47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b480:	1ccd      	adds	r5, r1, #3
 800b482:	f025 0503 	bic.w	r5, r5, #3
 800b486:	3508      	adds	r5, #8
 800b488:	2d0c      	cmp	r5, #12
 800b48a:	bf38      	it	cc
 800b48c:	250c      	movcc	r5, #12
 800b48e:	2d00      	cmp	r5, #0
 800b490:	4607      	mov	r7, r0
 800b492:	db01      	blt.n	800b498 <_malloc_r+0x1c>
 800b494:	42a9      	cmp	r1, r5
 800b496:	d905      	bls.n	800b4a4 <_malloc_r+0x28>
 800b498:	230c      	movs	r3, #12
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	2600      	movs	r6, #0
 800b49e:	4630      	mov	r0, r6
 800b4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a4:	4e2e      	ldr	r6, [pc, #184]	; (800b560 <_malloc_r+0xe4>)
 800b4a6:	f000 f8f7 	bl	800b698 <__malloc_lock>
 800b4aa:	6833      	ldr	r3, [r6, #0]
 800b4ac:	461c      	mov	r4, r3
 800b4ae:	bb34      	cbnz	r4, 800b4fe <_malloc_r+0x82>
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	f7ff ffc2 	bl	800b43c <sbrk_aligned>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	d14d      	bne.n	800b55a <_malloc_r+0xde>
 800b4be:	6834      	ldr	r4, [r6, #0]
 800b4c0:	4626      	mov	r6, r4
 800b4c2:	2e00      	cmp	r6, #0
 800b4c4:	d140      	bne.n	800b548 <_malloc_r+0xcc>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	eb04 0803 	add.w	r8, r4, r3
 800b4d0:	f000 f848 	bl	800b564 <_sbrk_r>
 800b4d4:	4580      	cmp	r8, r0
 800b4d6:	d13a      	bne.n	800b54e <_malloc_r+0xd2>
 800b4d8:	6821      	ldr	r1, [r4, #0]
 800b4da:	3503      	adds	r5, #3
 800b4dc:	1a6d      	subs	r5, r5, r1
 800b4de:	f025 0503 	bic.w	r5, r5, #3
 800b4e2:	3508      	adds	r5, #8
 800b4e4:	2d0c      	cmp	r5, #12
 800b4e6:	bf38      	it	cc
 800b4e8:	250c      	movcc	r5, #12
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	f7ff ffa5 	bl	800b43c <sbrk_aligned>
 800b4f2:	3001      	adds	r0, #1
 800b4f4:	d02b      	beq.n	800b54e <_malloc_r+0xd2>
 800b4f6:	6823      	ldr	r3, [r4, #0]
 800b4f8:	442b      	add	r3, r5
 800b4fa:	6023      	str	r3, [r4, #0]
 800b4fc:	e00e      	b.n	800b51c <_malloc_r+0xa0>
 800b4fe:	6822      	ldr	r2, [r4, #0]
 800b500:	1b52      	subs	r2, r2, r5
 800b502:	d41e      	bmi.n	800b542 <_malloc_r+0xc6>
 800b504:	2a0b      	cmp	r2, #11
 800b506:	d916      	bls.n	800b536 <_malloc_r+0xba>
 800b508:	1961      	adds	r1, r4, r5
 800b50a:	42a3      	cmp	r3, r4
 800b50c:	6025      	str	r5, [r4, #0]
 800b50e:	bf18      	it	ne
 800b510:	6059      	strne	r1, [r3, #4]
 800b512:	6863      	ldr	r3, [r4, #4]
 800b514:	bf08      	it	eq
 800b516:	6031      	streq	r1, [r6, #0]
 800b518:	5162      	str	r2, [r4, r5]
 800b51a:	604b      	str	r3, [r1, #4]
 800b51c:	4638      	mov	r0, r7
 800b51e:	f104 060b 	add.w	r6, r4, #11
 800b522:	f000 f8bf 	bl	800b6a4 <__malloc_unlock>
 800b526:	f026 0607 	bic.w	r6, r6, #7
 800b52a:	1d23      	adds	r3, r4, #4
 800b52c:	1af2      	subs	r2, r6, r3
 800b52e:	d0b6      	beq.n	800b49e <_malloc_r+0x22>
 800b530:	1b9b      	subs	r3, r3, r6
 800b532:	50a3      	str	r3, [r4, r2]
 800b534:	e7b3      	b.n	800b49e <_malloc_r+0x22>
 800b536:	6862      	ldr	r2, [r4, #4]
 800b538:	42a3      	cmp	r3, r4
 800b53a:	bf0c      	ite	eq
 800b53c:	6032      	streq	r2, [r6, #0]
 800b53e:	605a      	strne	r2, [r3, #4]
 800b540:	e7ec      	b.n	800b51c <_malloc_r+0xa0>
 800b542:	4623      	mov	r3, r4
 800b544:	6864      	ldr	r4, [r4, #4]
 800b546:	e7b2      	b.n	800b4ae <_malloc_r+0x32>
 800b548:	4634      	mov	r4, r6
 800b54a:	6876      	ldr	r6, [r6, #4]
 800b54c:	e7b9      	b.n	800b4c2 <_malloc_r+0x46>
 800b54e:	230c      	movs	r3, #12
 800b550:	603b      	str	r3, [r7, #0]
 800b552:	4638      	mov	r0, r7
 800b554:	f000 f8a6 	bl	800b6a4 <__malloc_unlock>
 800b558:	e7a1      	b.n	800b49e <_malloc_r+0x22>
 800b55a:	6025      	str	r5, [r4, #0]
 800b55c:	e7de      	b.n	800b51c <_malloc_r+0xa0>
 800b55e:	bf00      	nop
 800b560:	20001f70 	.word	0x20001f70

0800b564 <_sbrk_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d06      	ldr	r5, [pc, #24]	; (800b580 <_sbrk_r+0x1c>)
 800b568:	2300      	movs	r3, #0
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	602b      	str	r3, [r5, #0]
 800b570:	f7f6 fa46 	bl	8001a00 <_sbrk>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d102      	bne.n	800b57e <_sbrk_r+0x1a>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	b103      	cbz	r3, 800b57e <_sbrk_r+0x1a>
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	20001f78 	.word	0x20001f78

0800b584 <__sread>:
 800b584:	b510      	push	{r4, lr}
 800b586:	460c      	mov	r4, r1
 800b588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b58c:	f000 f890 	bl	800b6b0 <_read_r>
 800b590:	2800      	cmp	r0, #0
 800b592:	bfab      	itete	ge
 800b594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b596:	89a3      	ldrhlt	r3, [r4, #12]
 800b598:	181b      	addge	r3, r3, r0
 800b59a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b59e:	bfac      	ite	ge
 800b5a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5a2:	81a3      	strhlt	r3, [r4, #12]
 800b5a4:	bd10      	pop	{r4, pc}

0800b5a6 <__swrite>:
 800b5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5aa:	461f      	mov	r7, r3
 800b5ac:	898b      	ldrh	r3, [r1, #12]
 800b5ae:	05db      	lsls	r3, r3, #23
 800b5b0:	4605      	mov	r5, r0
 800b5b2:	460c      	mov	r4, r1
 800b5b4:	4616      	mov	r6, r2
 800b5b6:	d505      	bpl.n	800b5c4 <__swrite+0x1e>
 800b5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5bc:	2302      	movs	r3, #2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f000 f858 	bl	800b674 <_lseek_r>
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5ce:	81a3      	strh	r3, [r4, #12]
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	463b      	mov	r3, r7
 800b5d4:	4628      	mov	r0, r5
 800b5d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5da:	f000 b817 	b.w	800b60c <_write_r>

0800b5de <__sseek>:
 800b5de:	b510      	push	{r4, lr}
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e6:	f000 f845 	bl	800b674 <_lseek_r>
 800b5ea:	1c43      	adds	r3, r0, #1
 800b5ec:	89a3      	ldrh	r3, [r4, #12]
 800b5ee:	bf15      	itete	ne
 800b5f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5fa:	81a3      	strheq	r3, [r4, #12]
 800b5fc:	bf18      	it	ne
 800b5fe:	81a3      	strhne	r3, [r4, #12]
 800b600:	bd10      	pop	{r4, pc}

0800b602 <__sclose>:
 800b602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b606:	f000 b813 	b.w	800b630 <_close_r>
	...

0800b60c <_write_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d07      	ldr	r5, [pc, #28]	; (800b62c <_write_r+0x20>)
 800b610:	4604      	mov	r4, r0
 800b612:	4608      	mov	r0, r1
 800b614:	4611      	mov	r1, r2
 800b616:	2200      	movs	r2, #0
 800b618:	602a      	str	r2, [r5, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	f7f5 ff94 	bl	8001548 <_write>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_write_r+0x1e>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_write_r+0x1e>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	20001f78 	.word	0x20001f78

0800b630 <_close_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d06      	ldr	r5, [pc, #24]	; (800b64c <_close_r+0x1c>)
 800b634:	2300      	movs	r3, #0
 800b636:	4604      	mov	r4, r0
 800b638:	4608      	mov	r0, r1
 800b63a:	602b      	str	r3, [r5, #0]
 800b63c:	f7f5 ffb0 	bl	80015a0 <_close>
 800b640:	1c43      	adds	r3, r0, #1
 800b642:	d102      	bne.n	800b64a <_close_r+0x1a>
 800b644:	682b      	ldr	r3, [r5, #0]
 800b646:	b103      	cbz	r3, 800b64a <_close_r+0x1a>
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	bd38      	pop	{r3, r4, r5, pc}
 800b64c:	20001f78 	.word	0x20001f78

0800b650 <_fstat_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4d07      	ldr	r5, [pc, #28]	; (800b670 <_fstat_r+0x20>)
 800b654:	2300      	movs	r3, #0
 800b656:	4604      	mov	r4, r0
 800b658:	4608      	mov	r0, r1
 800b65a:	4611      	mov	r1, r2
 800b65c:	602b      	str	r3, [r5, #0]
 800b65e:	f7f5 ffef 	bl	8001640 <_fstat>
 800b662:	1c43      	adds	r3, r0, #1
 800b664:	d102      	bne.n	800b66c <_fstat_r+0x1c>
 800b666:	682b      	ldr	r3, [r5, #0]
 800b668:	b103      	cbz	r3, 800b66c <_fstat_r+0x1c>
 800b66a:	6023      	str	r3, [r4, #0]
 800b66c:	bd38      	pop	{r3, r4, r5, pc}
 800b66e:	bf00      	nop
 800b670:	20001f78 	.word	0x20001f78

0800b674 <_lseek_r>:
 800b674:	b538      	push	{r3, r4, r5, lr}
 800b676:	4d07      	ldr	r5, [pc, #28]	; (800b694 <_lseek_r+0x20>)
 800b678:	4604      	mov	r4, r0
 800b67a:	4608      	mov	r0, r1
 800b67c:	4611      	mov	r1, r2
 800b67e:	2200      	movs	r2, #0
 800b680:	602a      	str	r2, [r5, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	f7f5 ffa3 	bl	80015ce <_lseek>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d102      	bne.n	800b692 <_lseek_r+0x1e>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	b103      	cbz	r3, 800b692 <_lseek_r+0x1e>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	bd38      	pop	{r3, r4, r5, pc}
 800b694:	20001f78 	.word	0x20001f78

0800b698 <__malloc_lock>:
 800b698:	4801      	ldr	r0, [pc, #4]	; (800b6a0 <__malloc_lock+0x8>)
 800b69a:	f7ff be53 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b69e:	bf00      	nop
 800b6a0:	20001f6c 	.word	0x20001f6c

0800b6a4 <__malloc_unlock>:
 800b6a4:	4801      	ldr	r0, [pc, #4]	; (800b6ac <__malloc_unlock+0x8>)
 800b6a6:	f7ff be4e 	b.w	800b346 <__retarget_lock_release_recursive>
 800b6aa:	bf00      	nop
 800b6ac:	20001f6c 	.word	0x20001f6c

0800b6b0 <_read_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	4d07      	ldr	r5, [pc, #28]	; (800b6d0 <_read_r+0x20>)
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	4608      	mov	r0, r1
 800b6b8:	4611      	mov	r1, r2
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	602a      	str	r2, [r5, #0]
 800b6be:	461a      	mov	r2, r3
 800b6c0:	f7f5 ff96 	bl	80015f0 <_read>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_read_r+0x1e>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_read_r+0x1e>
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	20001f78 	.word	0x20001f78

0800b6d4 <_init>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	bf00      	nop
 800b6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6da:	bc08      	pop	{r3}
 800b6dc:	469e      	mov	lr, r3
 800b6de:	4770      	bx	lr

0800b6e0 <_fini>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	bf00      	nop
 800b6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e6:	bc08      	pop	{r3}
 800b6e8:	469e      	mov	lr, r3
 800b6ea:	4770      	bx	lr
