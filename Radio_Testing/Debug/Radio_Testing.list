
Radio_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b23c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800b3c4  0800b3c4  0001b3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b490  0800b490  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800b490  0800b490  0001b490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b498  0800b498  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b498  0800b498  0001b498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b49c  0800b49c  0001b49c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800b4a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00001f00  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002068  20002068  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bfb4  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d28  00000000  00000000  0003c14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001530  00000000  00000000  00041530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d71  00000000  00000000  00042a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb56  00000000  00000000  000667d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c868e  00000000  00000000  00082327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014a9b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000657c  00000000  00000000  0014aa08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b3ac 	.word	0x0800b3ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	0800b3ac 	.word	0x0800b3ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004cc:	b4b0      	push	{r4, r5, r7}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004d4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004d8:	62bb      	str	r3, [r7, #40]	; 0x28
	new_LoRa.spredingFactor        = SF_7      ;
 80004da:	2307      	movs	r3, #7
 80004dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	new_LoRa.crcRate               = CR_4_5    ;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	new_LoRa.power				   = POWER_20db;
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.overCurrentProtection = 100       ;
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	new_LoRa.preamble			   = 8         ;
 80004f8:	2308      	movs	r3, #8
 80004fa:	863b      	strh	r3, [r7, #48]	; 0x30

	return new_LoRa;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	461d      	mov	r5, r3
 8000500:	f107 0408 	add.w	r4, r7, #8
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000510:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	373c      	adds	r7, #60	; 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr

0800051e <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6898      	ldr	r0, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	899b      	ldrh	r3, [r3, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f002 f86f 	bl	8002614 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f001 fa1e 	bl	8001978 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f002 f864 	bl	8002614 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 fa13 	bl	8001978 <HAL_Delay>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f9fa 	bl	8000960 <LoRa_read>
 800056c:	4603      	mov	r3, r0
 800056e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d107      	bne.n	800058a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f023 0307 	bic.w	r3, r3, #7
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e05e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == STNBY_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e04e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_TX) {
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x02;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = FS_MODE_TX;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2202      	movs	r2, #2
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e03e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == TRANSMIT_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d10c      	bne.n	80005ea <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x03;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0303 	orr.w	r3, r3, #3
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2203      	movs	r2, #3
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	e02e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_RX){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d10c      	bne.n	800060a <LoRa_gotoMode+0xb0>
		data = (read & 0xF8) | 0x04;
 80005f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f4:	f023 0307 	bic.w	r3, r3, #7
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2203      	movs	r2, #3
 8000606:	61da      	str	r2, [r3, #28]
 8000608:	e01e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == RXCONTIN_MODE){
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b05      	cmp	r3, #5
 800060e:	d10c      	bne.n	800062a <LoRa_gotoMode+0xd0>
		data = (read & 0xF8) | 0x05;
 8000610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000614:	f023 0307 	bic.w	r3, r3, #7
 8000618:	b25b      	sxtb	r3, r3
 800061a:	f043 0305 	orr.w	r3, r3, #5
 800061e:	b25b      	sxtb	r3, r3
 8000620:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2205      	movs	r2, #5
 8000626:	61da      	str	r2, [r3, #28]
 8000628:	e00e      	b.n	8000648 <LoRa_gotoMode+0xee>
	}else if (mode == RXSINGLE_MODE){
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2b06      	cmp	r3, #6
 800062e:	d10b      	bne.n	8000648 <LoRa_gotoMode+0xee>
		data = (read & 0xF8) | 0x06;
 8000630:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000634:	f023 0307 	bic.w	r3, r3, #7
 8000638:	b25b      	sxtb	r3, r3
 800063a:	f043 0306 	orr.w	r3, r3, #6
 800063e:	b25b      	sxtb	r3, r3
 8000640:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2206      	movs	r2, #6
 8000646:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	461a      	mov	r2, r3
 800064c:	2101      	movs	r1, #1
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 f9a0 	bl	8000994 <LoRa_write>
	HAL_Delay(10);
 8000654:	200a      	movs	r0, #10
 8000656:	f001 f98f 	bl	8001978 <HAL_Delay>
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}

08000662 <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000662:	b580      	push	{r7, lr}
 8000664:	b084      	sub	sp, #16
 8000666:	af00      	add	r7, sp, #0
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	60b9      	str	r1, [r7, #8]
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4613      	mov	r3, r2
 8000670:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	889b      	ldrh	r3, [r3, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	4619      	mov	r1, r3
 800067e:	f001 ffc9 	bl	8002614 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	6998      	ldr	r0, [r3, #24]
 8000686:	88fa      	ldrh	r2, [r7, #6]
 8000688:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800068c:	68b9      	ldr	r1, [r7, #8]
 800068e:	f003 ff52 	bl	8004536 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000692:	bf00      	nop
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4618      	mov	r0, r3
 800069a:	f004 fb3b 	bl	8004d14 <HAL_SPI_GetState>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d1f7      	bne.n	8000694 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	6998      	ldr	r0, [r3, #24]
 80006a8:	8b3a      	ldrh	r2, [r7, #24]
 80006aa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006ae:	6839      	ldr	r1, [r7, #0]
 80006b0:	f004 f87d 	bl	80047ae <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006b4:	bf00      	nop
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f004 fb2a 	bl	8004d14 <HAL_SPI_GetState>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d1f7      	bne.n	80006b6 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	6818      	ldr	r0, [r3, #0]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	889b      	ldrh	r3, [r3, #4]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	f001 ff9f 	bl	8002614 <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80006de:	b580      	push	{r7, lr}
 80006e0:	b084      	sub	sp, #16
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	60b9      	str	r1, [r7, #8]
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4613      	mov	r3, r2
 80006ec:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	889b      	ldrh	r3, [r3, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	4619      	mov	r1, r3
 80006fa:	f001 ff8b 	bl	8002614 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	6998      	ldr	r0, [r3, #24]
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	f003 ff14 	bl	8004536 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800070e:	bf00      	nop
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4618      	mov	r0, r3
 8000716:	f004 fafd 	bl	8004d14 <HAL_SPI_GetState>
 800071a:	4603      	mov	r3, r0
 800071c:	2b01      	cmp	r3, #1
 800071e:	d1f7      	bne.n	8000710 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6998      	ldr	r0, [r3, #24]
 8000724:	8b3a      	ldrh	r2, [r7, #24]
 8000726:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800072a:	6839      	ldr	r1, [r7, #0]
 800072c:	f003 ff03 	bl	8004536 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000730:	bf00      	nop
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	699b      	ldr	r3, [r3, #24]
 8000736:	4618      	mov	r0, r3
 8000738:	f004 faec 	bl	8004d14 <HAL_SPI_GetState>
 800073c:	4603      	mov	r3, r0
 800073e:	2b01      	cmp	r3, #1
 8000740:	d1f7      	bne.n	8000732 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6818      	ldr	r0, [r3, #0]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	889b      	ldrh	r3, [r3, #4]
 800074a:	2201      	movs	r2, #1
 800074c:	4619      	mov	r1, r3
 800074e:	f001 ff61 	bl	8002614 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	04db      	lsls	r3, r3, #19
 8000768:	115b      	asrs	r3, r3, #5
 800076a:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	0c1b      	lsrs	r3, r3, #16
 8000770:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000772:	7afb      	ldrb	r3, [r7, #11]
 8000774:	461a      	mov	r2, r3
 8000776:	2106      	movs	r1, #6
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f90b 	bl	8000994 <LoRa_write>
	HAL_Delay(5);
 800077e:	2005      	movs	r0, #5
 8000780:	f001 f8fa 	bl	8001978 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 800078a:	7afb      	ldrb	r3, [r7, #11]
 800078c:	461a      	mov	r2, r3
 800078e:	2107      	movs	r1, #7
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f8ff 	bl	8000994 <LoRa_write>
	HAL_Delay(5);
 8000796:	2005      	movs	r0, #5
 8000798:	f001 f8ee 	bl	8001978 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80007a0:	7afb      	ldrb	r3, [r7, #11]
 80007a2:	461a      	mov	r2, r3
 80007a4:	2108      	movs	r1, #8
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 f8f4 	bl	8000994 <LoRa_write>
	HAL_Delay(5);
 80007ac:	2005      	movs	r0, #5
 80007ae:	f001 f8e3 	bl	8001978 <HAL_Delay>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b084      	sub	sp, #16
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2b0c      	cmp	r3, #12
 80007c8:	dd01      	ble.n	80007ce <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80007ca:	230c      	movs	r3, #12
 80007cc:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2b06      	cmp	r3, #6
 80007d2:	dc01      	bgt.n	80007d8 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80007d4:	2307      	movs	r3, #7
 80007d6:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80007d8:	211e      	movs	r1, #30
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f000 f8c0 	bl	8000960 <LoRa_read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80007e4:	200a      	movs	r0, #10
 80007e6:	f001 f8c7 	bl	8001978 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	011b      	lsls	r3, r3, #4
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4413      	add	r3, r2
 80007fc:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	461a      	mov	r2, r3
 8000802:	211e      	movs	r1, #30
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f000 f8c5 	bl	8000994 <LoRa_write>
	HAL_Delay(10);
 800080a:	200a      	movs	r0, #10
 800080c:	f001 f8b4 	bl	8001978 <HAL_Delay>
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	461a      	mov	r2, r3
 8000828:	2109      	movs	r1, #9
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 f8b2 	bl	8000994 <LoRa_write>
	HAL_Delay(10);
 8000830:	200a      	movs	r0, #10
 8000832:	f001 f8a1 	bl	8001978 <HAL_Delay>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	460b      	mov	r3, r1
 800084a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000850:	78fb      	ldrb	r3, [r7, #3]
 8000852:	2b2c      	cmp	r3, #44	; 0x2c
 8000854:	d801      	bhi.n	800085a <LoRa_setOCP+0x1a>
		current = 45;
 8000856:	232d      	movs	r3, #45	; 0x2d
 8000858:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800085a:	78fb      	ldrb	r3, [r7, #3]
 800085c:	2bf0      	cmp	r3, #240	; 0xf0
 800085e:	d901      	bls.n	8000864 <LoRa_setOCP+0x24>
		current = 240;
 8000860:	23f0      	movs	r3, #240	; 0xf0
 8000862:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	2b78      	cmp	r3, #120	; 0x78
 8000868:	d809      	bhi.n	800087e <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800086a:	78fb      	ldrb	r3, [r7, #3]
 800086c:	3b2d      	subs	r3, #45	; 0x2d
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <LoRa_setOCP+0x78>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	1052      	asrs	r2, r2, #1
 8000876:	17db      	asrs	r3, r3, #31
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	73fb      	strb	r3, [r7, #15]
 800087c:	e00b      	b.n	8000896 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	2bf0      	cmp	r3, #240	; 0xf0
 8000882:	d808      	bhi.n	8000896 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	331e      	adds	r3, #30
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <LoRa_setOCP+0x78>)
 800088a:	fb82 1203 	smull	r1, r2, r2, r3
 800088e:	1092      	asrs	r2, r2, #2
 8000890:	17db      	asrs	r3, r3, #31
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	3320      	adds	r3, #32
 800089a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	461a      	mov	r2, r3
 80008a0:	210b      	movs	r1, #11
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f876 	bl	8000994 <LoRa_write>
	HAL_Delay(10);
 80008a8:	200a      	movs	r0, #10
 80008aa:	f001 f865 	bl	8001978 <HAL_Delay>
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	66666667 	.word	0x66666667

080008bc <LoRa_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setCRCon(LoRa* _LoRa) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d110      	bne.n	80008f0 <LoRa_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 80008ce:	211e      	movs	r1, #30
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f845 	bl	8000960 <LoRa_read>
 80008d6:	4603      	mov	r3, r0
 80008d8:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xFB) | 0x04;
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 80008e2:	7bbb      	ldrb	r3, [r7, #14]
 80008e4:	461a      	mov	r2, r3
 80008e6:	211e      	movs	r1, #30
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f000 f853 	bl	8000994 <LoRa_write>
	else {
		read = LoRa_read(_LoRa, RegPacketConfig1);
		data = (read & 0xEF) | 0x10;
		LoRa_write(_LoRa, RegModemConfig2, data);
	}
}
 80008ee:	e00f      	b.n	8000910 <LoRa_setCRCon+0x54>
		read = LoRa_read(_LoRa, RegPacketConfig1);
 80008f0:	2130      	movs	r1, #48	; 0x30
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f834 	bl	8000960 <LoRa_read>
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xEF) | 0x10;
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	f043 0310 	orr.w	r3, r3, #16
 8000902:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	461a      	mov	r2, r3
 8000908:	211e      	movs	r1, #30
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 f842 	bl	8000994 <LoRa_write>
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000926:	2b02      	cmp	r3, #2
 8000928:	d110      	bne.n	800094c <LoRa_setTOMsb_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 800092a:	211e      	movs	r1, #30
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 f817 	bl	8000960 <LoRa_read>
 8000932:	4603      	mov	r3, r0
 8000934:	73fb      	strb	r3, [r7, #15]
		data = read | 0x07;
 8000936:	7bfb      	ldrb	r3, [r7, #15]
 8000938:	f043 0307 	orr.w	r3, r3, #7
 800093c:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 800093e:	7bbb      	ldrb	r3, [r7, #14]
 8000940:	461a      	mov	r2, r3
 8000942:	211e      	movs	r1, #30
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f825 	bl	8000994 <LoRa_write>
 800094a:	e002      	b.n	8000952 <LoRa_setTOMsb_setCRCon+0x3a>
	}
	else {
		LoRa_setCRCon(_LoRa);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ffb5 	bl	80008bc <LoRa_setCRCon>
	}

	HAL_Delay(10);
 8000952:	200a      	movs	r0, #10
 8000954:	f001 f810 	bl	8001978 <HAL_Delay>
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	460b      	mov	r3, r1
 800096a:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800096c:	78fb      	ldrb	r3, [r7, #3]
 800096e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000972:	b2db      	uxtb	r3, r3
 8000974:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000976:	f107 030f 	add.w	r3, r7, #15
 800097a:	f107 010e 	add.w	r1, r7, #14
 800097e:	2201      	movs	r2, #1
 8000980:	9200      	str	r2, [sp, #0]
 8000982:	2201      	movs	r2, #1
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff fe6c 	bl	8000662 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800098a:	7bfb      	ldrb	r3, [r7, #15]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	70fb      	strb	r3, [r7, #3]
 80009a0:	4613      	mov	r3, r2
 80009a2:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	73bb      	strb	r3, [r7, #14]
	data = value;
 80009ae:	78bb      	ldrb	r3, [r7, #2]
 80009b0:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80009b2:	f107 030f 	add.w	r3, r7, #15
 80009b6:	f107 010e 	add.w	r1, r7, #14
 80009ba:	2201      	movs	r2, #1
 80009bc:	9200      	str	r2, [sp, #0]
 80009be:	2201      	movs	r2, #1
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff fe8c 	bl	80006de <LoRa_writeReg>
	//HAL_Delay(5);
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]

	return 1;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80009ec:	2105      	movs	r1, #5
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fdb3 	bl	800055a <LoRa_gotoMode>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b089      	sub	sp, #36	; 0x24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	4613      	mov	r3, r2
 8000a08:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
 8000a12:	e007      	b.n	8000a24 <LoRa_receive+0x28>
		data[i]=0;
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	4413      	add	r3, r2
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	3301      	adds	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	dbf3      	blt.n	8000a14 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff fd93 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000a34:	2112      	movs	r1, #18
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff ff92 	bl	8000960 <LoRa_read>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000a40:	7cfb      	ldrb	r3, [r7, #19]
 8000a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d02f      	beq.n	8000aaa <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	2112      	movs	r1, #18
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f7ff ffa0 	bl	8000994 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000a54:	2113      	movs	r1, #19
 8000a56:	68f8      	ldr	r0, [r7, #12]
 8000a58:	f7ff ff82 	bl	8000960 <LoRa_read>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000a60:	2110      	movs	r1, #16
 8000a62:	68f8      	ldr	r0, [r7, #12]
 8000a64:	f7ff ff7c 	bl	8000960 <LoRa_read>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000a6c:	7cfb      	ldrb	r3, [r7, #19]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	210d      	movs	r1, #13
 8000a72:	68f8      	ldr	r0, [r7, #12]
 8000a74:	f7ff ff8e 	bl	8000994 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000a78:	7cba      	ldrb	r2, [r7, #18]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	bf28      	it	cs
 8000a80:	4613      	movcs	r3, r2
 8000a82:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	e00b      	b.n	8000aa2 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	18d4      	adds	r4, r2, r3
 8000a90:	2100      	movs	r1, #0
 8000a92:	68f8      	ldr	r0, [r7, #12]
 8000a94:	f7ff ff64 	bl	8000960 <LoRa_read>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	7ffb      	ldrb	r3, [r7, #31]
 8000aa4:	697a      	ldr	r2, [r7, #20]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbef      	blt.n	8000a8a <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000aaa:	2105      	movs	r1, #5
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f7ff fd54 	bl	800055a <LoRa_gotoMode>
    return min;
 8000ab2:	7ffb      	ldrb	r3, [r7, #31]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3724      	adds	r7, #36	; 0x24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd90      	pop	{r4, r7, pc}

08000abc <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	// Check modulation mode
	read = LoRa_read(_LoRa, RegOpMode);
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff ff4a 	bl	8000960 <LoRa_read>
 8000acc:	4603      	mov	r3, r0
 8000ace:	73fb      	strb	r3, [r7, #15]
	if((read & 0x80) == 0x80) _LoRa->modulationMode = LORA_MODULATION;
 8000ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	da04      	bge.n	8000ae2 <LoRa_init+0x26>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2202      	movs	r2, #2
 8000adc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000ae0:	e012      	b.n	8000b08 <LoRa_init+0x4c>
	else {
		if((read & 0x60) == 0x00) _LoRa->modulationMode = FSK_MODULATION;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d104      	bne.n	8000af6 <LoRa_init+0x3a>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000af4:	e008      	b.n	8000b08 <LoRa_init+0x4c>
		else if((read & 0x60) == 0x20) _LoRa->modulationMode = OOK_MODULATION;
 8000af6:	7bfb      	ldrb	r3, [r7, #15]
 8000af8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000afc:	2b20      	cmp	r3, #32
 8000afe:	d103      	bne.n	8000b08 <LoRa_init+0x4c>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2201      	movs	r2, #1
 8000b04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(LoRa_isvalid(_LoRa)){
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff60 	bl	80009ce <LoRa_isvalid>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f000 80c8 	beq.w	8000ca6 <LoRa_init+0x1ea>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000b16:	2100      	movs	r1, #0
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff fd1e 	bl	800055a <LoRa_gotoMode>
			HAL_Delay(10);
 8000b1e:	200a      	movs	r0, #10
 8000b20:	f000 ff2a 	bl	8001978 <HAL_Delay>
			if( _LoRa->modulationMode == LORA_MODULATION) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d115      	bne.n	8000b5a <LoRa_init+0x9e>
				// turn on lora mode:
				read = LoRa_read(_LoRa, RegOpMode);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff15 	bl	8000960 <LoRa_read>
 8000b36:	4603      	mov	r3, r0
 8000b38:	73fb      	strb	r3, [r7, #15]
				HAL_Delay(10);
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f000 ff1c 	bl	8001978 <HAL_Delay>
				data = read | 0x80;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
 8000b42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b46:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegOpMode, data);
 8000b48:	7bbb      	ldrb	r3, [r7, #14]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ff20 	bl	8000994 <LoRa_write>
				HAL_Delay(100);
 8000b54:	2064      	movs	r0, #100	; 0x64
 8000b56:	f000 ff0f 	bl	8001978 <HAL_Delay>
			}

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a1b      	ldr	r3, [r3, #32]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff fdfa 	bl	800075a <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fe52 	bl	8000818 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fe5f 	bl	8000840 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000b82:	2223      	movs	r2, #35	; 0x23
 8000b84:	210c      	movs	r1, #12
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ff04 	bl	8000994 <LoRa_write>

		// Set Tx start condition
			if(_LoRa->modulationMode != LORA_MODULATION) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d004      	beq.n	8000ba0 <LoRa_init+0xe4>
				LoRa_write(_LoRa, RegFifoThresh, 0x80);
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	2135      	movs	r1, #53	; 0x35
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fefa 	bl	8000994 <LoRa_write>
			}

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff feb9 	bl	8000918 <LoRa_setTOMsb_setCRCon>
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d11f      	bne.n	8000bf0 <LoRa_init+0x134>
				LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff fdfe 	bl	80007ba <LoRa_setSpreadingFactor>
				// set Timeout Lsb:
				LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000bbe:	22ff      	movs	r2, #255	; 0xff
 8000bc0:	211f      	movs	r1, #31
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fee6 	bl	8000994 <LoRa_write>
				// set bandwidth, coding rate and expilicit mode:
				// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
				//       bits represent --> |   bandwidth   |     CR    |I/E|
				data = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73bb      	strb	r3, [r7, #14]
				data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4413      	add	r3, r2
 8000be2:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegModemConfig1, data);
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	461a      	mov	r2, r3
 8000be8:	211d      	movs	r1, #29
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff fed2 	bl	8000994 <LoRa_write>
			}

		// set preamble:
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d112      	bne.n	8000c20 <LoRa_init+0x164>
				LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bfe:	0a1b      	lsrs	r3, r3, #8
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	2120      	movs	r1, #32
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fec3 	bl	8000994 <LoRa_write>
				LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	2121      	movs	r1, #33	; 0x21
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff febb 	bl	8000994 <LoRa_write>
 8000c1e:	e004      	b.n	8000c2a <LoRa_init+0x16e>
			}
			else {
				LoRa_write(_LoRa, RegPreambleDetect, 0xAA);		// Preamble detect ON, preable detect size 2 bytes, detector tolerance 0x0A (default)
 8000c20:	22aa      	movs	r2, #170	; 0xaa
 8000c22:	211f      	movs	r1, #31
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff feb5 	bl	8000994 <LoRa_write>
			}

		// DIO mapping:   --> DIO: RxDone
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d110      	bne.n	8000c56 <LoRa_init+0x19a>
				read = LoRa_read(_LoRa, RegDioMapping1);
 8000c34:	2140      	movs	r1, #64	; 0x40
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff fe92 	bl	8000960 <LoRa_read>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c46:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fea0 	bl	8000994 <LoRa_write>
 8000c54:	e00f      	b.n	8000c76 <LoRa_init+0x1ba>
			}
			else {
				// DIO2: RxDone
				read = LoRa_read(_LoRa, RegDioMapping1);
 8000c56:	2140      	movs	r1, #64	; 0x40
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff fe81 	bl	8000960 <LoRa_read>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 8000c62:	7bfb      	ldrb	r3, [r7, #15]
 8000c64:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c68:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fe8f 	bl	8000994 <LoRa_write>
			}


		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c76:	2101      	movs	r1, #1
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff fc6e 	bl	800055a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f000 fe77 	bl	8001978 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000c8a:	2142      	movs	r1, #66	; 0x42
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fe67 	bl	8000960 <LoRa_read>
 8000c92:	4603      	mov	r3, r0
 8000c94:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000c96:	7bfb      	ldrb	r3, [r7, #15]
 8000c98:	2b12      	cmp	r3, #18
 8000c9a:	d101      	bne.n	8000ca0 <LoRa_init+0x1e4>
				return LORA_OK;
 8000c9c:	23c8      	movs	r3, #200	; 0xc8
 8000c9e:	e004      	b.n	8000caa <LoRa_init+0x1ee>
			else
				return LORA_NOT_FOUND;
 8000ca0:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000ca4:	e001      	b.n	8000caa <LoRa_init+0x1ee>
	}
	else {
		return LORA_UNAVAILABLE;
 8000ca6:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <LoRa_received_bytes>:
		description : check number of bytes available in FIFO RX buffer
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : 8 bit integer, number of bytes available to read from FIFO RX buffer
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_received_bytes(LoRa* _LoRa) {
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	return LoRa_read(_LoRa, RegRxNbBytes);
 8000cba:	2113      	movs	r1, #19
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff fe4f 	bl	8000960 <LoRa_read>
 8000cc2:	4603      	mov	r3, r0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <Blocking_LED_Blink>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
LoRa LoRaClass;
uint8_t RF_available_bytes = 0;

void Blocking_LED_Blink(uint8_t freq) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
	while(1) {
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2104      	movs	r1, #4
 8000cda:	480c      	ldr	r0, [pc, #48]	; (8000d0c <Blocking_LED_Blink+0x40>)
 8000cdc:	f001 fc9a 	bl	8002614 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fe44 	bl	8001978 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <Blocking_LED_Blink+0x40>)
 8000cf6:	f001 fc8d 	bl	8002614 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8000cfa:	79fb      	ldrb	r3, [r7, #7]
 8000cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d00:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 fe37 	bl	8001978 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000d0a:	e7e4      	b.n	8000cd6 <Blocking_LED_Blink+0xa>
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LoRaClass.DIO0_pin){
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d1c:	8a9b      	ldrh	r3, [r3, #20]
 8000d1e:	88fa      	ldrh	r2, [r7, #6]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d106      	bne.n	8000d32 <HAL_GPIO_EXTI_Callback+0x22>
		RF_available_bytes = LoRa_received_bytes(&LoRaClass);
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <HAL_GPIO_EXTI_Callback+0x2c>)
 8000d26:	f7ff ffc4 	bl	8000cb2 <LoRa_received_bytes>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_GPIO_EXTI_Callback+0x30>)
 8000d30:	701a      	strb	r2, [r3, #0]
	}
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000040c 	.word	0x2000040c
 8000d40:	2000043c 	.word	0x2000043c

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8000d4a:	4b43      	ldr	r3, [pc, #268]	; (8000e58 <main+0x114>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 faba 	bl	80012c8 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fd9e 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f88c 	bl	8000e74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f9ec 	bl	8001138 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d60:	f000 f976 	bl	8001050 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d64:	f000 f99e 	bl	80010a4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000d68:	f000 f8ee 	bl	8000f48 <MX_SPI1_Init>
  MX_DMA_Init();
 8000d6c:	f000 f9c4 	bl	80010f8 <MX_DMA_Init>
  MX_TIM2_Init();
 8000d70:	f000 f920 	bl	8000fb4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d74:	f009 f9ac 	bl	800a0d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // LoRa Class definitions
  LoRaClass = newLoRa();
 8000d78:	4c38      	ldr	r4, [pc, #224]	; (8000e5c <main+0x118>)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fba5 	bl	80004cc <newLoRa>
 8000d82:	4625      	mov	r5, r4
 8000d84:	463c      	mov	r4, r7
 8000d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d92:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  LoRaClass.hSPIx                 = RF_SPI;
 8000d96:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <main+0x11c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a30      	ldr	r2, [pc, #192]	; (8000e5c <main+0x118>)
 8000d9c:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <main+0x118>)
 8000da0:	4a30      	ldr	r2, [pc, #192]	; (8000e64 <main+0x120>)
 8000da2:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 8000da4:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <main+0x118>)
 8000da6:	2210      	movs	r2, #16
 8000da8:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <main+0x118>)
 8000dac:	4a2e      	ldr	r2, [pc, #184]	; (8000e68 <main+0x124>)
 8000dae:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 8000db0:	4b2a      	ldr	r3, [pc, #168]	; (8000e5c <main+0x118>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO0_RF_GPIO_Port;
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <main+0x118>)
 8000db8:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <main+0x124>)
 8000dba:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO0_RF_Pin;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <main+0x118>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <main+0x118>)
 8000dc4:	f240 3293 	movw	r2, #915	; 0x393
 8000dc8:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <main+0x118>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8000dd2:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <main+0x118>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <main+0x118>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <main+0x118>)
 8000de4:	22ff      	movs	r2, #255	; 0xff
 8000de6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <main+0x118>)
 8000dec:	2278      	movs	r2, #120	; 0x78
 8000dee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 10;		  					// default = 8;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <main+0x118>)
 8000df4:	220a      	movs	r2, #10
 8000df6:	851a      	strh	r2, [r3, #40]	; 0x28
  LoRaClass.preamble			  = LORA_MODULATION;
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <main+0x118>)
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	851a      	strh	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2110      	movs	r1, #16
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <main+0x120>)
 8000e04:	f001 fc06 	bl	8002614 <HAL_GPIO_WritePin>

  LoRa_reset(&LoRaClass);
 8000e08:	4814      	ldr	r0, [pc, #80]	; (8000e5c <main+0x118>)
 8000e0a:	f7ff fb88 	bl	800051e <LoRa_reset>
  uint32_t result = LoRa_init(&LoRaClass);
 8000e0e:	4813      	ldr	r0, [pc, #76]	; (8000e5c <main+0x118>)
 8000e10:	f7ff fe54 	bl	8000abc <LoRa_init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	637b      	str	r3, [r7, #52]	; 0x34

  if(result == LORA_NOT_FOUND) {
 8000e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e1a:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8000e1e:	d103      	bne.n	8000e28 <main+0xe4>
	  Blocking_LED_Blink(1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff ff53 	bl	8000ccc <Blocking_LED_Blink>
 8000e26:	e007      	b.n	8000e38 <main+0xf4>
  }
  else if(result == LORA_UNAVAILABLE) {
 8000e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e2a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d102      	bne.n	8000e38 <main+0xf4>
	  Blocking_LED_Blink(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f7ff ff4a 	bl	8000ccc <Blocking_LED_Blink>
  }
  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8000e38:	4808      	ldr	r0, [pc, #32]	; (8000e5c <main+0x118>)
 8000e3a:	f7ff fdd3 	bl	80009e4 <LoRa_startReceiving>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	if(RF_available_bytes) {
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <main+0x128>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0fb      	beq.n	8000e3e <main+0xfa>
		// Read from RF buffer
		LoRa_receive(&LoRaClass, RF_RX_Buff, RF_available_bytes);
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <main+0x128>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	4908      	ldr	r1, [pc, #32]	; (8000e70 <main+0x12c>)
 8000e4e:	4803      	ldr	r0, [pc, #12]	; (8000e5c <main+0x118>)
 8000e50:	f7ff fdd4 	bl	80009fc <LoRa_receive>
	if(RF_available_bytes) {
 8000e54:	e7f3      	b.n	8000e3e <main+0xfa>
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	2000040c 	.word	0x2000040c
 8000e60:	20000004 	.word	0x20000004
 8000e64:	40020000 	.word	0x40020000
 8000e68:	40020400 	.word	0x40020400
 8000e6c:	2000043c 	.word	0x2000043c
 8000e70:	2000030c 	.word	0x2000030c

08000e74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7a:	f107 0320 	add.w	r3, r7, #32
 8000e7e:	2230      	movs	r2, #48	; 0x30
 8000e80:	2100      	movs	r1, #0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f009 fe44 	bl	800ab10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <SystemClock_Config+0xcc>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a27      	ldr	r2, [pc, #156]	; (8000f40 <SystemClock_Config+0xcc>)
 8000ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <SystemClock_Config+0xcc>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <SystemClock_Config+0xd0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a21      	ldr	r2, [pc, #132]	; (8000f44 <SystemClock_Config+0xd0>)
 8000ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <SystemClock_Config+0xd0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eda:	2302      	movs	r3, #2
 8000edc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ee8:	23a8      	movs	r3, #168	; 0xa8
 8000eea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef4:	f107 0320 	add.w	r3, r7, #32
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 fe3b 	bl	8003b74 <HAL_RCC_OscConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f04:	f000 f9da 	bl	80012bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f08:	230f      	movs	r3, #15
 8000f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2105      	movs	r1, #5
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 f89c 	bl	8004064 <HAL_RCC_ClockConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f32:	f000 f9c3 	bl	80012bc <Error_Handler>
  }
}
 8000f36:	bf00      	nop
 8000f38:	3750      	adds	r7, #80	; 0x50
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40007000 	.word	0x40007000

08000f48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f4e:	4a18      	ldr	r2, [pc, #96]	; (8000fb0 <MX_SPI1_Init+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f7c:	2230      	movs	r2, #48	; 0x30
 8000f7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f94:	220a      	movs	r2, #10
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_SPI1_Init+0x64>)
 8000f9a:	f003 fa43 	bl	8004424 <HAL_SPI_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fa4:	f000 f98a 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000184 	.word	0x20000184
 8000fb0:	40013000 	.word	0x40013000

08000fb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <MX_TIM2_Init+0x98>)
 8000fd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2500;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_TIM2_Init+0x98>)
 8000fda:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000fde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_TIM2_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_TIM2_Init+0x98>)
 8000fe8:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8000fec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <MX_TIM2_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_TIM2_Init+0x98>)
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ffa:	4814      	ldr	r0, [pc, #80]	; (800104c <MX_TIM2_Init+0x98>)
 8000ffc:	f003 ffc8 	bl	8004f90 <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001006:	f000 f959 	bl	80012bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4619      	mov	r1, r3
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <MX_TIM2_Init+0x98>)
 8001018:	f004 f911 	bl	800523e <HAL_TIM_ConfigClockSource>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001022:	f000 f94b 	bl	80012bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <MX_TIM2_Init+0x98>)
 8001034:	f004 fb36 	bl	80056a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800103e:	f000 f93d 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200001dc 	.word	0x200001dc

08001050 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <MX_USART1_UART_Init+0x50>)
 8001058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_USART1_UART_Init+0x4c>)
 800105c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_USART1_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_USART1_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_USART1_UART_Init+0x4c>)
 8001088:	f004 fb9c 	bl	80057c4 <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001092:	f000 f913 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000224 	.word	0x20000224
 80010a0:	40011000 	.word	0x40011000

080010a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_USART2_UART_Init+0x50>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010b0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80010b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010d4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010dc:	4804      	ldr	r0, [pc, #16]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010de:	f004 fb71 	bl	80057c4 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80010e8:	f000 f8e8 	bl	80012bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000268 	.word	0x20000268
 80010f4:	40004400 	.word	0x40004400

080010f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_DMA_Init+0x3c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <MX_DMA_Init+0x3c>)
 8001108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_DMA_Init+0x3c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	203a      	movs	r0, #58	; 0x3a
 8001120:	f000 fd29 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001124:	203a      	movs	r0, #58	; 0x3a
 8001126:	f000 fd42 	bl	8001bae <HAL_NVIC_EnableIRQ>

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b56      	ldr	r3, [pc, #344]	; (80012ac <MX_GPIO_Init+0x174>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a55      	ldr	r2, [pc, #340]	; (80012ac <MX_GPIO_Init+0x174>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b53      	ldr	r3, [pc, #332]	; (80012ac <MX_GPIO_Init+0x174>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <MX_GPIO_Init+0x174>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <MX_GPIO_Init+0x174>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <MX_GPIO_Init+0x174>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <MX_GPIO_Init+0x174>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a47      	ldr	r2, [pc, #284]	; (80012ac <MX_GPIO_Init+0x174>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b45      	ldr	r3, [pc, #276]	; (80012ac <MX_GPIO_Init+0x174>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <MX_GPIO_Init+0x174>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a40      	ldr	r2, [pc, #256]	; (80012ac <MX_GPIO_Init+0x174>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <MX_GPIO_Init+0x174>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b3a      	ldr	r3, [pc, #232]	; (80012ac <MX_GPIO_Init+0x174>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a39      	ldr	r2, [pc, #228]	; (80012ac <MX_GPIO_Init+0x174>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b37      	ldr	r3, [pc, #220]	; (80012ac <MX_GPIO_Init+0x174>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2110      	movs	r1, #16
 80011de:	4834      	ldr	r0, [pc, #208]	; (80012b0 <MX_GPIO_Init+0x178>)
 80011e0:	f001 fa18 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2101      	movs	r1, #1
 80011e8:	4832      	ldr	r0, [pc, #200]	; (80012b4 <MX_GPIO_Init+0x17c>)
 80011ea:	f001 fa13 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2104      	movs	r1, #4
 80011f2:	4831      	ldr	r0, [pc, #196]	; (80012b8 <MX_GPIO_Init+0x180>)
 80011f4:	f001 fa0e 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_NSS_Pin;
 80011f8:	2310      	movs	r3, #16
 80011fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	4828      	ldr	r0, [pc, #160]	; (80012b0 <MX_GPIO_Init+0x178>)
 8001210:	f001 f864 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 8001214:	2301      	movs	r3, #1
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001218:	2301      	movs	r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4822      	ldr	r0, [pc, #136]	; (80012b4 <MX_GPIO_Init+0x17c>)
 800122c:	f001 f856 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 8001230:	f643 4302 	movw	r3, #15362	; 0x3c02
 8001234:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001236:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	481b      	ldr	r0, [pc, #108]	; (80012b4 <MX_GPIO_Init+0x17c>)
 8001248:	f001 f848 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 800124c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001252:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	4813      	ldr	r0, [pc, #76]	; (80012b0 <MX_GPIO_Init+0x178>)
 8001264:	f001 f83a 	bl	80022dc <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 8001268:	2304      	movs	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	480e      	ldr	r0, [pc, #56]	; (80012b8 <MX_GPIO_Init+0x180>)
 8001280:	f001 f82c 	bl	80022dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2100      	movs	r1, #0
 8001288:	2007      	movs	r0, #7
 800128a:	f000 fc74 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800128e:	2007      	movs	r0, #7
 8001290:	f000 fc8d 	bl	8001bae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2028      	movs	r0, #40	; 0x28
 800129a:	f000 fc6c 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800129e:	2028      	movs	r0, #40	; 0x28
 80012a0:	f000 fc85 	bl	8001bae <HAL_NVIC_EnableIRQ>

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020c00 	.word	0x40020c00

080012bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c0:	b672      	cpsid	i
}
 80012c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <Error_Handler+0x8>
	...

080012c8 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <RetargetInit+0x28>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <RetargetInit+0x2c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6898      	ldr	r0, [r3, #8]
 80012dc:	2300      	movs	r3, #0
 80012de:	2202      	movs	r2, #2
 80012e0:	2100      	movs	r1, #0
 80012e2:	f009 fc1d 	bl	800ab20 <setvbuf>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000440 	.word	0x20000440
 80012f4:	20000104 	.word	0x20000104

080012f8 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d002      	beq.n	8001310 <_write+0x18>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d111      	bne.n	8001334 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <_write+0x54>)
 8001312:	6818      	ldr	r0, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	b29a      	uxth	r2, r3
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	f004 fa9e 	bl	800585e <HAL_UART_Transmit>
 8001322:	4603      	mov	r3, r0
 8001324:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <_write+0x38>
      return len;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	e008      	b.n	8001342 <_write+0x4a>
    else
      return EIO;
 8001330:	2305      	movs	r3, #5
 8001332:	e006      	b.n	8001342 <_write+0x4a>
  }
  errno = EBADF;
 8001334:	f009 fbc2 	bl	800aabc <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	2209      	movs	r2, #9
 800133c:	601a      	str	r2, [r3, #0]
  return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000440 	.word	0x20000440

08001350 <_close>:

int _close(int fd) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	db04      	blt.n	8001368 <_close+0x18>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b02      	cmp	r3, #2
 8001362:	dc01      	bgt.n	8001368 <_close+0x18>
    return 0;
 8001364:	2300      	movs	r3, #0
 8001366:	e006      	b.n	8001376 <_close+0x26>

  errno = EBADF;
 8001368:	f009 fba8 	bl	800aabc <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	2209      	movs	r2, #9
 8001370:	601a      	str	r2, [r3, #0]
  return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800137e:	b580      	push	{r7, lr}
 8001380:	b084      	sub	sp, #16
 8001382:	af00      	add	r7, sp, #0
 8001384:	60f8      	str	r0, [r7, #12]
 8001386:	60b9      	str	r1, [r7, #8]
 8001388:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800138a:	f009 fb97 	bl	800aabc <__errno>
 800138e:	4603      	mov	r3, r0
 8001390:	2209      	movs	r2, #9
 8001392:	601a      	str	r2, [r3, #0]
  return -1;
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_read>:

int _read(int fd, char* ptr, int len) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d110      	bne.n	80013d4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <_read+0x4c>)
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	2201      	movs	r2, #1
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	f004 fae0 	bl	8005982 <HAL_UART_Receive>
 80013c2:	4603      	mov	r3, r0
 80013c4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <_read+0x30>
      return 1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e008      	b.n	80013e2 <_read+0x42>
    else
      return EIO;
 80013d0:	2305      	movs	r3, #5
 80013d2:	e006      	b.n	80013e2 <_read+0x42>
  }
  errno = EBADF;
 80013d4:	f009 fb72 	bl	800aabc <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	2209      	movs	r2, #9
 80013dc:	601a      	str	r2, [r3, #0]
  return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000440 	.word	0x20000440

080013f0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db08      	blt.n	8001412 <_fstat+0x22>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b02      	cmp	r3, #2
 8001404:	dc05      	bgt.n	8001412 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800140c:	605a      	str	r2, [r3, #4]
    return 0;
 800140e:	2300      	movs	r3, #0
 8001410:	e005      	b.n	800141e <_fstat+0x2e>
  }

  errno = EBADF;
 8001412:	f009 fb53 	bl	800aabc <__errno>
 8001416:	4603      	mov	r3, r0
 8001418:	2209      	movs	r2, #9
 800141a:	601a      	str	r2, [r3, #0]
  return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_MspInit+0x4c>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_MspInit+0x4c>)
 8001438:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_MspInit+0x4c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x4c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x4c>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x4c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a19      	ldr	r2, [pc, #100]	; (80014fc <HAL_SPI_MspInit+0x84>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d12b      	bne.n	80014f2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a17      	ldr	r2, [pc, #92]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a10      	ldr	r2, [pc, #64]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_SPI_MspInit+0x88>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014d2:	23e0      	movs	r3, #224	; 0xe0
 80014d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014e2:	2305      	movs	r3, #5
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <HAL_SPI_MspInit+0x8c>)
 80014ee:	f000 fef5 	bl	80022dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014f2:	bf00      	nop
 80014f4:	3728      	adds	r7, #40	; 0x28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40013000 	.word	0x40013000
 8001500:	40023800 	.word	0x40023800
 8001504:	40020000 	.word	0x40020000

08001508 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001518:	d115      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6413      	str	r3, [r2, #64]	; 0x40
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_TIM_Base_MspInit+0x48>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2102      	movs	r1, #2
 800153a:	201c      	movs	r0, #28
 800153c:	f000 fb1b 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001540:	201c      	movs	r0, #28
 8001542:	f000 fb34 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08c      	sub	sp, #48	; 0x30
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a52      	ldr	r2, [pc, #328]	; (80016bc <HAL_UART_MspInit+0x168>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d164      	bne.n	8001640 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	4b51      	ldr	r3, [pc, #324]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a50      	ldr	r2, [pc, #320]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b4e      	ldr	r3, [pc, #312]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	61bb      	str	r3, [r7, #24]
 8001590:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	4b4a      	ldr	r3, [pc, #296]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a49      	ldr	r2, [pc, #292]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015ae:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b4:	2302      	movs	r3, #2
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015bc:	2303      	movs	r3, #3
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c0:	2307      	movs	r3, #7
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	483e      	ldr	r0, [pc, #248]	; (80016c4 <HAL_UART_MspInit+0x170>)
 80015cc:	f000 fe86 	bl	80022dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80015d0:	4b3d      	ldr	r3, [pc, #244]	; (80016c8 <HAL_UART_MspInit+0x174>)
 80015d2:	4a3e      	ldr	r2, [pc, #248]	; (80016cc <HAL_UART_MspInit+0x178>)
 80015d4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80015d6:	4b3c      	ldr	r3, [pc, #240]	; (80016c8 <HAL_UART_MspInit+0x174>)
 80015d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <HAL_UART_MspInit+0x174>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e4:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <HAL_UART_MspInit+0x174>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <HAL_UART_MspInit+0x174>)
 80015ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015f2:	4b35      	ldr	r3, [pc, #212]	; (80016c8 <HAL_UART_MspInit+0x174>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f8:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <HAL_UART_MspInit+0x174>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80015fe:	4b32      	ldr	r3, [pc, #200]	; (80016c8 <HAL_UART_MspInit+0x174>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001604:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <HAL_UART_MspInit+0x174>)
 8001606:	2200      	movs	r2, #0
 8001608:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_UART_MspInit+0x174>)
 800160c:	2204      	movs	r2, #4
 800160e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <HAL_UART_MspInit+0x174>)
 8001612:	2201      	movs	r2, #1
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001616:	4b2c      	ldr	r3, [pc, #176]	; (80016c8 <HAL_UART_MspInit+0x174>)
 8001618:	2200      	movs	r2, #0
 800161a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800161c:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <HAL_UART_MspInit+0x174>)
 800161e:	2200      	movs	r2, #0
 8001620:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001622:	4829      	ldr	r0, [pc, #164]	; (80016c8 <HAL_UART_MspInit+0x174>)
 8001624:	f000 fade 	bl	8001be4 <HAL_DMA_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800162e:	f7ff fe45 	bl	80012bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_UART_MspInit+0x174>)
 8001636:	639a      	str	r2, [r3, #56]	; 0x38
 8001638:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <HAL_UART_MspInit+0x174>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800163e:	e038      	b.n	80016b2 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_UART_MspInit+0x17c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d133      	bne.n	80016b2 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_UART_MspInit+0x16c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001682:	230f      	movs	r3, #15
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001692:	2307      	movs	r3, #7
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 031c 	add.w	r3, r7, #28
 800169a:	4619      	mov	r1, r3
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <HAL_UART_MspInit+0x170>)
 800169e:	f000 fe1d 	bl	80022dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2101      	movs	r1, #1
 80016a6:	2026      	movs	r0, #38	; 0x26
 80016a8:	f000 fa65 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016ac:	2026      	movs	r0, #38	; 0x26
 80016ae:	f000 fa7e 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	; 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	200002ac 	.word	0x200002ac
 80016cc:	40026440 	.word	0x40026440
 80016d0:	40004400 	.word	0x40004400

080016d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <NMI_Handler+0x4>

080016da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <HardFault_Handler+0x4>

080016e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <MemManage_Handler+0x4>

080016e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001720:	f000 f90a 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}

08001728 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO0_RF_Pin);
 800172c:	2002      	movs	r0, #2
 800172e:	f000 ff8b 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <TIM2_IRQHandler+0x10>)
 800173e:	f003 fc76 	bl	800502e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200001dc 	.word	0x200001dc

0800174c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <USART2_IRQHandler+0x10>)
 8001752:	f004 f9b9 	bl	8005ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000268 	.word	0x20000268

08001760 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO1_RF_Pin);
 8001764:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001768:	f000 ff6e 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO2_RF_Pin);
 800176c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001770:	f000 ff6a 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO3_RF_Pin);
 8001774:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001778:	f000 ff66 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO4_RF_Pin);
 800177c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001780:	f000 ff62 	bl	8002648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <DMA2_Stream2_IRQHandler+0x10>)
 800178e:	f000 fb69 	bl	8001e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002ac 	.word	0x200002ac

0800179c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <OTG_HS_IRQHandler+0x10>)
 80017a2:	f001 f8b9 	bl	8002918 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000192c 	.word	0x2000192c

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f009 f96c 	bl	800aabc <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20020000 	.word	0x20020000
 8001810:	00000400 	.word	0x00000400
 8001814:	20000444 	.word	0x20000444
 8001818:	20002068 	.word	0x20002068

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001878 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001846:	490e      	ldr	r1, [pc, #56]	; (8001880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800185c:	4c0b      	ldr	r4, [pc, #44]	; (800188c <LoopFillZerobss+0x26>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800186a:	f7ff ffd7 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f009 f92b 	bl	800aac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7ff fa67 	bl	8000d44 <main>
  bx  lr    
 8001876:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001884:	0800b4a0 	.word	0x0800b4a0
  ldr r2, =_sbss
 8001888:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800188c:	20002068 	.word	0x20002068

08001890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_Init+0x40>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_Init+0x40>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x40>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f94f 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fdae 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f967 	bl	8001bca <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f92f 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000008 	.word	0x20000008
 8001930:	20000010 	.word	0x20000010
 8001934:	2000000c 	.word	0x2000000c

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000010 	.word	0x20000010
 800195c:	20000448 	.word	0x20000448

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000448 	.word	0x20000448

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000010 	.word	0x20000010

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff3e 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff31 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff feb6 	bl	8001960 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e099      	b.n	8001d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c20:	e00f      	b.n	8001c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c22:	f7ff fe9d 	bl	8001960 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d908      	bls.n	8001c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e078      	b.n	8001d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1e8      	bne.n	8001c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_DMA_Init+0x158>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d107      	bne.n	8001cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f023 0307 	bic.w	r3, r3, #7
 8001cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d117      	bne.n	8001d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00e      	beq.n	8001d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fa7b 	bl	80021e4 <DMA_CheckFifoParam>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d008      	beq.n	8001d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2240      	movs	r2, #64	; 0x40
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d02:	2301      	movs	r3, #1
 8001d04:	e016      	b.n	8001d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fa32 	bl	8002178 <DMA_CalcBaseAndBitshift>
 8001d14:	4603      	mov	r3, r0
 8001d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	223f      	movs	r2, #63	; 0x3f
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	f010803f 	.word	0xf010803f

08001d40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d4e:	f7ff fe07 	bl	8001960 <HAL_GetTick>
 8001d52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d008      	beq.n	8001d72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2280      	movs	r2, #128	; 0x80
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e052      	b.n	8001e18 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0216 	bic.w	r2, r2, #22
 8001d80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d103      	bne.n	8001da2 <HAL_DMA_Abort+0x62>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0208 	bic.w	r2, r2, #8
 8001db0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc2:	e013      	b.n	8001dec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dc4:	f7ff fdcc 	bl	8001960 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d90c      	bls.n	8001dec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2203      	movs	r2, #3
 8001ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e015      	b.n	8001e18 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1e4      	bne.n	8001dc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	223f      	movs	r2, #63	; 0x3f
 8001e00:	409a      	lsls	r2, r3
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d004      	beq.n	8001e3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00c      	b.n	8001e58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2205      	movs	r2, #5
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e70:	4b8e      	ldr	r3, [pc, #568]	; (80020ac <HAL_DMA_IRQHandler+0x248>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a8e      	ldr	r2, [pc, #568]	; (80020b0 <HAL_DMA_IRQHandler+0x24c>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0a9b      	lsrs	r3, r3, #10
 8001e7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8e:	2208      	movs	r2, #8
 8001e90:	409a      	lsls	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01a      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d013      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0204 	bic.w	r2, r2, #4
 8001eb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	2208      	movs	r2, #8
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d012      	beq.n	8001f06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00b      	beq.n	8001f06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efe:	f043 0202 	orr.w	r2, r3, #2
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	2204      	movs	r2, #4
 8001f0c:	409a      	lsls	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d012      	beq.n	8001f3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	2204      	movs	r2, #4
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	f043 0204 	orr.w	r2, r3, #4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2210      	movs	r2, #16
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d043      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d03c      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5e:	2210      	movs	r2, #16
 8001f60:	409a      	lsls	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d018      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d108      	bne.n	8001f94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d024      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
 8001f92:	e01f      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d01b      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
 8001fa4:	e016      	b.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 0208 	bic.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	2220      	movs	r2, #32
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 808f 	beq.w	8002104 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 8087 	beq.w	8002104 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b05      	cmp	r3, #5
 800200c:	d136      	bne.n	800207c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0216 	bic.w	r2, r2, #22
 800201c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800202c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_DMA_IRQHandler+0x1da>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0208 	bic.w	r2, r2, #8
 800204c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002052:	223f      	movs	r2, #63	; 0x3f
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206e:	2b00      	cmp	r3, #0
 8002070:	d07e      	beq.n	8002170 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	4798      	blx	r3
        }
        return;
 800207a:	e079      	b.n	8002170 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d01d      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10d      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	2b00      	cmp	r3, #0
 800209e:	d031      	beq.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	4798      	blx	r3
 80020a8:	e02c      	b.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
 80020aa:	bf00      	nop
 80020ac:	20000008 	.word	0x20000008
 80020b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d023      	beq.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
 80020c4:	e01e      	b.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10f      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0210 	bic.w	r2, r2, #16
 80020e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	2b00      	cmp	r3, #0
 800210a:	d032      	beq.n	8002172 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d022      	beq.n	800215e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2205      	movs	r2, #5
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	429a      	cmp	r2, r3
 800213a:	d307      	bcc.n	800214c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f2      	bne.n	8002130 <HAL_DMA_IRQHandler+0x2cc>
 800214a:	e000      	b.n	800214e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800214c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d005      	beq.n	8002172 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
 800216e:	e000      	b.n	8002172 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002170:	bf00      	nop
    }
  }
}
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3b10      	subs	r3, #16
 8002188:	4a14      	ldr	r2, [pc, #80]	; (80021dc <DMA_CalcBaseAndBitshift+0x64>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4413      	add	r3, r2
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	d909      	bls.n	80021ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	1d1a      	adds	r2, r3, #4
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	659a      	str	r2, [r3, #88]	; 0x58
 80021b8:	e007      	b.n	80021ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021c2:	f023 0303 	bic.w	r3, r3, #3
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	aaaaaaab 	.word	0xaaaaaaab
 80021e0:	0800b424 	.word	0x0800b424

080021e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d11f      	bne.n	800223e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d856      	bhi.n	80022b2 <DMA_CheckFifoParam+0xce>
 8002204:	a201      	add	r2, pc, #4	; (adr r2, 800220c <DMA_CheckFifoParam+0x28>)
 8002206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220a:	bf00      	nop
 800220c:	0800221d 	.word	0x0800221d
 8002210:	0800222f 	.word	0x0800222f
 8002214:	0800221d 	.word	0x0800221d
 8002218:	080022b3 	.word	0x080022b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d046      	beq.n	80022b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800222c:	e043      	b.n	80022b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002236:	d140      	bne.n	80022ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223c:	e03d      	b.n	80022ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002246:	d121      	bne.n	800228c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b03      	cmp	r3, #3
 800224c:	d837      	bhi.n	80022be <DMA_CheckFifoParam+0xda>
 800224e:	a201      	add	r2, pc, #4	; (adr r2, 8002254 <DMA_CheckFifoParam+0x70>)
 8002250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002254:	08002265 	.word	0x08002265
 8002258:	0800226b 	.word	0x0800226b
 800225c:	08002265 	.word	0x08002265
 8002260:	0800227d 	.word	0x0800227d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
      break;
 8002268:	e030      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d025      	beq.n	80022c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800227a:	e022      	b.n	80022c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002284:	d11f      	bne.n	80022c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800228a:	e01c      	b.n	80022c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d903      	bls.n	800229a <DMA_CheckFifoParam+0xb6>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d003      	beq.n	80022a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002298:	e018      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
      break;
 800229e:	e015      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      break;
 80022b0:	e00b      	b.n	80022ca <DMA_CheckFifoParam+0xe6>
      break;
 80022b2:	bf00      	nop
 80022b4:	e00a      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
 80022b8:	e008      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e006      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022be:	bf00      	nop
 80022c0:	e004      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022c2:	bf00      	nop
 80022c4:	e002      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;   
 80022c6:	bf00      	nop
 80022c8:	e000      	b.n	80022cc <DMA_CheckFifoParam+0xe8>
      break;
 80022ca:	bf00      	nop
    }
  } 
  
  return status; 
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop

080022dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e16b      	b.n	80025d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f8:	2201      	movs	r2, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	f040 815a 	bne.w	80025ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d005      	beq.n	800232e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232a:	2b02      	cmp	r3, #2
 800232c:	d130      	bne.n	8002390 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 0201 	and.w	r2, r3, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b03      	cmp	r3, #3
 800239a:	d017      	beq.n	80023cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	2203      	movs	r2, #3
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	689a      	ldr	r2, [r3, #8]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d123      	bne.n	8002420 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	08da      	lsrs	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3208      	adds	r2, #8
 80023e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	08da      	lsrs	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3208      	adds	r2, #8
 800241a:	69b9      	ldr	r1, [r7, #24]
 800241c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	2203      	movs	r2, #3
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0203 	and.w	r2, r3, #3
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80b4 	beq.w	80025ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	4b60      	ldr	r3, [pc, #384]	; (80025e8 <HAL_GPIO_Init+0x30c>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	4a5f      	ldr	r2, [pc, #380]	; (80025e8 <HAL_GPIO_Init+0x30c>)
 800246c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002470:	6453      	str	r3, [r2, #68]	; 0x44
 8002472:	4b5d      	ldr	r3, [pc, #372]	; (80025e8 <HAL_GPIO_Init+0x30c>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800247e:	4a5b      	ldr	r2, [pc, #364]	; (80025ec <HAL_GPIO_Init+0x310>)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_GPIO_Init+0x314>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d02b      	beq.n	8002502 <HAL_GPIO_Init+0x226>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <HAL_GPIO_Init+0x318>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d025      	beq.n	80024fe <HAL_GPIO_Init+0x222>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a50      	ldr	r2, [pc, #320]	; (80025f8 <HAL_GPIO_Init+0x31c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01f      	beq.n	80024fa <HAL_GPIO_Init+0x21e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4f      	ldr	r2, [pc, #316]	; (80025fc <HAL_GPIO_Init+0x320>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d019      	beq.n	80024f6 <HAL_GPIO_Init+0x21a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4e      	ldr	r2, [pc, #312]	; (8002600 <HAL_GPIO_Init+0x324>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d013      	beq.n	80024f2 <HAL_GPIO_Init+0x216>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4d      	ldr	r2, [pc, #308]	; (8002604 <HAL_GPIO_Init+0x328>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d00d      	beq.n	80024ee <HAL_GPIO_Init+0x212>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4c      	ldr	r2, [pc, #304]	; (8002608 <HAL_GPIO_Init+0x32c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d007      	beq.n	80024ea <HAL_GPIO_Init+0x20e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4b      	ldr	r2, [pc, #300]	; (800260c <HAL_GPIO_Init+0x330>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <HAL_GPIO_Init+0x20a>
 80024e2:	2307      	movs	r3, #7
 80024e4:	e00e      	b.n	8002504 <HAL_GPIO_Init+0x228>
 80024e6:	2308      	movs	r3, #8
 80024e8:	e00c      	b.n	8002504 <HAL_GPIO_Init+0x228>
 80024ea:	2306      	movs	r3, #6
 80024ec:	e00a      	b.n	8002504 <HAL_GPIO_Init+0x228>
 80024ee:	2305      	movs	r3, #5
 80024f0:	e008      	b.n	8002504 <HAL_GPIO_Init+0x228>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e006      	b.n	8002504 <HAL_GPIO_Init+0x228>
 80024f6:	2303      	movs	r3, #3
 80024f8:	e004      	b.n	8002504 <HAL_GPIO_Init+0x228>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e002      	b.n	8002504 <HAL_GPIO_Init+0x228>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_GPIO_Init+0x228>
 8002502:	2300      	movs	r3, #0
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	f002 0203 	and.w	r2, r2, #3
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	4093      	lsls	r3, r2
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002514:	4935      	ldr	r1, [pc, #212]	; (80025ec <HAL_GPIO_Init+0x310>)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	089b      	lsrs	r3, r3, #2
 800251a:	3302      	adds	r3, #2
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_GPIO_Init+0x334>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002546:	4a32      	ldr	r2, [pc, #200]	; (8002610 <HAL_GPIO_Init+0x334>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800254c:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_GPIO_Init+0x334>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002570:	4a27      	ldr	r2, [pc, #156]	; (8002610 <HAL_GPIO_Init+0x334>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_GPIO_Init+0x334>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259a:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_GPIO_Init+0x334>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_GPIO_Init+0x334>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c4:	4a12      	ldr	r2, [pc, #72]	; (8002610 <HAL_GPIO_Init+0x334>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b0f      	cmp	r3, #15
 80025d4:	f67f ae90 	bls.w	80022f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d8:	bf00      	nop
 80025da:	bf00      	nop
 80025dc:	3724      	adds	r7, #36	; 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40013800 	.word	0x40013800
 80025f0:	40020000 	.word	0x40020000
 80025f4:	40020400 	.word	0x40020400
 80025f8:	40020800 	.word	0x40020800
 80025fc:	40020c00 	.word	0x40020c00
 8002600:	40021000 	.word	0x40021000
 8002604:	40021400 	.word	0x40021400
 8002608:	40021800 	.word	0x40021800
 800260c:	40021c00 	.word	0x40021c00
 8002610:	40013c00 	.word	0x40013c00

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002630:	e003      	b.n	800263a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	041a      	lsls	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	619a      	str	r2, [r3, #24]
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d006      	beq.n	800266c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800265e:	4a05      	ldr	r2, [pc, #20]	; (8002674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fe fb52 	bl	8000d10 <HAL_GPIO_EXTI_Callback>
  }
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40013c00 	.word	0x40013c00

08002678 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267a:	b08f      	sub	sp, #60	; 0x3c
 800267c:	af0a      	add	r7, sp, #40	; 0x28
 800267e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e10f      	b.n	80028aa <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f007 fef3 	bl	800a490 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2203      	movs	r2, #3
 80026ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d102      	bne.n	80026c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 fa46 	bl	8006b5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	687e      	ldr	r6, [r7, #4]
 80026d6:	466d      	mov	r5, sp
 80026d8:	f106 0410 	add.w	r4, r6, #16
 80026dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ec:	1d33      	adds	r3, r6, #4
 80026ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026f0:	6838      	ldr	r0, [r7, #0]
 80026f2:	f004 f91d 	bl	8006930 <USB_CoreInit>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0d0      	b.n	80028aa <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f004 fa34 	bl	8006b7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002714:	2300      	movs	r3, #0
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e04a      	b.n	80027b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	333d      	adds	r3, #61	; 0x3d
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	333c      	adds	r3, #60	; 0x3c
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	b298      	uxth	r0, r3
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	3344      	adds	r3, #68	; 0x44
 8002756:	4602      	mov	r2, r0
 8002758:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3340      	adds	r3, #64	; 0x40
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800276e:	7bfa      	ldrb	r2, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3348      	adds	r3, #72	; 0x48
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	334c      	adds	r3, #76	; 0x4c
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3354      	adds	r3, #84	; 0x54
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	3301      	adds	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d3af      	bcc.n	800271a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	e044      	b.n	800284a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027c0:	7bfa      	ldrb	r2, [r7, #15]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4413      	add	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027d2:	2200      	movs	r2, #0
 80027d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027d6:	7bfa      	ldrb	r2, [r7, #15]
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ec:	7bfa      	ldrb	r2, [r7, #15]
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	4613      	mov	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	440b      	add	r3, r1
 80027fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	3301      	adds	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	429a      	cmp	r2, r3
 8002852:	d3b5      	bcc.n	80027c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	687e      	ldr	r6, [r7, #4]
 800285c:	466d      	mov	r5, sp
 800285e:	f106 0410 	add.w	r4, r6, #16
 8002862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800286a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800286e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002872:	1d33      	adds	r3, r6, #4
 8002874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002876:	6838      	ldr	r0, [r7, #0]
 8002878:	f004 f9cc 	bl	8006c14 <USB_DevInit>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e00d      	b.n	80028aa <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f005 fb1b 	bl	8007ede <USB_DevDisconnect>

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_PCD_Start+0x1c>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e020      	b.n	8002910 <HAL_PCD_Start+0x5e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d109      	bne.n	80028f2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d005      	beq.n	80028f2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 f91e 	bl	8006b38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f005 facb 	bl	8007e9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b08d      	sub	sp, #52	; 0x34
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f005 fb89 	bl	8008046 <USB_GetMode>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 848a 	bne.w	8003250 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f005 faed 	bl	8007f20 <USB_ReadInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 8480 	beq.w	800324e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f005 fada 	bl	8007f20 <USB_ReadInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d107      	bne.n	8002986 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f002 0202 	and.w	r2, r2, #2
 8002984:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f005 fac8 	bl	8007f20 <USB_ReadInterrupts>
 8002990:	4603      	mov	r3, r0
 8002992:	f003 0310 	and.w	r3, r3, #16
 8002996:	2b10      	cmp	r3, #16
 8002998:	d161      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699a      	ldr	r2, [r3, #24]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0210 	bic.w	r2, r2, #16
 80029a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f003 020f 	and.w	r2, r3, #15
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	3304      	adds	r3, #4
 80029c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	0c5b      	lsrs	r3, r3, #17
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d124      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d035      	beq.n	8002a4e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	6a38      	ldr	r0, [r7, #32]
 80029f6:	f005 f8ff 	bl	8007bf8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	691a      	ldr	r2, [r3, #16]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	091b      	lsrs	r3, r3, #4
 8002a02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a06:	441a      	add	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	091b      	lsrs	r3, r3, #4
 8002a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a18:	441a      	add	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	621a      	str	r2, [r3, #32]
 8002a1e:	e016      	b.n	8002a4e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	0c5b      	lsrs	r3, r3, #17
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	2b06      	cmp	r3, #6
 8002a2a:	d110      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a32:	2208      	movs	r2, #8
 8002a34:	4619      	mov	r1, r3
 8002a36:	6a38      	ldr	r0, [r7, #32]
 8002a38:	f005 f8de 	bl	8007bf8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	6a1a      	ldr	r2, [r3, #32]
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a48:	441a      	add	r2, r3
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f042 0210 	orr.w	r2, r2, #16
 8002a5c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f005 fa5c 	bl	8007f20 <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a72:	f040 80a7 	bne.w	8002bc4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f005 fa61 	bl	8007f46 <USB_ReadDevAllOutEpInterrupt>
 8002a84:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a86:	e099      	b.n	8002bbc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 808e 	beq.w	8002bb0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 fa85 	bl	8007fae <USB_ReadDevOutEPInterrupt>
 8002aa4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00c      	beq.n	8002aca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002abc:	461a      	mov	r2, r3
 8002abe:	2301      	movs	r3, #1
 8002ac0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ac2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fec3 	bl	8003850 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00c      	beq.n	8002aee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ae6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 ff99 	bl	8003a20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b04:	461a      	mov	r2, r3
 8002b06:	2310      	movs	r3, #16
 8002b08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d030      	beq.n	8002b76 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1c:	2b80      	cmp	r3, #128	; 0x80
 8002b1e:	d109      	bne.n	8002b34 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b32:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	78db      	ldrb	r3, [r3, #3]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d108      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2200      	movs	r2, #0
 8002b56:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f007 fd98 	bl	800a694 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b70:	461a      	mov	r2, r3
 8002b72:	2302      	movs	r3, #2
 8002b74:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2320      	movs	r3, #32
 8002b90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f47f af62 	bne.w	8002a88 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f005 f9a9 	bl	8007f20 <USB_ReadInterrupts>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bd8:	f040 80db 	bne.w	8002d92 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f005 f9ca 	bl	8007f7a <USB_ReadDevAllInEpInterrupt>
 8002be6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bec:	e0cd      	b.n	8002d8a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80c2 	beq.w	8002d7e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f005 f9f0 	bl	8007fea <USB_ReadDevInEPInterrupt>
 8002c0a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d057      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69f9      	ldr	r1, [r7, #28]
 8002c32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c36:	4013      	ands	r3, r2
 8002c38:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c46:	461a      	mov	r2, r3
 8002c48:	2301      	movs	r3, #1
 8002c4a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d132      	bne.n	8002cba <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334c      	adds	r3, #76	; 0x4c
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4403      	add	r3, r0
 8002c74:	3348      	adds	r3, #72	; 0x48
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4419      	add	r1, r3
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4403      	add	r3, r0
 8002c88:	334c      	adds	r3, #76	; 0x4c
 8002c8a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d113      	bne.n	8002cba <HAL_PCD_IRQHandler+0x3a2>
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3354      	adds	r3, #84	; 0x54
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	f005 f9f7 	bl	80080a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f007 fc62 	bl	800a58a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2308      	movs	r3, #8
 8002ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d14:	461a      	mov	r2, r3
 8002d16:	2340      	movs	r3, #64	; 0x40
 8002d18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d023      	beq.n	8002d6c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d26:	6a38      	ldr	r0, [r7, #32]
 8002d28:	f004 f8d8 	bl	8006edc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3338      	adds	r3, #56	; 0x38
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	78db      	ldrb	r3, [r3, #3]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d108      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f007 fcaf 	bl	800a6b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d66:	461a      	mov	r2, r3
 8002d68:	2302      	movs	r3, #2
 8002d6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fcdb 	bl	8003734 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f af2e 	bne.w	8002bee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f005 f8c2 	bl	8007f20 <USB_ReadInterrupts>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002da6:	d122      	bne.n	8002dee <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d108      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dce:	2100      	movs	r1, #0
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fec3 	bl	8003b5c <HAL_PCDEx_LPM_Callback>
 8002dd6:	e002      	b.n	8002dde <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f007 fc4d 	bl	800a678 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f005 f894 	bl	8007f20 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e02:	d112      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d102      	bne.n	8002e1a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f007 fc09 	bl	800a62c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e28:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f005 f876 	bl	8007f20 <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3e:	f040 80b7 	bne.w	8002fb0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e50:	f023 0301 	bic.w	r3, r3, #1
 8002e54:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2110      	movs	r1, #16
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 f83d 	bl	8006edc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e66:	e046      	b.n	8002ef6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e74:	461a      	mov	r2, r3
 8002e76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e7a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e8c:	0151      	lsls	r1, r2, #5
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	440a      	add	r2, r1
 8002e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec0:	0151      	lsls	r1, r2, #5
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	440a      	add	r2, r1
 8002ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ece:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	0151      	lsls	r1, r2, #5
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	440a      	add	r2, r1
 8002ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002eee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d3b3      	bcc.n	8002e68 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f12:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d016      	beq.n	8002f4a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2c:	f043 030b 	orr.w	r3, r3, #11
 8002f30:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f42:	f043 030b 	orr.w	r3, r3, #11
 8002f46:	6453      	str	r3, [r2, #68]	; 0x44
 8002f48:	e015      	b.n	8002f76 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	69fa      	ldr	r2, [r7, #28]
 8002f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f5c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f60:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f70:	f043 030b 	orr.w	r3, r3, #11
 8002f74:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f88:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	f005 f884 	bl	80080a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 ffb3 	bl	8007f20 <USB_ReadInterrupts>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc4:	d124      	bne.n	8003010 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f005 f849 	bl	8008062 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fffe 	bl	8006fd6 <USB_GetDevSpeed>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681c      	ldr	r4, [r3, #0]
 8002fe6:	f001 f9e9 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8002fea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f003 fcfd 	bl	80069f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f007 faed 	bl	800a5da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	695a      	ldr	r2, [r3, #20]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800300e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4618      	mov	r0, r3
 8003016:	f004 ff83 	bl	8007f20 <USB_ReadInterrupts>
 800301a:	4603      	mov	r3, r0
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b08      	cmp	r3, #8
 8003022:	d10a      	bne.n	800303a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f007 faca 	bl	800a5be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695a      	ldr	r2, [r3, #20]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f002 0208 	and.w	r2, r2, #8
 8003038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f004 ff6e 	bl	8007f20 <USB_ReadInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800304a:	2b80      	cmp	r3, #128	; 0x80
 800304c:	d122      	bne.n	8003094 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003056:	6a3b      	ldr	r3, [r7, #32]
 8003058:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305a:	2301      	movs	r3, #1
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
 800305e:	e014      	b.n	800308a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	b2db      	uxtb	r3, r3
 800307c:	4619      	mov	r1, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fb27 	bl	80036d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	3301      	adds	r3, #1
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003090:	429a      	cmp	r2, r3
 8003092:	d3e5      	bcc.n	8003060 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f004 ff41 	bl	8007f20 <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a8:	d13b      	bne.n	8003122 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030aa:	2301      	movs	r3, #1
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	e02b      	b.n	8003108 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	3340      	adds	r3, #64	; 0x40
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d115      	bne.n	8003102 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030d6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da12      	bge.n	8003102 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	333f      	adds	r3, #63	; 0x3f
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	4619      	mov	r1, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fae8 	bl	80036d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	3301      	adds	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	429a      	cmp	r2, r3
 8003110:	d3ce      	bcc.n	80030b0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f004 fefa 	bl	8007f20 <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003136:	d155      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003138:	2301      	movs	r3, #1
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
 800313c:	e045      	b.n	80031ca <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4413      	add	r3, r2
 8003146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d12e      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003166:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003168:	2b00      	cmp	r3, #0
 800316a:	da2b      	bge.n	80031c4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003178:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800317c:	429a      	cmp	r2, r3
 800317e:	d121      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10a      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c0:	6053      	str	r3, [r2, #4]
            break;
 80031c2:	e007      	b.n	80031d4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3301      	adds	r3, #1
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d3b4      	bcc.n	800313e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f004 fe99 	bl	8007f20 <USB_ReadInterrupts>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f8:	d10a      	bne.n	8003210 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f007 fa6e 	bl	800a6dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800320e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fe83 	bl	8007f20 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d115      	bne.n	8003250 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f007 fa5e 	bl	800a6f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	e000      	b.n	8003250 <HAL_PCD_IRQHandler+0x938>
      return;
 800324e:	bf00      	nop
    }
  }
}
 8003250:	3734      	adds	r7, #52	; 0x34
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}

08003256 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b082      	sub	sp, #8
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_PCD_SetAddress+0x1a>
 800326c:	2302      	movs	r3, #2
 800326e:	e013      	b.n	8003298 <HAL_PCD_SetAddress+0x42>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	4611      	mov	r1, r2
 8003288:	4618      	mov	r0, r3
 800328a:	f004 fde1 	bl	8007e50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3708      	adds	r7, #8
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	4608      	mov	r0, r1
 80032aa:	4611      	mov	r1, r2
 80032ac:	461a      	mov	r2, r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	70fb      	strb	r3, [r7, #3]
 80032b2:	460b      	mov	r3, r1
 80032b4:	803b      	strh	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da0f      	bge.n	80032e6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	f003 020f 	and.w	r2, r3, #15
 80032cc:	4613      	mov	r3, r2
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	3338      	adds	r3, #56	; 0x38
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	705a      	strb	r2, [r3, #1]
 80032e4:	e00f      	b.n	8003306 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003312:	883a      	ldrh	r2, [r7, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	78ba      	ldrb	r2, [r7, #2]
 800331c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	785b      	ldrb	r3, [r3, #1]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003330:	78bb      	ldrb	r3, [r7, #2]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d102      	bne.n	800333c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_PCD_EP_Open+0xaa>
 8003346:	2302      	movs	r3, #2
 8003348:	e00e      	b.n	8003368 <HAL_PCD_EP_Open+0xc8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68f9      	ldr	r1, [r7, #12]
 8003358:	4618      	mov	r0, r3
 800335a:	f003 fe61 	bl	8007020 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003366:	7afb      	ldrb	r3, [r7, #11]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800337c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003380:	2b00      	cmp	r3, #0
 8003382:	da0f      	bge.n	80033a4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 020f 	and.w	r2, r3, #15
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	3338      	adds	r3, #56	; 0x38
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	705a      	strb	r2, [r3, #1]
 80033a2:	e00f      	b.n	80033c4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_PCD_EP_Close+0x6e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e00e      	b.n	80033fc <HAL_PCD_EP_Close+0x8c>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68f9      	ldr	r1, [r7, #12]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 fe9f 	bl	8007130 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	460b      	mov	r3, r1
 8003412:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003414:	7afb      	ldrb	r3, [r7, #11]
 8003416:	f003 020f 	and.w	r2, r3, #15
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4413      	add	r3, r2
 800342a:	3304      	adds	r3, #4
 800342c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	b2da      	uxtb	r2, r3
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d102      	bne.n	8003460 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003460:	7afb      	ldrb	r3, [r7, #11]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	f004 f97e 	bl	8007778 <USB_EP0StartXfer>
 800347c:	e008      	b.n	8003490 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	6979      	ldr	r1, [r7, #20]
 800348c:	f003 ff2c 	bl	80072e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	460b      	mov	r3, r1
 80034a4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	f003 020f 	and.w	r2, r3, #15
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80034bc:	681b      	ldr	r3, [r3, #0]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
 80034d6:	460b      	mov	r3, r1
 80034d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034da:	7afb      	ldrb	r3, [r7, #11]
 80034dc:	f003 020f 	and.w	r2, r3, #15
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	3338      	adds	r3, #56	; 0x38
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2200      	movs	r2, #0
 8003502:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2201      	movs	r2, #1
 8003508:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	b2da      	uxtb	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d102      	bne.n	8003524 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003524:	7afb      	ldrb	r3, [r7, #11]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	6979      	ldr	r1, [r7, #20]
 800353c:	f004 f91c 	bl	8007778 <USB_EP0StartXfer>
 8003540:	e008      	b.n	8003554 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	6979      	ldr	r1, [r7, #20]
 8003550:	f003 feca 	bl	80072e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	f003 020f 	and.w	r2, r3, #15
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	429a      	cmp	r2, r3
 8003576:	d901      	bls.n	800357c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e050      	b.n	800361e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800357c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003580:	2b00      	cmp	r3, #0
 8003582:	da0f      	bge.n	80035a4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	f003 020f 	and.w	r2, r3, #15
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	3338      	adds	r3, #56	; 0x38
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	4413      	add	r3, r2
 8003598:	3304      	adds	r3, #4
 800359a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	705a      	strb	r2, [r3, #1]
 80035a2:	e00d      	b.n	80035c0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	3304      	adds	r3, #4
 80035b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c6:	78fb      	ldrb	r3, [r7, #3]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d101      	bne.n	80035e0 <HAL_PCD_EP_SetStall+0x82>
 80035dc:	2302      	movs	r3, #2
 80035de:	e01e      	b.n	800361e <HAL_PCD_EP_SetStall+0xc0>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68f9      	ldr	r1, [r7, #12]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f004 fb5a 	bl	8007ca8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	b2d9      	uxtb	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800360e:	461a      	mov	r2, r3
 8003610:	f004 fd4a 	bl	80080a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	460b      	mov	r3, r1
 8003630:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 020f 	and.w	r2, r3, #15
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	d901      	bls.n	8003644 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e042      	b.n	80036ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003648:	2b00      	cmp	r3, #0
 800364a:	da0f      	bge.n	800366c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	3338      	adds	r3, #56	; 0x38
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	4413      	add	r3, r2
 8003660:	3304      	adds	r3, #4
 8003662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2201      	movs	r2, #1
 8003668:	705a      	strb	r2, [r3, #1]
 800366a:	e00f      	b.n	800368c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	f003 020f 	and.w	r2, r3, #15
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	4413      	add	r3, r2
 8003682:	3304      	adds	r3, #4
 8003684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_PCD_EP_ClrStall+0x86>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e00e      	b.n	80036ca <HAL_PCD_EP_ClrStall+0xa4>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68f9      	ldr	r1, [r7, #12]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 fb62 	bl	8007d84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	da0c      	bge.n	8003700 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	4613      	mov	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	3338      	adds	r3, #56	; 0x38
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	3304      	adds	r3, #4
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	e00c      	b.n	800371a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	f003 020f 	and.w	r2, r3, #15
 8003706:	4613      	mov	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68f9      	ldr	r1, [r7, #12]
 8003720:	4618      	mov	r0, r3
 8003722:	f004 f981 	bl	8007a28 <USB_EPStopXfer>
 8003726:	4603      	mov	r3, r0
 8003728:	72fb      	strb	r3, [r7, #11]

  return ret;
 800372a:	7afb      	ldrb	r3, [r7, #11]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	4613      	mov	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	3338      	adds	r3, #56	; 0x38
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	3304      	adds	r3, #4
 800375a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a1a      	ldr	r2, [r3, #32]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	429a      	cmp	r2, r3
 8003766:	d901      	bls.n	800376c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e06c      	b.n	8003846 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	699a      	ldr	r2, [r3, #24]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	429a      	cmp	r2, r3
 8003780:	d902      	bls.n	8003788 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3303      	adds	r3, #3
 800378c:	089b      	lsrs	r3, r3, #2
 800378e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003790:	e02b      	b.n	80037ea <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d902      	bls.n	80037ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3303      	adds	r3, #3
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6919      	ldr	r1, [r3, #16]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	4603      	mov	r3, r0
 80037cc:	6978      	ldr	r0, [r7, #20]
 80037ce:	f004 f9d5 	bl	8007b7c <USB_WritePacket>

    ep->xfer_buff  += len;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	441a      	add	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a1a      	ldr	r2, [r3, #32]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	441a      	add	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d809      	bhi.n	8003814 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1a      	ldr	r2, [r3, #32]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003808:	429a      	cmp	r2, r3
 800380a:	d203      	bcs.n	8003814 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1be      	bne.n	8003792 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	429a      	cmp	r2, r3
 800381e:	d811      	bhi.n	8003844 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	2201      	movs	r2, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	43db      	mvns	r3, r3
 800383a:	6939      	ldr	r1, [r7, #16]
 800383c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003840:	4013      	ands	r3, r2
 8003842:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	333c      	adds	r3, #60	; 0x3c
 8003868:	3304      	adds	r3, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d17b      	bne.n	800397e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d015      	beq.n	80038bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	4a61      	ldr	r2, [pc, #388]	; (8003a18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	f240 80b9 	bls.w	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80b3 	beq.w	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b2:	461a      	mov	r2, r3
 80038b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b8:	6093      	str	r3, [r2, #8]
 80038ba:	e0a7      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d2:	461a      	mov	r2, r3
 80038d4:	2320      	movs	r3, #32
 80038d6:	6093      	str	r3, [r2, #8]
 80038d8:	e098      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f040 8093 	bne.w	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	4a4b      	ldr	r2, [pc, #300]	; (8003a18 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d90f      	bls.n	800390e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003904:	461a      	mov	r2, r3
 8003906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390a:	6093      	str	r3, [r2, #8]
 800390c:	e07e      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	3304      	adds	r3, #4
 8003922:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	0159      	lsls	r1, r3, #5
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	440b      	add	r3, r1
 8003930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393a:	1ad2      	subs	r2, r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d114      	bne.n	8003970 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003958:	461a      	mov	r2, r3
 800395a:	2101      	movs	r1, #1
 800395c:	f004 fba4 	bl	80080a8 <USB_EP0_OutStart>
 8003960:	e006      	b.n	8003970 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f006 fdec 	bl	800a554 <HAL_PCD_DataOutStageCallback>
 800397c:	e046      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	4a26      	ldr	r2, [pc, #152]	; (8003a1c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d124      	bne.n	80039d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	015a      	lsls	r2, r3, #5
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	4413      	add	r3, r2
 8003998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800399c:	461a      	mov	r2, r3
 800399e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039a2:	6093      	str	r3, [r2, #8]
 80039a4:	e032      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	2320      	movs	r3, #32
 80039c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f006 fdc3 	bl	800a554 <HAL_PCD_DataOutStageCallback>
 80039ce:	e01d      	b.n	8003a0c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d114      	bne.n	8003a00 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039f8:	461a      	mov	r2, r3
 80039fa:	2100      	movs	r1, #0
 80039fc:	f004 fb54 	bl	80080a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f006 fda4 	bl	800a554 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	4f54300a 	.word	0x4f54300a
 8003a1c:	4f54310a 	.word	0x4f54310a

08003a20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	333c      	adds	r3, #60	; 0x3c
 8003a38:	3304      	adds	r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d90e      	bls.n	8003a74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f006 fd5b 	bl	800a530 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a0a      	ldr	r2, [pc, #40]	; (8003aa8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d90c      	bls.n	8003a9c <PCD_EP_OutSetupPacket_int+0x7c>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d108      	bne.n	8003a9c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a94:	461a      	mov	r2, r3
 8003a96:	2101      	movs	r1, #1
 8003a98:	f004 fb06 	bl	80080a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	4f54300a 	.word	0x4f54300a

08003aac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d107      	bne.n	8003ada <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003aca:	883b      	ldrh	r3, [r7, #0]
 8003acc:	0419      	lsls	r1, r3, #16
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ad8:	e028      	b.n	8003b2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	0c1b      	lsrs	r3, r3, #16
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	e00d      	b.n	8003b0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	3340      	adds	r3, #64	; 0x40
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	3301      	adds	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3ec      	bcc.n	8003aee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b14:	883b      	ldrh	r3, [r7, #0]
 8003b16:	0418      	lsls	r0, r3, #16
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	4302      	orrs	r2, r0
 8003b24:	3340      	adds	r3, #64	; 0x40
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	460b      	mov	r3, r1
 8003b44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	887a      	ldrh	r2, [r7, #2]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e267      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d075      	beq.n	8003c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b92:	4b88      	ldr	r3, [pc, #544]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 030c 	and.w	r3, r3, #12
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d00c      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b9e:	4b85      	ldr	r3, [pc, #532]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d112      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003baa:	4b82      	ldr	r3, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	4b7e      	ldr	r3, [pc, #504]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d05b      	beq.n	8003c7c <HAL_RCC_OscConfig+0x108>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d157      	bne.n	8003c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e242      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x74>
 8003bda:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a75      	ldr	r2, [pc, #468]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e01d      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x98>
 8003bf2:	4b70      	ldr	r3, [pc, #448]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6f      	ldr	r2, [pc, #444]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a6c      	ldr	r2, [pc, #432]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	e00b      	b.n	8003c24 <HAL_RCC_OscConfig+0xb0>
 8003c0c:	4b69      	ldr	r3, [pc, #420]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a68      	ldr	r2, [pc, #416]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d013      	beq.n	8003c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fe98 	bl	8001960 <HAL_GetTick>
 8003c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	e008      	b.n	8003c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fd fe94 	bl	8001960 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e207      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b5b      	ldr	r3, [pc, #364]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0xc0>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7fd fe84 	bl	8001960 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fe80 	bl	8001960 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e1f3      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	4b51      	ldr	r3, [pc, #324]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0xe8>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d063      	beq.n	8003d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8a:	4b4a      	ldr	r3, [pc, #296]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d11c      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ca2:	4b44      	ldr	r3, [pc, #272]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d116      	bne.n	8003cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cae:	4b41      	ldr	r3, [pc, #260]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d001      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e1c7      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4937      	ldr	r1, [pc, #220]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cda:	e03a      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce4:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <HAL_RCC_OscConfig+0x244>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fd fe39 	bl	8001960 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7fd fe35 	bl	8001960 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1a8      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b28      	ldr	r3, [pc, #160]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4925      	ldr	r1, [pc, #148]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <HAL_RCC_OscConfig+0x244>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7fd fe18 	bl	8001960 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d34:	f7fd fe14 	bl	8001960 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e187      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d036      	beq.n	8003dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d016      	beq.n	8003d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d66:	4b15      	ldr	r3, [pc, #84]	; (8003dbc <HAL_RCC_OscConfig+0x248>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d6c:	f7fd fdf8 	bl	8001960 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d74:	f7fd fdf4 	bl	8001960 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e167      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	4b0b      	ldr	r3, [pc, #44]	; (8003db4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0x200>
 8003d92:	e01b      	b.n	8003dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCC_OscConfig+0x248>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9a:	f7fd fde1 	bl	8001960 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	e00e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003da2:	f7fd fddd 	bl	8001960 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d907      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e150      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
 8003db4:	40023800 	.word	0x40023800
 8003db8:	42470000 	.word	0x42470000
 8003dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1ea      	bne.n	8003da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 8097 	beq.w	8003f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dde:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	4a7c      	ldr	r2, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dfa:	4b7a      	ldr	r3, [pc, #488]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b77      	ldr	r3, [pc, #476]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d118      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e16:	4b74      	ldr	r3, [pc, #464]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a73      	ldr	r2, [pc, #460]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7fd fd9d 	bl	8001960 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fd fd99 	bl	8001960 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e10c      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <HAL_RCC_OscConfig+0x474>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x2ea>
 8003e50:	4b64      	ldr	r3, [pc, #400]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a63      	ldr	r2, [pc, #396]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5c:	e01c      	b.n	8003e98 <HAL_RCC_OscConfig+0x324>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b05      	cmp	r3, #5
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x30c>
 8003e66:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	4a5e      	ldr	r2, [pc, #376]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6713      	str	r3, [r2, #112]	; 0x70
 8003e72:	4b5c      	ldr	r3, [pc, #368]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a5b      	ldr	r2, [pc, #364]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0x324>
 8003e80:	4b58      	ldr	r3, [pc, #352]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a57      	ldr	r2, [pc, #348]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e86:	f023 0301 	bic.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	4b55      	ldr	r3, [pc, #340]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a54      	ldr	r2, [pc, #336]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003e92:	f023 0304 	bic.w	r3, r3, #4
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fd fd5e 	bl	8001960 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fd5a 	bl	8001960 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e0cb      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	4b49      	ldr	r3, [pc, #292]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ee      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x334>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ecc:	f7fd fd48 	bl	8001960 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fd fd44 	bl	8001960 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e0b5      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1ee      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef6:	7dfb      	ldrb	r3, [r7, #23]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efc:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	4a38      	ldr	r2, [pc, #224]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80a1 	beq.w	8004054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f12:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d05c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d141      	bne.n	8003faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b31      	ldr	r3, [pc, #196]	; (8003fec <HAL_RCC_OscConfig+0x478>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fd fd18 	bl	8001960 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd fd14 	bl	8001960 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e087      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b27      	ldr	r3, [pc, #156]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	491b      	ldr	r1, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x478>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f82:	f7fd fced 	bl	8001960 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f8a:	f7fd fce9 	bl	8001960 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e05c      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f9c:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x416>
 8003fa8:	e054      	b.n	8004054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003faa:	4b10      	ldr	r3, [pc, #64]	; (8003fec <HAL_RCC_OscConfig+0x478>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7fd fcd6 	bl	8001960 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7fd fcd2 	bl	8001960 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e045      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x444>
 8003fd6:	e03d      	b.n	8004054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d107      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e038      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x4ec>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d121      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d11a      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	4293      	cmp	r3, r2
 800402a:	d111      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	3b01      	subs	r3, #1
 800403a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e0cc      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004078:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d90c      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b63      	ldr	r3, [pc, #396]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e0b8      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d020      	beq.n	80040ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b8:	4b59      	ldr	r3, [pc, #356]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0308 	and.w	r3, r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b50      	ldr	r3, [pc, #320]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	494d      	ldr	r1, [pc, #308]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d044      	beq.n	8004184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d107      	bne.n	8004112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004102:	4b47      	ldr	r3, [pc, #284]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d119      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e07f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d003      	beq.n	8004122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411e:	2b03      	cmp	r3, #3
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004122:	4b3f      	ldr	r3, [pc, #252]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e06f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004132:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e067      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004142:	4b37      	ldr	r3, [pc, #220]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f023 0203 	bic.w	r2, r3, #3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4934      	ldr	r1, [pc, #208]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	4313      	orrs	r3, r2
 8004152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004154:	f7fd fc04 	bl	8001960 <HAL_GetTick>
 8004158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	e00a      	b.n	8004172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415c:	f7fd fc00 	bl	8001960 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e04f      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	4b2b      	ldr	r3, [pc, #172]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 020c 	and.w	r2, r3, #12
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	429a      	cmp	r2, r3
 8004182:	d1eb      	bne.n	800415c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d20c      	bcs.n	80041ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	4b22      	ldr	r3, [pc, #136]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e032      	b.n	8004212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b19      	ldr	r3, [pc, #100]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	4916      	ldr	r1, [pc, #88]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	490e      	ldr	r1, [pc, #56]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ea:	f000 f821 	bl	8004230 <HAL_RCC_GetSysClockFreq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	490a      	ldr	r1, [pc, #40]	; (8004224 <HAL_RCC_ClockConfig+0x1c0>)
 80041fc:	5ccb      	ldrb	r3, [r1, r3]
 80041fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004202:	4a09      	ldr	r2, [pc, #36]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fd fb64 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40023c00 	.word	0x40023c00
 8004220:	40023800 	.word	0x40023800
 8004224:	0800b40c 	.word	0x0800b40c
 8004228:	20000008 	.word	0x20000008
 800422c:	2000000c 	.word	0x2000000c

08004230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004234:	b090      	sub	sp, #64	; 0x40
 8004236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
 800423c:	2300      	movs	r3, #0
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004240:	2300      	movs	r3, #0
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004248:	4b59      	ldr	r3, [pc, #356]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d00d      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x40>
 8004254:	2b08      	cmp	r3, #8
 8004256:	f200 80a1 	bhi.w	800439c <HAL_RCC_GetSysClockFreq+0x16c>
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x34>
 800425e:	2b04      	cmp	r3, #4
 8004260:	d003      	beq.n	800426a <HAL_RCC_GetSysClockFreq+0x3a>
 8004262:	e09b      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004264:	4b53      	ldr	r3, [pc, #332]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004268:	e09b      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800426a:	4b53      	ldr	r3, [pc, #332]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800426e:	e098      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004270:	4b4f      	ldr	r3, [pc, #316]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004278:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800427a:	4b4d      	ldr	r3, [pc, #308]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d028      	beq.n	80042d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004286:	4b4a      	ldr	r3, [pc, #296]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	099b      	lsrs	r3, r3, #6
 800428c:	2200      	movs	r2, #0
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	627a      	str	r2, [r7, #36]	; 0x24
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004298:	2100      	movs	r1, #0
 800429a:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800429c:	fb03 f201 	mul.w	r2, r3, r1
 80042a0:	2300      	movs	r3, #0
 80042a2:	fb00 f303 	mul.w	r3, r0, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	4a43      	ldr	r2, [pc, #268]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042aa:	fba0 1202 	umull	r1, r2, r0, r2
 80042ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042b0:	460a      	mov	r2, r1
 80042b2:	62ba      	str	r2, [r7, #40]	; 0x28
 80042b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b6:	4413      	add	r3, r2
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042bc:	2200      	movs	r2, #0
 80042be:	61bb      	str	r3, [r7, #24]
 80042c0:	61fa      	str	r2, [r7, #28]
 80042c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042ca:	f7fb ff7d 	bl	80001c8 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	4613      	mov	r3, r2
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042d6:	e053      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d8:	4b35      	ldr	r3, [pc, #212]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	099b      	lsrs	r3, r3, #6
 80042de:	2200      	movs	r2, #0
 80042e0:	613b      	str	r3, [r7, #16]
 80042e2:	617a      	str	r2, [r7, #20]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042ea:	f04f 0b00 	mov.w	fp, #0
 80042ee:	4652      	mov	r2, sl
 80042f0:	465b      	mov	r3, fp
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	0159      	lsls	r1, r3, #5
 80042fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004300:	0150      	lsls	r0, r2, #5
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	ebb2 080a 	subs.w	r8, r2, sl
 800430a:	eb63 090b 	sbc.w	r9, r3, fp
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800431a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800431e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004322:	ebb2 0408 	subs.w	r4, r2, r8
 8004326:	eb63 0509 	sbc.w	r5, r3, r9
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	00eb      	lsls	r3, r5, #3
 8004334:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004338:	00e2      	lsls	r2, r4, #3
 800433a:	4614      	mov	r4, r2
 800433c:	461d      	mov	r5, r3
 800433e:	eb14 030a 	adds.w	r3, r4, sl
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	eb45 030b 	adc.w	r3, r5, fp
 8004348:	607b      	str	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004356:	4629      	mov	r1, r5
 8004358:	028b      	lsls	r3, r1, #10
 800435a:	4621      	mov	r1, r4
 800435c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004360:	4621      	mov	r1, r4
 8004362:	028a      	lsls	r2, r1, #10
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	2200      	movs	r2, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	60fa      	str	r2, [r7, #12]
 8004370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004374:	f7fb ff28 	bl	80001c8 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	3301      	adds	r3, #1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004390:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800439a:	e002      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800439e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3740      	adds	r7, #64	; 0x40
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	016e3600 	.word	0x016e3600

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000008 	.word	0x20000008

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	0800b41c 	.word	0x0800b41c

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004400:	f7ff ffdc 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0b5b      	lsrs	r3, r3, #13
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	0800b41c 	.word	0x0800b41c

08004424 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e07b      	b.n	800452e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b00      	cmp	r3, #0
 800443c:	d108      	bne.n	8004450 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004446:	d009      	beq.n	800445c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	61da      	str	r2, [r3, #28]
 800444e:	e005      	b.n	800445c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fc fffe 	bl	8001478 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004492:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	ea42 0103 	orr.w	r1, r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	f003 0104 	and.w	r1, r3, #4
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	f003 0210 	and.w	r2, r3, #16
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800451c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b088      	sub	sp, #32
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_SPI_Transmit+0x22>
 8004554:	2302      	movs	r3, #2
 8004556:	e126      	b.n	80047a6 <HAL_SPI_Transmit+0x270>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004560:	f7fd f9fe 	bl	8001960 <HAL_GetTick>
 8004564:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d002      	beq.n	800457c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004576:	2302      	movs	r3, #2
 8004578:	77fb      	strb	r3, [r7, #31]
    goto error;
 800457a:	e10b      	b.n	8004794 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <HAL_SPI_Transmit+0x52>
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800458c:	e102      	b.n	8004794 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2203      	movs	r2, #3
 8004592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	88fa      	ldrh	r2, [r7, #6]
 80045a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d4:	d10f      	bne.n	80045f6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d007      	beq.n	8004614 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004612:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461c:	d14b      	bne.n	80046b6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <HAL_SPI_Transmit+0xf6>
 8004626:	8afb      	ldrh	r3, [r7, #22]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d13e      	bne.n	80046aa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004630:	881a      	ldrh	r2, [r3, #0]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	1c9a      	adds	r2, r3, #2
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004650:	e02b      	b.n	80046aa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b02      	cmp	r3, #2
 800465e:	d112      	bne.n	8004686 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	881a      	ldrh	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	1c9a      	adds	r2, r3, #2
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	86da      	strh	r2, [r3, #54]	; 0x36
 8004684:	e011      	b.n	80046aa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004686:	f7fd f96b 	bl	8001960 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d803      	bhi.n	800469e <HAL_SPI_Transmit+0x168>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d102      	bne.n	80046a4 <HAL_SPI_Transmit+0x16e>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046a8:	e074      	b.n	8004794 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ce      	bne.n	8004652 <HAL_SPI_Transmit+0x11c>
 80046b4:	e04c      	b.n	8004750 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_SPI_Transmit+0x18e>
 80046be:	8afb      	ldrh	r3, [r7, #22]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d140      	bne.n	8004746 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	330c      	adds	r3, #12
 80046ce:	7812      	ldrb	r2, [r2, #0]
 80046d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046ea:	e02c      	b.n	8004746 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d113      	bne.n	8004722 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	330c      	adds	r3, #12
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004720:	e011      	b.n	8004746 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004722:	f7fd f91d 	bl	8001960 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d803      	bhi.n	800473a <HAL_SPI_Transmit+0x204>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004738:	d102      	bne.n	8004740 <HAL_SPI_Transmit+0x20a>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d102      	bne.n	8004746 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004744:	e026      	b.n	8004794 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1cd      	bne.n	80046ec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 fbd9 	bl	8004f0c <SPI_EndRxTxTransaction>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d002      	beq.n	8004766 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2220      	movs	r2, #32
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	613b      	str	r3, [r7, #16]
 8004782:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	77fb      	strb	r3, [r7, #31]
 8004790:	e000      	b.n	8004794 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b088      	sub	sp, #32
 80047b2:	af02      	add	r7, sp, #8
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	603b      	str	r3, [r7, #0]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ca:	d112      	bne.n	80047f2 <HAL_SPI_Receive+0x44>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10e      	bne.n	80047f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2204      	movs	r2, #4
 80047d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	68b9      	ldr	r1, [r7, #8]
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f8f1 	bl	80049d0 <HAL_SPI_TransmitReceive>
 80047ee:	4603      	mov	r3, r0
 80047f0:	e0ea      	b.n	80049c8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_SPI_Receive+0x52>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e0e3      	b.n	80049c8 <HAL_SPI_Receive+0x21a>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004808:	f7fd f8aa 	bl	8001960 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b01      	cmp	r3, #1
 8004818:	d002      	beq.n	8004820 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800481a:	2302      	movs	r3, #2
 800481c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800481e:	e0ca      	b.n	80049b6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_Receive+0x7e>
 8004826:	88fb      	ldrh	r3, [r7, #6]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004830:	e0c1      	b.n	80049b6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2204      	movs	r2, #4
 8004836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	88fa      	ldrh	r2, [r7, #6]
 800484a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004878:	d10f      	bne.n	800489a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004888:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004898:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d007      	beq.n	80048b8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d162      	bne.n	8004986 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048c0:	e02e      	b.n	8004920 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d115      	bne.n	80048fc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f103 020c 	add.w	r2, r3, #12
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048fa:	e011      	b.n	8004920 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048fc:	f7fd f830 	bl	8001960 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d803      	bhi.n	8004914 <HAL_SPI_Receive+0x166>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004912:	d102      	bne.n	800491a <HAL_SPI_Receive+0x16c>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d102      	bne.n	8004920 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800491e:	e04a      	b.n	80049b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1cb      	bne.n	80048c2 <HAL_SPI_Receive+0x114>
 800492a:	e031      	b.n	8004990 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d113      	bne.n	8004962 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004944:	b292      	uxth	r2, r2
 8004946:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004960:	e011      	b.n	8004986 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004962:	f7fc fffd 	bl	8001960 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d803      	bhi.n	800497a <HAL_SPI_Receive+0x1cc>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d102      	bne.n	8004980 <HAL_SPI_Receive+0x1d2>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004984:	e017      	b.n	80049b6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1cd      	bne.n	800492c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	6839      	ldr	r1, [r7, #0]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fa53 	bl	8004e40 <SPI_EndRxTransaction>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
 80049b2:	e000      	b.n	80049b6 <HAL_SPI_Receive+0x208>
  }

error :
 80049b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	; 0x30
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049de:	2301      	movs	r3, #1
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_SPI_TransmitReceive+0x26>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e18a      	b.n	8004d0c <HAL_SPI_TransmitReceive+0x33c>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049fe:	f7fc ffaf 	bl	8001960 <HAL_GetTick>
 8004a02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a14:	887b      	ldrh	r3, [r7, #2]
 8004a16:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d00f      	beq.n	8004a40 <HAL_SPI_TransmitReceive+0x70>
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a26:	d107      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x68>
 8004a30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d003      	beq.n	8004a40 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a38:	2302      	movs	r3, #2
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a3e:	e15b      	b.n	8004cf8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <HAL_SPI_TransmitReceive+0x82>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <HAL_SPI_TransmitReceive+0x82>
 8004a4c:	887b      	ldrh	r3, [r7, #2]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a58:	e14e      	b.n	8004cf8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d003      	beq.n	8004a6e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2205      	movs	r2, #5
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	887a      	ldrh	r2, [r7, #2]
 8004a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	887a      	ldrh	r2, [r7, #2]
 8004a90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	887a      	ldrh	r2, [r7, #2]
 8004a96:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aae:	2b40      	cmp	r3, #64	; 0x40
 8004ab0:	d007      	beq.n	8004ac2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aca:	d178      	bne.n	8004bbe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_SPI_TransmitReceive+0x10a>
 8004ad4:	8b7b      	ldrh	r3, [r7, #26]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d166      	bne.n	8004ba8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	881a      	ldrh	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004afe:	e053      	b.n	8004ba8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d11b      	bne.n	8004b46 <HAL_SPI_TransmitReceive+0x176>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d016      	beq.n	8004b46 <HAL_SPI_TransmitReceive+0x176>
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d113      	bne.n	8004b46 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b22:	881a      	ldrh	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	1c9a      	adds	r2, r3, #2
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d119      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x1b8>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	b292      	uxth	r2, r2
 8004b6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	1c9a      	adds	r2, r3, #2
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b84:	2301      	movs	r3, #1
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b88:	f7fc feea 	bl	8001960 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d807      	bhi.n	8004ba8 <HAL_SPI_TransmitReceive+0x1d8>
 8004b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d003      	beq.n	8004ba8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ba6:	e0a7      	b.n	8004cf8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1a6      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x130>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1a1      	bne.n	8004b00 <HAL_SPI_TransmitReceive+0x130>
 8004bbc:	e07c      	b.n	8004cb8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_SPI_TransmitReceive+0x1fc>
 8004bc6:	8b7b      	ldrh	r3, [r7, #26]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d16b      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	330c      	adds	r3, #12
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bf2:	e057      	b.n	8004ca4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d11c      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x26c>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d017      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x26c>
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d114      	bne.n	8004c3c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d119      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x2ae>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d014      	beq.n	8004c7e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c7e:	f7fc fe6f 	bl	8001960 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d803      	bhi.n	8004c96 <HAL_SPI_TransmitReceive+0x2c6>
 8004c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d102      	bne.n	8004c9c <HAL_SPI_TransmitReceive+0x2cc>
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ca2:	e029      	b.n	8004cf8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1a2      	bne.n	8004bf4 <HAL_SPI_TransmitReceive+0x224>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d19d      	bne.n	8004bf4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f000 f925 	bl	8004f0c <SPI_EndRxTxTransaction>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004cd4:	e010      	b.n	8004cf8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10b      	bne.n	8004cf6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	e000      	b.n	8004cf8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004cf6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3730      	adds	r7, #48	; 0x30
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d22:	b2db      	uxtb	r3, r3
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d40:	f7fc fe0e 	bl	8001960 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d50:	f7fc fe06 	bl	8001960 <HAL_GetTick>
 8004d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d56:	4b39      	ldr	r3, [pc, #228]	; (8004e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	015b      	lsls	r3, r3, #5
 8004d5c:	0d1b      	lsrs	r3, r3, #20
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	fb02 f303 	mul.w	r3, r2, r3
 8004d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d66:	e054      	b.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6e:	d050      	beq.n	8004e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d70:	f7fc fdf6 	bl	8001960 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d902      	bls.n	8004d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d13d      	bne.n	8004e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d9e:	d111      	bne.n	8004dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da8:	d004      	beq.n	8004db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db2:	d107      	bne.n	8004dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dcc:	d10f      	bne.n	8004dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e017      	b.n	8004e32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	bf0c      	ite	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	2300      	movne	r3, #0
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	461a      	mov	r2, r3
 8004e2a:	79fb      	ldrb	r3, [r7, #7]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d19b      	bne.n	8004d68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000008 	.word	0x20000008

08004e40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e54:	d111      	bne.n	8004e7a <SPI_EndRxTransaction+0x3a>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5e:	d004      	beq.n	8004e6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e68:	d107      	bne.n	8004e7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e82:	d12a      	bne.n	8004eda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d012      	beq.n	8004eb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	2180      	movs	r1, #128	; 0x80
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff ff49 	bl	8004d30 <SPI_WaitFlagStateUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d02d      	beq.n	8004f00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	f043 0220 	orr.w	r2, r3, #32
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e026      	b.n	8004f02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff ff36 	bl	8004d30 <SPI_WaitFlagStateUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01a      	beq.n	8004f00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	f043 0220 	orr.w	r2, r3, #32
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e013      	b.n	8004f02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f7ff ff23 	bl	8004d30 <SPI_WaitFlagStateUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d007      	beq.n	8004f00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	f043 0220 	orr.w	r2, r3, #32
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e000      	b.n	8004f02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f18:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <SPI_EndRxTxTransaction+0x7c>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1b      	ldr	r2, [pc, #108]	; (8004f8c <SPI_EndRxTxTransaction+0x80>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	0d5b      	lsrs	r3, r3, #21
 8004f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f28:	fb02 f303 	mul.w	r3, r2, r3
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f36:	d112      	bne.n	8004f5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f7ff fef4 	bl	8004d30 <SPI_WaitFlagStateUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d016      	beq.n	8004f7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	f043 0220 	orr.w	r2, r3, #32
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e00f      	b.n	8004f7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f74:	2b80      	cmp	r3, #128	; 0x80
 8004f76:	d0f2      	beq.n	8004f5e <SPI_EndRxTxTransaction+0x52>
 8004f78:	e000      	b.n	8004f7c <SPI_EndRxTxTransaction+0x70>
        break;
 8004f7a:	bf00      	nop
  }

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000008 	.word	0x20000008
 8004f8c:	165e9f81 	.word	0x165e9f81

08004f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e041      	b.n	8005026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d106      	bne.n	8004fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7fc faa6 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f000 fa2e 	bl	8005430 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b082      	sub	sp, #8
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b02      	cmp	r3, #2
 8005042:	d122      	bne.n	800508a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b02      	cmp	r3, #2
 8005050:	d11b      	bne.n	800508a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f06f 0202 	mvn.w	r2, #2
 800505a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f9bf 	bl	80053f4 <HAL_TIM_IC_CaptureCallback>
 8005076:	e005      	b.n	8005084 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f9b1 	bl	80053e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9c2 	bl	8005408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d122      	bne.n	80050de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d11b      	bne.n	80050de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f06f 0204 	mvn.w	r2, #4
 80050ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f995 	bl	80053f4 <HAL_TIM_IC_CaptureCallback>
 80050ca:	e005      	b.n	80050d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f987 	bl	80053e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f998 	bl	8005408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d122      	bne.n	8005132 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d11b      	bne.n	8005132 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f06f 0208 	mvn.w	r2, #8
 8005102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2204      	movs	r2, #4
 8005108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f96b 	bl	80053f4 <HAL_TIM_IC_CaptureCallback>
 800511e:	e005      	b.n	800512c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f95d 	bl	80053e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f96e 	bl	8005408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f003 0310 	and.w	r3, r3, #16
 800513c:	2b10      	cmp	r3, #16
 800513e:	d122      	bne.n	8005186 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b10      	cmp	r3, #16
 800514c:	d11b      	bne.n	8005186 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f06f 0210 	mvn.w	r2, #16
 8005156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2208      	movs	r2, #8
 800515c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f941 	bl	80053f4 <HAL_TIM_IC_CaptureCallback>
 8005172:	e005      	b.n	8005180 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f933 	bl	80053e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f944 	bl	8005408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	d10e      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d107      	bne.n	80051b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f06f 0201 	mvn.w	r2, #1
 80051aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f90d 	bl	80053cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051bc:	2b80      	cmp	r3, #128	; 0x80
 80051be:	d10e      	bne.n	80051de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ca:	2b80      	cmp	r3, #128	; 0x80
 80051cc:	d107      	bne.n	80051de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fae9 	bl	80057b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e8:	2b40      	cmp	r3, #64	; 0x40
 80051ea:	d10e      	bne.n	800520a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d107      	bne.n	800520a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005202:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f909 	bl	800541c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b20      	cmp	r3, #32
 8005216:	d10e      	bne.n	8005236 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b20      	cmp	r3, #32
 8005224:	d107      	bne.n	8005236 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f06f 0220 	mvn.w	r2, #32
 800522e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fab3 	bl	800579c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005236:	bf00      	nop
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005252:	2b01      	cmp	r3, #1
 8005254:	d101      	bne.n	800525a <HAL_TIM_ConfigClockSource+0x1c>
 8005256:	2302      	movs	r3, #2
 8005258:	e0b4      	b.n	80053c4 <HAL_TIM_ConfigClockSource+0x186>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005278:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005280:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005292:	d03e      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0xd4>
 8005294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005298:	f200 8087 	bhi.w	80053aa <HAL_TIM_ConfigClockSource+0x16c>
 800529c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a0:	f000 8086 	beq.w	80053b0 <HAL_TIM_ConfigClockSource+0x172>
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a8:	d87f      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x16c>
 80052aa:	2b70      	cmp	r3, #112	; 0x70
 80052ac:	d01a      	beq.n	80052e4 <HAL_TIM_ConfigClockSource+0xa6>
 80052ae:	2b70      	cmp	r3, #112	; 0x70
 80052b0:	d87b      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x16c>
 80052b2:	2b60      	cmp	r3, #96	; 0x60
 80052b4:	d050      	beq.n	8005358 <HAL_TIM_ConfigClockSource+0x11a>
 80052b6:	2b60      	cmp	r3, #96	; 0x60
 80052b8:	d877      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x16c>
 80052ba:	2b50      	cmp	r3, #80	; 0x50
 80052bc:	d03c      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0xfa>
 80052be:	2b50      	cmp	r3, #80	; 0x50
 80052c0:	d873      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x16c>
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d058      	beq.n	8005378 <HAL_TIM_ConfigClockSource+0x13a>
 80052c6:	2b40      	cmp	r3, #64	; 0x40
 80052c8:	d86f      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x16c>
 80052ca:	2b30      	cmp	r3, #48	; 0x30
 80052cc:	d064      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x15a>
 80052ce:	2b30      	cmp	r3, #48	; 0x30
 80052d0:	d86b      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x16c>
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d060      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x15a>
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d867      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x16c>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d05c      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x15a>
 80052de:	2b10      	cmp	r3, #16
 80052e0:	d05a      	beq.n	8005398 <HAL_TIM_ConfigClockSource+0x15a>
 80052e2:	e062      	b.n	80053aa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6818      	ldr	r0, [r3, #0]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6899      	ldr	r1, [r3, #8]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f000 f9b6 	bl	8005664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005306:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	609a      	str	r2, [r3, #8]
      break;
 8005310:	e04f      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6899      	ldr	r1, [r3, #8]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f000 f99f 	bl	8005664 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005334:	609a      	str	r2, [r3, #8]
      break;
 8005336:	e03c      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	461a      	mov	r2, r3
 8005346:	f000 f913 	bl	8005570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2150      	movs	r1, #80	; 0x50
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f96c 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 8005356:	e02c      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	461a      	mov	r2, r3
 8005366:	f000 f932 	bl	80055ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2160      	movs	r1, #96	; 0x60
 8005370:	4618      	mov	r0, r3
 8005372:	f000 f95c 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 8005376:	e01c      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6859      	ldr	r1, [r3, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	461a      	mov	r2, r3
 8005386:	f000 f8f3 	bl	8005570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2140      	movs	r1, #64	; 0x40
 8005390:	4618      	mov	r0, r3
 8005392:	f000 f94c 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 8005396:	e00c      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f000 f943 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 80053a8:	e003      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	73fb      	strb	r3, [r7, #15]
      break;
 80053ae:	e000      	b.n	80053b2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a40      	ldr	r2, [pc, #256]	; (8005544 <TIM_Base_SetConfig+0x114>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d013      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d00f      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a3d      	ldr	r2, [pc, #244]	; (8005548 <TIM_Base_SetConfig+0x118>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00b      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a3c      	ldr	r2, [pc, #240]	; (800554c <TIM_Base_SetConfig+0x11c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a3b      	ldr	r2, [pc, #236]	; (8005550 <TIM_Base_SetConfig+0x120>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3a      	ldr	r2, [pc, #232]	; (8005554 <TIM_Base_SetConfig+0x124>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d108      	bne.n	8005482 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a2f      	ldr	r2, [pc, #188]	; (8005544 <TIM_Base_SetConfig+0x114>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d02b      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d027      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a2c      	ldr	r2, [pc, #176]	; (8005548 <TIM_Base_SetConfig+0x118>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d023      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2b      	ldr	r2, [pc, #172]	; (800554c <TIM_Base_SetConfig+0x11c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01f      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2a      	ldr	r2, [pc, #168]	; (8005550 <TIM_Base_SetConfig+0x120>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01b      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a29      	ldr	r2, [pc, #164]	; (8005554 <TIM_Base_SetConfig+0x124>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d017      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a28      	ldr	r2, [pc, #160]	; (8005558 <TIM_Base_SetConfig+0x128>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a27      	ldr	r2, [pc, #156]	; (800555c <TIM_Base_SetConfig+0x12c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00f      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a26      	ldr	r2, [pc, #152]	; (8005560 <TIM_Base_SetConfig+0x130>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00b      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a25      	ldr	r2, [pc, #148]	; (8005564 <TIM_Base_SetConfig+0x134>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d007      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a24      	ldr	r2, [pc, #144]	; (8005568 <TIM_Base_SetConfig+0x138>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a23      	ldr	r2, [pc, #140]	; (800556c <TIM_Base_SetConfig+0x13c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d108      	bne.n	80054f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <TIM_Base_SetConfig+0x114>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_Base_SetConfig+0xf8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a0c      	ldr	r2, [pc, #48]	; (8005554 <TIM_Base_SetConfig+0x124>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d103      	bne.n	8005530 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	615a      	str	r2, [r3, #20]
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	40010000 	.word	0x40010000
 8005548:	40000400 	.word	0x40000400
 800554c:	40000800 	.word	0x40000800
 8005550:	40000c00 	.word	0x40000c00
 8005554:	40010400 	.word	0x40010400
 8005558:	40014000 	.word	0x40014000
 800555c:	40014400 	.word	0x40014400
 8005560:	40014800 	.word	0x40014800
 8005564:	40001800 	.word	0x40001800
 8005568:	40001c00 	.word	0x40001c00
 800556c:	40002000 	.word	0x40002000

08005570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 030a 	bic.w	r3, r3, #10
 80055ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b087      	sub	sp, #28
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0210 	bic.w	r2, r3, #16
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800560a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	f043 0307 	orr.w	r3, r3, #7
 8005650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	609a      	str	r2, [r3, #8]
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
 8005670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	021a      	lsls	r2, r3, #8
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	431a      	orrs	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4313      	orrs	r3, r2
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	609a      	str	r2, [r3, #8]
}
 8005698:	bf00      	nop
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e05a      	b.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a21      	ldr	r2, [pc, #132]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d01d      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1b      	ldr	r2, [pc, #108]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1a      	ldr	r2, [pc, #104]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a18      	ldr	r2, [pc, #96]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a17      	ldr	r2, [pc, #92]	; (8005794 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a15      	ldr	r2, [pc, #84]	; (8005798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10c      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800574c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40010000 	.word	0x40010000
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40010400 	.word	0x40010400
 8005794:	40014000 	.word	0x40014000
 8005798:	40001800 	.word	0x40001800

0800579c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e03f      	b.n	8005856 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fb feb2 	bl	8001554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	; 0x24
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fe1d 	bl	8006448 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800581c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800582c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800583c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b08a      	sub	sp, #40	; 0x28
 8005862:	af02      	add	r7, sp, #8
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b20      	cmp	r3, #32
 800587c:	d17c      	bne.n	8005978 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_UART_Transmit+0x2c>
 8005884:	88fb      	ldrh	r3, [r7, #6]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e075      	b.n	800597a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_UART_Transmit+0x3e>
 8005898:	2302      	movs	r3, #2
 800589a:	e06e      	b.n	800597a <HAL_UART_Transmit+0x11c>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2221      	movs	r2, #33	; 0x21
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058b2:	f7fc f855 	bl	8001960 <HAL_GetTick>
 80058b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	88fa      	ldrh	r2, [r7, #6]
 80058bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	88fa      	ldrh	r2, [r7, #6]
 80058c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058cc:	d108      	bne.n	80058e0 <HAL_UART_Transmit+0x82>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	e003      	b.n	80058e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058f0:	e02a      	b.n	8005948 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 fb9b 	bl	8006038 <UART_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e036      	b.n	800597a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	3302      	adds	r3, #2
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	e007      	b.n	800593a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	781a      	ldrb	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	3301      	adds	r3, #1
 8005938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800593e:	b29b      	uxth	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1cf      	bne.n	80058f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2200      	movs	r2, #0
 800595a:	2140      	movs	r1, #64	; 0x40
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fb6b 	bl	8006038 <UART_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e006      	b.n	800597a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b08a      	sub	sp, #40	; 0x28
 8005986:	af02      	add	r7, sp, #8
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	603b      	str	r3, [r7, #0]
 800598e:	4613      	mov	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b20      	cmp	r3, #32
 80059a0:	f040 808c 	bne.w	8005abc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_UART_Receive+0x2e>
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e084      	b.n	8005abe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Receive+0x40>
 80059be:	2302      	movs	r3, #2
 80059c0:	e07d      	b.n	8005abe <HAL_UART_Receive+0x13c>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2222      	movs	r2, #34	; 0x22
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059de:	f7fb ffbf 	bl	8001960 <HAL_GetTick>
 80059e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	88fa      	ldrh	r2, [r7, #6]
 80059e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f8:	d108      	bne.n	8005a0c <HAL_UART_Receive+0x8a>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	e003      	b.n	8005a14 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005a1c:	e043      	b.n	8005aa6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2120      	movs	r1, #32
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fb05 	bl	8006038 <UART_WaitOnFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e042      	b.n	8005abe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10c      	bne.n	8005a58 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	3302      	adds	r3, #2
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e01f      	b.n	8005a98 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a60:	d007      	beq.n	8005a72 <HAL_UART_Receive+0xf0>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <HAL_UART_Receive+0xfe>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e008      	b.n	8005a92 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	3301      	adds	r3, #1
 8005a96:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1b6      	bne.n	8005a1e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e000      	b.n	8005abe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005abc:	2302      	movs	r3, #2
  }
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3720      	adds	r7, #32
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b0ba      	sub	sp, #232	; 0xe8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10f      	bne.n	8005b2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <HAL_UART_IRQHandler+0x66>
 8005b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fbd3 	bl	80062d2 <UART_Receive_IT>
      return;
 8005b2c:	e256      	b.n	8005fdc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80de 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x22c>
 8005b38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80d1 	beq.w	8005cf4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_UART_IRQHandler+0xae>
 8005b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f043 0201 	orr.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <HAL_UART_IRQHandler+0xd2>
 8005b82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d005      	beq.n	8005b9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	f043 0202 	orr.w	r2, r3, #2
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00b      	beq.n	8005bbe <HAL_UART_IRQHandler+0xf6>
 8005ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d005      	beq.n	8005bbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f043 0204 	orr.w	r2, r3, #4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d011      	beq.n	8005bee <HAL_UART_IRQHandler+0x126>
 8005bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d105      	bne.n	8005be2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d005      	beq.n	8005bee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0208 	orr.w	r2, r3, #8
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 81ed 	beq.w	8005fd2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_UART_IRQHandler+0x14e>
 8005c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d002      	beq.n	8005c16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fb5e 	bl	80062d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c20:	2b40      	cmp	r3, #64	; 0x40
 8005c22:	bf0c      	ite	eq
 8005c24:	2301      	moveq	r3, #1
 8005c26:	2300      	movne	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <HAL_UART_IRQHandler+0x17a>
 8005c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d04f      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa66 	bl	8006114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d141      	bne.n	8005cda <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3314      	adds	r3, #20
 8005c5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c64:	e853 3f00 	ldrex	r3, [r3]
 8005c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1d9      	bne.n	8005c56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d013      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	4a7d      	ldr	r2, [pc, #500]	; (8005ea4 <HAL_UART_IRQHandler+0x3dc>)
 8005cb0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fc f8b2 	bl	8001e20 <HAL_DMA_Abort_IT>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d016      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd0:	e00e      	b.n	8005cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f99a 	bl	800600c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd8:	e00a      	b.n	8005cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f996 	bl	800600c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce0:	e006      	b.n	8005cf0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f992 	bl	800600c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cee:	e170      	b.n	8005fd2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf0:	bf00      	nop
    return;
 8005cf2:	e16e      	b.n	8005fd2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	f040 814a 	bne.w	8005f92 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 8143 	beq.w	8005f92 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 813c 	beq.w	8005f92 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	f040 80b4 	bne.w	8005ea8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8140 	beq.w	8005fd6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	f080 8139 	bcs.w	8005fd6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d6a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d76:	f000 8088 	beq.w	8005e8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005da6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005daa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005db2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1d9      	bne.n	8005d7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dd8:	f023 0301 	bic.w	r3, r3, #1
 8005ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3314      	adds	r3, #20
 8005de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005dea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005dee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005df2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005df6:	e841 2300 	strex	r3, r2, [r1]
 8005dfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1e1      	bne.n	8005dc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3314      	adds	r3, #20
 8005e08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	3314      	adds	r3, #20
 8005e22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e3      	bne.n	8005e02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e5a:	f023 0310 	bic.w	r3, r3, #16
 8005e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e6c:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e6e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e3      	bne.n	8005e48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fb ff5b 	bl	8001d40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f8c0 	bl	8006020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ea0:	e099      	b.n	8005fd6 <HAL_UART_IRQHandler+0x50e>
 8005ea2:	bf00      	nop
 8005ea4:	080061db 	.word	0x080061db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 808b 	beq.w	8005fda <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8086 	beq.w	8005fda <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	330c      	adds	r3, #12
 8005eee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ef2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ef4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e3      	bne.n	8005ece <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3314      	adds	r3, #20
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	623b      	str	r3, [r7, #32]
   return(result);
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	f023 0301 	bic.w	r3, r3, #1
 8005f1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3314      	adds	r3, #20
 8005f26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f2a:	633a      	str	r2, [r7, #48]	; 0x30
 8005f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e3      	bne.n	8005f06 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0310 	bic.w	r3, r3, #16
 8005f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f70:	61fa      	str	r2, [r7, #28]
 8005f72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e3      	bne.n	8005f4c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f848 	bl	8006020 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f90:	e023      	b.n	8005fda <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x4ea>
 8005f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 f929 	bl	8006202 <UART_Transmit_IT>
    return;
 8005fb0:	e014      	b.n	8005fdc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00e      	beq.n	8005fdc <HAL_UART_IRQHandler+0x514>
 8005fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f969 	bl	80062a2 <UART_EndTransmit_IT>
    return;
 8005fd0:	e004      	b.n	8005fdc <HAL_UART_IRQHandler+0x514>
    return;
 8005fd2:	bf00      	nop
 8005fd4:	e002      	b.n	8005fdc <HAL_UART_IRQHandler+0x514>
      return;
 8005fd6:	bf00      	nop
 8005fd8:	e000      	b.n	8005fdc <HAL_UART_IRQHandler+0x514>
      return;
 8005fda:	bf00      	nop
  }
}
 8005fdc:	37e8      	adds	r7, #232	; 0xe8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop

08005fe4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b090      	sub	sp, #64	; 0x40
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	4613      	mov	r3, r2
 8006046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006048:	e050      	b.n	80060ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800604a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800604c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006050:	d04c      	beq.n	80060ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <UART_WaitOnFlagUntilTimeout+0x30>
 8006058:	f7fb fc82 	bl	8001960 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006064:	429a      	cmp	r2, r3
 8006066:	d241      	bcs.n	80060ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	330c      	adds	r3, #12
 800606e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	e853 3f00 	ldrex	r3, [r3]
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800607e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	330c      	adds	r3, #12
 8006086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006088:	637a      	str	r2, [r7, #52]	; 0x34
 800608a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800608e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006090:	e841 2300 	strex	r3, r2, [r1]
 8006094:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1e5      	bne.n	8006068 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3314      	adds	r3, #20
 80060a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	e853 3f00 	ldrex	r3, [r3]
 80060aa:	613b      	str	r3, [r7, #16]
   return(result);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 0301 	bic.w	r3, r3, #1
 80060b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3314      	adds	r3, #20
 80060ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060bc:	623a      	str	r2, [r7, #32]
 80060be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c0:	69f9      	ldr	r1, [r7, #28]
 80060c2:	6a3a      	ldr	r2, [r7, #32]
 80060c4:	e841 2300 	strex	r3, r2, [r1]
 80060c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1e5      	bne.n	800609c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2220      	movs	r2, #32
 80060dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e00f      	b.n	800610c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4013      	ands	r3, r2
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	bf0c      	ite	eq
 80060fc:	2301      	moveq	r3, #1
 80060fe:	2300      	movne	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	461a      	mov	r2, r3
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	429a      	cmp	r2, r3
 8006108:	d09f      	beq.n	800604a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3740      	adds	r7, #64	; 0x40
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b095      	sub	sp, #84	; 0x54
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	330c      	adds	r3, #12
 8006122:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	e853 3f00 	ldrex	r3, [r3]
 800612a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800613c:	643a      	str	r2, [r7, #64]	; 0x40
 800613e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006140:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006144:	e841 2300 	strex	r3, r2, [r1]
 8006148:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1e5      	bne.n	800611c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	e853 3f00 	ldrex	r3, [r3]
 800615e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	f023 0301 	bic.w	r3, r3, #1
 8006166:	64bb      	str	r3, [r7, #72]	; 0x48
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3314      	adds	r3, #20
 800616e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006170:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006178:	e841 2300 	strex	r3, r2, [r1]
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e5      	bne.n	8006150 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006188:	2b01      	cmp	r3, #1
 800618a:	d119      	bne.n	80061c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	e853 3f00 	ldrex	r3, [r3]
 800619a:	60bb      	str	r3, [r7, #8]
   return(result);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f023 0310 	bic.w	r3, r3, #16
 80061a2:	647b      	str	r3, [r7, #68]	; 0x44
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061ac:	61ba      	str	r2, [r7, #24]
 80061ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b0:	6979      	ldr	r1, [r7, #20]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	e841 2300 	strex	r3, r2, [r1]
 80061b8:	613b      	str	r3, [r7, #16]
   return(result);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e5      	bne.n	800618c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061ce:	bf00      	nop
 80061d0:	3754      	adds	r7, #84	; 0x54
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff ff09 	bl	800600c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006202:	b480      	push	{r7}
 8006204:	b085      	sub	sp, #20
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b21      	cmp	r3, #33	; 0x21
 8006214:	d13e      	bne.n	8006294 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621e:	d114      	bne.n	800624a <UART_Transmit_IT+0x48>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d110      	bne.n	800624a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800623c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	1c9a      	adds	r2, r3, #2
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	621a      	str	r2, [r3, #32]
 8006248:	e008      	b.n	800625c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	1c59      	adds	r1, r3, #1
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6211      	str	r1, [r2, #32]
 8006254:	781a      	ldrb	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006260:	b29b      	uxth	r3, r3
 8006262:	3b01      	subs	r3, #1
 8006264:	b29b      	uxth	r3, r3
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4619      	mov	r1, r3
 800626a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10f      	bne.n	8006290 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800627e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68da      	ldr	r2, [r3, #12]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800628e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	e000      	b.n	8006296 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006294:	2302      	movs	r3, #2
  }
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff fe8e 	bl	8005fe4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08c      	sub	sp, #48	; 0x30
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b22      	cmp	r3, #34	; 0x22
 80062e4:	f040 80ab 	bne.w	800643e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f0:	d117      	bne.n	8006322 <UART_Receive_IT+0x50>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d113      	bne.n	8006322 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006310:	b29a      	uxth	r2, r3
 8006312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006314:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	1c9a      	adds	r2, r3, #2
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	629a      	str	r2, [r3, #40]	; 0x28
 8006320:	e026      	b.n	8006370 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006334:	d007      	beq.n	8006346 <UART_Receive_IT+0x74>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <UART_Receive_IT+0x82>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	b2da      	uxtb	r2, r3
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	e008      	b.n	8006366 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006360:	b2da      	uxtb	r2, r3
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	1c5a      	adds	r2, r3, #1
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006374:	b29b      	uxth	r3, r3
 8006376:	3b01      	subs	r3, #1
 8006378:	b29b      	uxth	r3, r3
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4619      	mov	r1, r3
 800637e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006380:	2b00      	cmp	r3, #0
 8006382:	d15a      	bne.n	800643a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0220 	bic.w	r2, r2, #32
 8006392:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	695a      	ldr	r2, [r3, #20]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0201 	bic.w	r2, r2, #1
 80063b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d135      	bne.n	8006430 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	330c      	adds	r3, #12
 80063d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	613b      	str	r3, [r7, #16]
   return(result);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f023 0310 	bic.w	r3, r3, #16
 80063e0:	627b      	str	r3, [r7, #36]	; 0x24
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ea:	623a      	str	r2, [r7, #32]
 80063ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ee:	69f9      	ldr	r1, [r7, #28]
 80063f0:	6a3a      	ldr	r2, [r7, #32]
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e5      	bne.n	80063ca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b10      	cmp	r3, #16
 800640a:	d10a      	bne.n	8006422 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff fdf9 	bl	8006020 <HAL_UARTEx_RxEventCallback>
 800642e:	e002      	b.n	8006436 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff fde1 	bl	8005ff8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	e002      	b.n	8006440 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	e000      	b.n	8006440 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800643e:	2302      	movs	r3, #2
  }
}
 8006440:	4618      	mov	r0, r3
 8006442:	3730      	adds	r7, #48	; 0x30
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800644c:	b0c0      	sub	sp, #256	; 0x100
 800644e:	af00      	add	r7, sp, #0
 8006450:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	ea40 0301 	orr.w	r3, r0, r1
 8006470:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	431a      	orrs	r2, r3
 8006480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	431a      	orrs	r2, r3
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064a0:	f021 010c 	bic.w	r1, r1, #12
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064ae:	430b      	orrs	r3, r1
 80064b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	6999      	ldr	r1, [r3, #24]
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	ea40 0301 	orr.w	r3, r0, r1
 80064ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	4b8f      	ldr	r3, [pc, #572]	; (8006714 <UART_SetConfig+0x2cc>)
 80064d8:	429a      	cmp	r2, r3
 80064da:	d005      	beq.n	80064e8 <UART_SetConfig+0xa0>
 80064dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b8d      	ldr	r3, [pc, #564]	; (8006718 <UART_SetConfig+0x2d0>)
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d104      	bne.n	80064f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064e8:	f7fd ff88 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 80064ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064f0:	e003      	b.n	80064fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064f2:	f7fd ff6f 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 80064f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006504:	f040 810c 	bne.w	8006720 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800650c:	2200      	movs	r2, #0
 800650e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006512:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006516:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800651a:	4622      	mov	r2, r4
 800651c:	462b      	mov	r3, r5
 800651e:	1891      	adds	r1, r2, r2
 8006520:	65b9      	str	r1, [r7, #88]	; 0x58
 8006522:	415b      	adcs	r3, r3
 8006524:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006526:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800652a:	4621      	mov	r1, r4
 800652c:	eb12 0801 	adds.w	r8, r2, r1
 8006530:	4629      	mov	r1, r5
 8006532:	eb43 0901 	adc.w	r9, r3, r1
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800654a:	4690      	mov	r8, r2
 800654c:	4699      	mov	r9, r3
 800654e:	4623      	mov	r3, r4
 8006550:	eb18 0303 	adds.w	r3, r8, r3
 8006554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006558:	462b      	mov	r3, r5
 800655a:	eb49 0303 	adc.w	r3, r9, r3
 800655e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800656e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006572:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006576:	460b      	mov	r3, r1
 8006578:	18db      	adds	r3, r3, r3
 800657a:	653b      	str	r3, [r7, #80]	; 0x50
 800657c:	4613      	mov	r3, r2
 800657e:	eb42 0303 	adc.w	r3, r2, r3
 8006582:	657b      	str	r3, [r7, #84]	; 0x54
 8006584:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006588:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800658c:	f7f9 fe1c 	bl	80001c8 <__aeabi_uldivmod>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4b61      	ldr	r3, [pc, #388]	; (800671c <UART_SetConfig+0x2d4>)
 8006596:	fba3 2302 	umull	r2, r3, r3, r2
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	011c      	lsls	r4, r3, #4
 800659e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065b0:	4642      	mov	r2, r8
 80065b2:	464b      	mov	r3, r9
 80065b4:	1891      	adds	r1, r2, r2
 80065b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80065b8:	415b      	adcs	r3, r3
 80065ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065c0:	4641      	mov	r1, r8
 80065c2:	eb12 0a01 	adds.w	sl, r2, r1
 80065c6:	4649      	mov	r1, r9
 80065c8:	eb43 0b01 	adc.w	fp, r3, r1
 80065cc:	f04f 0200 	mov.w	r2, #0
 80065d0:	f04f 0300 	mov.w	r3, #0
 80065d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065e0:	4692      	mov	sl, r2
 80065e2:	469b      	mov	fp, r3
 80065e4:	4643      	mov	r3, r8
 80065e6:	eb1a 0303 	adds.w	r3, sl, r3
 80065ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065ee:	464b      	mov	r3, r9
 80065f0:	eb4b 0303 	adc.w	r3, fp, r3
 80065f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006604:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006608:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800660c:	460b      	mov	r3, r1
 800660e:	18db      	adds	r3, r3, r3
 8006610:	643b      	str	r3, [r7, #64]	; 0x40
 8006612:	4613      	mov	r3, r2
 8006614:	eb42 0303 	adc.w	r3, r2, r3
 8006618:	647b      	str	r3, [r7, #68]	; 0x44
 800661a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800661e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006622:	f7f9 fdd1 	bl	80001c8 <__aeabi_uldivmod>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4611      	mov	r1, r2
 800662c:	4b3b      	ldr	r3, [pc, #236]	; (800671c <UART_SetConfig+0x2d4>)
 800662e:	fba3 2301 	umull	r2, r3, r3, r1
 8006632:	095b      	lsrs	r3, r3, #5
 8006634:	2264      	movs	r2, #100	; 0x64
 8006636:	fb02 f303 	mul.w	r3, r2, r3
 800663a:	1acb      	subs	r3, r1, r3
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006642:	4b36      	ldr	r3, [pc, #216]	; (800671c <UART_SetConfig+0x2d4>)
 8006644:	fba3 2302 	umull	r2, r3, r3, r2
 8006648:	095b      	lsrs	r3, r3, #5
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006650:	441c      	add	r4, r3
 8006652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006656:	2200      	movs	r2, #0
 8006658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800665c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006660:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	1891      	adds	r1, r2, r2
 800666a:	63b9      	str	r1, [r7, #56]	; 0x38
 800666c:	415b      	adcs	r3, r3
 800666e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006670:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006674:	4641      	mov	r1, r8
 8006676:	1851      	adds	r1, r2, r1
 8006678:	6339      	str	r1, [r7, #48]	; 0x30
 800667a:	4649      	mov	r1, r9
 800667c:	414b      	adcs	r3, r1
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
 8006680:	f04f 0200 	mov.w	r2, #0
 8006684:	f04f 0300 	mov.w	r3, #0
 8006688:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800668c:	4659      	mov	r1, fp
 800668e:	00cb      	lsls	r3, r1, #3
 8006690:	4651      	mov	r1, sl
 8006692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006696:	4651      	mov	r1, sl
 8006698:	00ca      	lsls	r2, r1, #3
 800669a:	4610      	mov	r0, r2
 800669c:	4619      	mov	r1, r3
 800669e:	4603      	mov	r3, r0
 80066a0:	4642      	mov	r2, r8
 80066a2:	189b      	adds	r3, r3, r2
 80066a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066a8:	464b      	mov	r3, r9
 80066aa:	460a      	mov	r2, r1
 80066ac:	eb42 0303 	adc.w	r3, r2, r3
 80066b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066c8:	460b      	mov	r3, r1
 80066ca:	18db      	adds	r3, r3, r3
 80066cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ce:	4613      	mov	r3, r2
 80066d0:	eb42 0303 	adc.w	r3, r2, r3
 80066d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066de:	f7f9 fd73 	bl	80001c8 <__aeabi_uldivmod>
 80066e2:	4602      	mov	r2, r0
 80066e4:	460b      	mov	r3, r1
 80066e6:	4b0d      	ldr	r3, [pc, #52]	; (800671c <UART_SetConfig+0x2d4>)
 80066e8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	2164      	movs	r1, #100	; 0x64
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	00db      	lsls	r3, r3, #3
 80066f8:	3332      	adds	r3, #50	; 0x32
 80066fa:	4a08      	ldr	r2, [pc, #32]	; (800671c <UART_SetConfig+0x2d4>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f003 0207 	and.w	r2, r3, #7
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4422      	add	r2, r4
 800670e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006710:	e105      	b.n	800691e <UART_SetConfig+0x4d6>
 8006712:	bf00      	nop
 8006714:	40011000 	.word	0x40011000
 8006718:	40011400 	.word	0x40011400
 800671c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006724:	2200      	movs	r2, #0
 8006726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800672a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800672e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006732:	4642      	mov	r2, r8
 8006734:	464b      	mov	r3, r9
 8006736:	1891      	adds	r1, r2, r2
 8006738:	6239      	str	r1, [r7, #32]
 800673a:	415b      	adcs	r3, r3
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
 800673e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006742:	4641      	mov	r1, r8
 8006744:	1854      	adds	r4, r2, r1
 8006746:	4649      	mov	r1, r9
 8006748:	eb43 0501 	adc.w	r5, r3, r1
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	f04f 0300 	mov.w	r3, #0
 8006754:	00eb      	lsls	r3, r5, #3
 8006756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800675a:	00e2      	lsls	r2, r4, #3
 800675c:	4614      	mov	r4, r2
 800675e:	461d      	mov	r5, r3
 8006760:	4643      	mov	r3, r8
 8006762:	18e3      	adds	r3, r4, r3
 8006764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006768:	464b      	mov	r3, r9
 800676a:	eb45 0303 	adc.w	r3, r5, r3
 800676e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800677e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800678e:	4629      	mov	r1, r5
 8006790:	008b      	lsls	r3, r1, #2
 8006792:	4621      	mov	r1, r4
 8006794:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006798:	4621      	mov	r1, r4
 800679a:	008a      	lsls	r2, r1, #2
 800679c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067a0:	f7f9 fd12 	bl	80001c8 <__aeabi_uldivmod>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4b60      	ldr	r3, [pc, #384]	; (800692c <UART_SetConfig+0x4e4>)
 80067aa:	fba3 2302 	umull	r2, r3, r3, r2
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	011c      	lsls	r4, r3, #4
 80067b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067c4:	4642      	mov	r2, r8
 80067c6:	464b      	mov	r3, r9
 80067c8:	1891      	adds	r1, r2, r2
 80067ca:	61b9      	str	r1, [r7, #24]
 80067cc:	415b      	adcs	r3, r3
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067d4:	4641      	mov	r1, r8
 80067d6:	1851      	adds	r1, r2, r1
 80067d8:	6139      	str	r1, [r7, #16]
 80067da:	4649      	mov	r1, r9
 80067dc:	414b      	adcs	r3, r1
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067ec:	4659      	mov	r1, fp
 80067ee:	00cb      	lsls	r3, r1, #3
 80067f0:	4651      	mov	r1, sl
 80067f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067f6:	4651      	mov	r1, sl
 80067f8:	00ca      	lsls	r2, r1, #3
 80067fa:	4610      	mov	r0, r2
 80067fc:	4619      	mov	r1, r3
 80067fe:	4603      	mov	r3, r0
 8006800:	4642      	mov	r2, r8
 8006802:	189b      	adds	r3, r3, r2
 8006804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006808:	464b      	mov	r3, r9
 800680a:	460a      	mov	r2, r1
 800680c:	eb42 0303 	adc.w	r3, r2, r3
 8006810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	67bb      	str	r3, [r7, #120]	; 0x78
 800681e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800682c:	4649      	mov	r1, r9
 800682e:	008b      	lsls	r3, r1, #2
 8006830:	4641      	mov	r1, r8
 8006832:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006836:	4641      	mov	r1, r8
 8006838:	008a      	lsls	r2, r1, #2
 800683a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800683e:	f7f9 fcc3 	bl	80001c8 <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4b39      	ldr	r3, [pc, #228]	; (800692c <UART_SetConfig+0x4e4>)
 8006848:	fba3 1302 	umull	r1, r3, r3, r2
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	2164      	movs	r1, #100	; 0x64
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	3332      	adds	r3, #50	; 0x32
 800685a:	4a34      	ldr	r2, [pc, #208]	; (800692c <UART_SetConfig+0x4e4>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006866:	441c      	add	r4, r3
 8006868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800686c:	2200      	movs	r2, #0
 800686e:	673b      	str	r3, [r7, #112]	; 0x70
 8006870:	677a      	str	r2, [r7, #116]	; 0x74
 8006872:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006876:	4642      	mov	r2, r8
 8006878:	464b      	mov	r3, r9
 800687a:	1891      	adds	r1, r2, r2
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	415b      	adcs	r3, r3
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006886:	4641      	mov	r1, r8
 8006888:	1851      	adds	r1, r2, r1
 800688a:	6039      	str	r1, [r7, #0]
 800688c:	4649      	mov	r1, r9
 800688e:	414b      	adcs	r3, r1
 8006890:	607b      	str	r3, [r7, #4]
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800689e:	4659      	mov	r1, fp
 80068a0:	00cb      	lsls	r3, r1, #3
 80068a2:	4651      	mov	r1, sl
 80068a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068a8:	4651      	mov	r1, sl
 80068aa:	00ca      	lsls	r2, r1, #3
 80068ac:	4610      	mov	r0, r2
 80068ae:	4619      	mov	r1, r3
 80068b0:	4603      	mov	r3, r0
 80068b2:	4642      	mov	r2, r8
 80068b4:	189b      	adds	r3, r3, r2
 80068b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068b8:	464b      	mov	r3, r9
 80068ba:	460a      	mov	r2, r1
 80068bc:	eb42 0303 	adc.w	r3, r2, r3
 80068c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	663b      	str	r3, [r7, #96]	; 0x60
 80068cc:	667a      	str	r2, [r7, #100]	; 0x64
 80068ce:	f04f 0200 	mov.w	r2, #0
 80068d2:	f04f 0300 	mov.w	r3, #0
 80068d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068da:	4649      	mov	r1, r9
 80068dc:	008b      	lsls	r3, r1, #2
 80068de:	4641      	mov	r1, r8
 80068e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e4:	4641      	mov	r1, r8
 80068e6:	008a      	lsls	r2, r1, #2
 80068e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068ec:	f7f9 fc6c 	bl	80001c8 <__aeabi_uldivmod>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4b0d      	ldr	r3, [pc, #52]	; (800692c <UART_SetConfig+0x4e4>)
 80068f6:	fba3 1302 	umull	r1, r3, r3, r2
 80068fa:	095b      	lsrs	r3, r3, #5
 80068fc:	2164      	movs	r1, #100	; 0x64
 80068fe:	fb01 f303 	mul.w	r3, r1, r3
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	3332      	adds	r3, #50	; 0x32
 8006908:	4a08      	ldr	r2, [pc, #32]	; (800692c <UART_SetConfig+0x4e4>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	095b      	lsrs	r3, r3, #5
 8006910:	f003 020f 	and.w	r2, r3, #15
 8006914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4422      	add	r2, r4
 800691c:	609a      	str	r2, [r3, #8]
}
 800691e:	bf00      	nop
 8006920:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006924:	46bd      	mov	sp, r7
 8006926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800692a:	bf00      	nop
 800692c:	51eb851f 	.word	0x51eb851f

08006930 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006930:	b084      	sub	sp, #16
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	f107 001c 	add.w	r0, r7, #28
 800693e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	2b01      	cmp	r3, #1
 8006946:	d122      	bne.n	800698e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800695c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006972:	2b01      	cmp	r3, #1
 8006974:	d105      	bne.n	8006982 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 fbee 	bl	8008164 <USB_CoreReset>
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]
 800698c:	e01a      	b.n	80069c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fbe2 	bl	8008164 <USB_CoreReset>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d106      	bne.n	80069b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	639a      	str	r2, [r3, #56]	; 0x38
 80069b6:	e005      	b.n	80069c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d10b      	bne.n	80069e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f043 0206 	orr.w	r2, r3, #6
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f043 0220 	orr.w	r2, r3, #32
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ee:	b004      	add	sp, #16
 80069f0:	4770      	bx	lr
	...

080069f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d165      	bne.n	8006ad4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4a41      	ldr	r2, [pc, #260]	; (8006b10 <USB_SetTurnaroundTime+0x11c>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d906      	bls.n	8006a1e <USB_SetTurnaroundTime+0x2a>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	4a40      	ldr	r2, [pc, #256]	; (8006b14 <USB_SetTurnaroundTime+0x120>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d202      	bcs.n	8006a1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a18:	230f      	movs	r3, #15
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e062      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	4a3c      	ldr	r2, [pc, #240]	; (8006b14 <USB_SetTurnaroundTime+0x120>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d306      	bcc.n	8006a34 <USB_SetTurnaroundTime+0x40>
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4a3b      	ldr	r2, [pc, #236]	; (8006b18 <USB_SetTurnaroundTime+0x124>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d202      	bcs.n	8006a34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a2e:	230e      	movs	r3, #14
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e057      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4a38      	ldr	r2, [pc, #224]	; (8006b18 <USB_SetTurnaroundTime+0x124>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d306      	bcc.n	8006a4a <USB_SetTurnaroundTime+0x56>
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4a37      	ldr	r2, [pc, #220]	; (8006b1c <USB_SetTurnaroundTime+0x128>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d202      	bcs.n	8006a4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a44:	230d      	movs	r3, #13
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	e04c      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	4a33      	ldr	r2, [pc, #204]	; (8006b1c <USB_SetTurnaroundTime+0x128>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d306      	bcc.n	8006a60 <USB_SetTurnaroundTime+0x6c>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	4a32      	ldr	r2, [pc, #200]	; (8006b20 <USB_SetTurnaroundTime+0x12c>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d802      	bhi.n	8006a60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a5a:	230c      	movs	r3, #12
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	e041      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4a2f      	ldr	r2, [pc, #188]	; (8006b20 <USB_SetTurnaroundTime+0x12c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d906      	bls.n	8006a76 <USB_SetTurnaroundTime+0x82>
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4a2e      	ldr	r2, [pc, #184]	; (8006b24 <USB_SetTurnaroundTime+0x130>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d802      	bhi.n	8006a76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a70:	230b      	movs	r3, #11
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e036      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4a2a      	ldr	r2, [pc, #168]	; (8006b24 <USB_SetTurnaroundTime+0x130>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d906      	bls.n	8006a8c <USB_SetTurnaroundTime+0x98>
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	4a29      	ldr	r2, [pc, #164]	; (8006b28 <USB_SetTurnaroundTime+0x134>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d802      	bhi.n	8006a8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a86:	230a      	movs	r3, #10
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	e02b      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4a26      	ldr	r2, [pc, #152]	; (8006b28 <USB_SetTurnaroundTime+0x134>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d906      	bls.n	8006aa2 <USB_SetTurnaroundTime+0xae>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	4a25      	ldr	r2, [pc, #148]	; (8006b2c <USB_SetTurnaroundTime+0x138>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d202      	bcs.n	8006aa2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a9c:	2309      	movs	r3, #9
 8006a9e:	617b      	str	r3, [r7, #20]
 8006aa0:	e020      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4a21      	ldr	r2, [pc, #132]	; (8006b2c <USB_SetTurnaroundTime+0x138>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d306      	bcc.n	8006ab8 <USB_SetTurnaroundTime+0xc4>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4a20      	ldr	r2, [pc, #128]	; (8006b30 <USB_SetTurnaroundTime+0x13c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d802      	bhi.n	8006ab8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	e015      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4a1d      	ldr	r2, [pc, #116]	; (8006b30 <USB_SetTurnaroundTime+0x13c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d906      	bls.n	8006ace <USB_SetTurnaroundTime+0xda>
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	4a1c      	ldr	r2, [pc, #112]	; (8006b34 <USB_SetTurnaroundTime+0x140>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d202      	bcs.n	8006ace <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ac8:	2307      	movs	r3, #7
 8006aca:	617b      	str	r3, [r7, #20]
 8006acc:	e00a      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006ace:	2306      	movs	r3, #6
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	e007      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d102      	bne.n	8006ae0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006ada:	2309      	movs	r3, #9
 8006adc:	617b      	str	r3, [r7, #20]
 8006ade:	e001      	b.n	8006ae4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ae0:	2309      	movs	r3, #9
 8006ae2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	029b      	lsls	r3, r3, #10
 8006af8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006afc:	431a      	orrs	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	00d8acbf 	.word	0x00d8acbf
 8006b14:	00e4e1c0 	.word	0x00e4e1c0
 8006b18:	00f42400 	.word	0x00f42400
 8006b1c:	01067380 	.word	0x01067380
 8006b20:	011a499f 	.word	0x011a499f
 8006b24:	01312cff 	.word	0x01312cff
 8006b28:	014ca43f 	.word	0x014ca43f
 8006b2c:	016e3600 	.word	0x016e3600
 8006b30:	01a6ab1f 	.word	0x01a6ab1f
 8006b34:	01e84800 	.word	0x01e84800

08006b38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f043 0201 	orr.w	r2, r3, #1
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f023 0201 	bic.w	r2, r3, #1
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d115      	bne.n	8006bca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006baa:	2001      	movs	r0, #1
 8006bac:	f7fa fee4 	bl	8001978 <HAL_Delay>
      ms++;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 fa45 	bl	8008046 <USB_GetMode>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d01e      	beq.n	8006c00 <USB_SetCurrentMode+0x84>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b31      	cmp	r3, #49	; 0x31
 8006bc6:	d9f0      	bls.n	8006baa <USB_SetCurrentMode+0x2e>
 8006bc8:	e01a      	b.n	8006c00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d115      	bne.n	8006bfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bdc:	2001      	movs	r0, #1
 8006bde:	f7fa fecb 	bl	8001978 <HAL_Delay>
      ms++;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3301      	adds	r3, #1
 8006be6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 fa2c 	bl	8008046 <USB_GetMode>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <USB_SetCurrentMode+0x84>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b31      	cmp	r3, #49	; 0x31
 8006bf8:	d9f0      	bls.n	8006bdc <USB_SetCurrentMode+0x60>
 8006bfa:	e001      	b.n	8006c00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e005      	b.n	8006c0c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b32      	cmp	r3, #50	; 0x32
 8006c04:	d101      	bne.n	8006c0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c14:	b084      	sub	sp, #16
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	613b      	str	r3, [r7, #16]
 8006c32:	e009      	b.n	8006c48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	3340      	adds	r3, #64	; 0x40
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	2200      	movs	r2, #0
 8006c40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	3301      	adds	r3, #1
 8006c46:	613b      	str	r3, [r7, #16]
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	2b0e      	cmp	r3, #14
 8006c4c:	d9f2      	bls.n	8006c34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11c      	bne.n	8006c8e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c62:	f043 0302 	orr.w	r3, r3, #2
 8006c66:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	639a      	str	r2, [r3, #56]	; 0x38
 8006c8c:	e00b      	b.n	8006ca6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cac:	461a      	mov	r2, r3
 8006cae:	2300      	movs	r3, #0
 8006cb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	4619      	mov	r1, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	680b      	ldr	r3, [r1, #0]
 8006cc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d10c      	bne.n	8006ce6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d104      	bne.n	8006cdc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f965 	bl	8006fa4 <USB_SetDevSpeed>
 8006cda:	e008      	b.n	8006cee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cdc:	2101      	movs	r1, #1
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f960 	bl	8006fa4 <USB_SetDevSpeed>
 8006ce4:	e003      	b.n	8006cee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ce6:	2103      	movs	r1, #3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f95b 	bl	8006fa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cee:	2110      	movs	r1, #16
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f8f3 	bl	8006edc <USB_FlushTxFifo>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f91f 	bl	8006f44 <USB_FlushRxFifo>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d16:	461a      	mov	r2, r3
 8006d18:	2300      	movs	r3, #0
 8006d1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d22:	461a      	mov	r2, r3
 8006d24:	2300      	movs	r3, #0
 8006d26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2e:	461a      	mov	r2, r3
 8006d30:	2300      	movs	r3, #0
 8006d32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d34:	2300      	movs	r3, #0
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	e043      	b.n	8006dc2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d50:	d118      	bne.n	8006d84 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d64:	461a      	mov	r2, r3
 8006d66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	e013      	b.n	8006d96 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	e008      	b.n	8006d96 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d90:	461a      	mov	r2, r3
 8006d92:	2300      	movs	r3, #0
 8006d94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da2:	461a      	mov	r2, r3
 8006da4:	2300      	movs	r3, #0
 8006da6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db4:	461a      	mov	r2, r3
 8006db6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	613b      	str	r3, [r7, #16]
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d3b7      	bcc.n	8006d3a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dca:	2300      	movs	r3, #0
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	e043      	b.n	8006e58 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006de6:	d118      	bne.n	8006e1a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e00:	6013      	str	r3, [r2, #0]
 8006e02:	e013      	b.n	8006e2c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e10:	461a      	mov	r2, r3
 8006e12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	e008      	b.n	8006e2c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e26:	461a      	mov	r2, r3
 8006e28:	2300      	movs	r3, #0
 8006e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e38:	461a      	mov	r2, r3
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	3301      	adds	r3, #1
 8006e56:	613b      	str	r3, [r7, #16]
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d3b7      	bcc.n	8006dd0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d105      	bne.n	8006e94 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f043 0210 	orr.w	r2, r3, #16
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <USB_DevInit+0x2c4>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f043 0208 	orr.w	r2, r3, #8
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d107      	bne.n	8006ec8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ec0:	f043 0304 	orr.w	r3, r3, #4
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ed4:	b004      	add	sp, #16
 8006ed6:	4770      	bx	lr
 8006ed8:	803c3800 	.word	0x803c3800

08006edc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3301      	adds	r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a13      	ldr	r2, [pc, #76]	; (8006f40 <USB_FlushTxFifo+0x64>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d901      	bls.n	8006efc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e01b      	b.n	8006f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	daf2      	bge.n	8006eea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	019b      	lsls	r3, r3, #6
 8006f0c:	f043 0220 	orr.w	r2, r3, #32
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4a08      	ldr	r2, [pc, #32]	; (8006f40 <USB_FlushTxFifo+0x64>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d901      	bls.n	8006f26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e006      	b.n	8006f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0320 	and.w	r3, r3, #32
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d0f0      	beq.n	8006f14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	00030d40 	.word	0x00030d40

08006f44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4a11      	ldr	r2, [pc, #68]	; (8006fa0 <USB_FlushRxFifo+0x5c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d901      	bls.n	8006f62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e018      	b.n	8006f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	daf2      	bge.n	8006f50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2210      	movs	r2, #16
 8006f72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4a08      	ldr	r2, [pc, #32]	; (8006fa0 <USB_FlushRxFifo+0x5c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d901      	bls.n	8006f86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e006      	b.n	8006f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d0f0      	beq.n	8006f74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	00030d40 	.word	0x00030d40

08006fa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	78fb      	ldrb	r3, [r7, #3]
 8006fbe:	68f9      	ldr	r1, [r7, #12]
 8006fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr

08006fd6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd6:	b480      	push	{r7}
 8006fd8:	b087      	sub	sp, #28
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f003 0306 	and.w	r3, r3, #6
 8006fee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d102      	bne.n	8006ffc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]
 8006ffa:	e00a      	b.n	8007012 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d002      	beq.n	8007008 <USB_GetDevSpeed+0x32>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b06      	cmp	r3, #6
 8007006:	d102      	bne.n	800700e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007008:	2302      	movs	r3, #2
 800700a:	75fb      	strb	r3, [r7, #23]
 800700c:	e001      	b.n	8007012 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800700e:	230f      	movs	r3, #15
 8007010:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
}
 8007014:	4618      	mov	r0, r3
 8007016:	371c      	adds	r7, #28
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	785b      	ldrb	r3, [r3, #1]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d13a      	bne.n	80070b2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f003 030f 	and.w	r3, r3, #15
 800704c:	2101      	movs	r1, #1
 800704e:	fa01 f303 	lsl.w	r3, r1, r3
 8007052:	b29b      	uxth	r3, r3
 8007054:	68f9      	ldr	r1, [r7, #12]
 8007056:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800705a:	4313      	orrs	r3, r2
 800705c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d155      	bne.n	8007120 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	791b      	ldrb	r3, [r3, #4]
 800708e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007090:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	059b      	lsls	r3, r3, #22
 8007096:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007098:	4313      	orrs	r3, r2
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	0151      	lsls	r1, r2, #5
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	440a      	add	r2, r1
 80070a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ae:	6013      	str	r3, [r2, #0]
 80070b0:	e036      	b.n	8007120 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b8:	69da      	ldr	r2, [r3, #28]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	2101      	movs	r1, #1
 80070c4:	fa01 f303 	lsl.w	r3, r1, r3
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	68f9      	ldr	r1, [r7, #12]
 80070cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070d0:	4313      	orrs	r3, r2
 80070d2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d11a      	bne.n	8007120 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	791b      	ldrb	r3, [r3, #4]
 8007104:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007106:	430b      	orrs	r3, r1
 8007108:	4313      	orrs	r3, r2
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	0151      	lsls	r1, r2, #5
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	440a      	add	r2, r1
 8007112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800711e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3714      	adds	r7, #20
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	785b      	ldrb	r3, [r3, #1]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d161      	bne.n	8007210 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800715e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007162:	d11f      	bne.n	80071a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007182:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	0151      	lsls	r1, r2, #5
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	440a      	add	r2, r1
 800719a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 030f 	and.w	r3, r3, #15
 80071b4:	2101      	movs	r1, #1
 80071b6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	43db      	mvns	r3, r3
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071c4:	4013      	ands	r3, r2
 80071c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ce:	69da      	ldr	r2, [r3, #28]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	f003 030f 	and.w	r3, r3, #15
 80071d8:	2101      	movs	r1, #1
 80071da:	fa01 f303 	lsl.w	r3, r1, r3
 80071de:	b29b      	uxth	r3, r3
 80071e0:	43db      	mvns	r3, r3
 80071e2:	68f9      	ldr	r1, [r7, #12]
 80071e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e8:	4013      	ands	r3, r2
 80071ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	0159      	lsls	r1, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	440b      	add	r3, r1
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	4619      	mov	r1, r3
 8007208:	4b35      	ldr	r3, [pc, #212]	; (80072e0 <USB_DeactivateEndpoint+0x1b0>)
 800720a:	4013      	ands	r3, r2
 800720c:	600b      	str	r3, [r1, #0]
 800720e:	e060      	b.n	80072d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007226:	d11f      	bne.n	8007268 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	440a      	add	r2, r1
 800723e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007246:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	440a      	add	r2, r1
 800725e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007266:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	2101      	movs	r1, #1
 800727a:	fa01 f303 	lsl.w	r3, r1, r3
 800727e:	041b      	lsls	r3, r3, #16
 8007280:	43db      	mvns	r3, r3
 8007282:	68f9      	ldr	r1, [r7, #12]
 8007284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007288:	4013      	ands	r3, r2
 800728a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	2101      	movs	r1, #1
 800729e:	fa01 f303 	lsl.w	r3, r1, r3
 80072a2:	041b      	lsls	r3, r3, #16
 80072a4:	43db      	mvns	r3, r3
 80072a6:	68f9      	ldr	r1, [r7, #12]
 80072a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ac:	4013      	ands	r3, r2
 80072ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	0159      	lsls	r1, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	440b      	add	r3, r1
 80072c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ca:	4619      	mov	r1, r3
 80072cc:	4b05      	ldr	r3, [pc, #20]	; (80072e4 <USB_DeactivateEndpoint+0x1b4>)
 80072ce:	4013      	ands	r3, r2
 80072d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	ec337800 	.word	0xec337800
 80072e4:	eff37800 	.word	0xeff37800

080072e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	4613      	mov	r3, r2
 80072f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	785b      	ldrb	r3, [r3, #1]
 8007304:	2b01      	cmp	r3, #1
 8007306:	f040 815c 	bne.w	80075c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d132      	bne.n	8007378 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	69ba      	ldr	r2, [r7, #24]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	69fa      	ldr	r2, [r7, #28]
 8007326:	440a      	add	r2, r1
 8007328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007330:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007334:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007350:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	440a      	add	r2, r1
 800736c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007370:	0cdb      	lsrs	r3, r3, #19
 8007372:	04db      	lsls	r3, r3, #19
 8007374:	6113      	str	r3, [r2, #16]
 8007376:	e074      	b.n	8007462 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	0151      	lsls	r1, r2, #5
 800738a:	69fa      	ldr	r2, [r7, #28]
 800738c:	440a      	add	r2, r1
 800738e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007392:	0cdb      	lsrs	r3, r3, #19
 8007394:	04db      	lsls	r3, r3, #19
 8007396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	015a      	lsls	r2, r3, #5
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	4413      	add	r3, r2
 80073a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	0151      	lsls	r1, r2, #5
 80073aa:	69fa      	ldr	r2, [r7, #28]
 80073ac:	440a      	add	r2, r1
 80073ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6999      	ldr	r1, [r3, #24]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	440b      	add	r3, r1
 80073d4:	1e59      	subs	r1, r3, #1
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	fbb1 f3f3 	udiv	r3, r1, r3
 80073de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073e0:	4b9d      	ldr	r3, [pc, #628]	; (8007658 <USB_EPStartXfer+0x370>)
 80073e2:	400b      	ands	r3, r1
 80073e4:	69b9      	ldr	r1, [r7, #24]
 80073e6:	0148      	lsls	r0, r1, #5
 80073e8:	69f9      	ldr	r1, [r7, #28]
 80073ea:	4401      	add	r1, r0
 80073ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80073f0:	4313      	orrs	r3, r2
 80073f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007400:	691a      	ldr	r2, [r3, #16]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800740a:	69b9      	ldr	r1, [r7, #24]
 800740c:	0148      	lsls	r0, r1, #5
 800740e:	69f9      	ldr	r1, [r7, #28]
 8007410:	4401      	add	r1, r0
 8007412:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007416:	4313      	orrs	r3, r2
 8007418:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	791b      	ldrb	r3, [r3, #4]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d11f      	bne.n	8007462 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	440a      	add	r2, r1
 8007438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800743c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007440:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007460:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d14b      	bne.n	8007500 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	461a      	mov	r2, r3
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	791b      	ldrb	r3, [r3, #4]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d128      	bne.n	80074de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007498:	2b00      	cmp	r3, #0
 800749a:	d110      	bne.n	80074be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	0151      	lsls	r1, r2, #5
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	440a      	add	r2, r1
 80074b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ba:	6013      	str	r3, [r2, #0]
 80074bc:	e00f      	b.n	80074de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	e133      	b.n	8007768 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800751e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	791b      	ldrb	r3, [r3, #4]
 8007524:	2b01      	cmp	r3, #1
 8007526:	d015      	beq.n	8007554 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 811b 	beq.w	8007768 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	2101      	movs	r1, #1
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	69f9      	ldr	r1, [r7, #28]
 800754a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800754e:	4313      	orrs	r3, r2
 8007550:	634b      	str	r3, [r1, #52]	; 0x34
 8007552:	e109      	b.n	8007768 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007560:	2b00      	cmp	r3, #0
 8007562:	d110      	bne.n	8007586 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69ba      	ldr	r2, [r7, #24]
 8007574:	0151      	lsls	r1, r2, #5
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	440a      	add	r2, r1
 800757a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800757e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e00f      	b.n	80075a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	69fa      	ldr	r2, [r7, #28]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6919      	ldr	r1, [r3, #16]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	b298      	uxth	r0, r3
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	4603      	mov	r3, r0
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fade 	bl	8007b7c <USB_WritePacket>
 80075c0:	e0d2      	b.n	8007768 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ce:	691b      	ldr	r3, [r3, #16]
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075dc:	0cdb      	lsrs	r3, r3, #19
 80075de:	04db      	lsls	r3, r3, #19
 80075e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	0151      	lsls	r1, r2, #5
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	440a      	add	r2, r1
 80075f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007600:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007604:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d126      	bne.n	800765c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761a:	691a      	ldr	r2, [r3, #16]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007624:	69b9      	ldr	r1, [r7, #24]
 8007626:	0148      	lsls	r0, r1, #5
 8007628:	69f9      	ldr	r1, [r7, #28]
 800762a:	4401      	add	r1, r0
 800762c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007630:	4313      	orrs	r3, r2
 8007632:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007652:	6113      	str	r3, [r2, #16]
 8007654:	e03a      	b.n	80076cc <USB_EPStartXfer+0x3e4>
 8007656:	bf00      	nop
 8007658:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	699a      	ldr	r2, [r3, #24]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4413      	add	r3, r2
 8007666:	1e5a      	subs	r2, r3, #1
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007670:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	8afa      	ldrh	r2, [r7, #22]
 8007678:	fb03 f202 	mul.w	r2, r3, r2
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800768c:	691a      	ldr	r2, [r3, #16]
 800768e:	8afb      	ldrh	r3, [r7, #22]
 8007690:	04d9      	lsls	r1, r3, #19
 8007692:	4b38      	ldr	r3, [pc, #224]	; (8007774 <USB_EPStartXfer+0x48c>)
 8007694:	400b      	ands	r3, r1
 8007696:	69b9      	ldr	r1, [r7, #24]
 8007698:	0148      	lsls	r0, r1, #5
 800769a:	69f9      	ldr	r1, [r7, #28]
 800769c:	4401      	add	r1, r0
 800769e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076a2:	4313      	orrs	r3, r2
 80076a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076bc:	69b9      	ldr	r1, [r7, #24]
 80076be:	0148      	lsls	r0, r1, #5
 80076c0:	69f9      	ldr	r1, [r7, #28]
 80076c2:	4401      	add	r1, r0
 80076c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076c8:	4313      	orrs	r3, r2
 80076ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d10d      	bne.n	80076ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d009      	beq.n	80076ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6919      	ldr	r1, [r3, #16]
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	460a      	mov	r2, r1
 80076ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	791b      	ldrb	r3, [r3, #4]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d128      	bne.n	8007748 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007702:	2b00      	cmp	r3, #0
 8007704:	d110      	bne.n	8007728 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	0151      	lsls	r1, r2, #5
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	440a      	add	r2, r1
 800771c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	e00f      	b.n	8007748 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007746:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007762:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007766:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3720      	adds	r7, #32
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	1ff80000 	.word	0x1ff80000

08007778 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	785b      	ldrb	r3, [r3, #1]
 8007794:	2b01      	cmp	r3, #1
 8007796:	f040 80ce 	bne.w	8007936 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d132      	bne.n	8007808 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	0151      	lsls	r1, r2, #5
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	440a      	add	r2, r1
 80077b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	0151      	lsls	r1, r2, #5
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	440a      	add	r2, r1
 80077dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	0151      	lsls	r1, r2, #5
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	440a      	add	r2, r1
 80077fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007800:	0cdb      	lsrs	r3, r3, #19
 8007802:	04db      	lsls	r3, r3, #19
 8007804:	6113      	str	r3, [r2, #16]
 8007806:	e04e      	b.n	80078a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	697a      	ldr	r2, [r7, #20]
 800781c:	440a      	add	r2, r1
 800781e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007822:	0cdb      	lsrs	r3, r3, #19
 8007824:	04db      	lsls	r3, r3, #19
 8007826:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	440a      	add	r2, r1
 800783e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007842:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007846:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800784a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	699a      	ldr	r2, [r3, #24]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	429a      	cmp	r2, r3
 8007856:	d903      	bls.n	8007860 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	440a      	add	r2, r1
 8007876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800787e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800788c:	691a      	ldr	r2, [r3, #16]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007896:	6939      	ldr	r1, [r7, #16]
 8007898:	0148      	lsls	r0, r1, #5
 800789a:	6979      	ldr	r1, [r7, #20]
 800789c:	4401      	add	r1, r0
 800789e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078a2:	4313      	orrs	r3, r2
 80078a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078a6:	79fb      	ldrb	r3, [r7, #7]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d11e      	bne.n	80078ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d009      	beq.n	80078c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c0:	461a      	mov	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078e6:	6013      	str	r3, [r2, #0]
 80078e8:	e097      	b.n	8007a1a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	0151      	lsls	r1, r2, #5
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	440a      	add	r2, r1
 8007900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007904:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007908:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 8083 	beq.w	8007a1a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	f003 030f 	and.w	r3, r3, #15
 8007924:	2101      	movs	r1, #1
 8007926:	fa01 f303 	lsl.w	r3, r1, r3
 800792a:	6979      	ldr	r1, [r7, #20]
 800792c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007930:	4313      	orrs	r3, r2
 8007932:	634b      	str	r3, [r1, #52]	; 0x34
 8007934:	e071      	b.n	8007a1a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	440a      	add	r2, r1
 800794c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007950:	0cdb      	lsrs	r3, r3, #19
 8007952:	04db      	lsls	r3, r3, #19
 8007954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	0151      	lsls	r1, r2, #5
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	440a      	add	r2, r1
 800796c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007978:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	68da      	ldr	r2, [r3, #12]
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	015a      	lsls	r2, r3, #5
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	4413      	add	r3, r2
 800799a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	0151      	lsls	r1, r2, #5
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	440a      	add	r2, r1
 80079a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c8:	6939      	ldr	r1, [r7, #16]
 80079ca:	0148      	lsls	r0, r1, #5
 80079cc:	6979      	ldr	r1, [r7, #20]
 80079ce:	4401      	add	r1, r0
 80079d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079d4:	4313      	orrs	r3, r2
 80079d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d10d      	bne.n	80079fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6919      	ldr	r1, [r3, #16]
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f6:	460a      	mov	r2, r1
 80079f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	371c      	adds	r7, #28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b087      	sub	sp, #28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d14a      	bne.n	8007adc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a5e:	f040 8086 	bne.w	8007b6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	7812      	ldrb	r2, [r2, #0]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	015a      	lsls	r2, r3, #5
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	4413      	add	r3, r2
 8007a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	7812      	ldrb	r2, [r2, #0]
 8007a9a:	0151      	lsls	r1, r2, #5
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	440a      	add	r2, r1
 8007aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aa8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3301      	adds	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d902      	bls.n	8007ac0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	75fb      	strb	r3, [r7, #23]
          break;
 8007abe:	e056      	b.n	8007b6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ad4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ad8:	d0e7      	beq.n	8007aaa <USB_EPStopXfer+0x82>
 8007ada:	e048      	b.n	8007b6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af4:	d13b      	bne.n	8007b6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	7812      	ldrb	r2, [r2, #0]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b14:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	7812      	ldrb	r2, [r2, #0]
 8007b2e:	0151      	lsls	r1, r2, #5
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	440a      	add	r2, r1
 8007b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3301      	adds	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d902      	bls.n	8007b54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	75fb      	strb	r3, [r7, #23]
          break;
 8007b52:	e00c      	b.n	8007b6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b6c:	d0e7      	beq.n	8007b3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b089      	sub	sp, #36	; 0x24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	71fb      	strb	r3, [r7, #7]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d123      	bne.n	8007bea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ba2:	88bb      	ldrh	r3, [r7, #4]
 8007ba4:	3303      	adds	r3, #3
 8007ba6:	089b      	lsrs	r3, r3, #2
 8007ba8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007baa:	2300      	movs	r3, #0
 8007bac:	61bb      	str	r3, [r7, #24]
 8007bae:	e018      	b.n	8007be2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	031a      	lsls	r2, r3, #12
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	3301      	adds	r3, #1
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	69ba      	ldr	r2, [r7, #24]
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d3e2      	bcc.n	8007bb0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3724      	adds	r7, #36	; 0x24
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b08b      	sub	sp, #44	; 0x2c
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	089b      	lsrs	r3, r3, #2
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c16:	88fb      	ldrh	r3, [r7, #6]
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c1e:	2300      	movs	r3, #0
 8007c20:	623b      	str	r3, [r7, #32]
 8007c22:	e014      	b.n	8007c4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	3301      	adds	r3, #1
 8007c34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	3301      	adds	r3, #1
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	3301      	adds	r3, #1
 8007c40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c44:	3301      	adds	r3, #1
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007c48:	6a3b      	ldr	r3, [r7, #32]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	623b      	str	r3, [r7, #32]
 8007c4e:	6a3a      	ldr	r2, [r7, #32]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d3e6      	bcc.n	8007c24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c56:	8bfb      	ldrh	r3, [r7, #30]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01e      	beq.n	8007c9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c66:	461a      	mov	r2, r3
 8007c68:	f107 0310 	add.w	r3, r7, #16
 8007c6c:	6812      	ldr	r2, [r2, #0]
 8007c6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c80:	701a      	strb	r2, [r3, #0]
      i++;
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	3301      	adds	r3, #1
 8007c86:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c8e:	8bfb      	ldrh	r3, [r7, #30]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c94:	8bfb      	ldrh	r3, [r7, #30]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1ea      	bne.n	8007c70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	372c      	adds	r7, #44	; 0x2c
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d12c      	bne.n	8007d1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	db12      	blt.n	8007cfc <USB_EPSetStall+0x54>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00f      	beq.n	8007cfc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cfa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	e02b      	b.n	8007d76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	db12      	blt.n	8007d56 <USB_EPSetStall+0xae>
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00f      	beq.n	8007d56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	015a      	lsls	r2, r3, #5
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	0151      	lsls	r1, r2, #5
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	440a      	add	r2, r1
 8007d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d128      	bne.n	8007df2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	0151      	lsls	r1, r2, #5
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	440a      	add	r2, r1
 8007db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007dbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	791b      	ldrb	r3, [r3, #4]
 8007dc4:	2b03      	cmp	r3, #3
 8007dc6:	d003      	beq.n	8007dd0 <USB_EPClearStall+0x4c>
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	791b      	ldrb	r3, [r3, #4]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d138      	bne.n	8007e42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	015a      	lsls	r2, r3, #5
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4413      	add	r3, r2
 8007dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	0151      	lsls	r1, r2, #5
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	440a      	add	r2, r1
 8007de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	e027      	b.n	8007e42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	015a      	lsls	r2, r3, #5
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	0151      	lsls	r1, r2, #5
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	440a      	add	r2, r1
 8007e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	791b      	ldrb	r3, [r3, #4]
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d003      	beq.n	8007e22 <USB_EPClearStall+0x9e>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	791b      	ldrb	r3, [r3, #4]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d10f      	bne.n	8007e42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3714      	adds	r7, #20
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007e72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007e84:	68f9      	ldr	r1, [r7, #12]
 8007e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eca:	f023 0302 	bic.w	r3, r3, #2
 8007ece:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ef8:	f023 0303 	bic.w	r3, r3, #3
 8007efc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f0c:	f043 0302 	orr.w	r3, r3, #2
 8007f10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	4013      	ands	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f38:	68fb      	ldr	r3, [r7, #12]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b085      	sub	sp, #20
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f62:	69db      	ldr	r3, [r3, #28]
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	4013      	ands	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	0c1b      	lsrs	r3, r3, #16
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	b29b      	uxth	r3, r3
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b085      	sub	sp, #20
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007fbe:	78fb      	ldrb	r3, [r7, #3]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	4013      	ands	r3, r2
 8007fda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fea:	b480      	push	{r7}
 8007fec:	b087      	sub	sp, #28
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	fa22 f303 	lsr.w	r3, r2, r3
 800801a:	01db      	lsls	r3, r3, #7
 800801c:	b2db      	uxtb	r3, r3
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	4313      	orrs	r3, r2
 8008022:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4013      	ands	r3, r2
 8008036:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008038:	68bb      	ldr	r3, [r7, #8]
}
 800803a:	4618      	mov	r0, r3
 800803c:	371c      	adds	r7, #28
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008046:	b480      	push	{r7}
 8008048:	b083      	sub	sp, #12
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f003 0301 	and.w	r3, r3, #1
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008062:	b480      	push	{r7}
 8008064:	b085      	sub	sp, #20
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800807c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008080:	f023 0307 	bic.w	r3, r3, #7
 8008084:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008098:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	460b      	mov	r3, r1
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	333c      	adds	r3, #60	; 0x3c
 80080be:	3304      	adds	r3, #4
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4a26      	ldr	r2, [pc, #152]	; (8008160 <USB_EP0_OutStart+0xb8>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d90a      	bls.n	80080e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080dc:	d101      	bne.n	80080e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e037      	b.n	8008152 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e8:	461a      	mov	r2, r3
 80080ea:	2300      	movs	r3, #0
 80080ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008100:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008110:	f043 0318 	orr.w	r3, r3, #24
 8008114:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008124:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008128:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d10f      	bne.n	8008150 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800814a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800814e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	371c      	adds	r7, #28
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	4f54300a 	.word	0x4f54300a

08008164 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	3301      	adds	r3, #1
 8008174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a13      	ldr	r2, [pc, #76]	; (80081c8 <USB_CoreReset+0x64>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d901      	bls.n	8008182 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e01b      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	2b00      	cmp	r3, #0
 8008188:	daf2      	bge.n	8008170 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f043 0201 	orr.w	r2, r3, #1
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a09      	ldr	r2, [pc, #36]	; (80081c8 <USB_CoreReset+0x64>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d901      	bls.n	80081ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e006      	b.n	80081ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d0f0      	beq.n	800819a <USB_CoreReset+0x36>

  return HAL_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	00030d40 	.word	0x00030d40

080081cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80081dc:	f002 fc2a 	bl	800aa34 <USBD_static_malloc>
 80081e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d109      	bne.n	80081fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	32b0      	adds	r2, #176	; 0xb0
 80081f2:	2100      	movs	r1, #0
 80081f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80081f8:	2302      	movs	r3, #2
 80081fa:	e0d4      	b.n	80083a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80081fc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008200:	2100      	movs	r1, #0
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f002 fc84 	bl	800ab10 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	32b0      	adds	r2, #176	; 0xb0
 8008212:	68f9      	ldr	r1, [r7, #12]
 8008214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	32b0      	adds	r2, #176	; 0xb0
 8008222:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7c1b      	ldrb	r3, [r3, #16]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d138      	bne.n	80082a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008234:	4b5e      	ldr	r3, [pc, #376]	; (80083b0 <USBD_CDC_Init+0x1e4>)
 8008236:	7819      	ldrb	r1, [r3, #0]
 8008238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800823c:	2202      	movs	r2, #2
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f002 fad5 	bl	800a7ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008244:	4b5a      	ldr	r3, [pc, #360]	; (80083b0 <USBD_CDC_Init+0x1e4>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	f003 020f 	and.w	r2, r3, #15
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	440b      	add	r3, r1
 8008258:	3324      	adds	r3, #36	; 0x24
 800825a:	2201      	movs	r2, #1
 800825c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800825e:	4b55      	ldr	r3, [pc, #340]	; (80083b4 <USBD_CDC_Init+0x1e8>)
 8008260:	7819      	ldrb	r1, [r3, #0]
 8008262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008266:	2202      	movs	r2, #2
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f002 fac0 	bl	800a7ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800826e:	4b51      	ldr	r3, [pc, #324]	; (80083b4 <USBD_CDC_Init+0x1e8>)
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	f003 020f 	and.w	r2, r3, #15
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	4613      	mov	r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008286:	2201      	movs	r2, #1
 8008288:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800828a:	4b4b      	ldr	r3, [pc, #300]	; (80083b8 <USBD_CDC_Init+0x1ec>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	f003 020f 	and.w	r2, r3, #15
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	440b      	add	r3, r1
 800829e:	3326      	adds	r3, #38	; 0x26
 80082a0:	2210      	movs	r2, #16
 80082a2:	801a      	strh	r2, [r3, #0]
 80082a4:	e035      	b.n	8008312 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082a6:	4b42      	ldr	r3, [pc, #264]	; (80083b0 <USBD_CDC_Init+0x1e4>)
 80082a8:	7819      	ldrb	r1, [r3, #0]
 80082aa:	2340      	movs	r3, #64	; 0x40
 80082ac:	2202      	movs	r2, #2
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f002 fa9d 	bl	800a7ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082b4:	4b3e      	ldr	r3, [pc, #248]	; (80083b0 <USBD_CDC_Init+0x1e4>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f003 020f 	and.w	r2, r3, #15
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	3324      	adds	r3, #36	; 0x24
 80082ca:	2201      	movs	r2, #1
 80082cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082ce:	4b39      	ldr	r3, [pc, #228]	; (80083b4 <USBD_CDC_Init+0x1e8>)
 80082d0:	7819      	ldrb	r1, [r3, #0]
 80082d2:	2340      	movs	r3, #64	; 0x40
 80082d4:	2202      	movs	r2, #2
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f002 fa89 	bl	800a7ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80082dc:	4b35      	ldr	r3, [pc, #212]	; (80083b4 <USBD_CDC_Init+0x1e8>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	f003 020f 	and.w	r2, r3, #15
 80082e4:	6879      	ldr	r1, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	4413      	add	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	440b      	add	r3, r1
 80082f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082f4:	2201      	movs	r2, #1
 80082f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80082f8:	4b2f      	ldr	r3, [pc, #188]	; (80083b8 <USBD_CDC_Init+0x1ec>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	f003 020f 	and.w	r2, r3, #15
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	440b      	add	r3, r1
 800830c:	3326      	adds	r3, #38	; 0x26
 800830e:	2210      	movs	r2, #16
 8008310:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008312:	4b29      	ldr	r3, [pc, #164]	; (80083b8 <USBD_CDC_Init+0x1ec>)
 8008314:	7819      	ldrb	r1, [r3, #0]
 8008316:	2308      	movs	r3, #8
 8008318:	2203      	movs	r2, #3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f002 fa67 	bl	800a7ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008320:	4b25      	ldr	r3, [pc, #148]	; (80083b8 <USBD_CDC_Init+0x1ec>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	f003 020f 	and.w	r2, r3, #15
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	3324      	adds	r3, #36	; 0x24
 8008336:	2201      	movs	r2, #1
 8008338:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2200      	movs	r2, #0
 800833e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	33b0      	adds	r3, #176	; 0xb0
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	4413      	add	r3, r2
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800836c:	2b00      	cmp	r3, #0
 800836e:	d101      	bne.n	8008374 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008370:	2302      	movs	r3, #2
 8008372:	e018      	b.n	80083a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7c1b      	ldrb	r3, [r3, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800837c:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <USBD_CDC_Init+0x1e8>)
 800837e:	7819      	ldrb	r1, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f002 fb1e 	bl	800a9cc <USBD_LL_PrepareReceive>
 8008390:	e008      	b.n	80083a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008392:	4b08      	ldr	r3, [pc, #32]	; (80083b4 <USBD_CDC_Init+0x1e8>)
 8008394:	7819      	ldrb	r1, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800839c:	2340      	movs	r3, #64	; 0x40
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f002 fb14 	bl	800a9cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	2000009b 	.word	0x2000009b
 80083b4:	2000009c 	.word	0x2000009c
 80083b8:	2000009d 	.word	0x2000009d

080083bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80083c8:	4b3a      	ldr	r3, [pc, #232]	; (80084b4 <USBD_CDC_DeInit+0xf8>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f002 fa33 	bl	800a83a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80083d4:	4b37      	ldr	r3, [pc, #220]	; (80084b4 <USBD_CDC_DeInit+0xf8>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 020f 	and.w	r2, r3, #15
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	3324      	adds	r3, #36	; 0x24
 80083ea:	2200      	movs	r2, #0
 80083ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80083ee:	4b32      	ldr	r3, [pc, #200]	; (80084b8 <USBD_CDC_DeInit+0xfc>)
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f002 fa20 	bl	800a83a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80083fa:	4b2f      	ldr	r3, [pc, #188]	; (80084b8 <USBD_CDC_DeInit+0xfc>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	f003 020f 	and.w	r2, r3, #15
 8008402:	6879      	ldr	r1, [r7, #4]
 8008404:	4613      	mov	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4413      	add	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	440b      	add	r3, r1
 800840e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008412:	2200      	movs	r2, #0
 8008414:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008416:	4b29      	ldr	r3, [pc, #164]	; (80084bc <USBD_CDC_DeInit+0x100>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	4619      	mov	r1, r3
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f002 fa0c 	bl	800a83a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008422:	4b26      	ldr	r3, [pc, #152]	; (80084bc <USBD_CDC_DeInit+0x100>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	f003 020f 	and.w	r2, r3, #15
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	440b      	add	r3, r1
 8008436:	3324      	adds	r3, #36	; 0x24
 8008438:	2200      	movs	r2, #0
 800843a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800843c:	4b1f      	ldr	r3, [pc, #124]	; (80084bc <USBD_CDC_DeInit+0x100>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	f003 020f 	and.w	r2, r3, #15
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	3326      	adds	r3, #38	; 0x26
 8008452:	2200      	movs	r2, #0
 8008454:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	32b0      	adds	r2, #176	; 0xb0
 8008460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01f      	beq.n	80084a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	33b0      	adds	r3, #176	; 0xb0
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	32b0      	adds	r2, #176	; 0xb0
 8008486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848a:	4618      	mov	r0, r3
 800848c:	f002 fae0 	bl	800aa50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	32b0      	adds	r2, #176	; 0xb0
 800849a:	2100      	movs	r1, #0
 800849c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	2000009b 	.word	0x2000009b
 80084b8:	2000009c 	.word	0x2000009c
 80084bc:	2000009d 	.word	0x2000009d

080084c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	32b0      	adds	r2, #176	; 0xb0
 80084d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80084da:	2300      	movs	r3, #0
 80084dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e0bf      	b.n	8008670 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d050      	beq.n	800859e <USBD_CDC_Setup+0xde>
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	f040 80af 	bne.w	8008660 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	88db      	ldrh	r3, [r3, #6]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d03a      	beq.n	8008580 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	b25b      	sxtb	r3, r3
 8008510:	2b00      	cmp	r3, #0
 8008512:	da1b      	bge.n	800854c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	33b0      	adds	r3, #176	; 0xb0
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800852a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	88d2      	ldrh	r2, [r2, #6]
 8008530:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	88db      	ldrh	r3, [r3, #6]
 8008536:	2b07      	cmp	r3, #7
 8008538:	bf28      	it	cs
 800853a:	2307      	movcs	r3, #7
 800853c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	89fa      	ldrh	r2, [r7, #14]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 fd43 	bl	8009fd0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800854a:	e090      	b.n	800866e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	785a      	ldrb	r2, [r3, #1]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	88db      	ldrh	r3, [r3, #6]
 800855a:	2b3f      	cmp	r3, #63	; 0x3f
 800855c:	d803      	bhi.n	8008566 <USBD_CDC_Setup+0xa6>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	88db      	ldrh	r3, [r3, #6]
 8008562:	b2da      	uxtb	r2, r3
 8008564:	e000      	b.n	8008568 <USBD_CDC_Setup+0xa8>
 8008566:	2240      	movs	r2, #64	; 0x40
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800856e:	6939      	ldr	r1, [r7, #16]
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008576:	461a      	mov	r2, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 fd55 	bl	800a028 <USBD_CtlPrepareRx>
      break;
 800857e:	e076      	b.n	800866e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	33b0      	adds	r3, #176	; 0xb0
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	7850      	ldrb	r0, [r2, #1]
 8008596:	2200      	movs	r2, #0
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	4798      	blx	r3
      break;
 800859c:	e067      	b.n	800866e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	785b      	ldrb	r3, [r3, #1]
 80085a2:	2b0b      	cmp	r3, #11
 80085a4:	d851      	bhi.n	800864a <USBD_CDC_Setup+0x18a>
 80085a6:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <USBD_CDC_Setup+0xec>)
 80085a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ac:	080085dd 	.word	0x080085dd
 80085b0:	08008659 	.word	0x08008659
 80085b4:	0800864b 	.word	0x0800864b
 80085b8:	0800864b 	.word	0x0800864b
 80085bc:	0800864b 	.word	0x0800864b
 80085c0:	0800864b 	.word	0x0800864b
 80085c4:	0800864b 	.word	0x0800864b
 80085c8:	0800864b 	.word	0x0800864b
 80085cc:	0800864b 	.word	0x0800864b
 80085d0:	0800864b 	.word	0x0800864b
 80085d4:	08008607 	.word	0x08008607
 80085d8:	08008631 	.word	0x08008631
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d107      	bne.n	80085f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80085e8:	f107 030a 	add.w	r3, r7, #10
 80085ec:	2202      	movs	r2, #2
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fced 	bl	8009fd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80085f6:	e032      	b.n	800865e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f001 fc77 	bl	8009eee <USBD_CtlError>
            ret = USBD_FAIL;
 8008600:	2303      	movs	r3, #3
 8008602:	75fb      	strb	r3, [r7, #23]
          break;
 8008604:	e02b      	b.n	800865e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b03      	cmp	r3, #3
 8008610:	d107      	bne.n	8008622 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008612:	f107 030d 	add.w	r3, r7, #13
 8008616:	2201      	movs	r2, #1
 8008618:	4619      	mov	r1, r3
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f001 fcd8 	bl	8009fd0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008620:	e01d      	b.n	800865e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f001 fc62 	bl	8009eee <USBD_CtlError>
            ret = USBD_FAIL;
 800862a:	2303      	movs	r3, #3
 800862c:	75fb      	strb	r3, [r7, #23]
          break;
 800862e:	e016      	b.n	800865e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b03      	cmp	r3, #3
 800863a:	d00f      	beq.n	800865c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 fc55 	bl	8009eee <USBD_CtlError>
            ret = USBD_FAIL;
 8008644:	2303      	movs	r3, #3
 8008646:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008648:	e008      	b.n	800865c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 fc4e 	bl	8009eee <USBD_CtlError>
          ret = USBD_FAIL;
 8008652:	2303      	movs	r3, #3
 8008654:	75fb      	strb	r3, [r7, #23]
          break;
 8008656:	e002      	b.n	800865e <USBD_CDC_Setup+0x19e>
          break;
 8008658:	bf00      	nop
 800865a:	e008      	b.n	800866e <USBD_CDC_Setup+0x1ae>
          break;
 800865c:	bf00      	nop
      }
      break;
 800865e:	e006      	b.n	800866e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f001 fc43 	bl	8009eee <USBD_CtlError>
      ret = USBD_FAIL;
 8008668:	2303      	movs	r3, #3
 800866a:	75fb      	strb	r3, [r7, #23]
      break;
 800866c:	bf00      	nop
  }

  return (uint8_t)ret;
 800866e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800868a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	32b0      	adds	r2, #176	; 0xb0
 8008696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800869e:	2303      	movs	r3, #3
 80086a0:	e065      	b.n	800876e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	32b0      	adds	r2, #176	; 0xb0
 80086ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	3318      	adds	r3, #24
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d02f      	beq.n	800872c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	f003 020f 	and.w	r2, r3, #15
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	3318      	adds	r3, #24
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	f003 010f 	and.w	r1, r3, #15
 80086e8:	68f8      	ldr	r0, [r7, #12]
 80086ea:	460b      	mov	r3, r1
 80086ec:	00db      	lsls	r3, r3, #3
 80086ee:	440b      	add	r3, r1
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	4403      	add	r3, r0
 80086f4:	3348      	adds	r3, #72	; 0x48
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80086fc:	fb01 f303 	mul.w	r3, r1, r3
 8008700:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008702:	2b00      	cmp	r3, #0
 8008704:	d112      	bne.n	800872c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008706:	78fb      	ldrb	r3, [r7, #3]
 8008708:	f003 020f 	and.w	r2, r3, #15
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	440b      	add	r3, r1
 8008718:	3318      	adds	r3, #24
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800871e:	78f9      	ldrb	r1, [r7, #3]
 8008720:	2300      	movs	r3, #0
 8008722:	2200      	movs	r2, #0
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f002 f930 	bl	800a98a <USBD_LL_Transmit>
 800872a:	e01f      	b.n	800876c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	33b0      	adds	r3, #176	; 0xb0
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d010      	beq.n	800876c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	33b0      	adds	r3, #176	; 0xb0
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008768:	78fa      	ldrb	r2, [r7, #3]
 800876a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	32b0      	adds	r2, #176	; 0xb0
 800878c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008790:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	32b0      	adds	r2, #176	; 0xb0
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e01a      	b.n	80087de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087a8:	78fb      	ldrb	r3, [r7, #3]
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f002 f92e 	bl	800aa0e <USBD_LL_GetRxDataSize>
 80087b2:	4602      	mov	r2, r0
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	33b0      	adds	r3, #176	; 0xb0
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80087d8:	4611      	mov	r1, r2
 80087da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b084      	sub	sp, #16
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	32b0      	adds	r2, #176	; 0xb0
 80087f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008804:	2303      	movs	r3, #3
 8008806:	e025      	b.n	8008854 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	33b0      	adds	r3, #176	; 0xb0
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d01a      	beq.n	8008852 <USBD_CDC_EP0_RxReady+0x6c>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008822:	2bff      	cmp	r3, #255	; 0xff
 8008824:	d015      	beq.n	8008852 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	33b0      	adds	r3, #176	; 0xb0
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800883e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008846:	b292      	uxth	r2, r2
 8008848:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	22ff      	movs	r2, #255	; 0xff
 800884e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3710      	adds	r7, #16
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008864:	2182      	movs	r1, #130	; 0x82
 8008866:	4818      	ldr	r0, [pc, #96]	; (80088c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008868:	f000 fd09 	bl	800927e <USBD_GetEpDesc>
 800886c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800886e:	2101      	movs	r1, #1
 8008870:	4815      	ldr	r0, [pc, #84]	; (80088c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008872:	f000 fd04 	bl	800927e <USBD_GetEpDesc>
 8008876:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008878:	2181      	movs	r1, #129	; 0x81
 800887a:	4813      	ldr	r0, [pc, #76]	; (80088c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800887c:	f000 fcff 	bl	800927e <USBD_GetEpDesc>
 8008880:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2210      	movs	r2, #16
 800888c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d006      	beq.n	80088a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2200      	movs	r2, #0
 8008898:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800889c:	711a      	strb	r2, [r3, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d006      	beq.n	80088b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088b0:	711a      	strb	r2, [r3, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2243      	movs	r2, #67	; 0x43
 80088ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088bc:	4b02      	ldr	r3, [pc, #8]	; (80088c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000058 	.word	0x20000058

080088cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088d4:	2182      	movs	r1, #130	; 0x82
 80088d6:	4818      	ldr	r0, [pc, #96]	; (8008938 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088d8:	f000 fcd1 	bl	800927e <USBD_GetEpDesc>
 80088dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088de:	2101      	movs	r1, #1
 80088e0:	4815      	ldr	r0, [pc, #84]	; (8008938 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088e2:	f000 fccc 	bl	800927e <USBD_GetEpDesc>
 80088e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80088e8:	2181      	movs	r1, #129	; 0x81
 80088ea:	4813      	ldr	r0, [pc, #76]	; (8008938 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088ec:	f000 fcc7 	bl	800927e <USBD_GetEpDesc>
 80088f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	2210      	movs	r2, #16
 80088fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d006      	beq.n	8008912 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2200      	movs	r2, #0
 8008908:	711a      	strb	r2, [r3, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f042 0202 	orr.w	r2, r2, #2
 8008910:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d006      	beq.n	8008926 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	711a      	strb	r2, [r3, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f042 0202 	orr.w	r2, r2, #2
 8008924:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2243      	movs	r2, #67	; 0x43
 800892a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800892c:	4b02      	ldr	r3, [pc, #8]	; (8008938 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000058 	.word	0x20000058

0800893c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008944:	2182      	movs	r1, #130	; 0x82
 8008946:	4818      	ldr	r0, [pc, #96]	; (80089a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008948:	f000 fc99 	bl	800927e <USBD_GetEpDesc>
 800894c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800894e:	2101      	movs	r1, #1
 8008950:	4815      	ldr	r0, [pc, #84]	; (80089a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008952:	f000 fc94 	bl	800927e <USBD_GetEpDesc>
 8008956:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008958:	2181      	movs	r1, #129	; 0x81
 800895a:	4813      	ldr	r0, [pc, #76]	; (80089a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800895c:	f000 fc8f 	bl	800927e <USBD_GetEpDesc>
 8008960:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2210      	movs	r2, #16
 800896c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d006      	beq.n	8008982 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2200      	movs	r2, #0
 8008978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800897c:	711a      	strb	r2, [r3, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d006      	beq.n	8008996 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008990:	711a      	strb	r2, [r3, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2243      	movs	r2, #67	; 0x43
 800899a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800899c:	4b02      	ldr	r3, [pc, #8]	; (80089a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20000058 	.word	0x20000058

080089ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	220a      	movs	r2, #10
 80089b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089ba:	4b03      	ldr	r3, [pc, #12]	; (80089c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089bc:	4618      	mov	r0, r3
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	20000014 	.word	0x20000014

080089cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089dc:	2303      	movs	r3, #3
 80089de:	e009      	b.n	80089f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	33b0      	adds	r3, #176	; 0xb0
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	32b0      	adds	r2, #176	; 0xb0
 8008a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a1a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e008      	b.n	8008a38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	32b0      	adds	r2, #176	; 0xb0
 8008a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e004      	b.n	8008a72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
	...

08008a80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	32b0      	adds	r2, #176	; 0xb0
 8008a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	32b0      	adds	r2, #176	; 0xb0
 8008aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e018      	b.n	8008ae0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	7c1b      	ldrb	r3, [r3, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10a      	bne.n	8008acc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <USBD_CDC_ReceivePacket+0x68>)
 8008ab8:	7819      	ldrb	r1, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f001 ff81 	bl	800a9cc <USBD_LL_PrepareReceive>
 8008aca:	e008      	b.n	8008ade <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008acc:	4b06      	ldr	r3, [pc, #24]	; (8008ae8 <USBD_CDC_ReceivePacket+0x68>)
 8008ace:	7819      	ldrb	r1, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ad6:	2340      	movs	r3, #64	; 0x40
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 ff77 	bl	800a9cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	2000009c 	.word	0x2000009c

08008aec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	4613      	mov	r3, r2
 8008af8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e01f      	b.n	8008b44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	79fa      	ldrb	r2, [r7, #7]
 8008b36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f001 fdeb 	bl	800a714 <USBD_LL_Init>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d101      	bne.n	8008b64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e025      	b.n	8008bb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	32ae      	adds	r2, #174	; 0xae
 8008b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00f      	beq.n	8008ba0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	32ae      	adds	r2, #174	; 0xae
 8008b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	f107 020e 	add.w	r2, r7, #14
 8008b94:	4610      	mov	r0, r2
 8008b96:	4798      	blx	r3
 8008b98:	4602      	mov	r2, r0
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 fdf9 	bl	800a7b8 <USBD_LL_Start>
 8008bc6:	4603      	mov	r3, r0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d009      	beq.n	8008c14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	78fa      	ldrb	r2, [r7, #3]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	4798      	blx	r3
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	78fa      	ldrb	r2, [r7, #3]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008c44:	2303      	movs	r3, #3
 8008c46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f001 f908 	bl	8009e7a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008c78:	461a      	mov	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c86:	f003 031f 	and.w	r3, r3, #31
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d01a      	beq.n	8008cc4 <USBD_LL_SetupStage+0x72>
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d822      	bhi.n	8008cd8 <USBD_LL_SetupStage+0x86>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <USBD_LL_SetupStage+0x4a>
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d00a      	beq.n	8008cb0 <USBD_LL_SetupStage+0x5e>
 8008c9a:	e01d      	b.n	8008cd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fb5f 	bl	8009368 <USBD_StdDevReq>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73fb      	strb	r3, [r7, #15]
      break;
 8008cae:	e020      	b.n	8008cf2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fbc7 	bl	800944c <USBD_StdItfReq>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cc2:	e016      	b.n	8008cf2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fc29 	bl	8009524 <USBD_StdEPReq>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd6:	e00c      	b.n	8008cf2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008cde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 fdc6 	bl	800a878 <USBD_LL_StallEP>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf0:	bf00      	nop
  }

  return ret;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	460b      	mov	r3, r1
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008d0e:	7afb      	ldrb	r3, [r7, #11]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d16e      	bne.n	8008df2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008d1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	f040 8098 	bne.w	8008e58 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d913      	bls.n	8008d5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	689a      	ldr	r2, [r3, #8]
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	1ad2      	subs	r2, r2, r3
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	68da      	ldr	r2, [r3, #12]
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	bf28      	it	cs
 8008d4e:	4613      	movcs	r3, r2
 8008d50:	461a      	mov	r2, r3
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f001 f984 	bl	800a062 <USBD_CtlContinueRx>
 8008d5a:	e07d      	b.n	8008e58 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d62:	f003 031f 	and.w	r3, r3, #31
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d014      	beq.n	8008d94 <USBD_LL_DataOutStage+0x98>
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d81d      	bhi.n	8008daa <USBD_LL_DataOutStage+0xae>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <USBD_LL_DataOutStage+0x7c>
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d003      	beq.n	8008d7e <USBD_LL_DataOutStage+0x82>
 8008d76:	e018      	b.n	8008daa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	75bb      	strb	r3, [r7, #22]
            break;
 8008d7c:	e018      	b.n	8008db0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	4619      	mov	r1, r3
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 fa5e 	bl	800924a <USBD_CoreFindIF>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75bb      	strb	r3, [r7, #22]
            break;
 8008d92:	e00d      	b.n	8008db0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	68f8      	ldr	r0, [r7, #12]
 8008da0:	f000 fa60 	bl	8009264 <USBD_CoreFindEP>
 8008da4:	4603      	mov	r3, r0
 8008da6:	75bb      	strb	r3, [r7, #22]
            break;
 8008da8:	e002      	b.n	8008db0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	75bb      	strb	r3, [r7, #22]
            break;
 8008dae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008db0:	7dbb      	ldrb	r3, [r7, #22]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d119      	bne.n	8008dea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d113      	bne.n	8008dea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008dc2:	7dba      	ldrb	r2, [r7, #22]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	32ae      	adds	r2, #174	; 0xae
 8008dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008dd2:	7dba      	ldrb	r2, [r7, #22]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008dda:	7dba      	ldrb	r2, [r7, #22]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	32ae      	adds	r2, #174	; 0xae
 8008de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f001 f94a 	bl	800a084 <USBD_CtlSendStatus>
 8008df0:	e032      	b.n	8008e58 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008df2:	7afb      	ldrb	r3, [r7, #11]
 8008df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fa31 	bl	8009264 <USBD_CoreFindEP>
 8008e02:	4603      	mov	r3, r0
 8008e04:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e06:	7dbb      	ldrb	r3, [r7, #22]
 8008e08:	2bff      	cmp	r3, #255	; 0xff
 8008e0a:	d025      	beq.n	8008e58 <USBD_LL_DataOutStage+0x15c>
 8008e0c:	7dbb      	ldrb	r3, [r7, #22]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d122      	bne.n	8008e58 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d117      	bne.n	8008e4e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008e1e:	7dba      	ldrb	r2, [r7, #22]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	32ae      	adds	r2, #174	; 0xae
 8008e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00f      	beq.n	8008e4e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008e2e:	7dba      	ldrb	r2, [r7, #22]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008e36:	7dba      	ldrb	r2, [r7, #22]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	32ae      	adds	r2, #174	; 0xae
 8008e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	7afa      	ldrb	r2, [r7, #11]
 8008e44:	4611      	mov	r1, r2
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	4798      	blx	r3
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	e000      	b.n	8008e5a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b086      	sub	sp, #24
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	60f8      	str	r0, [r7, #12]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	607a      	str	r2, [r7, #4]
 8008e6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e70:	7afb      	ldrb	r3, [r7, #11]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d16f      	bne.n	8008f56 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3314      	adds	r3, #20
 8008e7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d15a      	bne.n	8008f3c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	689a      	ldr	r2, [r3, #8]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d914      	bls.n	8008ebc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	1ad2      	subs	r2, r2, r3
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f001 f8ac 	bl	800a006 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f001 fd89 	bl	800a9cc <USBD_LL_PrepareReceive>
 8008eba:	e03f      	b.n	8008f3c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	68da      	ldr	r2, [r3, #12]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d11c      	bne.n	8008f02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d316      	bcc.n	8008f02 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d20f      	bcs.n	8008f02 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f001 f88d 	bl	800a006 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	2100      	movs	r1, #0
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f001 fd66 	bl	800a9cc <USBD_LL_PrepareReceive>
 8008f00:	e01c      	b.n	8008f3c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d10f      	bne.n	8008f2e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d009      	beq.n	8008f2e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f2e:	2180      	movs	r1, #128	; 0x80
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f001 fca1 	bl	800a878 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	f001 f8b7 	bl	800a0aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d03a      	beq.n	8008fbc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff fe42 	bl	8008bd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f54:	e032      	b.n	8008fbc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f56:	7afb      	ldrb	r3, [r7, #11]
 8008f58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 f97f 	bl	8009264 <USBD_CoreFindEP>
 8008f66:	4603      	mov	r3, r0
 8008f68:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	2bff      	cmp	r3, #255	; 0xff
 8008f6e:	d025      	beq.n	8008fbc <USBD_LL_DataInStage+0x15a>
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d122      	bne.n	8008fbc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d11c      	bne.n	8008fbc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008f82:	7dfa      	ldrb	r2, [r7, #23]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	32ae      	adds	r2, #174	; 0xae
 8008f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d014      	beq.n	8008fbc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008f92:	7dfa      	ldrb	r2, [r7, #23]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008f9a:	7dfa      	ldrb	r2, [r7, #23]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	32ae      	adds	r2, #174	; 0xae
 8008fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	7afa      	ldrb	r2, [r7, #11]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	4798      	blx	r3
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008fb2:	7dbb      	ldrb	r3, [r7, #22]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d001      	beq.n	8008fbc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008fb8:	7dbb      	ldrb	r3, [r7, #22]
 8008fba:	e000      	b.n	8008fbe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d014      	beq.n	800902c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00e      	beq.n	800902c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6852      	ldr	r2, [r2, #4]
 800901a:	b2d2      	uxtb	r2, r2
 800901c:	4611      	mov	r1, r2
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	4798      	blx	r3
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009028:	2303      	movs	r3, #3
 800902a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f001 fbdb 	bl	800a7ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2240      	movs	r2, #64	; 0x40
 8009044:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009048:	2340      	movs	r3, #64	; 0x40
 800904a:	2200      	movs	r2, #0
 800904c:	2180      	movs	r1, #128	; 0x80
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 fbcd 	bl	800a7ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2240      	movs	r2, #64	; 0x40
 800905e:	621a      	str	r2, [r3, #32]

  return ret;
 8009060:	7bfb      	ldrb	r3, [r7, #15]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009098:	b2da      	uxtb	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2204      	movs	r2, #4
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	d106      	bne.n	80090d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr

080090e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b082      	sub	sp, #8
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d110      	bne.n	800911c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00b      	beq.n	800911c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	32ae      	adds	r2, #174	; 0xae
 800913c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009144:	2303      	movs	r3, #3
 8009146:	e01c      	b.n	8009182 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800914e:	b2db      	uxtb	r3, r3
 8009150:	2b03      	cmp	r3, #3
 8009152:	d115      	bne.n	8009180 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	32ae      	adds	r2, #174	; 0xae
 800915e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00b      	beq.n	8009180 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	32ae      	adds	r2, #174	; 0xae
 8009172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	78fa      	ldrb	r2, [r7, #3]
 800917a:	4611      	mov	r1, r2
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	460b      	mov	r3, r1
 8009194:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	32ae      	adds	r2, #174	; 0xae
 80091a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e01c      	b.n	80091e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d115      	bne.n	80091e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	32ae      	adds	r2, #174	; 0xae
 80091c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00b      	beq.n	80091e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	32ae      	adds	r2, #174	; 0xae
 80091d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	78fa      	ldrb	r2, [r7, #3]
 80091de:	4611      	mov	r1, r2
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b083      	sub	sp, #12
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00e      	beq.n	8009240 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	6852      	ldr	r2, [r2, #4]
 800922e:	b2d2      	uxtb	r2, r2
 8009230:	4611      	mov	r1, r2
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	4798      	blx	r3
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800923c:	2303      	movs	r3, #3
 800923e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
 8009252:	460b      	mov	r3, r1
 8009254:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009256:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009258:	4618      	mov	r0, r3
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	460b      	mov	r3, r1
 800926e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009270:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b086      	sub	sp, #24
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	460b      	mov	r3, r1
 8009288:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009292:	2300      	movs	r3, #0
 8009294:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	885b      	ldrh	r3, [r3, #2]
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d920      	bls.n	80092e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80092ae:	e013      	b.n	80092d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80092b0:	f107 030a 	add.w	r3, r7, #10
 80092b4:	4619      	mov	r1, r3
 80092b6:	6978      	ldr	r0, [r7, #20]
 80092b8:	f000 f81b 	bl	80092f2 <USBD_GetNextDesc>
 80092bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	2b05      	cmp	r3, #5
 80092c4:	d108      	bne.n	80092d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	789b      	ldrb	r3, [r3, #2]
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d008      	beq.n	80092e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80092d4:	2300      	movs	r3, #0
 80092d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	885b      	ldrh	r3, [r3, #2]
 80092dc:	b29a      	uxth	r2, r3
 80092de:	897b      	ldrh	r3, [r7, #10]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d8e5      	bhi.n	80092b0 <USBD_GetEpDesc+0x32>
 80092e4:	e000      	b.n	80092e8 <USBD_GetEpDesc+0x6a>
          break;
 80092e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80092e8:	693b      	ldr	r3, [r7, #16]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3718      	adds	r7, #24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b085      	sub	sp, #20
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	881a      	ldrh	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	b29b      	uxth	r3, r3
 800930a:	4413      	add	r3, r2
 800930c:	b29a      	uxth	r2, r3
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	461a      	mov	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4413      	add	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800931e:	68fb      	ldr	r3, [r7, #12]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800932c:	b480      	push	{r7}
 800932e:	b087      	sub	sp, #28
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	3301      	adds	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800934a:	8a3b      	ldrh	r3, [r7, #16]
 800934c:	021b      	lsls	r3, r3, #8
 800934e:	b21a      	sxth	r2, r3
 8009350:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009354:	4313      	orrs	r3, r2
 8009356:	b21b      	sxth	r3, r3
 8009358:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800935a:	89fb      	ldrh	r3, [r7, #14]
}
 800935c:	4618      	mov	r0, r3
 800935e:	371c      	adds	r7, #28
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800937e:	2b40      	cmp	r3, #64	; 0x40
 8009380:	d005      	beq.n	800938e <USBD_StdDevReq+0x26>
 8009382:	2b40      	cmp	r3, #64	; 0x40
 8009384:	d857      	bhi.n	8009436 <USBD_StdDevReq+0xce>
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00f      	beq.n	80093aa <USBD_StdDevReq+0x42>
 800938a:	2b20      	cmp	r3, #32
 800938c:	d153      	bne.n	8009436 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	32ae      	adds	r2, #174	; 0xae
 8009398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	6839      	ldr	r1, [r7, #0]
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	4798      	blx	r3
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]
      break;
 80093a8:	e04a      	b.n	8009440 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	785b      	ldrb	r3, [r3, #1]
 80093ae:	2b09      	cmp	r3, #9
 80093b0:	d83b      	bhi.n	800942a <USBD_StdDevReq+0xc2>
 80093b2:	a201      	add	r2, pc, #4	; (adr r2, 80093b8 <USBD_StdDevReq+0x50>)
 80093b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b8:	0800940d 	.word	0x0800940d
 80093bc:	08009421 	.word	0x08009421
 80093c0:	0800942b 	.word	0x0800942b
 80093c4:	08009417 	.word	0x08009417
 80093c8:	0800942b 	.word	0x0800942b
 80093cc:	080093eb 	.word	0x080093eb
 80093d0:	080093e1 	.word	0x080093e1
 80093d4:	0800942b 	.word	0x0800942b
 80093d8:	08009403 	.word	0x08009403
 80093dc:	080093f5 	.word	0x080093f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fa3c 	bl	8009860 <USBD_GetDescriptor>
          break;
 80093e8:	e024      	b.n	8009434 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fba1 	bl	8009b34 <USBD_SetAddress>
          break;
 80093f2:	e01f      	b.n	8009434 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fbe0 	bl	8009bbc <USBD_SetConfig>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]
          break;
 8009400:	e018      	b.n	8009434 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fc83 	bl	8009d10 <USBD_GetConfig>
          break;
 800940a:	e013      	b.n	8009434 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fcb4 	bl	8009d7c <USBD_GetStatus>
          break;
 8009414:	e00e      	b.n	8009434 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009416:	6839      	ldr	r1, [r7, #0]
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fce3 	bl	8009de4 <USBD_SetFeature>
          break;
 800941e:	e009      	b.n	8009434 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 fd07 	bl	8009e36 <USBD_ClrFeature>
          break;
 8009428:	e004      	b.n	8009434 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fd5e 	bl	8009eee <USBD_CtlError>
          break;
 8009432:	bf00      	nop
      }
      break;
 8009434:	e004      	b.n	8009440 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fd58 	bl	8009eee <USBD_CtlError>
      break;
 800943e:	bf00      	nop
  }

  return ret;
 8009440:	7bfb      	ldrb	r3, [r7, #15]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop

0800944c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009462:	2b40      	cmp	r3, #64	; 0x40
 8009464:	d005      	beq.n	8009472 <USBD_StdItfReq+0x26>
 8009466:	2b40      	cmp	r3, #64	; 0x40
 8009468:	d852      	bhi.n	8009510 <USBD_StdItfReq+0xc4>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <USBD_StdItfReq+0x26>
 800946e:	2b20      	cmp	r3, #32
 8009470:	d14e      	bne.n	8009510 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009478:	b2db      	uxtb	r3, r3
 800947a:	3b01      	subs	r3, #1
 800947c:	2b02      	cmp	r3, #2
 800947e:	d840      	bhi.n	8009502 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	889b      	ldrh	r3, [r3, #4]
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b01      	cmp	r3, #1
 8009488:	d836      	bhi.n	80094f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	889b      	ldrh	r3, [r3, #4]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7ff fed9 	bl	800924a <USBD_CoreFindIF>
 8009498:	4603      	mov	r3, r0
 800949a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	2bff      	cmp	r3, #255	; 0xff
 80094a0:	d01d      	beq.n	80094de <USBD_StdItfReq+0x92>
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d11a      	bne.n	80094de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094a8:	7bba      	ldrb	r2, [r7, #14]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	32ae      	adds	r2, #174	; 0xae
 80094ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d00f      	beq.n	80094d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80094b8:	7bba      	ldrb	r2, [r7, #14]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094c0:	7bba      	ldrb	r2, [r7, #14]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	32ae      	adds	r2, #174	; 0xae
 80094c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	4798      	blx	r3
 80094d2:	4603      	mov	r3, r0
 80094d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094d6:	e004      	b.n	80094e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80094d8:	2303      	movs	r3, #3
 80094da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80094dc:	e001      	b.n	80094e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80094de:	2303      	movs	r3, #3
 80094e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	88db      	ldrh	r3, [r3, #6]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d110      	bne.n	800950c <USBD_StdItfReq+0xc0>
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10d      	bne.n	800950c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fdc7 	bl	800a084 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094f6:	e009      	b.n	800950c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fcf7 	bl	8009eee <USBD_CtlError>
          break;
 8009500:	e004      	b.n	800950c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fcf2 	bl	8009eee <USBD_CtlError>
          break;
 800950a:	e000      	b.n	800950e <USBD_StdItfReq+0xc2>
          break;
 800950c:	bf00      	nop
      }
      break;
 800950e:	e004      	b.n	800951a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fceb 	bl	8009eee <USBD_CtlError>
      break;
 8009518:	bf00      	nop
  }

  return ret;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
}
 800951c:	4618      	mov	r0, r3
 800951e:	3710      	adds	r7, #16
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	889b      	ldrh	r3, [r3, #4]
 8009536:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009540:	2b40      	cmp	r3, #64	; 0x40
 8009542:	d007      	beq.n	8009554 <USBD_StdEPReq+0x30>
 8009544:	2b40      	cmp	r3, #64	; 0x40
 8009546:	f200 817f 	bhi.w	8009848 <USBD_StdEPReq+0x324>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d02a      	beq.n	80095a4 <USBD_StdEPReq+0x80>
 800954e:	2b20      	cmp	r3, #32
 8009550:	f040 817a 	bne.w	8009848 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff fe83 	bl	8009264 <USBD_CoreFindEP>
 800955e:	4603      	mov	r3, r0
 8009560:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009562:	7b7b      	ldrb	r3, [r7, #13]
 8009564:	2bff      	cmp	r3, #255	; 0xff
 8009566:	f000 8174 	beq.w	8009852 <USBD_StdEPReq+0x32e>
 800956a:	7b7b      	ldrb	r3, [r7, #13]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8170 	bne.w	8009852 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009572:	7b7a      	ldrb	r2, [r7, #13]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800957a:	7b7a      	ldrb	r2, [r7, #13]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	32ae      	adds	r2, #174	; 0xae
 8009580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 8163 	beq.w	8009852 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800958c:	7b7a      	ldrb	r2, [r7, #13]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	32ae      	adds	r2, #174	; 0xae
 8009592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	4798      	blx	r3
 800959e:	4603      	mov	r3, r0
 80095a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095a2:	e156      	b.n	8009852 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	785b      	ldrb	r3, [r3, #1]
 80095a8:	2b03      	cmp	r3, #3
 80095aa:	d008      	beq.n	80095be <USBD_StdEPReq+0x9a>
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	f300 8145 	bgt.w	800983c <USBD_StdEPReq+0x318>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 809b 	beq.w	80096ee <USBD_StdEPReq+0x1ca>
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d03c      	beq.n	8009636 <USBD_StdEPReq+0x112>
 80095bc:	e13e      	b.n	800983c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d002      	beq.n	80095d0 <USBD_StdEPReq+0xac>
 80095ca:	2b03      	cmp	r3, #3
 80095cc:	d016      	beq.n	80095fc <USBD_StdEPReq+0xd8>
 80095ce:	e02c      	b.n	800962a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00d      	beq.n	80095f2 <USBD_StdEPReq+0xce>
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b80      	cmp	r3, #128	; 0x80
 80095da:	d00a      	beq.n	80095f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80095dc:	7bbb      	ldrb	r3, [r7, #14]
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f001 f949 	bl	800a878 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80095e6:	2180      	movs	r1, #128	; 0x80
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f001 f945 	bl	800a878 <USBD_LL_StallEP>
 80095ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80095f0:	e020      	b.n	8009634 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fc7a 	bl	8009eee <USBD_CtlError>
              break;
 80095fa:	e01b      	b.n	8009634 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	885b      	ldrh	r3, [r3, #2]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10e      	bne.n	8009622 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00b      	beq.n	8009622 <USBD_StdEPReq+0xfe>
 800960a:	7bbb      	ldrb	r3, [r7, #14]
 800960c:	2b80      	cmp	r3, #128	; 0x80
 800960e:	d008      	beq.n	8009622 <USBD_StdEPReq+0xfe>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	88db      	ldrh	r3, [r3, #6]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d104      	bne.n	8009622 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 f92b 	bl	800a878 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fd2e 	bl	800a084 <USBD_CtlSendStatus>

              break;
 8009628:	e004      	b.n	8009634 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fc5e 	bl	8009eee <USBD_CtlError>
              break;
 8009632:	bf00      	nop
          }
          break;
 8009634:	e107      	b.n	8009846 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800963c:	b2db      	uxtb	r3, r3
 800963e:	2b02      	cmp	r3, #2
 8009640:	d002      	beq.n	8009648 <USBD_StdEPReq+0x124>
 8009642:	2b03      	cmp	r3, #3
 8009644:	d016      	beq.n	8009674 <USBD_StdEPReq+0x150>
 8009646:	e04b      	b.n	80096e0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009648:	7bbb      	ldrb	r3, [r7, #14]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00d      	beq.n	800966a <USBD_StdEPReq+0x146>
 800964e:	7bbb      	ldrb	r3, [r7, #14]
 8009650:	2b80      	cmp	r3, #128	; 0x80
 8009652:	d00a      	beq.n	800966a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f001 f90d 	bl	800a878 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800965e:	2180      	movs	r1, #128	; 0x80
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 f909 	bl	800a878 <USBD_LL_StallEP>
 8009666:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009668:	e040      	b.n	80096ec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800966a:	6839      	ldr	r1, [r7, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fc3e 	bl	8009eee <USBD_CtlError>
              break;
 8009672:	e03b      	b.n	80096ec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	885b      	ldrh	r3, [r3, #2]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d136      	bne.n	80096ea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009682:	2b00      	cmp	r3, #0
 8009684:	d004      	beq.n	8009690 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009686:	7bbb      	ldrb	r3, [r7, #14]
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 f913 	bl	800a8b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fcf7 	bl	800a084 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009696:	7bbb      	ldrb	r3, [r7, #14]
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7ff fde2 	bl	8009264 <USBD_CoreFindEP>
 80096a0:	4603      	mov	r3, r0
 80096a2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096a4:	7b7b      	ldrb	r3, [r7, #13]
 80096a6:	2bff      	cmp	r3, #255	; 0xff
 80096a8:	d01f      	beq.n	80096ea <USBD_StdEPReq+0x1c6>
 80096aa:	7b7b      	ldrb	r3, [r7, #13]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d11c      	bne.n	80096ea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80096b0:	7b7a      	ldrb	r2, [r7, #13]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80096b8:	7b7a      	ldrb	r2, [r7, #13]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	32ae      	adds	r2, #174	; 0xae
 80096be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d010      	beq.n	80096ea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096c8:	7b7a      	ldrb	r2, [r7, #13]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	32ae      	adds	r2, #174	; 0xae
 80096ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	4798      	blx	r3
 80096da:	4603      	mov	r3, r0
 80096dc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80096de:	e004      	b.n	80096ea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fc03 	bl	8009eee <USBD_CtlError>
              break;
 80096e8:	e000      	b.n	80096ec <USBD_StdEPReq+0x1c8>
              break;
 80096ea:	bf00      	nop
          }
          break;
 80096ec:	e0ab      	b.n	8009846 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d002      	beq.n	8009700 <USBD_StdEPReq+0x1dc>
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d032      	beq.n	8009764 <USBD_StdEPReq+0x240>
 80096fe:	e097      	b.n	8009830 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009700:	7bbb      	ldrb	r3, [r7, #14]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d007      	beq.n	8009716 <USBD_StdEPReq+0x1f2>
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	2b80      	cmp	r3, #128	; 0x80
 800970a:	d004      	beq.n	8009716 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fbed 	bl	8009eee <USBD_CtlError>
                break;
 8009714:	e091      	b.n	800983a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009716:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800971a:	2b00      	cmp	r3, #0
 800971c:	da0b      	bge.n	8009736 <USBD_StdEPReq+0x212>
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009724:	4613      	mov	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	3310      	adds	r3, #16
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	4413      	add	r3, r2
 8009732:	3304      	adds	r3, #4
 8009734:	e00b      	b.n	800974e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800973c:	4613      	mov	r3, r2
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	4413      	add	r3, r2
 800974c:	3304      	adds	r3, #4
 800974e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2202      	movs	r2, #2
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 fc37 	bl	8009fd0 <USBD_CtlSendData>
              break;
 8009762:	e06a      	b.n	800983a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009768:	2b00      	cmp	r3, #0
 800976a:	da11      	bge.n	8009790 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800976c:	7bbb      	ldrb	r3, [r7, #14]
 800976e:	f003 020f 	and.w	r2, r3, #15
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	440b      	add	r3, r1
 800977e:	3324      	adds	r3, #36	; 0x24
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d117      	bne.n	80097b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fbb0 	bl	8009eee <USBD_CtlError>
                  break;
 800978e:	e054      	b.n	800983a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009790:	7bbb      	ldrb	r3, [r7, #14]
 8009792:	f003 020f 	and.w	r2, r3, #15
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	4613      	mov	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	440b      	add	r3, r1
 80097a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097a6:	881b      	ldrh	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d104      	bne.n	80097b6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097ac:	6839      	ldr	r1, [r7, #0]
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 fb9d 	bl	8009eee <USBD_CtlError>
                  break;
 80097b4:	e041      	b.n	800983a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	da0b      	bge.n	80097d6 <USBD_StdEPReq+0x2b2>
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	3310      	adds	r3, #16
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	4413      	add	r3, r2
 80097d2:	3304      	adds	r3, #4
 80097d4:	e00b      	b.n	80097ee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	4413      	add	r3, r2
 80097ec:	3304      	adds	r3, #4
 80097ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80097f0:	7bbb      	ldrb	r3, [r7, #14]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <USBD_StdEPReq+0x2d8>
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	2b80      	cmp	r3, #128	; 0x80
 80097fa:	d103      	bne.n	8009804 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e00e      	b.n	8009822 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009804:	7bbb      	ldrb	r3, [r7, #14]
 8009806:	4619      	mov	r1, r3
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f001 f873 	bl	800a8f4 <USBD_LL_IsStallEP>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2201      	movs	r2, #1
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	e002      	b.n	8009822 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2200      	movs	r2, #0
 8009820:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2202      	movs	r2, #2
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fbd1 	bl	8009fd0 <USBD_CtlSendData>
              break;
 800982e:	e004      	b.n	800983a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fb5b 	bl	8009eee <USBD_CtlError>
              break;
 8009838:	bf00      	nop
          }
          break;
 800983a:	e004      	b.n	8009846 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fb55 	bl	8009eee <USBD_CtlError>
          break;
 8009844:	bf00      	nop
      }
      break;
 8009846:	e005      	b.n	8009854 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fb4f 	bl	8009eee <USBD_CtlError>
      break;
 8009850:	e000      	b.n	8009854 <USBD_StdEPReq+0x330>
      break;
 8009852:	bf00      	nop
  }

  return ret;
 8009854:	7bfb      	ldrb	r3, [r7, #15]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
	...

08009860 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800986e:	2300      	movs	r3, #0
 8009870:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009872:	2300      	movs	r3, #0
 8009874:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	885b      	ldrh	r3, [r3, #2]
 800987a:	0a1b      	lsrs	r3, r3, #8
 800987c:	b29b      	uxth	r3, r3
 800987e:	3b01      	subs	r3, #1
 8009880:	2b06      	cmp	r3, #6
 8009882:	f200 8128 	bhi.w	8009ad6 <USBD_GetDescriptor+0x276>
 8009886:	a201      	add	r2, pc, #4	; (adr r2, 800988c <USBD_GetDescriptor+0x2c>)
 8009888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988c:	080098a9 	.word	0x080098a9
 8009890:	080098c1 	.word	0x080098c1
 8009894:	08009901 	.word	0x08009901
 8009898:	08009ad7 	.word	0x08009ad7
 800989c:	08009ad7 	.word	0x08009ad7
 80098a0:	08009a77 	.word	0x08009a77
 80098a4:	08009aa3 	.word	0x08009aa3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	7c12      	ldrb	r2, [r2, #16]
 80098b4:	f107 0108 	add.w	r1, r7, #8
 80098b8:	4610      	mov	r0, r2
 80098ba:	4798      	blx	r3
 80098bc:	60f8      	str	r0, [r7, #12]
      break;
 80098be:	e112      	b.n	8009ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	7c1b      	ldrb	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10d      	bne.n	80098e4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d0:	f107 0208 	add.w	r2, r7, #8
 80098d4:	4610      	mov	r0, r2
 80098d6:	4798      	blx	r3
 80098d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3301      	adds	r3, #1
 80098de:	2202      	movs	r2, #2
 80098e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80098e2:	e100      	b.n	8009ae6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ec:	f107 0208 	add.w	r2, r7, #8
 80098f0:	4610      	mov	r0, r2
 80098f2:	4798      	blx	r3
 80098f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3301      	adds	r3, #1
 80098fa:	2202      	movs	r2, #2
 80098fc:	701a      	strb	r2, [r3, #0]
      break;
 80098fe:	e0f2      	b.n	8009ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	885b      	ldrh	r3, [r3, #2]
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b05      	cmp	r3, #5
 8009908:	f200 80ac 	bhi.w	8009a64 <USBD_GetDescriptor+0x204>
 800990c:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <USBD_GetDescriptor+0xb4>)
 800990e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009912:	bf00      	nop
 8009914:	0800992d 	.word	0x0800992d
 8009918:	08009961 	.word	0x08009961
 800991c:	08009995 	.word	0x08009995
 8009920:	080099c9 	.word	0x080099c9
 8009924:	080099fd 	.word	0x080099fd
 8009928:	08009a31 	.word	0x08009a31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00b      	beq.n	8009950 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	7c12      	ldrb	r2, [r2, #16]
 8009944:	f107 0108 	add.w	r1, r7, #8
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
 800994c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800994e:	e091      	b.n	8009a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 facb 	bl	8009eee <USBD_CtlError>
            err++;
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	3301      	adds	r3, #1
 800995c:	72fb      	strb	r3, [r7, #11]
          break;
 800995e:	e089      	b.n	8009a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d00b      	beq.n	8009984 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	7c12      	ldrb	r2, [r2, #16]
 8009978:	f107 0108 	add.w	r1, r7, #8
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
 8009980:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009982:	e077      	b.n	8009a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 fab1 	bl	8009eee <USBD_CtlError>
            err++;
 800998c:	7afb      	ldrb	r3, [r7, #11]
 800998e:	3301      	adds	r3, #1
 8009990:	72fb      	strb	r3, [r7, #11]
          break;
 8009992:	e06f      	b.n	8009a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00b      	beq.n	80099b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	7c12      	ldrb	r2, [r2, #16]
 80099ac:	f107 0108 	add.w	r1, r7, #8
 80099b0:	4610      	mov	r0, r2
 80099b2:	4798      	blx	r3
 80099b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099b6:	e05d      	b.n	8009a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099b8:	6839      	ldr	r1, [r7, #0]
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 fa97 	bl	8009eee <USBD_CtlError>
            err++;
 80099c0:	7afb      	ldrb	r3, [r7, #11]
 80099c2:	3301      	adds	r3, #1
 80099c4:	72fb      	strb	r3, [r7, #11]
          break;
 80099c6:	e055      	b.n	8009a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00b      	beq.n	80099ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099da:	691b      	ldr	r3, [r3, #16]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	7c12      	ldrb	r2, [r2, #16]
 80099e0:	f107 0108 	add.w	r1, r7, #8
 80099e4:	4610      	mov	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ea:	e043      	b.n	8009a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fa7d 	bl	8009eee <USBD_CtlError>
            err++;
 80099f4:	7afb      	ldrb	r3, [r7, #11]
 80099f6:	3301      	adds	r3, #1
 80099f8:	72fb      	strb	r3, [r7, #11]
          break;
 80099fa:	e03b      	b.n	8009a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a02:	695b      	ldr	r3, [r3, #20]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00b      	beq.n	8009a20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	7c12      	ldrb	r2, [r2, #16]
 8009a14:	f107 0108 	add.w	r1, r7, #8
 8009a18:	4610      	mov	r0, r2
 8009a1a:	4798      	blx	r3
 8009a1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a1e:	e029      	b.n	8009a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa63 	bl	8009eee <USBD_CtlError>
            err++;
 8009a28:	7afb      	ldrb	r3, [r7, #11]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a2e:	e021      	b.n	8009a74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00b      	beq.n	8009a54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	7c12      	ldrb	r2, [r2, #16]
 8009a48:	f107 0108 	add.w	r1, r7, #8
 8009a4c:	4610      	mov	r0, r2
 8009a4e:	4798      	blx	r3
 8009a50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a52:	e00f      	b.n	8009a74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 fa49 	bl	8009eee <USBD_CtlError>
            err++;
 8009a5c:	7afb      	ldrb	r3, [r7, #11]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	72fb      	strb	r3, [r7, #11]
          break;
 8009a62:	e007      	b.n	8009a74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa41 	bl	8009eee <USBD_CtlError>
          err++;
 8009a6c:	7afb      	ldrb	r3, [r7, #11]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a72:	bf00      	nop
      }
      break;
 8009a74:	e037      	b.n	8009ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	7c1b      	ldrb	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a86:	f107 0208 	add.w	r2, r7, #8
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	4798      	blx	r3
 8009a8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a90:	e029      	b.n	8009ae6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fa2a 	bl	8009eee <USBD_CtlError>
        err++;
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	72fb      	strb	r3, [r7, #11]
      break;
 8009aa0:	e021      	b.n	8009ae6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	7c1b      	ldrb	r3, [r3, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10d      	bne.n	8009ac6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab2:	f107 0208 	add.w	r2, r7, #8
 8009ab6:	4610      	mov	r0, r2
 8009ab8:	4798      	blx	r3
 8009aba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ac4:	e00f      	b.n	8009ae6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fa10 	bl	8009eee <USBD_CtlError>
        err++;
 8009ace:	7afb      	ldrb	r3, [r7, #11]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ad4:	e007      	b.n	8009ae6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa08 	bl	8009eee <USBD_CtlError>
      err++;
 8009ade:	7afb      	ldrb	r3, [r7, #11]
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ae4:	bf00      	nop
  }

  if (err != 0U)
 8009ae6:	7afb      	ldrb	r3, [r7, #11]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d11e      	bne.n	8009b2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	88db      	ldrh	r3, [r3, #6]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d016      	beq.n	8009b22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009af4:	893b      	ldrh	r3, [r7, #8]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00e      	beq.n	8009b18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	88da      	ldrh	r2, [r3, #6]
 8009afe:	893b      	ldrh	r3, [r7, #8]
 8009b00:	4293      	cmp	r3, r2
 8009b02:	bf28      	it	cs
 8009b04:	4613      	movcs	r3, r2
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b0a:	893b      	ldrh	r3, [r7, #8]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	68f9      	ldr	r1, [r7, #12]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fa5d 	bl	8009fd0 <USBD_CtlSendData>
 8009b16:	e009      	b.n	8009b2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f9e7 	bl	8009eee <USBD_CtlError>
 8009b20:	e004      	b.n	8009b2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 faae 	bl	800a084 <USBD_CtlSendStatus>
 8009b28:	e000      	b.n	8009b2c <USBD_GetDescriptor+0x2cc>
    return;
 8009b2a:	bf00      	nop
  }
}
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop

08009b34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	889b      	ldrh	r3, [r3, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d131      	bne.n	8009baa <USBD_SetAddress+0x76>
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	88db      	ldrh	r3, [r3, #6]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d12d      	bne.n	8009baa <USBD_SetAddress+0x76>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	885b      	ldrh	r3, [r3, #2]
 8009b52:	2b7f      	cmp	r3, #127	; 0x7f
 8009b54:	d829      	bhi.n	8009baa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	885b      	ldrh	r3, [r3, #2]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d104      	bne.n	8009b78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f9bc 	bl	8009eee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b76:	e01d      	b.n	8009bb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7bfa      	ldrb	r2, [r7, #15]
 8009b7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fee1 	bl	800a94c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fa7a 	bl	800a084 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2202      	movs	r2, #2
 8009b9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9e:	e009      	b.n	8009bb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ba8:	e004      	b.n	8009bb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f99e 	bl	8009eee <USBD_CtlError>
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	885b      	ldrh	r3, [r3, #2]
 8009bce:	b2da      	uxtb	r2, r3
 8009bd0:	4b4e      	ldr	r3, [pc, #312]	; (8009d0c <USBD_SetConfig+0x150>)
 8009bd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009bd4:	4b4d      	ldr	r3, [pc, #308]	; (8009d0c <USBD_SetConfig+0x150>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d905      	bls.n	8009be8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009bdc:	6839      	ldr	r1, [r7, #0]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f985 	bl	8009eee <USBD_CtlError>
    return USBD_FAIL;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e08c      	b.n	8009d02 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d002      	beq.n	8009bfa <USBD_SetConfig+0x3e>
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	d029      	beq.n	8009c4c <USBD_SetConfig+0x90>
 8009bf8:	e075      	b.n	8009ce6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009bfa:	4b44      	ldr	r3, [pc, #272]	; (8009d0c <USBD_SetConfig+0x150>)
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d020      	beq.n	8009c44 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009c02:	4b42      	ldr	r3, [pc, #264]	; (8009d0c <USBD_SetConfig+0x150>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c0c:	4b3f      	ldr	r3, [pc, #252]	; (8009d0c <USBD_SetConfig+0x150>)
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7fe ffe7 	bl	8008be6 <USBD_SetClassConfig>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009c1c:	7bfb      	ldrb	r3, [r7, #15]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d008      	beq.n	8009c34 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f962 	bl	8009eee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c32:	e065      	b.n	8009d00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fa25 	bl	800a084 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2203      	movs	r2, #3
 8009c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c42:	e05d      	b.n	8009d00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fa1d 	bl	800a084 <USBD_CtlSendStatus>
      break;
 8009c4a:	e059      	b.n	8009d00 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009c4c:	4b2f      	ldr	r3, [pc, #188]	; (8009d0c <USBD_SetConfig+0x150>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d112      	bne.n	8009c7a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c5c:	4b2b      	ldr	r3, [pc, #172]	; (8009d0c <USBD_SetConfig+0x150>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	461a      	mov	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c66:	4b29      	ldr	r3, [pc, #164]	; (8009d0c <USBD_SetConfig+0x150>)
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7fe ffd6 	bl	8008c1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa06 	bl	800a084 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c78:	e042      	b.n	8009d00 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c7a:	4b24      	ldr	r3, [pc, #144]	; (8009d0c <USBD_SetConfig+0x150>)
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d02a      	beq.n	8009cde <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7fe ffc4 	bl	8008c1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c96:	4b1d      	ldr	r3, [pc, #116]	; (8009d0c <USBD_SetConfig+0x150>)
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009ca0:	4b1a      	ldr	r3, [pc, #104]	; (8009d0c <USBD_SetConfig+0x150>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f7fe ff9d 	bl	8008be6 <USBD_SetClassConfig>
 8009cac:	4603      	mov	r3, r0
 8009cae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009cb0:	7bfb      	ldrb	r3, [r7, #15]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00f      	beq.n	8009cd6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 f918 	bl	8009eee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7fe ffa9 	bl	8008c1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2202      	movs	r2, #2
 8009cd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cd4:	e014      	b.n	8009d00 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f9d4 	bl	800a084 <USBD_CtlSendStatus>
      break;
 8009cdc:	e010      	b.n	8009d00 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f9d0 	bl	800a084 <USBD_CtlSendStatus>
      break;
 8009ce4:	e00c      	b.n	8009d00 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f900 	bl	8009eee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cee:	4b07      	ldr	r3, [pc, #28]	; (8009d0c <USBD_SetConfig+0x150>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7fe ff92 	bl	8008c1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8009cfe:	bf00      	nop
  }

  return ret;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	2000044c 	.word	0x2000044c

08009d10 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	88db      	ldrh	r3, [r3, #6]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d004      	beq.n	8009d2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f8e2 	bl	8009eee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009d2a:	e023      	b.n	8009d74 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	dc02      	bgt.n	8009d3e <USBD_GetConfig+0x2e>
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	dc03      	bgt.n	8009d44 <USBD_GetConfig+0x34>
 8009d3c:	e015      	b.n	8009d6a <USBD_GetConfig+0x5a>
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d00b      	beq.n	8009d5a <USBD_GetConfig+0x4a>
 8009d42:	e012      	b.n	8009d6a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	3308      	adds	r3, #8
 8009d4e:	2201      	movs	r2, #1
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f93c 	bl	8009fd0 <USBD_CtlSendData>
        break;
 8009d58:	e00c      	b.n	8009d74 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	2201      	movs	r2, #1
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f934 	bl	8009fd0 <USBD_CtlSendData>
        break;
 8009d68:	e004      	b.n	8009d74 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 f8be 	bl	8009eee <USBD_CtlError>
        break;
 8009d72:	bf00      	nop
}
 8009d74:	bf00      	nop
 8009d76:	3708      	adds	r7, #8
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	d81e      	bhi.n	8009dd2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	88db      	ldrh	r3, [r3, #6]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d004      	beq.n	8009da6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 f8a5 	bl	8009eee <USBD_CtlError>
        break;
 8009da4:	e01a      	b.n	8009ddc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d005      	beq.n	8009dc2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	f043 0202 	orr.w	r2, r3, #2
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	330c      	adds	r3, #12
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f900 	bl	8009fd0 <USBD_CtlSendData>
      break;
 8009dd0:	e004      	b.n	8009ddc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f88a 	bl	8009eee <USBD_CtlError>
      break;
 8009dda:	bf00      	nop
  }
}
 8009ddc:	bf00      	nop
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	885b      	ldrh	r3, [r3, #2]
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d107      	bne.n	8009e06 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f940 	bl	800a084 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009e04:	e013      	b.n	8009e2e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	885b      	ldrh	r3, [r3, #2]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d10b      	bne.n	8009e26 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	889b      	ldrh	r3, [r3, #4]
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f930 	bl	800a084 <USBD_CtlSendStatus>
}
 8009e24:	e003      	b.n	8009e2e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009e26:	6839      	ldr	r1, [r7, #0]
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f000 f860 	bl	8009eee <USBD_CtlError>
}
 8009e2e:	bf00      	nop
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b082      	sub	sp, #8
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d80b      	bhi.n	8009e66 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	885b      	ldrh	r3, [r3, #2]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d10c      	bne.n	8009e70 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f910 	bl	800a084 <USBD_CtlSendStatus>
      }
      break;
 8009e64:	e004      	b.n	8009e70 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f840 	bl	8009eee <USBD_CtlError>
      break;
 8009e6e:	e000      	b.n	8009e72 <USBD_ClrFeature+0x3c>
      break;
 8009e70:	bf00      	nop
  }
}
 8009e72:	bf00      	nop
 8009e74:	3708      	adds	r7, #8
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b084      	sub	sp, #16
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	781a      	ldrb	r2, [r3, #0]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	3301      	adds	r3, #1
 8009e94:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	781a      	ldrb	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f7ff fa41 	bl	800932c <SWAPBYTE>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	461a      	mov	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7ff fa34 	bl	800932c <SWAPBYTE>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f7ff fa27 	bl	800932c <SWAPBYTE>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	80da      	strh	r2, [r3, #6]
}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
 8009ef6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ef8:	2180      	movs	r1, #128	; 0x80
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fcbc 	bl	800a878 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f00:	2100      	movs	r1, #0
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fcb8 	bl	800a878 <USBD_LL_StallEP>
}
 8009f08:	bf00      	nop
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d036      	beq.n	8009f94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009f2a:	6938      	ldr	r0, [r7, #16]
 8009f2c:	f000 f836 	bl	8009f9c <USBD_GetLen>
 8009f30:	4603      	mov	r3, r0
 8009f32:	3301      	adds	r3, #1
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	4413      	add	r3, r2
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	7812      	ldrb	r2, [r2, #0]
 8009f48:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	4413      	add	r3, r2
 8009f56:	2203      	movs	r2, #3
 8009f58:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f60:	e013      	b.n	8009f8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	4413      	add	r3, r2
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	7812      	ldrb	r2, [r2, #0]
 8009f6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	3301      	adds	r3, #1
 8009f72:	613b      	str	r3, [r7, #16]
    idx++;
 8009f74:	7dfb      	ldrb	r3, [r7, #23]
 8009f76:	3301      	adds	r3, #1
 8009f78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	4413      	add	r3, r2
 8009f80:	2200      	movs	r2, #0
 8009f82:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
 8009f86:	3301      	adds	r3, #1
 8009f88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1e7      	bne.n	8009f62 <USBD_GetString+0x52>
 8009f92:	e000      	b.n	8009f96 <USBD_GetString+0x86>
    return;
 8009f94:	bf00      	nop
  }
}
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009fac:	e005      	b.n	8009fba <USBD_GetLen+0x1e>
  {
    len++;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1f5      	bne.n	8009fae <USBD_GetLen+0x12>
  }

  return len;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2202      	movs	r2, #2
 8009fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f000 fcc7 	bl	800a98a <USBD_LL_Transmit>

  return USBD_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	60f8      	str	r0, [r7, #12]
 800a00e:	60b9      	str	r1, [r7, #8]
 800a010:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	2100      	movs	r1, #0
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 fcb6 	bl	800a98a <USBD_LL_Transmit>

  return USBD_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2203      	movs	r2, #3
 800a038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	68ba      	ldr	r2, [r7, #8]
 800a050:	2100      	movs	r1, #0
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f000 fcba 	bl	800a9cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	60b9      	str	r1, [r7, #8]
 800a06c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	2100      	movs	r1, #0
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 fca9 	bl	800a9cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a07a:	2300      	movs	r3, #0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2204      	movs	r2, #4
 800a090:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a094:	2300      	movs	r3, #0
 800a096:	2200      	movs	r2, #0
 800a098:	2100      	movs	r1, #0
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fc75 	bl	800a98a <USBD_LL_Transmit>

  return USBD_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2205      	movs	r2, #5
 800a0b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	2200      	movs	r2, #0
 800a0be:	2100      	movs	r1, #0
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fc83 	bl	800a9cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	4912      	ldr	r1, [pc, #72]	; (800a120 <MX_USB_DEVICE_Init+0x50>)
 800a0d8:	4812      	ldr	r0, [pc, #72]	; (800a124 <MX_USB_DEVICE_Init+0x54>)
 800a0da:	f7fe fd07 	bl	8008aec <USBD_Init>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0e4:	f7f7 f8ea 	bl	80012bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a0e8:	490f      	ldr	r1, [pc, #60]	; (800a128 <MX_USB_DEVICE_Init+0x58>)
 800a0ea:	480e      	ldr	r0, [pc, #56]	; (800a124 <MX_USB_DEVICE_Init+0x54>)
 800a0ec:	f7fe fd2e 	bl	8008b4c <USBD_RegisterClass>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0f6:	f7f7 f8e1 	bl	80012bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a0fa:	490c      	ldr	r1, [pc, #48]	; (800a12c <MX_USB_DEVICE_Init+0x5c>)
 800a0fc:	4809      	ldr	r0, [pc, #36]	; (800a124 <MX_USB_DEVICE_Init+0x54>)
 800a0fe:	f7fe fc65 	bl	80089cc <USBD_CDC_RegisterInterface>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a108:	f7f7 f8d8 	bl	80012bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a10c:	4805      	ldr	r0, [pc, #20]	; (800a124 <MX_USB_DEVICE_Init+0x54>)
 800a10e:	f7fe fd53 	bl	8008bb8 <USBD_Start>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a118:	f7f7 f8d0 	bl	80012bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a11c:	bf00      	nop
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	200000b4 	.word	0x200000b4
 800a124:	20000450 	.word	0x20000450
 800a128:	20000020 	.word	0x20000020
 800a12c:	200000a0 	.word	0x200000a0

0800a130 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a134:	2200      	movs	r2, #0
 800a136:	4905      	ldr	r1, [pc, #20]	; (800a14c <CDC_Init_HS+0x1c>)
 800a138:	4805      	ldr	r0, [pc, #20]	; (800a150 <CDC_Init_HS+0x20>)
 800a13a:	f7fe fc61 	bl	8008a00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a13e:	4905      	ldr	r1, [pc, #20]	; (800a154 <CDC_Init_HS+0x24>)
 800a140:	4803      	ldr	r0, [pc, #12]	; (800a150 <CDC_Init_HS+0x20>)
 800a142:	f7fe fc7f 	bl	8008a44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a146:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a148:	4618      	mov	r0, r3
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20000f2c 	.word	0x20000f2c
 800a150:	20000450 	.word	0x20000450
 800a154:	2000072c 	.word	0x2000072c

0800a158 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a15c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a15e:	4618      	mov	r0, r3
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	4603      	mov	r3, r0
 800a170:	6039      	str	r1, [r7, #0]
 800a172:	71fb      	strb	r3, [r7, #7]
 800a174:	4613      	mov	r3, r2
 800a176:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a178:	79fb      	ldrb	r3, [r7, #7]
 800a17a:	2b23      	cmp	r3, #35	; 0x23
 800a17c:	d84a      	bhi.n	800a214 <CDC_Control_HS+0xac>
 800a17e:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <CDC_Control_HS+0x1c>)
 800a180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a184:	0800a215 	.word	0x0800a215
 800a188:	0800a215 	.word	0x0800a215
 800a18c:	0800a215 	.word	0x0800a215
 800a190:	0800a215 	.word	0x0800a215
 800a194:	0800a215 	.word	0x0800a215
 800a198:	0800a215 	.word	0x0800a215
 800a19c:	0800a215 	.word	0x0800a215
 800a1a0:	0800a215 	.word	0x0800a215
 800a1a4:	0800a215 	.word	0x0800a215
 800a1a8:	0800a215 	.word	0x0800a215
 800a1ac:	0800a215 	.word	0x0800a215
 800a1b0:	0800a215 	.word	0x0800a215
 800a1b4:	0800a215 	.word	0x0800a215
 800a1b8:	0800a215 	.word	0x0800a215
 800a1bc:	0800a215 	.word	0x0800a215
 800a1c0:	0800a215 	.word	0x0800a215
 800a1c4:	0800a215 	.word	0x0800a215
 800a1c8:	0800a215 	.word	0x0800a215
 800a1cc:	0800a215 	.word	0x0800a215
 800a1d0:	0800a215 	.word	0x0800a215
 800a1d4:	0800a215 	.word	0x0800a215
 800a1d8:	0800a215 	.word	0x0800a215
 800a1dc:	0800a215 	.word	0x0800a215
 800a1e0:	0800a215 	.word	0x0800a215
 800a1e4:	0800a215 	.word	0x0800a215
 800a1e8:	0800a215 	.word	0x0800a215
 800a1ec:	0800a215 	.word	0x0800a215
 800a1f0:	0800a215 	.word	0x0800a215
 800a1f4:	0800a215 	.word	0x0800a215
 800a1f8:	0800a215 	.word	0x0800a215
 800a1fc:	0800a215 	.word	0x0800a215
 800a200:	0800a215 	.word	0x0800a215
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a215 	.word	0x0800a215
 800a20c:	0800a215 	.word	0x0800a215
 800a210:	0800a215 	.word	0x0800a215
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a214:	bf00      	nop
  }

  return (USBD_OK);
 800a216:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	4805      	ldr	r0, [pc, #20]	; (800a248 <CDC_Receive_HS+0x24>)
 800a232:	f7fe fc07 	bl	8008a44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a236:	4804      	ldr	r0, [pc, #16]	; (800a248 <CDC_Receive_HS+0x24>)
 800a238:	f7fe fc22 	bl	8008a80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a23c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20000450 	.word	0x20000450

0800a24c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	4613      	mov	r3, r2
 800a258:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800a25e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a262:	4618      	mov	r0, r3
 800a264:	371c      	adds	r7, #28
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
	...

0800a270 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	6039      	str	r1, [r7, #0]
 800a27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	2212      	movs	r2, #18
 800a280:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a282:	4b03      	ldr	r3, [pc, #12]	; (800a290 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	200000d0 	.word	0x200000d0

0800a294 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	6039      	str	r1, [r7, #0]
 800a29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2204      	movs	r2, #4
 800a2a4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2a6:	4b03      	ldr	r3, [pc, #12]	; (800a2b4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	200000e4 	.word	0x200000e4

0800a2b8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	4603      	mov	r3, r0
 800a2c0:	6039      	str	r1, [r7, #0]
 800a2c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2c4:	79fb      	ldrb	r3, [r7, #7]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d105      	bne.n	800a2d6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	4907      	ldr	r1, [pc, #28]	; (800a2ec <USBD_HS_ProductStrDescriptor+0x34>)
 800a2ce:	4808      	ldr	r0, [pc, #32]	; (800a2f0 <USBD_HS_ProductStrDescriptor+0x38>)
 800a2d0:	f7ff fe1e 	bl	8009f10 <USBD_GetString>
 800a2d4:	e004      	b.n	800a2e0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	4904      	ldr	r1, [pc, #16]	; (800a2ec <USBD_HS_ProductStrDescriptor+0x34>)
 800a2da:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <USBD_HS_ProductStrDescriptor+0x38>)
 800a2dc:	f7ff fe18 	bl	8009f10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2e0:	4b02      	ldr	r3, [pc, #8]	; (800a2ec <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	2000172c 	.word	0x2000172c
 800a2f0:	0800b3c4 	.word	0x0800b3c4

0800a2f4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	6039      	str	r1, [r7, #0]
 800a2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a300:	683a      	ldr	r2, [r7, #0]
 800a302:	4904      	ldr	r1, [pc, #16]	; (800a314 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a304:	4804      	ldr	r0, [pc, #16]	; (800a318 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a306:	f7ff fe03 	bl	8009f10 <USBD_GetString>
  return USBD_StrDesc;
 800a30a:	4b02      	ldr	r3, [pc, #8]	; (800a314 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	2000172c 	.word	0x2000172c
 800a318:	0800b3dc 	.word	0x0800b3dc

0800a31c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	6039      	str	r1, [r7, #0]
 800a326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	221a      	movs	r2, #26
 800a32c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a32e:	f000 f843 	bl	800a3b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a332:	4b02      	ldr	r3, [pc, #8]	; (800a33c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	200000e8 	.word	0x200000e8

0800a340 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	4603      	mov	r3, r0
 800a348:	6039      	str	r1, [r7, #0]
 800a34a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a34c:	79fb      	ldrb	r3, [r7, #7]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d105      	bne.n	800a35e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	4907      	ldr	r1, [pc, #28]	; (800a374 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a356:	4808      	ldr	r0, [pc, #32]	; (800a378 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a358:	f7ff fdda 	bl	8009f10 <USBD_GetString>
 800a35c:	e004      	b.n	800a368 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a35e:	683a      	ldr	r2, [r7, #0]
 800a360:	4904      	ldr	r1, [pc, #16]	; (800a374 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a362:	4805      	ldr	r0, [pc, #20]	; (800a378 <USBD_HS_ConfigStrDescriptor+0x38>)
 800a364:	f7ff fdd4 	bl	8009f10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a368:	4b02      	ldr	r3, [pc, #8]	; (800a374 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3708      	adds	r7, #8
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	2000172c 	.word	0x2000172c
 800a378:	0800b3f0 	.word	0x0800b3f0

0800a37c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	6039      	str	r1, [r7, #0]
 800a386:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a388:	79fb      	ldrb	r3, [r7, #7]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d105      	bne.n	800a39a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	4907      	ldr	r1, [pc, #28]	; (800a3b0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a392:	4808      	ldr	r0, [pc, #32]	; (800a3b4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a394:	f7ff fdbc 	bl	8009f10 <USBD_GetString>
 800a398:	e004      	b.n	800a3a4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	4904      	ldr	r1, [pc, #16]	; (800a3b0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a39e:	4805      	ldr	r0, [pc, #20]	; (800a3b4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a3a0:	f7ff fdb6 	bl	8009f10 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a4:	4b02      	ldr	r3, [pc, #8]	; (800a3b0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	2000172c 	.word	0x2000172c
 800a3b4:	0800b3fc 	.word	0x0800b3fc

0800a3b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a3be:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <Get_SerialNum+0x44>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a3c4:	4b0e      	ldr	r3, [pc, #56]	; (800a400 <Get_SerialNum+0x48>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a3ca:	4b0e      	ldr	r3, [pc, #56]	; (800a404 <Get_SerialNum+0x4c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d009      	beq.n	800a3f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a3de:	2208      	movs	r2, #8
 800a3e0:	4909      	ldr	r1, [pc, #36]	; (800a408 <Get_SerialNum+0x50>)
 800a3e2:	68f8      	ldr	r0, [r7, #12]
 800a3e4:	f000 f814 	bl	800a410 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a3e8:	2204      	movs	r2, #4
 800a3ea:	4908      	ldr	r1, [pc, #32]	; (800a40c <Get_SerialNum+0x54>)
 800a3ec:	68b8      	ldr	r0, [r7, #8]
 800a3ee:	f000 f80f 	bl	800a410 <IntToUnicode>
  }
}
 800a3f2:	bf00      	nop
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	1fff7a10 	.word	0x1fff7a10
 800a400:	1fff7a14 	.word	0x1fff7a14
 800a404:	1fff7a18 	.word	0x1fff7a18
 800a408:	200000ea 	.word	0x200000ea
 800a40c:	200000fa 	.word	0x200000fa

0800a410 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a410:	b480      	push	{r7}
 800a412:	b087      	sub	sp, #28
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	4613      	mov	r3, r2
 800a41c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a422:	2300      	movs	r3, #0
 800a424:	75fb      	strb	r3, [r7, #23]
 800a426:	e027      	b.n	800a478 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	0f1b      	lsrs	r3, r3, #28
 800a42c:	2b09      	cmp	r3, #9
 800a42e:	d80b      	bhi.n	800a448 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	0f1b      	lsrs	r3, r3, #28
 800a434:	b2da      	uxtb	r2, r3
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	4619      	mov	r1, r3
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	440b      	add	r3, r1
 800a440:	3230      	adds	r2, #48	; 0x30
 800a442:	b2d2      	uxtb	r2, r2
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	e00a      	b.n	800a45e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	0f1b      	lsrs	r3, r3, #28
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	005b      	lsls	r3, r3, #1
 800a452:	4619      	mov	r1, r3
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	440b      	add	r3, r1
 800a458:	3237      	adds	r2, #55	; 0x37
 800a45a:	b2d2      	uxtb	r2, r2
 800a45c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	011b      	lsls	r3, r3, #4
 800a462:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a464:	7dfb      	ldrb	r3, [r7, #23]
 800a466:	005b      	lsls	r3, r3, #1
 800a468:	3301      	adds	r3, #1
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	4413      	add	r3, r2
 800a46e:	2200      	movs	r2, #0
 800a470:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a472:	7dfb      	ldrb	r3, [r7, #23]
 800a474:	3301      	adds	r3, #1
 800a476:	75fb      	strb	r3, [r7, #23]
 800a478:	7dfa      	ldrb	r2, [r7, #23]
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d3d3      	bcc.n	800a428 <IntToUnicode+0x18>
  }
}
 800a480:	bf00      	nop
 800a482:	bf00      	nop
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
	...

0800a490 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	; 0x28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a498:	f107 0314 	add.w	r3, r7, #20
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	605a      	str	r2, [r3, #4]
 800a4a2:	609a      	str	r2, [r3, #8]
 800a4a4:	60da      	str	r2, [r3, #12]
 800a4a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a1d      	ldr	r2, [pc, #116]	; (800a524 <HAL_PCD_MspInit+0x94>)
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d134      	bne.n	800a51c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	613b      	str	r3, [r7, #16]
 800a4b6:	4b1c      	ldr	r3, [pc, #112]	; (800a528 <HAL_PCD_MspInit+0x98>)
 800a4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ba:	4a1b      	ldr	r2, [pc, #108]	; (800a528 <HAL_PCD_MspInit+0x98>)
 800a4bc:	f043 0302 	orr.w	r3, r3, #2
 800a4c0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4c2:	4b19      	ldr	r3, [pc, #100]	; (800a528 <HAL_PCD_MspInit+0x98>)
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c6:	f003 0302 	and.w	r3, r3, #2
 800a4ca:	613b      	str	r3, [r7, #16]
 800a4cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800a4ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a4d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4d4:	2302      	movs	r3, #2
 800a4d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800a4e0:	230c      	movs	r3, #12
 800a4e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4e4:	f107 0314 	add.w	r3, r7, #20
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4810      	ldr	r0, [pc, #64]	; (800a52c <HAL_PCD_MspInit+0x9c>)
 800a4ec:	f7f7 fef6 	bl	80022dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	60fb      	str	r3, [r7, #12]
 800a4f4:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <HAL_PCD_MspInit+0x98>)
 800a4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f8:	4a0b      	ldr	r2, [pc, #44]	; (800a528 <HAL_PCD_MspInit+0x98>)
 800a4fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4fe:	6313      	str	r3, [r2, #48]	; 0x30
 800a500:	4b09      	ldr	r3, [pc, #36]	; (800a528 <HAL_PCD_MspInit+0x98>)
 800a502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800a50c:	2200      	movs	r2, #0
 800a50e:	2101      	movs	r1, #1
 800a510:	204d      	movs	r0, #77	; 0x4d
 800a512:	f7f7 fb30 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a516:	204d      	movs	r0, #77	; 0x4d
 800a518:	f7f7 fb49 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a51c:	bf00      	nop
 800a51e:	3728      	adds	r7, #40	; 0x28
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	40040000 	.word	0x40040000
 800a528:	40023800 	.word	0x40023800
 800a52c:	40020400 	.word	0x40020400

0800a530 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7fe fb83 	bl	8008c52 <USBD_LL_SetupStage>
}
 800a54c:	bf00      	nop
 800a54e:	3708      	adds	r7, #8
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	460b      	mov	r3, r1
 800a55e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a566:	78fa      	ldrb	r2, [r7, #3]
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	4613      	mov	r3, r2
 800a56c:	00db      	lsls	r3, r3, #3
 800a56e:	4413      	add	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	440b      	add	r3, r1
 800a574:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	78fb      	ldrb	r3, [r7, #3]
 800a57c:	4619      	mov	r1, r3
 800a57e:	f7fe fbbd 	bl	8008cfc <USBD_LL_DataOutStage>
}
 800a582:	bf00      	nop
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b082      	sub	sp, #8
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	460b      	mov	r3, r1
 800a594:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a59c:	78fa      	ldrb	r2, [r7, #3]
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	00db      	lsls	r3, r3, #3
 800a5a4:	4413      	add	r3, r2
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	440b      	add	r3, r1
 800a5aa:	334c      	adds	r3, #76	; 0x4c
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f7fe fc56 	bl	8008e62 <USBD_LL_DataInStage>
}
 800a5b6:	bf00      	nop
 800a5b8:	3708      	adds	r7, #8
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b082      	sub	sp, #8
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fe fd8a 	bl	80090e6 <USBD_LL_SOF>
}
 800a5d2:	bf00      	nop
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
 800a5f2:	e008      	b.n	800a606 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d102      	bne.n	800a602 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	73fb      	strb	r3, [r7, #15]
 800a600:	e001      	b.n	800a606 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a602:	f7f6 fe5b 	bl	80012bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a60c:	7bfa      	ldrb	r2, [r7, #15]
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f7fe fd2a 	bl	800906a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7fe fcd2 	bl	8008fc6 <USBD_LL_Reset>
}
 800a622:	bf00      	nop
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
	...

0800a62c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a63a:	4618      	mov	r0, r3
 800a63c:	f7fe fd25 	bl	800908a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	6812      	ldr	r2, [r2, #0]
 800a64e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a652:	f043 0301 	orr.w	r3, r3, #1
 800a656:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d005      	beq.n	800a66c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a660:	4b04      	ldr	r3, [pc, #16]	; (800a674 <HAL_PCD_SuspendCallback+0x48>)
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	4a03      	ldr	r2, [pc, #12]	; (800a674 <HAL_PCD_SuspendCallback+0x48>)
 800a666:	f043 0306 	orr.w	r3, r3, #6
 800a66a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a66c:	bf00      	nop
 800a66e:	3708      	adds	r7, #8
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	e000ed00 	.word	0xe000ed00

0800a678 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe fd15 	bl	80090b6 <USBD_LL_Resume>
}
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6a6:	78fa      	ldrb	r2, [r7, #3]
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe fd6d 	bl	800918a <USBD_LL_IsoOUTIncomplete>
}
 800a6b0:	bf00      	nop
 800a6b2:	3708      	adds	r7, #8
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6ca:	78fa      	ldrb	r2, [r7, #3]
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fd29 	bl	8009126 <USBD_LL_IsoINIncomplete>
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7fe fd7f 	bl	80091ee <USBD_LL_DevConnected>
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fd7c 	bl	8009204 <USBD_LL_DevDisconnected>
}
 800a70c:	bf00      	nop
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d140      	bne.n	800a7a6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a724:	4a22      	ldr	r2, [pc, #136]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a20      	ldr	r2, [pc, #128]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a730:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a734:	4b1e      	ldr	r3, [pc, #120]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a736:	4a1f      	ldr	r2, [pc, #124]	; (800a7b4 <USBD_LL_Init+0xa0>)
 800a738:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800a73a:	4b1d      	ldr	r3, [pc, #116]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a73c:	2206      	movs	r2, #6
 800a73e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a740:	4b1b      	ldr	r3, [pc, #108]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a742:	2202      	movs	r2, #2
 800a744:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a746:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a748:	2200      	movs	r2, #0
 800a74a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a74c:	4b18      	ldr	r3, [pc, #96]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a74e:	2202      	movs	r2, #2
 800a750:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a752:	4b17      	ldr	r3, [pc, #92]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a754:	2200      	movs	r2, #0
 800a756:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a758:	4b15      	ldr	r3, [pc, #84]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a75e:	4b14      	ldr	r3, [pc, #80]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a760:	2200      	movs	r2, #0
 800a762:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a764:	4b12      	ldr	r3, [pc, #72]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a766:	2200      	movs	r2, #0
 800a768:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a76a:	4b11      	ldr	r3, [pc, #68]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a770:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a772:	2200      	movs	r2, #0
 800a774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a776:	480e      	ldr	r0, [pc, #56]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a778:	f7f7 ff7e 	bl	8002678 <HAL_PCD_Init>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d001      	beq.n	800a786 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a782:	f7f6 fd9b 	bl	80012bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a78a:	4809      	ldr	r0, [pc, #36]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a78c:	f7f9 f9d5 	bl	8003b3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a790:	2280      	movs	r2, #128	; 0x80
 800a792:	2100      	movs	r1, #0
 800a794:	4806      	ldr	r0, [pc, #24]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a796:	f7f9 f989 	bl	8003aac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a79a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a79e:	2101      	movs	r1, #1
 800a7a0:	4803      	ldr	r0, [pc, #12]	; (800a7b0 <USBD_LL_Init+0x9c>)
 800a7a2:	f7f9 f983 	bl	8003aac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	2000192c 	.word	0x2000192c
 800a7b4:	40040000 	.word	0x40040000

0800a7b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7f8 f86f 	bl	80028b2 <HAL_PCD_Start>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7d8:	7bfb      	ldrb	r3, [r7, #15]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 f942 	bl	800aa64 <USBD_Get_USB_Status>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	4608      	mov	r0, r1
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	70fb      	strb	r3, [r7, #3]
 800a800:	460b      	mov	r3, r1
 800a802:	70bb      	strb	r3, [r7, #2]
 800a804:	4613      	mov	r3, r2
 800a806:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a80c:	2300      	movs	r3, #0
 800a80e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a816:	78bb      	ldrb	r3, [r7, #2]
 800a818:	883a      	ldrh	r2, [r7, #0]
 800a81a:	78f9      	ldrb	r1, [r7, #3]
 800a81c:	f7f8 fd40 	bl	80032a0 <HAL_PCD_EP_Open>
 800a820:	4603      	mov	r3, r0
 800a822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a824:	7bfb      	ldrb	r3, [r7, #15]
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f91c 	bl	800aa64 <USBD_Get_USB_Status>
 800a82c:	4603      	mov	r3, r0
 800a82e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a830:	7bbb      	ldrb	r3, [r7, #14]
}
 800a832:	4618      	mov	r0, r3
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a846:	2300      	movs	r3, #0
 800a848:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a84a:	2300      	movs	r3, #0
 800a84c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a854:	78fa      	ldrb	r2, [r7, #3]
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f7f8 fd89 	bl	8003370 <HAL_PCD_EP_Close>
 800a85e:	4603      	mov	r3, r0
 800a860:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a862:	7bfb      	ldrb	r3, [r7, #15]
 800a864:	4618      	mov	r0, r3
 800a866:	f000 f8fd 	bl	800aa64 <USBD_Get_USB_Status>
 800a86a:	4603      	mov	r3, r0
 800a86c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a888:	2300      	movs	r3, #0
 800a88a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a892:	78fa      	ldrb	r2, [r7, #3]
 800a894:	4611      	mov	r1, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f7f8 fe61 	bl	800355e <HAL_PCD_EP_SetStall>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 f8de 	bl	800aa64 <USBD_Get_USB_Status>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8d0:	78fa      	ldrb	r2, [r7, #3]
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7f8 fea6 	bl	8003626 <HAL_PCD_EP_ClrStall>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 f8bf 	bl	800aa64 <USBD_Get_USB_Status>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a906:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	da0b      	bge.n	800a928 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a910:	78fb      	ldrb	r3, [r7, #3]
 800a912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a916:	68f9      	ldr	r1, [r7, #12]
 800a918:	4613      	mov	r3, r2
 800a91a:	00db      	lsls	r3, r3, #3
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	440b      	add	r3, r1
 800a922:	333e      	adds	r3, #62	; 0x3e
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	e00b      	b.n	800a940 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a92e:	68f9      	ldr	r1, [r7, #12]
 800a930:	4613      	mov	r3, r2
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	4413      	add	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	440b      	add	r3, r1
 800a93a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a93e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a958:	2300      	movs	r3, #0
 800a95a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a966:	78fa      	ldrb	r2, [r7, #3]
 800a968:	4611      	mov	r1, r2
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7f8 fc73 	bl	8003256 <HAL_PCD_SetAddress>
 800a970:	4603      	mov	r3, r0
 800a972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	4618      	mov	r0, r3
 800a978:	f000 f874 	bl	800aa64 <USBD_Get_USB_Status>
 800a97c:	4603      	mov	r3, r0
 800a97e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a980:	7bbb      	ldrb	r3, [r7, #14]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b086      	sub	sp, #24
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	607a      	str	r2, [r7, #4]
 800a994:	603b      	str	r3, [r7, #0]
 800a996:	460b      	mov	r3, r1
 800a998:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9a8:	7af9      	ldrb	r1, [r7, #11]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	f7f8 fd8c 	bl	80034ca <HAL_PCD_EP_Transmit>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9b6:	7dfb      	ldrb	r3, [r7, #23]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f000 f853 	bl	800aa64 <USBD_Get_USB_Status>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a9c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b086      	sub	sp, #24
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	607a      	str	r2, [r7, #4]
 800a9d6:	603b      	str	r3, [r7, #0]
 800a9d8:	460b      	mov	r3, r1
 800a9da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9ea:	7af9      	ldrb	r1, [r7, #11]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	f7f8 fd08 	bl	8003404 <HAL_PCD_EP_Receive>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 f832 	bl	800aa64 <USBD_Get_USB_Status>
 800aa00:	4603      	mov	r3, r0
 800aa02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa04:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3718      	adds	r7, #24
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}

0800aa0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa0e:	b580      	push	{r7, lr}
 800aa10:	b082      	sub	sp, #8
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	460b      	mov	r3, r1
 800aa18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa20:	78fa      	ldrb	r2, [r7, #3]
 800aa22:	4611      	mov	r1, r2
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7f8 fd38 	bl	800349a <HAL_PCD_EP_GetRxCount>
 800aa2a:	4603      	mov	r3, r0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aa3c:	4b03      	ldr	r3, [pc, #12]	; (800aa4c <USBD_static_malloc+0x18>)
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	370c      	adds	r7, #12
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	20001e38 	.word	0x20001e38

0800aa50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]

}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aa72:	79fb      	ldrb	r3, [r7, #7]
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d817      	bhi.n	800aaa8 <USBD_Get_USB_Status+0x44>
 800aa78:	a201      	add	r2, pc, #4	; (adr r2, 800aa80 <USBD_Get_USB_Status+0x1c>)
 800aa7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7e:	bf00      	nop
 800aa80:	0800aa91 	.word	0x0800aa91
 800aa84:	0800aa97 	.word	0x0800aa97
 800aa88:	0800aa9d 	.word	0x0800aa9d
 800aa8c:	0800aaa3 	.word	0x0800aaa3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73fb      	strb	r3, [r7, #15]
    break;
 800aa94:	e00b      	b.n	800aaae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa96:	2303      	movs	r3, #3
 800aa98:	73fb      	strb	r3, [r7, #15]
    break;
 800aa9a:	e008      	b.n	800aaae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa0:	e005      	b.n	800aaae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	73fb      	strb	r3, [r7, #15]
    break;
 800aaa6:	e002      	b.n	800aaae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	73fb      	strb	r3, [r7, #15]
    break;
 800aaac:	bf00      	nop
  }
  return usb_status;
 800aaae:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <__errno>:
 800aabc:	4b01      	ldr	r3, [pc, #4]	; (800aac4 <__errno+0x8>)
 800aabe:	6818      	ldr	r0, [r3, #0]
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20000104 	.word	0x20000104

0800aac8 <__libc_init_array>:
 800aac8:	b570      	push	{r4, r5, r6, lr}
 800aaca:	4d0d      	ldr	r5, [pc, #52]	; (800ab00 <__libc_init_array+0x38>)
 800aacc:	4c0d      	ldr	r4, [pc, #52]	; (800ab04 <__libc_init_array+0x3c>)
 800aace:	1b64      	subs	r4, r4, r5
 800aad0:	10a4      	asrs	r4, r4, #2
 800aad2:	2600      	movs	r6, #0
 800aad4:	42a6      	cmp	r6, r4
 800aad6:	d109      	bne.n	800aaec <__libc_init_array+0x24>
 800aad8:	4d0b      	ldr	r5, [pc, #44]	; (800ab08 <__libc_init_array+0x40>)
 800aada:	4c0c      	ldr	r4, [pc, #48]	; (800ab0c <__libc_init_array+0x44>)
 800aadc:	f000 fc66 	bl	800b3ac <_init>
 800aae0:	1b64      	subs	r4, r4, r5
 800aae2:	10a4      	asrs	r4, r4, #2
 800aae4:	2600      	movs	r6, #0
 800aae6:	42a6      	cmp	r6, r4
 800aae8:	d105      	bne.n	800aaf6 <__libc_init_array+0x2e>
 800aaea:	bd70      	pop	{r4, r5, r6, pc}
 800aaec:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaf0:	4798      	blx	r3
 800aaf2:	3601      	adds	r6, #1
 800aaf4:	e7ee      	b.n	800aad4 <__libc_init_array+0xc>
 800aaf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aafa:	4798      	blx	r3
 800aafc:	3601      	adds	r6, #1
 800aafe:	e7f2      	b.n	800aae6 <__libc_init_array+0x1e>
 800ab00:	0800b498 	.word	0x0800b498
 800ab04:	0800b498 	.word	0x0800b498
 800ab08:	0800b498 	.word	0x0800b498
 800ab0c:	0800b49c 	.word	0x0800b49c

0800ab10 <memset>:
 800ab10:	4402      	add	r2, r0
 800ab12:	4603      	mov	r3, r0
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d100      	bne.n	800ab1a <memset+0xa>
 800ab18:	4770      	bx	lr
 800ab1a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab1e:	e7f9      	b.n	800ab14 <memset+0x4>

0800ab20 <setvbuf>:
 800ab20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab24:	461d      	mov	r5, r3
 800ab26:	4b5d      	ldr	r3, [pc, #372]	; (800ac9c <setvbuf+0x17c>)
 800ab28:	681f      	ldr	r7, [r3, #0]
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	460e      	mov	r6, r1
 800ab2e:	4690      	mov	r8, r2
 800ab30:	b127      	cbz	r7, 800ab3c <setvbuf+0x1c>
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	b913      	cbnz	r3, 800ab3c <setvbuf+0x1c>
 800ab36:	4638      	mov	r0, r7
 800ab38:	f000 f9d2 	bl	800aee0 <__sinit>
 800ab3c:	4b58      	ldr	r3, [pc, #352]	; (800aca0 <setvbuf+0x180>)
 800ab3e:	429c      	cmp	r4, r3
 800ab40:	d167      	bne.n	800ac12 <setvbuf+0xf2>
 800ab42:	687c      	ldr	r4, [r7, #4]
 800ab44:	f1b8 0f02 	cmp.w	r8, #2
 800ab48:	d006      	beq.n	800ab58 <setvbuf+0x38>
 800ab4a:	f1b8 0f01 	cmp.w	r8, #1
 800ab4e:	f200 809f 	bhi.w	800ac90 <setvbuf+0x170>
 800ab52:	2d00      	cmp	r5, #0
 800ab54:	f2c0 809c 	blt.w	800ac90 <setvbuf+0x170>
 800ab58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab5a:	07db      	lsls	r3, r3, #31
 800ab5c:	d405      	bmi.n	800ab6a <setvbuf+0x4a>
 800ab5e:	89a3      	ldrh	r3, [r4, #12]
 800ab60:	0598      	lsls	r0, r3, #22
 800ab62:	d402      	bmi.n	800ab6a <setvbuf+0x4a>
 800ab64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab66:	f000 fa59 	bl	800b01c <__retarget_lock_acquire_recursive>
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	4638      	mov	r0, r7
 800ab6e:	f000 f923 	bl	800adb8 <_fflush_r>
 800ab72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab74:	b141      	cbz	r1, 800ab88 <setvbuf+0x68>
 800ab76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab7a:	4299      	cmp	r1, r3
 800ab7c:	d002      	beq.n	800ab84 <setvbuf+0x64>
 800ab7e:	4638      	mov	r0, r7
 800ab80:	f000 fa7c 	bl	800b07c <_free_r>
 800ab84:	2300      	movs	r3, #0
 800ab86:	6363      	str	r3, [r4, #52]	; 0x34
 800ab88:	2300      	movs	r3, #0
 800ab8a:	61a3      	str	r3, [r4, #24]
 800ab8c:	6063      	str	r3, [r4, #4]
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	0619      	lsls	r1, r3, #24
 800ab92:	d503      	bpl.n	800ab9c <setvbuf+0x7c>
 800ab94:	6921      	ldr	r1, [r4, #16]
 800ab96:	4638      	mov	r0, r7
 800ab98:	f000 fa70 	bl	800b07c <_free_r>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	f1b8 0f02 	cmp.w	r8, #2
 800abaa:	81a3      	strh	r3, [r4, #12]
 800abac:	d06c      	beq.n	800ac88 <setvbuf+0x168>
 800abae:	ab01      	add	r3, sp, #4
 800abb0:	466a      	mov	r2, sp
 800abb2:	4621      	mov	r1, r4
 800abb4:	4638      	mov	r0, r7
 800abb6:	f000 fa33 	bl	800b020 <__swhatbuf_r>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	4318      	orrs	r0, r3
 800abbe:	81a0      	strh	r0, [r4, #12]
 800abc0:	2d00      	cmp	r5, #0
 800abc2:	d130      	bne.n	800ac26 <setvbuf+0x106>
 800abc4:	9d00      	ldr	r5, [sp, #0]
 800abc6:	4628      	mov	r0, r5
 800abc8:	f000 fa50 	bl	800b06c <malloc>
 800abcc:	4606      	mov	r6, r0
 800abce:	2800      	cmp	r0, #0
 800abd0:	d155      	bne.n	800ac7e <setvbuf+0x15e>
 800abd2:	f8dd 9000 	ldr.w	r9, [sp]
 800abd6:	45a9      	cmp	r9, r5
 800abd8:	d14a      	bne.n	800ac70 <setvbuf+0x150>
 800abda:	f04f 35ff 	mov.w	r5, #4294967295
 800abde:	2200      	movs	r2, #0
 800abe0:	60a2      	str	r2, [r4, #8]
 800abe2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800abe6:	6022      	str	r2, [r4, #0]
 800abe8:	6122      	str	r2, [r4, #16]
 800abea:	2201      	movs	r2, #1
 800abec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf0:	6162      	str	r2, [r4, #20]
 800abf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abf4:	f043 0302 	orr.w	r3, r3, #2
 800abf8:	07d2      	lsls	r2, r2, #31
 800abfa:	81a3      	strh	r3, [r4, #12]
 800abfc:	d405      	bmi.n	800ac0a <setvbuf+0xea>
 800abfe:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ac02:	d102      	bne.n	800ac0a <setvbuf+0xea>
 800ac04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac06:	f000 fa0a 	bl	800b01e <__retarget_lock_release_recursive>
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	b003      	add	sp, #12
 800ac0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac12:	4b24      	ldr	r3, [pc, #144]	; (800aca4 <setvbuf+0x184>)
 800ac14:	429c      	cmp	r4, r3
 800ac16:	d101      	bne.n	800ac1c <setvbuf+0xfc>
 800ac18:	68bc      	ldr	r4, [r7, #8]
 800ac1a:	e793      	b.n	800ab44 <setvbuf+0x24>
 800ac1c:	4b22      	ldr	r3, [pc, #136]	; (800aca8 <setvbuf+0x188>)
 800ac1e:	429c      	cmp	r4, r3
 800ac20:	bf08      	it	eq
 800ac22:	68fc      	ldreq	r4, [r7, #12]
 800ac24:	e78e      	b.n	800ab44 <setvbuf+0x24>
 800ac26:	2e00      	cmp	r6, #0
 800ac28:	d0cd      	beq.n	800abc6 <setvbuf+0xa6>
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	b913      	cbnz	r3, 800ac34 <setvbuf+0x114>
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f000 f956 	bl	800aee0 <__sinit>
 800ac34:	f1b8 0f01 	cmp.w	r8, #1
 800ac38:	bf08      	it	eq
 800ac3a:	89a3      	ldrheq	r3, [r4, #12]
 800ac3c:	6026      	str	r6, [r4, #0]
 800ac3e:	bf04      	itt	eq
 800ac40:	f043 0301 	orreq.w	r3, r3, #1
 800ac44:	81a3      	strheq	r3, [r4, #12]
 800ac46:	89a2      	ldrh	r2, [r4, #12]
 800ac48:	f012 0308 	ands.w	r3, r2, #8
 800ac4c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ac50:	d01c      	beq.n	800ac8c <setvbuf+0x16c>
 800ac52:	07d3      	lsls	r3, r2, #31
 800ac54:	bf41      	itttt	mi
 800ac56:	2300      	movmi	r3, #0
 800ac58:	426d      	negmi	r5, r5
 800ac5a:	60a3      	strmi	r3, [r4, #8]
 800ac5c:	61a5      	strmi	r5, [r4, #24]
 800ac5e:	bf58      	it	pl
 800ac60:	60a5      	strpl	r5, [r4, #8]
 800ac62:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ac64:	f015 0501 	ands.w	r5, r5, #1
 800ac68:	d115      	bne.n	800ac96 <setvbuf+0x176>
 800ac6a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ac6e:	e7c8      	b.n	800ac02 <setvbuf+0xe2>
 800ac70:	4648      	mov	r0, r9
 800ac72:	f000 f9fb 	bl	800b06c <malloc>
 800ac76:	4606      	mov	r6, r0
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d0ae      	beq.n	800abda <setvbuf+0xba>
 800ac7c:	464d      	mov	r5, r9
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	e7d0      	b.n	800ac2a <setvbuf+0x10a>
 800ac88:	2500      	movs	r5, #0
 800ac8a:	e7a8      	b.n	800abde <setvbuf+0xbe>
 800ac8c:	60a3      	str	r3, [r4, #8]
 800ac8e:	e7e8      	b.n	800ac62 <setvbuf+0x142>
 800ac90:	f04f 35ff 	mov.w	r5, #4294967295
 800ac94:	e7b9      	b.n	800ac0a <setvbuf+0xea>
 800ac96:	2500      	movs	r5, #0
 800ac98:	e7b7      	b.n	800ac0a <setvbuf+0xea>
 800ac9a:	bf00      	nop
 800ac9c:	20000104 	.word	0x20000104
 800aca0:	0800b450 	.word	0x0800b450
 800aca4:	0800b470 	.word	0x0800b470
 800aca8:	0800b430 	.word	0x0800b430

0800acac <__sflush_r>:
 800acac:	898a      	ldrh	r2, [r1, #12]
 800acae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb2:	4605      	mov	r5, r0
 800acb4:	0710      	lsls	r0, r2, #28
 800acb6:	460c      	mov	r4, r1
 800acb8:	d458      	bmi.n	800ad6c <__sflush_r+0xc0>
 800acba:	684b      	ldr	r3, [r1, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dc05      	bgt.n	800accc <__sflush_r+0x20>
 800acc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	dc02      	bgt.n	800accc <__sflush_r+0x20>
 800acc6:	2000      	movs	r0, #0
 800acc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800accc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acce:	2e00      	cmp	r6, #0
 800acd0:	d0f9      	beq.n	800acc6 <__sflush_r+0x1a>
 800acd2:	2300      	movs	r3, #0
 800acd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acd8:	682f      	ldr	r7, [r5, #0]
 800acda:	602b      	str	r3, [r5, #0]
 800acdc:	d032      	beq.n	800ad44 <__sflush_r+0x98>
 800acde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	075a      	lsls	r2, r3, #29
 800ace4:	d505      	bpl.n	800acf2 <__sflush_r+0x46>
 800ace6:	6863      	ldr	r3, [r4, #4]
 800ace8:	1ac0      	subs	r0, r0, r3
 800acea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acec:	b10b      	cbz	r3, 800acf2 <__sflush_r+0x46>
 800acee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acf0:	1ac0      	subs	r0, r0, r3
 800acf2:	2300      	movs	r3, #0
 800acf4:	4602      	mov	r2, r0
 800acf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acf8:	6a21      	ldr	r1, [r4, #32]
 800acfa:	4628      	mov	r0, r5
 800acfc:	47b0      	blx	r6
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	d106      	bne.n	800ad12 <__sflush_r+0x66>
 800ad04:	6829      	ldr	r1, [r5, #0]
 800ad06:	291d      	cmp	r1, #29
 800ad08:	d82c      	bhi.n	800ad64 <__sflush_r+0xb8>
 800ad0a:	4a2a      	ldr	r2, [pc, #168]	; (800adb4 <__sflush_r+0x108>)
 800ad0c:	40ca      	lsrs	r2, r1
 800ad0e:	07d6      	lsls	r6, r2, #31
 800ad10:	d528      	bpl.n	800ad64 <__sflush_r+0xb8>
 800ad12:	2200      	movs	r2, #0
 800ad14:	6062      	str	r2, [r4, #4]
 800ad16:	04d9      	lsls	r1, r3, #19
 800ad18:	6922      	ldr	r2, [r4, #16]
 800ad1a:	6022      	str	r2, [r4, #0]
 800ad1c:	d504      	bpl.n	800ad28 <__sflush_r+0x7c>
 800ad1e:	1c42      	adds	r2, r0, #1
 800ad20:	d101      	bne.n	800ad26 <__sflush_r+0x7a>
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	b903      	cbnz	r3, 800ad28 <__sflush_r+0x7c>
 800ad26:	6560      	str	r0, [r4, #84]	; 0x54
 800ad28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad2a:	602f      	str	r7, [r5, #0]
 800ad2c:	2900      	cmp	r1, #0
 800ad2e:	d0ca      	beq.n	800acc6 <__sflush_r+0x1a>
 800ad30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad34:	4299      	cmp	r1, r3
 800ad36:	d002      	beq.n	800ad3e <__sflush_r+0x92>
 800ad38:	4628      	mov	r0, r5
 800ad3a:	f000 f99f 	bl	800b07c <_free_r>
 800ad3e:	2000      	movs	r0, #0
 800ad40:	6360      	str	r0, [r4, #52]	; 0x34
 800ad42:	e7c1      	b.n	800acc8 <__sflush_r+0x1c>
 800ad44:	6a21      	ldr	r1, [r4, #32]
 800ad46:	2301      	movs	r3, #1
 800ad48:	4628      	mov	r0, r5
 800ad4a:	47b0      	blx	r6
 800ad4c:	1c41      	adds	r1, r0, #1
 800ad4e:	d1c7      	bne.n	800ace0 <__sflush_r+0x34>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0c4      	beq.n	800ace0 <__sflush_r+0x34>
 800ad56:	2b1d      	cmp	r3, #29
 800ad58:	d001      	beq.n	800ad5e <__sflush_r+0xb2>
 800ad5a:	2b16      	cmp	r3, #22
 800ad5c:	d101      	bne.n	800ad62 <__sflush_r+0xb6>
 800ad5e:	602f      	str	r7, [r5, #0]
 800ad60:	e7b1      	b.n	800acc6 <__sflush_r+0x1a>
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	e7ad      	b.n	800acc8 <__sflush_r+0x1c>
 800ad6c:	690f      	ldr	r7, [r1, #16]
 800ad6e:	2f00      	cmp	r7, #0
 800ad70:	d0a9      	beq.n	800acc6 <__sflush_r+0x1a>
 800ad72:	0793      	lsls	r3, r2, #30
 800ad74:	680e      	ldr	r6, [r1, #0]
 800ad76:	bf08      	it	eq
 800ad78:	694b      	ldreq	r3, [r1, #20]
 800ad7a:	600f      	str	r7, [r1, #0]
 800ad7c:	bf18      	it	ne
 800ad7e:	2300      	movne	r3, #0
 800ad80:	eba6 0807 	sub.w	r8, r6, r7
 800ad84:	608b      	str	r3, [r1, #8]
 800ad86:	f1b8 0f00 	cmp.w	r8, #0
 800ad8a:	dd9c      	ble.n	800acc6 <__sflush_r+0x1a>
 800ad8c:	6a21      	ldr	r1, [r4, #32]
 800ad8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad90:	4643      	mov	r3, r8
 800ad92:	463a      	mov	r2, r7
 800ad94:	4628      	mov	r0, r5
 800ad96:	47b0      	blx	r6
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	dc06      	bgt.n	800adaa <__sflush_r+0xfe>
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	f04f 30ff 	mov.w	r0, #4294967295
 800ada8:	e78e      	b.n	800acc8 <__sflush_r+0x1c>
 800adaa:	4407      	add	r7, r0
 800adac:	eba8 0800 	sub.w	r8, r8, r0
 800adb0:	e7e9      	b.n	800ad86 <__sflush_r+0xda>
 800adb2:	bf00      	nop
 800adb4:	20400001 	.word	0x20400001

0800adb8 <_fflush_r>:
 800adb8:	b538      	push	{r3, r4, r5, lr}
 800adba:	690b      	ldr	r3, [r1, #16]
 800adbc:	4605      	mov	r5, r0
 800adbe:	460c      	mov	r4, r1
 800adc0:	b913      	cbnz	r3, 800adc8 <_fflush_r+0x10>
 800adc2:	2500      	movs	r5, #0
 800adc4:	4628      	mov	r0, r5
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	b118      	cbz	r0, 800add2 <_fflush_r+0x1a>
 800adca:	6983      	ldr	r3, [r0, #24]
 800adcc:	b90b      	cbnz	r3, 800add2 <_fflush_r+0x1a>
 800adce:	f000 f887 	bl	800aee0 <__sinit>
 800add2:	4b14      	ldr	r3, [pc, #80]	; (800ae24 <_fflush_r+0x6c>)
 800add4:	429c      	cmp	r4, r3
 800add6:	d11b      	bne.n	800ae10 <_fflush_r+0x58>
 800add8:	686c      	ldr	r4, [r5, #4]
 800adda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d0ef      	beq.n	800adc2 <_fflush_r+0xa>
 800ade2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ade4:	07d0      	lsls	r0, r2, #31
 800ade6:	d404      	bmi.n	800adf2 <_fflush_r+0x3a>
 800ade8:	0599      	lsls	r1, r3, #22
 800adea:	d402      	bmi.n	800adf2 <_fflush_r+0x3a>
 800adec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adee:	f000 f915 	bl	800b01c <__retarget_lock_acquire_recursive>
 800adf2:	4628      	mov	r0, r5
 800adf4:	4621      	mov	r1, r4
 800adf6:	f7ff ff59 	bl	800acac <__sflush_r>
 800adfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adfc:	07da      	lsls	r2, r3, #31
 800adfe:	4605      	mov	r5, r0
 800ae00:	d4e0      	bmi.n	800adc4 <_fflush_r+0xc>
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	059b      	lsls	r3, r3, #22
 800ae06:	d4dd      	bmi.n	800adc4 <_fflush_r+0xc>
 800ae08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae0a:	f000 f908 	bl	800b01e <__retarget_lock_release_recursive>
 800ae0e:	e7d9      	b.n	800adc4 <_fflush_r+0xc>
 800ae10:	4b05      	ldr	r3, [pc, #20]	; (800ae28 <_fflush_r+0x70>)
 800ae12:	429c      	cmp	r4, r3
 800ae14:	d101      	bne.n	800ae1a <_fflush_r+0x62>
 800ae16:	68ac      	ldr	r4, [r5, #8]
 800ae18:	e7df      	b.n	800adda <_fflush_r+0x22>
 800ae1a:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <_fflush_r+0x74>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	bf08      	it	eq
 800ae20:	68ec      	ldreq	r4, [r5, #12]
 800ae22:	e7da      	b.n	800adda <_fflush_r+0x22>
 800ae24:	0800b450 	.word	0x0800b450
 800ae28:	0800b470 	.word	0x0800b470
 800ae2c:	0800b430 	.word	0x0800b430

0800ae30 <std>:
 800ae30:	2300      	movs	r3, #0
 800ae32:	b510      	push	{r4, lr}
 800ae34:	4604      	mov	r4, r0
 800ae36:	e9c0 3300 	strd	r3, r3, [r0]
 800ae3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae3e:	6083      	str	r3, [r0, #8]
 800ae40:	8181      	strh	r1, [r0, #12]
 800ae42:	6643      	str	r3, [r0, #100]	; 0x64
 800ae44:	81c2      	strh	r2, [r0, #14]
 800ae46:	6183      	str	r3, [r0, #24]
 800ae48:	4619      	mov	r1, r3
 800ae4a:	2208      	movs	r2, #8
 800ae4c:	305c      	adds	r0, #92	; 0x5c
 800ae4e:	f7ff fe5f 	bl	800ab10 <memset>
 800ae52:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <std+0x38>)
 800ae54:	6263      	str	r3, [r4, #36]	; 0x24
 800ae56:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <std+0x3c>)
 800ae58:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae5a:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <std+0x40>)
 800ae5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae5e:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <std+0x44>)
 800ae60:	6224      	str	r4, [r4, #32]
 800ae62:	6323      	str	r3, [r4, #48]	; 0x30
 800ae64:	bd10      	pop	{r4, pc}
 800ae66:	bf00      	nop
 800ae68:	0800b25d 	.word	0x0800b25d
 800ae6c:	0800b27f 	.word	0x0800b27f
 800ae70:	0800b2b7 	.word	0x0800b2b7
 800ae74:	0800b2db 	.word	0x0800b2db

0800ae78 <_cleanup_r>:
 800ae78:	4901      	ldr	r1, [pc, #4]	; (800ae80 <_cleanup_r+0x8>)
 800ae7a:	f000 b8af 	b.w	800afdc <_fwalk_reent>
 800ae7e:	bf00      	nop
 800ae80:	0800adb9 	.word	0x0800adb9

0800ae84 <__sfmoreglue>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	2268      	movs	r2, #104	; 0x68
 800ae88:	1e4d      	subs	r5, r1, #1
 800ae8a:	4355      	muls	r5, r2
 800ae8c:	460e      	mov	r6, r1
 800ae8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae92:	f000 f95f 	bl	800b154 <_malloc_r>
 800ae96:	4604      	mov	r4, r0
 800ae98:	b140      	cbz	r0, 800aeac <__sfmoreglue+0x28>
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	e9c0 1600 	strd	r1, r6, [r0]
 800aea0:	300c      	adds	r0, #12
 800aea2:	60a0      	str	r0, [r4, #8]
 800aea4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aea8:	f7ff fe32 	bl	800ab10 <memset>
 800aeac:	4620      	mov	r0, r4
 800aeae:	bd70      	pop	{r4, r5, r6, pc}

0800aeb0 <__sfp_lock_acquire>:
 800aeb0:	4801      	ldr	r0, [pc, #4]	; (800aeb8 <__sfp_lock_acquire+0x8>)
 800aeb2:	f000 b8b3 	b.w	800b01c <__retarget_lock_acquire_recursive>
 800aeb6:	bf00      	nop
 800aeb8:	20002059 	.word	0x20002059

0800aebc <__sfp_lock_release>:
 800aebc:	4801      	ldr	r0, [pc, #4]	; (800aec4 <__sfp_lock_release+0x8>)
 800aebe:	f000 b8ae 	b.w	800b01e <__retarget_lock_release_recursive>
 800aec2:	bf00      	nop
 800aec4:	20002059 	.word	0x20002059

0800aec8 <__sinit_lock_acquire>:
 800aec8:	4801      	ldr	r0, [pc, #4]	; (800aed0 <__sinit_lock_acquire+0x8>)
 800aeca:	f000 b8a7 	b.w	800b01c <__retarget_lock_acquire_recursive>
 800aece:	bf00      	nop
 800aed0:	2000205a 	.word	0x2000205a

0800aed4 <__sinit_lock_release>:
 800aed4:	4801      	ldr	r0, [pc, #4]	; (800aedc <__sinit_lock_release+0x8>)
 800aed6:	f000 b8a2 	b.w	800b01e <__retarget_lock_release_recursive>
 800aeda:	bf00      	nop
 800aedc:	2000205a 	.word	0x2000205a

0800aee0 <__sinit>:
 800aee0:	b510      	push	{r4, lr}
 800aee2:	4604      	mov	r4, r0
 800aee4:	f7ff fff0 	bl	800aec8 <__sinit_lock_acquire>
 800aee8:	69a3      	ldr	r3, [r4, #24]
 800aeea:	b11b      	cbz	r3, 800aef4 <__sinit+0x14>
 800aeec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef0:	f7ff bff0 	b.w	800aed4 <__sinit_lock_release>
 800aef4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aef8:	6523      	str	r3, [r4, #80]	; 0x50
 800aefa:	4b13      	ldr	r3, [pc, #76]	; (800af48 <__sinit+0x68>)
 800aefc:	4a13      	ldr	r2, [pc, #76]	; (800af4c <__sinit+0x6c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	62a2      	str	r2, [r4, #40]	; 0x28
 800af02:	42a3      	cmp	r3, r4
 800af04:	bf04      	itt	eq
 800af06:	2301      	moveq	r3, #1
 800af08:	61a3      	streq	r3, [r4, #24]
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 f820 	bl	800af50 <__sfp>
 800af10:	6060      	str	r0, [r4, #4]
 800af12:	4620      	mov	r0, r4
 800af14:	f000 f81c 	bl	800af50 <__sfp>
 800af18:	60a0      	str	r0, [r4, #8]
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 f818 	bl	800af50 <__sfp>
 800af20:	2200      	movs	r2, #0
 800af22:	60e0      	str	r0, [r4, #12]
 800af24:	2104      	movs	r1, #4
 800af26:	6860      	ldr	r0, [r4, #4]
 800af28:	f7ff ff82 	bl	800ae30 <std>
 800af2c:	68a0      	ldr	r0, [r4, #8]
 800af2e:	2201      	movs	r2, #1
 800af30:	2109      	movs	r1, #9
 800af32:	f7ff ff7d 	bl	800ae30 <std>
 800af36:	68e0      	ldr	r0, [r4, #12]
 800af38:	2202      	movs	r2, #2
 800af3a:	2112      	movs	r1, #18
 800af3c:	f7ff ff78 	bl	800ae30 <std>
 800af40:	2301      	movs	r3, #1
 800af42:	61a3      	str	r3, [r4, #24]
 800af44:	e7d2      	b.n	800aeec <__sinit+0xc>
 800af46:	bf00      	nop
 800af48:	0800b42c 	.word	0x0800b42c
 800af4c:	0800ae79 	.word	0x0800ae79

0800af50 <__sfp>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	4607      	mov	r7, r0
 800af54:	f7ff ffac 	bl	800aeb0 <__sfp_lock_acquire>
 800af58:	4b1e      	ldr	r3, [pc, #120]	; (800afd4 <__sfp+0x84>)
 800af5a:	681e      	ldr	r6, [r3, #0]
 800af5c:	69b3      	ldr	r3, [r6, #24]
 800af5e:	b913      	cbnz	r3, 800af66 <__sfp+0x16>
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff ffbd 	bl	800aee0 <__sinit>
 800af66:	3648      	adds	r6, #72	; 0x48
 800af68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	d503      	bpl.n	800af78 <__sfp+0x28>
 800af70:	6833      	ldr	r3, [r6, #0]
 800af72:	b30b      	cbz	r3, 800afb8 <__sfp+0x68>
 800af74:	6836      	ldr	r6, [r6, #0]
 800af76:	e7f7      	b.n	800af68 <__sfp+0x18>
 800af78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af7c:	b9d5      	cbnz	r5, 800afb4 <__sfp+0x64>
 800af7e:	4b16      	ldr	r3, [pc, #88]	; (800afd8 <__sfp+0x88>)
 800af80:	60e3      	str	r3, [r4, #12]
 800af82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af86:	6665      	str	r5, [r4, #100]	; 0x64
 800af88:	f000 f847 	bl	800b01a <__retarget_lock_init_recursive>
 800af8c:	f7ff ff96 	bl	800aebc <__sfp_lock_release>
 800af90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af98:	6025      	str	r5, [r4, #0]
 800af9a:	61a5      	str	r5, [r4, #24]
 800af9c:	2208      	movs	r2, #8
 800af9e:	4629      	mov	r1, r5
 800afa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afa4:	f7ff fdb4 	bl	800ab10 <memset>
 800afa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afb0:	4620      	mov	r0, r4
 800afb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb4:	3468      	adds	r4, #104	; 0x68
 800afb6:	e7d9      	b.n	800af6c <__sfp+0x1c>
 800afb8:	2104      	movs	r1, #4
 800afba:	4638      	mov	r0, r7
 800afbc:	f7ff ff62 	bl	800ae84 <__sfmoreglue>
 800afc0:	4604      	mov	r4, r0
 800afc2:	6030      	str	r0, [r6, #0]
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d1d5      	bne.n	800af74 <__sfp+0x24>
 800afc8:	f7ff ff78 	bl	800aebc <__sfp_lock_release>
 800afcc:	230c      	movs	r3, #12
 800afce:	603b      	str	r3, [r7, #0]
 800afd0:	e7ee      	b.n	800afb0 <__sfp+0x60>
 800afd2:	bf00      	nop
 800afd4:	0800b42c 	.word	0x0800b42c
 800afd8:	ffff0001 	.word	0xffff0001

0800afdc <_fwalk_reent>:
 800afdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe0:	4606      	mov	r6, r0
 800afe2:	4688      	mov	r8, r1
 800afe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afe8:	2700      	movs	r7, #0
 800afea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afee:	f1b9 0901 	subs.w	r9, r9, #1
 800aff2:	d505      	bpl.n	800b000 <_fwalk_reent+0x24>
 800aff4:	6824      	ldr	r4, [r4, #0]
 800aff6:	2c00      	cmp	r4, #0
 800aff8:	d1f7      	bne.n	800afea <_fwalk_reent+0xe>
 800affa:	4638      	mov	r0, r7
 800affc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b000:	89ab      	ldrh	r3, [r5, #12]
 800b002:	2b01      	cmp	r3, #1
 800b004:	d907      	bls.n	800b016 <_fwalk_reent+0x3a>
 800b006:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b00a:	3301      	adds	r3, #1
 800b00c:	d003      	beq.n	800b016 <_fwalk_reent+0x3a>
 800b00e:	4629      	mov	r1, r5
 800b010:	4630      	mov	r0, r6
 800b012:	47c0      	blx	r8
 800b014:	4307      	orrs	r7, r0
 800b016:	3568      	adds	r5, #104	; 0x68
 800b018:	e7e9      	b.n	800afee <_fwalk_reent+0x12>

0800b01a <__retarget_lock_init_recursive>:
 800b01a:	4770      	bx	lr

0800b01c <__retarget_lock_acquire_recursive>:
 800b01c:	4770      	bx	lr

0800b01e <__retarget_lock_release_recursive>:
 800b01e:	4770      	bx	lr

0800b020 <__swhatbuf_r>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	460e      	mov	r6, r1
 800b024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b028:	2900      	cmp	r1, #0
 800b02a:	b096      	sub	sp, #88	; 0x58
 800b02c:	4614      	mov	r4, r2
 800b02e:	461d      	mov	r5, r3
 800b030:	da08      	bge.n	800b044 <__swhatbuf_r+0x24>
 800b032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b036:	2200      	movs	r2, #0
 800b038:	602a      	str	r2, [r5, #0]
 800b03a:	061a      	lsls	r2, r3, #24
 800b03c:	d410      	bmi.n	800b060 <__swhatbuf_r+0x40>
 800b03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b042:	e00e      	b.n	800b062 <__swhatbuf_r+0x42>
 800b044:	466a      	mov	r2, sp
 800b046:	f000 f96f 	bl	800b328 <_fstat_r>
 800b04a:	2800      	cmp	r0, #0
 800b04c:	dbf1      	blt.n	800b032 <__swhatbuf_r+0x12>
 800b04e:	9a01      	ldr	r2, [sp, #4]
 800b050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b058:	425a      	negs	r2, r3
 800b05a:	415a      	adcs	r2, r3
 800b05c:	602a      	str	r2, [r5, #0]
 800b05e:	e7ee      	b.n	800b03e <__swhatbuf_r+0x1e>
 800b060:	2340      	movs	r3, #64	; 0x40
 800b062:	2000      	movs	r0, #0
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	b016      	add	sp, #88	; 0x58
 800b068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b06c <malloc>:
 800b06c:	4b02      	ldr	r3, [pc, #8]	; (800b078 <malloc+0xc>)
 800b06e:	4601      	mov	r1, r0
 800b070:	6818      	ldr	r0, [r3, #0]
 800b072:	f000 b86f 	b.w	800b154 <_malloc_r>
 800b076:	bf00      	nop
 800b078:	20000104 	.word	0x20000104

0800b07c <_free_r>:
 800b07c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b07e:	2900      	cmp	r1, #0
 800b080:	d044      	beq.n	800b10c <_free_r+0x90>
 800b082:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b086:	9001      	str	r0, [sp, #4]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f1a1 0404 	sub.w	r4, r1, #4
 800b08e:	bfb8      	it	lt
 800b090:	18e4      	addlt	r4, r4, r3
 800b092:	f000 f96d 	bl	800b370 <__malloc_lock>
 800b096:	4a1e      	ldr	r2, [pc, #120]	; (800b110 <_free_r+0x94>)
 800b098:	9801      	ldr	r0, [sp, #4]
 800b09a:	6813      	ldr	r3, [r2, #0]
 800b09c:	b933      	cbnz	r3, 800b0ac <_free_r+0x30>
 800b09e:	6063      	str	r3, [r4, #4]
 800b0a0:	6014      	str	r4, [r2, #0]
 800b0a2:	b003      	add	sp, #12
 800b0a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0a8:	f000 b968 	b.w	800b37c <__malloc_unlock>
 800b0ac:	42a3      	cmp	r3, r4
 800b0ae:	d908      	bls.n	800b0c2 <_free_r+0x46>
 800b0b0:	6825      	ldr	r5, [r4, #0]
 800b0b2:	1961      	adds	r1, r4, r5
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	bf01      	itttt	eq
 800b0b8:	6819      	ldreq	r1, [r3, #0]
 800b0ba:	685b      	ldreq	r3, [r3, #4]
 800b0bc:	1949      	addeq	r1, r1, r5
 800b0be:	6021      	streq	r1, [r4, #0]
 800b0c0:	e7ed      	b.n	800b09e <_free_r+0x22>
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	b10b      	cbz	r3, 800b0cc <_free_r+0x50>
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d9fa      	bls.n	800b0c2 <_free_r+0x46>
 800b0cc:	6811      	ldr	r1, [r2, #0]
 800b0ce:	1855      	adds	r5, r2, r1
 800b0d0:	42a5      	cmp	r5, r4
 800b0d2:	d10b      	bne.n	800b0ec <_free_r+0x70>
 800b0d4:	6824      	ldr	r4, [r4, #0]
 800b0d6:	4421      	add	r1, r4
 800b0d8:	1854      	adds	r4, r2, r1
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	6011      	str	r1, [r2, #0]
 800b0de:	d1e0      	bne.n	800b0a2 <_free_r+0x26>
 800b0e0:	681c      	ldr	r4, [r3, #0]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	6053      	str	r3, [r2, #4]
 800b0e6:	4421      	add	r1, r4
 800b0e8:	6011      	str	r1, [r2, #0]
 800b0ea:	e7da      	b.n	800b0a2 <_free_r+0x26>
 800b0ec:	d902      	bls.n	800b0f4 <_free_r+0x78>
 800b0ee:	230c      	movs	r3, #12
 800b0f0:	6003      	str	r3, [r0, #0]
 800b0f2:	e7d6      	b.n	800b0a2 <_free_r+0x26>
 800b0f4:	6825      	ldr	r5, [r4, #0]
 800b0f6:	1961      	adds	r1, r4, r5
 800b0f8:	428b      	cmp	r3, r1
 800b0fa:	bf04      	itt	eq
 800b0fc:	6819      	ldreq	r1, [r3, #0]
 800b0fe:	685b      	ldreq	r3, [r3, #4]
 800b100:	6063      	str	r3, [r4, #4]
 800b102:	bf04      	itt	eq
 800b104:	1949      	addeq	r1, r1, r5
 800b106:	6021      	streq	r1, [r4, #0]
 800b108:	6054      	str	r4, [r2, #4]
 800b10a:	e7ca      	b.n	800b0a2 <_free_r+0x26>
 800b10c:	b003      	add	sp, #12
 800b10e:	bd30      	pop	{r4, r5, pc}
 800b110:	2000205c 	.word	0x2000205c

0800b114 <sbrk_aligned>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	4e0e      	ldr	r6, [pc, #56]	; (800b150 <sbrk_aligned+0x3c>)
 800b118:	460c      	mov	r4, r1
 800b11a:	6831      	ldr	r1, [r6, #0]
 800b11c:	4605      	mov	r5, r0
 800b11e:	b911      	cbnz	r1, 800b126 <sbrk_aligned+0x12>
 800b120:	f000 f88c 	bl	800b23c <_sbrk_r>
 800b124:	6030      	str	r0, [r6, #0]
 800b126:	4621      	mov	r1, r4
 800b128:	4628      	mov	r0, r5
 800b12a:	f000 f887 	bl	800b23c <_sbrk_r>
 800b12e:	1c43      	adds	r3, r0, #1
 800b130:	d00a      	beq.n	800b148 <sbrk_aligned+0x34>
 800b132:	1cc4      	adds	r4, r0, #3
 800b134:	f024 0403 	bic.w	r4, r4, #3
 800b138:	42a0      	cmp	r0, r4
 800b13a:	d007      	beq.n	800b14c <sbrk_aligned+0x38>
 800b13c:	1a21      	subs	r1, r4, r0
 800b13e:	4628      	mov	r0, r5
 800b140:	f000 f87c 	bl	800b23c <_sbrk_r>
 800b144:	3001      	adds	r0, #1
 800b146:	d101      	bne.n	800b14c <sbrk_aligned+0x38>
 800b148:	f04f 34ff 	mov.w	r4, #4294967295
 800b14c:	4620      	mov	r0, r4
 800b14e:	bd70      	pop	{r4, r5, r6, pc}
 800b150:	20002060 	.word	0x20002060

0800b154 <_malloc_r>:
 800b154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b158:	1ccd      	adds	r5, r1, #3
 800b15a:	f025 0503 	bic.w	r5, r5, #3
 800b15e:	3508      	adds	r5, #8
 800b160:	2d0c      	cmp	r5, #12
 800b162:	bf38      	it	cc
 800b164:	250c      	movcc	r5, #12
 800b166:	2d00      	cmp	r5, #0
 800b168:	4607      	mov	r7, r0
 800b16a:	db01      	blt.n	800b170 <_malloc_r+0x1c>
 800b16c:	42a9      	cmp	r1, r5
 800b16e:	d905      	bls.n	800b17c <_malloc_r+0x28>
 800b170:	230c      	movs	r3, #12
 800b172:	603b      	str	r3, [r7, #0]
 800b174:	2600      	movs	r6, #0
 800b176:	4630      	mov	r0, r6
 800b178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b17c:	4e2e      	ldr	r6, [pc, #184]	; (800b238 <_malloc_r+0xe4>)
 800b17e:	f000 f8f7 	bl	800b370 <__malloc_lock>
 800b182:	6833      	ldr	r3, [r6, #0]
 800b184:	461c      	mov	r4, r3
 800b186:	bb34      	cbnz	r4, 800b1d6 <_malloc_r+0x82>
 800b188:	4629      	mov	r1, r5
 800b18a:	4638      	mov	r0, r7
 800b18c:	f7ff ffc2 	bl	800b114 <sbrk_aligned>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	4604      	mov	r4, r0
 800b194:	d14d      	bne.n	800b232 <_malloc_r+0xde>
 800b196:	6834      	ldr	r4, [r6, #0]
 800b198:	4626      	mov	r6, r4
 800b19a:	2e00      	cmp	r6, #0
 800b19c:	d140      	bne.n	800b220 <_malloc_r+0xcc>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	4631      	mov	r1, r6
 800b1a2:	4638      	mov	r0, r7
 800b1a4:	eb04 0803 	add.w	r8, r4, r3
 800b1a8:	f000 f848 	bl	800b23c <_sbrk_r>
 800b1ac:	4580      	cmp	r8, r0
 800b1ae:	d13a      	bne.n	800b226 <_malloc_r+0xd2>
 800b1b0:	6821      	ldr	r1, [r4, #0]
 800b1b2:	3503      	adds	r5, #3
 800b1b4:	1a6d      	subs	r5, r5, r1
 800b1b6:	f025 0503 	bic.w	r5, r5, #3
 800b1ba:	3508      	adds	r5, #8
 800b1bc:	2d0c      	cmp	r5, #12
 800b1be:	bf38      	it	cc
 800b1c0:	250c      	movcc	r5, #12
 800b1c2:	4629      	mov	r1, r5
 800b1c4:	4638      	mov	r0, r7
 800b1c6:	f7ff ffa5 	bl	800b114 <sbrk_aligned>
 800b1ca:	3001      	adds	r0, #1
 800b1cc:	d02b      	beq.n	800b226 <_malloc_r+0xd2>
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	442b      	add	r3, r5
 800b1d2:	6023      	str	r3, [r4, #0]
 800b1d4:	e00e      	b.n	800b1f4 <_malloc_r+0xa0>
 800b1d6:	6822      	ldr	r2, [r4, #0]
 800b1d8:	1b52      	subs	r2, r2, r5
 800b1da:	d41e      	bmi.n	800b21a <_malloc_r+0xc6>
 800b1dc:	2a0b      	cmp	r2, #11
 800b1de:	d916      	bls.n	800b20e <_malloc_r+0xba>
 800b1e0:	1961      	adds	r1, r4, r5
 800b1e2:	42a3      	cmp	r3, r4
 800b1e4:	6025      	str	r5, [r4, #0]
 800b1e6:	bf18      	it	ne
 800b1e8:	6059      	strne	r1, [r3, #4]
 800b1ea:	6863      	ldr	r3, [r4, #4]
 800b1ec:	bf08      	it	eq
 800b1ee:	6031      	streq	r1, [r6, #0]
 800b1f0:	5162      	str	r2, [r4, r5]
 800b1f2:	604b      	str	r3, [r1, #4]
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f104 060b 	add.w	r6, r4, #11
 800b1fa:	f000 f8bf 	bl	800b37c <__malloc_unlock>
 800b1fe:	f026 0607 	bic.w	r6, r6, #7
 800b202:	1d23      	adds	r3, r4, #4
 800b204:	1af2      	subs	r2, r6, r3
 800b206:	d0b6      	beq.n	800b176 <_malloc_r+0x22>
 800b208:	1b9b      	subs	r3, r3, r6
 800b20a:	50a3      	str	r3, [r4, r2]
 800b20c:	e7b3      	b.n	800b176 <_malloc_r+0x22>
 800b20e:	6862      	ldr	r2, [r4, #4]
 800b210:	42a3      	cmp	r3, r4
 800b212:	bf0c      	ite	eq
 800b214:	6032      	streq	r2, [r6, #0]
 800b216:	605a      	strne	r2, [r3, #4]
 800b218:	e7ec      	b.n	800b1f4 <_malloc_r+0xa0>
 800b21a:	4623      	mov	r3, r4
 800b21c:	6864      	ldr	r4, [r4, #4]
 800b21e:	e7b2      	b.n	800b186 <_malloc_r+0x32>
 800b220:	4634      	mov	r4, r6
 800b222:	6876      	ldr	r6, [r6, #4]
 800b224:	e7b9      	b.n	800b19a <_malloc_r+0x46>
 800b226:	230c      	movs	r3, #12
 800b228:	603b      	str	r3, [r7, #0]
 800b22a:	4638      	mov	r0, r7
 800b22c:	f000 f8a6 	bl	800b37c <__malloc_unlock>
 800b230:	e7a1      	b.n	800b176 <_malloc_r+0x22>
 800b232:	6025      	str	r5, [r4, #0]
 800b234:	e7de      	b.n	800b1f4 <_malloc_r+0xa0>
 800b236:	bf00      	nop
 800b238:	2000205c 	.word	0x2000205c

0800b23c <_sbrk_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4d06      	ldr	r5, [pc, #24]	; (800b258 <_sbrk_r+0x1c>)
 800b240:	2300      	movs	r3, #0
 800b242:	4604      	mov	r4, r0
 800b244:	4608      	mov	r0, r1
 800b246:	602b      	str	r3, [r5, #0]
 800b248:	f7f6 fab2 	bl	80017b0 <_sbrk>
 800b24c:	1c43      	adds	r3, r0, #1
 800b24e:	d102      	bne.n	800b256 <_sbrk_r+0x1a>
 800b250:	682b      	ldr	r3, [r5, #0]
 800b252:	b103      	cbz	r3, 800b256 <_sbrk_r+0x1a>
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	bd38      	pop	{r3, r4, r5, pc}
 800b258:	20002064 	.word	0x20002064

0800b25c <__sread>:
 800b25c:	b510      	push	{r4, lr}
 800b25e:	460c      	mov	r4, r1
 800b260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b264:	f000 f890 	bl	800b388 <_read_r>
 800b268:	2800      	cmp	r0, #0
 800b26a:	bfab      	itete	ge
 800b26c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b26e:	89a3      	ldrhlt	r3, [r4, #12]
 800b270:	181b      	addge	r3, r3, r0
 800b272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b276:	bfac      	ite	ge
 800b278:	6563      	strge	r3, [r4, #84]	; 0x54
 800b27a:	81a3      	strhlt	r3, [r4, #12]
 800b27c:	bd10      	pop	{r4, pc}

0800b27e <__swrite>:
 800b27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b282:	461f      	mov	r7, r3
 800b284:	898b      	ldrh	r3, [r1, #12]
 800b286:	05db      	lsls	r3, r3, #23
 800b288:	4605      	mov	r5, r0
 800b28a:	460c      	mov	r4, r1
 800b28c:	4616      	mov	r6, r2
 800b28e:	d505      	bpl.n	800b29c <__swrite+0x1e>
 800b290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b294:	2302      	movs	r3, #2
 800b296:	2200      	movs	r2, #0
 800b298:	f000 f858 	bl	800b34c <_lseek_r>
 800b29c:	89a3      	ldrh	r3, [r4, #12]
 800b29e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2a6:	81a3      	strh	r3, [r4, #12]
 800b2a8:	4632      	mov	r2, r6
 800b2aa:	463b      	mov	r3, r7
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b2:	f000 b817 	b.w	800b2e4 <_write_r>

0800b2b6 <__sseek>:
 800b2b6:	b510      	push	{r4, lr}
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2be:	f000 f845 	bl	800b34c <_lseek_r>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	89a3      	ldrh	r3, [r4, #12]
 800b2c6:	bf15      	itete	ne
 800b2c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2d2:	81a3      	strheq	r3, [r4, #12]
 800b2d4:	bf18      	it	ne
 800b2d6:	81a3      	strhne	r3, [r4, #12]
 800b2d8:	bd10      	pop	{r4, pc}

0800b2da <__sclose>:
 800b2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2de:	f000 b813 	b.w	800b308 <_close_r>
	...

0800b2e4 <_write_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4d07      	ldr	r5, [pc, #28]	; (800b304 <_write_r+0x20>)
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	4608      	mov	r0, r1
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	602a      	str	r2, [r5, #0]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	f7f6 f800 	bl	80012f8 <_write>
 800b2f8:	1c43      	adds	r3, r0, #1
 800b2fa:	d102      	bne.n	800b302 <_write_r+0x1e>
 800b2fc:	682b      	ldr	r3, [r5, #0]
 800b2fe:	b103      	cbz	r3, 800b302 <_write_r+0x1e>
 800b300:	6023      	str	r3, [r4, #0]
 800b302:	bd38      	pop	{r3, r4, r5, pc}
 800b304:	20002064 	.word	0x20002064

0800b308 <_close_r>:
 800b308:	b538      	push	{r3, r4, r5, lr}
 800b30a:	4d06      	ldr	r5, [pc, #24]	; (800b324 <_close_r+0x1c>)
 800b30c:	2300      	movs	r3, #0
 800b30e:	4604      	mov	r4, r0
 800b310:	4608      	mov	r0, r1
 800b312:	602b      	str	r3, [r5, #0]
 800b314:	f7f6 f81c 	bl	8001350 <_close>
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	d102      	bne.n	800b322 <_close_r+0x1a>
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	b103      	cbz	r3, 800b322 <_close_r+0x1a>
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	20002064 	.word	0x20002064

0800b328 <_fstat_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d07      	ldr	r5, [pc, #28]	; (800b348 <_fstat_r+0x20>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	4611      	mov	r1, r2
 800b334:	602b      	str	r3, [r5, #0]
 800b336:	f7f6 f85b 	bl	80013f0 <_fstat>
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	d102      	bne.n	800b344 <_fstat_r+0x1c>
 800b33e:	682b      	ldr	r3, [r5, #0]
 800b340:	b103      	cbz	r3, 800b344 <_fstat_r+0x1c>
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	bd38      	pop	{r3, r4, r5, pc}
 800b346:	bf00      	nop
 800b348:	20002064 	.word	0x20002064

0800b34c <_lseek_r>:
 800b34c:	b538      	push	{r3, r4, r5, lr}
 800b34e:	4d07      	ldr	r5, [pc, #28]	; (800b36c <_lseek_r+0x20>)
 800b350:	4604      	mov	r4, r0
 800b352:	4608      	mov	r0, r1
 800b354:	4611      	mov	r1, r2
 800b356:	2200      	movs	r2, #0
 800b358:	602a      	str	r2, [r5, #0]
 800b35a:	461a      	mov	r2, r3
 800b35c:	f7f6 f80f 	bl	800137e <_lseek>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d102      	bne.n	800b36a <_lseek_r+0x1e>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	b103      	cbz	r3, 800b36a <_lseek_r+0x1e>
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	20002064 	.word	0x20002064

0800b370 <__malloc_lock>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__malloc_lock+0x8>)
 800b372:	f7ff be53 	b.w	800b01c <__retarget_lock_acquire_recursive>
 800b376:	bf00      	nop
 800b378:	20002058 	.word	0x20002058

0800b37c <__malloc_unlock>:
 800b37c:	4801      	ldr	r0, [pc, #4]	; (800b384 <__malloc_unlock+0x8>)
 800b37e:	f7ff be4e 	b.w	800b01e <__retarget_lock_release_recursive>
 800b382:	bf00      	nop
 800b384:	20002058 	.word	0x20002058

0800b388 <_read_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d07      	ldr	r5, [pc, #28]	; (800b3a8 <_read_r+0x20>)
 800b38c:	4604      	mov	r4, r0
 800b38e:	4608      	mov	r0, r1
 800b390:	4611      	mov	r1, r2
 800b392:	2200      	movs	r2, #0
 800b394:	602a      	str	r2, [r5, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	f7f6 f802 	bl	80013a0 <_read>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	d102      	bne.n	800b3a6 <_read_r+0x1e>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	b103      	cbz	r3, 800b3a6 <_read_r+0x1e>
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	20002064 	.word	0x20002064

0800b3ac <_init>:
 800b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ae:	bf00      	nop
 800b3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3b2:	bc08      	pop	{r3}
 800b3b4:	469e      	mov	lr, r3
 800b3b6:	4770      	bx	lr

0800b3b8 <_fini>:
 800b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ba:	bf00      	nop
 800b3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3be:	bc08      	pop	{r3}
 800b3c0:	469e      	mov	lr, r3
 800b3c2:	4770      	bx	lr
