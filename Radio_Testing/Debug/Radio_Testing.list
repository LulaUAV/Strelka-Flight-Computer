
Radio_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b330  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  0800b4b8  0800b4b8  0001b4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5c4  0800b5c4  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5c4  0800b5c4  0001b5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5cc  0800b5cc  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5cc  0800b5cc  0001b5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5d0  0800b5d0  0001b5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800b5d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00001e18  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f80  20001f80  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c452  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ebd  00000000  00000000  0003c5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  000404a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001558  00000000  00000000  00041b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002401f  00000000  00000000  000430f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c4d7  00000000  00000000  0006710f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8751  00000000  00000000  000835e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014bd37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006630  00000000  00000000  0014bd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b4a0 	.word	0x0800b4a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	0800b4a0 	.word	0x0800b4a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004cc:	b4b0      	push	{r4, r5, r7}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004d4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004da:	2307      	movs	r3, #7
 80004dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80004f8:	2308      	movs	r3, #8
 80004fa:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	461d      	mov	r5, r3
 8000500:	f107 040c 	add.w	r4, r7, #12
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000510:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	373c      	adds	r7, #60	; 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr

0800051e <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6898      	ldr	r0, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	899b      	ldrh	r3, [r3, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f002 f87d 	bl	8002630 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f001 f9de 	bl	80018f8 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f002 f872 	bl	8002630 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 f9d3 	bl	80018f8 <HAL_Delay>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f99f 	bl	80008aa <LoRa_read>
 800056c:	4603      	mov	r3, r0
 800056e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d107      	bne.n	800058a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f023 0307 	bic.w	r3, r3, #7
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e03e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e02e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0303 	orr.w	r3, r3, #3
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2203      	movs	r2, #3
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e01e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d10c      	bne.n	80005ea <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0305 	orr.w	r3, r3, #5
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2205      	movs	r2, #5
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	e00e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d10b      	bne.n	8000608 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f4:	f023 0307 	bic.w	r3, r3, #7
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0306 	orr.w	r3, r3, #6
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2206      	movs	r2, #6
 8000606:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	461a      	mov	r2, r3
 800060c:	2101      	movs	r1, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f965 	bl	80008de <LoRa_write>
	//HAL_Delay(10);
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	f001 fffa 	bl	8002630 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6998      	ldr	r0, [r3, #24]
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f003 ff83 	bl	8004552 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800064c:	bf00      	nop
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fb6c 	bl	8004d30 <HAL_SPI_GetState>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1f7      	bne.n	800064e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6998      	ldr	r0, [r3, #24]
 8000662:	8b3a      	ldrh	r2, [r7, #24]
 8000664:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	f004 f8ae 	bl	80047ca <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800066e:	bf00      	nop
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fb5b 	bl	8004d30 <HAL_SPI_GetState>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d1f7      	bne.n	8000670 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	889b      	ldrh	r3, [r3, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f001 ffd0 	bl	8002630 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4613      	mov	r3, r2
 80006a6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f001 ffbc 	bl	8002630 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6998      	ldr	r0, [r3, #24]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	f003 ff45 	bl	8004552 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006c8:	bf00      	nop
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fb2e 	bl	8004d30 <HAL_SPI_GetState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d1f7      	bne.n	80006ca <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6998      	ldr	r0, [r3, #24]
 80006de:	8b3a      	ldrh	r2, [r7, #24]
 80006e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	f003 ff34 	bl	8004552 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ea:	bf00      	nop
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fb1d 	bl	8004d30 <HAL_SPI_GetState>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d1f7      	bne.n	80006ec <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	f001 ff92 	bl	8002630 <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	04db      	lsls	r3, r3, #19
 8000722:	115b      	asrs	r3, r3, #5
 8000724:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	461a      	mov	r2, r3
 8000730:	2106      	movs	r1, #6
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f8d3 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f001 f8dd 	bl	80018f8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	461a      	mov	r2, r3
 8000748:	2107      	movs	r1, #7
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f8c7 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000750:	2005      	movs	r0, #5
 8000752:	f001 f8d1 	bl	80018f8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	461a      	mov	r2, r3
 800075e:	2108      	movs	r1, #8
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8bc 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000766:	2005      	movs	r0, #5
 8000768:	f001 f8c6 	bl	80018f8 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b0c      	cmp	r3, #12
 8000782:	dd01      	ble.n	8000788 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000784:	230c      	movs	r3, #12
 8000786:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b06      	cmp	r3, #6
 800078c:	dc01      	bgt.n	8000792 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800078e:	2307      	movs	r3, #7
 8000790:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000792:	211e      	movs	r1, #30
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f888 	bl	80008aa <LoRa_read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f001 f8aa 	bl	80018f8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	461a      	mov	r2, r3
 80007bc:	211e      	movs	r1, #30
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f88d 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 f897 	bl	80018f8 <HAL_Delay>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	461a      	mov	r2, r3
 80007e2:	2109      	movs	r1, #9
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f87a 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f001 f884 	bl	80018f8 <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b2c      	cmp	r3, #44	; 0x2c
 800080c:	d801      	bhi.n	8000812 <LoRa_setOCP+0x1a>
		current = 45;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	2bf0      	cmp	r3, #240	; 0xf0
 8000816:	d901      	bls.n	800081c <LoRa_setOCP+0x24>
		current = 240;
 8000818:	23f0      	movs	r3, #240	; 0xf0
 800081a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b78      	cmp	r3, #120	; 0x78
 8000820:	d809      	bhi.n	8000836 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	3b2d      	subs	r3, #45	; 0x2d
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <LoRa_setOCP+0x78>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1052      	asrs	r2, r2, #1
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e00b      	b.n	800084e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2bf0      	cmp	r3, #240	; 0xf0
 800083a:	d808      	bhi.n	800084e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	331e      	adds	r3, #30
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoRa_setOCP+0x78>)
 8000842:	fb82 1203 	smull	r1, r2, r2, r3
 8000846:	1092      	asrs	r2, r2, #2
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3320      	adds	r3, #32
 8000852:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	461a      	mov	r2, r3
 8000858:	210b      	movs	r1, #11
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f83f 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f001 f849 	bl	80018f8 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	66666667 	.word	0x66666667

08000874 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800087c:	211e      	movs	r1, #30
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f813 	bl	80008aa <LoRa_read>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f043 0307 	orr.w	r3, r3, #7
 800088e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	211e      	movs	r1, #30
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f821 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f001 f82b 	bl	80018f8 <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008c0:	f107 030f 	add.w	r3, r7, #15
 80008c4:	f107 010e 	add.w	r1, r7, #14
 80008c8:	2201      	movs	r2, #1
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	2201      	movs	r2, #1
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fea4 	bl	800061c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af02      	add	r7, sp, #8
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70fb      	strb	r3, [r7, #3]
 80008ea:	4613      	mov	r3, r2
 80008ec:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80008f8:	78bb      	ldrb	r3, [r7, #2]
 80008fa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008fc:	f107 030f 	add.w	r3, r7, #15
 8000900:	f107 010e 	add.w	r1, r7, #14
 8000904:	2201      	movs	r2, #1
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	2201      	movs	r2, #1
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fec4 	bl	8000698 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

	return 1;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000936:	2105      	movs	r1, #5
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fe0e 	bl	800055a <LoRa_gotoMode>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000946:	b590      	push	{r4, r7, lr}
 8000948:	b089      	sub	sp, #36	; 0x24
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	4613      	mov	r3, r2
 8000952:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
 800095c:	e007      	b.n	800096e <LoRa_receive+0x28>
		data[i]=0;
 800095e:	69bb      	ldr	r3, [r7, #24]
 8000960:	68ba      	ldr	r2, [r7, #8]
 8000962:	4413      	add	r3, r2
 8000964:	2200      	movs	r2, #0
 8000966:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	3301      	adds	r3, #1
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	429a      	cmp	r2, r3
 8000974:	dbf3      	blt.n	800095e <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000976:	2101      	movs	r1, #1
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f7ff fdee 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 800097e:	2112      	movs	r1, #18
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff ff92 	bl	80008aa <LoRa_read>
 8000986:	4603      	mov	r3, r0
 8000988:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 800098a:	7cfb      	ldrb	r3, [r7, #19]
 800098c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000990:	2b00      	cmp	r3, #0
 8000992:	d02f      	beq.n	80009f4 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000994:	22ff      	movs	r2, #255	; 0xff
 8000996:	2112      	movs	r1, #18
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff ffa0 	bl	80008de <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 800099e:	2113      	movs	r1, #19
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	f7ff ff82 	bl	80008aa <LoRa_read>
 80009a6:	4603      	mov	r3, r0
 80009a8:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80009aa:	2110      	movs	r1, #16
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff ff7c 	bl	80008aa <LoRa_read>
 80009b2:	4603      	mov	r3, r0
 80009b4:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009b6:	7cfb      	ldrb	r3, [r7, #19]
 80009b8:	461a      	mov	r2, r3
 80009ba:	210d      	movs	r1, #13
 80009bc:	68f8      	ldr	r0, [r7, #12]
 80009be:	f7ff ff8e 	bl	80008de <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 80009c2:	7cba      	ldrb	r2, [r7, #18]
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	4293      	cmp	r3, r2
 80009c8:	bf28      	it	cs
 80009ca:	4613      	movcs	r3, r2
 80009cc:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e00b      	b.n	80009ec <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	18d4      	adds	r4, r2, r3
 80009da:	2100      	movs	r1, #0
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	f7ff ff64 	bl	80008aa <LoRa_read>
 80009e2:	4603      	mov	r3, r0
 80009e4:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	3301      	adds	r3, #1
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	7ffb      	ldrb	r3, [r7, #31]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	dbef      	blt.n	80009d4 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80009f4:	2105      	movs	r1, #5
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff fdaf 	bl	800055a <LoRa_gotoMode>
    return min;
 80009fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd90      	pop	{r4, r7, pc}

08000a06 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b084      	sub	sp, #16
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f7ff ff82 	bl	8000918 <LoRa_isvalid>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 8093 	beq.w	8000b42 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fd9b 	bl	800055a <LoRa_gotoMode>
			HAL_Delay(10);
 8000a24:	200a      	movs	r0, #10
 8000a26:	f000 ff67 	bl	80018f8 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff3c 	bl	80008aa <LoRa_read>
 8000a32:	4603      	mov	r3, r0
 8000a34:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000a36:	200a      	movs	r0, #10
 8000a38:	f000 ff5e 	bl	80018f8 <HAL_Delay>
			data = read | 0x80;
 8000a3c:	7bfb      	ldrb	r3, [r7, #15]
 8000a3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a42:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000a44:	7bbb      	ldrb	r3, [r7, #14]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2101      	movs	r1, #1
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f7ff ff47 	bl	80008de <LoRa_write>
			HAL_Delay(100);
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f000 ff51 	bl	80018f8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff fe59 	bl	8000714 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000a68:	4619      	mov	r1, r3
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff feb1 	bl	80007d2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000a76:	4619      	mov	r1, r3
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff febd 	bl	80007f8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000a7e:	2223      	movs	r2, #35	; 0x23
 8000a80:	210c      	movs	r1, #12
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ff2b 	bl	80008de <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fef3 	bl	8000874 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fe6c 	bl	8000774 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000a9c:	22ff      	movs	r2, #255	; 0xff
 8000a9e:	211f      	movs	r1, #31
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff1c 	bl	80008de <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ab0:	011b      	lsls	r3, r3, #4
 8000ab2:	b2da      	uxtb	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4413      	add	r3, r2
 8000ac0:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	211d      	movs	r1, #29
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ff08 	bl	80008de <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	2120      	movs	r1, #32
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff fefe 	bl	80008de <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2121      	movs	r1, #33	; 0x21
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fef6 	bl	80008de <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000af2:	2140      	movs	r1, #64	; 0x40
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff fed8 	bl	80008aa <LoRa_read>
 8000afa:	4603      	mov	r3, r0
 8000afc:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000b04:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2140      	movs	r1, #64	; 0x40
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fee6 	bl	80008de <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b12:	2101      	movs	r1, #1
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff fd20 	bl	800055a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000b20:	200a      	movs	r0, #10
 8000b22:	f000 fee9 	bl	80018f8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000b26:	2142      	movs	r1, #66	; 0x42
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff febe 	bl	80008aa <LoRa_read>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b12      	cmp	r3, #18
 8000b36:	d101      	bne.n	8000b3c <LoRa_init+0x136>
				return LORA_OK;
 8000b38:	23c8      	movs	r3, #200	; 0xc8
 8000b3a:	e004      	b.n	8000b46 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000b3c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000b40:	e001      	b.n	8000b46 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000b42:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <debug_print>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
LoRa LoRaClass;
uint8_t RF_available_bytes = 0;

void debug_print(char* packet, size_t length) {
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
	#ifdef DEBUG
	CDC_Transmit_HS(packet, length);
 8000b58:	6839      	ldr	r1, [r7, #0]
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f009 fbca 	bl	800a2f4 <CDC_Transmit_HS>
	#endif
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <Blocking_LED_Blink>:

void Blocking_LED_Blink(uint8_t freq) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	while(1) {
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2104      	movs	r1, #4
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <Blocking_LED_Blink+0x40>)
 8000b78:	f001 fd5a 	bl	8002630 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b82:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 feb6 	bl	80018f8 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2104      	movs	r1, #4
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <Blocking_LED_Blink+0x40>)
 8000b92:	f001 fd4d 	bl	8002630 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fea9 	bl	80018f8 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000ba6:	e7e4      	b.n	8000b72 <Blocking_LED_Blink+0xa>
 8000ba8:	40020c00 	.word	0x40020c00

08000bac <HAL_GPIO_EXTI_Callback>:
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LoRaClass.DIO0_pin){
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000bb8:	8a9b      	ldrh	r3, [r3, #20]
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d107      	bne.n	8000bd0 <HAL_GPIO_EXTI_Callback+0x24>
		RF_available_bytes = LoRa_read(&LoRaClass, RegRxNbBytes);
 8000bc0:	2113      	movs	r1, #19
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000bc4:	f7ff fe71 	bl	80008aa <LoRa_read>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GPIO_EXTI_Callback+0x30>)
 8000bce:	701a      	strb	r2, [r3, #0]
	}
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000328 	.word	0x20000328
 8000bdc:	20000354 	.word	0x20000354

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b090      	sub	sp, #64	; 0x40
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8000be6:	4b5d      	ldr	r3, [pc, #372]	; (8000d5c <main+0x17c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fb0a 	bl	8001204 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f000 fe10 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f8c8 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 fa3c 	bl	8001074 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000bfc:	f000 f9c6 	bl	8000f8c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c00:	f000 f9ee 	bl	8000fe0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000c04:	f000 f93e 	bl	8000e84 <MX_SPI1_Init>
  MX_DMA_Init();
 8000c08:	f000 fa14 	bl	8001034 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c0c:	f000 f970 	bl	8000ef0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000c10:	f009 fab2 	bl	800a178 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8000c14:	f000 f922 	bl	8000e5c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_CRC_Init();
 8000c18:	f000 f920 	bl	8000e5c <MX_CRC_Init>
  hcrc.Instance = CRC;
 8000c1c:	4b50      	ldr	r3, [pc, #320]	; (8000d60 <main+0x180>)
 8000c1e:	4a51      	ldr	r2, [pc, #324]	; (8000d64 <main+0x184>)
 8000c20:	601a      	str	r2, [r3, #0]
//  hcrc.Init.GeneratingPolynomial = 0x4C11DB7;
  // https://stackoverflow.com/questions/28064278/matching-crc32-from-stm32f0-and-zlib
  HAL_CRC_Init(&hcrc);
 8000c22:	484f      	ldr	r0, [pc, #316]	; (8000d60 <main+0x180>)
 8000c24:	f000 ff9d 	bl	8001b62 <HAL_CRC_Init>

  // LoRa Class definitions
  LoRaClass = newLoRa();
 8000c28:	4c4f      	ldr	r4, [pc, #316]	; (8000d68 <main+0x188>)
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fc4d 	bl	80004cc <newLoRa>
 8000c32:	4625      	mov	r5, r4
 8000c34:	463c      	mov	r4, r7
 8000c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c3e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000c42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRaClass.hSPIx                 = RF_SPI;
 8000c46:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <main+0x18c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a47      	ldr	r2, [pc, #284]	; (8000d68 <main+0x188>)
 8000c4c:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <main+0x188>)
 8000c50:	4a47      	ldr	r2, [pc, #284]	; (8000d70 <main+0x190>)
 8000c52:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 8000c54:	4b44      	ldr	r3, [pc, #272]	; (8000d68 <main+0x188>)
 8000c56:	2210      	movs	r2, #16
 8000c58:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 8000c5a:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <main+0x188>)
 8000c5c:	4a45      	ldr	r2, [pc, #276]	; (8000d74 <main+0x194>)
 8000c5e:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 8000c60:	4b41      	ldr	r3, [pc, #260]	; (8000d68 <main+0x188>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO0_RF_GPIO_Port;
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <main+0x188>)
 8000c68:	4a42      	ldr	r2, [pc, #264]	; (8000d74 <main+0x194>)
 8000c6a:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO0_RF_Pin;
 8000c6c:	4b3e      	ldr	r3, [pc, #248]	; (8000d68 <main+0x188>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 8000c72:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <main+0x188>)
 8000c74:	f240 3293 	movw	r2, #915	; 0x393
 8000c78:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8000c7a:	4b3b      	ldr	r3, [pc, #236]	; (8000d68 <main+0x188>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8000c82:	4b39      	ldr	r3, [pc, #228]	; (8000d68 <main+0x188>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8000c8a:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <main+0x188>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8000c92:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <main+0x188>)
 8000c94:	22ff      	movs	r2, #255	; 0xff
 8000c96:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8000c9a:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <main+0x188>)
 8000c9c:	2278      	movs	r2, #120	; 0x78
 8000c9e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 8;		  					// default = 8;
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <main+0x188>)
 8000ca4:	2208      	movs	r2, #8
 8000ca6:	851a      	strh	r2, [r3, #40]	; 0x28

//  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_SET);

  LoRa_reset(&LoRaClass);
 8000ca8:	482f      	ldr	r0, [pc, #188]	; (8000d68 <main+0x188>)
 8000caa:	f7ff fc38 	bl	800051e <LoRa_reset>
//  LoRa_setModulation(&LoRaClass, LORA_MODULATION);
  uint32_t result = LoRa_init(&LoRaClass);
 8000cae:	482e      	ldr	r0, [pc, #184]	; (8000d68 <main+0x188>)
 8000cb0:	f7ff fea9 	bl	8000a06 <LoRa_init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	63bb      	str	r3, [r7, #56]	; 0x38

  if(result == LORA_NOT_FOUND) {
 8000cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cba:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8000cbe:	d103      	bne.n	8000cc8 <main+0xe8>
	  Blocking_LED_Blink(1);
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f7ff ff51 	bl	8000b68 <Blocking_LED_Blink>
 8000cc6:	e007      	b.n	8000cd8 <main+0xf8>
  }
  else if(result == LORA_UNAVAILABLE) {
 8000cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cca:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d102      	bne.n	8000cd8 <main+0xf8>
	  Blocking_LED_Blink(1);
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f7ff ff48 	bl	8000b68 <Blocking_LED_Blink>
  }

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8000cd8:	4823      	ldr	r0, [pc, #140]	; (8000d68 <main+0x188>)
 8000cda:	f7ff fe28 	bl	800092e <LoRa_startReceiving>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(RF_available_bytes) {
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <main+0x198>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0fb      	beq.n	8000cde <main+0xfe>
		  // Bytes in buffer
		  LoRa_receive(&LoRaClass, RF_RX_Buff, RF_available_bytes);
 8000ce6:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <main+0x198>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4923      	ldr	r1, [pc, #140]	; (8000d7c <main+0x19c>)
 8000cee:	481e      	ldr	r0, [pc, #120]	; (8000d68 <main+0x188>)
 8000cf0:	f7ff fe29 	bl	8000946 <LoRa_receive>

		  // Calculate CRC32
		  uint32_t CRC_Rec;
		  uint32_t CRC_Calc;
		  if (RF_available_bytes > 4) {
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <main+0x198>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d911      	bls.n	8000d20 <main+0x140>
			  // This statement prevents hard faults from noise causing packets to fire
			  memcpy(&CRC_Rec, &RF_RX_Buff[RF_available_bytes-4], sizeof(uint32_t));
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <main+0x198>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3b04      	subs	r3, #4
 8000d02:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <main+0x19c>)
 8000d04:	4413      	add	r3, r2
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	633b      	str	r3, [r7, #48]	; 0x30
			  CRC_Calc = ~HAL_CRC_Calculate(&hcrc,(uint32_t *) RF_RX_Buff, RF_available_bytes-4);
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <main+0x198>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	461a      	mov	r2, r3
 8000d12:	491a      	ldr	r1, [pc, #104]	; (8000d7c <main+0x19c>)
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <main+0x180>)
 8000d16:	f000 ff40 	bl	8001b9a <HAL_CRC_Calculate>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  }
		  if(CRC_Calc == CRC_Rec){
 8000d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d114      	bne.n	8000d52 <main+0x172>
			  // Extract header
			  uint8_t header = RF_RX_Buff[0];
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <main+0x19c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			  switch(header) {
 8000d30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d002      	beq.n	8000d3e <main+0x15e>
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d005      	beq.n	8000d48 <main+0x168>
 8000d3c:	e00a      	b.n	8000d54 <main+0x174>
			  case 0x01:
				  debug_print("Received test gimbal request\r\n", sizeof("Received test gimbal request\r\n"));
 8000d3e:	211f      	movs	r1, #31
 8000d40:	480f      	ldr	r0, [pc, #60]	; (8000d80 <main+0x1a0>)
 8000d42:	f7ff ff04 	bl	8000b4e <debug_print>
				  break;
 8000d46:	e005      	b.n	8000d54 <main+0x174>
			  case 0x02:
				  debug_print("Received continuity request\r\n", sizeof("Received continuity request\r\n"));
 8000d48:	211e      	movs	r1, #30
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <main+0x1a4>)
 8000d4c:	f7ff feff 	bl	8000b4e <debug_print>
				  break;
 8000d50:	e000      	b.n	8000d54 <main+0x174>
			  }
		  }
 8000d52:	bf00      	nop
		  RF_available_bytes = 0;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <main+0x198>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
	  if(RF_available_bytes) {
 8000d5a:	e7c0      	b.n	8000cde <main+0xfe>
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000184 	.word	0x20000184
 8000d64:	40023000 	.word	0x40023000
 8000d68:	20000328 	.word	0x20000328
 8000d6c:	20000004 	.word	0x20000004
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020400 	.word	0x40020400
 8000d78:	20000354 	.word	0x20000354
 8000d7c:	20000314 	.word	0x20000314
 8000d80:	0800b4b8 	.word	0x0800b4b8
 8000d84:	0800b4d8 	.word	0x0800b4d8

08000d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	2230      	movs	r2, #48	; 0x30
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f009 ff34 	bl	800ac04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <SystemClock_Config+0xcc>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <SystemClock_Config+0xcc>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <SystemClock_Config+0xd0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <SystemClock_Config+0xd0>)
 8000dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de4:	2301      	movs	r3, #1
 8000de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000df8:	230c      	movs	r3, #12
 8000dfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000dfc:	23a8      	movs	r3, #168	; 0xa8
 8000dfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e00:	2302      	movs	r3, #2
 8000e02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e04:	2307      	movs	r3, #7
 8000e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0320 	add.w	r3, r7, #32
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 febf 	bl	8003b90 <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e18:	f000 f9ee 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e20:	2302      	movs	r3, #2
 8000e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e34:	f107 030c 	add.w	r3, r7, #12
 8000e38:	2105      	movs	r1, #5
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 f920 	bl	8004080 <HAL_RCC_ClockConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e46:	f000 f9d7 	bl	80011f8 <Error_Handler>
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	3750      	adds	r7, #80	; 0x50
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40007000 	.word	0x40007000

08000e5c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_CRC_Init+0x20>)
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <MX_CRC_Init+0x24>)
 8000e64:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_CRC_Init+0x20>)
 8000e68:	f000 fe7b 	bl	8001b62 <HAL_CRC_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e72:	f000 f9c1 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000184 	.word	0x20000184
 8000e80:	40023000 	.word	0x40023000

08000e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <MX_SPI1_Init+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000eb8:	2230      	movs	r2, #48	; 0x30
 8000eba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ed0:	220a      	movs	r2, #10
 8000ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_SPI1_Init+0x64>)
 8000ed6:	f003 fab3 	bl	8004440 <HAL_SPI_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ee0:	f000 f98a 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000018c 	.word	0x2000018c
 8000eec:	40013000 	.word	0x40013000

08000ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2500;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f16:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f24:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8000f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f38:	f004 f838 	bl	8004fac <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f42:	f000 f959 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f54:	f004 f981 	bl	800525a <HAL_TIM_ConfigClockSource>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f5e:	f000 f94b 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f70:	f004 fba6 	bl	80056c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f7a:	f000 f93d 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001e4 	.word	0x200001e4

08000f8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_USART1_UART_Init+0x50>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000f98:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USART1_UART_Init+0x4c>)
 8000fc4:	f004 fc0c 	bl	80057e0 <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fce:	f000 f913 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000022c 	.word	0x2000022c
 8000fdc:	40011000 	.word	0x40011000

08000fe0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <MX_USART2_UART_Init+0x50>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000fec:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ff0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_USART2_UART_Init+0x4c>)
 800100c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001010:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001018:	4804      	ldr	r0, [pc, #16]	; (800102c <MX_USART2_UART_Init+0x4c>)
 800101a:	f004 fbe1 	bl	80057e0 <HAL_UART_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001024:	f000 f8e8 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000270 	.word	0x20000270
 8001030:	40004400 	.word	0x40004400

08001034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_DMA_Init+0x3c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <MX_DMA_Init+0x3c>)
 8001044:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_DMA_Init+0x3c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	203a      	movs	r0, #58	; 0x3a
 800105c:	f000 fd4b 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001060:	203a      	movs	r0, #58	; 0x3a
 8001062:	f000 fd64 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b56      	ldr	r3, [pc, #344]	; (80011e8 <MX_GPIO_Init+0x174>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a55      	ldr	r2, [pc, #340]	; (80011e8 <MX_GPIO_Init+0x174>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b53      	ldr	r3, [pc, #332]	; (80011e8 <MX_GPIO_Init+0x174>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a47      	ldr	r2, [pc, #284]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <MX_GPIO_Init+0x174>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <MX_GPIO_Init+0x174>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <MX_GPIO_Init+0x174>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2110      	movs	r1, #16
 800111a:	4834      	ldr	r0, [pc, #208]	; (80011ec <MX_GPIO_Init+0x178>)
 800111c:	f001 fa88 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2101      	movs	r1, #1
 8001124:	4832      	ldr	r0, [pc, #200]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001126:	f001 fa83 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2104      	movs	r1, #4
 800112e:	4831      	ldr	r0, [pc, #196]	; (80011f4 <MX_GPIO_Init+0x180>)
 8001130:	f001 fa7e 	bl	8002630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_NSS_Pin;
 8001134:	2310      	movs	r3, #16
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4828      	ldr	r0, [pc, #160]	; (80011ec <MX_GPIO_Init+0x178>)
 800114c:	f001 f8d4 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4822      	ldr	r0, [pc, #136]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001168:	f001 f8c6 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 800116c:	f643 4302 	movw	r3, #15362	; 0x3c02
 8001170:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001172:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	481b      	ldr	r0, [pc, #108]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001184:	f001 f8b8 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 8001188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800118e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_GPIO_Init+0x178>)
 80011a0:	f001 f8aa 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 80011a4:	2304      	movs	r3, #4
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <MX_GPIO_Init+0x180>)
 80011bc:	f001 f89c 	bl	80022f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2007      	movs	r0, #7
 80011c6:	f000 fc96 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011ca:	2007      	movs	r0, #7
 80011cc:	f000 fcaf 	bl	8001b2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2028      	movs	r0, #40	; 0x28
 80011d6:	f000 fc8e 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011da:	2028      	movs	r0, #40	; 0x28
 80011dc:	f000 fca7 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020c00 	.word	0x40020c00

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <RetargetInit+0x28>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <RetargetInit+0x2c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6898      	ldr	r0, [r3, #8]
 8001218:	2300      	movs	r3, #0
 800121a:	2202      	movs	r2, #2
 800121c:	2100      	movs	r1, #0
 800121e:	f009 fcf9 	bl	800ac14 <setvbuf>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000358 	.word	0x20000358
 8001230:	20000104 	.word	0x20000104

08001234 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d002      	beq.n	800124c <_write+0x18>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d111      	bne.n	8001270 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <_write+0x54>)
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	b29a      	uxth	r2, r3
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	f004 fb0e 	bl	800587a <HAL_UART_Transmit>
 800125e:	4603      	mov	r3, r0
 8001260:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <_write+0x38>
      return len;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e008      	b.n	800127e <_write+0x4a>
    else
      return EIO;
 800126c:	2305      	movs	r3, #5
 800126e:	e006      	b.n	800127e <_write+0x4a>
  }
  errno = EBADF;
 8001270:	f009 fc9e 	bl	800abb0 <__errno>
 8001274:	4603      	mov	r3, r0
 8001276:	2209      	movs	r2, #9
 8001278:	601a      	str	r2, [r3, #0]
  return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000358 	.word	0x20000358

0800128c <_close>:

int _close(int fd) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db04      	blt.n	80012a4 <_close+0x18>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b02      	cmp	r3, #2
 800129e:	dc01      	bgt.n	80012a4 <_close+0x18>
    return 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e006      	b.n	80012b2 <_close+0x26>

  errno = EBADF;
 80012a4:	f009 fc84 	bl	800abb0 <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2209      	movs	r2, #9
 80012ac:	601a      	str	r2, [r3, #0]
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80012c6:	f009 fc73 	bl	800abb0 <__errno>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2209      	movs	r2, #9
 80012ce:	601a      	str	r2, [r3, #0]
  return -1;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_read>:

int _read(int fd, char* ptr, int len) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d110      	bne.n	8001310 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <_read+0x4c>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	2201      	movs	r2, #1
 80012f8:	68b9      	ldr	r1, [r7, #8]
 80012fa:	f004 fb50 	bl	800599e <HAL_UART_Receive>
 80012fe:	4603      	mov	r3, r0
 8001300:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001302:	7dfb      	ldrb	r3, [r7, #23]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <_read+0x30>
      return 1;
 8001308:	2301      	movs	r3, #1
 800130a:	e008      	b.n	800131e <_read+0x42>
    else
      return EIO;
 800130c:	2305      	movs	r3, #5
 800130e:	e006      	b.n	800131e <_read+0x42>
  }
  errno = EBADF;
 8001310:	f009 fc4e 	bl	800abb0 <__errno>
 8001314:	4603      	mov	r3, r0
 8001316:	2209      	movs	r2, #9
 8001318:	601a      	str	r2, [r3, #0]
  return -1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000358 	.word	0x20000358

0800132c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db08      	blt.n	800134e <_fstat+0x22>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b02      	cmp	r3, #2
 8001340:	dc05      	bgt.n	800134e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001348:	605a      	str	r2, [r3, #4]
    return 0;
 800134a:	2300      	movs	r3, #0
 800134c:	e005      	b.n	800135a <_fstat+0x2e>
  }

  errno = EBADF;
 800134e:	f009 fc2f 	bl	800abb0 <__errno>
 8001352:	4603      	mov	r3, r0
 8001354:	2209      	movs	r2, #9
 8001356:	601a      	str	r2, [r3, #0]
  return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <HAL_MspInit+0x4c>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_MspInit+0x4c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_CRC_MspInit+0x3c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d10d      	bne.n	80013e2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <HAL_CRC_MspInit+0x40>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_CRC_MspInit+0x40>)
 80013d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <HAL_CRC_MspInit+0x40>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023000 	.word	0x40023000
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_SPI_MspInit+0x84>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d12b      	bne.n	8001472 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <HAL_SPI_MspInit+0x88>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a17      	ldr	r2, [pc, #92]	; (8001480 <HAL_SPI_MspInit+0x88>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_SPI_MspInit+0x88>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_SPI_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a10      	ldr	r2, [pc, #64]	; (8001480 <HAL_SPI_MspInit+0x88>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <HAL_SPI_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001452:	23e0      	movs	r3, #224	; 0xe0
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001462:	2305      	movs	r3, #5
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <HAL_SPI_MspInit+0x8c>)
 800146e:	f000 ff43 	bl	80022f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40013000 	.word	0x40013000
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d115      	bne.n	80014c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_TIM_Base_MspInit+0x48>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <HAL_TIM_Base_MspInit+0x48>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_TIM_Base_MspInit+0x48>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2102      	movs	r1, #2
 80014ba:	201c      	movs	r0, #28
 80014bc:	f000 fb1b 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014c0:	201c      	movs	r0, #28
 80014c2:	f000 fb34 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_UART_MspInit+0x168>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d164      	bne.n	80015c0 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	4b51      	ldr	r3, [pc, #324]	; (8001640 <HAL_UART_MspInit+0x16c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a50      	ldr	r2, [pc, #320]	; (8001640 <HAL_UART_MspInit+0x16c>)
 8001500:	f043 0310 	orr.w	r3, r3, #16
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <HAL_UART_MspInit+0x16c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <HAL_UART_MspInit+0x16c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a49      	ldr	r2, [pc, #292]	; (8001640 <HAL_UART_MspInit+0x16c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_UART_MspInit+0x16c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800152e:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001540:	2307      	movs	r3, #7
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	483e      	ldr	r0, [pc, #248]	; (8001644 <HAL_UART_MspInit+0x170>)
 800154c:	f000 fed4 	bl	80022f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001550:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <HAL_UART_MspInit+0x174>)
 8001552:	4a3e      	ldr	r2, [pc, #248]	; (800164c <HAL_UART_MspInit+0x178>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001556:	4b3c      	ldr	r3, [pc, #240]	; (8001648 <HAL_UART_MspInit+0x174>)
 8001558:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800155c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800155e:	4b3a      	ldr	r3, [pc, #232]	; (8001648 <HAL_UART_MspInit+0x174>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001564:	4b38      	ldr	r3, [pc, #224]	; (8001648 <HAL_UART_MspInit+0x174>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800156a:	4b37      	ldr	r3, [pc, #220]	; (8001648 <HAL_UART_MspInit+0x174>)
 800156c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001570:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001572:	4b35      	ldr	r3, [pc, #212]	; (8001648 <HAL_UART_MspInit+0x174>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001578:	4b33      	ldr	r3, [pc, #204]	; (8001648 <HAL_UART_MspInit+0x174>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800157e:	4b32      	ldr	r3, [pc, #200]	; (8001648 <HAL_UART_MspInit+0x174>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <HAL_UART_MspInit+0x174>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800158a:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <HAL_UART_MspInit+0x174>)
 800158c:	2204      	movs	r2, #4
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_UART_MspInit+0x174>)
 8001592:	2201      	movs	r2, #1
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001596:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_UART_MspInit+0x174>)
 8001598:	2200      	movs	r2, #0
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <HAL_UART_MspInit+0x174>)
 800159e:	2200      	movs	r2, #0
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80015a2:	4829      	ldr	r0, [pc, #164]	; (8001648 <HAL_UART_MspInit+0x174>)
 80015a4:	f000 fb2c 	bl	8001c00 <HAL_DMA_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80015ae:	f7ff fe23 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a24      	ldr	r2, [pc, #144]	; (8001648 <HAL_UART_MspInit+0x174>)
 80015b6:	639a      	str	r2, [r3, #56]	; 0x38
 80015b8:	4a23      	ldr	r2, [pc, #140]	; (8001648 <HAL_UART_MspInit+0x174>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015be:	e038      	b.n	8001632 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a22      	ldr	r2, [pc, #136]	; (8001650 <HAL_UART_MspInit+0x17c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d133      	bne.n	8001632 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_UART_MspInit+0x16c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_UART_MspInit+0x16c>)
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_UART_MspInit+0x16c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0x16c>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_UART_MspInit+0x16c>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_UART_MspInit+0x16c>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001602:	230f      	movs	r3, #15
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001612:	2307      	movs	r3, #7
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <HAL_UART_MspInit+0x170>)
 800161e:	f000 fe6b 	bl	80022f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2101      	movs	r1, #1
 8001626:	2026      	movs	r0, #38	; 0x26
 8001628:	f000 fa65 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800162c:	2026      	movs	r0, #38	; 0x26
 800162e:	f000 fa7e 	bl	8001b2e <HAL_NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3730      	adds	r7, #48	; 0x30
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40011000 	.word	0x40011000
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	200002b4 	.word	0x200002b4
 800164c:	40026440 	.word	0x40026440
 8001650:	40004400 	.word	0x40004400

08001654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <NMI_Handler+0x4>

0800165a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <HardFault_Handler+0x4>

08001660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <MemManage_Handler+0x4>

08001666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166a:	e7fe      	b.n	800166a <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	e7fe      	b.n	8001670 <UsageFault_Handler+0x4>

08001672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a0:	f000 f90a 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO0_RF_Pin);
 80016ac:	2002      	movs	r0, #2
 80016ae:	f000 ffd9 	bl	8002664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <TIM2_IRQHandler+0x10>)
 80016be:	f003 fcc4 	bl	800504a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001e4 	.word	0x200001e4

080016cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <USART2_IRQHandler+0x10>)
 80016d2:	f004 fa07 	bl	8005ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000270 	.word	0x20000270

080016e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO1_RF_Pin);
 80016e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80016e8:	f000 ffbc 	bl	8002664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO2_RF_Pin);
 80016ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016f0:	f000 ffb8 	bl	8002664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO3_RF_Pin);
 80016f4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016f8:	f000 ffb4 	bl	8002664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO4_RF_Pin);
 80016fc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001700:	f000 ffb0 	bl	8002664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <DMA2_Stream2_IRQHandler+0x10>)
 800170e:	f000 fbb7 	bl	8001e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200002b4 	.word	0x200002b4

0800171c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <OTG_HS_IRQHandler+0x10>)
 8001722:	f001 f907 	bl	8002934 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20001844 	.word	0x20001844

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f009 fa26 	bl	800abb0 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20020000 	.word	0x20020000
 8001790:	00000400 	.word	0x00000400
 8001794:	2000035c 	.word	0x2000035c
 8001798:	20001f80 	.word	0x20001f80

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <SystemInit+0x20>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <SystemInit+0x20>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017c6:	490e      	ldr	r1, [pc, #56]	; (8001800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017dc:	4c0b      	ldr	r4, [pc, #44]	; (800180c <LoopFillZerobss+0x26>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ea:	f7ff ffd7 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f009 f9e5 	bl	800abbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff f9f5 	bl	8000be0 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001804:	0800b5d4 	.word	0x0800b5d4
  ldr r2, =_sbss
 8001808:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800180c:	20001f80 	.word	0x20001f80

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	; (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f94f 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	200f      	movs	r0, #15
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fd8c 	bl	8001364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f967 	bl	8001b4a <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f92f 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000008 	.word	0x20000008
 80018b0:	20000010 	.word	0x20000010
 80018b4:	2000000c 	.word	0x2000000c

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000010 	.word	0x20000010
 80018dc:	20000360 	.word	0x20000360

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000360 	.word	0x20000360

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000010 	.word	0x20000010

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	; (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff29 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff3e 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff8e 	bl	8001a34 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff31 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e00e      	b.n	8001b92 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	795b      	ldrb	r3, [r3, #5]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d105      	bne.n	8001b8a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff fc15 	bl	80013b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b087      	sub	sp, #28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2202      	movs	r2, #2
 8001bae:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0201 	orr.w	r2, r2, #1
 8001bbe:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e00a      	b.n	8001bdc <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	441a      	add	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d3f0      	bcc.n	8001bc6 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001bf2:	693b      	ldr	r3, [r7, #16]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff fe68 	bl	80018e0 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e099      	b.n	8001d50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3c:	e00f      	b.n	8001c5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c3e:	f7ff fe4f 	bl	80018e0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	d908      	bls.n	8001c5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2220      	movs	r2, #32
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2203      	movs	r2, #3
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e078      	b.n	8001d50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e8      	bne.n	8001c3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <HAL_DMA_Init+0x158>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d107      	bne.n	8001cc8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f023 0307 	bic.w	r3, r3, #7
 8001cde:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d117      	bne.n	8001d22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00e      	beq.n	8001d22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fa7b 	bl	8002200 <DMA_CheckFifoParam>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e016      	b.n	8001d50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 fa32 	bl	8002194 <DMA_CalcBaseAndBitshift>
 8001d30:	4603      	mov	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	223f      	movs	r2, #63	; 0x3f
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	f010803f 	.word	0xf010803f

08001d5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d6a:	f7ff fdb9 	bl	80018e0 <HAL_GetTick>
 8001d6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d008      	beq.n	8001d8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2280      	movs	r2, #128	; 0x80
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e052      	b.n	8001e34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0216 	bic.w	r2, r2, #22
 8001d9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_DMA_Abort+0x62>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d007      	beq.n	8001dce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0208 	bic.w	r2, r2, #8
 8001dcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0201 	bic.w	r2, r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dde:	e013      	b.n	8001e08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001de0:	f7ff fd7e 	bl	80018e0 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b05      	cmp	r3, #5
 8001dec:	d90c      	bls.n	8001e08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2220      	movs	r2, #32
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e015      	b.n	8001e34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1e4      	bne.n	8001de0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1a:	223f      	movs	r2, #63	; 0x3f
 8001e1c:	409a      	lsls	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d004      	beq.n	8001e5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2280      	movs	r2, #128	; 0x80
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00c      	b.n	8001e74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2205      	movs	r2, #5
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0201 	bic.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e8c:	4b8e      	ldr	r3, [pc, #568]	; (80020c8 <HAL_DMA_IRQHandler+0x248>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a8e      	ldr	r2, [pc, #568]	; (80020cc <HAL_DMA_IRQHandler+0x24c>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	0a9b      	lsrs	r3, r3, #10
 8001e98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eaa:	2208      	movs	r2, #8
 8001eac:	409a      	lsls	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01a      	beq.n	8001eec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0204 	bic.w	r2, r2, #4
 8001ed2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2208      	movs	r2, #8
 8001eda:	409a      	lsls	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee4:	f043 0201 	orr.w	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d012      	beq.n	8001f22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00b      	beq.n	8001f22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	2201      	movs	r2, #1
 8001f10:	409a      	lsls	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1a:	f043 0202 	orr.w	r2, r3, #2
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	2204      	movs	r2, #4
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d012      	beq.n	8001f58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00b      	beq.n	8001f58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f44:	2204      	movs	r2, #4
 8001f46:	409a      	lsls	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f043 0204 	orr.w	r2, r3, #4
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5c:	2210      	movs	r2, #16
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d043      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d03c      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d018      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d108      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d024      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
 8001fae:	e01f      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01b      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	4798      	blx	r3
 8001fc0:	e016      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d107      	bne.n	8001fe0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f022 0208 	bic.w	r2, r2, #8
 8001fde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	409a      	lsls	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 808f 	beq.w	8002120 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 8087 	beq.w	8002120 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2220      	movs	r2, #32
 8002018:	409a      	lsls	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b05      	cmp	r3, #5
 8002028:	d136      	bne.n	8002098 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0216 	bic.w	r2, r2, #22
 8002038:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695a      	ldr	r2, [r3, #20]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002048:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d103      	bne.n	800205a <HAL_DMA_IRQHandler+0x1da>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002056:	2b00      	cmp	r3, #0
 8002058:	d007      	beq.n	800206a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f022 0208 	bic.w	r2, r2, #8
 8002068:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	223f      	movs	r2, #63	; 0x3f
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800208a:	2b00      	cmp	r3, #0
 800208c:	d07e      	beq.n	800218c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
        }
        return;
 8002096:	e079      	b.n	800218c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01d      	beq.n	80020e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10d      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d031      	beq.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
 80020c4:	e02c      	b.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
 80020c6:	bf00      	nop
 80020c8:	20000008 	.word	0x20000008
 80020cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d023      	beq.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
 80020e0:	e01e      	b.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10f      	bne.n	8002110 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0210 	bic.w	r2, r2, #16
 80020fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002124:	2b00      	cmp	r3, #0
 8002126:	d032      	beq.n	800218e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d022      	beq.n	800217a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2205      	movs	r2, #5
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3301      	adds	r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	d307      	bcc.n	8002168 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f2      	bne.n	800214c <HAL_DMA_IRQHandler+0x2cc>
 8002166:	e000      	b.n	800216a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002168:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
 800218a:	e000      	b.n	800218e <HAL_DMA_IRQHandler+0x30e>
        return;
 800218c:	bf00      	nop
    }
  }
}
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	3b10      	subs	r3, #16
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <DMA_CalcBaseAndBitshift+0x64>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ae:	4a13      	ldr	r2, [pc, #76]	; (80021fc <DMA_CalcBaseAndBitshift+0x68>)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b03      	cmp	r3, #3
 80021c0:	d909      	bls.n	80021d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	659a      	str	r2, [r3, #88]	; 0x58
 80021d4:	e007      	b.n	80021e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	aaaaaaab 	.word	0xaaaaaaab
 80021fc:	0800b558 	.word	0x0800b558

08002200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11f      	bne.n	800225a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d856      	bhi.n	80022ce <DMA_CheckFifoParam+0xce>
 8002220:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <DMA_CheckFifoParam+0x28>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	08002239 	.word	0x08002239
 800222c:	0800224b 	.word	0x0800224b
 8002230:	08002239 	.word	0x08002239
 8002234:	080022cf 	.word	0x080022cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d046      	beq.n	80022d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002248:	e043      	b.n	80022d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002252:	d140      	bne.n	80022d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002258:	e03d      	b.n	80022d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002262:	d121      	bne.n	80022a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d837      	bhi.n	80022da <DMA_CheckFifoParam+0xda>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <DMA_CheckFifoParam+0x70>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	08002281 	.word	0x08002281
 8002274:	08002287 	.word	0x08002287
 8002278:	08002281 	.word	0x08002281
 800227c:	08002299 	.word	0x08002299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      break;
 8002284:	e030      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d025      	beq.n	80022de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002296:	e022      	b.n	80022de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022a0:	d11f      	bne.n	80022e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022a6:	e01c      	b.n	80022e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d903      	bls.n	80022b6 <DMA_CheckFifoParam+0xb6>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d003      	beq.n	80022bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022b4:	e018      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
      break;
 80022ba:	e015      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      break;
 80022cc:	e00b      	b.n	80022e6 <DMA_CheckFifoParam+0xe6>
      break;
 80022ce:	bf00      	nop
 80022d0:	e00a      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d2:	bf00      	nop
 80022d4:	e008      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022d6:	bf00      	nop
 80022d8:	e006      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022da:	bf00      	nop
 80022dc:	e004      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022de:	bf00      	nop
 80022e0:	e002      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022e2:	bf00      	nop
 80022e4:	e000      	b.n	80022e8 <DMA_CheckFifoParam+0xe8>
      break;
 80022e6:	bf00      	nop
    }
  } 
  
  return status; 
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800230e:	2300      	movs	r3, #0
 8002310:	61fb      	str	r3, [r7, #28]
 8002312:	e16b      	b.n	80025ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002314:	2201      	movs	r2, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4013      	ands	r3, r2
 8002326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 815a 	bne.w	80025e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b01      	cmp	r3, #1
 800233c:	d005      	beq.n	800234a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	2b02      	cmp	r3, #2
 8002348:	d130      	bne.n	80023ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4013      	ands	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0201 	and.w	r2, r3, #1
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d017      	beq.n	80023e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d123      	bne.n	800243c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	08da      	lsrs	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3208      	adds	r2, #8
 80023fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	220f      	movs	r2, #15
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	2203      	movs	r2, #3
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80b4 	beq.w	80025e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	4b60      	ldr	r3, [pc, #384]	; (8002604 <HAL_GPIO_Init+0x30c>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	4a5f      	ldr	r2, [pc, #380]	; (8002604 <HAL_GPIO_Init+0x30c>)
 8002488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248c:	6453      	str	r3, [r2, #68]	; 0x44
 800248e:	4b5d      	ldr	r3, [pc, #372]	; (8002604 <HAL_GPIO_Init+0x30c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800249a:	4a5b      	ldr	r2, [pc, #364]	; (8002608 <HAL_GPIO_Init+0x310>)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	089b      	lsrs	r3, r3, #2
 80024a0:	3302      	adds	r3, #2
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a52      	ldr	r2, [pc, #328]	; (800260c <HAL_GPIO_Init+0x314>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d02b      	beq.n	800251e <HAL_GPIO_Init+0x226>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a51      	ldr	r2, [pc, #324]	; (8002610 <HAL_GPIO_Init+0x318>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d025      	beq.n	800251a <HAL_GPIO_Init+0x222>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a50      	ldr	r2, [pc, #320]	; (8002614 <HAL_GPIO_Init+0x31c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d01f      	beq.n	8002516 <HAL_GPIO_Init+0x21e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4f      	ldr	r2, [pc, #316]	; (8002618 <HAL_GPIO_Init+0x320>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d019      	beq.n	8002512 <HAL_GPIO_Init+0x21a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4e      	ldr	r2, [pc, #312]	; (800261c <HAL_GPIO_Init+0x324>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d013      	beq.n	800250e <HAL_GPIO_Init+0x216>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4d      	ldr	r2, [pc, #308]	; (8002620 <HAL_GPIO_Init+0x328>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00d      	beq.n	800250a <HAL_GPIO_Init+0x212>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <HAL_GPIO_Init+0x32c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <HAL_GPIO_Init+0x20e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4b      	ldr	r2, [pc, #300]	; (8002628 <HAL_GPIO_Init+0x330>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_GPIO_Init+0x20a>
 80024fe:	2307      	movs	r3, #7
 8002500:	e00e      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002502:	2308      	movs	r3, #8
 8002504:	e00c      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002506:	2306      	movs	r3, #6
 8002508:	e00a      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800250a:	2305      	movs	r3, #5
 800250c:	e008      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800250e:	2304      	movs	r3, #4
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002512:	2303      	movs	r3, #3
 8002514:	e004      	b.n	8002520 <HAL_GPIO_Init+0x228>
 8002516:	2302      	movs	r3, #2
 8002518:	e002      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_GPIO_Init+0x228>
 800251e:	2300      	movs	r3, #0
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	f002 0203 	and.w	r2, r2, #3
 8002526:	0092      	lsls	r2, r2, #2
 8002528:	4093      	lsls	r3, r2
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002530:	4935      	ldr	r1, [pc, #212]	; (8002608 <HAL_GPIO_Init+0x310>)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	3302      	adds	r3, #2
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <HAL_GPIO_Init+0x334>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002562:	4a32      	ldr	r2, [pc, #200]	; (800262c <HAL_GPIO_Init+0x334>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <HAL_GPIO_Init+0x334>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800258c:	4a27      	ldr	r2, [pc, #156]	; (800262c <HAL_GPIO_Init+0x334>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_GPIO_Init+0x334>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_GPIO_Init+0x334>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_GPIO_Init+0x334>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e0:	4a12      	ldr	r2, [pc, #72]	; (800262c <HAL_GPIO_Init+0x334>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b0f      	cmp	r3, #15
 80025f0:	f67f ae90 	bls.w	8002314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3724      	adds	r7, #36	; 0x24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40013800 	.word	0x40013800
 800260c:	40020000 	.word	0x40020000
 8002610:	40020400 	.word	0x40020400
 8002614:	40020800 	.word	0x40020800
 8002618:	40020c00 	.word	0x40020c00
 800261c:	40021000 	.word	0x40021000
 8002620:	40021400 	.word	0x40021400
 8002624:	40021800 	.word	0x40021800
 8002628:	40021c00 	.word	0x40021c00
 800262c:	40013c00 	.word	0x40013c00

08002630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	807b      	strh	r3, [r7, #2]
 800263c:	4613      	mov	r3, r2
 800263e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002640:	787b      	ldrb	r3, [r7, #1]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002646:	887a      	ldrh	r2, [r7, #2]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800264c:	e003      	b.n	8002656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	041a      	lsls	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	619a      	str	r2, [r3, #24]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	4013      	ands	r3, r2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fa92 	bl	8000bac <HAL_GPIO_EXTI_Callback>
  }
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40013c00 	.word	0x40013c00

08002694 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002696:	b08f      	sub	sp, #60	; 0x3c
 8002698:	af0a      	add	r7, sp, #40	; 0x28
 800269a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e10f      	b.n	80028c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d106      	bne.n	80026c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f007 ff5f 	bl	800a584 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2203      	movs	r2, #3
 80026ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f004 fa46 	bl	8006b76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	687e      	ldr	r6, [r7, #4]
 80026f2:	466d      	mov	r5, sp
 80026f4:	f106 0410 	add.w	r4, r6, #16
 80026f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002700:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002704:	e885 0003 	stmia.w	r5, {r0, r1}
 8002708:	1d33      	adds	r3, r6, #4
 800270a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270c:	6838      	ldr	r0, [r7, #0]
 800270e:	f004 f91d 	bl	800694c <USB_CoreInit>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e0d0      	b.n	80028c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2100      	movs	r1, #0
 800272a:	4618      	mov	r0, r3
 800272c:	f004 fa34 	bl	8006b98 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e04a      	b.n	80027cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	333d      	adds	r3, #61	; 0x3d
 8002746:	2201      	movs	r2, #1
 8002748:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	333c      	adds	r3, #60	; 0x3c
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	b298      	uxth	r0, r3
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	3344      	adds	r3, #68	; 0x44
 8002772:	4602      	mov	r2, r0
 8002774:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	3340      	adds	r3, #64	; 0x40
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800278a:	7bfa      	ldrb	r2, [r7, #15]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3348      	adds	r3, #72	; 0x48
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	334c      	adds	r3, #76	; 0x4c
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3354      	adds	r3, #84	; 0x54
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	3301      	adds	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d3af      	bcc.n	8002736 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e044      	b.n	8002866 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800281e:	7bfa      	ldrb	r2, [r7, #15]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	3301      	adds	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	429a      	cmp	r2, r3
 800286e:	d3b5      	bcc.n	80027dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	603b      	str	r3, [r7, #0]
 8002876:	687e      	ldr	r6, [r7, #4]
 8002878:	466d      	mov	r5, sp
 800287a:	f106 0410 	add.w	r4, r6, #16
 800287e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002880:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800288a:	e885 0003 	stmia.w	r5, {r0, r1}
 800288e:	1d33      	adds	r3, r6, #4
 8002890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002892:	6838      	ldr	r0, [r7, #0]
 8002894:	f004 f9cc 	bl	8006c30 <USB_DevInit>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00d      	b.n	80028c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f005 fb1b 	bl	8007efa <USB_DevDisconnect>

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_PCD_Start+0x1c>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e020      	b.n	800292c <HAL_PCD_Start+0x5e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d109      	bne.n	800290e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d005      	beq.n	800290e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f004 f91e 	bl	8006b54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f005 facb 	bl	8007eb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08d      	sub	sp, #52	; 0x34
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f005 fb89 	bl	8008062 <USB_GetMode>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 848a 	bne.w	800326c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f005 faed 	bl	8007f3c <USB_ReadInterrupts>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8480 	beq.w	800326a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f005 fada 	bl	8007f3c <USB_ReadInterrupts>
 8002988:	4603      	mov	r3, r0
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d107      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695a      	ldr	r2, [r3, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f002 0202 	and.w	r2, r2, #2
 80029a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 fac8 	bl	8007f3c <USB_ReadInterrupts>
 80029ac:	4603      	mov	r3, r0
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d161      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0210 	bic.w	r2, r2, #16
 80029c4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f003 020f 	and.w	r2, r3, #15
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	3304      	adds	r3, #4
 80029e4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	0c5b      	lsrs	r3, r3, #17
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d124      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d035      	beq.n	8002a6a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	6a38      	ldr	r0, [r7, #32]
 8002a12:	f005 f8ff 	bl	8007c14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a22:	441a      	add	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	6a1a      	ldr	r2, [r3, #32]
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	091b      	lsrs	r3, r3, #4
 8002a30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a34:	441a      	add	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	621a      	str	r2, [r3, #32]
 8002a3a:	e016      	b.n	8002a6a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	0c5b      	lsrs	r3, r3, #17
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	2b06      	cmp	r3, #6
 8002a46:	d110      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a4e:	2208      	movs	r2, #8
 8002a50:	4619      	mov	r1, r3
 8002a52:	6a38      	ldr	r0, [r7, #32]
 8002a54:	f005 f8de 	bl	8007c14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	6a1a      	ldr	r2, [r3, #32]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a64:	441a      	add	r2, r3
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699a      	ldr	r2, [r3, #24]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0210 	orr.w	r2, r2, #16
 8002a78:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f005 fa5c 	bl	8007f3c <USB_ReadInterrupts>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a8e:	f040 80a7 	bne.w	8002be0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f005 fa61 	bl	8007f62 <USB_ReadDevAllOutEpInterrupt>
 8002aa0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002aa2:	e099      	b.n	8002bd8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 808e 	beq.w	8002bcc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f005 fa85 	bl	8007fca <USB_ReadDevOutEPInterrupt>
 8002ac0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00c      	beq.n	8002ae6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2301      	movs	r3, #1
 8002adc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ade:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 fec3 	bl	800386c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00c      	beq.n	8002b0a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afc:	461a      	mov	r2, r3
 8002afe:	2308      	movs	r3, #8
 8002b00:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 ff99 	bl	8003a3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0310 	and.w	r3, r3, #16
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b20:	461a      	mov	r2, r3
 8002b22:	2310      	movs	r3, #16
 8002b24:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d030      	beq.n	8002b92 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b38:	2b80      	cmp	r3, #128	; 0x80
 8002b3a:	d109      	bne.n	8002b50 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4413      	add	r3, r2
 8002b62:	3304      	adds	r3, #4
 8002b64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	78db      	ldrb	r3, [r3, #3]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d108      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2200      	movs	r2, #0
 8002b72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f007 fe04 	bl	800a788 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2302      	movs	r3, #2
 8002b90:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2320      	movs	r3, #32
 8002bac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	3301      	adds	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	085b      	lsrs	r3, r3, #1
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f47f af62 	bne.w	8002aa4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f005 f9a9 	bl	8007f3c <USB_ReadInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bf4:	f040 80db 	bne.w	8002dae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f005 f9ca 	bl	8007f96 <USB_ReadDevAllInEpInterrupt>
 8002c02:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c08:	e0cd      	b.n	8002da6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80c2 	beq.w	8002d9a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f005 f9f0 	bl	8008006 <USB_ReadDevInEPInterrupt>
 8002c26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d057      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	2201      	movs	r2, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69f9      	ldr	r1, [r7, #28]
 8002c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c52:	4013      	ands	r3, r2
 8002c54:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c62:	461a      	mov	r2, r3
 8002c64:	2301      	movs	r3, #1
 8002c66:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d132      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	4613      	mov	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334c      	adds	r3, #76	; 0x4c
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4403      	add	r3, r0
 8002c90:	3348      	adds	r3, #72	; 0x48
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4419      	add	r1, r3
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4403      	add	r3, r0
 8002ca4:	334c      	adds	r3, #76	; 0x4c
 8002ca6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d113      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x3a2>
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3354      	adds	r3, #84	; 0x54
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d108      	bne.n	8002cd6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	f005 f9f7 	bl	80080c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f007 fcce 	bl	800a67e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d14:	461a      	mov	r2, r3
 8002d16:	2310      	movs	r3, #16
 8002d18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d30:	461a      	mov	r2, r3
 8002d32:	2340      	movs	r3, #64	; 0x40
 8002d34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d023      	beq.n	8002d88 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d42:	6a38      	ldr	r0, [r7, #32]
 8002d44:	f004 f8d8 	bl	8006ef8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	3338      	adds	r3, #56	; 0x38
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	78db      	ldrb	r3, [r3, #3]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d108      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f007 fd1b 	bl	800a7ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d82:	461a      	mov	r2, r3
 8002d84:	2302      	movs	r3, #2
 8002d86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fcdb 	bl	8003750 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f47f af2e 	bne.w	8002c0a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f005 f8c2 	bl	8007f3c <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc2:	d122      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d108      	bne.n	8002df4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dea:	2100      	movs	r1, #0
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fec3 	bl	8003b78 <HAL_PCDEx_LPM_Callback>
 8002df2:	e002      	b.n	8002dfa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f007 fcb9 	bl	800a76c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f005 f894 	bl	8007f3c <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	d112      	bne.n	8002e46 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d102      	bne.n	8002e36 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f007 fc75 	bl	800a720 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	695a      	ldr	r2, [r3, #20]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e44:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f005 f876 	bl	8007f3c <USB_ReadInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5a:	f040 80b7 	bne.w	8002fcc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6c:	f023 0301 	bic.w	r3, r3, #1
 8002e70:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2110      	movs	r1, #16
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f004 f83d 	bl	8006ef8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e82:	e046      	b.n	8002f12 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e90:	461a      	mov	r2, r3
 8002e92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e96:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea8:	0151      	lsls	r1, r2, #5
 8002eaa:	69fa      	ldr	r2, [r7, #28]
 8002eac:	440a      	add	r2, r1
 8002eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002eb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002eb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002eca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002edc:	0151      	lsls	r1, r2, #5
 8002ede:	69fa      	ldr	r2, [r7, #28]
 8002ee0:	440a      	add	r2, r1
 8002ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ee6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002eea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efc:	0151      	lsls	r1, r2, #5
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	440a      	add	r2, r1
 8002f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f0a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	3301      	adds	r3, #1
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d3b3      	bcc.n	8002e84 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f2e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d016      	beq.n	8002f66 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f48:	f043 030b 	orr.w	r3, r3, #11
 8002f4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f5e:	f043 030b 	orr.w	r3, r3, #11
 8002f62:	6453      	str	r3, [r2, #68]	; 0x44
 8002f64:	e015      	b.n	8002f92 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f78:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f7c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8c:	f043 030b 	orr.w	r3, r3, #11
 8002f90:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002fa4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	f005 f884 	bl	80080c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 ffb3 	bl	8007f3c <USB_ReadInterrupts>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe0:	d124      	bne.n	800302c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f005 f849 	bl	800807e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fffe 	bl	8006ff2 <USB_GetDevSpeed>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681c      	ldr	r4, [r3, #0]
 8003002:	f001 f9e9 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 8003006:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800300c:	b2db      	uxtb	r3, r3
 800300e:	461a      	mov	r2, r3
 8003010:	4620      	mov	r0, r4
 8003012:	f003 fcfd 	bl	8006a10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f007 fb59 	bl	800a6ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800302a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f004 ff83 	bl	8007f3c <USB_ReadInterrupts>
 8003036:	4603      	mov	r3, r0
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b08      	cmp	r3, #8
 800303e:	d10a      	bne.n	8003056 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f007 fb36 	bl	800a6b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f002 0208 	and.w	r2, r2, #8
 8003054:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f004 ff6e 	bl	8007f3c <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b80      	cmp	r3, #128	; 0x80
 8003068:	d122      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003076:	2301      	movs	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	e014      	b.n	80030a6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d105      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4619      	mov	r1, r3
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fb27 	bl	80036ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	3301      	adds	r3, #1
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d3e5      	bcc.n	800307c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f004 ff41 	bl	8007f3c <USB_ReadInterrupts>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c4:	d13b      	bne.n	800313e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030c6:	2301      	movs	r3, #1
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	e02b      	b.n	8003124 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	3340      	adds	r3, #64	; 0x40
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d115      	bne.n	800311e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	da12      	bge.n	800311e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	333f      	adds	r3, #63	; 0x3f
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003114:	b2db      	uxtb	r3, r3
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 fae8 	bl	80036ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	3301      	adds	r3, #1
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312a:	429a      	cmp	r2, r3
 800312c:	d3ce      	bcc.n	80030cc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695a      	ldr	r2, [r3, #20]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800313c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f004 fefa 	bl	8007f3c <USB_ReadInterrupts>
 8003148:	4603      	mov	r3, r0
 800314a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003152:	d155      	bne.n	8003200 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003154:	2301      	movs	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
 8003158:	e045      	b.n	80031e6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d12e      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003182:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	da2b      	bge.n	80031e0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003194:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003198:	429a      	cmp	r2, r3
 800319a:	d121      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10a      	bne.n	80031e0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031dc:	6053      	str	r3, [r2, #4]
            break;
 80031de:	e007      	b.n	80031f0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	3301      	adds	r3, #1
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d3b4      	bcc.n	800315a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f004 fe99 	bl	8007f3c <USB_ReadInterrupts>
 800320a:	4603      	mov	r3, r0
 800320c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003214:	d10a      	bne.n	800322c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f007 fada 	bl	800a7d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695a      	ldr	r2, [r3, #20]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800322a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f004 fe83 	bl	8007f3c <USB_ReadInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b04      	cmp	r3, #4
 800323e:	d115      	bne.n	800326c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f007 faca 	bl	800a7ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	e000      	b.n	800326c <HAL_PCD_IRQHandler+0x938>
      return;
 800326a:	bf00      	nop
    }
  }
}
 800326c:	3734      	adds	r7, #52	; 0x34
 800326e:	46bd      	mov	sp, r7
 8003270:	bd90      	pop	{r4, r7, pc}

08003272 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_PCD_SetAddress+0x1a>
 8003288:	2302      	movs	r3, #2
 800328a:	e013      	b.n	80032b4 <HAL_PCD_SetAddress+0x42>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f004 fde1 	bl	8007e6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	70fb      	strb	r3, [r7, #3]
 80032ce:	460b      	mov	r3, r1
 80032d0:	803b      	strh	r3, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	da0f      	bge.n	8003302 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 020f 	and.w	r2, r3, #15
 80032e8:	4613      	mov	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	3338      	adds	r3, #56	; 0x38
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	3304      	adds	r3, #4
 80032f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	705a      	strb	r2, [r3, #1]
 8003300:	e00f      	b.n	8003322 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 020f 	and.w	r2, r3, #15
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	3304      	adds	r3, #4
 800331a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	b2da      	uxtb	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800332e:	883a      	ldrh	r2, [r7, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	78ba      	ldrb	r2, [r7, #2]
 8003338:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d004      	beq.n	800334c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800334c:	78bb      	ldrb	r3, [r7, #2]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d102      	bne.n	8003358 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_PCD_EP_Open+0xaa>
 8003362:	2302      	movs	r3, #2
 8003364:	e00e      	b.n	8003384 <HAL_PCD_EP_Open+0xc8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fe61 	bl	800703c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003382:	7afb      	ldrb	r3, [r7, #11]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339c:	2b00      	cmp	r3, #0
 800339e:	da0f      	bge.n	80033c0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	f003 020f 	and.w	r2, r3, #15
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	3338      	adds	r3, #56	; 0x38
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	3304      	adds	r3, #4
 80033b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	705a      	strb	r2, [r3, #1]
 80033be:	e00f      	b.n	80033e0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	f003 020f 	and.w	r2, r3, #15
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	3304      	adds	r3, #4
 80033d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_PCD_EP_Close+0x6e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e00e      	b.n	8003418 <HAL_PCD_EP_Close+0x8c>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	4618      	mov	r0, r3
 800340a:	f003 fe9f 	bl	800714c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	460b      	mov	r3, r1
 800342e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003430:	7afb      	ldrb	r3, [r7, #11]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	3304      	adds	r3, #4
 8003448:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	2200      	movs	r2, #0
 8003460:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003462:	7afb      	ldrb	r3, [r7, #11]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	b2da      	uxtb	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d102      	bne.n	800347c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800347c:	7afb      	ldrb	r3, [r7, #11]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	6979      	ldr	r1, [r7, #20]
 8003494:	f004 f97e 	bl	8007794 <USB_EP0StartXfer>
 8003498:	e008      	b.n	80034ac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	6979      	ldr	r1, [r7, #20]
 80034a8:	f003 ff2c 	bl	8007304 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034c2:	78fb      	ldrb	r3, [r7, #3]
 80034c4:	f003 020f 	and.w	r2, r3, #15
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80034d8:	681b      	ldr	r3, [r3, #0]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b086      	sub	sp, #24
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	460b      	mov	r3, r1
 80034f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f6:	7afb      	ldrb	r3, [r7, #11]
 80034f8:	f003 020f 	and.w	r2, r3, #15
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	3338      	adds	r3, #56	; 0x38
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	3304      	adds	r3, #4
 800350c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2200      	movs	r2, #0
 800351e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2201      	movs	r2, #1
 8003524:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003526:	7afb      	ldrb	r3, [r7, #11]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	b2da      	uxtb	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003540:	7afb      	ldrb	r3, [r7, #11]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	6979      	ldr	r1, [r7, #20]
 8003558:	f004 f91c 	bl	8007794 <USB_EP0StartXfer>
 800355c:	e008      	b.n	8003570 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	6979      	ldr	r1, [r7, #20]
 800356c:	f003 feca 	bl	8007304 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
 8003582:	460b      	mov	r3, r1
 8003584:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	f003 020f 	and.w	r2, r3, #15
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d901      	bls.n	8003598 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e050      	b.n	800363a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003598:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800359c:	2b00      	cmp	r3, #0
 800359e:	da0f      	bge.n	80035c0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	f003 020f 	and.w	r2, r3, #15
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	3338      	adds	r3, #56	; 0x38
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	4413      	add	r3, r2
 80035b4:	3304      	adds	r3, #4
 80035b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	705a      	strb	r2, [r3, #1]
 80035be:	e00d      	b.n	80035dc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	4613      	mov	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	3304      	adds	r3, #4
 80035d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_PCD_EP_SetStall+0x82>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e01e      	b.n	800363a <HAL_PCD_EP_SetStall+0xc0>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	4618      	mov	r0, r3
 800360c:	f004 fb5a 	bl	8007cc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10a      	bne.n	8003630 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	b2d9      	uxtb	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800362a:	461a      	mov	r2, r3
 800362c:	f004 fd4a 	bl	80080c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d901      	bls.n	8003660 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e042      	b.n	80036e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003664:	2b00      	cmp	r3, #0
 8003666:	da0f      	bge.n	8003688 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	f003 020f 	and.w	r2, r3, #15
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	3338      	adds	r3, #56	; 0x38
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	4413      	add	r3, r2
 800367c:	3304      	adds	r3, #4
 800367e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	705a      	strb	r2, [r3, #1]
 8003686:	e00f      	b.n	80036a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 020f 	and.w	r2, r3, #15
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	3304      	adds	r3, #4
 80036a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_PCD_EP_ClrStall+0x86>
 80036c4:	2302      	movs	r3, #2
 80036c6:	e00e      	b.n	80036e6 <HAL_PCD_EP_ClrStall+0xa4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68f9      	ldr	r1, [r7, #12]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f004 fb62 	bl	8007da0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	460b      	mov	r3, r1
 80036f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	da0c      	bge.n	800371c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	3338      	adds	r3, #56	; 0x38
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4413      	add	r3, r2
 8003716:	3304      	adds	r3, #4
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e00c      	b.n	8003736 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	f003 020f 	and.w	r2, r3, #15
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	3304      	adds	r3, #4
 8003734:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68f9      	ldr	r1, [r7, #12]
 800373c:	4618      	mov	r0, r3
 800373e:	f004 f981 	bl	8007a44 <USB_EPStopXfer>
 8003742:	4603      	mov	r3, r0
 8003744:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003746:	7afb      	ldrb	r3, [r7, #11]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	; 0x28
 8003754:	af02      	add	r7, sp, #8
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	3338      	adds	r3, #56	; 0x38
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	429a      	cmp	r2, r3
 8003782:	d901      	bls.n	8003788 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e06c      	b.n	8003862 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	699a      	ldr	r2, [r3, #24]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	69fa      	ldr	r2, [r7, #28]
 800379a:	429a      	cmp	r2, r3
 800379c:	d902      	bls.n	80037a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3303      	adds	r3, #3
 80037a8:	089b      	lsrs	r3, r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ac:	e02b      	b.n	8003806 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d902      	bls.n	80037ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3303      	adds	r3, #3
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6919      	ldr	r1, [r3, #16]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	4603      	mov	r3, r0
 80037e8:	6978      	ldr	r0, [r7, #20]
 80037ea:	f004 f9d5 	bl	8007b98 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	441a      	add	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1a      	ldr	r2, [r3, #32]
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	441a      	add	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	b29b      	uxth	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	429a      	cmp	r2, r3
 800381a:	d809      	bhi.n	8003830 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a1a      	ldr	r2, [r3, #32]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003824:	429a      	cmp	r2, r3
 8003826:	d203      	bcs.n	8003830 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1be      	bne.n	80037ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	429a      	cmp	r2, r3
 800383a:	d811      	bhi.n	8003860 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	2201      	movs	r2, #1
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	43db      	mvns	r3, r3
 8003856:	6939      	ldr	r1, [r7, #16]
 8003858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800385c:	4013      	ands	r3, r2
 800385e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	333c      	adds	r3, #60	; 0x3c
 8003884:	3304      	adds	r3, #4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d17b      	bne.n	800399a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d015      	beq.n	80038d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	4a61      	ldr	r2, [pc, #388]	; (8003a34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	f240 80b9 	bls.w	8003a28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80b3 	beq.w	8003a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ce:	461a      	mov	r2, r3
 80038d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d4:	6093      	str	r3, [r2, #8]
 80038d6:	e0a7      	b.n	8003a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d009      	beq.n	80038f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ee:	461a      	mov	r2, r3
 80038f0:	2320      	movs	r3, #32
 80038f2:	6093      	str	r3, [r2, #8]
 80038f4:	e098      	b.n	8003a28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 8093 	bne.w	8003a28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4a4b      	ldr	r2, [pc, #300]	; (8003a34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d90f      	bls.n	800392a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	4413      	add	r3, r2
 800391c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003920:	461a      	mov	r2, r3
 8003922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003926:	6093      	str	r3, [r2, #8]
 8003928:	e07e      	b.n	8003a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	3304      	adds	r3, #4
 800393e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	0159      	lsls	r1, r3, #5
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	440b      	add	r3, r1
 800394c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003956:	1ad2      	subs	r2, r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d114      	bne.n	800398c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003974:	461a      	mov	r2, r3
 8003976:	2101      	movs	r1, #1
 8003978:	f004 fba4 	bl	80080c4 <USB_EP0_OutStart>
 800397c:	e006      	b.n	800398c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	441a      	add	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4619      	mov	r1, r3
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f006 fe58 	bl	800a648 <HAL_PCD_DataOutStageCallback>
 8003998:	e046      	b.n	8003a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	4a26      	ldr	r2, [pc, #152]	; (8003a38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d124      	bne.n	80039ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	015a      	lsls	r2, r3, #5
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	4413      	add	r3, r2
 80039b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b8:	461a      	mov	r2, r3
 80039ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039be:	6093      	str	r3, [r2, #8]
 80039c0:	e032      	b.n	8003a28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d8:	461a      	mov	r2, r3
 80039da:	2320      	movs	r3, #32
 80039dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	4619      	mov	r1, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f006 fe2f 	bl	800a648 <HAL_PCD_DataOutStageCallback>
 80039ea:	e01d      	b.n	8003a28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d114      	bne.n	8003a1c <PCD_EP_OutXfrComplete_int+0x1b0>
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4413      	add	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d108      	bne.n	8003a1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a14:	461a      	mov	r2, r3
 8003a16:	2100      	movs	r1, #0
 8003a18:	f004 fb54 	bl	80080c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f006 fe10 	bl	800a648 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	4f54300a 	.word	0x4f54300a
 8003a38:	4f54310a 	.word	0x4f54310a

08003a3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	333c      	adds	r3, #60	; 0x3c
 8003a54:	3304      	adds	r3, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d90e      	bls.n	8003a90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d009      	beq.n	8003a90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	461a      	mov	r2, r3
 8003a8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f006 fdc7 	bl	800a624 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d90c      	bls.n	8003ab8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d108      	bne.n	8003ab8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	f004 fb06 	bl	80080c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	4f54300a 	.word	0x4f54300a

08003ac8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d107      	bne.n	8003af6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ae6:	883b      	ldrh	r3, [r7, #0]
 8003ae8:	0419      	lsls	r1, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	629a      	str	r2, [r3, #40]	; 0x28
 8003af4:	e028      	b.n	8003b48 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e00d      	b.n	8003b26 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	3340      	adds	r3, #64	; 0x40
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	3301      	adds	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d3ec      	bcc.n	8003b0a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b30:	883b      	ldrh	r3, [r7, #0]
 8003b32:	0418      	lsls	r0, r3, #16
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	4302      	orrs	r2, r0
 8003b40:	3340      	adds	r3, #64	; 0x40
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
 8003b5e:	460b      	mov	r3, r1
 8003b60:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	887a      	ldrh	r2, [r7, #2]
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e267      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d075      	beq.n	8003c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b85      	ldr	r3, [pc, #532]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d112      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4b82      	ldr	r3, [pc, #520]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05b      	beq.n	8003c98 <HAL_RCC_OscConfig+0x108>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d157      	bne.n	8003c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e242      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d106      	bne.n	8003c04 <HAL_RCC_OscConfig+0x74>
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e01d      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x98>
 8003c0e:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6f      	ldr	r2, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6c      	ldr	r2, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a68      	ldr	r2, [pc, #416]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fd fe4a 	bl	80018e0 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fd fe46 	bl	80018e0 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e207      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0xc0>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fd fe36 	bl	80018e0 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fd fe32 	bl	80018e0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1f3      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0xe8>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d063      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d11c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b44      	ldr	r3, [pc, #272]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e1c7      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4937      	ldr	r1, [pc, #220]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	e03a      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fd fdeb 	bl	80018e0 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fd fde7 	bl	80018e0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e1a8      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
 8003d40:	e015      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd fdca 	bl	80018e0 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fd fdc6 	bl	80018e0 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e187      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d036      	beq.n	8003de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d016      	beq.n	8003db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fd fdaa 	bl	80018e0 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fd fda6 	bl	80018e0 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e167      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x200>
 8003dae:	e01b      	b.n	8003de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db6:	f7fd fd93 	bl	80018e0 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	e00e      	b.n	8003ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fd fd8f 	bl	80018e0 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d907      	bls.n	8003ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e150      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	42470000 	.word	0x42470000
 8003dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ea      	bne.n	8003dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8097 	beq.w	8003f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	4b7d      	ldr	r3, [pc, #500]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a7c      	ldr	r2, [pc, #496]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b7a      	ldr	r3, [pc, #488]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b77      	ldr	r3, [pc, #476]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d118      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e32:	4b74      	ldr	r3, [pc, #464]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a73      	ldr	r2, [pc, #460]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7fd fd4f 	bl	80018e0 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fd fd4b 	bl	80018e0 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e10c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x2ea>
 8003e6c:	4b64      	ldr	r3, [pc, #400]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a63      	ldr	r2, [pc, #396]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x30c>
 8003e82:	4b5f      	ldr	r3, [pc, #380]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a5e      	ldr	r2, [pc, #376]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a5b      	ldr	r2, [pc, #364]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	4b55      	ldr	r3, [pc, #340]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a54      	ldr	r2, [pc, #336]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 0304 	bic.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d015      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fd fd10 	bl	80018e0 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fd fd0c 	bl	80018e0 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0cb      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ee      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x334>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7fd fcfa 	bl	80018e0 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fd fcf6 	bl	80018e0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0b5      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f06:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ee      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f18:	4b39      	ldr	r3, [pc, #228]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	4a38      	ldr	r2, [pc, #224]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80a1 	beq.w	8004070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d05c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d141      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f42:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd fcca 	bl	80018e0 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd fcc6 	bl	80018e0 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e087      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	3b01      	subs	r3, #1
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	491b      	ldr	r1, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fd fc9f 	bl	80018e0 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fd fc9b 	bl	80018e0 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e05c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x416>
 8003fc4:	e054      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fd fc88 	bl	80018e0 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fd fc84 	bl	80018e0 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e045      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x444>
 8003ff2:	e03d      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e038      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	40007000 	.word	0x40007000
 8004008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x4ec>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d028      	beq.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d121      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d11a      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0cc      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90c      	bls.n	80040bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b65      	ldr	r3, [pc, #404]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b8      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	494d      	ldr	r1, [pc, #308]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d044      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d119      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413e:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e067      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415e:	4b37      	ldr	r3, [pc, #220]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0203 	bic.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4934      	ldr	r1, [pc, #208]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004170:	f7fd fbb6 	bl	80018e0 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	e00a      	b.n	800418e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fd fbb2 	bl	80018e0 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 020c 	and.w	r2, r3, #12
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	429a      	cmp	r2, r3
 800419e:	d1eb      	bne.n	8004178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d20c      	bcs.n	80041c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e032      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4916      	ldr	r1, [pc, #88]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004206:	f000 f821 	bl	800424c <HAL_RCC_GetSysClockFreq>
 800420a:	4602      	mov	r2, r0
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	490a      	ldr	r1, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	5ccb      	ldrb	r3, [r1, r3]
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fd fb16 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023c00 	.word	0x40023c00
 800423c:	40023800 	.word	0x40023800
 8004240:	0800b540 	.word	0x0800b540
 8004244:	20000008 	.word	0x20000008
 8004248:	2000000c 	.word	0x2000000c

0800424c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800424c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004250:	b090      	sub	sp, #64	; 0x40
 8004252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
 8004258:	2300      	movs	r3, #0
 800425a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800425c:	2300      	movs	r3, #0
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004264:	4b59      	ldr	r3, [pc, #356]	; (80043cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d00d      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x40>
 8004270:	2b08      	cmp	r3, #8
 8004272:	f200 80a1 	bhi.w	80043b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x34>
 800427a:	2b04      	cmp	r3, #4
 800427c:	d003      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0x3a>
 800427e:	e09b      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004282:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004284:	e09b      	b.n	80043be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004286:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004288:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800428a:	e098      	b.n	80043be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800428c:	4b4f      	ldr	r3, [pc, #316]	; (80043cc <HAL_RCC_GetSysClockFreq+0x180>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004296:	4b4d      	ldr	r3, [pc, #308]	; (80043cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d028      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a2:	4b4a      	ldr	r3, [pc, #296]	; (80043cc <HAL_RCC_GetSysClockFreq+0x180>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	2200      	movs	r2, #0
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	627a      	str	r2, [r7, #36]	; 0x24
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042b4:	2100      	movs	r1, #0
 80042b6:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80042b8:	fb03 f201 	mul.w	r2, r3, r1
 80042bc:	2300      	movs	r3, #0
 80042be:	fb00 f303 	mul.w	r3, r0, r3
 80042c2:	4413      	add	r3, r2
 80042c4:	4a43      	ldr	r2, [pc, #268]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80042c6:	fba0 1202 	umull	r1, r2, r0, r2
 80042ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042cc:	460a      	mov	r2, r1
 80042ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80042d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d2:	4413      	add	r3, r2
 80042d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d8:	2200      	movs	r2, #0
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	61fa      	str	r2, [r7, #28]
 80042de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042e6:	f7fb ff6f 	bl	80001c8 <__aeabi_uldivmod>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4613      	mov	r3, r2
 80042f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f2:	e053      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f4:	4b35      	ldr	r3, [pc, #212]	; (80043cc <HAL_RCC_GetSysClockFreq+0x180>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	099b      	lsrs	r3, r3, #6
 80042fa:	2200      	movs	r2, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	617a      	str	r2, [r7, #20]
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004306:	f04f 0b00 	mov.w	fp, #0
 800430a:	4652      	mov	r2, sl
 800430c:	465b      	mov	r3, fp
 800430e:	f04f 0000 	mov.w	r0, #0
 8004312:	f04f 0100 	mov.w	r1, #0
 8004316:	0159      	lsls	r1, r3, #5
 8004318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800431c:	0150      	lsls	r0, r2, #5
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	ebb2 080a 	subs.w	r8, r2, sl
 8004326:	eb63 090b 	sbc.w	r9, r3, fp
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004336:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800433a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800433e:	ebb2 0408 	subs.w	r4, r2, r8
 8004342:	eb63 0509 	sbc.w	r5, r3, r9
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	00eb      	lsls	r3, r5, #3
 8004350:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004354:	00e2      	lsls	r2, r4, #3
 8004356:	4614      	mov	r4, r2
 8004358:	461d      	mov	r5, r3
 800435a:	eb14 030a 	adds.w	r3, r4, sl
 800435e:	603b      	str	r3, [r7, #0]
 8004360:	eb45 030b 	adc.w	r3, r5, fp
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004372:	4629      	mov	r1, r5
 8004374:	028b      	lsls	r3, r1, #10
 8004376:	4621      	mov	r1, r4
 8004378:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800437c:	4621      	mov	r1, r4
 800437e:	028a      	lsls	r2, r1, #10
 8004380:	4610      	mov	r0, r2
 8004382:	4619      	mov	r1, r3
 8004384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004386:	2200      	movs	r2, #0
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	60fa      	str	r2, [r7, #12]
 800438c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004390:	f7fb ff1a 	bl	80001c8 <__aeabi_uldivmod>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4613      	mov	r3, r2
 800439a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <HAL_RCC_GetSysClockFreq+0x180>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	0c1b      	lsrs	r3, r3, #16
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	3301      	adds	r3, #1
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043b6:	e002      	b.n	80043be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80043ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3740      	adds	r7, #64	; 0x40
 80043c4:	46bd      	mov	sp, r7
 80043c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ca:	bf00      	nop
 80043cc:	40023800 	.word	0x40023800
 80043d0:	00f42400 	.word	0x00f42400
 80043d4:	016e3600 	.word	0x016e3600

080043d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043dc:	4b03      	ldr	r3, [pc, #12]	; (80043ec <HAL_RCC_GetHCLKFreq+0x14>)
 80043de:	681b      	ldr	r3, [r3, #0]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	20000008 	.word	0x20000008

080043f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043f4:	f7ff fff0 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 80043f8:	4602      	mov	r2, r0
 80043fa:	4b05      	ldr	r3, [pc, #20]	; (8004410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	0a9b      	lsrs	r3, r3, #10
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	4903      	ldr	r1, [pc, #12]	; (8004414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004406:	5ccb      	ldrb	r3, [r1, r3]
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40023800 	.word	0x40023800
 8004414:	0800b550 	.word	0x0800b550

08004418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800441c:	f7ff ffdc 	bl	80043d8 <HAL_RCC_GetHCLKFreq>
 8004420:	4602      	mov	r2, r0
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0b5b      	lsrs	r3, r3, #13
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4903      	ldr	r1, [pc, #12]	; (800443c <HAL_RCC_GetPCLK2Freq+0x24>)
 800442e:	5ccb      	ldrb	r3, [r1, r3]
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40023800 	.word	0x40023800
 800443c:	0800b550 	.word	0x0800b550

08004440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e07b      	b.n	800454a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	2b00      	cmp	r3, #0
 8004458:	d108      	bne.n	800446c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004462:	d009      	beq.n	8004478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	61da      	str	r2, [r3, #28]
 800446a:	e005      	b.n	8004478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc ffb0 	bl	80013f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fc:	ea42 0103 	orr.w	r1, r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	f003 0104 	and.w	r1, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	f003 0210 	and.w	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004538:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b088      	sub	sp, #32
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_SPI_Transmit+0x22>
 8004570:	2302      	movs	r3, #2
 8004572:	e126      	b.n	80047c2 <HAL_SPI_Transmit+0x270>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800457c:	f7fd f9b0 	bl	80018e0 <HAL_GetTick>
 8004580:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d002      	beq.n	8004598 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004592:	2302      	movs	r3, #2
 8004594:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004596:	e10b      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_SPI_Transmit+0x52>
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045a8:	e102      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2203      	movs	r2, #3
 80045ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	88fa      	ldrh	r2, [r7, #6]
 80045c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	88fa      	ldrh	r2, [r7, #6]
 80045c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f0:	d10f      	bne.n	8004612 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d007      	beq.n	8004630 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004638:	d14b      	bne.n	80046d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Transmit+0xf6>
 8004642:	8afb      	ldrh	r3, [r7, #22]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d13e      	bne.n	80046c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	881a      	ldrh	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	1c9a      	adds	r2, r3, #2
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800466c:	e02b      	b.n	80046c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d112      	bne.n	80046a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	881a      	ldrh	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	1c9a      	adds	r2, r3, #2
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	86da      	strh	r2, [r3, #54]	; 0x36
 80046a0:	e011      	b.n	80046c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a2:	f7fd f91d 	bl	80018e0 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d803      	bhi.n	80046ba <HAL_SPI_Transmit+0x168>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d102      	bne.n	80046c0 <HAL_SPI_Transmit+0x16e>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046c4:	e074      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ce      	bne.n	800466e <HAL_SPI_Transmit+0x11c>
 80046d0:	e04c      	b.n	800476c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_SPI_Transmit+0x18e>
 80046da:	8afb      	ldrh	r3, [r7, #22]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d140      	bne.n	8004762 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	7812      	ldrb	r2, [r2, #0]
 80046ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004706:	e02c      	b.n	8004762 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d113      	bne.n	800473e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	86da      	strh	r2, [r3, #54]	; 0x36
 800473c:	e011      	b.n	8004762 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800473e:	f7fd f8cf 	bl	80018e0 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d803      	bhi.n	8004756 <HAL_SPI_Transmit+0x204>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d102      	bne.n	800475c <HAL_SPI_Transmit+0x20a>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004760:	e026      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1cd      	bne.n	8004708 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fbd9 	bl	8004f28 <SPI_EndRxTxTransaction>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e000      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b088      	sub	sp, #32
 80047ce:	af02      	add	r7, sp, #8
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e6:	d112      	bne.n	800480e <HAL_SPI_Receive+0x44>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10e      	bne.n	800480e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2204      	movs	r2, #4
 80047f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047f8:	88fa      	ldrh	r2, [r7, #6]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f8f1 	bl	80049ec <HAL_SPI_TransmitReceive>
 800480a:	4603      	mov	r3, r0
 800480c:	e0ea      	b.n	80049e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_SPI_Receive+0x52>
 8004818:	2302      	movs	r3, #2
 800481a:	e0e3      	b.n	80049e4 <HAL_SPI_Receive+0x21a>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004824:	f7fd f85c 	bl	80018e0 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d002      	beq.n	800483c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004836:	2302      	movs	r3, #2
 8004838:	75fb      	strb	r3, [r7, #23]
    goto error;
 800483a:	e0ca      	b.n	80049d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_SPI_Receive+0x7e>
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d102      	bne.n	800484e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800484c:	e0c1      	b.n	80049d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2204      	movs	r2, #4
 8004852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	88fa      	ldrh	r2, [r7, #6]
 8004866:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004894:	d10f      	bne.n	80048b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d007      	beq.n	80048d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d162      	bne.n	80049a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048dc:	e02e      	b.n	800493c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d115      	bne.n	8004918 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f103 020c 	add.w	r2, r3, #12
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	7812      	ldrb	r2, [r2, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004916:	e011      	b.n	800493c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004918:	f7fc ffe2 	bl	80018e0 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d803      	bhi.n	8004930 <HAL_SPI_Receive+0x166>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Receive+0x16c>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	75fb      	strb	r3, [r7, #23]
          goto error;
 800493a:	e04a      	b.n	80049d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1cb      	bne.n	80048de <HAL_SPI_Receive+0x114>
 8004946:	e031      	b.n	80049ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b01      	cmp	r3, #1
 8004954:	d113      	bne.n	800497e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	b292      	uxth	r2, r2
 8004962:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	1c9a      	adds	r2, r3, #2
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800497c:	e011      	b.n	80049a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800497e:	f7fc ffaf 	bl	80018e0 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d803      	bhi.n	8004996 <HAL_SPI_Receive+0x1cc>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004994:	d102      	bne.n	800499c <HAL_SPI_Receive+0x1d2>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80049a0:	e017      	b.n	80049d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1cd      	bne.n	8004948 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	6839      	ldr	r1, [r7, #0]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fa53 	bl	8004e5c <SPI_EndRxTransaction>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	75fb      	strb	r3, [r7, #23]
 80049ce:	e000      	b.n	80049d2 <HAL_SPI_Receive+0x208>
  }

error :
 80049d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08c      	sub	sp, #48	; 0x30
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049fa:	2301      	movs	r3, #1
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_SPI_TransmitReceive+0x26>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e18a      	b.n	8004d28 <HAL_SPI_TransmitReceive+0x33c>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a1a:	f7fc ff61 	bl	80018e0 <HAL_GetTick>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a30:	887b      	ldrh	r3, [r7, #2]
 8004a32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d00f      	beq.n	8004a5c <HAL_SPI_TransmitReceive+0x70>
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d107      	bne.n	8004a54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d103      	bne.n	8004a54 <HAL_SPI_TransmitReceive+0x68>
 8004a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d003      	beq.n	8004a5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a5a:	e15b      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_SPI_TransmitReceive+0x82>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <HAL_SPI_TransmitReceive+0x82>
 8004a68:	887b      	ldrh	r3, [r7, #2]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d103      	bne.n	8004a76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a74:	e14e      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d003      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2205      	movs	r2, #5
 8004a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	887a      	ldrh	r2, [r7, #2]
 8004a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	887a      	ldrh	r2, [r7, #2]
 8004aa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	887a      	ldrh	r2, [r7, #2]
 8004aac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aca:	2b40      	cmp	r3, #64	; 0x40
 8004acc:	d007      	beq.n	8004ade <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004adc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae6:	d178      	bne.n	8004bda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d002      	beq.n	8004af6 <HAL_SPI_TransmitReceive+0x10a>
 8004af0:	8b7b      	ldrh	r3, [r7, #26]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d166      	bne.n	8004bc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	881a      	ldrh	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	1c9a      	adds	r2, r3, #2
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b1a:	e053      	b.n	8004bc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d11b      	bne.n	8004b62 <HAL_SPI_TransmitReceive+0x176>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d016      	beq.n	8004b62 <HAL_SPI_TransmitReceive+0x176>
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d113      	bne.n	8004b62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	881a      	ldrh	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	1c9a      	adds	r2, r3, #2
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d119      	bne.n	8004ba4 <HAL_SPI_TransmitReceive+0x1b8>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d014      	beq.n	8004ba4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	b292      	uxth	r2, r2
 8004b86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8c:	1c9a      	adds	r2, r3, #2
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ba4:	f7fc fe9c 	bl	80018e0 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d807      	bhi.n	8004bc4 <HAL_SPI_TransmitReceive+0x1d8>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d003      	beq.n	8004bc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004bc2:	e0a7      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1a6      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x130>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1a1      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x130>
 8004bd8:	e07c      	b.n	8004cd4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_SPI_TransmitReceive+0x1fc>
 8004be2:	8b7b      	ldrh	r3, [r7, #26]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d16b      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	330c      	adds	r3, #12
 8004bf2:	7812      	ldrb	r2, [r2, #0]
 8004bf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c0e:	e057      	b.n	8004cc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d11c      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x26c>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d017      	beq.n	8004c58 <HAL_SPI_TransmitReceive+0x26c>
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d114      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d119      	bne.n	8004c9a <HAL_SPI_TransmitReceive+0x2ae>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d014      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68da      	ldr	r2, [r3, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c96:	2301      	movs	r3, #1
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c9a:	f7fc fe21 	bl	80018e0 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d803      	bhi.n	8004cb2 <HAL_SPI_TransmitReceive+0x2c6>
 8004caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d102      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x2cc>
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d103      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004cbe:	e029      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1a2      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x224>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d19d      	bne.n	8004c10 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f925 	bl	8004f28 <SPI_EndRxTxTransaction>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d006      	beq.n	8004cf2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004cf0:	e010      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	617b      	str	r3, [r7, #20]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	e000      	b.n	8004d14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004d12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3730      	adds	r7, #48	; 0x30
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3e:	b2db      	uxtb	r3, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	603b      	str	r3, [r7, #0]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d5c:	f7fc fdc0 	bl	80018e0 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	1a9b      	subs	r3, r3, r2
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4413      	add	r3, r2
 8004d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d6c:	f7fc fdb8 	bl	80018e0 <HAL_GetTick>
 8004d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d72:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	015b      	lsls	r3, r3, #5
 8004d78:	0d1b      	lsrs	r3, r3, #20
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	fb02 f303 	mul.w	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d82:	e054      	b.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d050      	beq.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d8c:	f7fc fda8 	bl	80018e0 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d902      	bls.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d13d      	bne.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dba:	d111      	bne.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc4:	d004      	beq.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d107      	bne.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de8:	d10f      	bne.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e017      	b.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4013      	ands	r3, r2
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	bf0c      	ite	eq
 8004e3e:	2301      	moveq	r3, #1
 8004e40:	2300      	movne	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	461a      	mov	r2, r3
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d19b      	bne.n	8004d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3720      	adds	r7, #32
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000008 	.word	0x20000008

08004e5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e70:	d111      	bne.n	8004e96 <SPI_EndRxTransaction+0x3a>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e7a:	d004      	beq.n	8004e86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e84:	d107      	bne.n	8004e96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e9e:	d12a      	bne.n	8004ef6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea8:	d012      	beq.n	8004ed0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2180      	movs	r1, #128	; 0x80
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff ff49 	bl	8004d4c <SPI_WaitFlagStateUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d02d      	beq.n	8004f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec4:	f043 0220 	orr.w	r2, r3, #32
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e026      	b.n	8004f1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2101      	movs	r1, #1
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff ff36 	bl	8004d4c <SPI_WaitFlagStateUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01a      	beq.n	8004f1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	f043 0220 	orr.w	r2, r3, #32
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e013      	b.n	8004f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	2101      	movs	r1, #1
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f7ff ff23 	bl	8004d4c <SPI_WaitFlagStateUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e000      	b.n	8004f1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f34:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <SPI_EndRxTxTransaction+0x7c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <SPI_EndRxTxTransaction+0x80>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	0d5b      	lsrs	r3, r3, #21
 8004f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f44:	fb02 f303 	mul.w	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f52:	d112      	bne.n	8004f7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2180      	movs	r1, #128	; 0x80
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7ff fef4 	bl	8004d4c <SPI_WaitFlagStateUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d016      	beq.n	8004f98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f6e:	f043 0220 	orr.w	r2, r3, #32
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e00f      	b.n	8004f9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f90:	2b80      	cmp	r3, #128	; 0x80
 8004f92:	d0f2      	beq.n	8004f7a <SPI_EndRxTxTransaction+0x52>
 8004f94:	e000      	b.n	8004f98 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f96:	bf00      	nop
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000008 	.word	0x20000008
 8004fa8:	165e9f81 	.word	0x165e9f81

08004fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e041      	b.n	8005042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc fa58 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f000 fa2e 	bl	800544c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b082      	sub	sp, #8
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b02      	cmp	r3, #2
 800505e:	d122      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b02      	cmp	r3, #2
 800506c:	d11b      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f06f 0202 	mvn.w	r2, #2
 8005076:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f9bf 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 8005092:	e005      	b.n	80050a0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f9b1 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f9c2 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d122      	bne.n	80050fa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d11b      	bne.n	80050fa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0204 	mvn.w	r2, #4
 80050ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f995 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 80050e6:	e005      	b.n	80050f4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f987 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f998 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b08      	cmp	r3, #8
 8005106:	d122      	bne.n	800514e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b08      	cmp	r3, #8
 8005114:	d11b      	bne.n	800514e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0208 	mvn.w	r2, #8
 800511e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2204      	movs	r2, #4
 8005124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f96b 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 800513a:	e005      	b.n	8005148 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f95d 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f96e 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b10      	cmp	r3, #16
 800515a:	d122      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f003 0310 	and.w	r3, r3, #16
 8005166:	2b10      	cmp	r3, #16
 8005168:	d11b      	bne.n	80051a2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f06f 0210 	mvn.w	r2, #16
 8005172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2208      	movs	r2, #8
 8005178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f941 	bl	8005410 <HAL_TIM_IC_CaptureCallback>
 800518e:	e005      	b.n	800519c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f933 	bl	80053fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f944 	bl	8005424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10e      	bne.n	80051ce <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d107      	bne.n	80051ce <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0201 	mvn.w	r2, #1
 80051c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f90d 	bl	80053e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d10e      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b80      	cmp	r3, #128	; 0x80
 80051e8:	d107      	bne.n	80051fa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 fae9 	bl	80057cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	d10e      	bne.n	8005226 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b40      	cmp	r3, #64	; 0x40
 8005214:	d107      	bne.n	8005226 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f909 	bl	8005438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b20      	cmp	r3, #32
 8005232:	d10e      	bne.n	8005252 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b20      	cmp	r3, #32
 8005240:	d107      	bne.n	8005252 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f06f 0220 	mvn.w	r2, #32
 800524a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 fab3 	bl	80057b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_TIM_ConfigClockSource+0x1c>
 8005272:	2302      	movs	r3, #2
 8005274:	e0b4      	b.n	80053e0 <HAL_TIM_ConfigClockSource+0x186>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005294:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800529c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ae:	d03e      	beq.n	800532e <HAL_TIM_ConfigClockSource+0xd4>
 80052b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b4:	f200 8087 	bhi.w	80053c6 <HAL_TIM_ConfigClockSource+0x16c>
 80052b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052bc:	f000 8086 	beq.w	80053cc <HAL_TIM_ConfigClockSource+0x172>
 80052c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c4:	d87f      	bhi.n	80053c6 <HAL_TIM_ConfigClockSource+0x16c>
 80052c6:	2b70      	cmp	r3, #112	; 0x70
 80052c8:	d01a      	beq.n	8005300 <HAL_TIM_ConfigClockSource+0xa6>
 80052ca:	2b70      	cmp	r3, #112	; 0x70
 80052cc:	d87b      	bhi.n	80053c6 <HAL_TIM_ConfigClockSource+0x16c>
 80052ce:	2b60      	cmp	r3, #96	; 0x60
 80052d0:	d050      	beq.n	8005374 <HAL_TIM_ConfigClockSource+0x11a>
 80052d2:	2b60      	cmp	r3, #96	; 0x60
 80052d4:	d877      	bhi.n	80053c6 <HAL_TIM_ConfigClockSource+0x16c>
 80052d6:	2b50      	cmp	r3, #80	; 0x50
 80052d8:	d03c      	beq.n	8005354 <HAL_TIM_ConfigClockSource+0xfa>
 80052da:	2b50      	cmp	r3, #80	; 0x50
 80052dc:	d873      	bhi.n	80053c6 <HAL_TIM_ConfigClockSource+0x16c>
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d058      	beq.n	8005394 <HAL_TIM_ConfigClockSource+0x13a>
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d86f      	bhi.n	80053c6 <HAL_TIM_ConfigClockSource+0x16c>
 80052e6:	2b30      	cmp	r3, #48	; 0x30
 80052e8:	d064      	beq.n	80053b4 <HAL_TIM_ConfigClockSource+0x15a>
 80052ea:	2b30      	cmp	r3, #48	; 0x30
 80052ec:	d86b      	bhi.n	80053c6 <HAL_TIM_ConfigClockSource+0x16c>
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d060      	beq.n	80053b4 <HAL_TIM_ConfigClockSource+0x15a>
 80052f2:	2b20      	cmp	r3, #32
 80052f4:	d867      	bhi.n	80053c6 <HAL_TIM_ConfigClockSource+0x16c>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d05c      	beq.n	80053b4 <HAL_TIM_ConfigClockSource+0x15a>
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d05a      	beq.n	80053b4 <HAL_TIM_ConfigClockSource+0x15a>
 80052fe:	e062      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	6899      	ldr	r1, [r3, #8]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f000 f9b6 	bl	8005680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005322:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	609a      	str	r2, [r3, #8]
      break;
 800532c:	e04f      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6899      	ldr	r1, [r3, #8]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f000 f99f 	bl	8005680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005350:	609a      	str	r2, [r3, #8]
      break;
 8005352:	e03c      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6859      	ldr	r1, [r3, #4]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	461a      	mov	r2, r3
 8005362:	f000 f913 	bl	800558c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2150      	movs	r1, #80	; 0x50
 800536c:	4618      	mov	r0, r3
 800536e:	f000 f96c 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 8005372:	e02c      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6859      	ldr	r1, [r3, #4]
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	461a      	mov	r2, r3
 8005382:	f000 f932 	bl	80055ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2160      	movs	r1, #96	; 0x60
 800538c:	4618      	mov	r0, r3
 800538e:	f000 f95c 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 8005392:	e01c      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6818      	ldr	r0, [r3, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6859      	ldr	r1, [r3, #4]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	461a      	mov	r2, r3
 80053a2:	f000 f8f3 	bl	800558c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2140      	movs	r1, #64	; 0x40
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 f94c 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 80053b2:	e00c      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f000 f943 	bl	800564a <TIM_ITRx_SetConfig>
      break;
 80053c4:	e003      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	73fb      	strb	r3, [r7, #15]
      break;
 80053ca:	e000      	b.n	80053ce <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053de:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a40      	ldr	r2, [pc, #256]	; (8005560 <TIM_Base_SetConfig+0x114>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546a:	d00f      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3d      	ldr	r2, [pc, #244]	; (8005564 <TIM_Base_SetConfig+0x118>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00b      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3c      	ldr	r2, [pc, #240]	; (8005568 <TIM_Base_SetConfig+0x11c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3b      	ldr	r2, [pc, #236]	; (800556c <TIM_Base_SetConfig+0x120>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_Base_SetConfig+0x40>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a3a      	ldr	r2, [pc, #232]	; (8005570 <TIM_Base_SetConfig+0x124>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d108      	bne.n	800549e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a2f      	ldr	r2, [pc, #188]	; (8005560 <TIM_Base_SetConfig+0x114>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d02b      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ac:	d027      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2c      	ldr	r2, [pc, #176]	; (8005564 <TIM_Base_SetConfig+0x118>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d023      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <TIM_Base_SetConfig+0x11c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01f      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2a      	ldr	r2, [pc, #168]	; (800556c <TIM_Base_SetConfig+0x120>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d01b      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a29      	ldr	r2, [pc, #164]	; (8005570 <TIM_Base_SetConfig+0x124>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d017      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a28      	ldr	r2, [pc, #160]	; (8005574 <TIM_Base_SetConfig+0x128>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d013      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a27      	ldr	r2, [pc, #156]	; (8005578 <TIM_Base_SetConfig+0x12c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00f      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a26      	ldr	r2, [pc, #152]	; (800557c <TIM_Base_SetConfig+0x130>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00b      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a25      	ldr	r2, [pc, #148]	; (8005580 <TIM_Base_SetConfig+0x134>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d007      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a24      	ldr	r2, [pc, #144]	; (8005584 <TIM_Base_SetConfig+0x138>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d003      	beq.n	80054fe <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a23      	ldr	r2, [pc, #140]	; (8005588 <TIM_Base_SetConfig+0x13c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d108      	bne.n	8005510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <TIM_Base_SetConfig+0x114>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_Base_SetConfig+0xf8>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a0c      	ldr	r2, [pc, #48]	; (8005570 <TIM_Base_SetConfig+0x124>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d103      	bne.n	800554c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	615a      	str	r2, [r3, #20]
}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40010400 	.word	0x40010400
 8005574:	40014000 	.word	0x40014000
 8005578:	40014400 	.word	0x40014400
 800557c:	40014800 	.word	0x40014800
 8005580:	40001800 	.word	0x40001800
 8005584:	40001c00 	.word	0x40001c00
 8005588:	40002000 	.word	0x40002000

0800558c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f023 0201 	bic.w	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f023 030a 	bic.w	r3, r3, #10
 80055c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b087      	sub	sp, #28
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	60f8      	str	r0, [r7, #12]
 80055f2:	60b9      	str	r1, [r7, #8]
 80055f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0210 	bic.w	r2, r3, #16
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	031b      	lsls	r3, r3, #12
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005626:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4313      	orrs	r3, r2
 8005630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	f043 0307 	orr.w	r3, r3, #7
 800566c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	609a      	str	r2, [r3, #8]
}
 8005674:	bf00      	nop
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800569a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	021a      	lsls	r2, r3, #8
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	609a      	str	r2, [r3, #8]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
 80056c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e05a      	b.n	800578e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a21      	ldr	r2, [pc, #132]	; (800579c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d022      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d01d      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d018      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1a      	ldr	r2, [pc, #104]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a18      	ldr	r2, [pc, #96]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a17      	ldr	r2, [pc, #92]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d10c      	bne.n	800577c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4313      	orrs	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	40010000 	.word	0x40010000
 80057a0:	40000400 	.word	0x40000400
 80057a4:	40000800 	.word	0x40000800
 80057a8:	40000c00 	.word	0x40000c00
 80057ac:	40010400 	.word	0x40010400
 80057b0:	40014000 	.word	0x40014000
 80057b4:	40001800 	.word	0x40001800

080057b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e03f      	b.n	8005872 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fb fe64 	bl	80014d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2224      	movs	r2, #36	; 0x24
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005822:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fe1d 	bl	8006464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005838:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005848:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005858:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b08a      	sub	sp, #40	; 0x28
 800587e:	af02      	add	r7, sp, #8
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	603b      	str	r3, [r7, #0]
 8005886:	4613      	mov	r3, r2
 8005888:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b20      	cmp	r3, #32
 8005898:	d17c      	bne.n	8005994 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_UART_Transmit+0x2c>
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e075      	b.n	8005996 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_UART_Transmit+0x3e>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e06e      	b.n	8005996 <HAL_UART_Transmit+0x11c>
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2221      	movs	r2, #33	; 0x21
 80058ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ce:	f7fc f807 	bl	80018e0 <HAL_GetTick>
 80058d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	88fa      	ldrh	r2, [r7, #6]
 80058de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e8:	d108      	bne.n	80058fc <HAL_UART_Transmit+0x82>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d104      	bne.n	80058fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e003      	b.n	8005904 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005900:	2300      	movs	r3, #0
 8005902:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800590c:	e02a      	b.n	8005964 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	2180      	movs	r1, #128	; 0x80
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 fb9b 	bl	8006054 <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e036      	b.n	8005996 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10b      	bne.n	8005946 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800593c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	3302      	adds	r3, #2
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	e007      	b.n	8005956 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	781a      	ldrb	r2, [r3, #0]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	3301      	adds	r3, #1
 8005954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1cf      	bne.n	800590e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	2140      	movs	r1, #64	; 0x40
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 fb6b 	bl	8006054 <UART_WaitOnFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e006      	b.n	8005996 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b08a      	sub	sp, #40	; 0x28
 80059a2:	af02      	add	r7, sp, #8
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b20      	cmp	r3, #32
 80059bc:	f040 808c 	bne.w	8005ad8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <HAL_UART_Receive+0x2e>
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e084      	b.n	8005ada <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_UART_Receive+0x40>
 80059da:	2302      	movs	r3, #2
 80059dc:	e07d      	b.n	8005ada <HAL_UART_Receive+0x13c>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2222      	movs	r2, #34	; 0x22
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059fa:	f7fb ff71 	bl	80018e0 <HAL_GetTick>
 80059fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a14:	d108      	bne.n	8005a28 <HAL_UART_Receive+0x8a>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d104      	bne.n	8005a28 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	e003      	b.n	8005a30 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005a38:	e043      	b.n	8005ac2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	2200      	movs	r2, #0
 8005a42:	2120      	movs	r1, #32
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fb05 	bl	8006054 <UART_WaitOnFlagUntilTimeout>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e042      	b.n	8005ada <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10c      	bne.n	8005a74 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	3302      	adds	r3, #2
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	e01f      	b.n	8005ab4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7c:	d007      	beq.n	8005a8e <HAL_UART_Receive+0xf0>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <HAL_UART_Receive+0xfe>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e008      	b.n	8005aae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1b6      	bne.n	8005a3a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	e000      	b.n	8005ada <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005ad8:	2302      	movs	r3, #2
  }
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b0ba      	sub	sp, #232	; 0xe8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10f      	bne.n	8005b4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <HAL_UART_IRQHandler+0x66>
 8005b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b3a:	f003 0320 	and.w	r3, r3, #32
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fbd3 	bl	80062ee <UART_Receive_IT>
      return;
 8005b48:	e256      	b.n	8005ff8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 80de 	beq.w	8005d10 <HAL_UART_IRQHandler+0x22c>
 8005b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80d1 	beq.w	8005d10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00b      	beq.n	8005b92 <HAL_UART_IRQHandler+0xae>
 8005b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f043 0201 	orr.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b96:	f003 0304 	and.w	r3, r3, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00b      	beq.n	8005bb6 <HAL_UART_IRQHandler+0xd2>
 8005b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bae:	f043 0202 	orr.w	r2, r3, #2
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <HAL_UART_IRQHandler+0xf6>
 8005bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	f043 0204 	orr.w	r2, r3, #4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d011      	beq.n	8005c0a <HAL_UART_IRQHandler+0x126>
 8005be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bea:	f003 0320 	and.w	r3, r3, #32
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d005      	beq.n	8005c0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c02:	f043 0208 	orr.w	r2, r3, #8
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 81ed 	beq.w	8005fee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d008      	beq.n	8005c32 <HAL_UART_IRQHandler+0x14e>
 8005c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fb5e 	bl	80062ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	bf0c      	ite	eq
 8005c40:	2301      	moveq	r3, #1
 8005c42:	2300      	movne	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <HAL_UART_IRQHandler+0x17a>
 8005c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d04f      	beq.n	8005cfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fa66 	bl	8006130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6e:	2b40      	cmp	r3, #64	; 0x40
 8005c70:	d141      	bne.n	8005cf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3314      	adds	r3, #20
 8005c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c80:	e853 3f00 	ldrex	r3, [r3]
 8005c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3314      	adds	r3, #20
 8005c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1d9      	bne.n	8005c72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d013      	beq.n	8005cee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	4a7d      	ldr	r2, [pc, #500]	; (8005ec0 <HAL_UART_IRQHandler+0x3dc>)
 8005ccc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fc f8b2 	bl	8001e3c <HAL_DMA_Abort_IT>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d016      	beq.n	8005d0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cec:	e00e      	b.n	8005d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f99a 	bl	8006028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	e00a      	b.n	8005d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f996 	bl	8006028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	e006      	b.n	8005d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f992 	bl	8006028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d0a:	e170      	b.n	8005fee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d0c:	bf00      	nop
    return;
 8005d0e:	e16e      	b.n	8005fee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	f040 814a 	bne.w	8005fae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d1e:	f003 0310 	and.w	r3, r3, #16
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8143 	beq.w	8005fae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d2c:	f003 0310 	and.w	r3, r3, #16
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 813c 	beq.w	8005fae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	60bb      	str	r3, [r7, #8]
 8005d4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d56:	2b40      	cmp	r3, #64	; 0x40
 8005d58:	f040 80b4 	bne.w	8005ec4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f000 8140 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	f080 8139 	bcs.w	8005ff2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8c:	69db      	ldr	r3, [r3, #28]
 8005d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d92:	f000 8088 	beq.w	8005ea6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1d9      	bne.n	8005d96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3314      	adds	r3, #20
 8005de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df4:	f023 0301 	bic.w	r3, r3, #1
 8005df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3314      	adds	r3, #20
 8005e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e1      	bne.n	8005de2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3314      	adds	r3, #20
 8005e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	3314      	adds	r3, #20
 8005e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e3      	bne.n	8005e1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e76:	f023 0310 	bic.w	r3, r3, #16
 8005e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e88:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e3      	bne.n	8005e64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fb ff5b 	bl	8001d5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f8c0 	bl	800603c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ebc:	e099      	b.n	8005ff2 <HAL_UART_IRQHandler+0x50e>
 8005ebe:	bf00      	nop
 8005ec0:	080061f7 	.word	0x080061f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f000 808b 	beq.w	8005ff6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8086 	beq.w	8005ff6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f0e:	647a      	str	r2, [r7, #68]	; 0x44
 8005f10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e3      	bne.n	8005eea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3314      	adds	r3, #20
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	623b      	str	r3, [r7, #32]
   return(result);
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3314      	adds	r3, #20
 8005f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f46:	633a      	str	r2, [r7, #48]	; 0x30
 8005f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e3      	bne.n	8005f22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0310 	bic.w	r3, r3, #16
 8005f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	330c      	adds	r3, #12
 8005f88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f8c:	61fa      	str	r2, [r7, #28]
 8005f8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f90:	69b9      	ldr	r1, [r7, #24]
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	e841 2300 	strex	r3, r2, [r1]
 8005f98:	617b      	str	r3, [r7, #20]
   return(result);
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1e3      	bne.n	8005f68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f848 	bl	800603c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005fac:	e023      	b.n	8005ff6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d009      	beq.n	8005fce <HAL_UART_IRQHandler+0x4ea>
 8005fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f929 	bl	800621e <UART_Transmit_IT>
    return;
 8005fcc:	e014      	b.n	8005ff8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x514>
 8005fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d008      	beq.n	8005ff8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f969 	bl	80062be <UART_EndTransmit_IT>
    return;
 8005fec:	e004      	b.n	8005ff8 <HAL_UART_IRQHandler+0x514>
    return;
 8005fee:	bf00      	nop
 8005ff0:	e002      	b.n	8005ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ff2:	bf00      	nop
 8005ff4:	e000      	b.n	8005ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8005ff6:	bf00      	nop
  }
}
 8005ff8:	37e8      	adds	r7, #232	; 0xe8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop

08006000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b090      	sub	sp, #64	; 0x40
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006064:	e050      	b.n	8006108 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606c:	d04c      	beq.n	8006108 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800606e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0x30>
 8006074:	f7fb fc34 	bl	80018e0 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006080:	429a      	cmp	r2, r3
 8006082:	d241      	bcs.n	8006108 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	e853 3f00 	ldrex	r3, [r3]
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800609a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060a4:	637a      	str	r2, [r7, #52]	; 0x34
 80060a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060ac:	e841 2300 	strex	r3, r2, [r1]
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e5      	bne.n	8006084 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3314      	adds	r3, #20
 80060be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	e853 3f00 	ldrex	r3, [r3]
 80060c6:	613b      	str	r3, [r7, #16]
   return(result);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f023 0301 	bic.w	r3, r3, #1
 80060ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3314      	adds	r3, #20
 80060d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060d8:	623a      	str	r2, [r7, #32]
 80060da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060dc:	69f9      	ldr	r1, [r7, #28]
 80060de:	6a3a      	ldr	r2, [r7, #32]
 80060e0:	e841 2300 	strex	r3, r2, [r1]
 80060e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1e5      	bne.n	80060b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e00f      	b.n	8006128 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4013      	ands	r3, r2
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	429a      	cmp	r2, r3
 8006116:	bf0c      	ite	eq
 8006118:	2301      	moveq	r3, #1
 800611a:	2300      	movne	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	79fb      	ldrb	r3, [r7, #7]
 8006122:	429a      	cmp	r2, r3
 8006124:	d09f      	beq.n	8006066 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3740      	adds	r7, #64	; 0x40
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b095      	sub	sp, #84	; 0x54
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	330c      	adds	r3, #12
 800613e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800614e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	330c      	adds	r3, #12
 8006156:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006158:	643a      	str	r2, [r7, #64]	; 0x40
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800615e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e5      	bne.n	8006138 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3314      	adds	r3, #20
 8006172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	61fb      	str	r3, [r7, #28]
   return(result);
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f023 0301 	bic.w	r3, r3, #1
 8006182:	64bb      	str	r3, [r7, #72]	; 0x48
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3314      	adds	r3, #20
 800618a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800618c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006192:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e5      	bne.n	800616c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d119      	bne.n	80061dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	330c      	adds	r3, #12
 80061ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f023 0310 	bic.w	r3, r3, #16
 80061be:	647b      	str	r3, [r7, #68]	; 0x44
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c8:	61ba      	str	r2, [r7, #24]
 80061ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6979      	ldr	r1, [r7, #20]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	613b      	str	r3, [r7, #16]
   return(result);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e5      	bne.n	80061a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061ea:	bf00      	nop
 80061ec:	3754      	adds	r7, #84	; 0x54
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7ff ff09 	bl	8006028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b21      	cmp	r3, #33	; 0x21
 8006230:	d13e      	bne.n	80062b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623a:	d114      	bne.n	8006266 <UART_Transmit_IT+0x48>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d110      	bne.n	8006266 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006258:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	1c9a      	adds	r2, r3, #2
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	621a      	str	r2, [r3, #32]
 8006264:	e008      	b.n	8006278 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	1c59      	adds	r1, r3, #1
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	6211      	str	r1, [r2, #32]
 8006270:	781a      	ldrb	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29b      	uxth	r3, r3
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	4619      	mov	r1, r3
 8006286:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10f      	bne.n	80062ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800629a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	e000      	b.n	80062b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062b0:	2302      	movs	r3, #2
  }
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b082      	sub	sp, #8
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7ff fe8e 	bl	8006000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b08c      	sub	sp, #48	; 0x30
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b22      	cmp	r3, #34	; 0x22
 8006300:	f040 80ab 	bne.w	800645a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630c:	d117      	bne.n	800633e <UART_Receive_IT+0x50>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d113      	bne.n	800633e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	b29b      	uxth	r3, r3
 8006328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800632c:	b29a      	uxth	r2, r3
 800632e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	1c9a      	adds	r2, r3, #2
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	629a      	str	r2, [r3, #40]	; 0x28
 800633c:	e026      	b.n	800638c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006344:	2300      	movs	r3, #0
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006350:	d007      	beq.n	8006362 <UART_Receive_IT+0x74>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10a      	bne.n	8006370 <UART_Receive_IT+0x82>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e008      	b.n	8006382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637c:	b2da      	uxtb	r2, r3
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006390:	b29b      	uxth	r3, r3
 8006392:	3b01      	subs	r3, #1
 8006394:	b29b      	uxth	r3, r3
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4619      	mov	r1, r3
 800639a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800639c:	2b00      	cmp	r3, #0
 800639e:	d15a      	bne.n	8006456 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0220 	bic.w	r2, r2, #32
 80063ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0201 	bic.w	r2, r2, #1
 80063ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d135      	bne.n	800644c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	330c      	adds	r3, #12
 80063ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	613b      	str	r3, [r7, #16]
   return(result);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f023 0310 	bic.w	r3, r3, #16
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	330c      	adds	r3, #12
 8006404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006406:	623a      	str	r2, [r7, #32]
 8006408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	69f9      	ldr	r1, [r7, #28]
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	61bb      	str	r3, [r7, #24]
   return(result);
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e5      	bne.n	80063e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0310 	and.w	r3, r3, #16
 8006424:	2b10      	cmp	r3, #16
 8006426:	d10a      	bne.n	800643e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006428:	2300      	movs	r3, #0
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	60fb      	str	r3, [r7, #12]
 800643c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f7ff fdf9 	bl	800603c <HAL_UARTEx_RxEventCallback>
 800644a:	e002      	b.n	8006452 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff fde1 	bl	8006014 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	e002      	b.n	800645c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	e000      	b.n	800645c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800645a:	2302      	movs	r3, #2
  }
}
 800645c:	4618      	mov	r0, r3
 800645e:	3730      	adds	r7, #48	; 0x30
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006468:	b0c0      	sub	sp, #256	; 0x100
 800646a:	af00      	add	r7, sp, #0
 800646c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800647c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006480:	68d9      	ldr	r1, [r3, #12]
 8006482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	ea40 0301 	orr.w	r3, r0, r1
 800648c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800648e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006492:	689a      	ldr	r2, [r3, #8]
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	431a      	orrs	r2, r3
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064bc:	f021 010c 	bic.w	r1, r1, #12
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80064ca:	430b      	orrs	r3, r1
 80064cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064de:	6999      	ldr	r1, [r3, #24]
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	ea40 0301 	orr.w	r3, r0, r1
 80064ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	4b8f      	ldr	r3, [pc, #572]	; (8006730 <UART_SetConfig+0x2cc>)
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d005      	beq.n	8006504 <UART_SetConfig+0xa0>
 80064f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	4b8d      	ldr	r3, [pc, #564]	; (8006734 <UART_SetConfig+0x2d0>)
 8006500:	429a      	cmp	r2, r3
 8006502:	d104      	bne.n	800650e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006504:	f7fd ff88 	bl	8004418 <HAL_RCC_GetPCLK2Freq>
 8006508:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800650c:	e003      	b.n	8006516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800650e:	f7fd ff6f 	bl	80043f0 <HAL_RCC_GetPCLK1Freq>
 8006512:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006520:	f040 810c 	bne.w	800673c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006528:	2200      	movs	r2, #0
 800652a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800652e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006536:	4622      	mov	r2, r4
 8006538:	462b      	mov	r3, r5
 800653a:	1891      	adds	r1, r2, r2
 800653c:	65b9      	str	r1, [r7, #88]	; 0x58
 800653e:	415b      	adcs	r3, r3
 8006540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006546:	4621      	mov	r1, r4
 8006548:	eb12 0801 	adds.w	r8, r2, r1
 800654c:	4629      	mov	r1, r5
 800654e:	eb43 0901 	adc.w	r9, r3, r1
 8006552:	f04f 0200 	mov.w	r2, #0
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800655e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006566:	4690      	mov	r8, r2
 8006568:	4699      	mov	r9, r3
 800656a:	4623      	mov	r3, r4
 800656c:	eb18 0303 	adds.w	r3, r8, r3
 8006570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006574:	462b      	mov	r3, r5
 8006576:	eb49 0303 	adc.w	r3, r9, r3
 800657a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800658a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800658e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006592:	460b      	mov	r3, r1
 8006594:	18db      	adds	r3, r3, r3
 8006596:	653b      	str	r3, [r7, #80]	; 0x50
 8006598:	4613      	mov	r3, r2
 800659a:	eb42 0303 	adc.w	r3, r2, r3
 800659e:	657b      	str	r3, [r7, #84]	; 0x54
 80065a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065a8:	f7f9 fe0e 	bl	80001c8 <__aeabi_uldivmod>
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	4b61      	ldr	r3, [pc, #388]	; (8006738 <UART_SetConfig+0x2d4>)
 80065b2:	fba3 2302 	umull	r2, r3, r3, r2
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	011c      	lsls	r4, r3, #4
 80065ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80065c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80065cc:	4642      	mov	r2, r8
 80065ce:	464b      	mov	r3, r9
 80065d0:	1891      	adds	r1, r2, r2
 80065d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80065d4:	415b      	adcs	r3, r3
 80065d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80065dc:	4641      	mov	r1, r8
 80065de:	eb12 0a01 	adds.w	sl, r2, r1
 80065e2:	4649      	mov	r1, r9
 80065e4:	eb43 0b01 	adc.w	fp, r3, r1
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065fc:	4692      	mov	sl, r2
 80065fe:	469b      	mov	fp, r3
 8006600:	4643      	mov	r3, r8
 8006602:	eb1a 0303 	adds.w	r3, sl, r3
 8006606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800660a:	464b      	mov	r3, r9
 800660c:	eb4b 0303 	adc.w	r3, fp, r3
 8006610:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006620:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006628:	460b      	mov	r3, r1
 800662a:	18db      	adds	r3, r3, r3
 800662c:	643b      	str	r3, [r7, #64]	; 0x40
 800662e:	4613      	mov	r3, r2
 8006630:	eb42 0303 	adc.w	r3, r2, r3
 8006634:	647b      	str	r3, [r7, #68]	; 0x44
 8006636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800663a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800663e:	f7f9 fdc3 	bl	80001c8 <__aeabi_uldivmod>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4611      	mov	r1, r2
 8006648:	4b3b      	ldr	r3, [pc, #236]	; (8006738 <UART_SetConfig+0x2d4>)
 800664a:	fba3 2301 	umull	r2, r3, r3, r1
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	2264      	movs	r2, #100	; 0x64
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	1acb      	subs	r3, r1, r3
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800665e:	4b36      	ldr	r3, [pc, #216]	; (8006738 <UART_SetConfig+0x2d4>)
 8006660:	fba3 2302 	umull	r2, r3, r3, r2
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800666c:	441c      	add	r4, r3
 800666e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006672:	2200      	movs	r2, #0
 8006674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006678:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800667c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006680:	4642      	mov	r2, r8
 8006682:	464b      	mov	r3, r9
 8006684:	1891      	adds	r1, r2, r2
 8006686:	63b9      	str	r1, [r7, #56]	; 0x38
 8006688:	415b      	adcs	r3, r3
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800668c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006690:	4641      	mov	r1, r8
 8006692:	1851      	adds	r1, r2, r1
 8006694:	6339      	str	r1, [r7, #48]	; 0x30
 8006696:	4649      	mov	r1, r9
 8006698:	414b      	adcs	r3, r1
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
 800669c:	f04f 0200 	mov.w	r2, #0
 80066a0:	f04f 0300 	mov.w	r3, #0
 80066a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066a8:	4659      	mov	r1, fp
 80066aa:	00cb      	lsls	r3, r1, #3
 80066ac:	4651      	mov	r1, sl
 80066ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066b2:	4651      	mov	r1, sl
 80066b4:	00ca      	lsls	r2, r1, #3
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	4603      	mov	r3, r0
 80066bc:	4642      	mov	r2, r8
 80066be:	189b      	adds	r3, r3, r2
 80066c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066c4:	464b      	mov	r3, r9
 80066c6:	460a      	mov	r2, r1
 80066c8:	eb42 0303 	adc.w	r3, r2, r3
 80066cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80066dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80066e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80066e4:	460b      	mov	r3, r1
 80066e6:	18db      	adds	r3, r3, r3
 80066e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ea:	4613      	mov	r3, r2
 80066ec:	eb42 0303 	adc.w	r3, r2, r3
 80066f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066fa:	f7f9 fd65 	bl	80001c8 <__aeabi_uldivmod>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <UART_SetConfig+0x2d4>)
 8006704:	fba3 1302 	umull	r1, r3, r3, r2
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	2164      	movs	r1, #100	; 0x64
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	3332      	adds	r3, #50	; 0x32
 8006716:	4a08      	ldr	r2, [pc, #32]	; (8006738 <UART_SetConfig+0x2d4>)
 8006718:	fba2 2303 	umull	r2, r3, r2, r3
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	f003 0207 	and.w	r2, r3, #7
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4422      	add	r2, r4
 800672a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800672c:	e105      	b.n	800693a <UART_SetConfig+0x4d6>
 800672e:	bf00      	nop
 8006730:	40011000 	.word	0x40011000
 8006734:	40011400 	.word	0x40011400
 8006738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800673c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006740:	2200      	movs	r2, #0
 8006742:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006746:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800674a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800674e:	4642      	mov	r2, r8
 8006750:	464b      	mov	r3, r9
 8006752:	1891      	adds	r1, r2, r2
 8006754:	6239      	str	r1, [r7, #32]
 8006756:	415b      	adcs	r3, r3
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
 800675a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800675e:	4641      	mov	r1, r8
 8006760:	1854      	adds	r4, r2, r1
 8006762:	4649      	mov	r1, r9
 8006764:	eb43 0501 	adc.w	r5, r3, r1
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	f04f 0300 	mov.w	r3, #0
 8006770:	00eb      	lsls	r3, r5, #3
 8006772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006776:	00e2      	lsls	r2, r4, #3
 8006778:	4614      	mov	r4, r2
 800677a:	461d      	mov	r5, r3
 800677c:	4643      	mov	r3, r8
 800677e:	18e3      	adds	r3, r4, r3
 8006780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006784:	464b      	mov	r3, r9
 8006786:	eb45 0303 	adc.w	r3, r5, r3
 800678a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800679a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067aa:	4629      	mov	r1, r5
 80067ac:	008b      	lsls	r3, r1, #2
 80067ae:	4621      	mov	r1, r4
 80067b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067b4:	4621      	mov	r1, r4
 80067b6:	008a      	lsls	r2, r1, #2
 80067b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80067bc:	f7f9 fd04 	bl	80001c8 <__aeabi_uldivmod>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4b60      	ldr	r3, [pc, #384]	; (8006948 <UART_SetConfig+0x4e4>)
 80067c6:	fba3 2302 	umull	r2, r3, r3, r2
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	011c      	lsls	r4, r3, #4
 80067ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80067dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80067e0:	4642      	mov	r2, r8
 80067e2:	464b      	mov	r3, r9
 80067e4:	1891      	adds	r1, r2, r2
 80067e6:	61b9      	str	r1, [r7, #24]
 80067e8:	415b      	adcs	r3, r3
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067f0:	4641      	mov	r1, r8
 80067f2:	1851      	adds	r1, r2, r1
 80067f4:	6139      	str	r1, [r7, #16]
 80067f6:	4649      	mov	r1, r9
 80067f8:	414b      	adcs	r3, r1
 80067fa:	617b      	str	r3, [r7, #20]
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006808:	4659      	mov	r1, fp
 800680a:	00cb      	lsls	r3, r1, #3
 800680c:	4651      	mov	r1, sl
 800680e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006812:	4651      	mov	r1, sl
 8006814:	00ca      	lsls	r2, r1, #3
 8006816:	4610      	mov	r0, r2
 8006818:	4619      	mov	r1, r3
 800681a:	4603      	mov	r3, r0
 800681c:	4642      	mov	r2, r8
 800681e:	189b      	adds	r3, r3, r2
 8006820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006824:	464b      	mov	r3, r9
 8006826:	460a      	mov	r2, r1
 8006828:	eb42 0303 	adc.w	r3, r2, r3
 800682c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	67bb      	str	r3, [r7, #120]	; 0x78
 800683a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006848:	4649      	mov	r1, r9
 800684a:	008b      	lsls	r3, r1, #2
 800684c:	4641      	mov	r1, r8
 800684e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006852:	4641      	mov	r1, r8
 8006854:	008a      	lsls	r2, r1, #2
 8006856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800685a:	f7f9 fcb5 	bl	80001c8 <__aeabi_uldivmod>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4b39      	ldr	r3, [pc, #228]	; (8006948 <UART_SetConfig+0x4e4>)
 8006864:	fba3 1302 	umull	r1, r3, r3, r2
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	2164      	movs	r1, #100	; 0x64
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	3332      	adds	r3, #50	; 0x32
 8006876:	4a34      	ldr	r2, [pc, #208]	; (8006948 <UART_SetConfig+0x4e4>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	095b      	lsrs	r3, r3, #5
 800687e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006882:	441c      	add	r4, r3
 8006884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006888:	2200      	movs	r2, #0
 800688a:	673b      	str	r3, [r7, #112]	; 0x70
 800688c:	677a      	str	r2, [r7, #116]	; 0x74
 800688e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006892:	4642      	mov	r2, r8
 8006894:	464b      	mov	r3, r9
 8006896:	1891      	adds	r1, r2, r2
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	415b      	adcs	r3, r3
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068a2:	4641      	mov	r1, r8
 80068a4:	1851      	adds	r1, r2, r1
 80068a6:	6039      	str	r1, [r7, #0]
 80068a8:	4649      	mov	r1, r9
 80068aa:	414b      	adcs	r3, r1
 80068ac:	607b      	str	r3, [r7, #4]
 80068ae:	f04f 0200 	mov.w	r2, #0
 80068b2:	f04f 0300 	mov.w	r3, #0
 80068b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068ba:	4659      	mov	r1, fp
 80068bc:	00cb      	lsls	r3, r1, #3
 80068be:	4651      	mov	r1, sl
 80068c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068c4:	4651      	mov	r1, sl
 80068c6:	00ca      	lsls	r2, r1, #3
 80068c8:	4610      	mov	r0, r2
 80068ca:	4619      	mov	r1, r3
 80068cc:	4603      	mov	r3, r0
 80068ce:	4642      	mov	r2, r8
 80068d0:	189b      	adds	r3, r3, r2
 80068d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80068d4:	464b      	mov	r3, r9
 80068d6:	460a      	mov	r2, r1
 80068d8:	eb42 0303 	adc.w	r3, r2, r3
 80068dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	663b      	str	r3, [r7, #96]	; 0x60
 80068e8:	667a      	str	r2, [r7, #100]	; 0x64
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	f04f 0300 	mov.w	r3, #0
 80068f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80068f6:	4649      	mov	r1, r9
 80068f8:	008b      	lsls	r3, r1, #2
 80068fa:	4641      	mov	r1, r8
 80068fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006900:	4641      	mov	r1, r8
 8006902:	008a      	lsls	r2, r1, #2
 8006904:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006908:	f7f9 fc5e 	bl	80001c8 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <UART_SetConfig+0x4e4>)
 8006912:	fba3 1302 	umull	r1, r3, r3, r2
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	2164      	movs	r1, #100	; 0x64
 800691a:	fb01 f303 	mul.w	r3, r1, r3
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	3332      	adds	r3, #50	; 0x32
 8006924:	4a08      	ldr	r2, [pc, #32]	; (8006948 <UART_SetConfig+0x4e4>)
 8006926:	fba2 2303 	umull	r2, r3, r2, r3
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	f003 020f 	and.w	r2, r3, #15
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4422      	add	r2, r4
 8006938:	609a      	str	r2, [r3, #8]
}
 800693a:	bf00      	nop
 800693c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006940:	46bd      	mov	sp, r7
 8006942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006946:	bf00      	nop
 8006948:	51eb851f 	.word	0x51eb851f

0800694c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800694c:	b084      	sub	sp, #16
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	f107 001c 	add.w	r0, r7, #28
 800695a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	2b01      	cmp	r3, #1
 8006962:	d122      	bne.n	80069aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800698c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698e:	2b01      	cmp	r3, #1
 8006990:	d105      	bne.n	800699e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f001 fbee 	bl	8008180 <USB_CoreReset>
 80069a4:	4603      	mov	r3, r0
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	e01a      	b.n	80069e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 fbe2 	bl	8008180 <USB_CoreReset>
 80069bc:	4603      	mov	r3, r0
 80069be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d106      	bne.n	80069d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
 80069d2:	e005      	b.n	80069e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d10b      	bne.n	80069fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f043 0206 	orr.w	r2, r3, #6
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f043 0220 	orr.w	r2, r3, #32
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a0a:	b004      	add	sp, #16
 8006a0c:	4770      	bx	lr
	...

08006a10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d165      	bne.n	8006af0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a41      	ldr	r2, [pc, #260]	; (8006b2c <USB_SetTurnaroundTime+0x11c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d906      	bls.n	8006a3a <USB_SetTurnaroundTime+0x2a>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4a40      	ldr	r2, [pc, #256]	; (8006b30 <USB_SetTurnaroundTime+0x120>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d202      	bcs.n	8006a3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a34:	230f      	movs	r3, #15
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	e062      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4a3c      	ldr	r2, [pc, #240]	; (8006b30 <USB_SetTurnaroundTime+0x120>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d306      	bcc.n	8006a50 <USB_SetTurnaroundTime+0x40>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4a3b      	ldr	r2, [pc, #236]	; (8006b34 <USB_SetTurnaroundTime+0x124>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d202      	bcs.n	8006a50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a4a:	230e      	movs	r3, #14
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e057      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4a38      	ldr	r2, [pc, #224]	; (8006b34 <USB_SetTurnaroundTime+0x124>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d306      	bcc.n	8006a66 <USB_SetTurnaroundTime+0x56>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a37      	ldr	r2, [pc, #220]	; (8006b38 <USB_SetTurnaroundTime+0x128>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d202      	bcs.n	8006a66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a60:	230d      	movs	r3, #13
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e04c      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	4a33      	ldr	r2, [pc, #204]	; (8006b38 <USB_SetTurnaroundTime+0x128>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d306      	bcc.n	8006a7c <USB_SetTurnaroundTime+0x6c>
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4a32      	ldr	r2, [pc, #200]	; (8006b3c <USB_SetTurnaroundTime+0x12c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d802      	bhi.n	8006a7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a76:	230c      	movs	r3, #12
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	e041      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4a2f      	ldr	r2, [pc, #188]	; (8006b3c <USB_SetTurnaroundTime+0x12c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d906      	bls.n	8006a92 <USB_SetTurnaroundTime+0x82>
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4a2e      	ldr	r2, [pc, #184]	; (8006b40 <USB_SetTurnaroundTime+0x130>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d802      	bhi.n	8006a92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a8c:	230b      	movs	r3, #11
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e036      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	4a2a      	ldr	r2, [pc, #168]	; (8006b40 <USB_SetTurnaroundTime+0x130>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d906      	bls.n	8006aa8 <USB_SetTurnaroundTime+0x98>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4a29      	ldr	r2, [pc, #164]	; (8006b44 <USB_SetTurnaroundTime+0x134>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d802      	bhi.n	8006aa8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006aa2:	230a      	movs	r3, #10
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	e02b      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4a26      	ldr	r2, [pc, #152]	; (8006b44 <USB_SetTurnaroundTime+0x134>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d906      	bls.n	8006abe <USB_SetTurnaroundTime+0xae>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4a25      	ldr	r2, [pc, #148]	; (8006b48 <USB_SetTurnaroundTime+0x138>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d202      	bcs.n	8006abe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ab8:	2309      	movs	r3, #9
 8006aba:	617b      	str	r3, [r7, #20]
 8006abc:	e020      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	4a21      	ldr	r2, [pc, #132]	; (8006b48 <USB_SetTurnaroundTime+0x138>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d306      	bcc.n	8006ad4 <USB_SetTurnaroundTime+0xc4>
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4a20      	ldr	r2, [pc, #128]	; (8006b4c <USB_SetTurnaroundTime+0x13c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d802      	bhi.n	8006ad4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ace:	2308      	movs	r3, #8
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	e015      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	4a1d      	ldr	r2, [pc, #116]	; (8006b4c <USB_SetTurnaroundTime+0x13c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d906      	bls.n	8006aea <USB_SetTurnaroundTime+0xda>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4a1c      	ldr	r2, [pc, #112]	; (8006b50 <USB_SetTurnaroundTime+0x140>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d202      	bcs.n	8006aea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ae4:	2307      	movs	r3, #7
 8006ae6:	617b      	str	r3, [r7, #20]
 8006ae8:	e00a      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006aea:	2306      	movs	r3, #6
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	e007      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d102      	bne.n	8006afc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006af6:	2309      	movs	r3, #9
 8006af8:	617b      	str	r3, [r7, #20]
 8006afa:	e001      	b.n	8006b00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006afc:	2309      	movs	r3, #9
 8006afe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68da      	ldr	r2, [r3, #12]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	029b      	lsls	r3, r3, #10
 8006b14:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b18:	431a      	orrs	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	371c      	adds	r7, #28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	00d8acbf 	.word	0x00d8acbf
 8006b30:	00e4e1c0 	.word	0x00e4e1c0
 8006b34:	00f42400 	.word	0x00f42400
 8006b38:	01067380 	.word	0x01067380
 8006b3c:	011a499f 	.word	0x011a499f
 8006b40:	01312cff 	.word	0x01312cff
 8006b44:	014ca43f 	.word	0x014ca43f
 8006b48:	016e3600 	.word	0x016e3600
 8006b4c:	01a6ab1f 	.word	0x01a6ab1f
 8006b50:	01e84800 	.word	0x01e84800

08006b54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f043 0201 	orr.w	r2, r3, #1
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f023 0201 	bic.w	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d115      	bne.n	8006be6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f7fa fe96 	bl	80018f8 <HAL_Delay>
      ms++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 fa45 	bl	8008062 <USB_GetMode>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d01e      	beq.n	8006c1c <USB_SetCurrentMode+0x84>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2b31      	cmp	r3, #49	; 0x31
 8006be2:	d9f0      	bls.n	8006bc6 <USB_SetCurrentMode+0x2e>
 8006be4:	e01a      	b.n	8006c1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d115      	bne.n	8006c18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	f7fa fe7d 	bl	80018f8 <HAL_Delay>
      ms++;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3301      	adds	r3, #1
 8006c02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 fa2c 	bl	8008062 <USB_GetMode>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <USB_SetCurrentMode+0x84>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b31      	cmp	r3, #49	; 0x31
 8006c14:	d9f0      	bls.n	8006bf8 <USB_SetCurrentMode+0x60>
 8006c16:	e001      	b.n	8006c1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e005      	b.n	8006c28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b32      	cmp	r3, #50	; 0x32
 8006c20:	d101      	bne.n	8006c26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c30:	b084      	sub	sp, #16
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b086      	sub	sp, #24
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
 8006c3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	e009      	b.n	8006c64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	3340      	adds	r3, #64	; 0x40
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	3301      	adds	r3, #1
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b0e      	cmp	r3, #14
 8006c68:	d9f2      	bls.n	8006c50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d11c      	bne.n	8006caa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c7e:	f043 0302 	orr.w	r3, r3, #2
 8006c82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8006ca8:	e00b      	b.n	8006cc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	2300      	movs	r3, #0
 8006ccc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cdc:	461a      	mov	r2, r3
 8006cde:	680b      	ldr	r3, [r1, #0]
 8006ce0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d10c      	bne.n	8006d02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d104      	bne.n	8006cf8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cee:	2100      	movs	r1, #0
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f965 	bl	8006fc0 <USB_SetDevSpeed>
 8006cf6:	e008      	b.n	8006d0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f960 	bl	8006fc0 <USB_SetDevSpeed>
 8006d00:	e003      	b.n	8006d0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d02:	2103      	movs	r1, #3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f95b 	bl	8006fc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d0a:	2110      	movs	r1, #16
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f8f3 	bl	8006ef8 <USB_FlushTxFifo>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f91f 	bl	8006f60 <USB_FlushRxFifo>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d32:	461a      	mov	r2, r3
 8006d34:	2300      	movs	r3, #0
 8006d36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3e:	461a      	mov	r2, r3
 8006d40:	2300      	movs	r3, #0
 8006d42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d50:	2300      	movs	r3, #0
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	e043      	b.n	8006dde <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d6c:	d118      	bne.n	8006da0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d80:	461a      	mov	r2, r3
 8006d82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	e013      	b.n	8006db2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d96:	461a      	mov	r2, r3
 8006d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e008      	b.n	8006db2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dac:	461a      	mov	r2, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	613b      	str	r3, [r7, #16]
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d3b7      	bcc.n	8006d56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006de6:	2300      	movs	r3, #0
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	e043      	b.n	8006e74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e02:	d118      	bne.n	8006e36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e16:	461a      	mov	r2, r3
 8006e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	e013      	b.n	8006e48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e32:	6013      	str	r3, [r2, #0]
 8006e34:	e008      	b.n	8006e48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e42:	461a      	mov	r2, r3
 8006e44:	2300      	movs	r3, #0
 8006e46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e54:	461a      	mov	r2, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e66:	461a      	mov	r2, r3
 8006e68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3301      	adds	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d3b7      	bcc.n	8006dec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f043 0210 	orr.w	r2, r3, #16
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <USB_DevInit+0x2c4>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f043 0208 	orr.w	r2, r3, #8
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d107      	bne.n	8006ee4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006edc:	f043 0304 	orr.w	r3, r3, #4
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ef0:	b004      	add	sp, #16
 8006ef2:	4770      	bx	lr
 8006ef4:	803c3800 	.word	0x803c3800

08006ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4a13      	ldr	r2, [pc, #76]	; (8006f5c <USB_FlushTxFifo+0x64>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d901      	bls.n	8006f18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e01b      	b.n	8006f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	daf2      	bge.n	8006f06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	019b      	lsls	r3, r3, #6
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <USB_FlushTxFifo+0x64>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d901      	bls.n	8006f42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e006      	b.n	8006f50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0320 	and.w	r3, r3, #32
 8006f4a:	2b20      	cmp	r3, #32
 8006f4c:	d0f0      	beq.n	8006f30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	00030d40 	.word	0x00030d40

08006f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <USB_FlushRxFifo+0x5c>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d901      	bls.n	8006f7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e018      	b.n	8006fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	daf2      	bge.n	8006f6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2210      	movs	r2, #16
 8006f8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	4a08      	ldr	r2, [pc, #32]	; (8006fbc <USB_FlushRxFifo+0x5c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e006      	b.n	8006fb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b10      	cmp	r3, #16
 8006fac:	d0f0      	beq.n	8006f90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	00030d40 	.word	0x00030d40

08006fc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	68f9      	ldr	r1, [r7, #12]
 8006fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff2:	b480      	push	{r7}
 8006ff4:	b087      	sub	sp, #28
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 0306 	and.w	r3, r3, #6
 800700a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d102      	bne.n	8007018 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007012:	2300      	movs	r3, #0
 8007014:	75fb      	strb	r3, [r7, #23]
 8007016:	e00a      	b.n	800702e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b02      	cmp	r3, #2
 800701c:	d002      	beq.n	8007024 <USB_GetDevSpeed+0x32>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b06      	cmp	r3, #6
 8007022:	d102      	bne.n	800702a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007024:	2302      	movs	r3, #2
 8007026:	75fb      	strb	r3, [r7, #23]
 8007028:	e001      	b.n	800702e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800702a:	230f      	movs	r3, #15
 800702c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007030:	4618      	mov	r0, r3
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d13a      	bne.n	80070ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 030f 	and.w	r3, r3, #15
 8007068:	2101      	movs	r1, #1
 800706a:	fa01 f303 	lsl.w	r3, r1, r3
 800706e:	b29b      	uxth	r3, r3
 8007070:	68f9      	ldr	r1, [r7, #12]
 8007072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007076:	4313      	orrs	r3, r2
 8007078:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d155      	bne.n	800713c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	791b      	ldrb	r3, [r3, #4]
 80070aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	059b      	lsls	r3, r3, #22
 80070b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070b4:	4313      	orrs	r3, r2
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	0151      	lsls	r1, r2, #5
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	440a      	add	r2, r1
 80070be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	e036      	b.n	800713c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d4:	69da      	ldr	r2, [r3, #28]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	2101      	movs	r1, #1
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	041b      	lsls	r3, r3, #16
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070ec:	4313      	orrs	r3, r2
 80070ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d11a      	bne.n	800713c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	791b      	ldrb	r3, [r3, #4]
 8007120:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007122:	430b      	orrs	r3, r1
 8007124:	4313      	orrs	r3, r2
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800713a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
	...

0800714c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d161      	bne.n	800722c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800717a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800717e:	d11f      	bne.n	80071c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	015a      	lsls	r2, r3, #5
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4413      	add	r3, r2
 8007188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	0151      	lsls	r1, r2, #5
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	440a      	add	r2, r1
 8007196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800719e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	2101      	movs	r1, #1
 80071d2:	fa01 f303 	lsl.w	r3, r1, r3
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	43db      	mvns	r3, r3
 80071da:	68f9      	ldr	r1, [r7, #12]
 80071dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071e0:	4013      	ands	r3, r2
 80071e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	69da      	ldr	r2, [r3, #28]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	2101      	movs	r1, #1
 80071f6:	fa01 f303 	lsl.w	r3, r1, r3
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	43db      	mvns	r3, r3
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007204:	4013      	ands	r3, r2
 8007206:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	0159      	lsls	r1, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	440b      	add	r3, r1
 800721e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007222:	4619      	mov	r1, r3
 8007224:	4b35      	ldr	r3, [pc, #212]	; (80072fc <USB_DeactivateEndpoint+0x1b0>)
 8007226:	4013      	ands	r3, r2
 8007228:	600b      	str	r3, [r1, #0]
 800722a:	e060      	b.n	80072ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800723e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007242:	d11f      	bne.n	8007284 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	440a      	add	r2, r1
 800725a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800725e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007262:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68ba      	ldr	r2, [r7, #8]
 8007274:	0151      	lsls	r1, r2, #5
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	440a      	add	r2, r1
 800727a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800727e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007282:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800728a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	2101      	movs	r1, #1
 8007296:	fa01 f303 	lsl.w	r3, r1, r3
 800729a:	041b      	lsls	r3, r3, #16
 800729c:	43db      	mvns	r3, r3
 800729e:	68f9      	ldr	r1, [r7, #12]
 80072a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072a4:	4013      	ands	r3, r2
 80072a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ae:	69da      	ldr	r2, [r3, #28]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	2101      	movs	r1, #1
 80072ba:	fa01 f303 	lsl.w	r3, r1, r3
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	43db      	mvns	r3, r3
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c8:	4013      	ands	r3, r2
 80072ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	015a      	lsls	r2, r3, #5
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4413      	add	r3, r2
 80072d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	0159      	lsls	r1, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	440b      	add	r3, r1
 80072e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e6:	4619      	mov	r1, r3
 80072e8:	4b05      	ldr	r3, [pc, #20]	; (8007300 <USB_DeactivateEndpoint+0x1b4>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	ec337800 	.word	0xec337800
 8007300:	eff37800 	.word	0xeff37800

08007304 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	; 0x28
 8007308:	af02      	add	r7, sp, #8
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	785b      	ldrb	r3, [r3, #1]
 8007320:	2b01      	cmp	r3, #1
 8007322:	f040 815c 	bne.w	80075de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d132      	bne.n	8007394 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	69ba      	ldr	r2, [r7, #24]
 800733e:	0151      	lsls	r1, r2, #5
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	440a      	add	r2, r1
 8007344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007348:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800734c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007350:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	0151      	lsls	r1, r2, #5
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	440a      	add	r2, r1
 8007368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800736c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007370:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800738c:	0cdb      	lsrs	r3, r3, #19
 800738e:	04db      	lsls	r3, r3, #19
 8007390:	6113      	str	r3, [r2, #16]
 8007392:	e074      	b.n	800747e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ae:	0cdb      	lsrs	r3, r3, #19
 80073b0:	04db      	lsls	r3, r3, #19
 80073b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	69ba      	ldr	r2, [r7, #24]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	69fa      	ldr	r2, [r7, #28]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	6999      	ldr	r1, [r3, #24]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	440b      	add	r3, r1
 80073f0:	1e59      	subs	r1, r3, #1
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80073fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80073fc:	4b9d      	ldr	r3, [pc, #628]	; (8007674 <USB_EPStartXfer+0x370>)
 80073fe:	400b      	ands	r3, r1
 8007400:	69b9      	ldr	r1, [r7, #24]
 8007402:	0148      	lsls	r0, r1, #5
 8007404:	69f9      	ldr	r1, [r7, #28]
 8007406:	4401      	add	r1, r0
 8007408:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800740c:	4313      	orrs	r3, r2
 800740e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007426:	69b9      	ldr	r1, [r7, #24]
 8007428:	0148      	lsls	r0, r1, #5
 800742a:	69f9      	ldr	r1, [r7, #28]
 800742c:	4401      	add	r1, r0
 800742e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007432:	4313      	orrs	r3, r2
 8007434:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	791b      	ldrb	r3, [r3, #4]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d11f      	bne.n	800747e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007458:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800745c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800747c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800747e:	79fb      	ldrb	r3, [r7, #7]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d14b      	bne.n	800751c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	015a      	lsls	r2, r3, #5
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007498:	461a      	mov	r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	791b      	ldrb	r3, [r3, #4]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d128      	bne.n	80074fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d110      	bne.n	80074da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	0151      	lsls	r1, r2, #5
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	440a      	add	r2, r1
 80074ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	e00f      	b.n	80074fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	0151      	lsls	r1, r2, #5
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	440a      	add	r2, r1
 80074f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	69fa      	ldr	r2, [r7, #28]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	e133      	b.n	8007784 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	4413      	add	r3, r2
 8007524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	440a      	add	r2, r1
 8007532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007536:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800753a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	791b      	ldrb	r3, [r3, #4]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d015      	beq.n	8007570 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 811b 	beq.w	8007784 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	f003 030f 	and.w	r3, r3, #15
 800755e:	2101      	movs	r1, #1
 8007560:	fa01 f303 	lsl.w	r3, r1, r3
 8007564:	69f9      	ldr	r1, [r7, #28]
 8007566:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800756a:	4313      	orrs	r3, r2
 800756c:	634b      	str	r3, [r1, #52]	; 0x34
 800756e:	e109      	b.n	8007784 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d110      	bne.n	80075a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	4413      	add	r3, r2
 8007588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	0151      	lsls	r1, r2, #5
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	440a      	add	r2, r1
 8007596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800759a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800759e:	6013      	str	r3, [r2, #0]
 80075a0:	e00f      	b.n	80075c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	015a      	lsls	r2, r3, #5
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	0151      	lsls	r1, r2, #5
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	440a      	add	r2, r1
 80075b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	6919      	ldr	r1, [r3, #16]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	b298      	uxth	r0, r3
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	4603      	mov	r3, r0
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 fade 	bl	8007b98 <USB_WritePacket>
 80075dc:	e0d2      	b.n	8007784 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075ea:	691b      	ldr	r3, [r3, #16]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	0151      	lsls	r1, r2, #5
 80075f0:	69fa      	ldr	r2, [r7, #28]
 80075f2:	440a      	add	r2, r1
 80075f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f8:	0cdb      	lsrs	r3, r3, #19
 80075fa:	04db      	lsls	r3, r3, #19
 80075fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075fe:	69bb      	ldr	r3, [r7, #24]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	0151      	lsls	r1, r2, #5
 8007610:	69fa      	ldr	r2, [r7, #28]
 8007612:	440a      	add	r2, r1
 8007614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007618:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800761c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007620:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d126      	bne.n	8007678 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007636:	691a      	ldr	r2, [r3, #16]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007640:	69b9      	ldr	r1, [r7, #24]
 8007642:	0148      	lsls	r0, r1, #5
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	4401      	add	r1, r0
 8007648:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800764c:	4313      	orrs	r3, r2
 800764e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800766e:	6113      	str	r3, [r2, #16]
 8007670:	e03a      	b.n	80076e8 <USB_EPStartXfer+0x3e4>
 8007672:	bf00      	nop
 8007674:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	4413      	add	r3, r2
 8007682:	1e5a      	subs	r2, r3, #1
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	fbb2 f3f3 	udiv	r3, r2, r3
 800768c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	8afa      	ldrh	r2, [r7, #22]
 8007694:	fb03 f202 	mul.w	r2, r3, r2
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	691a      	ldr	r2, [r3, #16]
 80076aa:	8afb      	ldrh	r3, [r7, #22]
 80076ac:	04d9      	lsls	r1, r3, #19
 80076ae:	4b38      	ldr	r3, [pc, #224]	; (8007790 <USB_EPStartXfer+0x48c>)
 80076b0:	400b      	ands	r3, r1
 80076b2:	69b9      	ldr	r1, [r7, #24]
 80076b4:	0148      	lsls	r0, r1, #5
 80076b6:	69f9      	ldr	r1, [r7, #28]
 80076b8:	4401      	add	r1, r0
 80076ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076be:	4313      	orrs	r3, r2
 80076c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	691a      	ldr	r2, [r3, #16]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076d8:	69b9      	ldr	r1, [r7, #24]
 80076da:	0148      	lsls	r0, r1, #5
 80076dc:	69f9      	ldr	r1, [r7, #28]
 80076de:	4401      	add	r1, r0
 80076e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076e4:	4313      	orrs	r3, r2
 80076e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d10d      	bne.n	800770a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6919      	ldr	r1, [r3, #16]
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	460a      	mov	r2, r1
 8007708:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	791b      	ldrb	r3, [r3, #4]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d128      	bne.n	8007764 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d110      	bne.n	8007744 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	015a      	lsls	r2, r3, #5
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	4413      	add	r3, r2
 800772a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	0151      	lsls	r1, r2, #5
 8007734:	69fa      	ldr	r2, [r7, #28]
 8007736:	440a      	add	r2, r1
 8007738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	e00f      	b.n	8007764 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	69ba      	ldr	r2, [r7, #24]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	440a      	add	r2, r1
 800775a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007762:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	440a      	add	r2, r1
 800777a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007782:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3720      	adds	r7, #32
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	1ff80000 	.word	0x1ff80000

08007794 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	4613      	mov	r3, r2
 80077a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	f040 80ce 	bne.w	8007952 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d132      	bne.n	8007824 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	440a      	add	r2, r1
 8007818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800781c:	0cdb      	lsrs	r3, r3, #19
 800781e:	04db      	lsls	r3, r3, #19
 8007820:	6113      	str	r3, [r2, #16]
 8007822:	e04e      	b.n	80078c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	440a      	add	r2, r1
 800783a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800783e:	0cdb      	lsrs	r3, r3, #19
 8007840:	04db      	lsls	r3, r3, #19
 8007842:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	0151      	lsls	r1, r2, #5
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	440a      	add	r2, r1
 800785a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800785e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007862:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007866:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	699a      	ldr	r2, [r3, #24]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	429a      	cmp	r2, r3
 8007872:	d903      	bls.n	800787c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	0151      	lsls	r1, r2, #5
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	440a      	add	r2, r1
 8007892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800789a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a8:	691a      	ldr	r2, [r3, #16]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078b2:	6939      	ldr	r1, [r7, #16]
 80078b4:	0148      	lsls	r0, r1, #5
 80078b6:	6979      	ldr	r1, [r7, #20]
 80078b8:	4401      	add	r1, r0
 80078ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078be:	4313      	orrs	r3, r2
 80078c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d11e      	bne.n	8007906 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078dc:	461a      	mov	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	0151      	lsls	r1, r2, #5
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	440a      	add	r2, r1
 80078fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	e097      	b.n	8007a36 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007920:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007924:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8083 	beq.w	8007a36 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	2101      	movs	r1, #1
 8007942:	fa01 f303 	lsl.w	r3, r1, r3
 8007946:	6979      	ldr	r1, [r7, #20]
 8007948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800794c:	4313      	orrs	r3, r2
 800794e:	634b      	str	r3, [r1, #52]	; 0x34
 8007950:	e071      	b.n	8007a36 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	440a      	add	r2, r1
 8007968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800796c:	0cdb      	lsrs	r3, r3, #19
 800796e:	04db      	lsls	r3, r3, #19
 8007970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	0151      	lsls	r1, r2, #5
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	440a      	add	r2, r1
 8007988:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800798c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007990:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007994:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	68da      	ldr	r2, [r3, #12]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	0151      	lsls	r1, r2, #5
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	440a      	add	r2, r1
 80079c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079da:	691a      	ldr	r2, [r3, #16]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e4:	6939      	ldr	r1, [r7, #16]
 80079e6:	0148      	lsls	r0, r1, #5
 80079e8:	6979      	ldr	r1, [r7, #20]
 80079ea:	4401      	add	r1, r0
 80079ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079f0:	4313      	orrs	r3, r2
 80079f2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80079f4:	79fb      	ldrb	r3, [r7, #7]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d10d      	bne.n	8007a16 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d009      	beq.n	8007a16 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6919      	ldr	r1, [r3, #16]
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a12:	460a      	mov	r2, r1
 8007a14:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	0151      	lsls	r1, r2, #5
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	440a      	add	r2, r1
 8007a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b087      	sub	sp, #28
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	785b      	ldrb	r3, [r3, #1]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d14a      	bne.n	8007af8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a7a:	f040 8086 	bne.w	8007b8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	7812      	ldrb	r2, [r2, #0]
 8007a92:	0151      	lsls	r1, r2, #5
 8007a94:	693a      	ldr	r2, [r7, #16]
 8007a96:	440a      	add	r2, r1
 8007a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007aa0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	7812      	ldrb	r2, [r2, #0]
 8007ab6:	0151      	lsls	r1, r2, #5
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	440a      	add	r2, r1
 8007abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f242 7210 	movw	r2, #10000	; 0x2710
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d902      	bls.n	8007adc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8007ada:	e056      	b.n	8007b8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007af4:	d0e7      	beq.n	8007ac6 <USB_EPStopXfer+0x82>
 8007af6:	e048      	b.n	8007b8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b10:	d13b      	bne.n	8007b8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	7812      	ldrb	r2, [r2, #0]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	7812      	ldrb	r2, [r2, #0]
 8007b4a:	0151      	lsls	r1, r2, #5
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	440a      	add	r2, r1
 8007b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d902      	bls.n	8007b70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b6e:	e00c      	b.n	8007b8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b88:	d0e7      	beq.n	8007b5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	371c      	adds	r7, #28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b089      	sub	sp, #36	; 0x24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	71fb      	strb	r3, [r7, #7]
 8007baa:	4613      	mov	r3, r2
 8007bac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d123      	bne.n	8007c06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007bbe:	88bb      	ldrh	r3, [r7, #4]
 8007bc0:	3303      	adds	r3, #3
 8007bc2:	089b      	lsrs	r3, r3, #2
 8007bc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61bb      	str	r3, [r7, #24]
 8007bca:	e018      	b.n	8007bfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007bcc:	79fb      	ldrb	r3, [r7, #7]
 8007bce:	031a      	lsls	r2, r3, #12
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd8:	461a      	mov	r2, r3
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	3301      	adds	r3, #1
 8007be4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	3301      	adds	r3, #1
 8007bea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d3e2      	bcc.n	8007bcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3724      	adds	r7, #36	; 0x24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b08b      	sub	sp, #44	; 0x2c
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	089b      	lsrs	r3, r3, #2
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	f003 0303 	and.w	r3, r3, #3
 8007c38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	623b      	str	r3, [r7, #32]
 8007c3e:	e014      	b.n	8007c6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	3301      	adds	r3, #1
 8007c50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c54:	3301      	adds	r3, #1
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	3301      	adds	r3, #1
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	3301      	adds	r3, #1
 8007c68:	623b      	str	r3, [r7, #32]
 8007c6a:	6a3a      	ldr	r2, [r7, #32]
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d3e6      	bcc.n	8007c40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c72:	8bfb      	ldrh	r3, [r7, #30]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d01e      	beq.n	8007cb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c82:	461a      	mov	r2, r3
 8007c84:	f107 0310 	add.w	r3, r7, #16
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	00db      	lsls	r3, r3, #3
 8007c94:	fa22 f303 	lsr.w	r3, r2, r3
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	701a      	strb	r2, [r3, #0]
      i++;
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007caa:	8bfb      	ldrh	r3, [r7, #30]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007cb0:	8bfb      	ldrh	r3, [r7, #30]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1ea      	bne.n	8007c8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	372c      	adds	r7, #44	; 0x2c
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d12c      	bne.n	8007d3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	db12      	blt.n	8007d18 <USB_EPSetStall+0x54>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00f      	beq.n	8007d18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	0151      	lsls	r1, r2, #5
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	440a      	add	r2, r1
 8007d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	e02b      	b.n	8007d92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	db12      	blt.n	8007d72 <USB_EPSetStall+0xae>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00f      	beq.n	8007d72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	0151      	lsls	r1, r2, #5
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	440a      	add	r2, r1
 8007d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d6c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	0151      	lsls	r1, r2, #5
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	440a      	add	r2, r1
 8007d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	785b      	ldrb	r3, [r3, #1]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d128      	bne.n	8007e0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	0151      	lsls	r1, r2, #5
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	440a      	add	r2, r1
 8007dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007dda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	791b      	ldrb	r3, [r3, #4]
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d003      	beq.n	8007dec <USB_EPClearStall+0x4c>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	791b      	ldrb	r3, [r3, #4]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d138      	bne.n	8007e5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	e027      	b.n	8007e5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	0151      	lsls	r1, r2, #5
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	440a      	add	r2, r1
 8007e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	791b      	ldrb	r3, [r3, #4]
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d003      	beq.n	8007e3e <USB_EPClearStall+0x9e>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	791b      	ldrb	r3, [r3, #4]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d10f      	bne.n	8007e5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	0151      	lsls	r1, r2, #5
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	440a      	add	r2, r1
 8007e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007e8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007ea0:	68f9      	ldr	r1, [r7, #12]
 8007ea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ed2:	f023 0303 	bic.w	r3, r3, #3
 8007ed6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ee6:	f023 0302 	bic.w	r3, r3, #2
 8007eea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr

08007efa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007efa:	b480      	push	{r7}
 8007efc:	b085      	sub	sp, #20
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f14:	f023 0303 	bic.w	r3, r3, #3
 8007f18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f28:	f043 0302 	orr.w	r3, r3, #2
 8007f2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b085      	sub	sp, #20
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	4013      	ands	r3, r2
 8007f52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f54:	68fb      	ldr	r3, [r7, #12]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b085      	sub	sp, #20
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	68ba      	ldr	r2, [r7, #8]
 8007f82:	4013      	ands	r3, r2
 8007f84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	0c1b      	lsrs	r3, r3, #16
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b085      	sub	sp, #20
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	b29b      	uxth	r3, r3
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr

08008006 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008006:	b480      	push	{r7}
 8008008:	b087      	sub	sp, #28
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	460b      	mov	r3, r1
 8008010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008028:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800802a:	78fb      	ldrb	r3, [r7, #3]
 800802c:	f003 030f 	and.w	r3, r3, #15
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	fa22 f303 	lsr.w	r3, r2, r3
 8008036:	01db      	lsls	r3, r3, #7
 8008038:	b2db      	uxtb	r3, r3
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	4313      	orrs	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	4013      	ands	r3, r2
 8008052:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008054:	68bb      	ldr	r3, [r7, #8]
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	f003 0301 	and.w	r3, r3, #1
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr

0800807e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800807e:	b480      	push	{r7}
 8008080:	b085      	sub	sp, #20
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008098:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800809c:	f023 0307 	bic.w	r3, r3, #7
 80080a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	460b      	mov	r3, r1
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	333c      	adds	r3, #60	; 0x3c
 80080da:	3304      	adds	r3, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	4a26      	ldr	r2, [pc, #152]	; (800817c <USB_EP0_OutStart+0xb8>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d90a      	bls.n	80080fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080f8:	d101      	bne.n	80080fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	e037      	b.n	800816e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008104:	461a      	mov	r2, r3
 8008106:	2300      	movs	r3, #0
 8008108:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800811c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800812c:	f043 0318 	orr.w	r3, r3, #24
 8008130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008140:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008144:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d10f      	bne.n	800816c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008152:	461a      	mov	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008166:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800816a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	4f54300a 	.word	0x4f54300a

08008180 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	4a13      	ldr	r2, [pc, #76]	; (80081e4 <USB_CoreReset+0x64>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d901      	bls.n	800819e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e01b      	b.n	80081d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	daf2      	bge.n	800818c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	f043 0201 	orr.w	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3301      	adds	r3, #1
 80081ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4a09      	ldr	r2, [pc, #36]	; (80081e4 <USB_CoreReset+0x64>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d901      	bls.n	80081c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e006      	b.n	80081d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d0f0      	beq.n	80081b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	00030d40 	.word	0x00030d40

080081e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80081f8:	f002 fc96 	bl	800ab28 <USBD_static_malloc>
 80081fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d109      	bne.n	8008218 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	32b0      	adds	r2, #176	; 0xb0
 800820e:	2100      	movs	r1, #0
 8008210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008214:	2302      	movs	r3, #2
 8008216:	e0d4      	b.n	80083c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008218:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800821c:	2100      	movs	r1, #0
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f002 fcf0 	bl	800ac04 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	32b0      	adds	r2, #176	; 0xb0
 800822e:	68f9      	ldr	r1, [r7, #12]
 8008230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	32b0      	adds	r2, #176	; 0xb0
 800823e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	7c1b      	ldrb	r3, [r3, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d138      	bne.n	80082c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008250:	4b5e      	ldr	r3, [pc, #376]	; (80083cc <USBD_CDC_Init+0x1e4>)
 8008252:	7819      	ldrb	r1, [r3, #0]
 8008254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008258:	2202      	movs	r2, #2
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f002 fb41 	bl	800a8e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008260:	4b5a      	ldr	r3, [pc, #360]	; (80083cc <USBD_CDC_Init+0x1e4>)
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	f003 020f 	and.w	r2, r3, #15
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	009b      	lsls	r3, r3, #2
 8008272:	440b      	add	r3, r1
 8008274:	3324      	adds	r3, #36	; 0x24
 8008276:	2201      	movs	r2, #1
 8008278:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800827a:	4b55      	ldr	r3, [pc, #340]	; (80083d0 <USBD_CDC_Init+0x1e8>)
 800827c:	7819      	ldrb	r1, [r3, #0]
 800827e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008282:	2202      	movs	r2, #2
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f002 fb2c 	bl	800a8e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800828a:	4b51      	ldr	r3, [pc, #324]	; (80083d0 <USBD_CDC_Init+0x1e8>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	f003 020f 	and.w	r2, r3, #15
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	440b      	add	r3, r1
 800829e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80082a2:	2201      	movs	r2, #1
 80082a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80082a6:	4b4b      	ldr	r3, [pc, #300]	; (80083d4 <USBD_CDC_Init+0x1ec>)
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	f003 020f 	and.w	r2, r3, #15
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	3326      	adds	r3, #38	; 0x26
 80082bc:	2210      	movs	r2, #16
 80082be:	801a      	strh	r2, [r3, #0]
 80082c0:	e035      	b.n	800832e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80082c2:	4b42      	ldr	r3, [pc, #264]	; (80083cc <USBD_CDC_Init+0x1e4>)
 80082c4:	7819      	ldrb	r1, [r3, #0]
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	2202      	movs	r2, #2
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f002 fb09 	bl	800a8e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80082d0:	4b3e      	ldr	r3, [pc, #248]	; (80083cc <USBD_CDC_Init+0x1e4>)
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	f003 020f 	and.w	r2, r3, #15
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	3324      	adds	r3, #36	; 0x24
 80082e6:	2201      	movs	r2, #1
 80082e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80082ea:	4b39      	ldr	r3, [pc, #228]	; (80083d0 <USBD_CDC_Init+0x1e8>)
 80082ec:	7819      	ldrb	r1, [r3, #0]
 80082ee:	2340      	movs	r3, #64	; 0x40
 80082f0:	2202      	movs	r2, #2
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f002 faf5 	bl	800a8e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80082f8:	4b35      	ldr	r3, [pc, #212]	; (80083d0 <USBD_CDC_Init+0x1e8>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	f003 020f 	and.w	r2, r3, #15
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	4613      	mov	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	440b      	add	r3, r1
 800830c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008310:	2201      	movs	r2, #1
 8008312:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008314:	4b2f      	ldr	r3, [pc, #188]	; (80083d4 <USBD_CDC_Init+0x1ec>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	f003 020f 	and.w	r2, r3, #15
 800831c:	6879      	ldr	r1, [r7, #4]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	440b      	add	r3, r1
 8008328:	3326      	adds	r3, #38	; 0x26
 800832a:	2210      	movs	r2, #16
 800832c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800832e:	4b29      	ldr	r3, [pc, #164]	; (80083d4 <USBD_CDC_Init+0x1ec>)
 8008330:	7819      	ldrb	r1, [r3, #0]
 8008332:	2308      	movs	r3, #8
 8008334:	2203      	movs	r2, #3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f002 fad3 	bl	800a8e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800833c:	4b25      	ldr	r3, [pc, #148]	; (80083d4 <USBD_CDC_Init+0x1ec>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	f003 020f 	and.w	r2, r3, #15
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	440b      	add	r3, r1
 8008350:	3324      	adds	r3, #36	; 0x24
 8008352:	2201      	movs	r2, #1
 8008354:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	33b0      	adds	r3, #176	; 0xb0
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	4413      	add	r3, r2
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800838c:	2302      	movs	r3, #2
 800838e:	e018      	b.n	80083c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7c1b      	ldrb	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008398:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <USBD_CDC_Init+0x1e8>)
 800839a:	7819      	ldrb	r1, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f002 fb8a 	bl	800aac0 <USBD_LL_PrepareReceive>
 80083ac:	e008      	b.n	80083c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80083ae:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <USBD_CDC_Init+0x1e8>)
 80083b0:	7819      	ldrb	r1, [r3, #0]
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80083b8:	2340      	movs	r3, #64	; 0x40
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f002 fb80 	bl	800aac0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	2000009b 	.word	0x2000009b
 80083d0:	2000009c 	.word	0x2000009c
 80083d4:	2000009d 	.word	0x2000009d

080083d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	460b      	mov	r3, r1
 80083e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80083e4:	4b3a      	ldr	r3, [pc, #232]	; (80084d0 <USBD_CDC_DeInit+0xf8>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f002 fa9f 	bl	800a92e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80083f0:	4b37      	ldr	r3, [pc, #220]	; (80084d0 <USBD_CDC_DeInit+0xf8>)
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	f003 020f 	and.w	r2, r3, #15
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	440b      	add	r3, r1
 8008404:	3324      	adds	r3, #36	; 0x24
 8008406:	2200      	movs	r2, #0
 8008408:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800840a:	4b32      	ldr	r3, [pc, #200]	; (80084d4 <USBD_CDC_DeInit+0xfc>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f002 fa8c 	bl	800a92e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008416:	4b2f      	ldr	r3, [pc, #188]	; (80084d4 <USBD_CDC_DeInit+0xfc>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	f003 020f 	and.w	r2, r3, #15
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800842e:	2200      	movs	r2, #0
 8008430:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008432:	4b29      	ldr	r3, [pc, #164]	; (80084d8 <USBD_CDC_DeInit+0x100>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	4619      	mov	r1, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f002 fa78 	bl	800a92e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800843e:	4b26      	ldr	r3, [pc, #152]	; (80084d8 <USBD_CDC_DeInit+0x100>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f003 020f 	and.w	r2, r3, #15
 8008446:	6879      	ldr	r1, [r7, #4]
 8008448:	4613      	mov	r3, r2
 800844a:	009b      	lsls	r3, r3, #2
 800844c:	4413      	add	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	440b      	add	r3, r1
 8008452:	3324      	adds	r3, #36	; 0x24
 8008454:	2200      	movs	r2, #0
 8008456:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008458:	4b1f      	ldr	r3, [pc, #124]	; (80084d8 <USBD_CDC_DeInit+0x100>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	f003 020f 	and.w	r2, r3, #15
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	3326      	adds	r3, #38	; 0x26
 800846e:	2200      	movs	r2, #0
 8008470:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	32b0      	adds	r2, #176	; 0xb0
 800847c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01f      	beq.n	80084c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	33b0      	adds	r3, #176	; 0xb0
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	32b0      	adds	r2, #176	; 0xb0
 80084a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f002 fb4c 	bl	800ab44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	32b0      	adds	r2, #176	; 0xb0
 80084b6:	2100      	movs	r1, #0
 80084b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	2000009b 	.word	0x2000009b
 80084d4:	2000009c 	.word	0x2000009c
 80084d8:	2000009d 	.word	0x2000009d

080084dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	32b0      	adds	r2, #176	; 0xb0
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008508:	2303      	movs	r3, #3
 800850a:	e0bf      	b.n	800868c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008514:	2b00      	cmp	r3, #0
 8008516:	d050      	beq.n	80085ba <USBD_CDC_Setup+0xde>
 8008518:	2b20      	cmp	r3, #32
 800851a:	f040 80af 	bne.w	800867c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	88db      	ldrh	r3, [r3, #6]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d03a      	beq.n	800859c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	b25b      	sxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	da1b      	bge.n	8008568 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	33b0      	adds	r3, #176	; 0xb0
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008546:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	88d2      	ldrh	r2, [r2, #6]
 800854c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	88db      	ldrh	r3, [r3, #6]
 8008552:	2b07      	cmp	r3, #7
 8008554:	bf28      	it	cs
 8008556:	2307      	movcs	r3, #7
 8008558:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	89fa      	ldrh	r2, [r7, #14]
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 fd89 	bl	800a078 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008566:	e090      	b.n	800868a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	785a      	ldrb	r2, [r3, #1]
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	88db      	ldrh	r3, [r3, #6]
 8008576:	2b3f      	cmp	r3, #63	; 0x3f
 8008578:	d803      	bhi.n	8008582 <USBD_CDC_Setup+0xa6>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	88db      	ldrh	r3, [r3, #6]
 800857e:	b2da      	uxtb	r2, r3
 8008580:	e000      	b.n	8008584 <USBD_CDC_Setup+0xa8>
 8008582:	2240      	movs	r2, #64	; 0x40
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800858a:	6939      	ldr	r1, [r7, #16]
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008592:	461a      	mov	r2, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f001 fd9b 	bl	800a0d0 <USBD_CtlPrepareRx>
      break;
 800859a:	e076      	b.n	800868a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	33b0      	adds	r3, #176	; 0xb0
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	7850      	ldrb	r0, [r2, #1]
 80085b2:	2200      	movs	r2, #0
 80085b4:	6839      	ldr	r1, [r7, #0]
 80085b6:	4798      	blx	r3
      break;
 80085b8:	e067      	b.n	800868a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b0b      	cmp	r3, #11
 80085c0:	d851      	bhi.n	8008666 <USBD_CDC_Setup+0x18a>
 80085c2:	a201      	add	r2, pc, #4	; (adr r2, 80085c8 <USBD_CDC_Setup+0xec>)
 80085c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c8:	080085f9 	.word	0x080085f9
 80085cc:	08008675 	.word	0x08008675
 80085d0:	08008667 	.word	0x08008667
 80085d4:	08008667 	.word	0x08008667
 80085d8:	08008667 	.word	0x08008667
 80085dc:	08008667 	.word	0x08008667
 80085e0:	08008667 	.word	0x08008667
 80085e4:	08008667 	.word	0x08008667
 80085e8:	08008667 	.word	0x08008667
 80085ec:	08008667 	.word	0x08008667
 80085f0:	08008623 	.word	0x08008623
 80085f4:	0800864d 	.word	0x0800864d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b03      	cmp	r3, #3
 8008602:	d107      	bne.n	8008614 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008604:	f107 030a 	add.w	r3, r7, #10
 8008608:	2202      	movs	r2, #2
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f001 fd33 	bl	800a078 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008612:	e032      	b.n	800867a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fcbd 	bl	8009f96 <USBD_CtlError>
            ret = USBD_FAIL;
 800861c:	2303      	movs	r3, #3
 800861e:	75fb      	strb	r3, [r7, #23]
          break;
 8008620:	e02b      	b.n	800867a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008628:	b2db      	uxtb	r3, r3
 800862a:	2b03      	cmp	r3, #3
 800862c:	d107      	bne.n	800863e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800862e:	f107 030d 	add.w	r3, r7, #13
 8008632:	2201      	movs	r2, #1
 8008634:	4619      	mov	r1, r3
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 fd1e 	bl	800a078 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800863c:	e01d      	b.n	800867a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f001 fca8 	bl	8009f96 <USBD_CtlError>
            ret = USBD_FAIL;
 8008646:	2303      	movs	r3, #3
 8008648:	75fb      	strb	r3, [r7, #23]
          break;
 800864a:	e016      	b.n	800867a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b03      	cmp	r3, #3
 8008656:	d00f      	beq.n	8008678 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 fc9b 	bl	8009f96 <USBD_CtlError>
            ret = USBD_FAIL;
 8008660:	2303      	movs	r3, #3
 8008662:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008664:	e008      	b.n	8008678 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f001 fc94 	bl	8009f96 <USBD_CtlError>
          ret = USBD_FAIL;
 800866e:	2303      	movs	r3, #3
 8008670:	75fb      	strb	r3, [r7, #23]
          break;
 8008672:	e002      	b.n	800867a <USBD_CDC_Setup+0x19e>
          break;
 8008674:	bf00      	nop
 8008676:	e008      	b.n	800868a <USBD_CDC_Setup+0x1ae>
          break;
 8008678:	bf00      	nop
      }
      break;
 800867a:	e006      	b.n	800868a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fc89 	bl	8009f96 <USBD_CtlError>
      ret = USBD_FAIL;
 8008684:	2303      	movs	r3, #3
 8008686:	75fb      	strb	r3, [r7, #23]
      break;
 8008688:	bf00      	nop
  }

  return (uint8_t)ret;
 800868a:	7dfb      	ldrb	r3, [r7, #23]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3718      	adds	r7, #24
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	32b0      	adds	r2, #176	; 0xb0
 80086b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d101      	bne.n	80086be <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80086ba:	2303      	movs	r3, #3
 80086bc:	e065      	b.n	800878a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	32b0      	adds	r2, #176	; 0xb0
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	f003 020f 	and.w	r2, r3, #15
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	3318      	adds	r3, #24
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d02f      	beq.n	8008748 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80086e8:	78fb      	ldrb	r3, [r7, #3]
 80086ea:	f003 020f 	and.w	r2, r3, #15
 80086ee:	6879      	ldr	r1, [r7, #4]
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	440b      	add	r3, r1
 80086fa:	3318      	adds	r3, #24
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	f003 010f 	and.w	r1, r3, #15
 8008704:	68f8      	ldr	r0, [r7, #12]
 8008706:	460b      	mov	r3, r1
 8008708:	00db      	lsls	r3, r3, #3
 800870a:	440b      	add	r3, r1
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4403      	add	r3, r0
 8008710:	3348      	adds	r3, #72	; 0x48
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	fbb2 f1f3 	udiv	r1, r2, r3
 8008718:	fb01 f303 	mul.w	r3, r1, r3
 800871c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800871e:	2b00      	cmp	r3, #0
 8008720:	d112      	bne.n	8008748 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	f003 020f 	and.w	r2, r3, #15
 8008728:	6879      	ldr	r1, [r7, #4]
 800872a:	4613      	mov	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4413      	add	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	440b      	add	r3, r1
 8008734:	3318      	adds	r3, #24
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800873a:	78f9      	ldrb	r1, [r7, #3]
 800873c:	2300      	movs	r3, #0
 800873e:	2200      	movs	r2, #0
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f002 f99c 	bl	800aa7e <USBD_LL_Transmit>
 8008746:	e01f      	b.n	8008788 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	2200      	movs	r2, #0
 800874c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	33b0      	adds	r3, #176	; 0xb0
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d010      	beq.n	8008788 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	33b0      	adds	r3, #176	; 0xb0
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008784:	78fa      	ldrb	r2, [r7, #3]
 8008786:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b084      	sub	sp, #16
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	460b      	mov	r3, r1
 800879c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	32b0      	adds	r2, #176	; 0xb0
 80087a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	32b0      	adds	r2, #176	; 0xb0
 80087b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d101      	bne.n	80087c4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e01a      	b.n	80087fa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f002 f99a 	bl	800ab02 <USBD_LL_GetRxDataSize>
 80087ce:	4602      	mov	r2, r0
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	33b0      	adds	r3, #176	; 0xb0
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80087f4:	4611      	mov	r1, r2
 80087f6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	32b0      	adds	r2, #176	; 0xb0
 8008814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008820:	2303      	movs	r3, #3
 8008822:	e025      	b.n	8008870 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	33b0      	adds	r3, #176	; 0xb0
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4413      	add	r3, r2
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d01a      	beq.n	800886e <USBD_CDC_EP0_RxReady+0x6c>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800883e:	2bff      	cmp	r3, #255	; 0xff
 8008840:	d015      	beq.n	800886e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	33b0      	adds	r3, #176	; 0xb0
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	4413      	add	r3, r2
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800885a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008862:	b292      	uxth	r2, r2
 8008864:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	22ff      	movs	r2, #255	; 0xff
 800886a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b086      	sub	sp, #24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008880:	2182      	movs	r1, #130	; 0x82
 8008882:	4818      	ldr	r0, [pc, #96]	; (80088e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008884:	f000 fd4f 	bl	8009326 <USBD_GetEpDesc>
 8008888:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800888a:	2101      	movs	r1, #1
 800888c:	4815      	ldr	r0, [pc, #84]	; (80088e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800888e:	f000 fd4a 	bl	8009326 <USBD_GetEpDesc>
 8008892:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008894:	2181      	movs	r1, #129	; 0x81
 8008896:	4813      	ldr	r0, [pc, #76]	; (80088e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008898:	f000 fd45 	bl	8009326 <USBD_GetEpDesc>
 800889c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	2210      	movs	r2, #16
 80088a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d006      	beq.n	80088be <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088b8:	711a      	strb	r2, [r3, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d006      	beq.n	80088d2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088cc:	711a      	strb	r2, [r3, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2243      	movs	r2, #67	; 0x43
 80088d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80088d8:	4b02      	ldr	r3, [pc, #8]	; (80088e4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3718      	adds	r7, #24
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20000058 	.word	0x20000058

080088e8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b086      	sub	sp, #24
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80088f0:	2182      	movs	r1, #130	; 0x82
 80088f2:	4818      	ldr	r0, [pc, #96]	; (8008954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088f4:	f000 fd17 	bl	8009326 <USBD_GetEpDesc>
 80088f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80088fa:	2101      	movs	r1, #1
 80088fc:	4815      	ldr	r0, [pc, #84]	; (8008954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80088fe:	f000 fd12 	bl	8009326 <USBD_GetEpDesc>
 8008902:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008904:	2181      	movs	r1, #129	; 0x81
 8008906:	4813      	ldr	r0, [pc, #76]	; (8008954 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008908:	f000 fd0d 	bl	8009326 <USBD_GetEpDesc>
 800890c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	2210      	movs	r2, #16
 8008918:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d006      	beq.n	800892e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2200      	movs	r2, #0
 8008924:	711a      	strb	r2, [r3, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f042 0202 	orr.w	r2, r2, #2
 800892c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d006      	beq.n	8008942 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	711a      	strb	r2, [r3, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f042 0202 	orr.w	r2, r2, #2
 8008940:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2243      	movs	r2, #67	; 0x43
 8008946:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008948:	4b02      	ldr	r3, [pc, #8]	; (8008954 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800894a:	4618      	mov	r0, r3
 800894c:	3718      	adds	r7, #24
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20000058 	.word	0x20000058

08008958 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008960:	2182      	movs	r1, #130	; 0x82
 8008962:	4818      	ldr	r0, [pc, #96]	; (80089c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008964:	f000 fcdf 	bl	8009326 <USBD_GetEpDesc>
 8008968:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800896a:	2101      	movs	r1, #1
 800896c:	4815      	ldr	r0, [pc, #84]	; (80089c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800896e:	f000 fcda 	bl	8009326 <USBD_GetEpDesc>
 8008972:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008974:	2181      	movs	r1, #129	; 0x81
 8008976:	4813      	ldr	r0, [pc, #76]	; (80089c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008978:	f000 fcd5 	bl	8009326 <USBD_GetEpDesc>
 800897c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d002      	beq.n	800898a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2210      	movs	r2, #16
 8008988:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d006      	beq.n	800899e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008990:	693b      	ldr	r3, [r7, #16]
 8008992:	2200      	movs	r2, #0
 8008994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008998:	711a      	strb	r2, [r3, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d006      	beq.n	80089b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ac:	711a      	strb	r2, [r3, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2243      	movs	r2, #67	; 0x43
 80089b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089b8:	4b02      	ldr	r3, [pc, #8]	; (80089c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000058 	.word	0x20000058

080089c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	220a      	movs	r2, #10
 80089d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80089d6:	4b03      	ldr	r3, [pc, #12]	; (80089e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	20000014 	.word	0x20000014

080089e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d101      	bne.n	80089fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e009      	b.n	8008a10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	33b0      	adds	r3, #176	; 0xb0
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	32b0      	adds	r2, #176	; 0xb0
 8008a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a36:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e008      	b.n	8008a54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	371c      	adds	r7, #28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	32b0      	adds	r2, #176	; 0xb0
 8008a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e004      	b.n	8008a8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	683a      	ldr	r2, [r7, #0]
 8008a88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
	...

08008a9c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	32b0      	adds	r2, #176	; 0xb0
 8008aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	32b0      	adds	r2, #176	; 0xb0
 8008ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008aca:	2303      	movs	r3, #3
 8008acc:	e025      	b.n	8008b1a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d11f      	bne.n	8008b18 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008ae0:	4b10      	ldr	r3, [pc, #64]	; (8008b24 <USBD_CDC_TransmitPacket+0x88>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	f003 020f 	and.w	r2, r3, #15
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4613      	mov	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4403      	add	r3, r0
 8008afa:	3318      	adds	r3, #24
 8008afc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008afe:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <USBD_CDC_TransmitPacket+0x88>)
 8008b00:	7819      	ldrb	r1, [r3, #0]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f001 ffb5 	bl	800aa7e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008b14:	2300      	movs	r3, #0
 8008b16:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	2000009b 	.word	0x2000009b

08008b28 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	32b0      	adds	r2, #176	; 0xb0
 8008b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	32b0      	adds	r2, #176	; 0xb0
 8008b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e018      	b.n	8008b88 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	7c1b      	ldrb	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b5e:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <USBD_CDC_ReceivePacket+0x68>)
 8008b60:	7819      	ldrb	r1, [r3, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 ffa7 	bl	800aac0 <USBD_LL_PrepareReceive>
 8008b72:	e008      	b.n	8008b86 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b74:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <USBD_CDC_ReceivePacket+0x68>)
 8008b76:	7819      	ldrb	r1, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008b7e:	2340      	movs	r3, #64	; 0x40
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 ff9d 	bl	800aac0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3710      	adds	r7, #16
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	2000009c 	.word	0x2000009c

08008b94 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d101      	bne.n	8008bac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e01f      	b.n	8008bec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	79fa      	ldrb	r2, [r7, #7]
 8008bde:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f001 fe11 	bl	800a808 <USBD_LL_Init>
 8008be6:	4603      	mov	r3, r0
 8008be8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3718      	adds	r7, #24
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d101      	bne.n	8008c0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e025      	b.n	8008c58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	32ae      	adds	r2, #174	; 0xae
 8008c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00f      	beq.n	8008c48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	32ae      	adds	r2, #174	; 0xae
 8008c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	f107 020e 	add.w	r2, r7, #14
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	4602      	mov	r2, r0
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 fe1f 	bl	800a8ac <USBD_LL_Start>
 8008c6e:	4603      	mov	r3, r0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3708      	adds	r7, #8
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	460b      	mov	r3, r1
 8008c98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d009      	beq.n	8008cbc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	78fa      	ldrb	r2, [r7, #3]
 8008cb2:	4611      	mov	r1, r2
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	4798      	blx	r3
 8008cb8:	4603      	mov	r3, r0
 8008cba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3710      	adds	r7, #16
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	78fa      	ldrb	r2, [r7, #3]
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	4798      	blx	r3
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008cec:	2303      	movs	r3, #3
 8008cee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 f908 	bl	8009f22 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d20:	461a      	mov	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d2e:	f003 031f 	and.w	r3, r3, #31
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d01a      	beq.n	8008d6c <USBD_LL_SetupStage+0x72>
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d822      	bhi.n	8008d80 <USBD_LL_SetupStage+0x86>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d002      	beq.n	8008d44 <USBD_LL_SetupStage+0x4a>
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d00a      	beq.n	8008d58 <USBD_LL_SetupStage+0x5e>
 8008d42:	e01d      	b.n	8008d80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fb5f 	bl	8009410 <USBD_StdDevReq>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73fb      	strb	r3, [r7, #15]
      break;
 8008d56:	e020      	b.n	8008d9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fbc7 	bl	80094f4 <USBD_StdItfReq>
 8008d66:	4603      	mov	r3, r0
 8008d68:	73fb      	strb	r3, [r7, #15]
      break;
 8008d6a:	e016      	b.n	8008d9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fc29 	bl	80095cc <USBD_StdEPReq>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d7e:	e00c      	b.n	8008d9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 fdec 	bl	800a96c <USBD_LL_StallEP>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
      break;
 8008d98:	bf00      	nop
  }

  return ret;
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	460b      	mov	r3, r1
 8008dae:	607a      	str	r2, [r7, #4]
 8008db0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d16e      	bne.n	8008e9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	f040 8098 	bne.w	8008f00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d913      	bls.n	8008e04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	689a      	ldr	r2, [r3, #8]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	1ad2      	subs	r2, r2, r3
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	4293      	cmp	r3, r2
 8008df4:	bf28      	it	cs
 8008df6:	4613      	movcs	r3, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f001 f984 	bl	800a10a <USBD_CtlContinueRx>
 8008e02:	e07d      	b.n	8008f00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e0a:	f003 031f 	and.w	r3, r3, #31
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d014      	beq.n	8008e3c <USBD_LL_DataOutStage+0x98>
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d81d      	bhi.n	8008e52 <USBD_LL_DataOutStage+0xae>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <USBD_LL_DataOutStage+0x7c>
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d003      	beq.n	8008e26 <USBD_LL_DataOutStage+0x82>
 8008e1e:	e018      	b.n	8008e52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	75bb      	strb	r3, [r7, #22]
            break;
 8008e24:	e018      	b.n	8008e58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	4619      	mov	r1, r3
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 fa5e 	bl	80092f2 <USBD_CoreFindIF>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75bb      	strb	r3, [r7, #22]
            break;
 8008e3a:	e00d      	b.n	8008e58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	4619      	mov	r1, r3
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fa60 	bl	800930c <USBD_CoreFindEP>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	75bb      	strb	r3, [r7, #22]
            break;
 8008e50:	e002      	b.n	8008e58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	75bb      	strb	r3, [r7, #22]
            break;
 8008e56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e58:	7dbb      	ldrb	r3, [r7, #22]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d119      	bne.n	8008e92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d113      	bne.n	8008e92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e6a:	7dba      	ldrb	r2, [r7, #22]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	32ae      	adds	r2, #174	; 0xae
 8008e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008e7a:	7dba      	ldrb	r2, [r7, #22]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e82:	7dba      	ldrb	r2, [r7, #22]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	32ae      	adds	r2, #174	; 0xae
 8008e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f001 f94a 	bl	800a12c <USBD_CtlSendStatus>
 8008e98:	e032      	b.n	8008f00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008e9a:	7afb      	ldrb	r3, [r7, #11]
 8008e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 fa31 	bl	800930c <USBD_CoreFindEP>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eae:	7dbb      	ldrb	r3, [r7, #22]
 8008eb0:	2bff      	cmp	r3, #255	; 0xff
 8008eb2:	d025      	beq.n	8008f00 <USBD_LL_DataOutStage+0x15c>
 8008eb4:	7dbb      	ldrb	r3, [r7, #22]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d122      	bne.n	8008f00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d117      	bne.n	8008ef6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ec6:	7dba      	ldrb	r2, [r7, #22]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	32ae      	adds	r2, #174	; 0xae
 8008ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00f      	beq.n	8008ef6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008ed6:	7dba      	ldrb	r2, [r7, #22]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008ede:	7dba      	ldrb	r2, [r7, #22]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	32ae      	adds	r2, #174	; 0xae
 8008ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee8:	699b      	ldr	r3, [r3, #24]
 8008eea:	7afa      	ldrb	r2, [r7, #11]
 8008eec:	4611      	mov	r1, r2
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	4798      	blx	r3
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008ef6:	7dfb      	ldrb	r3, [r7, #23]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d001      	beq.n	8008f00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008efc:	7dfb      	ldrb	r3, [r7, #23]
 8008efe:	e000      	b.n	8008f02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f00:	2300      	movs	r3, #0
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b086      	sub	sp, #24
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	460b      	mov	r3, r1
 8008f14:	607a      	str	r2, [r7, #4]
 8008f16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d16f      	bne.n	8008ffe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3314      	adds	r3, #20
 8008f22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d15a      	bne.n	8008fe4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	689a      	ldr	r2, [r3, #8]
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d914      	bls.n	8008f64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	1ad2      	subs	r2, r2, r3
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	6879      	ldr	r1, [r7, #4]
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f001 f8ac 	bl	800a0ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f56:	2300      	movs	r3, #0
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f001 fdaf 	bl	800aac0 <USBD_LL_PrepareReceive>
 8008f62:	e03f      	b.n	8008fe4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	68da      	ldr	r2, [r3, #12]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d11c      	bne.n	8008faa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d316      	bcc.n	8008faa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d20f      	bcs.n	8008faa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f001 f88d 	bl	800a0ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f001 fd8c 	bl	800aac0 <USBD_LL_PrepareReceive>
 8008fa8:	e01c      	b.n	8008fe4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d10f      	bne.n	8008fd6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d009      	beq.n	8008fd6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fd6:	2180      	movs	r1, #128	; 0x80
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f001 fcc7 	bl	800a96c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f001 f8b7 	bl	800a152 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d03a      	beq.n	8009064 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f7ff fe42 	bl	8008c78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ffc:	e032      	b.n	8009064 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008ffe:	7afb      	ldrb	r3, [r7, #11]
 8009000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009004:	b2db      	uxtb	r3, r3
 8009006:	4619      	mov	r1, r3
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 f97f 	bl	800930c <USBD_CoreFindEP>
 800900e:	4603      	mov	r3, r0
 8009010:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009012:	7dfb      	ldrb	r3, [r7, #23]
 8009014:	2bff      	cmp	r3, #255	; 0xff
 8009016:	d025      	beq.n	8009064 <USBD_LL_DataInStage+0x15a>
 8009018:	7dfb      	ldrb	r3, [r7, #23]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d122      	bne.n	8009064 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b03      	cmp	r3, #3
 8009028:	d11c      	bne.n	8009064 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800902a:	7dfa      	ldrb	r2, [r7, #23]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	32ae      	adds	r2, #174	; 0xae
 8009030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d014      	beq.n	8009064 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800903a:	7dfa      	ldrb	r2, [r7, #23]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009042:	7dfa      	ldrb	r2, [r7, #23]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	32ae      	adds	r2, #174	; 0xae
 8009048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	7afa      	ldrb	r2, [r7, #11]
 8009050:	4611      	mov	r1, r2
 8009052:	68f8      	ldr	r0, [r7, #12]
 8009054:	4798      	blx	r3
 8009056:	4603      	mov	r3, r0
 8009058:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800905a:	7dbb      	ldrb	r3, [r7, #22]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009060:	7dbb      	ldrb	r3, [r7, #22]
 8009062:	e000      	b.n	8009066 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d014      	beq.n	80090d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00e      	beq.n	80090d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	6852      	ldr	r2, [r2, #4]
 80090c2:	b2d2      	uxtb	r2, r2
 80090c4:	4611      	mov	r1, r2
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	4798      	blx	r3
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80090d0:	2303      	movs	r3, #3
 80090d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090d4:	2340      	movs	r3, #64	; 0x40
 80090d6:	2200      	movs	r2, #0
 80090d8:	2100      	movs	r1, #0
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 fc01 	bl	800a8e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2240      	movs	r2, #64	; 0x40
 80090ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090f0:	2340      	movs	r3, #64	; 0x40
 80090f2:	2200      	movs	r2, #0
 80090f4:	2180      	movs	r1, #128	; 0x80
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f001 fbf3 	bl	800a8e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2240      	movs	r2, #64	; 0x40
 8009106:	621a      	str	r2, [r3, #32]

  return ret;
 8009108:	7bfb      	ldrb	r3, [r7, #15]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009112:	b480      	push	{r7}
 8009114:	b083      	sub	sp, #12
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	460b      	mov	r3, r1
 800911c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	78fa      	ldrb	r2, [r7, #3]
 8009122:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009140:	b2da      	uxtb	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2204      	movs	r2, #4
 800914c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b04      	cmp	r3, #4
 8009170:	d106      	bne.n	8009180 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009178:	b2da      	uxtb	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b082      	sub	sp, #8
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d110      	bne.n	80091c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00b      	beq.n	80091c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d005      	beq.n	80091c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b082      	sub	sp, #8
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	460b      	mov	r3, r1
 80091d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	32ae      	adds	r2, #174	; 0xae
 80091e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e01c      	b.n	800922a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091f6:	b2db      	uxtb	r3, r3
 80091f8:	2b03      	cmp	r3, #3
 80091fa:	d115      	bne.n	8009228 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32ae      	adds	r2, #174	; 0xae
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00b      	beq.n	8009228 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32ae      	adds	r2, #174	; 0xae
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	4611      	mov	r1, r2
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	460b      	mov	r3, r1
 800923c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	32ae      	adds	r2, #174	; 0xae
 8009248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009250:	2303      	movs	r3, #3
 8009252:	e01c      	b.n	800928e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b03      	cmp	r3, #3
 800925e:	d115      	bne.n	800928c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	32ae      	adds	r2, #174	; 0xae
 800926a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00b      	beq.n	800928c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	32ae      	adds	r2, #174	; 0xae
 800927e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4611      	mov	r1, r2
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009296:	b480      	push	{r7}
 8009298:	b083      	sub	sp, #12
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00e      	beq.n	80092e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	687a      	ldr	r2, [r7, #4]
 80092d4:	6852      	ldr	r2, [r2, #4]
 80092d6:	b2d2      	uxtb	r2, r2
 80092d8:	4611      	mov	r1, r2
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	4798      	blx	r3
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80092e4:	2303      	movs	r3, #3
 80092e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80092f2:	b480      	push	{r7}
 80092f4:	b083      	sub	sp, #12
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80092fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009300:	4618      	mov	r0, r3
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009318:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800931a:	4618      	mov	r0, r3
 800931c:	370c      	adds	r7, #12
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b086      	sub	sp, #24
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800933a:	2300      	movs	r3, #0
 800933c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	885b      	ldrh	r3, [r3, #2]
 8009342:	b29a      	uxth	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	b29b      	uxth	r3, r3
 800934a:	429a      	cmp	r2, r3
 800934c:	d920      	bls.n	8009390 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	b29b      	uxth	r3, r3
 8009354:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009356:	e013      	b.n	8009380 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009358:	f107 030a 	add.w	r3, r7, #10
 800935c:	4619      	mov	r1, r3
 800935e:	6978      	ldr	r0, [r7, #20]
 8009360:	f000 f81b 	bl	800939a <USBD_GetNextDesc>
 8009364:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	785b      	ldrb	r3, [r3, #1]
 800936a:	2b05      	cmp	r3, #5
 800936c:	d108      	bne.n	8009380 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	789b      	ldrb	r3, [r3, #2]
 8009376:	78fa      	ldrb	r2, [r7, #3]
 8009378:	429a      	cmp	r2, r3
 800937a:	d008      	beq.n	800938e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	885b      	ldrh	r3, [r3, #2]
 8009384:	b29a      	uxth	r2, r3
 8009386:	897b      	ldrh	r3, [r7, #10]
 8009388:	429a      	cmp	r2, r3
 800938a:	d8e5      	bhi.n	8009358 <USBD_GetEpDesc+0x32>
 800938c:	e000      	b.n	8009390 <USBD_GetEpDesc+0x6a>
          break;
 800938e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009390:	693b      	ldr	r3, [r7, #16]
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800939a:	b480      	push	{r7}
 800939c:	b085      	sub	sp, #20
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
 80093a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	881a      	ldrh	r2, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	4413      	add	r3, r2
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	4413      	add	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80093c6:	68fb      	ldr	r3, [r7, #12]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	3301      	adds	r3, #1
 80093ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80093f2:	8a3b      	ldrh	r3, [r7, #16]
 80093f4:	021b      	lsls	r3, r3, #8
 80093f6:	b21a      	sxth	r2, r3
 80093f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	b21b      	sxth	r3, r3
 8009400:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009402:	89fb      	ldrh	r3, [r7, #14]
}
 8009404:	4618      	mov	r0, r3
 8009406:	371c      	adds	r7, #28
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009426:	2b40      	cmp	r3, #64	; 0x40
 8009428:	d005      	beq.n	8009436 <USBD_StdDevReq+0x26>
 800942a:	2b40      	cmp	r3, #64	; 0x40
 800942c:	d857      	bhi.n	80094de <USBD_StdDevReq+0xce>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00f      	beq.n	8009452 <USBD_StdDevReq+0x42>
 8009432:	2b20      	cmp	r3, #32
 8009434:	d153      	bne.n	80094de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	32ae      	adds	r2, #174	; 0xae
 8009440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]
      break;
 8009450:	e04a      	b.n	80094e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	2b09      	cmp	r3, #9
 8009458:	d83b      	bhi.n	80094d2 <USBD_StdDevReq+0xc2>
 800945a:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <USBD_StdDevReq+0x50>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	080094b5 	.word	0x080094b5
 8009464:	080094c9 	.word	0x080094c9
 8009468:	080094d3 	.word	0x080094d3
 800946c:	080094bf 	.word	0x080094bf
 8009470:	080094d3 	.word	0x080094d3
 8009474:	08009493 	.word	0x08009493
 8009478:	08009489 	.word	0x08009489
 800947c:	080094d3 	.word	0x080094d3
 8009480:	080094ab 	.word	0x080094ab
 8009484:	0800949d 	.word	0x0800949d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009488:	6839      	ldr	r1, [r7, #0]
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa3c 	bl	8009908 <USBD_GetDescriptor>
          break;
 8009490:	e024      	b.n	80094dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fba1 	bl	8009bdc <USBD_SetAddress>
          break;
 800949a:	e01f      	b.n	80094dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fbe0 	bl	8009c64 <USBD_SetConfig>
 80094a4:	4603      	mov	r3, r0
 80094a6:	73fb      	strb	r3, [r7, #15]
          break;
 80094a8:	e018      	b.n	80094dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 fc83 	bl	8009db8 <USBD_GetConfig>
          break;
 80094b2:	e013      	b.n	80094dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fcb4 	bl	8009e24 <USBD_GetStatus>
          break;
 80094bc:	e00e      	b.n	80094dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fce3 	bl	8009e8c <USBD_SetFeature>
          break;
 80094c6:	e009      	b.n	80094dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fd07 	bl	8009ede <USBD_ClrFeature>
          break;
 80094d0:	e004      	b.n	80094dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fd5e 	bl	8009f96 <USBD_CtlError>
          break;
 80094da:	bf00      	nop
      }
      break;
 80094dc:	e004      	b.n	80094e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fd58 	bl	8009f96 <USBD_CtlError>
      break;
 80094e6:	bf00      	nop
  }

  return ret;
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop

080094f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800950a:	2b40      	cmp	r3, #64	; 0x40
 800950c:	d005      	beq.n	800951a <USBD_StdItfReq+0x26>
 800950e:	2b40      	cmp	r3, #64	; 0x40
 8009510:	d852      	bhi.n	80095b8 <USBD_StdItfReq+0xc4>
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <USBD_StdItfReq+0x26>
 8009516:	2b20      	cmp	r3, #32
 8009518:	d14e      	bne.n	80095b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009520:	b2db      	uxtb	r3, r3
 8009522:	3b01      	subs	r3, #1
 8009524:	2b02      	cmp	r3, #2
 8009526:	d840      	bhi.n	80095aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	889b      	ldrh	r3, [r3, #4]
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b01      	cmp	r3, #1
 8009530:	d836      	bhi.n	80095a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	889b      	ldrh	r3, [r3, #4]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7ff fed9 	bl	80092f2 <USBD_CoreFindIF>
 8009540:	4603      	mov	r3, r0
 8009542:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009544:	7bbb      	ldrb	r3, [r7, #14]
 8009546:	2bff      	cmp	r3, #255	; 0xff
 8009548:	d01d      	beq.n	8009586 <USBD_StdItfReq+0x92>
 800954a:	7bbb      	ldrb	r3, [r7, #14]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d11a      	bne.n	8009586 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009550:	7bba      	ldrb	r2, [r7, #14]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	32ae      	adds	r2, #174	; 0xae
 8009556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00f      	beq.n	8009580 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009560:	7bba      	ldrb	r2, [r7, #14]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009568:	7bba      	ldrb	r2, [r7, #14]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	32ae      	adds	r2, #174	; 0xae
 800956e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
 800957a:	4603      	mov	r3, r0
 800957c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800957e:	e004      	b.n	800958a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009580:	2303      	movs	r3, #3
 8009582:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009584:	e001      	b.n	800958a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009586:	2303      	movs	r3, #3
 8009588:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	88db      	ldrh	r3, [r3, #6]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d110      	bne.n	80095b4 <USBD_StdItfReq+0xc0>
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10d      	bne.n	80095b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fdc7 	bl	800a12c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800959e:	e009      	b.n	80095b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fcf7 	bl	8009f96 <USBD_CtlError>
          break;
 80095a8:	e004      	b.n	80095b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fcf2 	bl	8009f96 <USBD_CtlError>
          break;
 80095b2:	e000      	b.n	80095b6 <USBD_StdItfReq+0xc2>
          break;
 80095b4:	bf00      	nop
      }
      break;
 80095b6:	e004      	b.n	80095c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fceb 	bl	8009f96 <USBD_CtlError>
      break;
 80095c0:	bf00      	nop
  }

  return ret;
 80095c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095e8:	2b40      	cmp	r3, #64	; 0x40
 80095ea:	d007      	beq.n	80095fc <USBD_StdEPReq+0x30>
 80095ec:	2b40      	cmp	r3, #64	; 0x40
 80095ee:	f200 817f 	bhi.w	80098f0 <USBD_StdEPReq+0x324>
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d02a      	beq.n	800964c <USBD_StdEPReq+0x80>
 80095f6:	2b20      	cmp	r3, #32
 80095f8:	f040 817a 	bne.w	80098f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80095fc:	7bbb      	ldrb	r3, [r7, #14]
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f7ff fe83 	bl	800930c <USBD_CoreFindEP>
 8009606:	4603      	mov	r3, r0
 8009608:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800960a:	7b7b      	ldrb	r3, [r7, #13]
 800960c:	2bff      	cmp	r3, #255	; 0xff
 800960e:	f000 8174 	beq.w	80098fa <USBD_StdEPReq+0x32e>
 8009612:	7b7b      	ldrb	r3, [r7, #13]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f040 8170 	bne.w	80098fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800961a:	7b7a      	ldrb	r2, [r7, #13]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009622:	7b7a      	ldrb	r2, [r7, #13]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	32ae      	adds	r2, #174	; 0xae
 8009628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 8163 	beq.w	80098fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009634:	7b7a      	ldrb	r2, [r7, #13]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	32ae      	adds	r2, #174	; 0xae
 800963a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	4798      	blx	r3
 8009646:	4603      	mov	r3, r0
 8009648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800964a:	e156      	b.n	80098fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	785b      	ldrb	r3, [r3, #1]
 8009650:	2b03      	cmp	r3, #3
 8009652:	d008      	beq.n	8009666 <USBD_StdEPReq+0x9a>
 8009654:	2b03      	cmp	r3, #3
 8009656:	f300 8145 	bgt.w	80098e4 <USBD_StdEPReq+0x318>
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 809b 	beq.w	8009796 <USBD_StdEPReq+0x1ca>
 8009660:	2b01      	cmp	r3, #1
 8009662:	d03c      	beq.n	80096de <USBD_StdEPReq+0x112>
 8009664:	e13e      	b.n	80098e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800966c:	b2db      	uxtb	r3, r3
 800966e:	2b02      	cmp	r3, #2
 8009670:	d002      	beq.n	8009678 <USBD_StdEPReq+0xac>
 8009672:	2b03      	cmp	r3, #3
 8009674:	d016      	beq.n	80096a4 <USBD_StdEPReq+0xd8>
 8009676:	e02c      	b.n	80096d2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009678:	7bbb      	ldrb	r3, [r7, #14]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00d      	beq.n	800969a <USBD_StdEPReq+0xce>
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	2b80      	cmp	r3, #128	; 0x80
 8009682:	d00a      	beq.n	800969a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 f96f 	bl	800a96c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800968e:	2180      	movs	r1, #128	; 0x80
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f001 f96b 	bl	800a96c <USBD_LL_StallEP>
 8009696:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009698:	e020      	b.n	80096dc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800969a:	6839      	ldr	r1, [r7, #0]
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 fc7a 	bl	8009f96 <USBD_CtlError>
              break;
 80096a2:	e01b      	b.n	80096dc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	885b      	ldrh	r3, [r3, #2]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10e      	bne.n	80096ca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00b      	beq.n	80096ca <USBD_StdEPReq+0xfe>
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	2b80      	cmp	r3, #128	; 0x80
 80096b6:	d008      	beq.n	80096ca <USBD_StdEPReq+0xfe>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	88db      	ldrh	r3, [r3, #6]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d104      	bne.n	80096ca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 f951 	bl	800a96c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fd2e 	bl	800a12c <USBD_CtlSendStatus>

              break;
 80096d0:	e004      	b.n	80096dc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80096d2:	6839      	ldr	r1, [r7, #0]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 fc5e 	bl	8009f96 <USBD_CtlError>
              break;
 80096da:	bf00      	nop
          }
          break;
 80096dc:	e107      	b.n	80098ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d002      	beq.n	80096f0 <USBD_StdEPReq+0x124>
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d016      	beq.n	800971c <USBD_StdEPReq+0x150>
 80096ee:	e04b      	b.n	8009788 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00d      	beq.n	8009712 <USBD_StdEPReq+0x146>
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b80      	cmp	r3, #128	; 0x80
 80096fa:	d00a      	beq.n	8009712 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096fc:	7bbb      	ldrb	r3, [r7, #14]
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f001 f933 	bl	800a96c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009706:	2180      	movs	r1, #128	; 0x80
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f001 f92f 	bl	800a96c <USBD_LL_StallEP>
 800970e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009710:	e040      	b.n	8009794 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fc3e 	bl	8009f96 <USBD_CtlError>
              break;
 800971a:	e03b      	b.n	8009794 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	885b      	ldrh	r3, [r3, #2]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d136      	bne.n	8009792 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800972a:	2b00      	cmp	r3, #0
 800972c:	d004      	beq.n	8009738 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800972e:	7bbb      	ldrb	r3, [r7, #14]
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f001 f939 	bl	800a9aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 fcf7 	bl	800a12c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fde2 	bl	800930c <USBD_CoreFindEP>
 8009748:	4603      	mov	r3, r0
 800974a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800974c:	7b7b      	ldrb	r3, [r7, #13]
 800974e:	2bff      	cmp	r3, #255	; 0xff
 8009750:	d01f      	beq.n	8009792 <USBD_StdEPReq+0x1c6>
 8009752:	7b7b      	ldrb	r3, [r7, #13]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d11c      	bne.n	8009792 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009758:	7b7a      	ldrb	r2, [r7, #13]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009760:	7b7a      	ldrb	r2, [r7, #13]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	32ae      	adds	r2, #174	; 0xae
 8009766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d010      	beq.n	8009792 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009770:	7b7a      	ldrb	r2, [r7, #13]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	32ae      	adds	r2, #174	; 0xae
 8009776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	4798      	blx	r3
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009786:	e004      	b.n	8009792 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009788:	6839      	ldr	r1, [r7, #0]
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fc03 	bl	8009f96 <USBD_CtlError>
              break;
 8009790:	e000      	b.n	8009794 <USBD_StdEPReq+0x1c8>
              break;
 8009792:	bf00      	nop
          }
          break;
 8009794:	e0ab      	b.n	80098ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b02      	cmp	r3, #2
 80097a0:	d002      	beq.n	80097a8 <USBD_StdEPReq+0x1dc>
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d032      	beq.n	800980c <USBD_StdEPReq+0x240>
 80097a6:	e097      	b.n	80098d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d007      	beq.n	80097be <USBD_StdEPReq+0x1f2>
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	2b80      	cmp	r3, #128	; 0x80
 80097b2:	d004      	beq.n	80097be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 fbed 	bl	8009f96 <USBD_CtlError>
                break;
 80097bc:	e091      	b.n	80098e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	da0b      	bge.n	80097de <USBD_StdEPReq+0x212>
 80097c6:	7bbb      	ldrb	r3, [r7, #14]
 80097c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097cc:	4613      	mov	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	3310      	adds	r3, #16
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	4413      	add	r3, r2
 80097da:	3304      	adds	r3, #4
 80097dc:	e00b      	b.n	80097f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097e4:	4613      	mov	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	4413      	add	r3, r2
 80097f4:	3304      	adds	r3, #4
 80097f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2202      	movs	r2, #2
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fc37 	bl	800a078 <USBD_CtlSendData>
              break;
 800980a:	e06a      	b.n	80098e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800980c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009810:	2b00      	cmp	r3, #0
 8009812:	da11      	bge.n	8009838 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	f003 020f 	and.w	r2, r3, #15
 800981a:	6879      	ldr	r1, [r7, #4]
 800981c:	4613      	mov	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4413      	add	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	440b      	add	r3, r1
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	881b      	ldrh	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d117      	bne.n	800985e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800982e:	6839      	ldr	r1, [r7, #0]
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 fbb0 	bl	8009f96 <USBD_CtlError>
                  break;
 8009836:	e054      	b.n	80098e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	f003 020f 	and.w	r2, r3, #15
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	4613      	mov	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	440b      	add	r3, r1
 800984a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fb9d 	bl	8009f96 <USBD_CtlError>
                  break;
 800985c:	e041      	b.n	80098e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800985e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009862:	2b00      	cmp	r3, #0
 8009864:	da0b      	bge.n	800987e <USBD_StdEPReq+0x2b2>
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800986c:	4613      	mov	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	3310      	adds	r3, #16
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	4413      	add	r3, r2
 800987a:	3304      	adds	r3, #4
 800987c:	e00b      	b.n	8009896 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800987e:	7bbb      	ldrb	r3, [r7, #14]
 8009880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009884:	4613      	mov	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	4413      	add	r3, r2
 8009894:	3304      	adds	r3, #4
 8009896:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d002      	beq.n	80098a4 <USBD_StdEPReq+0x2d8>
 800989e:	7bbb      	ldrb	r3, [r7, #14]
 80098a0:	2b80      	cmp	r3, #128	; 0x80
 80098a2:	d103      	bne.n	80098ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]
 80098aa:	e00e      	b.n	80098ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 f899 	bl	800a9e8 <USBD_LL_IsStallEP>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d003      	beq.n	80098c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2201      	movs	r2, #1
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	e002      	b.n	80098ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2200      	movs	r2, #0
 80098c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	2202      	movs	r2, #2
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fbd1 	bl	800a078 <USBD_CtlSendData>
              break;
 80098d6:	e004      	b.n	80098e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80098d8:	6839      	ldr	r1, [r7, #0]
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 fb5b 	bl	8009f96 <USBD_CtlError>
              break;
 80098e0:	bf00      	nop
          }
          break;
 80098e2:	e004      	b.n	80098ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 fb55 	bl	8009f96 <USBD_CtlError>
          break;
 80098ec:	bf00      	nop
      }
      break;
 80098ee:	e005      	b.n	80098fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80098f0:	6839      	ldr	r1, [r7, #0]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fb4f 	bl	8009f96 <USBD_CtlError>
      break;
 80098f8:	e000      	b.n	80098fc <USBD_StdEPReq+0x330>
      break;
 80098fa:	bf00      	nop
  }

  return ret;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	885b      	ldrh	r3, [r3, #2]
 8009922:	0a1b      	lsrs	r3, r3, #8
 8009924:	b29b      	uxth	r3, r3
 8009926:	3b01      	subs	r3, #1
 8009928:	2b06      	cmp	r3, #6
 800992a:	f200 8128 	bhi.w	8009b7e <USBD_GetDescriptor+0x276>
 800992e:	a201      	add	r2, pc, #4	; (adr r2, 8009934 <USBD_GetDescriptor+0x2c>)
 8009930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009934:	08009951 	.word	0x08009951
 8009938:	08009969 	.word	0x08009969
 800993c:	080099a9 	.word	0x080099a9
 8009940:	08009b7f 	.word	0x08009b7f
 8009944:	08009b7f 	.word	0x08009b7f
 8009948:	08009b1f 	.word	0x08009b1f
 800994c:	08009b4b 	.word	0x08009b4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	7c12      	ldrb	r2, [r2, #16]
 800995c:	f107 0108 	add.w	r1, r7, #8
 8009960:	4610      	mov	r0, r2
 8009962:	4798      	blx	r3
 8009964:	60f8      	str	r0, [r7, #12]
      break;
 8009966:	e112      	b.n	8009b8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	7c1b      	ldrb	r3, [r3, #16]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10d      	bne.n	800998c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009978:	f107 0208 	add.w	r2, r7, #8
 800997c:	4610      	mov	r0, r2
 800997e:	4798      	blx	r3
 8009980:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3301      	adds	r3, #1
 8009986:	2202      	movs	r2, #2
 8009988:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800998a:	e100      	b.n	8009b8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	f107 0208 	add.w	r2, r7, #8
 8009998:	4610      	mov	r0, r2
 800999a:	4798      	blx	r3
 800999c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	3301      	adds	r3, #1
 80099a2:	2202      	movs	r2, #2
 80099a4:	701a      	strb	r2, [r3, #0]
      break;
 80099a6:	e0f2      	b.n	8009b8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	885b      	ldrh	r3, [r3, #2]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b05      	cmp	r3, #5
 80099b0:	f200 80ac 	bhi.w	8009b0c <USBD_GetDescriptor+0x204>
 80099b4:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <USBD_GetDescriptor+0xb4>)
 80099b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ba:	bf00      	nop
 80099bc:	080099d5 	.word	0x080099d5
 80099c0:	08009a09 	.word	0x08009a09
 80099c4:	08009a3d 	.word	0x08009a3d
 80099c8:	08009a71 	.word	0x08009a71
 80099cc:	08009aa5 	.word	0x08009aa5
 80099d0:	08009ad9 	.word	0x08009ad9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	7c12      	ldrb	r2, [r2, #16]
 80099ec:	f107 0108 	add.w	r1, r7, #8
 80099f0:	4610      	mov	r0, r2
 80099f2:	4798      	blx	r3
 80099f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099f6:	e091      	b.n	8009b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 facb 	bl	8009f96 <USBD_CtlError>
            err++;
 8009a00:	7afb      	ldrb	r3, [r7, #11]
 8009a02:	3301      	adds	r3, #1
 8009a04:	72fb      	strb	r3, [r7, #11]
          break;
 8009a06:	e089      	b.n	8009b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7c12      	ldrb	r2, [r2, #16]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2a:	e077      	b.n	8009b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fab1 	bl	8009f96 <USBD_CtlError>
            err++;
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	3301      	adds	r3, #1
 8009a38:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3a:	e06f      	b.n	8009b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	7c12      	ldrb	r2, [r2, #16]
 8009a54:	f107 0108 	add.w	r1, r7, #8
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5e:	e05d      	b.n	8009b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa97 	bl	8009f96 <USBD_CtlError>
            err++;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6e:	e055      	b.n	8009b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a76:	691b      	ldr	r3, [r3, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a82:	691b      	ldr	r3, [r3, #16]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	7c12      	ldrb	r2, [r2, #16]
 8009a88:	f107 0108 	add.w	r1, r7, #8
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a92:	e043      	b.n	8009b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fa7d 	bl	8009f96 <USBD_CtlError>
            err++;
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa2:	e03b      	b.n	8009b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 0108 	add.w	r1, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac6:	e029      	b.n	8009b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa63 	bl	8009f96 <USBD_CtlError>
            err++;
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad6:	e021      	b.n	8009b1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7c12      	ldrb	r2, [r2, #16]
 8009af0:	f107 0108 	add.w	r1, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afa:	e00f      	b.n	8009b1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa49 	bl	8009f96 <USBD_CtlError>
            err++;
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	3301      	adds	r3, #1
 8009b08:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0a:	e007      	b.n	8009b1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa41 	bl	8009f96 <USBD_CtlError>
          err++;
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	3301      	adds	r3, #1
 8009b18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b1a:	bf00      	nop
      }
      break;
 8009b1c:	e037      	b.n	8009b8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	7c1b      	ldrb	r3, [r3, #16]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d109      	bne.n	8009b3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2e:	f107 0208 	add.w	r2, r7, #8
 8009b32:	4610      	mov	r0, r2
 8009b34:	4798      	blx	r3
 8009b36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b38:	e029      	b.n	8009b8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b3a:	6839      	ldr	r1, [r7, #0]
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fa2a 	bl	8009f96 <USBD_CtlError>
        err++;
 8009b42:	7afb      	ldrb	r3, [r7, #11]
 8009b44:	3301      	adds	r3, #1
 8009b46:	72fb      	strb	r3, [r7, #11]
      break;
 8009b48:	e021      	b.n	8009b8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	7c1b      	ldrb	r3, [r3, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10d      	bne.n	8009b6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b5a:	f107 0208 	add.w	r2, r7, #8
 8009b5e:	4610      	mov	r0, r2
 8009b60:	4798      	blx	r3
 8009b62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3301      	adds	r3, #1
 8009b68:	2207      	movs	r2, #7
 8009b6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b6c:	e00f      	b.n	8009b8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fa10 	bl	8009f96 <USBD_CtlError>
        err++;
 8009b76:	7afb      	ldrb	r3, [r7, #11]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b7c:	e007      	b.n	8009b8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fa08 	bl	8009f96 <USBD_CtlError>
      err++;
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b8c:	bf00      	nop
  }

  if (err != 0U)
 8009b8e:	7afb      	ldrb	r3, [r7, #11]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d11e      	bne.n	8009bd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	88db      	ldrh	r3, [r3, #6]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d016      	beq.n	8009bca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009b9c:	893b      	ldrh	r3, [r7, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00e      	beq.n	8009bc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	88da      	ldrh	r2, [r3, #6]
 8009ba6:	893b      	ldrh	r3, [r7, #8]
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	bf28      	it	cs
 8009bac:	4613      	movcs	r3, r2
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bb2:	893b      	ldrh	r3, [r7, #8]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68f9      	ldr	r1, [r7, #12]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fa5d 	bl	800a078 <USBD_CtlSendData>
 8009bbe:	e009      	b.n	8009bd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f9e7 	bl	8009f96 <USBD_CtlError>
 8009bc8:	e004      	b.n	8009bd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 faae 	bl	800a12c <USBD_CtlSendStatus>
 8009bd0:	e000      	b.n	8009bd4 <USBD_GetDescriptor+0x2cc>
    return;
 8009bd2:	bf00      	nop
  }
}
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop

08009bdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	889b      	ldrh	r3, [r3, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d131      	bne.n	8009c52 <USBD_SetAddress+0x76>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	88db      	ldrh	r3, [r3, #6]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d12d      	bne.n	8009c52 <USBD_SetAddress+0x76>
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	885b      	ldrh	r3, [r3, #2]
 8009bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8009bfc:	d829      	bhi.n	8009c52 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	885b      	ldrh	r3, [r3, #2]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b03      	cmp	r3, #3
 8009c14:	d104      	bne.n	8009c20 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f9bc 	bl	8009f96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1e:	e01d      	b.n	8009c5c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	7bfa      	ldrb	r2, [r7, #15]
 8009c24:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c28:	7bfb      	ldrb	r3, [r7, #15]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 ff07 	bl	800aa40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fa7a 	bl	800a12c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c38:	7bfb      	ldrb	r3, [r7, #15]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2202      	movs	r2, #2
 8009c42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c46:	e009      	b.n	8009c5c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c50:	e004      	b.n	8009c5c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 f99e 	bl	8009f96 <USBD_CtlError>
  }
}
 8009c5a:	bf00      	nop
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	885b      	ldrh	r3, [r3, #2]
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	4b4e      	ldr	r3, [pc, #312]	; (8009db4 <USBD_SetConfig+0x150>)
 8009c7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c7c:	4b4d      	ldr	r3, [pc, #308]	; (8009db4 <USBD_SetConfig+0x150>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d905      	bls.n	8009c90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f985 	bl	8009f96 <USBD_CtlError>
    return USBD_FAIL;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e08c      	b.n	8009daa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d002      	beq.n	8009ca2 <USBD_SetConfig+0x3e>
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d029      	beq.n	8009cf4 <USBD_SetConfig+0x90>
 8009ca0:	e075      	b.n	8009d8e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009ca2:	4b44      	ldr	r3, [pc, #272]	; (8009db4 <USBD_SetConfig+0x150>)
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d020      	beq.n	8009cec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009caa:	4b42      	ldr	r3, [pc, #264]	; (8009db4 <USBD_SetConfig+0x150>)
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cb4:	4b3f      	ldr	r3, [pc, #252]	; (8009db4 <USBD_SetConfig+0x150>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f7fe ffe7 	bl	8008c8e <USBD_SetClassConfig>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cc4:	7bfb      	ldrb	r3, [r7, #15]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d008      	beq.n	8009cdc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009cca:	6839      	ldr	r1, [r7, #0]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f962 	bl	8009f96 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cda:	e065      	b.n	8009da8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fa25 	bl	800a12c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cea:	e05d      	b.n	8009da8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fa1d 	bl	800a12c <USBD_CtlSendStatus>
      break;
 8009cf2:	e059      	b.n	8009da8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cf4:	4b2f      	ldr	r3, [pc, #188]	; (8009db4 <USBD_SetConfig+0x150>)
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d112      	bne.n	8009d22 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d04:	4b2b      	ldr	r3, [pc, #172]	; (8009db4 <USBD_SetConfig+0x150>)
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d0e:	4b29      	ldr	r3, [pc, #164]	; (8009db4 <USBD_SetConfig+0x150>)
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f7fe ffd6 	bl	8008cc6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa06 	bl	800a12c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d20:	e042      	b.n	8009da8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d22:	4b24      	ldr	r3, [pc, #144]	; (8009db4 <USBD_SetConfig+0x150>)
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d02a      	beq.n	8009d86 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7fe ffc4 	bl	8008cc6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d3e:	4b1d      	ldr	r3, [pc, #116]	; (8009db4 <USBD_SetConfig+0x150>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d48:	4b1a      	ldr	r3, [pc, #104]	; (8009db4 <USBD_SetConfig+0x150>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fe ff9d 	bl	8008c8e <USBD_SetClassConfig>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d00f      	beq.n	8009d7e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 f918 	bl	8009f96 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7fe ffa9 	bl	8008cc6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d7c:	e014      	b.n	8009da8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f9d4 	bl	800a12c <USBD_CtlSendStatus>
      break;
 8009d84:	e010      	b.n	8009da8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 f9d0 	bl	800a12c <USBD_CtlSendStatus>
      break;
 8009d8c:	e00c      	b.n	8009da8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f900 	bl	8009f96 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d96:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <USBD_SetConfig+0x150>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7fe ff92 	bl	8008cc6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009da2:	2303      	movs	r3, #3
 8009da4:	73fb      	strb	r3, [r7, #15]
      break;
 8009da6:	bf00      	nop
  }

  return ret;
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	20000364 	.word	0x20000364

08009db8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	88db      	ldrh	r3, [r3, #6]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d004      	beq.n	8009dd4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f8e2 	bl	8009f96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dd2:	e023      	b.n	8009e1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	dc02      	bgt.n	8009de6 <USBD_GetConfig+0x2e>
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	dc03      	bgt.n	8009dec <USBD_GetConfig+0x34>
 8009de4:	e015      	b.n	8009e12 <USBD_GetConfig+0x5a>
 8009de6:	2b03      	cmp	r3, #3
 8009de8:	d00b      	beq.n	8009e02 <USBD_GetConfig+0x4a>
 8009dea:	e012      	b.n	8009e12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3308      	adds	r3, #8
 8009df6:	2201      	movs	r2, #1
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f93c 	bl	800a078 <USBD_CtlSendData>
        break;
 8009e00:	e00c      	b.n	8009e1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	3304      	adds	r3, #4
 8009e06:	2201      	movs	r2, #1
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f934 	bl	800a078 <USBD_CtlSendData>
        break;
 8009e10:	e004      	b.n	8009e1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f8be 	bl	8009f96 <USBD_CtlError>
        break;
 8009e1a:	bf00      	nop
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	3b01      	subs	r3, #1
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d81e      	bhi.n	8009e7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	88db      	ldrh	r3, [r3, #6]
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d004      	beq.n	8009e4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 f8a5 	bl	8009f96 <USBD_CtlError>
        break;
 8009e4c:	e01a      	b.n	8009e84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d005      	beq.n	8009e6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	f043 0202 	orr.w	r2, r3, #2
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	330c      	adds	r3, #12
 8009e6e:	2202      	movs	r2, #2
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f900 	bl	800a078 <USBD_CtlSendData>
      break;
 8009e78:	e004      	b.n	8009e84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f88a 	bl	8009f96 <USBD_CtlError>
      break;
 8009e82:	bf00      	nop
  }
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	885b      	ldrh	r3, [r3, #2]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d107      	bne.n	8009eae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f940 	bl	800a12c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009eac:	e013      	b.n	8009ed6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	885b      	ldrh	r3, [r3, #2]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d10b      	bne.n	8009ece <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	889b      	ldrh	r3, [r3, #4]
 8009eba:	0a1b      	lsrs	r3, r3, #8
 8009ebc:	b29b      	uxth	r3, r3
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f930 	bl	800a12c <USBD_CtlSendStatus>
}
 8009ecc:	e003      	b.n	8009ed6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f860 	bl	8009f96 <USBD_CtlError>
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d80b      	bhi.n	8009f0e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	885b      	ldrh	r3, [r3, #2]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d10c      	bne.n	8009f18 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f910 	bl	800a12c <USBD_CtlSendStatus>
      }
      break;
 8009f0c:	e004      	b.n	8009f18 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f0e:	6839      	ldr	r1, [r7, #0]
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f840 	bl	8009f96 <USBD_CtlError>
      break;
 8009f16:	e000      	b.n	8009f1a <USBD_ClrFeature+0x3c>
      break;
 8009f18:	bf00      	nop
  }
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b084      	sub	sp, #16
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	781a      	ldrb	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	781a      	ldrb	r2, [r3, #0]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff fa41 	bl	80093d4 <SWAPBYTE>
 8009f52:	4603      	mov	r3, r0
 8009f54:	461a      	mov	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3301      	adds	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f7ff fa34 	bl	80093d4 <SWAPBYTE>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	461a      	mov	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3301      	adds	r3, #1
 8009f78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f7ff fa27 	bl	80093d4 <SWAPBYTE>
 8009f86:	4603      	mov	r3, r0
 8009f88:	461a      	mov	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	80da      	strh	r2, [r3, #6]
}
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b082      	sub	sp, #8
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fa0:	2180      	movs	r1, #128	; 0x80
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fce2 	bl	800a96c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fcde 	bl	800a96c <USBD_LL_StallEP>
}
 8009fb0:	bf00      	nop
 8009fb2:	3708      	adds	r7, #8
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d036      	beq.n	800a03c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009fd2:	6938      	ldr	r0, [r7, #16]
 8009fd4:	f000 f836 	bl	800a044 <USBD_GetLen>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	3301      	adds	r3, #1
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	4413      	add	r3, r2
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	7812      	ldrb	r2, [r2, #0]
 8009ff0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	2203      	movs	r2, #3
 800a000:	701a      	strb	r2, [r3, #0]
  idx++;
 800a002:	7dfb      	ldrb	r3, [r7, #23]
 800a004:	3301      	adds	r3, #1
 800a006:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a008:	e013      	b.n	800a032 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a00a:	7dfb      	ldrb	r3, [r7, #23]
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	4413      	add	r3, r2
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	7812      	ldrb	r2, [r2, #0]
 800a014:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	3301      	adds	r3, #1
 800a01a:	613b      	str	r3, [r7, #16]
    idx++;
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
 800a01e:	3301      	adds	r3, #1
 800a020:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
 800a024:	68ba      	ldr	r2, [r7, #8]
 800a026:	4413      	add	r3, r2
 800a028:	2200      	movs	r2, #0
 800a02a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	3301      	adds	r3, #1
 800a030:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e7      	bne.n	800a00a <USBD_GetString+0x52>
 800a03a:	e000      	b.n	800a03e <USBD_GetString+0x86>
    return;
 800a03c:	bf00      	nop
  }
}
 800a03e:	3718      	adds	r7, #24
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a054:	e005      	b.n	800a062 <USBD_GetLen+0x1e>
  {
    len++;
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	3301      	adds	r3, #1
 800a05a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	3301      	adds	r3, #1
 800a060:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1f5      	bne.n	800a056 <USBD_GetLen+0x12>
  }

  return len;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2202      	movs	r2, #2
 800a088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	2100      	movs	r1, #0
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 fced 	bl	800aa7e <USBD_LL_Transmit>

  return USBD_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	60f8      	str	r0, [r7, #12]
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	2100      	movs	r1, #0
 800a0c0:	68f8      	ldr	r0, [r7, #12]
 800a0c2:	f000 fcdc 	bl	800aa7e <USBD_LL_Transmit>

  return USBD_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2203      	movs	r2, #3
 800a0e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68ba      	ldr	r2, [r7, #8]
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f000 fce0 	bl	800aac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	60f8      	str	r0, [r7, #12]
 800a112:	60b9      	str	r1, [r7, #8]
 800a114:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	2100      	movs	r1, #0
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 fccf 	bl	800aac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2204      	movs	r2, #4
 800a138:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a13c:	2300      	movs	r3, #0
 800a13e:	2200      	movs	r2, #0
 800a140:	2100      	movs	r1, #0
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fc9b 	bl	800aa7e <USBD_LL_Transmit>

  return USBD_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b082      	sub	sp, #8
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2205      	movs	r2, #5
 800a15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a162:	2300      	movs	r3, #0
 800a164:	2200      	movs	r2, #0
 800a166:	2100      	movs	r1, #0
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fca9 	bl	800aac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a17c:	2201      	movs	r2, #1
 800a17e:	4912      	ldr	r1, [pc, #72]	; (800a1c8 <MX_USB_DEVICE_Init+0x50>)
 800a180:	4812      	ldr	r0, [pc, #72]	; (800a1cc <MX_USB_DEVICE_Init+0x54>)
 800a182:	f7fe fd07 	bl	8008b94 <USBD_Init>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a18c:	f7f7 f834 	bl	80011f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a190:	490f      	ldr	r1, [pc, #60]	; (800a1d0 <MX_USB_DEVICE_Init+0x58>)
 800a192:	480e      	ldr	r0, [pc, #56]	; (800a1cc <MX_USB_DEVICE_Init+0x54>)
 800a194:	f7fe fd2e 	bl	8008bf4 <USBD_RegisterClass>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a19e:	f7f7 f82b 	bl	80011f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a1a2:	490c      	ldr	r1, [pc, #48]	; (800a1d4 <MX_USB_DEVICE_Init+0x5c>)
 800a1a4:	4809      	ldr	r0, [pc, #36]	; (800a1cc <MX_USB_DEVICE_Init+0x54>)
 800a1a6:	f7fe fc1f 	bl	80089e8 <USBD_CDC_RegisterInterface>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a1b0:	f7f7 f822 	bl	80011f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a1b4:	4805      	ldr	r0, [pc, #20]	; (800a1cc <MX_USB_DEVICE_Init+0x54>)
 800a1b6:	f7fe fd53 	bl	8008c60 <USBD_Start>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d001      	beq.n	800a1c4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a1c0:	f7f7 f81a 	bl	80011f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a1c4:	bf00      	nop
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	200000b4 	.word	0x200000b4
 800a1cc:	20000368 	.word	0x20000368
 800a1d0:	20000020 	.word	0x20000020
 800a1d4:	200000a0 	.word	0x200000a0

0800a1d8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a1dc:	2200      	movs	r2, #0
 800a1de:	4905      	ldr	r1, [pc, #20]	; (800a1f4 <CDC_Init_HS+0x1c>)
 800a1e0:	4805      	ldr	r0, [pc, #20]	; (800a1f8 <CDC_Init_HS+0x20>)
 800a1e2:	f7fe fc1b 	bl	8008a1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a1e6:	4905      	ldr	r1, [pc, #20]	; (800a1fc <CDC_Init_HS+0x24>)
 800a1e8:	4803      	ldr	r0, [pc, #12]	; (800a1f8 <CDC_Init_HS+0x20>)
 800a1ea:	f7fe fc39 	bl	8008a60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1ee:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	20000e44 	.word	0x20000e44
 800a1f8:	20000368 	.word	0x20000368
 800a1fc:	20000644 	.word	0x20000644

0800a200 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a200:	b480      	push	{r7}
 800a202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a204:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a206:	4618      	mov	r0, r3
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	6039      	str	r1, [r7, #0]
 800a21a:	71fb      	strb	r3, [r7, #7]
 800a21c:	4613      	mov	r3, r2
 800a21e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a220:	79fb      	ldrb	r3, [r7, #7]
 800a222:	2b23      	cmp	r3, #35	; 0x23
 800a224:	d84a      	bhi.n	800a2bc <CDC_Control_HS+0xac>
 800a226:	a201      	add	r2, pc, #4	; (adr r2, 800a22c <CDC_Control_HS+0x1c>)
 800a228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a22c:	0800a2bd 	.word	0x0800a2bd
 800a230:	0800a2bd 	.word	0x0800a2bd
 800a234:	0800a2bd 	.word	0x0800a2bd
 800a238:	0800a2bd 	.word	0x0800a2bd
 800a23c:	0800a2bd 	.word	0x0800a2bd
 800a240:	0800a2bd 	.word	0x0800a2bd
 800a244:	0800a2bd 	.word	0x0800a2bd
 800a248:	0800a2bd 	.word	0x0800a2bd
 800a24c:	0800a2bd 	.word	0x0800a2bd
 800a250:	0800a2bd 	.word	0x0800a2bd
 800a254:	0800a2bd 	.word	0x0800a2bd
 800a258:	0800a2bd 	.word	0x0800a2bd
 800a25c:	0800a2bd 	.word	0x0800a2bd
 800a260:	0800a2bd 	.word	0x0800a2bd
 800a264:	0800a2bd 	.word	0x0800a2bd
 800a268:	0800a2bd 	.word	0x0800a2bd
 800a26c:	0800a2bd 	.word	0x0800a2bd
 800a270:	0800a2bd 	.word	0x0800a2bd
 800a274:	0800a2bd 	.word	0x0800a2bd
 800a278:	0800a2bd 	.word	0x0800a2bd
 800a27c:	0800a2bd 	.word	0x0800a2bd
 800a280:	0800a2bd 	.word	0x0800a2bd
 800a284:	0800a2bd 	.word	0x0800a2bd
 800a288:	0800a2bd 	.word	0x0800a2bd
 800a28c:	0800a2bd 	.word	0x0800a2bd
 800a290:	0800a2bd 	.word	0x0800a2bd
 800a294:	0800a2bd 	.word	0x0800a2bd
 800a298:	0800a2bd 	.word	0x0800a2bd
 800a29c:	0800a2bd 	.word	0x0800a2bd
 800a2a0:	0800a2bd 	.word	0x0800a2bd
 800a2a4:	0800a2bd 	.word	0x0800a2bd
 800a2a8:	0800a2bd 	.word	0x0800a2bd
 800a2ac:	0800a2bd 	.word	0x0800a2bd
 800a2b0:	0800a2bd 	.word	0x0800a2bd
 800a2b4:	0800a2bd 	.word	0x0800a2bd
 800a2b8:	0800a2bd 	.word	0x0800a2bd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a2bc:	bf00      	nop
  }

  return (USBD_OK);
 800a2be:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	4805      	ldr	r0, [pc, #20]	; (800a2f0 <CDC_Receive_HS+0x24>)
 800a2da:	f7fe fbc1 	bl	8008a60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a2de:	4804      	ldr	r0, [pc, #16]	; (800a2f0 <CDC_Receive_HS+0x24>)
 800a2e0:	f7fe fc22 	bl	8008b28 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2e4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000368 	.word	0x20000368

0800a2f4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800a304:	4b0d      	ldr	r3, [pc, #52]	; (800a33c <CDC_Transmit_HS+0x48>)
 800a306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a30a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800a316:	2301      	movs	r3, #1
 800a318:	e00b      	b.n	800a332 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800a31a:	887b      	ldrh	r3, [r7, #2]
 800a31c:	461a      	mov	r2, r3
 800a31e:	6879      	ldr	r1, [r7, #4]
 800a320:	4806      	ldr	r0, [pc, #24]	; (800a33c <CDC_Transmit_HS+0x48>)
 800a322:	f7fe fb7b 	bl	8008a1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800a326:	4805      	ldr	r0, [pc, #20]	; (800a33c <CDC_Transmit_HS+0x48>)
 800a328:	f7fe fbb8 	bl	8008a9c <USBD_CDC_TransmitPacket>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800a330:	7bfb      	ldrb	r3, [r7, #15]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3710      	adds	r7, #16
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	20000368 	.word	0x20000368

0800a340 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	4613      	mov	r3, r2
 800a34c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a34e:	2300      	movs	r3, #0
 800a350:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800a352:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a356:	4618      	mov	r0, r3
 800a358:	371c      	adds	r7, #28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr
	...

0800a364 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	4603      	mov	r3, r0
 800a36c:	6039      	str	r1, [r7, #0]
 800a36e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	2212      	movs	r2, #18
 800a374:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a376:	4b03      	ldr	r3, [pc, #12]	; (800a384 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a378:	4618      	mov	r0, r3
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	200000d0 	.word	0x200000d0

0800a388 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	6039      	str	r1, [r7, #0]
 800a392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	2204      	movs	r2, #4
 800a398:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a39a:	4b03      	ldr	r3, [pc, #12]	; (800a3a8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	200000e4 	.word	0x200000e4

0800a3ac <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	6039      	str	r1, [r7, #0]
 800a3b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3b8:	79fb      	ldrb	r3, [r7, #7]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d105      	bne.n	800a3ca <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	4907      	ldr	r1, [pc, #28]	; (800a3e0 <USBD_HS_ProductStrDescriptor+0x34>)
 800a3c2:	4808      	ldr	r0, [pc, #32]	; (800a3e4 <USBD_HS_ProductStrDescriptor+0x38>)
 800a3c4:	f7ff fdf8 	bl	8009fb8 <USBD_GetString>
 800a3c8:	e004      	b.n	800a3d4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	4904      	ldr	r1, [pc, #16]	; (800a3e0 <USBD_HS_ProductStrDescriptor+0x34>)
 800a3ce:	4805      	ldr	r0, [pc, #20]	; (800a3e4 <USBD_HS_ProductStrDescriptor+0x38>)
 800a3d0:	f7ff fdf2 	bl	8009fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3d4:	4b02      	ldr	r3, [pc, #8]	; (800a3e0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20001644 	.word	0x20001644
 800a3e4:	0800b4f8 	.word	0x0800b4f8

0800a3e8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	6039      	str	r1, [r7, #0]
 800a3f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	4904      	ldr	r1, [pc, #16]	; (800a408 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a3f8:	4804      	ldr	r0, [pc, #16]	; (800a40c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a3fa:	f7ff fddd 	bl	8009fb8 <USBD_GetString>
  return USBD_StrDesc;
 800a3fe:	4b02      	ldr	r3, [pc, #8]	; (800a408 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	20001644 	.word	0x20001644
 800a40c:	0800b510 	.word	0x0800b510

0800a410 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	4603      	mov	r3, r0
 800a418:	6039      	str	r1, [r7, #0]
 800a41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	221a      	movs	r2, #26
 800a420:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a422:	f000 f843 	bl	800a4ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a426:	4b02      	ldr	r3, [pc, #8]	; (800a430 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3708      	adds	r7, #8
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}
 800a430:	200000e8 	.word	0x200000e8

0800a434 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	6039      	str	r1, [r7, #0]
 800a43e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d105      	bne.n	800a452 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	4907      	ldr	r1, [pc, #28]	; (800a468 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a44a:	4808      	ldr	r0, [pc, #32]	; (800a46c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a44c:	f7ff fdb4 	bl	8009fb8 <USBD_GetString>
 800a450:	e004      	b.n	800a45c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	4904      	ldr	r1, [pc, #16]	; (800a468 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a456:	4805      	ldr	r0, [pc, #20]	; (800a46c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a458:	f7ff fdae 	bl	8009fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a45c:	4b02      	ldr	r3, [pc, #8]	; (800a468 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	20001644 	.word	0x20001644
 800a46c:	0800b524 	.word	0x0800b524

0800a470 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	4603      	mov	r3, r0
 800a478:	6039      	str	r1, [r7, #0]
 800a47a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a47c:	79fb      	ldrb	r3, [r7, #7]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d105      	bne.n	800a48e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	4907      	ldr	r1, [pc, #28]	; (800a4a4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a486:	4808      	ldr	r0, [pc, #32]	; (800a4a8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a488:	f7ff fd96 	bl	8009fb8 <USBD_GetString>
 800a48c:	e004      	b.n	800a498 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a48e:	683a      	ldr	r2, [r7, #0]
 800a490:	4904      	ldr	r1, [pc, #16]	; (800a4a4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a492:	4805      	ldr	r0, [pc, #20]	; (800a4a8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a494:	f7ff fd90 	bl	8009fb8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a498:	4b02      	ldr	r3, [pc, #8]	; (800a4a4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3708      	adds	r7, #8
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	20001644 	.word	0x20001644
 800a4a8:	0800b530 	.word	0x0800b530

0800a4ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4b2:	4b0f      	ldr	r3, [pc, #60]	; (800a4f0 <Get_SerialNum+0x44>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4b8:	4b0e      	ldr	r3, [pc, #56]	; (800a4f4 <Get_SerialNum+0x48>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a4be:	4b0e      	ldr	r3, [pc, #56]	; (800a4f8 <Get_SerialNum+0x4c>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d009      	beq.n	800a4e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a4d2:	2208      	movs	r2, #8
 800a4d4:	4909      	ldr	r1, [pc, #36]	; (800a4fc <Get_SerialNum+0x50>)
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 f814 	bl	800a504 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a4dc:	2204      	movs	r2, #4
 800a4de:	4908      	ldr	r1, [pc, #32]	; (800a500 <Get_SerialNum+0x54>)
 800a4e0:	68b8      	ldr	r0, [r7, #8]
 800a4e2:	f000 f80f 	bl	800a504 <IntToUnicode>
  }
}
 800a4e6:	bf00      	nop
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	1fff7a10 	.word	0x1fff7a10
 800a4f4:	1fff7a14 	.word	0x1fff7a14
 800a4f8:	1fff7a18 	.word	0x1fff7a18
 800a4fc:	200000ea 	.word	0x200000ea
 800a500:	200000fa 	.word	0x200000fa

0800a504 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a504:	b480      	push	{r7}
 800a506:	b087      	sub	sp, #28
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	4613      	mov	r3, r2
 800a510:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a512:	2300      	movs	r3, #0
 800a514:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a516:	2300      	movs	r3, #0
 800a518:	75fb      	strb	r3, [r7, #23]
 800a51a:	e027      	b.n	800a56c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	0f1b      	lsrs	r3, r3, #28
 800a520:	2b09      	cmp	r3, #9
 800a522:	d80b      	bhi.n	800a53c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	0f1b      	lsrs	r3, r3, #28
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	7dfb      	ldrb	r3, [r7, #23]
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	4619      	mov	r1, r3
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	440b      	add	r3, r1
 800a534:	3230      	adds	r2, #48	; 0x30
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	701a      	strb	r2, [r3, #0]
 800a53a:	e00a      	b.n	800a552 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	0f1b      	lsrs	r3, r3, #28
 800a540:	b2da      	uxtb	r2, r3
 800a542:	7dfb      	ldrb	r3, [r7, #23]
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	4619      	mov	r1, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	440b      	add	r3, r1
 800a54c:	3237      	adds	r2, #55	; 0x37
 800a54e:	b2d2      	uxtb	r2, r2
 800a550:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	011b      	lsls	r3, r3, #4
 800a556:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a558:	7dfb      	ldrb	r3, [r7, #23]
 800a55a:	005b      	lsls	r3, r3, #1
 800a55c:	3301      	adds	r3, #1
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	4413      	add	r3, r2
 800a562:	2200      	movs	r2, #0
 800a564:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a566:	7dfb      	ldrb	r3, [r7, #23]
 800a568:	3301      	adds	r3, #1
 800a56a:	75fb      	strb	r3, [r7, #23]
 800a56c:	7dfa      	ldrb	r2, [r7, #23]
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	429a      	cmp	r2, r3
 800a572:	d3d3      	bcc.n	800a51c <IntToUnicode+0x18>
  }
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr
	...

0800a584 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b08a      	sub	sp, #40	; 0x28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a58c:	f107 0314 	add.w	r3, r7, #20
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	605a      	str	r2, [r3, #4]
 800a596:	609a      	str	r2, [r3, #8]
 800a598:	60da      	str	r2, [r3, #12]
 800a59a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a1d      	ldr	r2, [pc, #116]	; (800a618 <HAL_PCD_MspInit+0x94>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d134      	bne.n	800a610 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	613b      	str	r3, [r7, #16]
 800a5aa:	4b1c      	ldr	r3, [pc, #112]	; (800a61c <HAL_PCD_MspInit+0x98>)
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ae:	4a1b      	ldr	r2, [pc, #108]	; (800a61c <HAL_PCD_MspInit+0x98>)
 800a5b0:	f043 0302 	orr.w	r3, r3, #2
 800a5b4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5b6:	4b19      	ldr	r3, [pc, #100]	; (800a61c <HAL_PCD_MspInit+0x98>)
 800a5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ba:	f003 0302 	and.w	r3, r3, #2
 800a5be:	613b      	str	r3, [r7, #16]
 800a5c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800a5c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a5c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800a5d4:	230c      	movs	r3, #12
 800a5d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5d8:	f107 0314 	add.w	r3, r7, #20
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4810      	ldr	r0, [pc, #64]	; (800a620 <HAL_PCD_MspInit+0x9c>)
 800a5e0:	f7f7 fe8a 	bl	80022f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
 800a5e8:	4b0c      	ldr	r3, [pc, #48]	; (800a61c <HAL_PCD_MspInit+0x98>)
 800a5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ec:	4a0b      	ldr	r2, [pc, #44]	; (800a61c <HAL_PCD_MspInit+0x98>)
 800a5ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5f2:	6313      	str	r3, [r2, #48]	; 0x30
 800a5f4:	4b09      	ldr	r3, [pc, #36]	; (800a61c <HAL_PCD_MspInit+0x98>)
 800a5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5fc:	60fb      	str	r3, [r7, #12]
 800a5fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800a600:	2200      	movs	r2, #0
 800a602:	2101      	movs	r1, #1
 800a604:	204d      	movs	r0, #77	; 0x4d
 800a606:	f7f7 fa76 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a60a:	204d      	movs	r0, #77	; 0x4d
 800a60c:	f7f7 fa8f 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a610:	bf00      	nop
 800a612:	3728      	adds	r7, #40	; 0x28
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	40040000 	.word	0x40040000
 800a61c:	40023800 	.word	0x40023800
 800a620:	40020400 	.word	0x40020400

0800a624 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a638:	4619      	mov	r1, r3
 800a63a:	4610      	mov	r0, r2
 800a63c:	f7fe fb5d 	bl	8008cfa <USBD_LL_SetupStage>
}
 800a640:	bf00      	nop
 800a642:	3708      	adds	r7, #8
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	460b      	mov	r3, r1
 800a652:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a65a:	78fa      	ldrb	r2, [r7, #3]
 800a65c:	6879      	ldr	r1, [r7, #4]
 800a65e:	4613      	mov	r3, r2
 800a660:	00db      	lsls	r3, r3, #3
 800a662:	4413      	add	r3, r2
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	440b      	add	r3, r1
 800a668:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	78fb      	ldrb	r3, [r7, #3]
 800a670:	4619      	mov	r1, r3
 800a672:	f7fe fb97 	bl	8008da4 <USBD_LL_DataOutStage>
}
 800a676:	bf00      	nop
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
 800a686:	460b      	mov	r3, r1
 800a688:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a690:	78fa      	ldrb	r2, [r7, #3]
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	4613      	mov	r3, r2
 800a696:	00db      	lsls	r3, r3, #3
 800a698:	4413      	add	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	440b      	add	r3, r1
 800a69e:	334c      	adds	r3, #76	; 0x4c
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	78fb      	ldrb	r3, [r7, #3]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	f7fe fc30 	bl	8008f0a <USBD_LL_DataInStage>
}
 800a6aa:	bf00      	nop
 800a6ac:	3708      	adds	r7, #8
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b082      	sub	sp, #8
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7fe fd64 	bl	800918e <USBD_LL_SOF>
}
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d102      	bne.n	800a6e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73fb      	strb	r3, [r7, #15]
 800a6e6:	e008      	b.n	800a6fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d102      	bne.n	800a6f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	73fb      	strb	r3, [r7, #15]
 800a6f4:	e001      	b.n	800a6fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a6f6:	f7f6 fd7f 	bl	80011f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a700:	7bfa      	ldrb	r2, [r7, #15]
 800a702:	4611      	mov	r1, r2
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe fd04 	bl	8009112 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a710:	4618      	mov	r0, r3
 800a712:	f7fe fcac 	bl	800906e <USBD_LL_Reset>
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fe fcff 	bl	8009132 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6812      	ldr	r2, [r2, #0]
 800a742:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a746:	f043 0301 	orr.w	r3, r3, #1
 800a74a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a1b      	ldr	r3, [r3, #32]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d005      	beq.n	800a760 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <HAL_PCD_SuspendCallback+0x48>)
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	4a03      	ldr	r2, [pc, #12]	; (800a768 <HAL_PCD_SuspendCallback+0x48>)
 800a75a:	f043 0306 	orr.w	r3, r3, #6
 800a75e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	e000ed00 	.word	0xe000ed00

0800a76c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fe fcef 	bl	800915e <USBD_LL_Resume>
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}

0800a788 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a79a:	78fa      	ldrb	r2, [r7, #3]
 800a79c:	4611      	mov	r1, r2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fd47 	bl	8009232 <USBD_LL_IsoOUTIncomplete>
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7be:	78fa      	ldrb	r2, [r7, #3]
 800a7c0:	4611      	mov	r1, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fe fd03 	bl	80091ce <USBD_LL_IsoINIncomplete>
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe fd59 	bl	8009296 <USBD_LL_DevConnected>
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe fd56 	bl	80092ac <USBD_LL_DevDisconnected>
}
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d140      	bne.n	800a89a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a818:	4a22      	ldr	r2, [pc, #136]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a20      	ldr	r2, [pc, #128]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a824:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a828:	4b1e      	ldr	r3, [pc, #120]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a82a:	4a1f      	ldr	r2, [pc, #124]	; (800a8a8 <USBD_LL_Init+0xa0>)
 800a82c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800a82e:	4b1d      	ldr	r3, [pc, #116]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a830:	2206      	movs	r2, #6
 800a832:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a834:	4b1b      	ldr	r3, [pc, #108]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a836:	2202      	movs	r2, #2
 800a838:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a83a:	4b1a      	ldr	r3, [pc, #104]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a840:	4b18      	ldr	r3, [pc, #96]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a842:	2202      	movs	r2, #2
 800a844:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a846:	4b17      	ldr	r3, [pc, #92]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a848:	2200      	movs	r2, #0
 800a84a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a84c:	4b15      	ldr	r3, [pc, #84]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a84e:	2200      	movs	r2, #0
 800a850:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a852:	4b14      	ldr	r3, [pc, #80]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a854:	2200      	movs	r2, #0
 800a856:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a858:	4b12      	ldr	r3, [pc, #72]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a85e:	4b11      	ldr	r3, [pc, #68]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a860:	2200      	movs	r2, #0
 800a862:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a864:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a866:	2200      	movs	r2, #0
 800a868:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a86a:	480e      	ldr	r0, [pc, #56]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a86c:	f7f7 ff12 	bl	8002694 <HAL_PCD_Init>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a876:	f7f6 fcbf 	bl	80011f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a87a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a87e:	4809      	ldr	r0, [pc, #36]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a880:	f7f9 f969 	bl	8003b56 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a884:	2280      	movs	r2, #128	; 0x80
 800a886:	2100      	movs	r1, #0
 800a888:	4806      	ldr	r0, [pc, #24]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a88a:	f7f9 f91d 	bl	8003ac8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a88e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a892:	2101      	movs	r1, #1
 800a894:	4803      	ldr	r0, [pc, #12]	; (800a8a4 <USBD_LL_Init+0x9c>)
 800a896:	f7f9 f917 	bl	8003ac8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	20001844 	.word	0x20001844
 800a8a8:	40040000 	.word	0x40040000

0800a8ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7f8 f803 	bl	80028ce <HAL_PCD_Start>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f942 	bl	800ab58 <USBD_Get_USB_Status>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b084      	sub	sp, #16
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	4608      	mov	r0, r1
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	70fb      	strb	r3, [r7, #3]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	70bb      	strb	r3, [r7, #2]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a900:	2300      	movs	r3, #0
 800a902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a90a:	78bb      	ldrb	r3, [r7, #2]
 800a90c:	883a      	ldrh	r2, [r7, #0]
 800a90e:	78f9      	ldrb	r1, [r7, #3]
 800a910:	f7f8 fcd4 	bl	80032bc <HAL_PCD_EP_Open>
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 f91c 	bl	800ab58 <USBD_Get_USB_Status>
 800a920:	4603      	mov	r3, r0
 800a922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a924:	7bbb      	ldrb	r3, [r7, #14]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b084      	sub	sp, #16
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	460b      	mov	r3, r1
 800a938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a93a:	2300      	movs	r3, #0
 800a93c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a948:	78fa      	ldrb	r2, [r7, #3]
 800a94a:	4611      	mov	r1, r2
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7f8 fd1d 	bl	800338c <HAL_PCD_EP_Close>
 800a952:	4603      	mov	r3, r0
 800a954:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 f8fd 	bl	800ab58 <USBD_Get_USB_Status>
 800a95e:	4603      	mov	r3, r0
 800a960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a962:	7bbb      	ldrb	r3, [r7, #14]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a986:	78fa      	ldrb	r2, [r7, #3]
 800a988:	4611      	mov	r1, r2
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7f8 fdf5 	bl	800357a <HAL_PCD_EP_SetStall>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a994:	7bfb      	ldrb	r3, [r7, #15]
 800a996:	4618      	mov	r0, r3
 800a998:	f000 f8de 	bl	800ab58 <USBD_Get_USB_Status>
 800a99c:	4603      	mov	r3, r0
 800a99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b084      	sub	sp, #16
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9c4:	78fa      	ldrb	r2, [r7, #3]
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f7f8 fe3a 	bl	8003642 <HAL_PCD_EP_ClrStall>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d2:	7bfb      	ldrb	r3, [r7, #15]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f000 f8bf 	bl	800ab58 <USBD_Get_USB_Status>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	da0b      	bge.n	800aa1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa0a:	68f9      	ldr	r1, [r7, #12]
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	333e      	adds	r3, #62	; 0x3e
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	e00b      	b.n	800aa34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa1c:	78fb      	ldrb	r3, [r7, #3]
 800aa1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa22:	68f9      	ldr	r1, [r7, #12]
 800aa24:	4613      	mov	r3, r2
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	440b      	add	r3, r1
 800aa2e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800aa32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa5a:	78fa      	ldrb	r2, [r7, #3]
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7f8 fc07 	bl	8003272 <HAL_PCD_SetAddress>
 800aa64:	4603      	mov	r3, r0
 800aa66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 f874 	bl	800ab58 <USBD_Get_USB_Status>
 800aa70:	4603      	mov	r3, r0
 800aa72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b086      	sub	sp, #24
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	607a      	str	r2, [r7, #4]
 800aa88:	603b      	str	r3, [r7, #0]
 800aa8a:	460b      	mov	r3, r1
 800aa8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aa9c:	7af9      	ldrb	r1, [r7, #11]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	f7f8 fd20 	bl	80034e6 <HAL_PCD_EP_Transmit>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 f853 	bl	800ab58 <USBD_Get_USB_Status>
 800aab2:	4603      	mov	r3, r0
 800aab4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aab6:	7dbb      	ldrb	r3, [r7, #22]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	607a      	str	r2, [r7, #4]
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	460b      	mov	r3, r1
 800aace:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aade:	7af9      	ldrb	r1, [r7, #11]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	f7f8 fc9c 	bl	8003420 <HAL_PCD_EP_Receive>
 800aae8:	4603      	mov	r3, r0
 800aaea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaec:	7dfb      	ldrb	r3, [r7, #23]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 f832 	bl	800ab58 <USBD_Get_USB_Status>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3718      	adds	r7, #24
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab14:	78fa      	ldrb	r2, [r7, #3]
 800ab16:	4611      	mov	r1, r2
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7f8 fccc 	bl	80034b6 <HAL_PCD_EP_GetRxCount>
 800ab1e:	4603      	mov	r3, r0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab30:	4b03      	ldr	r3, [pc, #12]	; (800ab40 <USBD_static_malloc+0x18>)
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	370c      	adds	r7, #12
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	20001d50 	.word	0x20001d50

0800ab44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]

}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	4603      	mov	r3, r0
 800ab60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ab66:	79fb      	ldrb	r3, [r7, #7]
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d817      	bhi.n	800ab9c <USBD_Get_USB_Status+0x44>
 800ab6c:	a201      	add	r2, pc, #4	; (adr r2, 800ab74 <USBD_Get_USB_Status+0x1c>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ab85 	.word	0x0800ab85
 800ab78:	0800ab8b 	.word	0x0800ab8b
 800ab7c:	0800ab91 	.word	0x0800ab91
 800ab80:	0800ab97 	.word	0x0800ab97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	73fb      	strb	r3, [r7, #15]
    break;
 800ab88:	e00b      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8e:	e008      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab90:	2301      	movs	r3, #1
 800ab92:	73fb      	strb	r3, [r7, #15]
    break;
 800ab94:	e005      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab96:	2303      	movs	r3, #3
 800ab98:	73fb      	strb	r3, [r7, #15]
    break;
 800ab9a:	e002      	b.n	800aba2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	73fb      	strb	r3, [r7, #15]
    break;
 800aba0:	bf00      	nop
  }
  return usb_status;
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <__errno>:
 800abb0:	4b01      	ldr	r3, [pc, #4]	; (800abb8 <__errno+0x8>)
 800abb2:	6818      	ldr	r0, [r3, #0]
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	20000104 	.word	0x20000104

0800abbc <__libc_init_array>:
 800abbc:	b570      	push	{r4, r5, r6, lr}
 800abbe:	4d0d      	ldr	r5, [pc, #52]	; (800abf4 <__libc_init_array+0x38>)
 800abc0:	4c0d      	ldr	r4, [pc, #52]	; (800abf8 <__libc_init_array+0x3c>)
 800abc2:	1b64      	subs	r4, r4, r5
 800abc4:	10a4      	asrs	r4, r4, #2
 800abc6:	2600      	movs	r6, #0
 800abc8:	42a6      	cmp	r6, r4
 800abca:	d109      	bne.n	800abe0 <__libc_init_array+0x24>
 800abcc:	4d0b      	ldr	r5, [pc, #44]	; (800abfc <__libc_init_array+0x40>)
 800abce:	4c0c      	ldr	r4, [pc, #48]	; (800ac00 <__libc_init_array+0x44>)
 800abd0:	f000 fc66 	bl	800b4a0 <_init>
 800abd4:	1b64      	subs	r4, r4, r5
 800abd6:	10a4      	asrs	r4, r4, #2
 800abd8:	2600      	movs	r6, #0
 800abda:	42a6      	cmp	r6, r4
 800abdc:	d105      	bne.n	800abea <__libc_init_array+0x2e>
 800abde:	bd70      	pop	{r4, r5, r6, pc}
 800abe0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abe4:	4798      	blx	r3
 800abe6:	3601      	adds	r6, #1
 800abe8:	e7ee      	b.n	800abc8 <__libc_init_array+0xc>
 800abea:	f855 3b04 	ldr.w	r3, [r5], #4
 800abee:	4798      	blx	r3
 800abf0:	3601      	adds	r6, #1
 800abf2:	e7f2      	b.n	800abda <__libc_init_array+0x1e>
 800abf4:	0800b5cc 	.word	0x0800b5cc
 800abf8:	0800b5cc 	.word	0x0800b5cc
 800abfc:	0800b5cc 	.word	0x0800b5cc
 800ac00:	0800b5d0 	.word	0x0800b5d0

0800ac04 <memset>:
 800ac04:	4402      	add	r2, r0
 800ac06:	4603      	mov	r3, r0
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d100      	bne.n	800ac0e <memset+0xa>
 800ac0c:	4770      	bx	lr
 800ac0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac12:	e7f9      	b.n	800ac08 <memset+0x4>

0800ac14 <setvbuf>:
 800ac14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac18:	461d      	mov	r5, r3
 800ac1a:	4b5d      	ldr	r3, [pc, #372]	; (800ad90 <setvbuf+0x17c>)
 800ac1c:	681f      	ldr	r7, [r3, #0]
 800ac1e:	4604      	mov	r4, r0
 800ac20:	460e      	mov	r6, r1
 800ac22:	4690      	mov	r8, r2
 800ac24:	b127      	cbz	r7, 800ac30 <setvbuf+0x1c>
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	b913      	cbnz	r3, 800ac30 <setvbuf+0x1c>
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	f000 f9d2 	bl	800afd4 <__sinit>
 800ac30:	4b58      	ldr	r3, [pc, #352]	; (800ad94 <setvbuf+0x180>)
 800ac32:	429c      	cmp	r4, r3
 800ac34:	d167      	bne.n	800ad06 <setvbuf+0xf2>
 800ac36:	687c      	ldr	r4, [r7, #4]
 800ac38:	f1b8 0f02 	cmp.w	r8, #2
 800ac3c:	d006      	beq.n	800ac4c <setvbuf+0x38>
 800ac3e:	f1b8 0f01 	cmp.w	r8, #1
 800ac42:	f200 809f 	bhi.w	800ad84 <setvbuf+0x170>
 800ac46:	2d00      	cmp	r5, #0
 800ac48:	f2c0 809c 	blt.w	800ad84 <setvbuf+0x170>
 800ac4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac4e:	07db      	lsls	r3, r3, #31
 800ac50:	d405      	bmi.n	800ac5e <setvbuf+0x4a>
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	0598      	lsls	r0, r3, #22
 800ac56:	d402      	bmi.n	800ac5e <setvbuf+0x4a>
 800ac58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac5a:	f000 fa59 	bl	800b110 <__retarget_lock_acquire_recursive>
 800ac5e:	4621      	mov	r1, r4
 800ac60:	4638      	mov	r0, r7
 800ac62:	f000 f923 	bl	800aeac <_fflush_r>
 800ac66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac68:	b141      	cbz	r1, 800ac7c <setvbuf+0x68>
 800ac6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac6e:	4299      	cmp	r1, r3
 800ac70:	d002      	beq.n	800ac78 <setvbuf+0x64>
 800ac72:	4638      	mov	r0, r7
 800ac74:	f000 fa7c 	bl	800b170 <_free_r>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	6363      	str	r3, [r4, #52]	; 0x34
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	61a3      	str	r3, [r4, #24]
 800ac80:	6063      	str	r3, [r4, #4]
 800ac82:	89a3      	ldrh	r3, [r4, #12]
 800ac84:	0619      	lsls	r1, r3, #24
 800ac86:	d503      	bpl.n	800ac90 <setvbuf+0x7c>
 800ac88:	6921      	ldr	r1, [r4, #16]
 800ac8a:	4638      	mov	r0, r7
 800ac8c:	f000 fa70 	bl	800b170 <_free_r>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800ac96:	f023 0303 	bic.w	r3, r3, #3
 800ac9a:	f1b8 0f02 	cmp.w	r8, #2
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	d06c      	beq.n	800ad7c <setvbuf+0x168>
 800aca2:	ab01      	add	r3, sp, #4
 800aca4:	466a      	mov	r2, sp
 800aca6:	4621      	mov	r1, r4
 800aca8:	4638      	mov	r0, r7
 800acaa:	f000 fa33 	bl	800b114 <__swhatbuf_r>
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	4318      	orrs	r0, r3
 800acb2:	81a0      	strh	r0, [r4, #12]
 800acb4:	2d00      	cmp	r5, #0
 800acb6:	d130      	bne.n	800ad1a <setvbuf+0x106>
 800acb8:	9d00      	ldr	r5, [sp, #0]
 800acba:	4628      	mov	r0, r5
 800acbc:	f000 fa50 	bl	800b160 <malloc>
 800acc0:	4606      	mov	r6, r0
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d155      	bne.n	800ad72 <setvbuf+0x15e>
 800acc6:	f8dd 9000 	ldr.w	r9, [sp]
 800acca:	45a9      	cmp	r9, r5
 800accc:	d14a      	bne.n	800ad64 <setvbuf+0x150>
 800acce:	f04f 35ff 	mov.w	r5, #4294967295
 800acd2:	2200      	movs	r2, #0
 800acd4:	60a2      	str	r2, [r4, #8]
 800acd6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800acda:	6022      	str	r2, [r4, #0]
 800acdc:	6122      	str	r2, [r4, #16]
 800acde:	2201      	movs	r2, #1
 800ace0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ace4:	6162      	str	r2, [r4, #20]
 800ace6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ace8:	f043 0302 	orr.w	r3, r3, #2
 800acec:	07d2      	lsls	r2, r2, #31
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	d405      	bmi.n	800acfe <setvbuf+0xea>
 800acf2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800acf6:	d102      	bne.n	800acfe <setvbuf+0xea>
 800acf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acfa:	f000 fa0a 	bl	800b112 <__retarget_lock_release_recursive>
 800acfe:	4628      	mov	r0, r5
 800ad00:	b003      	add	sp, #12
 800ad02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad06:	4b24      	ldr	r3, [pc, #144]	; (800ad98 <setvbuf+0x184>)
 800ad08:	429c      	cmp	r4, r3
 800ad0a:	d101      	bne.n	800ad10 <setvbuf+0xfc>
 800ad0c:	68bc      	ldr	r4, [r7, #8]
 800ad0e:	e793      	b.n	800ac38 <setvbuf+0x24>
 800ad10:	4b22      	ldr	r3, [pc, #136]	; (800ad9c <setvbuf+0x188>)
 800ad12:	429c      	cmp	r4, r3
 800ad14:	bf08      	it	eq
 800ad16:	68fc      	ldreq	r4, [r7, #12]
 800ad18:	e78e      	b.n	800ac38 <setvbuf+0x24>
 800ad1a:	2e00      	cmp	r6, #0
 800ad1c:	d0cd      	beq.n	800acba <setvbuf+0xa6>
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	b913      	cbnz	r3, 800ad28 <setvbuf+0x114>
 800ad22:	4638      	mov	r0, r7
 800ad24:	f000 f956 	bl	800afd4 <__sinit>
 800ad28:	f1b8 0f01 	cmp.w	r8, #1
 800ad2c:	bf08      	it	eq
 800ad2e:	89a3      	ldrheq	r3, [r4, #12]
 800ad30:	6026      	str	r6, [r4, #0]
 800ad32:	bf04      	itt	eq
 800ad34:	f043 0301 	orreq.w	r3, r3, #1
 800ad38:	81a3      	strheq	r3, [r4, #12]
 800ad3a:	89a2      	ldrh	r2, [r4, #12]
 800ad3c:	f012 0308 	ands.w	r3, r2, #8
 800ad40:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ad44:	d01c      	beq.n	800ad80 <setvbuf+0x16c>
 800ad46:	07d3      	lsls	r3, r2, #31
 800ad48:	bf41      	itttt	mi
 800ad4a:	2300      	movmi	r3, #0
 800ad4c:	426d      	negmi	r5, r5
 800ad4e:	60a3      	strmi	r3, [r4, #8]
 800ad50:	61a5      	strmi	r5, [r4, #24]
 800ad52:	bf58      	it	pl
 800ad54:	60a5      	strpl	r5, [r4, #8]
 800ad56:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ad58:	f015 0501 	ands.w	r5, r5, #1
 800ad5c:	d115      	bne.n	800ad8a <setvbuf+0x176>
 800ad5e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ad62:	e7c8      	b.n	800acf6 <setvbuf+0xe2>
 800ad64:	4648      	mov	r0, r9
 800ad66:	f000 f9fb 	bl	800b160 <malloc>
 800ad6a:	4606      	mov	r6, r0
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	d0ae      	beq.n	800acce <setvbuf+0xba>
 800ad70:	464d      	mov	r5, r9
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad78:	81a3      	strh	r3, [r4, #12]
 800ad7a:	e7d0      	b.n	800ad1e <setvbuf+0x10a>
 800ad7c:	2500      	movs	r5, #0
 800ad7e:	e7a8      	b.n	800acd2 <setvbuf+0xbe>
 800ad80:	60a3      	str	r3, [r4, #8]
 800ad82:	e7e8      	b.n	800ad56 <setvbuf+0x142>
 800ad84:	f04f 35ff 	mov.w	r5, #4294967295
 800ad88:	e7b9      	b.n	800acfe <setvbuf+0xea>
 800ad8a:	2500      	movs	r5, #0
 800ad8c:	e7b7      	b.n	800acfe <setvbuf+0xea>
 800ad8e:	bf00      	nop
 800ad90:	20000104 	.word	0x20000104
 800ad94:	0800b584 	.word	0x0800b584
 800ad98:	0800b5a4 	.word	0x0800b5a4
 800ad9c:	0800b564 	.word	0x0800b564

0800ada0 <__sflush_r>:
 800ada0:	898a      	ldrh	r2, [r1, #12]
 800ada2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ada6:	4605      	mov	r5, r0
 800ada8:	0710      	lsls	r0, r2, #28
 800adaa:	460c      	mov	r4, r1
 800adac:	d458      	bmi.n	800ae60 <__sflush_r+0xc0>
 800adae:	684b      	ldr	r3, [r1, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	dc05      	bgt.n	800adc0 <__sflush_r+0x20>
 800adb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	dc02      	bgt.n	800adc0 <__sflush_r+0x20>
 800adba:	2000      	movs	r0, #0
 800adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adc2:	2e00      	cmp	r6, #0
 800adc4:	d0f9      	beq.n	800adba <__sflush_r+0x1a>
 800adc6:	2300      	movs	r3, #0
 800adc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adcc:	682f      	ldr	r7, [r5, #0]
 800adce:	602b      	str	r3, [r5, #0]
 800add0:	d032      	beq.n	800ae38 <__sflush_r+0x98>
 800add2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	075a      	lsls	r2, r3, #29
 800add8:	d505      	bpl.n	800ade6 <__sflush_r+0x46>
 800adda:	6863      	ldr	r3, [r4, #4]
 800addc:	1ac0      	subs	r0, r0, r3
 800adde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ade0:	b10b      	cbz	r3, 800ade6 <__sflush_r+0x46>
 800ade2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ade4:	1ac0      	subs	r0, r0, r3
 800ade6:	2300      	movs	r3, #0
 800ade8:	4602      	mov	r2, r0
 800adea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adec:	6a21      	ldr	r1, [r4, #32]
 800adee:	4628      	mov	r0, r5
 800adf0:	47b0      	blx	r6
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	89a3      	ldrh	r3, [r4, #12]
 800adf6:	d106      	bne.n	800ae06 <__sflush_r+0x66>
 800adf8:	6829      	ldr	r1, [r5, #0]
 800adfa:	291d      	cmp	r1, #29
 800adfc:	d82c      	bhi.n	800ae58 <__sflush_r+0xb8>
 800adfe:	4a2a      	ldr	r2, [pc, #168]	; (800aea8 <__sflush_r+0x108>)
 800ae00:	40ca      	lsrs	r2, r1
 800ae02:	07d6      	lsls	r6, r2, #31
 800ae04:	d528      	bpl.n	800ae58 <__sflush_r+0xb8>
 800ae06:	2200      	movs	r2, #0
 800ae08:	6062      	str	r2, [r4, #4]
 800ae0a:	04d9      	lsls	r1, r3, #19
 800ae0c:	6922      	ldr	r2, [r4, #16]
 800ae0e:	6022      	str	r2, [r4, #0]
 800ae10:	d504      	bpl.n	800ae1c <__sflush_r+0x7c>
 800ae12:	1c42      	adds	r2, r0, #1
 800ae14:	d101      	bne.n	800ae1a <__sflush_r+0x7a>
 800ae16:	682b      	ldr	r3, [r5, #0]
 800ae18:	b903      	cbnz	r3, 800ae1c <__sflush_r+0x7c>
 800ae1a:	6560      	str	r0, [r4, #84]	; 0x54
 800ae1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae1e:	602f      	str	r7, [r5, #0]
 800ae20:	2900      	cmp	r1, #0
 800ae22:	d0ca      	beq.n	800adba <__sflush_r+0x1a>
 800ae24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae28:	4299      	cmp	r1, r3
 800ae2a:	d002      	beq.n	800ae32 <__sflush_r+0x92>
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f000 f99f 	bl	800b170 <_free_r>
 800ae32:	2000      	movs	r0, #0
 800ae34:	6360      	str	r0, [r4, #52]	; 0x34
 800ae36:	e7c1      	b.n	800adbc <__sflush_r+0x1c>
 800ae38:	6a21      	ldr	r1, [r4, #32]
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	47b0      	blx	r6
 800ae40:	1c41      	adds	r1, r0, #1
 800ae42:	d1c7      	bne.n	800add4 <__sflush_r+0x34>
 800ae44:	682b      	ldr	r3, [r5, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d0c4      	beq.n	800add4 <__sflush_r+0x34>
 800ae4a:	2b1d      	cmp	r3, #29
 800ae4c:	d001      	beq.n	800ae52 <__sflush_r+0xb2>
 800ae4e:	2b16      	cmp	r3, #22
 800ae50:	d101      	bne.n	800ae56 <__sflush_r+0xb6>
 800ae52:	602f      	str	r7, [r5, #0]
 800ae54:	e7b1      	b.n	800adba <__sflush_r+0x1a>
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae5c:	81a3      	strh	r3, [r4, #12]
 800ae5e:	e7ad      	b.n	800adbc <__sflush_r+0x1c>
 800ae60:	690f      	ldr	r7, [r1, #16]
 800ae62:	2f00      	cmp	r7, #0
 800ae64:	d0a9      	beq.n	800adba <__sflush_r+0x1a>
 800ae66:	0793      	lsls	r3, r2, #30
 800ae68:	680e      	ldr	r6, [r1, #0]
 800ae6a:	bf08      	it	eq
 800ae6c:	694b      	ldreq	r3, [r1, #20]
 800ae6e:	600f      	str	r7, [r1, #0]
 800ae70:	bf18      	it	ne
 800ae72:	2300      	movne	r3, #0
 800ae74:	eba6 0807 	sub.w	r8, r6, r7
 800ae78:	608b      	str	r3, [r1, #8]
 800ae7a:	f1b8 0f00 	cmp.w	r8, #0
 800ae7e:	dd9c      	ble.n	800adba <__sflush_r+0x1a>
 800ae80:	6a21      	ldr	r1, [r4, #32]
 800ae82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae84:	4643      	mov	r3, r8
 800ae86:	463a      	mov	r2, r7
 800ae88:	4628      	mov	r0, r5
 800ae8a:	47b0      	blx	r6
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	dc06      	bgt.n	800ae9e <__sflush_r+0xfe>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae96:	81a3      	strh	r3, [r4, #12]
 800ae98:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9c:	e78e      	b.n	800adbc <__sflush_r+0x1c>
 800ae9e:	4407      	add	r7, r0
 800aea0:	eba8 0800 	sub.w	r8, r8, r0
 800aea4:	e7e9      	b.n	800ae7a <__sflush_r+0xda>
 800aea6:	bf00      	nop
 800aea8:	20400001 	.word	0x20400001

0800aeac <_fflush_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	690b      	ldr	r3, [r1, #16]
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	b913      	cbnz	r3, 800aebc <_fflush_r+0x10>
 800aeb6:	2500      	movs	r5, #0
 800aeb8:	4628      	mov	r0, r5
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
 800aebc:	b118      	cbz	r0, 800aec6 <_fflush_r+0x1a>
 800aebe:	6983      	ldr	r3, [r0, #24]
 800aec0:	b90b      	cbnz	r3, 800aec6 <_fflush_r+0x1a>
 800aec2:	f000 f887 	bl	800afd4 <__sinit>
 800aec6:	4b14      	ldr	r3, [pc, #80]	; (800af18 <_fflush_r+0x6c>)
 800aec8:	429c      	cmp	r4, r3
 800aeca:	d11b      	bne.n	800af04 <_fflush_r+0x58>
 800aecc:	686c      	ldr	r4, [r5, #4]
 800aece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0ef      	beq.n	800aeb6 <_fflush_r+0xa>
 800aed6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aed8:	07d0      	lsls	r0, r2, #31
 800aeda:	d404      	bmi.n	800aee6 <_fflush_r+0x3a>
 800aedc:	0599      	lsls	r1, r3, #22
 800aede:	d402      	bmi.n	800aee6 <_fflush_r+0x3a>
 800aee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aee2:	f000 f915 	bl	800b110 <__retarget_lock_acquire_recursive>
 800aee6:	4628      	mov	r0, r5
 800aee8:	4621      	mov	r1, r4
 800aeea:	f7ff ff59 	bl	800ada0 <__sflush_r>
 800aeee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aef0:	07da      	lsls	r2, r3, #31
 800aef2:	4605      	mov	r5, r0
 800aef4:	d4e0      	bmi.n	800aeb8 <_fflush_r+0xc>
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	059b      	lsls	r3, r3, #22
 800aefa:	d4dd      	bmi.n	800aeb8 <_fflush_r+0xc>
 800aefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aefe:	f000 f908 	bl	800b112 <__retarget_lock_release_recursive>
 800af02:	e7d9      	b.n	800aeb8 <_fflush_r+0xc>
 800af04:	4b05      	ldr	r3, [pc, #20]	; (800af1c <_fflush_r+0x70>)
 800af06:	429c      	cmp	r4, r3
 800af08:	d101      	bne.n	800af0e <_fflush_r+0x62>
 800af0a:	68ac      	ldr	r4, [r5, #8]
 800af0c:	e7df      	b.n	800aece <_fflush_r+0x22>
 800af0e:	4b04      	ldr	r3, [pc, #16]	; (800af20 <_fflush_r+0x74>)
 800af10:	429c      	cmp	r4, r3
 800af12:	bf08      	it	eq
 800af14:	68ec      	ldreq	r4, [r5, #12]
 800af16:	e7da      	b.n	800aece <_fflush_r+0x22>
 800af18:	0800b584 	.word	0x0800b584
 800af1c:	0800b5a4 	.word	0x0800b5a4
 800af20:	0800b564 	.word	0x0800b564

0800af24 <std>:
 800af24:	2300      	movs	r3, #0
 800af26:	b510      	push	{r4, lr}
 800af28:	4604      	mov	r4, r0
 800af2a:	e9c0 3300 	strd	r3, r3, [r0]
 800af2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af32:	6083      	str	r3, [r0, #8]
 800af34:	8181      	strh	r1, [r0, #12]
 800af36:	6643      	str	r3, [r0, #100]	; 0x64
 800af38:	81c2      	strh	r2, [r0, #14]
 800af3a:	6183      	str	r3, [r0, #24]
 800af3c:	4619      	mov	r1, r3
 800af3e:	2208      	movs	r2, #8
 800af40:	305c      	adds	r0, #92	; 0x5c
 800af42:	f7ff fe5f 	bl	800ac04 <memset>
 800af46:	4b05      	ldr	r3, [pc, #20]	; (800af5c <std+0x38>)
 800af48:	6263      	str	r3, [r4, #36]	; 0x24
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <std+0x3c>)
 800af4c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af4e:	4b05      	ldr	r3, [pc, #20]	; (800af64 <std+0x40>)
 800af50:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af52:	4b05      	ldr	r3, [pc, #20]	; (800af68 <std+0x44>)
 800af54:	6224      	str	r4, [r4, #32]
 800af56:	6323      	str	r3, [r4, #48]	; 0x30
 800af58:	bd10      	pop	{r4, pc}
 800af5a:	bf00      	nop
 800af5c:	0800b351 	.word	0x0800b351
 800af60:	0800b373 	.word	0x0800b373
 800af64:	0800b3ab 	.word	0x0800b3ab
 800af68:	0800b3cf 	.word	0x0800b3cf

0800af6c <_cleanup_r>:
 800af6c:	4901      	ldr	r1, [pc, #4]	; (800af74 <_cleanup_r+0x8>)
 800af6e:	f000 b8af 	b.w	800b0d0 <_fwalk_reent>
 800af72:	bf00      	nop
 800af74:	0800aead 	.word	0x0800aead

0800af78 <__sfmoreglue>:
 800af78:	b570      	push	{r4, r5, r6, lr}
 800af7a:	2268      	movs	r2, #104	; 0x68
 800af7c:	1e4d      	subs	r5, r1, #1
 800af7e:	4355      	muls	r5, r2
 800af80:	460e      	mov	r6, r1
 800af82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af86:	f000 f95f 	bl	800b248 <_malloc_r>
 800af8a:	4604      	mov	r4, r0
 800af8c:	b140      	cbz	r0, 800afa0 <__sfmoreglue+0x28>
 800af8e:	2100      	movs	r1, #0
 800af90:	e9c0 1600 	strd	r1, r6, [r0]
 800af94:	300c      	adds	r0, #12
 800af96:	60a0      	str	r0, [r4, #8]
 800af98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af9c:	f7ff fe32 	bl	800ac04 <memset>
 800afa0:	4620      	mov	r0, r4
 800afa2:	bd70      	pop	{r4, r5, r6, pc}

0800afa4 <__sfp_lock_acquire>:
 800afa4:	4801      	ldr	r0, [pc, #4]	; (800afac <__sfp_lock_acquire+0x8>)
 800afa6:	f000 b8b3 	b.w	800b110 <__retarget_lock_acquire_recursive>
 800afaa:	bf00      	nop
 800afac:	20001f71 	.word	0x20001f71

0800afb0 <__sfp_lock_release>:
 800afb0:	4801      	ldr	r0, [pc, #4]	; (800afb8 <__sfp_lock_release+0x8>)
 800afb2:	f000 b8ae 	b.w	800b112 <__retarget_lock_release_recursive>
 800afb6:	bf00      	nop
 800afb8:	20001f71 	.word	0x20001f71

0800afbc <__sinit_lock_acquire>:
 800afbc:	4801      	ldr	r0, [pc, #4]	; (800afc4 <__sinit_lock_acquire+0x8>)
 800afbe:	f000 b8a7 	b.w	800b110 <__retarget_lock_acquire_recursive>
 800afc2:	bf00      	nop
 800afc4:	20001f72 	.word	0x20001f72

0800afc8 <__sinit_lock_release>:
 800afc8:	4801      	ldr	r0, [pc, #4]	; (800afd0 <__sinit_lock_release+0x8>)
 800afca:	f000 b8a2 	b.w	800b112 <__retarget_lock_release_recursive>
 800afce:	bf00      	nop
 800afd0:	20001f72 	.word	0x20001f72

0800afd4 <__sinit>:
 800afd4:	b510      	push	{r4, lr}
 800afd6:	4604      	mov	r4, r0
 800afd8:	f7ff fff0 	bl	800afbc <__sinit_lock_acquire>
 800afdc:	69a3      	ldr	r3, [r4, #24]
 800afde:	b11b      	cbz	r3, 800afe8 <__sinit+0x14>
 800afe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afe4:	f7ff bff0 	b.w	800afc8 <__sinit_lock_release>
 800afe8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afec:	6523      	str	r3, [r4, #80]	; 0x50
 800afee:	4b13      	ldr	r3, [pc, #76]	; (800b03c <__sinit+0x68>)
 800aff0:	4a13      	ldr	r2, [pc, #76]	; (800b040 <__sinit+0x6c>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	62a2      	str	r2, [r4, #40]	; 0x28
 800aff6:	42a3      	cmp	r3, r4
 800aff8:	bf04      	itt	eq
 800affa:	2301      	moveq	r3, #1
 800affc:	61a3      	streq	r3, [r4, #24]
 800affe:	4620      	mov	r0, r4
 800b000:	f000 f820 	bl	800b044 <__sfp>
 800b004:	6060      	str	r0, [r4, #4]
 800b006:	4620      	mov	r0, r4
 800b008:	f000 f81c 	bl	800b044 <__sfp>
 800b00c:	60a0      	str	r0, [r4, #8]
 800b00e:	4620      	mov	r0, r4
 800b010:	f000 f818 	bl	800b044 <__sfp>
 800b014:	2200      	movs	r2, #0
 800b016:	60e0      	str	r0, [r4, #12]
 800b018:	2104      	movs	r1, #4
 800b01a:	6860      	ldr	r0, [r4, #4]
 800b01c:	f7ff ff82 	bl	800af24 <std>
 800b020:	68a0      	ldr	r0, [r4, #8]
 800b022:	2201      	movs	r2, #1
 800b024:	2109      	movs	r1, #9
 800b026:	f7ff ff7d 	bl	800af24 <std>
 800b02a:	68e0      	ldr	r0, [r4, #12]
 800b02c:	2202      	movs	r2, #2
 800b02e:	2112      	movs	r1, #18
 800b030:	f7ff ff78 	bl	800af24 <std>
 800b034:	2301      	movs	r3, #1
 800b036:	61a3      	str	r3, [r4, #24]
 800b038:	e7d2      	b.n	800afe0 <__sinit+0xc>
 800b03a:	bf00      	nop
 800b03c:	0800b560 	.word	0x0800b560
 800b040:	0800af6d 	.word	0x0800af6d

0800b044 <__sfp>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	4607      	mov	r7, r0
 800b048:	f7ff ffac 	bl	800afa4 <__sfp_lock_acquire>
 800b04c:	4b1e      	ldr	r3, [pc, #120]	; (800b0c8 <__sfp+0x84>)
 800b04e:	681e      	ldr	r6, [r3, #0]
 800b050:	69b3      	ldr	r3, [r6, #24]
 800b052:	b913      	cbnz	r3, 800b05a <__sfp+0x16>
 800b054:	4630      	mov	r0, r6
 800b056:	f7ff ffbd 	bl	800afd4 <__sinit>
 800b05a:	3648      	adds	r6, #72	; 0x48
 800b05c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b060:	3b01      	subs	r3, #1
 800b062:	d503      	bpl.n	800b06c <__sfp+0x28>
 800b064:	6833      	ldr	r3, [r6, #0]
 800b066:	b30b      	cbz	r3, 800b0ac <__sfp+0x68>
 800b068:	6836      	ldr	r6, [r6, #0]
 800b06a:	e7f7      	b.n	800b05c <__sfp+0x18>
 800b06c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b070:	b9d5      	cbnz	r5, 800b0a8 <__sfp+0x64>
 800b072:	4b16      	ldr	r3, [pc, #88]	; (800b0cc <__sfp+0x88>)
 800b074:	60e3      	str	r3, [r4, #12]
 800b076:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b07a:	6665      	str	r5, [r4, #100]	; 0x64
 800b07c:	f000 f847 	bl	800b10e <__retarget_lock_init_recursive>
 800b080:	f7ff ff96 	bl	800afb0 <__sfp_lock_release>
 800b084:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b088:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b08c:	6025      	str	r5, [r4, #0]
 800b08e:	61a5      	str	r5, [r4, #24]
 800b090:	2208      	movs	r2, #8
 800b092:	4629      	mov	r1, r5
 800b094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b098:	f7ff fdb4 	bl	800ac04 <memset>
 800b09c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0a8:	3468      	adds	r4, #104	; 0x68
 800b0aa:	e7d9      	b.n	800b060 <__sfp+0x1c>
 800b0ac:	2104      	movs	r1, #4
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	f7ff ff62 	bl	800af78 <__sfmoreglue>
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	6030      	str	r0, [r6, #0]
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	d1d5      	bne.n	800b068 <__sfp+0x24>
 800b0bc:	f7ff ff78 	bl	800afb0 <__sfp_lock_release>
 800b0c0:	230c      	movs	r3, #12
 800b0c2:	603b      	str	r3, [r7, #0]
 800b0c4:	e7ee      	b.n	800b0a4 <__sfp+0x60>
 800b0c6:	bf00      	nop
 800b0c8:	0800b560 	.word	0x0800b560
 800b0cc:	ffff0001 	.word	0xffff0001

0800b0d0 <_fwalk_reent>:
 800b0d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	4688      	mov	r8, r1
 800b0d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0dc:	2700      	movs	r7, #0
 800b0de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0e2:	f1b9 0901 	subs.w	r9, r9, #1
 800b0e6:	d505      	bpl.n	800b0f4 <_fwalk_reent+0x24>
 800b0e8:	6824      	ldr	r4, [r4, #0]
 800b0ea:	2c00      	cmp	r4, #0
 800b0ec:	d1f7      	bne.n	800b0de <_fwalk_reent+0xe>
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0f4:	89ab      	ldrh	r3, [r5, #12]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d907      	bls.n	800b10a <_fwalk_reent+0x3a>
 800b0fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0fe:	3301      	adds	r3, #1
 800b100:	d003      	beq.n	800b10a <_fwalk_reent+0x3a>
 800b102:	4629      	mov	r1, r5
 800b104:	4630      	mov	r0, r6
 800b106:	47c0      	blx	r8
 800b108:	4307      	orrs	r7, r0
 800b10a:	3568      	adds	r5, #104	; 0x68
 800b10c:	e7e9      	b.n	800b0e2 <_fwalk_reent+0x12>

0800b10e <__retarget_lock_init_recursive>:
 800b10e:	4770      	bx	lr

0800b110 <__retarget_lock_acquire_recursive>:
 800b110:	4770      	bx	lr

0800b112 <__retarget_lock_release_recursive>:
 800b112:	4770      	bx	lr

0800b114 <__swhatbuf_r>:
 800b114:	b570      	push	{r4, r5, r6, lr}
 800b116:	460e      	mov	r6, r1
 800b118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b11c:	2900      	cmp	r1, #0
 800b11e:	b096      	sub	sp, #88	; 0x58
 800b120:	4614      	mov	r4, r2
 800b122:	461d      	mov	r5, r3
 800b124:	da08      	bge.n	800b138 <__swhatbuf_r+0x24>
 800b126:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	602a      	str	r2, [r5, #0]
 800b12e:	061a      	lsls	r2, r3, #24
 800b130:	d410      	bmi.n	800b154 <__swhatbuf_r+0x40>
 800b132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b136:	e00e      	b.n	800b156 <__swhatbuf_r+0x42>
 800b138:	466a      	mov	r2, sp
 800b13a:	f000 f96f 	bl	800b41c <_fstat_r>
 800b13e:	2800      	cmp	r0, #0
 800b140:	dbf1      	blt.n	800b126 <__swhatbuf_r+0x12>
 800b142:	9a01      	ldr	r2, [sp, #4]
 800b144:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b148:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b14c:	425a      	negs	r2, r3
 800b14e:	415a      	adcs	r2, r3
 800b150:	602a      	str	r2, [r5, #0]
 800b152:	e7ee      	b.n	800b132 <__swhatbuf_r+0x1e>
 800b154:	2340      	movs	r3, #64	; 0x40
 800b156:	2000      	movs	r0, #0
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	b016      	add	sp, #88	; 0x58
 800b15c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b160 <malloc>:
 800b160:	4b02      	ldr	r3, [pc, #8]	; (800b16c <malloc+0xc>)
 800b162:	4601      	mov	r1, r0
 800b164:	6818      	ldr	r0, [r3, #0]
 800b166:	f000 b86f 	b.w	800b248 <_malloc_r>
 800b16a:	bf00      	nop
 800b16c:	20000104 	.word	0x20000104

0800b170 <_free_r>:
 800b170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b172:	2900      	cmp	r1, #0
 800b174:	d044      	beq.n	800b200 <_free_r+0x90>
 800b176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b17a:	9001      	str	r0, [sp, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f1a1 0404 	sub.w	r4, r1, #4
 800b182:	bfb8      	it	lt
 800b184:	18e4      	addlt	r4, r4, r3
 800b186:	f000 f96d 	bl	800b464 <__malloc_lock>
 800b18a:	4a1e      	ldr	r2, [pc, #120]	; (800b204 <_free_r+0x94>)
 800b18c:	9801      	ldr	r0, [sp, #4]
 800b18e:	6813      	ldr	r3, [r2, #0]
 800b190:	b933      	cbnz	r3, 800b1a0 <_free_r+0x30>
 800b192:	6063      	str	r3, [r4, #4]
 800b194:	6014      	str	r4, [r2, #0]
 800b196:	b003      	add	sp, #12
 800b198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b19c:	f000 b968 	b.w	800b470 <__malloc_unlock>
 800b1a0:	42a3      	cmp	r3, r4
 800b1a2:	d908      	bls.n	800b1b6 <_free_r+0x46>
 800b1a4:	6825      	ldr	r5, [r4, #0]
 800b1a6:	1961      	adds	r1, r4, r5
 800b1a8:	428b      	cmp	r3, r1
 800b1aa:	bf01      	itttt	eq
 800b1ac:	6819      	ldreq	r1, [r3, #0]
 800b1ae:	685b      	ldreq	r3, [r3, #4]
 800b1b0:	1949      	addeq	r1, r1, r5
 800b1b2:	6021      	streq	r1, [r4, #0]
 800b1b4:	e7ed      	b.n	800b192 <_free_r+0x22>
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	b10b      	cbz	r3, 800b1c0 <_free_r+0x50>
 800b1bc:	42a3      	cmp	r3, r4
 800b1be:	d9fa      	bls.n	800b1b6 <_free_r+0x46>
 800b1c0:	6811      	ldr	r1, [r2, #0]
 800b1c2:	1855      	adds	r5, r2, r1
 800b1c4:	42a5      	cmp	r5, r4
 800b1c6:	d10b      	bne.n	800b1e0 <_free_r+0x70>
 800b1c8:	6824      	ldr	r4, [r4, #0]
 800b1ca:	4421      	add	r1, r4
 800b1cc:	1854      	adds	r4, r2, r1
 800b1ce:	42a3      	cmp	r3, r4
 800b1d0:	6011      	str	r1, [r2, #0]
 800b1d2:	d1e0      	bne.n	800b196 <_free_r+0x26>
 800b1d4:	681c      	ldr	r4, [r3, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	6053      	str	r3, [r2, #4]
 800b1da:	4421      	add	r1, r4
 800b1dc:	6011      	str	r1, [r2, #0]
 800b1de:	e7da      	b.n	800b196 <_free_r+0x26>
 800b1e0:	d902      	bls.n	800b1e8 <_free_r+0x78>
 800b1e2:	230c      	movs	r3, #12
 800b1e4:	6003      	str	r3, [r0, #0]
 800b1e6:	e7d6      	b.n	800b196 <_free_r+0x26>
 800b1e8:	6825      	ldr	r5, [r4, #0]
 800b1ea:	1961      	adds	r1, r4, r5
 800b1ec:	428b      	cmp	r3, r1
 800b1ee:	bf04      	itt	eq
 800b1f0:	6819      	ldreq	r1, [r3, #0]
 800b1f2:	685b      	ldreq	r3, [r3, #4]
 800b1f4:	6063      	str	r3, [r4, #4]
 800b1f6:	bf04      	itt	eq
 800b1f8:	1949      	addeq	r1, r1, r5
 800b1fa:	6021      	streq	r1, [r4, #0]
 800b1fc:	6054      	str	r4, [r2, #4]
 800b1fe:	e7ca      	b.n	800b196 <_free_r+0x26>
 800b200:	b003      	add	sp, #12
 800b202:	bd30      	pop	{r4, r5, pc}
 800b204:	20001f74 	.word	0x20001f74

0800b208 <sbrk_aligned>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	4e0e      	ldr	r6, [pc, #56]	; (800b244 <sbrk_aligned+0x3c>)
 800b20c:	460c      	mov	r4, r1
 800b20e:	6831      	ldr	r1, [r6, #0]
 800b210:	4605      	mov	r5, r0
 800b212:	b911      	cbnz	r1, 800b21a <sbrk_aligned+0x12>
 800b214:	f000 f88c 	bl	800b330 <_sbrk_r>
 800b218:	6030      	str	r0, [r6, #0]
 800b21a:	4621      	mov	r1, r4
 800b21c:	4628      	mov	r0, r5
 800b21e:	f000 f887 	bl	800b330 <_sbrk_r>
 800b222:	1c43      	adds	r3, r0, #1
 800b224:	d00a      	beq.n	800b23c <sbrk_aligned+0x34>
 800b226:	1cc4      	adds	r4, r0, #3
 800b228:	f024 0403 	bic.w	r4, r4, #3
 800b22c:	42a0      	cmp	r0, r4
 800b22e:	d007      	beq.n	800b240 <sbrk_aligned+0x38>
 800b230:	1a21      	subs	r1, r4, r0
 800b232:	4628      	mov	r0, r5
 800b234:	f000 f87c 	bl	800b330 <_sbrk_r>
 800b238:	3001      	adds	r0, #1
 800b23a:	d101      	bne.n	800b240 <sbrk_aligned+0x38>
 800b23c:	f04f 34ff 	mov.w	r4, #4294967295
 800b240:	4620      	mov	r0, r4
 800b242:	bd70      	pop	{r4, r5, r6, pc}
 800b244:	20001f78 	.word	0x20001f78

0800b248 <_malloc_r>:
 800b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b24c:	1ccd      	adds	r5, r1, #3
 800b24e:	f025 0503 	bic.w	r5, r5, #3
 800b252:	3508      	adds	r5, #8
 800b254:	2d0c      	cmp	r5, #12
 800b256:	bf38      	it	cc
 800b258:	250c      	movcc	r5, #12
 800b25a:	2d00      	cmp	r5, #0
 800b25c:	4607      	mov	r7, r0
 800b25e:	db01      	blt.n	800b264 <_malloc_r+0x1c>
 800b260:	42a9      	cmp	r1, r5
 800b262:	d905      	bls.n	800b270 <_malloc_r+0x28>
 800b264:	230c      	movs	r3, #12
 800b266:	603b      	str	r3, [r7, #0]
 800b268:	2600      	movs	r6, #0
 800b26a:	4630      	mov	r0, r6
 800b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b270:	4e2e      	ldr	r6, [pc, #184]	; (800b32c <_malloc_r+0xe4>)
 800b272:	f000 f8f7 	bl	800b464 <__malloc_lock>
 800b276:	6833      	ldr	r3, [r6, #0]
 800b278:	461c      	mov	r4, r3
 800b27a:	bb34      	cbnz	r4, 800b2ca <_malloc_r+0x82>
 800b27c:	4629      	mov	r1, r5
 800b27e:	4638      	mov	r0, r7
 800b280:	f7ff ffc2 	bl	800b208 <sbrk_aligned>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	4604      	mov	r4, r0
 800b288:	d14d      	bne.n	800b326 <_malloc_r+0xde>
 800b28a:	6834      	ldr	r4, [r6, #0]
 800b28c:	4626      	mov	r6, r4
 800b28e:	2e00      	cmp	r6, #0
 800b290:	d140      	bne.n	800b314 <_malloc_r+0xcc>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	4631      	mov	r1, r6
 800b296:	4638      	mov	r0, r7
 800b298:	eb04 0803 	add.w	r8, r4, r3
 800b29c:	f000 f848 	bl	800b330 <_sbrk_r>
 800b2a0:	4580      	cmp	r8, r0
 800b2a2:	d13a      	bne.n	800b31a <_malloc_r+0xd2>
 800b2a4:	6821      	ldr	r1, [r4, #0]
 800b2a6:	3503      	adds	r5, #3
 800b2a8:	1a6d      	subs	r5, r5, r1
 800b2aa:	f025 0503 	bic.w	r5, r5, #3
 800b2ae:	3508      	adds	r5, #8
 800b2b0:	2d0c      	cmp	r5, #12
 800b2b2:	bf38      	it	cc
 800b2b4:	250c      	movcc	r5, #12
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7ff ffa5 	bl	800b208 <sbrk_aligned>
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d02b      	beq.n	800b31a <_malloc_r+0xd2>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	442b      	add	r3, r5
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	e00e      	b.n	800b2e8 <_malloc_r+0xa0>
 800b2ca:	6822      	ldr	r2, [r4, #0]
 800b2cc:	1b52      	subs	r2, r2, r5
 800b2ce:	d41e      	bmi.n	800b30e <_malloc_r+0xc6>
 800b2d0:	2a0b      	cmp	r2, #11
 800b2d2:	d916      	bls.n	800b302 <_malloc_r+0xba>
 800b2d4:	1961      	adds	r1, r4, r5
 800b2d6:	42a3      	cmp	r3, r4
 800b2d8:	6025      	str	r5, [r4, #0]
 800b2da:	bf18      	it	ne
 800b2dc:	6059      	strne	r1, [r3, #4]
 800b2de:	6863      	ldr	r3, [r4, #4]
 800b2e0:	bf08      	it	eq
 800b2e2:	6031      	streq	r1, [r6, #0]
 800b2e4:	5162      	str	r2, [r4, r5]
 800b2e6:	604b      	str	r3, [r1, #4]
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f104 060b 	add.w	r6, r4, #11
 800b2ee:	f000 f8bf 	bl	800b470 <__malloc_unlock>
 800b2f2:	f026 0607 	bic.w	r6, r6, #7
 800b2f6:	1d23      	adds	r3, r4, #4
 800b2f8:	1af2      	subs	r2, r6, r3
 800b2fa:	d0b6      	beq.n	800b26a <_malloc_r+0x22>
 800b2fc:	1b9b      	subs	r3, r3, r6
 800b2fe:	50a3      	str	r3, [r4, r2]
 800b300:	e7b3      	b.n	800b26a <_malloc_r+0x22>
 800b302:	6862      	ldr	r2, [r4, #4]
 800b304:	42a3      	cmp	r3, r4
 800b306:	bf0c      	ite	eq
 800b308:	6032      	streq	r2, [r6, #0]
 800b30a:	605a      	strne	r2, [r3, #4]
 800b30c:	e7ec      	b.n	800b2e8 <_malloc_r+0xa0>
 800b30e:	4623      	mov	r3, r4
 800b310:	6864      	ldr	r4, [r4, #4]
 800b312:	e7b2      	b.n	800b27a <_malloc_r+0x32>
 800b314:	4634      	mov	r4, r6
 800b316:	6876      	ldr	r6, [r6, #4]
 800b318:	e7b9      	b.n	800b28e <_malloc_r+0x46>
 800b31a:	230c      	movs	r3, #12
 800b31c:	603b      	str	r3, [r7, #0]
 800b31e:	4638      	mov	r0, r7
 800b320:	f000 f8a6 	bl	800b470 <__malloc_unlock>
 800b324:	e7a1      	b.n	800b26a <_malloc_r+0x22>
 800b326:	6025      	str	r5, [r4, #0]
 800b328:	e7de      	b.n	800b2e8 <_malloc_r+0xa0>
 800b32a:	bf00      	nop
 800b32c:	20001f74 	.word	0x20001f74

0800b330 <_sbrk_r>:
 800b330:	b538      	push	{r3, r4, r5, lr}
 800b332:	4d06      	ldr	r5, [pc, #24]	; (800b34c <_sbrk_r+0x1c>)
 800b334:	2300      	movs	r3, #0
 800b336:	4604      	mov	r4, r0
 800b338:	4608      	mov	r0, r1
 800b33a:	602b      	str	r3, [r5, #0]
 800b33c:	f7f6 f9f8 	bl	8001730 <_sbrk>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d102      	bne.n	800b34a <_sbrk_r+0x1a>
 800b344:	682b      	ldr	r3, [r5, #0]
 800b346:	b103      	cbz	r3, 800b34a <_sbrk_r+0x1a>
 800b348:	6023      	str	r3, [r4, #0]
 800b34a:	bd38      	pop	{r3, r4, r5, pc}
 800b34c:	20001f7c 	.word	0x20001f7c

0800b350 <__sread>:
 800b350:	b510      	push	{r4, lr}
 800b352:	460c      	mov	r4, r1
 800b354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b358:	f000 f890 	bl	800b47c <_read_r>
 800b35c:	2800      	cmp	r0, #0
 800b35e:	bfab      	itete	ge
 800b360:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b362:	89a3      	ldrhlt	r3, [r4, #12]
 800b364:	181b      	addge	r3, r3, r0
 800b366:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b36a:	bfac      	ite	ge
 800b36c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b36e:	81a3      	strhlt	r3, [r4, #12]
 800b370:	bd10      	pop	{r4, pc}

0800b372 <__swrite>:
 800b372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b376:	461f      	mov	r7, r3
 800b378:	898b      	ldrh	r3, [r1, #12]
 800b37a:	05db      	lsls	r3, r3, #23
 800b37c:	4605      	mov	r5, r0
 800b37e:	460c      	mov	r4, r1
 800b380:	4616      	mov	r6, r2
 800b382:	d505      	bpl.n	800b390 <__swrite+0x1e>
 800b384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b388:	2302      	movs	r3, #2
 800b38a:	2200      	movs	r2, #0
 800b38c:	f000 f858 	bl	800b440 <_lseek_r>
 800b390:	89a3      	ldrh	r3, [r4, #12]
 800b392:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b39a:	81a3      	strh	r3, [r4, #12]
 800b39c:	4632      	mov	r2, r6
 800b39e:	463b      	mov	r3, r7
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a6:	f000 b817 	b.w	800b3d8 <_write_r>

0800b3aa <__sseek>:
 800b3aa:	b510      	push	{r4, lr}
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b2:	f000 f845 	bl	800b440 <_lseek_r>
 800b3b6:	1c43      	adds	r3, r0, #1
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	bf15      	itete	ne
 800b3bc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3c6:	81a3      	strheq	r3, [r4, #12]
 800b3c8:	bf18      	it	ne
 800b3ca:	81a3      	strhne	r3, [r4, #12]
 800b3cc:	bd10      	pop	{r4, pc}

0800b3ce <__sclose>:
 800b3ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d2:	f000 b813 	b.w	800b3fc <_close_r>
	...

0800b3d8 <_write_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4d07      	ldr	r5, [pc, #28]	; (800b3f8 <_write_r+0x20>)
 800b3dc:	4604      	mov	r4, r0
 800b3de:	4608      	mov	r0, r1
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	602a      	str	r2, [r5, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	f7f5 ff24 	bl	8001234 <_write>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_write_r+0x1e>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_write_r+0x1e>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	20001f7c 	.word	0x20001f7c

0800b3fc <_close_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4d06      	ldr	r5, [pc, #24]	; (800b418 <_close_r+0x1c>)
 800b400:	2300      	movs	r3, #0
 800b402:	4604      	mov	r4, r0
 800b404:	4608      	mov	r0, r1
 800b406:	602b      	str	r3, [r5, #0]
 800b408:	f7f5 ff40 	bl	800128c <_close>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d102      	bne.n	800b416 <_close_r+0x1a>
 800b410:	682b      	ldr	r3, [r5, #0]
 800b412:	b103      	cbz	r3, 800b416 <_close_r+0x1a>
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	20001f7c 	.word	0x20001f7c

0800b41c <_fstat_r>:
 800b41c:	b538      	push	{r3, r4, r5, lr}
 800b41e:	4d07      	ldr	r5, [pc, #28]	; (800b43c <_fstat_r+0x20>)
 800b420:	2300      	movs	r3, #0
 800b422:	4604      	mov	r4, r0
 800b424:	4608      	mov	r0, r1
 800b426:	4611      	mov	r1, r2
 800b428:	602b      	str	r3, [r5, #0]
 800b42a:	f7f5 ff7f 	bl	800132c <_fstat>
 800b42e:	1c43      	adds	r3, r0, #1
 800b430:	d102      	bne.n	800b438 <_fstat_r+0x1c>
 800b432:	682b      	ldr	r3, [r5, #0]
 800b434:	b103      	cbz	r3, 800b438 <_fstat_r+0x1c>
 800b436:	6023      	str	r3, [r4, #0]
 800b438:	bd38      	pop	{r3, r4, r5, pc}
 800b43a:	bf00      	nop
 800b43c:	20001f7c 	.word	0x20001f7c

0800b440 <_lseek_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4d07      	ldr	r5, [pc, #28]	; (800b460 <_lseek_r+0x20>)
 800b444:	4604      	mov	r4, r0
 800b446:	4608      	mov	r0, r1
 800b448:	4611      	mov	r1, r2
 800b44a:	2200      	movs	r2, #0
 800b44c:	602a      	str	r2, [r5, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f7f5 ff33 	bl	80012ba <_lseek>
 800b454:	1c43      	adds	r3, r0, #1
 800b456:	d102      	bne.n	800b45e <_lseek_r+0x1e>
 800b458:	682b      	ldr	r3, [r5, #0]
 800b45a:	b103      	cbz	r3, 800b45e <_lseek_r+0x1e>
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
 800b460:	20001f7c 	.word	0x20001f7c

0800b464 <__malloc_lock>:
 800b464:	4801      	ldr	r0, [pc, #4]	; (800b46c <__malloc_lock+0x8>)
 800b466:	f7ff be53 	b.w	800b110 <__retarget_lock_acquire_recursive>
 800b46a:	bf00      	nop
 800b46c:	20001f70 	.word	0x20001f70

0800b470 <__malloc_unlock>:
 800b470:	4801      	ldr	r0, [pc, #4]	; (800b478 <__malloc_unlock+0x8>)
 800b472:	f7ff be4e 	b.w	800b112 <__retarget_lock_release_recursive>
 800b476:	bf00      	nop
 800b478:	20001f70 	.word	0x20001f70

0800b47c <_read_r>:
 800b47c:	b538      	push	{r3, r4, r5, lr}
 800b47e:	4d07      	ldr	r5, [pc, #28]	; (800b49c <_read_r+0x20>)
 800b480:	4604      	mov	r4, r0
 800b482:	4608      	mov	r0, r1
 800b484:	4611      	mov	r1, r2
 800b486:	2200      	movs	r2, #0
 800b488:	602a      	str	r2, [r5, #0]
 800b48a:	461a      	mov	r2, r3
 800b48c:	f7f5 ff26 	bl	80012dc <_read>
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d102      	bne.n	800b49a <_read_r+0x1e>
 800b494:	682b      	ldr	r3, [r5, #0]
 800b496:	b103      	cbz	r3, 800b49a <_read_r+0x1e>
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	bd38      	pop	{r3, r4, r5, pc}
 800b49c:	20001f7c 	.word	0x20001f7c

0800b4a0 <_init>:
 800b4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a2:	bf00      	nop
 800b4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4a6:	bc08      	pop	{r3}
 800b4a8:	469e      	mov	lr, r3
 800b4aa:	4770      	bx	lr

0800b4ac <_fini>:
 800b4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ae:	bf00      	nop
 800b4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4b2:	bc08      	pop	{r3}
 800b4b4:	469e      	mov	lr, r3
 800b4b6:	4770      	bx	lr
