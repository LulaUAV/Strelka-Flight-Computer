
MS5611_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e444  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800e5d4  0800e5d4  0001e5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e698  0800e698  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800e698  0800e698  0001e698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6a0  0800e6a0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6a0  0800e6a0  0001e6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6a4  0800e6a4  0001e6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800e6a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00006988  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006a88  20006a88  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d20f  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060c3  00000000  00000000  0004d33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002600  00000000  00000000  00053408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000023b0  00000000  00000000  00055a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000924e  00000000  00000000  00057db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ed4a  00000000  00000000  00061006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5f39  00000000  00000000  0008fd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00175c89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a16c  00000000  00000000  00175cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e5bc 	.word	0x0800e5bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800e5bc 	.word	0x0800e5bc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/* Barometer configurations */
	ms5611.hspi = &hspi2;
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <main+0x70>)
 80004da:	4a1b      	ldr	r2, [pc, #108]	; (8000548 <main+0x74>)
 80004dc:	601a      	str	r2, [r3, #0]
	ms5611.baro_CS_port = GPIOB;
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <main+0x70>)
 80004e0:	4a1a      	ldr	r2, [pc, #104]	; (800054c <main+0x78>)
 80004e2:	605a      	str	r2, [r3, #4]
	ms5611.baro_CS_pin = BARO_CS_Pin;
 80004e4:	4b17      	ldr	r3, [pc, #92]	; (8000544 <main+0x70>)
 80004e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ea:	811a      	strh	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 ff72 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f834 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 fabc 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f8:	f000 fa92 	bl	8000a20 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80004fc:	f000 f92c 	bl	8000758 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8000500:	f000 f94a 	bl	8000798 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000504:	f000 f97e 	bl	8000804 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000508:	f000 fa36 	bl	8000978 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800050c:	f000 f9e6 	bl	80008dc <MX_TIM3_Init>
  MX_FATFS_Init();
 8000510:	f008 f94a 	bl	80087a8 <MX_FATFS_Init>
  MX_I2C2_Init();
 8000514:	f000 f8f2 	bl	80006fc <MX_I2C2_Init>
  MX_ADC2_Init();
 8000518:	f000 f88a 	bl	8000630 <MX_ADC2_Init>
  MX_SPI3_Init();
 800051c:	f000 f9a8 	bl	8000870 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000520:	f000 fa54 	bl	80009cc <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000524:	f000 f8d6 	bl	80006d4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f00a fb94 	bl	800ac54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052c:	4a08      	ldr	r2, [pc, #32]	; (8000550 <main+0x7c>)
 800052e:	2100      	movs	r1, #0
 8000530:	4808      	ldr	r0, [pc, #32]	; (8000554 <main+0x80>)
 8000532:	f00a fc10 	bl	800ad56 <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <main+0x84>)
 800053a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053c:	f00a fbd0 	bl	800ace0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x6c>
 8000542:	bf00      	nop
 8000544:	200004e0 	.word	0x200004e0
 8000548:	2000029c 	.word	0x2000029c
 800054c:	40020400 	.word	0x40020400
 8000550:	0800e640 	.word	0x0800e640
 8000554:	08000c11 	.word	0x08000c11
 8000558:	200004dc 	.word	0x200004dc

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f00e f81e 	bl	800e5ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b28      	ldr	r3, [pc, #160]	; (8000628 <SystemClock_Config+0xcc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a27      	ldr	r2, [pc, #156]	; (8000628 <SystemClock_Config+0xcc>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b22      	ldr	r3, [pc, #136]	; (800062c <SystemClock_Config+0xd0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a21      	ldr	r2, [pc, #132]	; (800062c <SystemClock_Config+0xd0>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005cc:	230c      	movs	r3, #12
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d0:	23a8      	movs	r3, #168	; 0xa8
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d8:	2307      	movs	r3, #7
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fc29 	bl	8003e38 <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 fb1a 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2105      	movs	r1, #5
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fe8a 	bl	8004328 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800061a:	f000 fb03 	bl	8000c24 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000642:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <MX_ADC2_Init+0x98>)
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <MX_ADC2_Init+0x9c>)
 8000646:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_ADC2_Init+0x98>)
 800064a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800064e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <MX_ADC2_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_ADC2_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_ADC2_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <MX_ADC2_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_ADC2_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_ADC2_Init+0x98>)
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <MX_ADC2_Init+0xa0>)
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <MX_ADC2_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_ADC2_Init+0x98>)
 800067e:	2201      	movs	r2, #1
 8000680:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_ADC2_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_ADC2_Init+0x98>)
 800068c:	2201      	movs	r2, #1
 800068e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_ADC2_Init+0x98>)
 8000692:	f000 ff35 	bl	8001500 <HAL_ADC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800069c:	f000 fac2 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006a0:	2308      	movs	r3, #8
 80006a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4619      	mov	r1, r3
 80006b0:	4805      	ldr	r0, [pc, #20]	; (80006c8 <MX_ADC2_Init+0x98>)
 80006b2:	f000 ff69 	bl	8001588 <HAL_ADC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80006bc:	f000 fab2 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000011c 	.word	0x2000011c
 80006cc:	40012100 	.word	0x40012100
 80006d0:	0f000001 	.word	0x0f000001

080006d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_CRC_Init+0x20>)
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <MX_CRC_Init+0x24>)
 80006dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_CRC_Init+0x20>)
 80006e0:	f001 fa81 	bl	8001be6 <HAL_CRC_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ea:	f000 fa9b 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000164 	.word	0x20000164
 80006f8:	40023000 	.word	0x40023000

080006fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C2_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2C2_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C2_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_I2C2_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C2_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C2_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2C2_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C2_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2C2_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2C2_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2C2_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2C2_Init+0x50>)
 800073a:	f001 ffbb 	bl	80026b4 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 fa6e 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	2000016c 	.word	0x2000016c
 8000750:	40005800 	.word	0x40005800
 8000754:	00061a80 	.word	0x00061a80

08000758 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SDIO_SD_Init+0x38>)
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <MX_SDIO_SD_Init+0x3c>)
 8000760:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SDIO_SD_Init+0x38>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SDIO_SD_Init+0x38>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SDIO_SD_Init+0x38>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SDIO_SD_Init+0x38>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MX_SDIO_SD_Init+0x38>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <MX_SDIO_SD_Init+0x38>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	200001c0 	.word	0x200001c0
 8000794:	40012c00 	.word	0x40012c00

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f005 f816 	bl	800581a <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 fa16 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000244 	.word	0x20000244
 8000800:	40013000 	.word	0x40013000

08000804 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_SPI2_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <MX_SPI2_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI2_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI2_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SPI2_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI2_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI2_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI2_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_SPI2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI2_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_SPI2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI2_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_SPI2_Init+0x64>)
 8000856:	f004 ffe0 	bl	800581a <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f9e0 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000029c 	.word	0x2000029c
 800086c:	40003800 	.word	0x40003800

08000870 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_SPI3_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	; (80008d8 <MX_SPI3_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_SPI3_Init+0x64>)
 800087c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_SPI3_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_SPI3_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_SPI3_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_SPI3_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_SPI3_Init+0x64>)
 800089c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008bc:	220a      	movs	r2, #10
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_SPI3_Init+0x64>)
 80008c2:	f004 ffaa 	bl	800581a <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008cc:	f000 f9aa 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200002f4 	.word	0x200002f4
 80008d8:	40003c00 	.word	0x40003c00

080008dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM3_Init+0x94>)
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <MX_TIM3_Init+0x98>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_TIM3_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM3_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_TIM3_Init+0x94>)
 800090c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000910:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_TIM3_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_TIM3_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800091e:	4814      	ldr	r0, [pc, #80]	; (8000970 <MX_TIM3_Init+0x94>)
 8000920:	f005 f804 	bl	800592c <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800092a:	f000 f97b 	bl	8000c24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_TIM3_Init+0x94>)
 800093c:	f005 f845 	bl	80059ca <HAL_TIM_ConfigClockSource>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000946:	f000 f96d 	bl	8000c24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <MX_TIM3_Init+0x94>)
 8000958:	f005 fa38 	bl	8005dcc <HAL_TIMEx_MasterConfigSynchronization>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000962:	f000 f95f 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2000034c 	.word	0x2000034c
 8000974:	40000400 	.word	0x40000400

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009b0:	f005 fa88 	bl	8005ec4 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 f933 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000394 	.word	0x20000394
 80009c8:	40011000 	.word	0x40011000

080009cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d2:	4a12      	ldr	r2, [pc, #72]	; (8000a1c <MX_USART2_UART_Init+0x50>)
 80009d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f005 fa5e 	bl	8005ec4 <HAL_UART_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a0e:	f000 f909 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200003d8 	.word	0x200003d8
 8000a1c:	40004400 	.word	0x40004400

08000a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_DMA_Init+0x4c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <MX_DMA_Init+0x4c>)
 8000a30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <MX_DMA_Init+0x4c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2105      	movs	r1, #5
 8000a46:	2010      	movs	r0, #16
 8000a48:	f001 f897 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a4c:	2010      	movs	r0, #16
 8000a4e:	f001 f8b0 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2105      	movs	r1, #5
 8000a56:	2011      	movs	r0, #17
 8000a58:	f001 f88f 	bl	8001b7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a5c:	2011      	movs	r0, #17
 8000a5e:	f001 f8a8 	bl	8001bb2 <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b5d      	ldr	r3, [pc, #372]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a5c      	ldr	r2, [pc, #368]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b5a      	ldr	r3, [pc, #360]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b56      	ldr	r3, [pc, #344]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a55      	ldr	r2, [pc, #340]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b53      	ldr	r3, [pc, #332]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b4f      	ldr	r3, [pc, #316]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b4c      	ldr	r3, [pc, #304]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a40      	ldr	r2, [pc, #256]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <MX_GPIO_Init+0x190>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CONT_TEST_EN_Pin|LED_INDICATOR_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f242 0102 	movw	r1, #8194	; 0x2002
 8000b18:	483a      	ldr	r0, [pc, #232]	; (8000c04 <MX_GPIO_Init+0x194>)
 8000b1a:	f001 fdb1 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAIN_L_Pin|MAIN_H_Pin|DROGUE_H_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f241 1103 	movw	r1, #4355	; 0x1103
 8000b24:	4838      	ldr	r0, [pc, #224]	; (8000c08 <MX_GPIO_Init+0x198>)
 8000b26:	f001 fdab 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAG_CS_Pin|DROGUE_L_Pin|BARO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 519a 	mov.w	r1, #4928	; 0x1340
 8000b30:	4836      	ldr	r0, [pc, #216]	; (8000c0c <MX_GPIO_Init+0x19c>)
 8000b32:	f001 fda5 	bl	8002680 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CONT_TEST_EN_Pin LED_INDICATOR_Pin */
  GPIO_InitStruct.Pin = CONT_TEST_EN_Pin|LED_INDICATOR_Pin;
 8000b36:	f242 0302 	movw	r3, #8194	; 0x2002
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482d      	ldr	r0, [pc, #180]	; (8000c04 <MX_GPIO_Init+0x194>)
 8000b50:	f001 fbe2 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_L_Pin MAIN_H_Pin DROGUE_H_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = MAIN_L_Pin|MAIN_H_Pin|DROGUE_H_Pin|GYRO_CS_Pin;
 8000b54:	f241 1303 	movw	r3, #4355	; 0x1103
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4826      	ldr	r0, [pc, #152]	; (8000c08 <MX_GPIO_Init+0x198>)
 8000b6e:	f001 fbd3 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INT_Pin GYRO_INT_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin|GYRO_INT_Pin|MAG_INT_Pin;
 8000b72:	2370      	movs	r3, #112	; 0x70
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	481f      	ldr	r0, [pc, #124]	; (8000c04 <MX_GPIO_Init+0x194>)
 8000b88:	f001 fbc6 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_CS_Pin DROGUE_L_Pin BARO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = MAG_CS_Pin|DROGUE_L_Pin|BARO_CS_Pin|ACCEL_CS_Pin;
 8000b8c:	f44f 539a 	mov.w	r3, #4928	; 0x1340
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4819      	ldr	r0, [pc, #100]	; (8000c0c <MX_GPIO_Init+0x19c>)
 8000ba6:	f001 fbb7 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8000baa:	2380      	movs	r3, #128	; 0x80
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <MX_GPIO_Init+0x194>)
 8000bbe:	f001 fbab 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_RF_Pin */
  GPIO_InitStruct.Pin = IO_RF_Pin;
 8000bc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_RF_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480b      	ldr	r0, [pc, #44]	; (8000c08 <MX_GPIO_Init+0x198>)
 8000bda:	f001 fb9d 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_GPIO_Init+0x19c>)
 8000bf4:	f001 fb90 	bl	8002318 <HAL_GPIO_Init>

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020000 	.word	0x40020000
 8000c0c:	40020400 	.word	0x40020400

08000c10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c18:	f00c ffa0 	bl	800db5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f00a f92c 	bl	800ae7a <osDelay>
 8000c22:	e7fb      	b.n	8000c1c <StartDefaultTask+0xc>

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_MspInit+0x54>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <HAL_MspInit+0x54>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_MspInit+0x54>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_MspInit+0x54>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_MspInit+0x54>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_MspInit+0x54>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	210f      	movs	r1, #15
 8000c72:	f06f 0001 	mvn.w	r0, #1
 8000c76:	f000 ff80 	bl	8001b7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800

08000c88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a24      	ldr	r2, [pc, #144]	; (8000d38 <HAL_ADC_MspInit+0xb0>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d141      	bne.n	8000d2e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_ADC_MspInit+0xb4>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a22      	ldr	r2, [pc, #136]	; (8000d3c <HAL_ADC_MspInit+0xb4>)
 8000cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <HAL_ADC_MspInit+0xb4>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_ADC_MspInit+0xb4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <HAL_ADC_MspInit+0xb4>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_ADC_MspInit+0xb4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_ADC_MspInit+0xb4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <HAL_ADC_MspInit+0xb4>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_ADC_MspInit+0xb4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = BATT_VOLT_READ_Pin;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d02:	2303      	movs	r3, #3
 8000d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_VOLT_READ_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480b      	ldr	r0, [pc, #44]	; (8000d40 <HAL_ADC_MspInit+0xb8>)
 8000d12:	f001 fb01 	bl	8002318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DROGUE_CONT_Pin|MAIN_CONT_Pin;
 8000d16:	2303      	movs	r3, #3
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <HAL_ADC_MspInit+0xbc>)
 8000d2a:	f001 faf5 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40012100 	.word	0x40012100
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020800 	.word	0x40020800
 8000d44:	40020400 	.word	0x40020400

08000d48 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <HAL_CRC_MspInit+0x3c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10d      	bne.n	8000d76 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_CRC_MspInit+0x40>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <HAL_CRC_MspInit+0x40>)
 8000d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_CRC_MspInit+0x40>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023000 	.word	0x40023000
 8000d88:	40023800 	.word	0x40023800

08000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_I2C_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12c      	bne.n	8000e08 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	480c      	ldr	r0, [pc, #48]	; (8000e18 <HAL_I2C_MspInit+0x8c>)
 8000de8:	f001 fa96 	bl	8002318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000df6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <HAL_I2C_MspInit+0x88>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40005800 	.word	0x40005800
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020400 	.word	0x40020400

08000e1c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a28      	ldr	r2, [pc, #160]	; (8000edc <HAL_SD_MspInit+0xc0>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d14a      	bne.n	8000ed4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a26      	ldr	r2, [pc, #152]	; (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e80:	f043 0308 	orr.w	r3, r3, #8
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_SD_MspInit+0xc4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0308 	and.w	r3, r3, #8
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e92:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e96:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ea4:	230c      	movs	r3, #12
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4619      	mov	r1, r3
 8000eae:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <HAL_SD_MspInit+0xc8>)
 8000eb0:	f001 fa32 	bl	8002318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ec4:	230c      	movs	r3, #12
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <HAL_SD_MspInit+0xcc>)
 8000ed0:	f001 fa22 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b090      	sub	sp, #64	; 0x40
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a6a      	ldr	r2, [pc, #424]	; (80010b4 <HAL_SPI_MspInit+0x1c8>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12c      	bne.n	8000f68 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f12:	4b69      	ldr	r3, [pc, #420]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a68      	ldr	r2, [pc, #416]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b66      	ldr	r3, [pc, #408]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f2e:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a61      	ldr	r2, [pc, #388]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f46:	23f0      	movs	r3, #240	; 0xf0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f56:	2305      	movs	r3, #5
 8000f58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4856      	ldr	r0, [pc, #344]	; (80010bc <HAL_SPI_MspInit+0x1d0>)
 8000f62:	f001 f9d9 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f66:	e0a0      	b.n	80010aa <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a54      	ldr	r2, [pc, #336]	; (80010c0 <HAL_SPI_MspInit+0x1d4>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d14b      	bne.n	800100a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
 8000f76:	4b50      	ldr	r3, [pc, #320]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a4f      	ldr	r2, [pc, #316]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b4d      	ldr	r3, [pc, #308]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	623b      	str	r3, [r7, #32]
 8000f8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a48      	ldr	r2, [pc, #288]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000f98:	f043 0304 	orr.w	r3, r3, #4
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b46      	ldr	r3, [pc, #280]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	4b42      	ldr	r3, [pc, #264]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a41      	ldr	r2, [pc, #260]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fc6:	230c      	movs	r3, #12
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4838      	ldr	r0, [pc, #224]	; (80010c4 <HAL_SPI_MspInit+0x1d8>)
 8000fe2:	f001 f999 	bl	8002318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ff8:	2305      	movs	r3, #5
 8000ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001000:	4619      	mov	r1, r3
 8001002:	4831      	ldr	r0, [pc, #196]	; (80010c8 <HAL_SPI_MspInit+0x1dc>)
 8001004:	f001 f988 	bl	8002318 <HAL_GPIO_Init>
}
 8001008:	e04f      	b.n	80010aa <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI3)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <HAL_SPI_MspInit+0x1e0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d14a      	bne.n	80010aa <HAL_SPI_MspInit+0x1be>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 800101e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001022:	6413      	str	r3, [r2, #64]	; 0x40
 8001024:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8001026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8001042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a18      	ldr	r2, [pc, #96]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <HAL_SPI_MspInit+0x1cc>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800107a:	2306      	movs	r3, #6
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001082:	4619      	mov	r1, r3
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <HAL_SPI_MspInit+0x1d0>)
 8001086:	f001 f947 	bl	8002318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800108a:	2338      	movs	r3, #56	; 0x38
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800109a:	2306      	movs	r3, #6
 800109c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a2:	4619      	mov	r1, r3
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <HAL_SPI_MspInit+0x1dc>)
 80010a6:	f001 f937 	bl	8002318 <HAL_GPIO_Init>
}
 80010aa:	bf00      	nop
 80010ac:	3740      	adds	r7, #64	; 0x40
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40013000 	.word	0x40013000
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40003800 	.word	0x40003800
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40003c00 	.word	0x40003c00

080010d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <HAL_TIM_Base_MspInit+0x3c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10d      	bne.n	80010fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <HAL_TIM_Base_MspInit+0x40>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a09      	ldr	r2, [pc, #36]	; (8001110 <HAL_TIM_Base_MspInit+0x40>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <HAL_TIM_Base_MspInit+0x40>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40000400 	.word	0x40000400
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a61      	ldr	r2, [pc, #388]	; (80012b8 <HAL_UART_MspInit+0x1a4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12d      	bne.n	8001192 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b60      	ldr	r3, [pc, #384]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a5f      	ldr	r2, [pc, #380]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b59      	ldr	r3, [pc, #356]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b56      	ldr	r3, [pc, #344]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800116e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001180:	2307      	movs	r3, #7
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 031c 	add.w	r3, r7, #28
 8001188:	4619      	mov	r1, r3
 800118a:	484d      	ldr	r0, [pc, #308]	; (80012c0 <HAL_UART_MspInit+0x1ac>)
 800118c:	f001 f8c4 	bl	8002318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001190:	e08d      	b.n	80012ae <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a4b      	ldr	r2, [pc, #300]	; (80012c4 <HAL_UART_MspInit+0x1b0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8088 	bne.w	80012ae <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <HAL_UART_MspInit+0x1a8>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011d6:	230c      	movs	r3, #12
 80011d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e2:	2303      	movs	r3, #3
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e6:	2307      	movs	r3, #7
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	4619      	mov	r1, r3
 80011f0:	4833      	ldr	r0, [pc, #204]	; (80012c0 <HAL_UART_MspInit+0x1ac>)
 80011f2:	f001 f891 	bl	8002318 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80011f6:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 80011f8:	4a34      	ldr	r2, [pc, #208]	; (80012cc <HAL_UART_MspInit+0x1b8>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 80011fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001202:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800120a:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001210:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 8001212:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001216:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001218:	4b2b      	ldr	r3, [pc, #172]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001236:	4824      	ldr	r0, [pc, #144]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 8001238:	f000 fcf2 	bl	8001c20 <HAL_DMA_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001242:	f7ff fcef 	bl	8000c24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 800124a:	639a      	str	r2, [r3, #56]	; 0x38
 800124c:	4a1e      	ldr	r2, [pc, #120]	; (80012c8 <HAL_UART_MspInit+0x1b4>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 8001254:	4a1f      	ldr	r2, [pc, #124]	; (80012d4 <HAL_UART_MspInit+0x1c0>)
 8001256:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 800125a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800125e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 800126e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001272:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 800128e:	2200      	movs	r2, #0
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001292:	480f      	ldr	r0, [pc, #60]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 8001294:	f000 fcc4 	bl	8001c20 <HAL_DMA_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 800129e:	f7ff fcc1 	bl	8000c24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
 80012a8:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <HAL_UART_MspInit+0x1bc>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6393      	str	r3, [r2, #56]	; 0x38
}
 80012ae:	bf00      	nop
 80012b0:	3730      	adds	r7, #48	; 0x30
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40011000 	.word	0x40011000
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40004400 	.word	0x40004400
 80012c8:	2000041c 	.word	0x2000041c
 80012cc:	40026088 	.word	0x40026088
 80012d0:	2000047c 	.word	0x2000047c
 80012d4:	400260a0 	.word	0x400260a0

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 f8b6 	bl	8001478 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800130c:	f00b fbc0 	bl	800ca90 <xTaskGetSchedulerState>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	d001      	beq.n	800131a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001316:	f00c f9a7 	bl	800d668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001324:	4802      	ldr	r0, [pc, #8]	; (8001330 <DMA1_Stream5_IRQHandler+0x10>)
 8001326:	f000 fd81 	bl	8001e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	2000041c 	.word	0x2000041c

08001334 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <DMA1_Stream6_IRQHandler+0x10>)
 800133a:	f000 fd77 	bl	8001e2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000047c 	.word	0x2000047c

08001348 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <OTG_HS_IRQHandler+0x10>)
 800134e:	f001 fc45 	bl	8002bdc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000635c 	.word	0x2000635c

0800135c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <SystemInit+0x20>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <SystemInit+0x20>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001386:	490e      	ldr	r1, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800139c:	4c0b      	ldr	r4, [pc, #44]	; (80013cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013aa:	f7ff ffd7 	bl	800135c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ae:	f00d f8cb 	bl	800e548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff f88f 	bl	80004d4 <main>
  bx  lr    
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80013c4:	0800e6a8 	.word	0x0800e6a8
  ldr r2, =_sbss
 80013c8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80013cc:	20006a88 	.word	0x20006a88

080013d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <HAL_Init+0x40>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_Init+0x40>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x40>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 fbb1 	bl	8001b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	200f      	movs	r0, #15
 8001404:	f000 f808 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff fc12 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x54>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x58>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 fbc9 	bl	8001bce <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 fb91 	bl	8001b7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_InitTick+0x5c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	20000510 	.word	0x20000510

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000510 	.word	0x20000510

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_Delay+0x44>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008

08001500 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e033      	b.n	800157e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff fbb2 	bl	8000c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001546:	f023 0302 	bic.w	r3, r3, #2
 800154a:	f043 0202 	orr.w	r2, r3, #2
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f93a 	bl	80017cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	f043 0201 	orr.w	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
 800156e:	e001      	b.n	8001574 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <HAL_ADC_ConfigChannel+0x1c>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e105      	b.n	80017b0 <HAL_ADC_ConfigChannel+0x228>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b09      	cmp	r3, #9
 80015b2:	d925      	bls.n	8001600 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68d9      	ldr	r1, [r3, #12]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	3b1e      	subs	r3, #30
 80015ca:	2207      	movs	r2, #7
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43da      	mvns	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	400a      	ands	r2, r1
 80015d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68d9      	ldr	r1, [r3, #12]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	4603      	mov	r3, r0
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4403      	add	r3, r0
 80015f2:	3b1e      	subs	r3, #30
 80015f4:	409a      	lsls	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	e022      	b.n	8001646 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6919      	ldr	r1, [r3, #16]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29b      	uxth	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	2207      	movs	r2, #7
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	400a      	ands	r2, r1
 8001622:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6919      	ldr	r1, [r3, #16]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689a      	ldr	r2, [r3, #8]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	4603      	mov	r3, r0
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4403      	add	r3, r0
 800163c:	409a      	lsls	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b06      	cmp	r3, #6
 800164c:	d824      	bhi.n	8001698 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	3b05      	subs	r3, #5
 8001660:	221f      	movs	r2, #31
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	400a      	ands	r2, r1
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	3b05      	subs	r3, #5
 800168a:	fa00 f203 	lsl.w	r2, r0, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	635a      	str	r2, [r3, #52]	; 0x34
 8001696:	e04c      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d824      	bhi.n	80016ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b23      	subs	r3, #35	; 0x23
 80016b2:	221f      	movs	r2, #31
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43da      	mvns	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	400a      	ands	r2, r1
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	3b23      	subs	r3, #35	; 0x23
 80016dc:	fa00 f203 	lsl.w	r2, r0, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	631a      	str	r2, [r3, #48]	; 0x30
 80016e8:	e023      	b.n	8001732 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b41      	subs	r3, #65	; 0x41
 80016fc:	221f      	movs	r2, #31
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	400a      	ands	r2, r1
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3b41      	subs	r3, #65	; 0x41
 8001726:	fa00 f203 	lsl.w	r2, r0, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_ADC_ConfigChannel+0x234>)
 8001734:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <HAL_ADC_ConfigChannel+0x238>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d109      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1cc>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b12      	cmp	r3, #18
 8001746:	d105      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <HAL_ADC_ConfigChannel+0x238>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d123      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x21e>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b10      	cmp	r3, #16
 8001764:	d003      	beq.n	800176e <HAL_ADC_ConfigChannel+0x1e6>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b11      	cmp	r3, #17
 800176c:	d11b      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b10      	cmp	r3, #16
 8001780:	d111      	bne.n	80017a6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HAL_ADC_ConfigChannel+0x23c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a10      	ldr	r2, [pc, #64]	; (80017c8 <HAL_ADC_ConfigChannel+0x240>)
 8001788:	fba2 2303 	umull	r2, r3, r2, r3
 800178c:	0c9a      	lsrs	r2, r3, #18
 800178e:	4613      	mov	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001798:	e002      	b.n	80017a0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	3b01      	subs	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f9      	bne.n	800179a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40012300 	.word	0x40012300
 80017c0:	40012000 	.word	0x40012000
 80017c4:	20000000 	.word	0x20000000
 80017c8:	431bde83 	.word	0x431bde83

080017cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017d4:	4b79      	ldr	r3, [pc, #484]	; (80019bc <ADC_Init+0x1f0>)
 80017d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6859      	ldr	r1, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	021a      	lsls	r2, r3, #8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	430a      	orrs	r2, r1
 8001814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6899      	ldr	r1, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	4a58      	ldr	r2, [pc, #352]	; (80019c0 <ADC_Init+0x1f4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d022      	beq.n	80018aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001872:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6899      	ldr	r1, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	6899      	ldr	r1, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	e00f      	b.n	80018ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 0202 	bic.w	r2, r2, #2
 80018d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7e1b      	ldrb	r3, [r3, #24]
 80018e4:	005a      	lsls	r2, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01b      	beq.n	8001930 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001906:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001916:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6859      	ldr	r1, [r3, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001922:	3b01      	subs	r3, #1
 8001924:	035a      	lsls	r2, r3, #13
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	e007      	b.n	8001940 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	3b01      	subs	r3, #1
 800195c:	051a      	lsls	r2, r3, #20
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001982:	025a      	lsls	r2, r3, #9
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800199a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6899      	ldr	r1, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	029a      	lsls	r2, r3, #10
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	40012300 	.word	0x40012300
 80019c0:	0f000001 	.word	0x0f000001

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b30:	d301      	bcc.n	8001b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b32:	2301      	movs	r3, #1
 8001b34:	e00f      	b.n	8001b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <SysTick_Config+0x40>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3e:	210f      	movs	r1, #15
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f7ff ff8e 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <SysTick_Config+0x40>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4e:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <SysTick_Config+0x40>)
 8001b50:	2207      	movs	r2, #7
 8001b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	e000e010 	.word	0xe000e010

08001b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ff29 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b8c:	f7ff ff3e 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7ff ff8e 	bl	8001ab8 <NVIC_EncodePriority>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff5d 	bl	8001a64 <__NVIC_SetPriority>
}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff31 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ffa2 	bl	8001b20 <SysTick_Config>
 8001bdc:	4603      	mov	r3, r0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e00e      	b.n	8001c16 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	795b      	ldrb	r3, [r3, #5]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d105      	bne.n	8001c0e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff f89d 	bl	8000d48 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff fc38 	bl	80014a0 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e099      	b.n	8001d70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c5c:	e00f      	b.n	8001c7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c5e:	f7ff fc1f 	bl	80014a0 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b05      	cmp	r3, #5
 8001c6a:	d908      	bls.n	8001c7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2203      	movs	r2, #3
 8001c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e078      	b.n	8001d70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e8      	bne.n	8001c5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_DMA_Init+0x158>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d107      	bne.n	8001ce8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f023 0307 	bic.w	r3, r3, #7
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d117      	bne.n	8001d42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00e      	beq.n	8001d42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 fa7b 	bl	8002220 <DMA_CheckFifoParam>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2240      	movs	r2, #64	; 0x40
 8001d34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e016      	b.n	8001d70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fa32 	bl	80021b4 <DMA_CalcBaseAndBitshift>
 8001d50:	4603      	mov	r3, r0
 8001d52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d58:	223f      	movs	r2, #63	; 0x3f
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	f010803f 	.word	0xf010803f

08001d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
 8001d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_DMA_Start_IT+0x26>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e040      	b.n	8001e24 <HAL_DMA_Start_IT+0xa8>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d12f      	bne.n	8001e16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2202      	movs	r2, #2
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f9c4 	bl	8002158 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	223f      	movs	r2, #63	; 0x3f
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0216 	orr.w	r2, r2, #22
 8001dea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0208 	orr.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e005      	b.n	8001e22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e38:	4b8e      	ldr	r3, [pc, #568]	; (8002074 <HAL_DMA_IRQHandler+0x248>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a8e      	ldr	r2, [pc, #568]	; (8002078 <HAL_DMA_IRQHandler+0x24c>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0a9b      	lsrs	r3, r3, #10
 8001e44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e56:	2208      	movs	r2, #8
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01a      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d013      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0204 	bic.w	r2, r2, #4
 8001e7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e84:	2208      	movs	r2, #8
 8001e86:	409a      	lsls	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d012      	beq.n	8001ece <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	2201      	movs	r2, #1
 8001ebc:	409a      	lsls	r2, r3
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00b      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f043 0204 	orr.w	r2, r3, #4
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	2210      	movs	r2, #16
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d043      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d03c      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f26:	2210      	movs	r2, #16
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d018      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d108      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d024      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
 8001f5a:	e01f      	b.n	8001f9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
 8001f6c:	e016      	b.n	8001f9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d107      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0208 	bic.w	r2, r2, #8
 8001f8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 808f 	beq.w	80020cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8087 	beq.w	80020cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b05      	cmp	r3, #5
 8001fd4:	d136      	bne.n	8002044 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0216 	bic.w	r2, r2, #22
 8001fe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695a      	ldr	r2, [r3, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ff4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <HAL_DMA_IRQHandler+0x1da>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	2b00      	cmp	r3, #0
 8002004:	d007      	beq.n	8002016 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0208 	bic.w	r2, r2, #8
 8002014:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	223f      	movs	r2, #63	; 0x3f
 800201c:	409a      	lsls	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002036:	2b00      	cmp	r3, #0
 8002038:	d07e      	beq.n	8002138 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
        }
        return;
 8002042:	e079      	b.n	8002138 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d01d      	beq.n	800208e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10d      	bne.n	800207c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	2b00      	cmp	r3, #0
 8002066:	d031      	beq.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	4798      	blx	r3
 8002070:	e02c      	b.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
 8002072:	bf00      	nop
 8002074:	20000000 	.word	0x20000000
 8002078:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002080:	2b00      	cmp	r3, #0
 8002082:	d023      	beq.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	4798      	blx	r3
 800208c:	e01e      	b.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10f      	bne.n	80020bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0210 	bic.w	r2, r2, #16
 80020aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d032      	beq.n	800213a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d022      	beq.n	8002126 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2205      	movs	r2, #5
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	3301      	adds	r3, #1
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	d307      	bcc.n	8002114 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f2      	bne.n	80020f8 <HAL_DMA_IRQHandler+0x2cc>
 8002112:	e000      	b.n	8002116 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002114:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
 8002136:	e000      	b.n	800213a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002138:	bf00      	nop
    }
  }
}
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
 8002164:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002174:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b40      	cmp	r3, #64	; 0x40
 8002184:	d108      	bne.n	8002198 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002196:	e007      	b.n	80021a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68ba      	ldr	r2, [r7, #8]
 800219e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	3b10      	subs	r3, #16
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <DMA_CalcBaseAndBitshift+0x64>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <DMA_CalcBaseAndBitshift+0x68>)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d909      	bls.n	80021f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	1d1a      	adds	r2, r3, #4
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	659a      	str	r2, [r3, #88]	; 0x58
 80021f4:	e007      	b.n	8002206 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021fe:	f023 0303 	bic.w	r3, r3, #3
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	aaaaaaab 	.word	0xaaaaaaab
 800221c:	0800e67c 	.word	0x0800e67c

08002220 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d11f      	bne.n	800227a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d856      	bhi.n	80022ee <DMA_CheckFifoParam+0xce>
 8002240:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <DMA_CheckFifoParam+0x28>)
 8002242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002246:	bf00      	nop
 8002248:	08002259 	.word	0x08002259
 800224c:	0800226b 	.word	0x0800226b
 8002250:	08002259 	.word	0x08002259
 8002254:	080022ef 	.word	0x080022ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d046      	beq.n	80022f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002268:	e043      	b.n	80022f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002272:	d140      	bne.n	80022f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002278:	e03d      	b.n	80022f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002282:	d121      	bne.n	80022c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b03      	cmp	r3, #3
 8002288:	d837      	bhi.n	80022fa <DMA_CheckFifoParam+0xda>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <DMA_CheckFifoParam+0x70>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022a1 	.word	0x080022a1
 8002294:	080022a7 	.word	0x080022a7
 8002298:	080022a1 	.word	0x080022a1
 800229c:	080022b9 	.word	0x080022b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	73fb      	strb	r3, [r7, #15]
      break;
 80022a4:	e030      	b.n	8002308 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d025      	beq.n	80022fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b6:	e022      	b.n	80022fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022c0:	d11f      	bne.n	8002302 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022c6:	e01c      	b.n	8002302 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d903      	bls.n	80022d6 <DMA_CheckFifoParam+0xb6>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d003      	beq.n	80022dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022d4:	e018      	b.n	8002308 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
      break;
 80022da:	e015      	b.n	8002308 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00e      	beq.n	8002306 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	73fb      	strb	r3, [r7, #15]
      break;
 80022ec:	e00b      	b.n	8002306 <DMA_CheckFifoParam+0xe6>
      break;
 80022ee:	bf00      	nop
 80022f0:	e00a      	b.n	8002308 <DMA_CheckFifoParam+0xe8>
      break;
 80022f2:	bf00      	nop
 80022f4:	e008      	b.n	8002308 <DMA_CheckFifoParam+0xe8>
      break;
 80022f6:	bf00      	nop
 80022f8:	e006      	b.n	8002308 <DMA_CheckFifoParam+0xe8>
      break;
 80022fa:	bf00      	nop
 80022fc:	e004      	b.n	8002308 <DMA_CheckFifoParam+0xe8>
      break;
 80022fe:	bf00      	nop
 8002300:	e002      	b.n	8002308 <DMA_CheckFifoParam+0xe8>
      break;   
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <DMA_CheckFifoParam+0xe8>
      break;
 8002306:	bf00      	nop
    }
  } 
  
  return status; 
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop

08002318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	e16b      	b.n	800260c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002334:	2201      	movs	r2, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4013      	ands	r3, r2
 8002346:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	429a      	cmp	r2, r3
 800234e:	f040 815a 	bne.w	8002606 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	2b01      	cmp	r3, #1
 800235c:	d005      	beq.n	800236a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002366:	2b02      	cmp	r3, #2
 8002368:	d130      	bne.n	80023cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	2203      	movs	r2, #3
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a0:	2201      	movs	r2, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	091b      	lsrs	r3, r3, #4
 80023b6:	f003 0201 	and.w	r2, r3, #1
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d017      	beq.n	8002408 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d123      	bne.n	800245c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	08da      	lsrs	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3208      	adds	r2, #8
 800241c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	220f      	movs	r2, #15
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	691a      	ldr	r2, [r3, #16]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	08da      	lsrs	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3208      	adds	r2, #8
 8002456:	69b9      	ldr	r1, [r7, #24]
 8002458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2203      	movs	r2, #3
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0203 	and.w	r2, r3, #3
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80b4 	beq.w	8002606 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b60      	ldr	r3, [pc, #384]	; (8002624 <HAL_GPIO_Init+0x30c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a5f      	ldr	r2, [pc, #380]	; (8002624 <HAL_GPIO_Init+0x30c>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <HAL_GPIO_Init+0x30c>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ba:	4a5b      	ldr	r2, [pc, #364]	; (8002628 <HAL_GPIO_Init+0x310>)
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	220f      	movs	r2, #15
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a52      	ldr	r2, [pc, #328]	; (800262c <HAL_GPIO_Init+0x314>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02b      	beq.n	800253e <HAL_GPIO_Init+0x226>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a51      	ldr	r2, [pc, #324]	; (8002630 <HAL_GPIO_Init+0x318>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d025      	beq.n	800253a <HAL_GPIO_Init+0x222>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a50      	ldr	r2, [pc, #320]	; (8002634 <HAL_GPIO_Init+0x31c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01f      	beq.n	8002536 <HAL_GPIO_Init+0x21e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4f      	ldr	r2, [pc, #316]	; (8002638 <HAL_GPIO_Init+0x320>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d019      	beq.n	8002532 <HAL_GPIO_Init+0x21a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4e      	ldr	r2, [pc, #312]	; (800263c <HAL_GPIO_Init+0x324>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <HAL_GPIO_Init+0x216>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4d      	ldr	r2, [pc, #308]	; (8002640 <HAL_GPIO_Init+0x328>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00d      	beq.n	800252a <HAL_GPIO_Init+0x212>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4c      	ldr	r2, [pc, #304]	; (8002644 <HAL_GPIO_Init+0x32c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d007      	beq.n	8002526 <HAL_GPIO_Init+0x20e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4b      	ldr	r2, [pc, #300]	; (8002648 <HAL_GPIO_Init+0x330>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_GPIO_Init+0x20a>
 800251e:	2307      	movs	r3, #7
 8002520:	e00e      	b.n	8002540 <HAL_GPIO_Init+0x228>
 8002522:	2308      	movs	r3, #8
 8002524:	e00c      	b.n	8002540 <HAL_GPIO_Init+0x228>
 8002526:	2306      	movs	r3, #6
 8002528:	e00a      	b.n	8002540 <HAL_GPIO_Init+0x228>
 800252a:	2305      	movs	r3, #5
 800252c:	e008      	b.n	8002540 <HAL_GPIO_Init+0x228>
 800252e:	2304      	movs	r3, #4
 8002530:	e006      	b.n	8002540 <HAL_GPIO_Init+0x228>
 8002532:	2303      	movs	r3, #3
 8002534:	e004      	b.n	8002540 <HAL_GPIO_Init+0x228>
 8002536:	2302      	movs	r3, #2
 8002538:	e002      	b.n	8002540 <HAL_GPIO_Init+0x228>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_GPIO_Init+0x228>
 800253e:	2300      	movs	r3, #0
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	f002 0203 	and.w	r2, r2, #3
 8002546:	0092      	lsls	r2, r2, #2
 8002548:	4093      	lsls	r3, r2
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002550:	4935      	ldr	r1, [pc, #212]	; (8002628 <HAL_GPIO_Init+0x310>)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	3302      	adds	r3, #2
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_GPIO_Init+0x334>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002582:	4a32      	ldr	r2, [pc, #200]	; (800264c <HAL_GPIO_Init+0x334>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002588:	4b30      	ldr	r3, [pc, #192]	; (800264c <HAL_GPIO_Init+0x334>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <HAL_GPIO_Init+0x334>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_GPIO_Init+0x334>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025d6:	4a1d      	ldr	r2, [pc, #116]	; (800264c <HAL_GPIO_Init+0x334>)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_GPIO_Init+0x334>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002600:	4a12      	ldr	r2, [pc, #72]	; (800264c <HAL_GPIO_Init+0x334>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3301      	adds	r3, #1
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2b0f      	cmp	r3, #15
 8002610:	f67f ae90 	bls.w	8002334 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40013800 	.word	0x40013800
 800262c:	40020000 	.word	0x40020000
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40021000 	.word	0x40021000
 8002640:	40021400 	.word	0x40021400
 8002644:	40021800 	.word	0x40021800
 8002648:	40021c00 	.word	0x40021c00
 800264c:	40013c00 	.word	0x40013c00

08002650 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	4013      	ands	r3, r2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e001      	b.n	8002672 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
 800268c:	4613      	mov	r3, r2
 800268e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	787b      	ldrb	r3, [r7, #1]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002696:	887a      	ldrh	r2, [r7, #2]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800269c:	e003      	b.n	80026a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800269e:	887b      	ldrh	r3, [r7, #2]
 80026a0:	041a      	lsls	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e12b      	b.n	800291e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fb56 	bl	8000d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002706:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002716:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002718:	f001 ffbe 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 800271c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a81      	ldr	r2, [pc, #516]	; (8002928 <HAL_I2C_Init+0x274>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d807      	bhi.n	8002738 <HAL_I2C_Init+0x84>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a80      	ldr	r2, [pc, #512]	; (800292c <HAL_I2C_Init+0x278>)
 800272c:	4293      	cmp	r3, r2
 800272e:	bf94      	ite	ls
 8002730:	2301      	movls	r3, #1
 8002732:	2300      	movhi	r3, #0
 8002734:	b2db      	uxtb	r3, r3
 8002736:	e006      	b.n	8002746 <HAL_I2C_Init+0x92>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a7d      	ldr	r2, [pc, #500]	; (8002930 <HAL_I2C_Init+0x27c>)
 800273c:	4293      	cmp	r3, r2
 800273e:	bf94      	ite	ls
 8002740:	2301      	movls	r3, #1
 8002742:	2300      	movhi	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e0e7      	b.n	800291e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4a78      	ldr	r2, [pc, #480]	; (8002934 <HAL_I2C_Init+0x280>)
 8002752:	fba2 2303 	umull	r2, r3, r2, r3
 8002756:	0c9b      	lsrs	r3, r3, #18
 8002758:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a6a      	ldr	r2, [pc, #424]	; (8002928 <HAL_I2C_Init+0x274>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d802      	bhi.n	8002788 <HAL_I2C_Init+0xd4>
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	3301      	adds	r3, #1
 8002786:	e009      	b.n	800279c <HAL_I2C_Init+0xe8>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	4a69      	ldr	r2, [pc, #420]	; (8002938 <HAL_I2C_Init+0x284>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	3301      	adds	r3, #1
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	495c      	ldr	r1, [pc, #368]	; (8002928 <HAL_I2C_Init+0x274>)
 80027b8:	428b      	cmp	r3, r1
 80027ba:	d819      	bhi.n	80027f0 <HAL_I2C_Init+0x13c>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e59      	subs	r1, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027ca:	1c59      	adds	r1, r3, #1
 80027cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027d0:	400b      	ands	r3, r1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_I2C_Init+0x138>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1e59      	subs	r1, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e4:	3301      	adds	r3, #1
 80027e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ea:	e051      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e04f      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d111      	bne.n	800281c <HAL_I2C_Init+0x168>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	440b      	add	r3, r1
 8002806:	fbb0 f3f3 	udiv	r3, r0, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	2b00      	cmp	r3, #0
 8002812:	bf0c      	ite	eq
 8002814:	2301      	moveq	r3, #1
 8002816:	2300      	movne	r3, #0
 8002818:	b2db      	uxtb	r3, r3
 800281a:	e012      	b.n	8002842 <HAL_I2C_Init+0x18e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	0099      	lsls	r1, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <HAL_I2C_Init+0x196>
 8002846:	2301      	movs	r3, #1
 8002848:	e022      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10e      	bne.n	8002870 <HAL_I2C_Init+0x1bc>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1e58      	subs	r0, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	460b      	mov	r3, r1
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	440b      	add	r3, r1
 8002860:	fbb0 f3f3 	udiv	r3, r0, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286e:	e00f      	b.n	8002890 <HAL_I2C_Init+0x1dc>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e58      	subs	r0, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6859      	ldr	r1, [r3, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	fbb0 f3f3 	udiv	r3, r0, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800288c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	6809      	ldr	r1, [r1, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69da      	ldr	r2, [r3, #28]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6911      	ldr	r1, [r2, #16]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68d2      	ldr	r2, [r2, #12]
 80028ca:	4311      	orrs	r1, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	430b      	orrs	r3, r1
 80028d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695a      	ldr	r2, [r3, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	000186a0 	.word	0x000186a0
 800292c:	001e847f 	.word	0x001e847f
 8002930:	003d08ff 	.word	0x003d08ff
 8002934:	431bde83 	.word	0x431bde83
 8002938:	10624dd3 	.word	0x10624dd3

0800293c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800293c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800293e:	b08f      	sub	sp, #60	; 0x3c
 8002940:	af0a      	add	r7, sp, #40	; 0x28
 8002942:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e10f      	b.n	8002b6e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d106      	bne.n	800296e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f00b fad7 	bl	800df1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f004 fbd2 	bl	8007136 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	687e      	ldr	r6, [r7, #4]
 800299a:	466d      	mov	r5, sp
 800299c:	f106 0410 	add.w	r4, r6, #16
 80029a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80029b0:	1d33      	adds	r3, r6, #4
 80029b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b4:	6838      	ldr	r0, [r7, #0]
 80029b6:	f004 faa9 	bl	8006f0c <USB_CoreInit>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0d0      	b.n	8002b6e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 fbc0 	bl	8007158 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]
 80029dc:	e04a      	b.n	8002a74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	333d      	adds	r3, #61	; 0x3d
 80029ee:	2201      	movs	r2, #1
 80029f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	333c      	adds	r3, #60	; 0x3c
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	b298      	uxth	r0, r3
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	00db      	lsls	r3, r3, #3
 8002a12:	4413      	add	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3344      	adds	r3, #68	; 0x44
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	3340      	adds	r3, #64	; 0x40
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a32:	7bfa      	ldrb	r2, [r7, #15]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	3348      	adds	r3, #72	; 0x48
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	334c      	adds	r3, #76	; 0x4c
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3354      	adds	r3, #84	; 0x54
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	3301      	adds	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	7bfa      	ldrb	r2, [r7, #15]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d3af      	bcc.n	80029de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
 8002a82:	e044      	b.n	8002b0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ac6:	7bfa      	ldrb	r2, [r7, #15]
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	440b      	add	r3, r1
 8002ad4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002adc:	7bfa      	ldrb	r2, [r7, #15]
 8002ade:	6879      	ldr	r1, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d3b5      	bcc.n	8002a84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	687e      	ldr	r6, [r7, #4]
 8002b20:	466d      	mov	r5, sp
 8002b22:	f106 0410 	add.w	r4, r6, #16
 8002b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b32:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b36:	1d33      	adds	r3, r6, #4
 8002b38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f004 fb58 	bl	80071f0 <USB_DevInit>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e00d      	b.n	8002b6e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f005 fca7 	bl	80084ba <USB_DevDisconnect>

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b76 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_PCD_Start+0x1c>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e020      	b.n	8002bd4 <HAL_PCD_Start+0x5e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d109      	bne.n	8002bb6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d005      	beq.n	8002bb6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f004 faaa 	bl	8007114 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f005 fc57 	bl	8008478 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b08d      	sub	sp, #52	; 0x34
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f005 fd15 	bl	8008622 <USB_GetMode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 848a 	bne.w	8003514 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f005 fc79 	bl	80084fc <USB_ReadInterrupts>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8480 	beq.w	8003512 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f005 fc66 	bl	80084fc <USB_ReadInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d107      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f002 0202 	and.w	r2, r2, #2
 8002c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f005 fc54 	bl	80084fc <USB_ReadInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d161      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0210 	bic.w	r2, r2, #16
 8002c6c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	0c5b      	lsrs	r3, r3, #17
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d124      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d035      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6a38      	ldr	r0, [r7, #32]
 8002cba:	f005 fa8b 	bl	80081d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cca:	441a      	add	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cdc:	441a      	add	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	621a      	str	r2, [r3, #32]
 8002ce2:	e016      	b.n	8002d12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	0c5b      	lsrs	r3, r3, #17
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	2b06      	cmp	r3, #6
 8002cee:	d110      	bne.n	8002d12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cf6:	2208      	movs	r2, #8
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	6a38      	ldr	r0, [r7, #32]
 8002cfc:	f005 fa6a 	bl	80081d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d0c:	441a      	add	r2, r3
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0210 	orr.w	r2, r2, #16
 8002d20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f005 fbe8 	bl	80084fc <USB_ReadInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d36:	f040 80a7 	bne.w	8002e88 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f005 fbed 	bl	8008522 <USB_ReadDevAllOutEpInterrupt>
 8002d48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d4a:	e099      	b.n	8002e80 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 808e 	beq.w	8002e74 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f005 fc11 	bl	800858a <USB_ReadDevOutEPInterrupt>
 8002d68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	2301      	movs	r3, #1
 8002d84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fec3 	bl	8003b14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00c      	beq.n	8002db2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	015a      	lsls	r2, r3, #5
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002da4:	461a      	mov	r2, r3
 8002da6:	2308      	movs	r3, #8
 8002da8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002daa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 ff99 	bl	8003ce4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2310      	movs	r3, #16
 8002dcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d030      	beq.n	8002e3a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d109      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002df6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	78db      	ldrb	r3, [r3, #3]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f00b f97c 	bl	800e120 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	2302      	movs	r3, #2
 8002e38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e50:	461a      	mov	r2, r3
 8002e52:	2320      	movs	r3, #32
 8002e54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d009      	beq.n	8002e74 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	3301      	adds	r3, #1
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	085b      	lsrs	r3, r3, #1
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f47f af62 	bne.w	8002d4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f005 fb35 	bl	80084fc <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e9c:	f040 80db 	bne.w	8003056 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f005 fb56 	bl	8008556 <USB_ReadDevAllInEpInterrupt>
 8002eaa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002eb0:	e0cd      	b.n	800304e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80c2 	beq.w	8003042 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f005 fb7c 	bl	80085c6 <USB_ReadDevInEPInterrupt>
 8002ece:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d057      	beq.n	8002f8a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	69f9      	ldr	r1, [r7, #28]
 8002ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002efa:	4013      	ands	r3, r2
 8002efc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d132      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	334c      	adds	r3, #76	; 0x4c
 8002f28:	6819      	ldr	r1, [r3, #0]
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4403      	add	r3, r0
 8002f38:	3348      	adds	r3, #72	; 0x48
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4419      	add	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4403      	add	r3, r0
 8002f4c:	334c      	adds	r3, #76	; 0x4c
 8002f4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d113      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x3a2>
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3354      	adds	r3, #84	; 0x54
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d108      	bne.n	8002f7e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f76:	461a      	mov	r2, r3
 8002f78:	2101      	movs	r1, #1
 8002f7a:	f005 fb83 	bl	8008684 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f00b f846 	bl	800e016 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fd8:	461a      	mov	r2, r3
 8002fda:	2340      	movs	r3, #64	; 0x40
 8002fdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d023      	beq.n	8003030 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fea:	6a38      	ldr	r0, [r7, #32]
 8002fec:	f004 fa64 	bl	80074b8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	3338      	adds	r3, #56	; 0x38
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	4413      	add	r3, r2
 8003000:	3304      	adds	r3, #4
 8003002:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	78db      	ldrb	r3, [r3, #3]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2200      	movs	r2, #0
 8003010:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	b2db      	uxtb	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f00b f893 	bl	800e144 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800302a:	461a      	mov	r2, r3
 800302c:	2302      	movs	r3, #2
 800302e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800303a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fcdb 	bl	80039f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	3301      	adds	r3, #1
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304a:	085b      	lsrs	r3, r3, #1
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	f47f af2e 	bne.w	8002eb2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f005 fa4e 	bl	80084fc <USB_ReadInterrupts>
 8003060:	4603      	mov	r3, r0
 8003062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800306a:	d122      	bne.n	80030b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	69fa      	ldr	r2, [r7, #28]
 8003076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003086:	2b01      	cmp	r3, #1
 8003088:	d108      	bne.n	800309c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003092:	2100      	movs	r1, #0
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 fec3 	bl	8003e20 <HAL_PCDEx_LPM_Callback>
 800309a:	e002      	b.n	80030a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f00b f831 	bl	800e104 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f005 fa20 	bl	80084fc <USB_ReadInterrupts>
 80030bc:	4603      	mov	r3, r0
 80030be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c6:	d112      	bne.n	80030ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f00a ffed 	bl	800e0b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030ec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f005 fa02 	bl	80084fc <USB_ReadInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003102:	f040 80b7 	bne.w	8003274 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	69fa      	ldr	r2, [r7, #28]
 8003110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2110      	movs	r1, #16
 8003120:	4618      	mov	r0, r3
 8003122:	f004 f9c9 	bl	80074b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003126:	2300      	movs	r3, #0
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312a:	e046      	b.n	80031ba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003138:	461a      	mov	r2, r3
 800313a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800313e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	4413      	add	r3, r2
 8003148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	0151      	lsls	r1, r2, #5
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	440a      	add	r2, r1
 8003156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800315a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800315e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316c:	461a      	mov	r2, r3
 800316e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003172:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003184:	0151      	lsls	r1, r2, #5
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	440a      	add	r2, r1
 800318a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800318e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003192:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a4:	0151      	lsls	r1, r2, #5
 80031a6:	69fa      	ldr	r2, [r7, #28]
 80031a8:	440a      	add	r2, r1
 80031aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	3301      	adds	r3, #1
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3b3      	bcc.n	800312c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80031d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d016      	beq.n	800320e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ea:	69fa      	ldr	r2, [r7, #28]
 80031ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031f0:	f043 030b 	orr.w	r3, r3, #11
 80031f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003206:	f043 030b 	orr.w	r3, r3, #11
 800320a:	6453      	str	r3, [r2, #68]	; 0x44
 800320c:	e015      	b.n	800323a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800321c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003220:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003224:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	69fa      	ldr	r2, [r7, #28]
 8003230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003234:	f043 030b 	orr.w	r3, r3, #11
 8003238:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003248:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800324c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800325e:	461a      	mov	r2, r3
 8003260:	f005 fa10 	bl	8008684 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f005 f93f 	bl	80084fc <USB_ReadInterrupts>
 800327e:	4603      	mov	r3, r0
 8003280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003288:	d124      	bne.n	80032d4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f005 f9d5 	bl	800863e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f004 f98a 	bl	80075b2 <USB_GetDevSpeed>
 800329e:	4603      	mov	r3, r0
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681c      	ldr	r4, [r3, #0]
 80032aa:	f001 f9e9 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80032ae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	4620      	mov	r0, r4
 80032ba:	f003 fe89 	bl	8006fd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f00a fed1 	bl	800e066 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80032d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f005 f90f 	bl	80084fc <USB_ReadInterrupts>
 80032de:	4603      	mov	r3, r0
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d10a      	bne.n	80032fe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f00a feae 	bl	800e04a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f002 0208 	and.w	r2, r2, #8
 80032fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f005 f8fa 	bl	80084fc <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330e:	2b80      	cmp	r3, #128	; 0x80
 8003310:	d122      	bne.n	8003358 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800331e:	2301      	movs	r3, #1
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
 8003322:	e014      	b.n	800334e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	b2db      	uxtb	r3, r3
 8003340:	4619      	mov	r1, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fb27 	bl	8003996 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	3301      	adds	r3, #1
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003354:	429a      	cmp	r2, r3
 8003356:	d3e5      	bcc.n	8003324 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f005 f8cd 	bl	80084fc <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003368:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800336c:	d13b      	bne.n	80033e6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800336e:	2301      	movs	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	e02b      	b.n	80033cc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3340      	adds	r3, #64	; 0x40
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d115      	bne.n	80033c6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800339a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800339c:	2b00      	cmp	r3, #0
 800339e:	da12      	bge.n	80033c6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	333f      	adds	r3, #63	; 0x3f
 80033b0:	2201      	movs	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fae8 	bl	8003996 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	3301      	adds	r3, #1
 80033ca:	627b      	str	r3, [r7, #36]	; 0x24
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d3ce      	bcc.n	8003374 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80033e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f005 f886 	bl	80084fc <USB_ReadInterrupts>
 80033f0:	4603      	mov	r3, r0
 80033f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033fa:	d155      	bne.n	80034a8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033fc:	2301      	movs	r3, #1
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003400:	e045      	b.n	800348e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d12e      	bne.n	8003488 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800342a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	da2b      	bge.n	8003488 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800343c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003440:	429a      	cmp	r2, r3
 8003442:	d121      	bne.n	8003488 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003456:	2201      	movs	r2, #1
 8003458:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003484:	6053      	str	r3, [r2, #4]
            break;
 8003486:	e007      	b.n	8003498 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	3301      	adds	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003494:	429a      	cmp	r2, r3
 8003496:	d3b4      	bcc.n	8003402 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80034a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f005 f825 	bl	80084fc <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d10a      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f00a fe52 	bl	800e168 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80034d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f005 f80f 	bl	80084fc <USB_ReadInterrupts>
 80034de:	4603      	mov	r3, r0
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d115      	bne.n	8003514 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f00a fe42 	bl	800e184 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
 8003510:	e000      	b.n	8003514 <HAL_PCD_IRQHandler+0x938>
      return;
 8003512:	bf00      	nop
    }
  }
}
 8003514:	3734      	adds	r7, #52	; 0x34
 8003516:	46bd      	mov	sp, r7
 8003518:	bd90      	pop	{r4, r7, pc}

0800351a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_PCD_SetAddress+0x1a>
 8003530:	2302      	movs	r3, #2
 8003532:	e013      	b.n	800355c <HAL_PCD_SetAddress+0x42>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	78fa      	ldrb	r2, [r7, #3]
 8003540:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f004 ff6d 	bl	800842c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	4603      	mov	r3, r0
 8003574:	70fb      	strb	r3, [r7, #3]
 8003576:	460b      	mov	r3, r1
 8003578:	803b      	strh	r3, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003586:	2b00      	cmp	r3, #0
 8003588:	da0f      	bge.n	80035aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 020f 	and.w	r2, r3, #15
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	3338      	adds	r3, #56	; 0x38
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	3304      	adds	r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	705a      	strb	r2, [r3, #1]
 80035a8:	e00f      	b.n	80035ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	f003 020f 	and.w	r2, r3, #15
 80035b0:	4613      	mov	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80035ca:	78fb      	ldrb	r3, [r7, #3]
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80035d6:	883a      	ldrh	r2, [r7, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	78ba      	ldrb	r2, [r7, #2]
 80035e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d004      	beq.n	80035f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035f4:	78bb      	ldrb	r3, [r7, #2]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d102      	bne.n	8003600 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_PCD_EP_Open+0xaa>
 800360a:	2302      	movs	r3, #2
 800360c:	e00e      	b.n	800362c <HAL_PCD_EP_Open+0xc8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68f9      	ldr	r1, [r7, #12]
 800361c:	4618      	mov	r0, r3
 800361e:	f003 ffed 	bl	80075fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800362a:	7afb      	ldrb	r3, [r7, #11]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003644:	2b00      	cmp	r3, #0
 8003646:	da0f      	bge.n	8003668 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	f003 020f 	and.w	r2, r3, #15
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	3338      	adds	r3, #56	; 0x38
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	4413      	add	r3, r2
 800365c:	3304      	adds	r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	705a      	strb	r2, [r3, #1]
 8003666:	e00f      	b.n	8003688 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	f003 020f 	and.w	r2, r3, #15
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	f003 030f 	and.w	r3, r3, #15
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_EP_Close+0x6e>
 800369e:	2302      	movs	r3, #2
 80036a0:	e00e      	b.n	80036c0 <HAL_PCD_EP_Close+0x8c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68f9      	ldr	r1, [r7, #12]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f004 f82b 	bl	800770c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	460b      	mov	r3, r1
 80036d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036d8:	7afb      	ldrb	r3, [r7, #11]
 80036da:	f003 020f 	and.w	r2, r3, #15
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4413      	add	r3, r2
 80036ee:	3304      	adds	r3, #4
 80036f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2200      	movs	r2, #0
 8003708:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800370a:	7afb      	ldrb	r3, [r7, #11]
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	b2da      	uxtb	r2, r3
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d102      	bne.n	8003724 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	6979      	ldr	r1, [r7, #20]
 800373c:	f004 fb0a 	bl	8007d54 <USB_EP0StartXfer>
 8003740:	e008      	b.n	8003754 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	6979      	ldr	r1, [r7, #20]
 8003750:	f004 f8b8 	bl	80078c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	f003 020f 	and.w	r2, r3, #15
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003780:	681b      	ldr	r3, [r3, #0]
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	607a      	str	r2, [r7, #4]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	460b      	mov	r3, r1
 800379c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379e:	7afb      	ldrb	r3, [r7, #11]
 80037a0:	f003 020f 	and.w	r2, r3, #15
 80037a4:	4613      	mov	r3, r2
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	4413      	add	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	3338      	adds	r3, #56	; 0x38
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	3304      	adds	r3, #4
 80037b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2200      	movs	r2, #0
 80037c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2201      	movs	r2, #1
 80037cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	f004 faa8 	bl	8007d54 <USB_EP0StartXfer>
 8003804:	e008      	b.n	8003818 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	f004 f856 	bl	80078c4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	429a      	cmp	r2, r3
 800383a:	d901      	bls.n	8003840 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e050      	b.n	80038e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003844:	2b00      	cmp	r3, #0
 8003846:	da0f      	bge.n	8003868 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 020f 	and.w	r2, r3, #15
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	3338      	adds	r3, #56	; 0x38
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	4413      	add	r3, r2
 800385c:	3304      	adds	r3, #4
 800385e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	705a      	strb	r2, [r3, #1]
 8003866:	e00d      	b.n	8003884 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	4613      	mov	r3, r2
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	3304      	adds	r3, #4
 800387c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388a:	78fb      	ldrb	r3, [r7, #3]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	b2da      	uxtb	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_PCD_EP_SetStall+0x82>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e01e      	b.n	80038e2 <HAL_PCD_EP_SetStall+0xc0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68f9      	ldr	r1, [r7, #12]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f004 fce6 	bl	8008284 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	b2d9      	uxtb	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038d2:	461a      	mov	r2, r3
 80038d4:	f004 fed6 	bl	8008684 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b084      	sub	sp, #16
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 020f 	and.w	r2, r3, #15
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	d901      	bls.n	8003908 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e042      	b.n	800398e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da0f      	bge.n	8003930 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	f003 020f 	and.w	r2, r3, #15
 8003916:	4613      	mov	r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	3338      	adds	r3, #56	; 0x38
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	3304      	adds	r3, #4
 8003926:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	705a      	strb	r2, [r3, #1]
 800392e:	e00f      	b.n	8003950 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	f003 020f 	and.w	r2, r3, #15
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	3304      	adds	r3, #4
 8003948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_PCD_EP_ClrStall+0x86>
 800396c:	2302      	movs	r3, #2
 800396e:	e00e      	b.n	800398e <HAL_PCD_EP_ClrStall+0xa4>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68f9      	ldr	r1, [r7, #12]
 800397e:	4618      	mov	r0, r3
 8003980:	f004 fcee 	bl	8008360 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	460b      	mov	r3, r1
 80039a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80039a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da0c      	bge.n	80039c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	3338      	adds	r3, #56	; 0x38
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	e00c      	b.n	80039de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039c4:	78fb      	ldrb	r3, [r7, #3]
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	3304      	adds	r3, #4
 80039dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 fb0d 	bl	8008004 <USB_EPStopXfer>
 80039ea:	4603      	mov	r3, r0
 80039ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80039ee:	7afb      	ldrb	r3, [r7, #11]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08a      	sub	sp, #40	; 0x28
 80039fc:	af02      	add	r7, sp, #8
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	3338      	adds	r3, #56	; 0x38
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6a1a      	ldr	r2, [r3, #32]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d901      	bls.n	8003a30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e06c      	b.n	8003b0a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d902      	bls.n	8003a4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	3303      	adds	r3, #3
 8003a50:	089b      	lsrs	r3, r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a54:	e02b      	b.n	8003aae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d902      	bls.n	8003a72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3303      	adds	r3, #3
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6919      	ldr	r1, [r3, #16]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6978      	ldr	r0, [r7, #20]
 8003a92:	f004 fb61 	bl	8008158 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	441a      	add	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1a      	ldr	r2, [r3, #32]
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	441a      	add	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d809      	bhi.n	8003ad8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1a      	ldr	r2, [r3, #32]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d203      	bcs.n	8003ad8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1be      	bne.n	8003a56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	699a      	ldr	r2, [r3, #24]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d811      	bhi.n	8003b08 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	2201      	movs	r2, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	6939      	ldr	r1, [r7, #16]
 8003b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b04:	4013      	ands	r3, r2
 8003b06:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	333c      	adds	r3, #60	; 0x3c
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d17b      	bne.n	8003c42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d015      	beq.n	8003b80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	4a61      	ldr	r2, [pc, #388]	; (8003cdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	f240 80b9 	bls.w	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 80b3 	beq.w	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b76:	461a      	mov	r2, r3
 8003b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7c:	6093      	str	r3, [r2, #8]
 8003b7e:	e0a7      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d009      	beq.n	8003b9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	461a      	mov	r2, r3
 8003b98:	2320      	movs	r3, #32
 8003b9a:	6093      	str	r3, [r2, #8]
 8003b9c:	e098      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 8093 	bne.w	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	4a4b      	ldr	r2, [pc, #300]	; (8003cdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d90f      	bls.n	8003bd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bce:	6093      	str	r3, [r2, #8]
 8003bd0:	e07e      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	0159      	lsls	r1, r3, #5
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d114      	bne.n	8003c34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	2101      	movs	r1, #1
 8003c20:	f004 fd30 	bl	8008684 <USB_EP0_OutStart>
 8003c24:	e006      	b.n	8003c34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691a      	ldr	r2, [r3, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	441a      	add	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f00a f9d0 	bl	800dfe0 <HAL_PCD_DataOutStageCallback>
 8003c40:	e046      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4a26      	ldr	r2, [pc, #152]	; (8003ce0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d124      	bne.n	8003c94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c60:	461a      	mov	r2, r3
 8003c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c66:	6093      	str	r3, [r2, #8]
 8003c68:	e032      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c80:	461a      	mov	r2, r3
 8003c82:	2320      	movs	r3, #32
 8003c84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f00a f9a7 	bl	800dfe0 <HAL_PCD_DataOutStageCallback>
 8003c92:	e01d      	b.n	8003cd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d114      	bne.n	8003cc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c9a:	6879      	ldr	r1, [r7, #4]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f004 fce0 	bl	8008684 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f00a f988 	bl	800dfe0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	4f54300a 	.word	0x4f54300a
 8003ce0:	4f54310a 	.word	0x4f54310a

08003ce4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	333c      	adds	r3, #60	; 0x3c
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d90e      	bls.n	8003d38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d009      	beq.n	8003d38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	461a      	mov	r2, r3
 8003d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f00a f93f 	bl	800dfbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d90c      	bls.n	8003d60 <PCD_EP_OutSetupPacket_int+0x7c>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d108      	bne.n	8003d60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	f004 fc92 	bl	8008684 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	4f54300a 	.word	0x4f54300a

08003d70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	70fb      	strb	r3, [r7, #3]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d107      	bne.n	8003d9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d8e:	883b      	ldrh	r3, [r7, #0]
 8003d90:	0419      	lsls	r1, r3, #16
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d9c:	e028      	b.n	8003df0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4413      	add	r3, r2
 8003daa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	e00d      	b.n	8003dce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	3340      	adds	r3, #64	; 0x40
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	7bfa      	ldrb	r2, [r7, #15]
 8003dd0:	78fb      	ldrb	r3, [r7, #3]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d3ec      	bcc.n	8003db2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003dd8:	883b      	ldrh	r3, [r7, #0]
 8003dda:	0418      	lsls	r0, r3, #16
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6819      	ldr	r1, [r3, #0]
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	4302      	orrs	r2, r0
 8003de8:	3340      	adds	r3, #64	; 0x40
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	887a      	ldrh	r2, [r7, #2]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e267      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d075      	beq.n	8003f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e56:	4b88      	ldr	r3, [pc, #544]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d00c      	beq.n	8003e7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e62:	4b85      	ldr	r3, [pc, #532]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d112      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6e:	4b82      	ldr	r3, [pc, #520]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e7a:	d10b      	bne.n	8003e94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e7c:	4b7e      	ldr	r3, [pc, #504]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d05b      	beq.n	8003f40 <HAL_RCC_OscConfig+0x108>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d157      	bne.n	8003f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e242      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d106      	bne.n	8003eac <HAL_RCC_OscConfig+0x74>
 8003e9e:	4b76      	ldr	r3, [pc, #472]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a75      	ldr	r2, [pc, #468]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e01d      	b.n	8003ee8 <HAL_RCC_OscConfig+0xb0>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x98>
 8003eb6:	4b70      	ldr	r3, [pc, #448]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6f      	ldr	r2, [pc, #444]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	4b6d      	ldr	r3, [pc, #436]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6c      	ldr	r2, [pc, #432]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	e00b      	b.n	8003ee8 <HAL_RCC_OscConfig+0xb0>
 8003ed0:	4b69      	ldr	r3, [pc, #420]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a68      	ldr	r2, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a65      	ldr	r2, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d013      	beq.n	8003f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fad6 	bl	80014a0 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ef8:	f7fd fad2 	bl	80014a0 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b64      	cmp	r3, #100	; 0x64
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e207      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0a:	4b5b      	ldr	r3, [pc, #364]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0f0      	beq.n	8003ef8 <HAL_RCC_OscConfig+0xc0>
 8003f16:	e014      	b.n	8003f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fd fac2 	bl	80014a0 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f20:	f7fd fabe 	bl	80014a0 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	; 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e1f3      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f32:	4b51      	ldr	r3, [pc, #324]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1f0      	bne.n	8003f20 <HAL_RCC_OscConfig+0xe8>
 8003f3e:	e000      	b.n	8003f42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d063      	beq.n	8004016 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00b      	beq.n	8003f72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d11c      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f66:	4b44      	ldr	r3, [pc, #272]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d116      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f72:	4b41      	ldr	r3, [pc, #260]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_RCC_OscConfig+0x152>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e1c7      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4937      	ldr	r1, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f9e:	e03a      	b.n	8004016 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fa8:	4b34      	ldr	r3, [pc, #208]	; (800407c <HAL_RCC_OscConfig+0x244>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fae:	f7fd fa77 	bl	80014a0 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb6:	f7fd fa73 	bl	80014a0 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e1a8      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4925      	ldr	r1, [pc, #148]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	600b      	str	r3, [r1, #0]
 8003fe8:	e015      	b.n	8004016 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <HAL_RCC_OscConfig+0x244>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd fa56 	bl	80014a0 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff8:	f7fd fa52 	bl	80014a0 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e187      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400a:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d036      	beq.n	8004090 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d016      	beq.n	8004058 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402a:	4b15      	ldr	r3, [pc, #84]	; (8004080 <HAL_RCC_OscConfig+0x248>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004030:	f7fd fa36 	bl	80014a0 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004038:	f7fd fa32 	bl	80014a0 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e167      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x240>)
 800404c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x200>
 8004056:	e01b      	b.n	8004090 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004058:	4b09      	ldr	r3, [pc, #36]	; (8004080 <HAL_RCC_OscConfig+0x248>)
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405e:	f7fd fa1f 	bl	80014a0 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004064:	e00e      	b.n	8004084 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004066:	f7fd fa1b 	bl	80014a0 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d907      	bls.n	8004084 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e150      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
 8004078:	40023800 	.word	0x40023800
 800407c:	42470000 	.word	0x42470000
 8004080:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004084:	4b88      	ldr	r3, [pc, #544]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ea      	bne.n	8004066 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 8097 	beq.w	80041cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a2:	4b81      	ldr	r3, [pc, #516]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10f      	bne.n	80040ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	4b7d      	ldr	r3, [pc, #500]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	4a7c      	ldr	r2, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6413      	str	r3, [r2, #64]	; 0x40
 80040be:	4b7a      	ldr	r3, [pc, #488]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ca:	2301      	movs	r3, #1
 80040cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	4b77      	ldr	r3, [pc, #476]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d118      	bne.n	800410c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040da:	4b74      	ldr	r3, [pc, #464]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a73      	ldr	r2, [pc, #460]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e6:	f7fd f9db 	bl	80014a0 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ee:	f7fd f9d7 	bl	80014a0 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e10c      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004100:	4b6a      	ldr	r3, [pc, #424]	; (80042ac <HAL_RCC_OscConfig+0x474>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0f0      	beq.n	80040ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d106      	bne.n	8004122 <HAL_RCC_OscConfig+0x2ea>
 8004114:	4b64      	ldr	r3, [pc, #400]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	4a63      	ldr	r2, [pc, #396]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800411a:	f043 0301 	orr.w	r3, r3, #1
 800411e:	6713      	str	r3, [r2, #112]	; 0x70
 8004120:	e01c      	b.n	800415c <HAL_RCC_OscConfig+0x324>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b05      	cmp	r3, #5
 8004128:	d10c      	bne.n	8004144 <HAL_RCC_OscConfig+0x30c>
 800412a:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	4a5e      	ldr	r2, [pc, #376]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	6713      	str	r3, [r2, #112]	; 0x70
 8004136:	4b5c      	ldr	r3, [pc, #368]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	4a5b      	ldr	r2, [pc, #364]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	6713      	str	r3, [r2, #112]	; 0x70
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0x324>
 8004144:	4b58      	ldr	r3, [pc, #352]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004148:	4a57      	ldr	r2, [pc, #348]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800414a:	f023 0301 	bic.w	r3, r3, #1
 800414e:	6713      	str	r3, [r2, #112]	; 0x70
 8004150:	4b55      	ldr	r3, [pc, #340]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	4a54      	ldr	r2, [pc, #336]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004156:	f023 0304 	bic.w	r3, r3, #4
 800415a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d015      	beq.n	8004190 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fd f99c 	bl	80014a0 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fd f998 	bl	80014a0 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	; 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e0cb      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	4b49      	ldr	r3, [pc, #292]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ee      	beq.n	800416c <HAL_RCC_OscConfig+0x334>
 800418e:	e014      	b.n	80041ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004190:	f7fd f986 	bl	80014a0 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004196:	e00a      	b.n	80041ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004198:	f7fd f982 	bl	80014a0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e0b5      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	4b3e      	ldr	r3, [pc, #248]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1ee      	bne.n	8004198 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d105      	bne.n	80041cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c0:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	4a38      	ldr	r2, [pc, #224]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 80a1 	beq.w	8004318 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041d6:	4b34      	ldr	r3, [pc, #208]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d05c      	beq.n	800429c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d141      	bne.n	800426e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ea:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <HAL_RCC_OscConfig+0x478>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fd f956 	bl	80014a0 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f8:	f7fd f952 	bl	80014a0 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e087      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420a:	4b27      	ldr	r3, [pc, #156]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f0      	bne.n	80041f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69da      	ldr	r2, [r3, #28]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	431a      	orrs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	019b      	lsls	r3, r3, #6
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	3b01      	subs	r3, #1
 8004230:	041b      	lsls	r3, r3, #16
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	061b      	lsls	r3, r3, #24
 800423a:	491b      	ldr	r1, [pc, #108]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004240:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <HAL_RCC_OscConfig+0x478>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7fd f92b 	bl	80014a0 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424e:	f7fd f927 	bl	80014a0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e05c      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0f0      	beq.n	800424e <HAL_RCC_OscConfig+0x416>
 800426c:	e054      	b.n	8004318 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCC_OscConfig+0x478>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7fd f914 	bl	80014a0 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427c:	f7fd f910 	bl	80014a0 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e045      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_OscConfig+0x470>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x444>
 800429a:	e03d      	b.n	8004318 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d107      	bne.n	80042b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e038      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
 80042a8:	40023800 	.word	0x40023800
 80042ac:	40007000 	.word	0x40007000
 80042b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042b4:	4b1b      	ldr	r3, [pc, #108]	; (8004324 <HAL_RCC_OscConfig+0x4ec>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d028      	beq.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d121      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	429a      	cmp	r2, r3
 80042dc:	d11a      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042e4:	4013      	ands	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d111      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	085b      	lsrs	r3, r3, #1
 80042fc:	3b01      	subs	r3, #1
 80042fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004300:	429a      	cmp	r2, r3
 8004302:	d107      	bne.n	8004314 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800

08004328 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0cc      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800433c:	4b68      	ldr	r3, [pc, #416]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d90c      	bls.n	8004364 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434a:	4b65      	ldr	r3, [pc, #404]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004352:	4b63      	ldr	r3, [pc, #396]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d001      	beq.n	8004364 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0b8      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d020      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800437c:	4b59      	ldr	r3, [pc, #356]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	4a58      	ldr	r2, [pc, #352]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004386:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0308 	and.w	r3, r3, #8
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004394:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a52      	ldr	r2, [pc, #328]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800439e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a0:	4b50      	ldr	r3, [pc, #320]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	494d      	ldr	r1, [pc, #308]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d044      	beq.n	8004448 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	4b47      	ldr	r3, [pc, #284]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d119      	bne.n	8004406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e07f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d107      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e6:	4b3f      	ldr	r3, [pc, #252]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e06f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f6:	4b3b      	ldr	r3, [pc, #236]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e067      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f023 0203 	bic.w	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4934      	ldr	r1, [pc, #208]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004418:	f7fd f842 	bl	80014a0 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	e00a      	b.n	8004436 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004420:	f7fd f83e 	bl	80014a0 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e04f      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	4b2b      	ldr	r3, [pc, #172]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 020c 	and.w	r2, r3, #12
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	429a      	cmp	r2, r3
 8004446:	d1eb      	bne.n	8004420 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004448:	4b25      	ldr	r3, [pc, #148]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d20c      	bcs.n	8004470 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e032      	b.n	80044d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800447c:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4916      	ldr	r1, [pc, #88]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	4313      	orrs	r3, r2
 800448c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	490e      	ldr	r1, [pc, #56]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044ae:	f000 f821 	bl	80044f4 <HAL_RCC_GetSysClockFreq>
 80044b2:	4602      	mov	r2, r0
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	091b      	lsrs	r3, r3, #4
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	490a      	ldr	r1, [pc, #40]	; (80044e8 <HAL_RCC_ClockConfig+0x1c0>)
 80044c0:	5ccb      	ldrb	r3, [r1, r3]
 80044c2:	fa22 f303 	lsr.w	r3, r2, r3
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_RCC_ClockConfig+0x1c8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fc ffa2 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023c00 	.word	0x40023c00
 80044e4:	40023800 	.word	0x40023800
 80044e8:	0800e664 	.word	0x0800e664
 80044ec:	20000000 	.word	0x20000000
 80044f0:	20000004 	.word	0x20000004

080044f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f8:	b090      	sub	sp, #64	; 0x40
 80044fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004500:	2300      	movs	r3, #0
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004504:	2300      	movs	r3, #0
 8004506:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800450c:	4b59      	ldr	r3, [pc, #356]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 030c 	and.w	r3, r3, #12
 8004514:	2b08      	cmp	r3, #8
 8004516:	d00d      	beq.n	8004534 <HAL_RCC_GetSysClockFreq+0x40>
 8004518:	2b08      	cmp	r3, #8
 800451a:	f200 80a1 	bhi.w	8004660 <HAL_RCC_GetSysClockFreq+0x16c>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_RCC_GetSysClockFreq+0x34>
 8004522:	2b04      	cmp	r3, #4
 8004524:	d003      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0x3a>
 8004526:	e09b      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_GetSysClockFreq+0x184>)
 800452a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800452c:	e09b      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800452e:	4b53      	ldr	r3, [pc, #332]	; (800467c <HAL_RCC_GetSysClockFreq+0x188>)
 8004530:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004532:	e098      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004534:	4b4f      	ldr	r3, [pc, #316]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800453e:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d028      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800454a:	4b4a      	ldr	r3, [pc, #296]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	099b      	lsrs	r3, r3, #6
 8004550:	2200      	movs	r2, #0
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	627a      	str	r2, [r7, #36]	; 0x24
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800455c:	2100      	movs	r1, #0
 800455e:	4b47      	ldr	r3, [pc, #284]	; (800467c <HAL_RCC_GetSysClockFreq+0x188>)
 8004560:	fb03 f201 	mul.w	r2, r3, r1
 8004564:	2300      	movs	r3, #0
 8004566:	fb00 f303 	mul.w	r3, r0, r3
 800456a:	4413      	add	r3, r2
 800456c:	4a43      	ldr	r2, [pc, #268]	; (800467c <HAL_RCC_GetSysClockFreq+0x188>)
 800456e:	fba0 1202 	umull	r1, r2, r0, r2
 8004572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004574:	460a      	mov	r2, r1
 8004576:	62ba      	str	r2, [r7, #40]	; 0x28
 8004578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800457a:	4413      	add	r3, r2
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004580:	2200      	movs	r2, #0
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	61fa      	str	r2, [r7, #28]
 8004586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800458a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800458e:	f7fb fe1f 	bl	80001d0 <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4613      	mov	r3, r2
 8004598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800459a:	e053      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459c:	4b35      	ldr	r3, [pc, #212]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	099b      	lsrs	r3, r3, #6
 80045a2:	2200      	movs	r2, #0
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	617a      	str	r2, [r7, #20]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80045ae:	f04f 0b00 	mov.w	fp, #0
 80045b2:	4652      	mov	r2, sl
 80045b4:	465b      	mov	r3, fp
 80045b6:	f04f 0000 	mov.w	r0, #0
 80045ba:	f04f 0100 	mov.w	r1, #0
 80045be:	0159      	lsls	r1, r3, #5
 80045c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c4:	0150      	lsls	r0, r2, #5
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	ebb2 080a 	subs.w	r8, r2, sl
 80045ce:	eb63 090b 	sbc.w	r9, r3, fp
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045e6:	ebb2 0408 	subs.w	r4, r2, r8
 80045ea:	eb63 0509 	sbc.w	r5, r3, r9
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	00eb      	lsls	r3, r5, #3
 80045f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045fc:	00e2      	lsls	r2, r4, #3
 80045fe:	4614      	mov	r4, r2
 8004600:	461d      	mov	r5, r3
 8004602:	eb14 030a 	adds.w	r3, r4, sl
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	eb45 030b 	adc.w	r3, r5, fp
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800461a:	4629      	mov	r1, r5
 800461c:	028b      	lsls	r3, r1, #10
 800461e:	4621      	mov	r1, r4
 8004620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004624:	4621      	mov	r1, r4
 8004626:	028a      	lsls	r2, r1, #10
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	2200      	movs	r2, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	60fa      	str	r2, [r7, #12]
 8004634:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004638:	f7fb fdca 	bl	80001d0 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4613      	mov	r3, r2
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004644:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <HAL_RCC_GetSysClockFreq+0x180>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	3301      	adds	r3, #1
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	fbb2 f3f3 	udiv	r3, r2, r3
 800465c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800465e:	e002      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004660:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_RCC_GetSysClockFreq+0x184>)
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004668:	4618      	mov	r0, r3
 800466a:	3740      	adds	r7, #64	; 0x40
 800466c:	46bd      	mov	sp, r7
 800466e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004672:	bf00      	nop
 8004674:	40023800 	.word	0x40023800
 8004678:	00f42400 	.word	0x00f42400
 800467c:	016e3600 	.word	0x016e3600

08004680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004684:	4b03      	ldr	r3, [pc, #12]	; (8004694 <HAL_RCC_GetHCLKFreq+0x14>)
 8004686:	681b      	ldr	r3, [r3, #0]
}
 8004688:	4618      	mov	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	20000000 	.word	0x20000000

08004698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800469c:	f7ff fff0 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	0a9b      	lsrs	r3, r3, #10
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	4903      	ldr	r1, [pc, #12]	; (80046bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ae:	5ccb      	ldrb	r3, [r1, r3]
 80046b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40023800 	.word	0x40023800
 80046bc:	0800e674 	.word	0x0800e674

080046c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046c4:	f7ff ffdc 	bl	8004680 <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0b5b      	lsrs	r3, r3, #13
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4903      	ldr	r1, [pc, #12]	; (80046e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	0800e674 	.word	0x0800e674

080046e8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e022      	b.n	8004740 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7fc fb85 	bl	8000e1c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2203      	movs	r2, #3
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f814 	bl	8004748 <HAL_SD_InitCard>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e00a      	b.n	8004740 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004748:	b5b0      	push	{r4, r5, r7, lr}
 800474a:	b08e      	sub	sp, #56	; 0x38
 800474c:	af04      	add	r7, sp, #16
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004760:	2300      	movs	r3, #0
 8004762:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004764:	2376      	movs	r3, #118	; 0x76
 8004766:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681d      	ldr	r5, [r3, #0]
 800476c:	466c      	mov	r4, sp
 800476e:	f107 0314 	add.w	r3, r7, #20
 8004772:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004780:	4628      	mov	r0, r5
 8004782:	f001 fe61 	bl	8006448 <SDIO_Init>
 8004786:	4603      	mov	r3, r0
 8004788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800478c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e04f      	b.n	8004838 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004798:	4b29      	ldr	r3, [pc, #164]	; (8004840 <HAL_SD_InitCard+0xf8>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f001 fe88 	bl	80064b8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80047a8:	4b25      	ldr	r3, [pc, #148]	; (8004840 <HAL_SD_InitCard+0xf8>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80047ae:	2002      	movs	r0, #2
 80047b0:	f7fc fe82 	bl	80014b8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fe11 	bl	80053dc <SD_PowerON>
 80047ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02e      	b.n	8004838 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fd30 	bl	8005240 <SD_InitCard>
 80047e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00b      	beq.n	8004800 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e01b      	b.n	8004838 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004808:	4618      	mov	r0, r3
 800480a:	f001 fee7 	bl	80065dc <SDMMC_CmdBlockLength>
 800480e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00f      	beq.n	8004836 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <HAL_SD_InitCard+0xfc>)
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	431a      	orrs	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3728      	adds	r7, #40	; 0x28
 800483c:	46bd      	mov	sp, r7
 800483e:	bdb0      	pop	{r4, r5, r7, pc}
 8004840:	422580a0 	.word	0x422580a0
 8004844:	004005ff 	.word	0x004005ff

08004848 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08c      	sub	sp, #48	; 0x30
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d107      	bne.n	8004870 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004864:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0c0      	b.n	80049f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	f040 80b9 	bne.w	80049f0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	441a      	add	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488e:	429a      	cmp	r2, r3
 8004890:	d907      	bls.n	80048a2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004896:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e0a7      	b.n	80049f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2203      	movs	r2, #3
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2200      	movs	r2, #0
 80048b0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80048c0:	f043 0302 	orr.w	r3, r3, #2
 80048c4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a4c      	ldr	r2, [pc, #304]	; (80049fc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80048cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	4a4b      	ldr	r2, [pc, #300]	; (8004a00 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80048d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	2200      	movs	r2, #0
 80048dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3380      	adds	r3, #128	; 0x80
 800490c:	4619      	mov	r1, r3
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	025b      	lsls	r3, r3, #9
 8004914:	089b      	lsrs	r3, r3, #2
 8004916:	f7fd fa31 	bl	8001d7c <HAL_DMA_Start_IT>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d017      	beq.n	8004950 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800492e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a33      	ldr	r2, [pc, #204]	; (8004a04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004936:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e050      	b.n	80049f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004950:	4b2d      	ldr	r3, [pc, #180]	; (8004a08 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004952:	2201      	movs	r2, #1
 8004954:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	2b01      	cmp	r3, #1
 800495c:	d002      	beq.n	8004964 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	025b      	lsls	r3, r3, #9
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004964:	f04f 33ff 	mov.w	r3, #4294967295
 8004968:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	025b      	lsls	r3, r3, #9
 800496e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004970:	2390      	movs	r3, #144	; 0x90
 8004972:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004974:	2302      	movs	r3, #2
 8004976:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004978:	2300      	movs	r3, #0
 800497a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800497c:	2301      	movs	r3, #1
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f107 0210 	add.w	r2, r7, #16
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f001 fdfa 	bl	8006584 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d90a      	bls.n	80049ac <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2282      	movs	r2, #130	; 0x82
 800499a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049a2:	4618      	mov	r0, r3
 80049a4:	f001 fe5e 	bl	8006664 <SDMMC_CmdReadMultiBlock>
 80049a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80049aa:	e009      	b.n	80049c0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2281      	movs	r2, #129	; 0x81
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 fe31 	bl	8006620 <SDMMC_CmdReadSingleBlock>
 80049be:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d012      	beq.n	80049ec <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80049cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d4:	431a      	orrs	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e002      	b.n	80049f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
  }
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3730      	adds	r7, #48	; 0x30
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	0800512b 	.word	0x0800512b
 8004a00:	0800519d 	.word	0x0800519d
 8004a04:	004005ff 	.word	0x004005ff
 8004a08:	4225858c 	.word	0x4225858c

08004a0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	; 0x30
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d107      	bne.n	8004a34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0c5      	b.n	8004bc0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	f040 80be 	bne.w	8004bbe <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	441a      	add	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d907      	bls.n	8004a66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e0ac      	b.n	8004bc0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2203      	movs	r2, #3
 8004a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004a84:	f043 0302 	orr.w	r3, r3, #2
 8004a88:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	4a4e      	ldr	r2, [pc, #312]	; (8004bc8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004a90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	4a4d      	ldr	r2, [pc, #308]	; (8004bcc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004a98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d002      	beq.n	8004ab0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aac:	025b      	lsls	r3, r3, #9
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d90a      	bls.n	8004acc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	22a0      	movs	r2, #160	; 0xa0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fe12 	bl	80066ec <SDMMC_CmdWriteMultiBlock>
 8004ac8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004aca:	e009      	b.n	8004ae0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2290      	movs	r2, #144	; 0x90
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fde5 	bl	80066a8 <SDMMC_CmdWriteSingleBlock>
 8004ade:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d012      	beq.n	8004b0c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a39      	ldr	r2, [pc, #228]	; (8004bd0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	431a      	orrs	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e059      	b.n	8004bc0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004b0c:	4b31      	ldr	r3, [pc, #196]	; (8004bd4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	2240      	movs	r2, #64	; 0x40
 8004b18:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004b3a:	68b9      	ldr	r1, [r7, #8]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3380      	adds	r3, #128	; 0x80
 8004b42:	461a      	mov	r2, r3
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	025b      	lsls	r3, r3, #9
 8004b48:	089b      	lsrs	r3, r3, #2
 8004b4a:	f7fd f917 	bl	8001d7c <HAL_DMA_Start_IT>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01c      	beq.n	8004b8e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004b62:	f023 0302 	bic.w	r3, r3, #2
 8004b66:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e018      	b.n	8004bc0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	025b      	lsls	r3, r3, #9
 8004b98:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004b9a:	2390      	movs	r3, #144	; 0x90
 8004b9c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f107 0210 	add.w	r2, r7, #16
 8004bb2:	4611      	mov	r1, r2
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 fce5 	bl	8006584 <SDIO_ConfigData>

      return HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e000      	b.n	8004bc0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004bbe:	2302      	movs	r3, #2
  }
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3730      	adds	r7, #48	; 0x30
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	08005101 	.word	0x08005101
 8004bcc:	0800519d 	.word	0x0800519d
 8004bd0:	004005ff 	.word	0x004005ff
 8004bd4:	4225858c 	.word	0x4225858c

08004bd8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfa:	0f9b      	lsrs	r3, r3, #30
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c06:	0e9b      	lsrs	r3, r3, #26
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c18:	0e1b      	lsrs	r3, r3, #24
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c36:	0a1b      	lsrs	r3, r3, #8
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4c:	0d1b      	lsrs	r3, r3, #20
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c58:	0c1b      	lsrs	r3, r3, #16
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c6a:	0bdb      	lsrs	r3, r3, #15
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c7c:	0b9b      	lsrs	r3, r3, #14
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	b2da      	uxtb	r2, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c8e:	0b5b      	lsrs	r3, r3, #13
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca0:	0b1b      	lsrs	r3, r3, #12
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d163      	bne.n	8004d84 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cc0:	009a      	lsls	r2, r3, #2
 8004cc2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004ccc:	0f92      	lsrs	r2, r2, #30
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd8:	0edb      	lsrs	r3, r3, #27
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cea:	0e1b      	lsrs	r3, r3, #24
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	b2da      	uxtb	r2, r3
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfc:	0d5b      	lsrs	r3, r3, #21
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f003 0307 	and.w	r3, r3, #7
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0e:	0c9b      	lsrs	r3, r3, #18
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d20:	0bdb      	lsrs	r3, r3, #15
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	7e1b      	ldrb	r3, [r3, #24]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	3302      	adds	r3, #2
 8004d44:	2201      	movs	r2, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d4e:	fb03 f202 	mul.w	r2, r3, r2
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	7a1b      	ldrb	r3, [r3, #8]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 030f 	and.w	r3, r3, #15
 8004d60:	2201      	movs	r2, #1
 8004d62:	409a      	lsls	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d70:	0a52      	lsrs	r2, r2, #9
 8004d72:	fb03 f202 	mul.w	r2, r3, r2
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
 8004d82:	e031      	b.n	8004de8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d11d      	bne.n	8004dc8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d90:	041b      	lsls	r3, r3, #16
 8004d92:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d9a:	0c1b      	lsrs	r3, r3, #16
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	3301      	adds	r3, #1
 8004da8:	029a      	lsls	r2, r3, #10
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dbc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	661a      	str	r2, [r3, #96]	; 0x60
 8004dc6:	e00f      	b.n	8004de8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a58      	ldr	r2, [pc, #352]	; (8004f30 <HAL_SD_GetCardCSD+0x344>)
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e09d      	b.n	8004f24 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dec:	0b9b      	lsrs	r3, r3, #14
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dfe:	09db      	lsrs	r3, r3, #7
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	0fdb      	lsrs	r3, r3, #31
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	0f5b      	lsrs	r3, r3, #29
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	0e9b      	lsrs	r3, r3, #26
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e50:	0d9b      	lsrs	r3, r3, #22
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	f003 030f 	and.w	r3, r3, #15
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	0d5b      	lsrs	r3, r3, #21
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	0c1b      	lsrs	r3, r3, #16
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	0bdb      	lsrs	r3, r3, #15
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	0b9b      	lsrs	r3, r3, #14
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eba:	0b5b      	lsrs	r3, r3, #13
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	0b1b      	lsrs	r3, r3, #12
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	0a9b      	lsrs	r3, r3, #10
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	b2da      	uxtb	r2, r3
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	004005ff 	.word	0x004005ff

08004f34 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004f8c:	b5b0      	push	{r4, r5, r7, lr}
 8004f8e:	b08e      	sub	sp, #56	; 0x38
 8004f90:	af04      	add	r7, sp, #16
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa8:	2b03      	cmp	r3, #3
 8004faa:	d02e      	beq.n	800500a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb2:	d106      	bne.n	8004fc2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
 8004fc0:	e029      	b.n	8005016 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc8:	d10a      	bne.n	8004fe0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fabc 	bl	8005548 <SD_WideBus_Enable>
 8004fd0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
 8004fde:	e01a      	b.n	8005016 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10a      	bne.n	8004ffc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 faf9 	bl	80055de <SD_WideBus_Disable>
 8004fec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
 8004ffa:	e00c      	b.n	8005016 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
 8005008:	e005      	b.n	8005016 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00b      	beq.n	8005036 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a26      	ldr	r2, [pc, #152]	; (80050bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8005024:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005034:	e01f      	b.n	8005076 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681d      	ldr	r5, [r3, #0]
 800505c:	466c      	mov	r4, sp
 800505e:	f107 0314 	add.w	r3, r7, #20
 8005062:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005066:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800506a:	f107 0308 	add.w	r3, r7, #8
 800506e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005070:	4628      	mov	r0, r5
 8005072:	f001 f9e9 	bl	8006448 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800507e:	4618      	mov	r0, r3
 8005080:	f001 faac 	bl	80065dc <SDMMC_CmdBlockLength>
 8005084:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00c      	beq.n	80050a6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0a      	ldr	r2, [pc, #40]	; (80050bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80050ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bdb0      	pop	{r4, r5, r7, pc}
 80050ba:	bf00      	nop
 80050bc:	004005ff 	.word	0x004005ff

080050c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80050cc:	f107 030c 	add.w	r3, r7, #12
 80050d0:	4619      	mov	r1, r3
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa10 	bl	80054f8 <SD_SendStatus>
 80050d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	0a5b      	lsrs	r3, r3, #9
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80050f6:	693b      	ldr	r3, [r7, #16]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800511c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800511e:	bf00      	nop
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	2b82      	cmp	r3, #130	; 0x82
 800513e:	d111      	bne.n	8005164 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f001 faf3 	bl	8006730 <SDMMC_CmdStopTransfer>
 800514a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	431a      	orrs	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f7ff fd3a 	bl	8004bd8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0208 	bic.w	r2, r2, #8
 8005172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f240 523a 	movw	r2, #1338	; 0x53a
 800517c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f003 fb95 	bl	80088bc <HAL_SD_RxCpltCallback>
#endif
}
 8005192:	bf00      	nop
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7fc ffc8 	bl	8002140 <HAL_DMA_GetError>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d03e      	beq.n	8005234 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051bc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d002      	beq.n	80051d2 <SD_DMAError+0x36>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d12d      	bne.n	800522e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a19      	ldr	r2, [pc, #100]	; (800523c <SD_DMAError+0xa0>)
 80051d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80051e8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80051f6:	6978      	ldr	r0, [r7, #20]
 80051f8:	f7ff ff62 	bl	80050c0 <HAL_SD_GetCardState>
 80051fc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b06      	cmp	r3, #6
 8005202:	d002      	beq.n	800520a <SD_DMAError+0x6e>
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b05      	cmp	r3, #5
 8005208:	d10a      	bne.n	8005220 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f001 fa8e 	bl	8006730 <SDMMC_CmdStopTransfer>
 8005214:	4602      	mov	r2, r0
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	431a      	orrs	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2200      	movs	r2, #0
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800522e:	6978      	ldr	r0, [r7, #20]
 8005230:	f7ff fcd2 	bl	8004bd8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005234:	bf00      	nop
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	004005ff 	.word	0x004005ff

08005240 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005240:	b5b0      	push	{r4, r5, r7, lr}
 8005242:	b094      	sub	sp, #80	; 0x50
 8005244:	af04      	add	r7, sp, #16
 8005246:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005248:	2301      	movs	r3, #1
 800524a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f001 f93f 	bl	80064d4 <SDIO_GetPowerState>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800525c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005260:	e0b8      	b.n	80053d4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	2b03      	cmp	r3, #3
 8005268:	d02f      	beq.n	80052ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f001 fb68 	bl	8006944 <SDMMC_CmdSendCID>
 8005274:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <SD_InitCard+0x40>
    {
      return errorstate;
 800527c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800527e:	e0a9      	b.n	80053d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f001 f969 	bl	800655e <SDIO_GetResponse>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2104      	movs	r1, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f001 f960 	bl	800655e <SDIO_GetResponse>
 800529e:	4602      	mov	r2, r0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2108      	movs	r1, #8
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 f957 	bl	800655e <SDIO_GetResponse>
 80052b0:	4602      	mov	r2, r0
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	210c      	movs	r1, #12
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 f94e 	bl	800655e <SDIO_GetResponse>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d00d      	beq.n	80052ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f107 020e 	add.w	r2, r7, #14
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f001 fb6e 	bl	80069be <SDMMC_CmdSetRelAdd>
 80052e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <SD_InitCard+0xae>
    {
      return errorstate;
 80052ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ec:	e072      	b.n	80053d4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d036      	beq.n	8005364 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80052f6:	89fb      	ldrh	r3, [r7, #14]
 80052f8:	461a      	mov	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005306:	041b      	lsls	r3, r3, #16
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f001 fb38 	bl	8006980 <SDMMC_CmdSendCSD>
 8005310:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <SD_InitCard+0xdc>
    {
      return errorstate;
 8005318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531a:	e05b      	b.n	80053d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2100      	movs	r1, #0
 8005322:	4618      	mov	r0, r3
 8005324:	f001 f91b 	bl	800655e <SDIO_GetResponse>
 8005328:	4602      	mov	r2, r0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2104      	movs	r1, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f001 f912 	bl	800655e <SDIO_GetResponse>
 800533a:	4602      	mov	r2, r0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2108      	movs	r1, #8
 8005346:	4618      	mov	r0, r3
 8005348:	f001 f909 	bl	800655e <SDIO_GetResponse>
 800534c:	4602      	mov	r2, r0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	210c      	movs	r1, #12
 8005358:	4618      	mov	r0, r3
 800535a:	f001 f900 	bl	800655e <SDIO_GetResponse>
 800535e:	4602      	mov	r2, r0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2104      	movs	r1, #4
 800536a:	4618      	mov	r0, r3
 800536c:	f001 f8f7 	bl	800655e <SDIO_GetResponse>
 8005370:	4603      	mov	r3, r0
 8005372:	0d1a      	lsrs	r2, r3, #20
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005378:	f107 0310 	add.w	r3, r7, #16
 800537c:	4619      	mov	r1, r3
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff fc34 	bl	8004bec <HAL_SD_GetCardCSD>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800538a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800538e:	e021      	b.n	80053d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005398:	041b      	lsls	r3, r3, #16
 800539a:	2200      	movs	r2, #0
 800539c:	461c      	mov	r4, r3
 800539e:	4615      	mov	r5, r2
 80053a0:	4622      	mov	r2, r4
 80053a2:	462b      	mov	r3, r5
 80053a4:	4608      	mov	r0, r1
 80053a6:	f001 f9e5 	bl	8006774 <SDMMC_CmdSelDesel>
 80053aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80053ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <SD_InitCard+0x176>
  {
    return errorstate;
 80053b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b4:	e00e      	b.n	80053d4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681d      	ldr	r5, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	466c      	mov	r4, sp
 80053be:	f103 0210 	add.w	r2, r3, #16
 80053c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80053c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053c8:	3304      	adds	r3, #4
 80053ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053cc:	4628      	mov	r0, r5
 80053ce:	f001 f83b 	bl	8006448 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3740      	adds	r7, #64	; 0x40
 80053d8:	46bd      	mov	sp, r7
 80053da:	bdb0      	pop	{r4, r5, r7, pc}

080053dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f001 f9e0 	bl	80067ba <SDMMC_CmdGoIdleState>
 80053fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	e072      	b.n	80054ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f001 f9f3 	bl	80067f6 <SDMMC_CmdOperCond>
 8005410:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00d      	beq.n	8005434 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f001 f9c9 	bl	80067ba <SDMMC_CmdGoIdleState>
 8005428:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	e05b      	b.n	80054ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800543e:	2b01      	cmp	r3, #1
 8005440:	d137      	bne.n	80054b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f001 f9f3 	bl	8006834 <SDMMC_CmdAppCommand>
 800544e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d02d      	beq.n	80054b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005456:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800545a:	e047      	b.n	80054ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f001 f9e6 	bl	8006834 <SDMMC_CmdAppCommand>
 8005468:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <SD_PowerON+0x98>
    {
      return errorstate;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	e03b      	b.n	80054ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	491e      	ldr	r1, [pc, #120]	; (80054f4 <SD_PowerON+0x118>)
 800547a:	4618      	mov	r0, r3
 800547c:	f001 f9fc 	bl	8006878 <SDMMC_CmdAppOperCommand>
 8005480:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800548c:	e02e      	b.n	80054ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2100      	movs	r1, #0
 8005494:	4618      	mov	r0, r3
 8005496:	f001 f862 	bl	800655e <SDIO_GetResponse>
 800549a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	0fdb      	lsrs	r3, r3, #31
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d101      	bne.n	80054a8 <SD_PowerON+0xcc>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <SD_PowerON+0xce>
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]

    count++;
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	3301      	adds	r3, #1
 80054b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d802      	bhi.n	80054c2 <SD_PowerON+0xe6>
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0cc      	beq.n	800545c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d902      	bls.n	80054d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80054cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054d0:	e00c      	b.n	80054ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	645a      	str	r2, [r3, #68]	; 0x44
 80054e2:	e002      	b.n	80054ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	c1100000 	.word	0xc1100000

080054f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800550c:	e018      	b.n	8005540 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005516:	041b      	lsls	r3, r3, #16
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f001 fa70 	bl	8006a00 <SDMMC_CmdSendStatus>
 8005520:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	e009      	b.n	8005540 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2100      	movs	r1, #0
 8005532:	4618      	mov	r0, r3
 8005534:	f001 f813 	bl	800655e <SDIO_GetResponse>
 8005538:	4602      	mov	r2, r0
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fffd 	bl	800655e <SDIO_GetResponse>
 8005564:	4603      	mov	r3, r0
 8005566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800556e:	d102      	bne.n	8005576 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005574:	e02f      	b.n	80055d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005576:	f107 030c 	add.w	r3, r7, #12
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f879 	bl	8005674 <SD_FindSCR>
 8005582:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	e023      	b.n	80055d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01c      	beq.n	80055d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	041b      	lsls	r3, r3, #16
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f001 f945 	bl	8006834 <SDMMC_CmdAppCommand>
 80055aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	e00f      	b.n	80055d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2102      	movs	r1, #2
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 f97e 	bl	80068be <SDMMC_CmdBusWidth>
 80055c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	e003      	b.n	80055d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	e001      	b.n	80055d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80055d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b086      	sub	sp, #24
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2100      	movs	r1, #0
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 ffb2 	bl	800655e <SDIO_GetResponse>
 80055fa:	4603      	mov	r3, r0
 80055fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005604:	d102      	bne.n	800560c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800560a:	e02f      	b.n	800566c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800560c:	f107 030c 	add.w	r3, r7, #12
 8005610:	4619      	mov	r1, r3
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f82e 	bl	8005674 <SD_FindSCR>
 8005618:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	e023      	b.n	800566c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01c      	beq.n	8005668 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	4619      	mov	r1, r3
 800563a:	4610      	mov	r0, r2
 800563c:	f001 f8fa 	bl	8006834 <SDMMC_CmdAppCommand>
 8005640:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	e00f      	b.n	800566c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f001 f933 	bl	80068be <SDMMC_CmdBusWidth>
 8005658:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	e003      	b.n	800566c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005664:	2300      	movs	r3, #0
 8005666:	e001      	b.n	800566c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005668:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b08f      	sub	sp, #60	; 0x3c
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800567e:	f7fb ff0f 	bl	80014a0 <HAL_GetTick>
 8005682:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005688:	2300      	movs	r3, #0
 800568a:	60bb      	str	r3, [r7, #8]
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2108      	movs	r1, #8
 800569a:	4618      	mov	r0, r3
 800569c:	f000 ff9e 	bl	80065dc <SDMMC_CmdBlockLength>
 80056a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <SD_FindSCR+0x38>
  {
    return errorstate;
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	e0b2      	b.n	8005812 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b4:	041b      	lsls	r3, r3, #16
 80056b6:	4619      	mov	r1, r3
 80056b8:	4610      	mov	r0, r2
 80056ba:	f001 f8bb 	bl	8006834 <SDMMC_CmdAppCommand>
 80056be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <SD_FindSCR+0x56>
  {
    return errorstate;
 80056c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c8:	e0a3      	b.n	8005812 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295
 80056ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80056d0:	2308      	movs	r3, #8
 80056d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80056d4:	2330      	movs	r3, #48	; 0x30
 80056d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80056d8:	2302      	movs	r3, #2
 80056da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80056dc:	2300      	movs	r3, #0
 80056de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f107 0210 	add.w	r2, r7, #16
 80056ec:	4611      	mov	r1, r2
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 ff48 	bl	8006584 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f902 	bl	8006902 <SDMMC_CmdSendSCR>
 80056fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d02a      	beq.n	800575c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	e083      	b.n	8005812 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00f      	beq.n	8005738 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6819      	ldr	r1, [r3, #0]
 800571c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	f107 0208 	add.w	r2, r7, #8
 8005724:	18d4      	adds	r4, r2, r3
 8005726:	4608      	mov	r0, r1
 8005728:	f000 feb9 	bl	800649e <SDIO_ReadFIFO>
 800572c:	4603      	mov	r3, r0
 800572e:	6023      	str	r3, [r4, #0]
      index++;
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	3301      	adds	r3, #1
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
 8005736:	e006      	b.n	8005746 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d012      	beq.n	800576c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005746:	f7fb feab 	bl	80014a0 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005754:	d102      	bne.n	800575c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005756:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800575a:	e05a      	b.n	8005812 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005762:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0cf      	beq.n	800570a <SD_FindSCR+0x96>
 800576a:	e000      	b.n	800576e <SD_FindSCR+0xfa>
      break;
 800576c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2208      	movs	r2, #8
 8005782:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005784:	2308      	movs	r3, #8
 8005786:	e044      	b.n	8005812 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2202      	movs	r2, #2
 800579c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800579e:	2302      	movs	r3, #2
 80057a0:	e037      	b.n	8005812 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2220      	movs	r2, #32
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80057b8:	2320      	movs	r3, #32
 80057ba:	e02a      	b.n	8005812 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	061a      	lsls	r2, r3, #24
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	0a1b      	lsrs	r3, r3, #8
 80057d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057dc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	0e1b      	lsrs	r3, r3, #24
 80057e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	601a      	str	r2, [r3, #0]
    scr++;
 80057e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ea:	3304      	adds	r3, #4
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	061a      	lsls	r2, r3, #24
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	0a1b      	lsrs	r3, r3, #8
 8005800:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005804:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	0e1b      	lsrs	r3, r3, #24
 800580a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	373c      	adds	r7, #60	; 0x3c
 8005816:	46bd      	mov	sp, r7
 8005818:	bd90      	pop	{r4, r7, pc}

0800581a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e07b      	b.n	8005924 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	2b00      	cmp	r3, #0
 8005832:	d108      	bne.n	8005846 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800583c:	d009      	beq.n	8005852 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	61da      	str	r2, [r3, #28]
 8005844:	e005      	b.n	8005852 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fb fb3d 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2202      	movs	r2, #2
 8005876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005888:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d6:	ea42 0103 	orr.w	r1, r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	0c1b      	lsrs	r3, r3, #16
 80058f0:	f003 0104 	and.w	r1, r3, #4
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	f003 0210 	and.w	r2, r3, #16
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	69da      	ldr	r2, [r3, #28]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005912:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e041      	b.n	80059c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fb fbbc 	bl	80010d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	3304      	adds	r3, #4
 8005968:	4619      	mov	r1, r3
 800596a:	4610      	mov	r0, r2
 800596c:	f000 f8f4 	bl	8005b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_ConfigClockSource+0x1c>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e0b4      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x186>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a04:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a0c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1e:	d03e      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0xd4>
 8005a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a24:	f200 8087 	bhi.w	8005b36 <HAL_TIM_ConfigClockSource+0x16c>
 8005a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2c:	f000 8086 	beq.w	8005b3c <HAL_TIM_ConfigClockSource+0x172>
 8005a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a34:	d87f      	bhi.n	8005b36 <HAL_TIM_ConfigClockSource+0x16c>
 8005a36:	2b70      	cmp	r3, #112	; 0x70
 8005a38:	d01a      	beq.n	8005a70 <HAL_TIM_ConfigClockSource+0xa6>
 8005a3a:	2b70      	cmp	r3, #112	; 0x70
 8005a3c:	d87b      	bhi.n	8005b36 <HAL_TIM_ConfigClockSource+0x16c>
 8005a3e:	2b60      	cmp	r3, #96	; 0x60
 8005a40:	d050      	beq.n	8005ae4 <HAL_TIM_ConfigClockSource+0x11a>
 8005a42:	2b60      	cmp	r3, #96	; 0x60
 8005a44:	d877      	bhi.n	8005b36 <HAL_TIM_ConfigClockSource+0x16c>
 8005a46:	2b50      	cmp	r3, #80	; 0x50
 8005a48:	d03c      	beq.n	8005ac4 <HAL_TIM_ConfigClockSource+0xfa>
 8005a4a:	2b50      	cmp	r3, #80	; 0x50
 8005a4c:	d873      	bhi.n	8005b36 <HAL_TIM_ConfigClockSource+0x16c>
 8005a4e:	2b40      	cmp	r3, #64	; 0x40
 8005a50:	d058      	beq.n	8005b04 <HAL_TIM_ConfigClockSource+0x13a>
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d86f      	bhi.n	8005b36 <HAL_TIM_ConfigClockSource+0x16c>
 8005a56:	2b30      	cmp	r3, #48	; 0x30
 8005a58:	d064      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0x15a>
 8005a5a:	2b30      	cmp	r3, #48	; 0x30
 8005a5c:	d86b      	bhi.n	8005b36 <HAL_TIM_ConfigClockSource+0x16c>
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d060      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0x15a>
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	d867      	bhi.n	8005b36 <HAL_TIM_ConfigClockSource+0x16c>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d05c      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0x15a>
 8005a6a:	2b10      	cmp	r3, #16
 8005a6c:	d05a      	beq.n	8005b24 <HAL_TIM_ConfigClockSource+0x15a>
 8005a6e:	e062      	b.n	8005b36 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	6899      	ldr	r1, [r3, #8]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685a      	ldr	r2, [r3, #4]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f000 f984 	bl	8005d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	609a      	str	r2, [r3, #8]
      break;
 8005a9c:	e04f      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6899      	ldr	r1, [r3, #8]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f000 f96d 	bl	8005d8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ac0:	609a      	str	r2, [r3, #8]
      break;
 8005ac2:	e03c      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f000 f8e1 	bl	8005c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2150      	movs	r1, #80	; 0x50
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 f93a 	bl	8005d56 <TIM_ITRx_SetConfig>
      break;
 8005ae2:	e02c      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6859      	ldr	r1, [r3, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	461a      	mov	r2, r3
 8005af2:	f000 f900 	bl	8005cf6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2160      	movs	r1, #96	; 0x60
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 f92a 	bl	8005d56 <TIM_ITRx_SetConfig>
      break;
 8005b02:	e01c      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	6859      	ldr	r1, [r3, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	461a      	mov	r2, r3
 8005b12:	f000 f8c1 	bl	8005c98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2140      	movs	r1, #64	; 0x40
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 f91a 	bl	8005d56 <TIM_ITRx_SetConfig>
      break;
 8005b22:	e00c      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	4610      	mov	r0, r2
 8005b30:	f000 f911 	bl	8005d56 <TIM_ITRx_SetConfig>
      break;
 8005b34:	e003      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
      break;
 8005b3a:	e000      	b.n	8005b3e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a40      	ldr	r2, [pc, #256]	; (8005c6c <TIM_Base_SetConfig+0x114>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d013      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b76:	d00f      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a3d      	ldr	r2, [pc, #244]	; (8005c70 <TIM_Base_SetConfig+0x118>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00b      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a3c      	ldr	r2, [pc, #240]	; (8005c74 <TIM_Base_SetConfig+0x11c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d007      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a3b      	ldr	r2, [pc, #236]	; (8005c78 <TIM_Base_SetConfig+0x120>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_Base_SetConfig+0x40>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a3a      	ldr	r2, [pc, #232]	; (8005c7c <TIM_Base_SetConfig+0x124>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d108      	bne.n	8005baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a2f      	ldr	r2, [pc, #188]	; (8005c6c <TIM_Base_SetConfig+0x114>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d02b      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb8:	d027      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a2c      	ldr	r2, [pc, #176]	; (8005c70 <TIM_Base_SetConfig+0x118>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d023      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a2b      	ldr	r2, [pc, #172]	; (8005c74 <TIM_Base_SetConfig+0x11c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d01f      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a2a      	ldr	r2, [pc, #168]	; (8005c78 <TIM_Base_SetConfig+0x120>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01b      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a29      	ldr	r2, [pc, #164]	; (8005c7c <TIM_Base_SetConfig+0x124>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d017      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a28      	ldr	r2, [pc, #160]	; (8005c80 <TIM_Base_SetConfig+0x128>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d013      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a27      	ldr	r2, [pc, #156]	; (8005c84 <TIM_Base_SetConfig+0x12c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00f      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a26      	ldr	r2, [pc, #152]	; (8005c88 <TIM_Base_SetConfig+0x130>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00b      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a25      	ldr	r2, [pc, #148]	; (8005c8c <TIM_Base_SetConfig+0x134>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d007      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	; (8005c90 <TIM_Base_SetConfig+0x138>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a23      	ldr	r2, [pc, #140]	; (8005c94 <TIM_Base_SetConfig+0x13c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d108      	bne.n	8005c1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <TIM_Base_SetConfig+0x114>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <TIM_Base_SetConfig+0xf8>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a0c      	ldr	r2, [pc, #48]	; (8005c7c <TIM_Base_SetConfig+0x124>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d103      	bne.n	8005c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	615a      	str	r2, [r3, #20]
}
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	40000c00 	.word	0x40000c00
 8005c7c:	40010400 	.word	0x40010400
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800
 8005c8c:	40001800 	.word	0x40001800
 8005c90:	40001c00 	.word	0x40001c00
 8005c94:	40002000 	.word	0x40002000

08005c98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f023 0201 	bic.w	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f023 030a 	bic.w	r3, r3, #10
 8005cd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b087      	sub	sp, #28
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0210 	bic.w	r2, r3, #16
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	031b      	lsls	r3, r3, #12
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	f043 0307 	orr.w	r3, r3, #7
 8005d78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005da6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	021a      	lsls	r2, r3, #8
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	609a      	str	r2, [r3, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e05a      	b.n	8005e9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a21      	ldr	r2, [pc, #132]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d022      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e30:	d01d      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a1d      	ldr	r2, [pc, #116]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d018      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a1a      	ldr	r2, [pc, #104]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00e      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d009      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a17      	ldr	r2, [pc, #92]	; (8005ebc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d004      	beq.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a15      	ldr	r2, [pc, #84]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d10c      	bne.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40000400 	.word	0x40000400
 8005eb0:	40000800 	.word	0x40000800
 8005eb4:	40000c00 	.word	0x40000c00
 8005eb8:	40010400 	.word	0x40010400
 8005ebc:	40014000 	.word	0x40014000
 8005ec0:	40001800 	.word	0x40001800

08005ec4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e03f      	b.n	8005f56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fb f912 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2224      	movs	r2, #36	; 0x24
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f829 	bl	8005f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68da      	ldr	r2, [r3, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f64:	b0c0      	sub	sp, #256	; 0x100
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f7c:	68d9      	ldr	r1, [r3, #12]
 8005f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	ea40 0301 	orr.w	r3, r0, r1
 8005f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fb8:	f021 010c 	bic.w	r1, r1, #12
 8005fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fc6:	430b      	orrs	r3, r1
 8005fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fda:	6999      	ldr	r1, [r3, #24]
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	ea40 0301 	orr.w	r3, r0, r1
 8005fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4b8f      	ldr	r3, [pc, #572]	; (800622c <UART_SetConfig+0x2cc>)
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d005      	beq.n	8006000 <UART_SetConfig+0xa0>
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b8d      	ldr	r3, [pc, #564]	; (8006230 <UART_SetConfig+0x2d0>)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d104      	bne.n	800600a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006000:	f7fe fb5e 	bl	80046c0 <HAL_RCC_GetPCLK2Freq>
 8006004:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006008:	e003      	b.n	8006012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800600a:	f7fe fb45 	bl	8004698 <HAL_RCC_GetPCLK1Freq>
 800600e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601c:	f040 810c 	bne.w	8006238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006024:	2200      	movs	r2, #0
 8006026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800602a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800602e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006032:	4622      	mov	r2, r4
 8006034:	462b      	mov	r3, r5
 8006036:	1891      	adds	r1, r2, r2
 8006038:	65b9      	str	r1, [r7, #88]	; 0x58
 800603a:	415b      	adcs	r3, r3
 800603c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800603e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006042:	4621      	mov	r1, r4
 8006044:	eb12 0801 	adds.w	r8, r2, r1
 8006048:	4629      	mov	r1, r5
 800604a:	eb43 0901 	adc.w	r9, r3, r1
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800605a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800605e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006062:	4690      	mov	r8, r2
 8006064:	4699      	mov	r9, r3
 8006066:	4623      	mov	r3, r4
 8006068:	eb18 0303 	adds.w	r3, r8, r3
 800606c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006070:	462b      	mov	r3, r5
 8006072:	eb49 0303 	adc.w	r3, r9, r3
 8006076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006086:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800608a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800608e:	460b      	mov	r3, r1
 8006090:	18db      	adds	r3, r3, r3
 8006092:	653b      	str	r3, [r7, #80]	; 0x50
 8006094:	4613      	mov	r3, r2
 8006096:	eb42 0303 	adc.w	r3, r2, r3
 800609a:	657b      	str	r3, [r7, #84]	; 0x54
 800609c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060a4:	f7fa f894 	bl	80001d0 <__aeabi_uldivmod>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4b61      	ldr	r3, [pc, #388]	; (8006234 <UART_SetConfig+0x2d4>)
 80060ae:	fba3 2302 	umull	r2, r3, r3, r2
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	011c      	lsls	r4, r3, #4
 80060b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ba:	2200      	movs	r2, #0
 80060bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060c8:	4642      	mov	r2, r8
 80060ca:	464b      	mov	r3, r9
 80060cc:	1891      	adds	r1, r2, r2
 80060ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80060d0:	415b      	adcs	r3, r3
 80060d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060d8:	4641      	mov	r1, r8
 80060da:	eb12 0a01 	adds.w	sl, r2, r1
 80060de:	4649      	mov	r1, r9
 80060e0:	eb43 0b01 	adc.w	fp, r3, r1
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	f04f 0300 	mov.w	r3, #0
 80060ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060f8:	4692      	mov	sl, r2
 80060fa:	469b      	mov	fp, r3
 80060fc:	4643      	mov	r3, r8
 80060fe:	eb1a 0303 	adds.w	r3, sl, r3
 8006102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006106:	464b      	mov	r3, r9
 8006108:	eb4b 0303 	adc.w	r3, fp, r3
 800610c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800611c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006124:	460b      	mov	r3, r1
 8006126:	18db      	adds	r3, r3, r3
 8006128:	643b      	str	r3, [r7, #64]	; 0x40
 800612a:	4613      	mov	r3, r2
 800612c:	eb42 0303 	adc.w	r3, r2, r3
 8006130:	647b      	str	r3, [r7, #68]	; 0x44
 8006132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800613a:	f7fa f849 	bl	80001d0 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4611      	mov	r1, r2
 8006144:	4b3b      	ldr	r3, [pc, #236]	; (8006234 <UART_SetConfig+0x2d4>)
 8006146:	fba3 2301 	umull	r2, r3, r3, r1
 800614a:	095b      	lsrs	r3, r3, #5
 800614c:	2264      	movs	r2, #100	; 0x64
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	1acb      	subs	r3, r1, r3
 8006154:	00db      	lsls	r3, r3, #3
 8006156:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800615a:	4b36      	ldr	r3, [pc, #216]	; (8006234 <UART_SetConfig+0x2d4>)
 800615c:	fba3 2302 	umull	r2, r3, r3, r2
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006168:	441c      	add	r4, r3
 800616a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800616e:	2200      	movs	r2, #0
 8006170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006174:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	1891      	adds	r1, r2, r2
 8006182:	63b9      	str	r1, [r7, #56]	; 0x38
 8006184:	415b      	adcs	r3, r3
 8006186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800618c:	4641      	mov	r1, r8
 800618e:	1851      	adds	r1, r2, r1
 8006190:	6339      	str	r1, [r7, #48]	; 0x30
 8006192:	4649      	mov	r1, r9
 8006194:	414b      	adcs	r3, r1
 8006196:	637b      	str	r3, [r7, #52]	; 0x34
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061a4:	4659      	mov	r1, fp
 80061a6:	00cb      	lsls	r3, r1, #3
 80061a8:	4651      	mov	r1, sl
 80061aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ae:	4651      	mov	r1, sl
 80061b0:	00ca      	lsls	r2, r1, #3
 80061b2:	4610      	mov	r0, r2
 80061b4:	4619      	mov	r1, r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	4642      	mov	r2, r8
 80061ba:	189b      	adds	r3, r3, r2
 80061bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061c0:	464b      	mov	r3, r9
 80061c2:	460a      	mov	r2, r1
 80061c4:	eb42 0303 	adc.w	r3, r2, r3
 80061c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061e0:	460b      	mov	r3, r1
 80061e2:	18db      	adds	r3, r3, r3
 80061e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061e6:	4613      	mov	r3, r2
 80061e8:	eb42 0303 	adc.w	r3, r2, r3
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061f6:	f7f9 ffeb 	bl	80001d0 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <UART_SetConfig+0x2d4>)
 8006200:	fba3 1302 	umull	r1, r3, r3, r2
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	2164      	movs	r1, #100	; 0x64
 8006208:	fb01 f303 	mul.w	r3, r1, r3
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	00db      	lsls	r3, r3, #3
 8006210:	3332      	adds	r3, #50	; 0x32
 8006212:	4a08      	ldr	r2, [pc, #32]	; (8006234 <UART_SetConfig+0x2d4>)
 8006214:	fba2 2303 	umull	r2, r3, r2, r3
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	f003 0207 	and.w	r2, r3, #7
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4422      	add	r2, r4
 8006226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006228:	e105      	b.n	8006436 <UART_SetConfig+0x4d6>
 800622a:	bf00      	nop
 800622c:	40011000 	.word	0x40011000
 8006230:	40011400 	.word	0x40011400
 8006234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800623c:	2200      	movs	r2, #0
 800623e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006242:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800624a:	4642      	mov	r2, r8
 800624c:	464b      	mov	r3, r9
 800624e:	1891      	adds	r1, r2, r2
 8006250:	6239      	str	r1, [r7, #32]
 8006252:	415b      	adcs	r3, r3
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
 8006256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800625a:	4641      	mov	r1, r8
 800625c:	1854      	adds	r4, r2, r1
 800625e:	4649      	mov	r1, r9
 8006260:	eb43 0501 	adc.w	r5, r3, r1
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	00eb      	lsls	r3, r5, #3
 800626e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006272:	00e2      	lsls	r2, r4, #3
 8006274:	4614      	mov	r4, r2
 8006276:	461d      	mov	r5, r3
 8006278:	4643      	mov	r3, r8
 800627a:	18e3      	adds	r3, r4, r3
 800627c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006280:	464b      	mov	r3, r9
 8006282:	eb45 0303 	adc.w	r3, r5, r3
 8006286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
 80062a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062a6:	4629      	mov	r1, r5
 80062a8:	008b      	lsls	r3, r1, #2
 80062aa:	4621      	mov	r1, r4
 80062ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b0:	4621      	mov	r1, r4
 80062b2:	008a      	lsls	r2, r1, #2
 80062b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062b8:	f7f9 ff8a 	bl	80001d0 <__aeabi_uldivmod>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	4b60      	ldr	r3, [pc, #384]	; (8006444 <UART_SetConfig+0x4e4>)
 80062c2:	fba3 2302 	umull	r2, r3, r3, r2
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	011c      	lsls	r4, r3, #4
 80062ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062dc:	4642      	mov	r2, r8
 80062de:	464b      	mov	r3, r9
 80062e0:	1891      	adds	r1, r2, r2
 80062e2:	61b9      	str	r1, [r7, #24]
 80062e4:	415b      	adcs	r3, r3
 80062e6:	61fb      	str	r3, [r7, #28]
 80062e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062ec:	4641      	mov	r1, r8
 80062ee:	1851      	adds	r1, r2, r1
 80062f0:	6139      	str	r1, [r7, #16]
 80062f2:	4649      	mov	r1, r9
 80062f4:	414b      	adcs	r3, r1
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006304:	4659      	mov	r1, fp
 8006306:	00cb      	lsls	r3, r1, #3
 8006308:	4651      	mov	r1, sl
 800630a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800630e:	4651      	mov	r1, sl
 8006310:	00ca      	lsls	r2, r1, #3
 8006312:	4610      	mov	r0, r2
 8006314:	4619      	mov	r1, r3
 8006316:	4603      	mov	r3, r0
 8006318:	4642      	mov	r2, r8
 800631a:	189b      	adds	r3, r3, r2
 800631c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006320:	464b      	mov	r3, r9
 8006322:	460a      	mov	r2, r1
 8006324:	eb42 0303 	adc.w	r3, r2, r3
 8006328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	67bb      	str	r3, [r7, #120]	; 0x78
 8006336:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006338:	f04f 0200 	mov.w	r2, #0
 800633c:	f04f 0300 	mov.w	r3, #0
 8006340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006344:	4649      	mov	r1, r9
 8006346:	008b      	lsls	r3, r1, #2
 8006348:	4641      	mov	r1, r8
 800634a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800634e:	4641      	mov	r1, r8
 8006350:	008a      	lsls	r2, r1, #2
 8006352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006356:	f7f9 ff3b 	bl	80001d0 <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4b39      	ldr	r3, [pc, #228]	; (8006444 <UART_SetConfig+0x4e4>)
 8006360:	fba3 1302 	umull	r1, r3, r3, r2
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	2164      	movs	r1, #100	; 0x64
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	3332      	adds	r3, #50	; 0x32
 8006372:	4a34      	ldr	r2, [pc, #208]	; (8006444 <UART_SetConfig+0x4e4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800637e:	441c      	add	r4, r3
 8006380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006384:	2200      	movs	r2, #0
 8006386:	673b      	str	r3, [r7, #112]	; 0x70
 8006388:	677a      	str	r2, [r7, #116]	; 0x74
 800638a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800638e:	4642      	mov	r2, r8
 8006390:	464b      	mov	r3, r9
 8006392:	1891      	adds	r1, r2, r2
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	415b      	adcs	r3, r3
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800639e:	4641      	mov	r1, r8
 80063a0:	1851      	adds	r1, r2, r1
 80063a2:	6039      	str	r1, [r7, #0]
 80063a4:	4649      	mov	r1, r9
 80063a6:	414b      	adcs	r3, r1
 80063a8:	607b      	str	r3, [r7, #4]
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063b6:	4659      	mov	r1, fp
 80063b8:	00cb      	lsls	r3, r1, #3
 80063ba:	4651      	mov	r1, sl
 80063bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063c0:	4651      	mov	r1, sl
 80063c2:	00ca      	lsls	r2, r1, #3
 80063c4:	4610      	mov	r0, r2
 80063c6:	4619      	mov	r1, r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	4642      	mov	r2, r8
 80063cc:	189b      	adds	r3, r3, r2
 80063ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d0:	464b      	mov	r3, r9
 80063d2:	460a      	mov	r2, r1
 80063d4:	eb42 0303 	adc.w	r3, r2, r3
 80063d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	663b      	str	r3, [r7, #96]	; 0x60
 80063e4:	667a      	str	r2, [r7, #100]	; 0x64
 80063e6:	f04f 0200 	mov.w	r2, #0
 80063ea:	f04f 0300 	mov.w	r3, #0
 80063ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063f2:	4649      	mov	r1, r9
 80063f4:	008b      	lsls	r3, r1, #2
 80063f6:	4641      	mov	r1, r8
 80063f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063fc:	4641      	mov	r1, r8
 80063fe:	008a      	lsls	r2, r1, #2
 8006400:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006404:	f7f9 fee4 	bl	80001d0 <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <UART_SetConfig+0x4e4>)
 800640e:	fba3 1302 	umull	r1, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	2164      	movs	r1, #100	; 0x64
 8006416:	fb01 f303 	mul.w	r3, r1, r3
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	3332      	adds	r3, #50	; 0x32
 8006420:	4a08      	ldr	r2, [pc, #32]	; (8006444 <UART_SetConfig+0x4e4>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	f003 020f 	and.w	r2, r3, #15
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4422      	add	r2, r4
 8006434:	609a      	str	r2, [r3, #8]
}
 8006436:	bf00      	nop
 8006438:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800643c:	46bd      	mov	sp, r7
 800643e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006442:	bf00      	nop
 8006444:	51eb851f 	.word	0x51eb851f

08006448 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006448:	b084      	sub	sp, #16
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	f107 001c 	add.w	r0, r7, #28
 8006456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800645e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006460:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006462:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006466:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800646a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800646e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006472:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006482:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	b004      	add	sp, #16
 800649c:	4770      	bx	lr

0800649e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2203      	movs	r2, #3
 80064c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0303 	and.w	r3, r3, #3
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800650e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006514:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800651a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800652a:	f023 030f 	bic.w	r3, r3, #15
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	b2db      	uxtb	r3, r3
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800655e:	b480      	push	{r7}
 8006560:	b085      	sub	sp, #20
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	3314      	adds	r3, #20
 800656c:	461a      	mov	r2, r3
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	4413      	add	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
}  
 8006578:	4618      	mov	r0, r3
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80065aa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80065b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80065b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	431a      	orrs	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0

}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80065ea:	2310      	movs	r3, #16
 80065ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065ee:	2340      	movs	r3, #64	; 0x40
 80065f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065fc:	f107 0308 	add.w	r3, r7, #8
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff ff74 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006608:	f241 3288 	movw	r2, #5000	; 0x1388
 800660c:	2110      	movs	r1, #16
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fa18 	bl	8006a44 <SDMMC_GetCmdResp1>
 8006614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006616:	69fb      	ldr	r3, [r7, #28]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3720      	adds	r7, #32
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800662e:	2311      	movs	r3, #17
 8006630:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006632:	2340      	movs	r3, #64	; 0x40
 8006634:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006636:	2300      	movs	r3, #0
 8006638:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800663a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800663e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006640:	f107 0308 	add.w	r3, r7, #8
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff ff52 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800664c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006650:	2111      	movs	r1, #17
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f9f6 	bl	8006a44 <SDMMC_GetCmdResp1>
 8006658:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800665a:	69fb      	ldr	r3, [r7, #28]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3720      	adds	r7, #32
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006672:	2312      	movs	r3, #18
 8006674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006676:	2340      	movs	r3, #64	; 0x40
 8006678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800667a:	2300      	movs	r3, #0
 800667c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800667e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006682:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006684:	f107 0308 	add.w	r3, r7, #8
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff ff30 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006690:	f241 3288 	movw	r2, #5000	; 0x1388
 8006694:	2112      	movs	r1, #18
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f9d4 	bl	8006a44 <SDMMC_GetCmdResp1>
 800669c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800669e:	69fb      	ldr	r3, [r7, #28]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80066b6:	2318      	movs	r3, #24
 80066b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066ba:	2340      	movs	r3, #64	; 0x40
 80066bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066be:	2300      	movs	r3, #0
 80066c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066c8:	f107 0308 	add.w	r3, r7, #8
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7ff ff0e 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80066d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d8:	2118      	movs	r1, #24
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9b2 	bl	8006a44 <SDMMC_GetCmdResp1>
 80066e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066e2:	69fb      	ldr	r3, [r7, #28]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80066fa:	2319      	movs	r3, #25
 80066fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066fe:	2340      	movs	r3, #64	; 0x40
 8006700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006702:	2300      	movs	r3, #0
 8006704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800670a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800670c:	f107 0308 	add.w	r3, r7, #8
 8006710:	4619      	mov	r1, r3
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7ff feec 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006718:	f241 3288 	movw	r2, #5000	; 0x1388
 800671c:	2119      	movs	r1, #25
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f990 	bl	8006a44 <SDMMC_GetCmdResp1>
 8006724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006726:	69fb      	ldr	r3, [r7, #28]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3720      	adds	r7, #32
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006738:	2300      	movs	r3, #0
 800673a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800673c:	230c      	movs	r3, #12
 800673e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006740:	2340      	movs	r3, #64	; 0x40
 8006742:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800674c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800674e:	f107 0308 	add.w	r3, r7, #8
 8006752:	4619      	mov	r1, r3
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff fecb 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800675a:	4a05      	ldr	r2, [pc, #20]	; (8006770 <SDMMC_CmdStopTransfer+0x40>)
 800675c:	210c      	movs	r1, #12
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f970 	bl	8006a44 <SDMMC_GetCmdResp1>
 8006764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006766:	69fb      	ldr	r3, [r7, #28]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3720      	adds	r7, #32
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	05f5e100 	.word	0x05f5e100

08006774 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08a      	sub	sp, #40	; 0x28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006784:	2307      	movs	r3, #7
 8006786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006788:	2340      	movs	r3, #64	; 0x40
 800678a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800678c:	2300      	movs	r3, #0
 800678e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006794:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006796:	f107 0310 	add.w	r3, r7, #16
 800679a:	4619      	mov	r1, r3
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff fea7 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80067a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a6:	2107      	movs	r1, #7
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f94b 	bl	8006a44 <SDMMC_GetCmdResp1>
 80067ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3728      	adds	r7, #40	; 0x28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b088      	sub	sp, #32
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80067ca:	2300      	movs	r3, #0
 80067cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067ce:	2300      	movs	r3, #0
 80067d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067d8:	f107 0308 	add.w	r3, r7, #8
 80067dc:	4619      	mov	r1, r3
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff fe86 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fb65 	bl	8006eb4 <SDMMC_GetCmdError>
 80067ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067ec:	69fb      	ldr	r3, [r7, #28]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3720      	adds	r7, #32
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b088      	sub	sp, #32
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80067fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006804:	2308      	movs	r3, #8
 8006806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006814:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006816:	f107 0308 	add.w	r3, r7, #8
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fe67 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 faf8 	bl	8006e18 <SDMMC_GetCmdResp7>
 8006828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800682a:	69fb      	ldr	r3, [r7, #28]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3720      	adds	r7, #32
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006842:	2337      	movs	r3, #55	; 0x37
 8006844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006846:	2340      	movs	r3, #64	; 0x40
 8006848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800684e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006854:	f107 0308 	add.w	r3, r7, #8
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff fe48 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006860:	f241 3288 	movw	r2, #5000	; 0x1388
 8006864:	2137      	movs	r1, #55	; 0x37
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f8ec 	bl	8006a44 <SDMMC_GetCmdResp1>
 800686c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800686e:	69fb      	ldr	r3, [r7, #28]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3720      	adds	r7, #32
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800688c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800688e:	2329      	movs	r3, #41	; 0x29
 8006890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006892:	2340      	movs	r3, #64	; 0x40
 8006894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800689a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800689e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068a0:	f107 0308 	add.w	r3, r7, #8
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fe22 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f9ff 	bl	8006cb0 <SDMMC_GetCmdResp3>
 80068b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068b4:	69fb      	ldr	r3, [r7, #28]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b088      	sub	sp, #32
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80068cc:	2306      	movs	r3, #6
 80068ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068d0:	2340      	movs	r3, #64	; 0x40
 80068d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068de:	f107 0308 	add.w	r3, r7, #8
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fe03 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80068ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ee:	2106      	movs	r1, #6
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f8a7 	bl	8006a44 <SDMMC_GetCmdResp1>
 80068f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068f8:	69fb      	ldr	r3, [r7, #28]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3720      	adds	r7, #32
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b088      	sub	sp, #32
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800690e:	2333      	movs	r3, #51	; 0x33
 8006910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006912:	2340      	movs	r3, #64	; 0x40
 8006914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800691a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800691e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006920:	f107 0308 	add.w	r3, r7, #8
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff fde2 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800692c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006930:	2133      	movs	r1, #51	; 0x33
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f886 	bl	8006a44 <SDMMC_GetCmdResp1>
 8006938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800693a:	69fb      	ldr	r3, [r7, #28]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3720      	adds	r7, #32
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006950:	2302      	movs	r3, #2
 8006952:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006954:	23c0      	movs	r3, #192	; 0xc0
 8006956:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006958:	2300      	movs	r3, #0
 800695a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800695c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006960:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006962:	f107 0308 	add.w	r3, r7, #8
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f7ff fdc1 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f956 	bl	8006c20 <SDMMC_GetCmdResp2>
 8006974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006976:	69fb      	ldr	r3, [r7, #28]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800698e:	2309      	movs	r3, #9
 8006990:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006992:	23c0      	movs	r3, #192	; 0xc0
 8006994:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800699a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800699e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069a0:	f107 0308 	add.w	r3, r7, #8
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff fda2 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f937 	bl	8006c20 <SDMMC_GetCmdResp2>
 80069b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069b4:	69fb      	ldr	r3, [r7, #28]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3720      	adds	r7, #32
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b088      	sub	sp, #32
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80069cc:	2303      	movs	r3, #3
 80069ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069d0:	2340      	movs	r3, #64	; 0x40
 80069d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069de:	f107 0308 	add.w	r3, r7, #8
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff fd83 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	2103      	movs	r1, #3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f99c 	bl	8006d2c <SDMMC_GetCmdResp6>
 80069f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069f6:	69fb      	ldr	r3, [r7, #28]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3720      	adds	r7, #32
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006a0e:	230d      	movs	r3, #13
 8006a10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a12:	2340      	movs	r3, #64	; 0x40
 8006a14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a20:	f107 0308 	add.w	r3, r7, #8
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff fd62 	bl	80064f0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a30:	210d      	movs	r1, #13
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f806 	bl	8006a44 <SDMMC_GetCmdResp1>
 8006a38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3720      	adds	r7, #32
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006a52:	4b70      	ldr	r3, [pc, #448]	; (8006c14 <SDMMC_GetCmdResp1+0x1d0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a70      	ldr	r2, [pc, #448]	; (8006c18 <SDMMC_GetCmdResp1+0x1d4>)
 8006a58:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5c:	0a5a      	lsrs	r2, r3, #9
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	fb02 f303 	mul.w	r3, r2, r3
 8006a64:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	1e5a      	subs	r2, r3, #1
 8006a6a:	61fa      	str	r2, [r7, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a74:	e0c9      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0ef      	beq.n	8006a66 <SDMMC_GetCmdResp1+0x22>
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1ea      	bne.n	8006a66 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d004      	beq.n	8006aa6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006aa2:	2304      	movs	r3, #4
 8006aa4:	e0b1      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e0a6      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	22c5      	movs	r2, #197	; 0xc5
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff fd3e 	bl	8006544 <SDIO_GetCommandResponse>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	461a      	mov	r2, r3
 8006acc:	7afb      	ldrb	r3, [r7, #11]
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d001      	beq.n	8006ad6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e099      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f7ff fd40 	bl	800655e <SDIO_GetResponse>
 8006ade:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4b4e      	ldr	r3, [pc, #312]	; (8006c1c <SDMMC_GetCmdResp1+0x1d8>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e08d      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da02      	bge.n	8006afa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006af4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006af8:	e087      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006b04:	2340      	movs	r3, #64	; 0x40
 8006b06:	e080      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006b12:	2380      	movs	r3, #128	; 0x80
 8006b14:	e079      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b24:	e071      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d002      	beq.n	8006b36 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b34:	e069      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b44:	e061      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006b50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b54:	e059      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b64:	e051      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b74:	e049      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d002      	beq.n	8006b86 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006b80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b84:	e041      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d002      	beq.n	8006b96 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b94:	e039      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ba4:	e031      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006bb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006bb4:	e029      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006bc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006bc4:	e021      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006bd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006bd4:	e019      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006be0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006be4:	e011      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006bf0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006bf4:	e009      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d002      	beq.n	8006c06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006c00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006c04:	e001      	b.n	8006c0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20000000 	.word	0x20000000
 8006c18:	10624dd3 	.word	0x10624dd3
 8006c1c:	fdffe008 	.word	0xfdffe008

08006c20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c28:	4b1f      	ldr	r3, [pc, #124]	; (8006ca8 <SDMMC_GetCmdResp2+0x88>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1f      	ldr	r2, [pc, #124]	; (8006cac <SDMMC_GetCmdResp2+0x8c>)
 8006c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c32:	0a5b      	lsrs	r3, r3, #9
 8006c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c38:	fb02 f303 	mul.w	r3, r2, r3
 8006c3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	1e5a      	subs	r2, r3, #1
 8006c42:	60fa      	str	r2, [r7, #12]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d102      	bne.n	8006c4e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c4c:	e026      	b.n	8006c9c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0ef      	beq.n	8006c3e <SDMMC_GetCmdResp2+0x1e>
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1ea      	bne.n	8006c3e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2204      	movs	r2, #4
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c7a:	2304      	movs	r3, #4
 8006c7c:	e00e      	b.n	8006c9c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c90:	2301      	movs	r3, #1
 8006c92:	e003      	b.n	8006c9c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	22c5      	movs	r2, #197	; 0xc5
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	20000000 	.word	0x20000000
 8006cac:	10624dd3 	.word	0x10624dd3

08006cb0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cb8:	4b1a      	ldr	r3, [pc, #104]	; (8006d24 <SDMMC_GetCmdResp3+0x74>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <SDMMC_GetCmdResp3+0x78>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	0a5b      	lsrs	r3, r3, #9
 8006cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc8:	fb02 f303 	mul.w	r3, r2, r3
 8006ccc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	1e5a      	subs	r2, r3, #1
 8006cd2:	60fa      	str	r2, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d102      	bne.n	8006cde <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006cd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cdc:	e01b      	b.n	8006d16 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ce2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0ef      	beq.n	8006cce <SDMMC_GetCmdResp3+0x1e>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1ea      	bne.n	8006cce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d004      	beq.n	8006d0e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2204      	movs	r2, #4
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d0a:	2304      	movs	r3, #4
 8006d0c:	e003      	b.n	8006d16 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	22c5      	movs	r2, #197	; 0xc5
 8006d12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	20000000 	.word	0x20000000
 8006d28:	10624dd3 	.word	0x10624dd3

08006d2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	460b      	mov	r3, r1
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d3a:	4b35      	ldr	r3, [pc, #212]	; (8006e10 <SDMMC_GetCmdResp6+0xe4>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a35      	ldr	r2, [pc, #212]	; (8006e14 <SDMMC_GetCmdResp6+0xe8>)
 8006d40:	fba2 2303 	umull	r2, r3, r2, r3
 8006d44:	0a5b      	lsrs	r3, r3, #9
 8006d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d4a:	fb02 f303 	mul.w	r3, r2, r3
 8006d4e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	1e5a      	subs	r2, r3, #1
 8006d54:	61fa      	str	r2, [r7, #28]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d5e:	e052      	b.n	8006e06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d64:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0ef      	beq.n	8006d50 <SDMMC_GetCmdResp6+0x24>
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1ea      	bne.n	8006d50 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d004      	beq.n	8006d90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2204      	movs	r2, #4
 8006d8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	e03a      	b.n	8006e06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d004      	beq.n	8006da6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e02f      	b.n	8006e06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff fbcc 	bl	8006544 <SDIO_GetCommandResponse>
 8006dac:	4603      	mov	r3, r0
 8006dae:	461a      	mov	r2, r3
 8006db0:	7afb      	ldrb	r3, [r7, #11]
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d001      	beq.n	8006dba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e025      	b.n	8006e06 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	22c5      	movs	r2, #197	; 0xc5
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff fbcb 	bl	800655e <SDIO_GetResponse>
 8006dc8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	0c1b      	lsrs	r3, r3, #16
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006dde:	2300      	movs	r3, #0
 8006de0:	e011      	b.n	8006e06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006dec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006df0:	e009      	b.n	8006e06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006dfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006e00:	e001      	b.n	8006e06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006e02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3720      	adds	r7, #32
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000000 	.word	0x20000000
 8006e14:	10624dd3 	.word	0x10624dd3

08006e18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e20:	4b22      	ldr	r3, [pc, #136]	; (8006eac <SDMMC_GetCmdResp7+0x94>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <SDMMC_GetCmdResp7+0x98>)
 8006e26:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2a:	0a5b      	lsrs	r3, r3, #9
 8006e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e30:	fb02 f303 	mul.w	r3, r2, r3
 8006e34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	1e5a      	subs	r2, r3, #1
 8006e3a:	60fa      	str	r2, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d102      	bne.n	8006e46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e44:	e02c      	b.n	8006ea0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0ef      	beq.n	8006e36 <SDMMC_GetCmdResp7+0x1e>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1ea      	bne.n	8006e36 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e72:	2304      	movs	r3, #4
 8006e74:	e014      	b.n	8006ea0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7a:	f003 0301 	and.w	r3, r3, #1
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e009      	b.n	8006ea0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2240      	movs	r2, #64	; 0x40
 8006e9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006e9e:	2300      	movs	r3, #0
  
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	20000000 	.word	0x20000000
 8006eb0:	10624dd3 	.word	0x10624dd3

08006eb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ebc:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <SDMMC_GetCmdError+0x50>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a11      	ldr	r2, [pc, #68]	; (8006f08 <SDMMC_GetCmdError+0x54>)
 8006ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec6:	0a5b      	lsrs	r3, r3, #9
 8006ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	1e5a      	subs	r2, r3, #1
 8006ed6:	60fa      	str	r2, [r7, #12]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006edc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ee0:	e009      	b.n	8006ef6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f1      	beq.n	8006ed2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	22c5      	movs	r2, #197	; 0xc5
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000000 	.word	0x20000000
 8006f08:	10624dd3 	.word	0x10624dd3

08006f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	f107 001c 	add.w	r0, r7, #28
 8006f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d122      	bne.n	8006f6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d105      	bne.n	8006f5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fbee 	bl	8008740 <USB_CoreReset>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]
 8006f68:	e01a      	b.n	8006fa0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f001 fbe2 	bl	8008740 <USB_CoreReset>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d106      	bne.n	8006f94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38
 8006f92:	e005      	b.n	8006fa0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d10b      	bne.n	8006fbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f043 0206 	orr.w	r2, r3, #6
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f043 0220 	orr.w	r2, r3, #32
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fca:	b004      	add	sp, #16
 8006fcc:	4770      	bx	lr
	...

08006fd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d165      	bne.n	80070b0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4a41      	ldr	r2, [pc, #260]	; (80070ec <USB_SetTurnaroundTime+0x11c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d906      	bls.n	8006ffa <USB_SetTurnaroundTime+0x2a>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4a40      	ldr	r2, [pc, #256]	; (80070f0 <USB_SetTurnaroundTime+0x120>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d202      	bcs.n	8006ffa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ff4:	230f      	movs	r3, #15
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e062      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	4a3c      	ldr	r2, [pc, #240]	; (80070f0 <USB_SetTurnaroundTime+0x120>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d306      	bcc.n	8007010 <USB_SetTurnaroundTime+0x40>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4a3b      	ldr	r2, [pc, #236]	; (80070f4 <USB_SetTurnaroundTime+0x124>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d202      	bcs.n	8007010 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800700a:	230e      	movs	r3, #14
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e057      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	4a38      	ldr	r2, [pc, #224]	; (80070f4 <USB_SetTurnaroundTime+0x124>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d306      	bcc.n	8007026 <USB_SetTurnaroundTime+0x56>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4a37      	ldr	r2, [pc, #220]	; (80070f8 <USB_SetTurnaroundTime+0x128>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d202      	bcs.n	8007026 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007020:	230d      	movs	r3, #13
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e04c      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4a33      	ldr	r2, [pc, #204]	; (80070f8 <USB_SetTurnaroundTime+0x128>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d306      	bcc.n	800703c <USB_SetTurnaroundTime+0x6c>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4a32      	ldr	r2, [pc, #200]	; (80070fc <USB_SetTurnaroundTime+0x12c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d802      	bhi.n	800703c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007036:	230c      	movs	r3, #12
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e041      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4a2f      	ldr	r2, [pc, #188]	; (80070fc <USB_SetTurnaroundTime+0x12c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d906      	bls.n	8007052 <USB_SetTurnaroundTime+0x82>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4a2e      	ldr	r2, [pc, #184]	; (8007100 <USB_SetTurnaroundTime+0x130>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d802      	bhi.n	8007052 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800704c:	230b      	movs	r3, #11
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e036      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	4a2a      	ldr	r2, [pc, #168]	; (8007100 <USB_SetTurnaroundTime+0x130>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d906      	bls.n	8007068 <USB_SetTurnaroundTime+0x98>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	4a29      	ldr	r2, [pc, #164]	; (8007104 <USB_SetTurnaroundTime+0x134>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d802      	bhi.n	8007068 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007062:	230a      	movs	r3, #10
 8007064:	617b      	str	r3, [r7, #20]
 8007066:	e02b      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4a26      	ldr	r2, [pc, #152]	; (8007104 <USB_SetTurnaroundTime+0x134>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d906      	bls.n	800707e <USB_SetTurnaroundTime+0xae>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	4a25      	ldr	r2, [pc, #148]	; (8007108 <USB_SetTurnaroundTime+0x138>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d202      	bcs.n	800707e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007078:	2309      	movs	r3, #9
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	e020      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4a21      	ldr	r2, [pc, #132]	; (8007108 <USB_SetTurnaroundTime+0x138>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d306      	bcc.n	8007094 <USB_SetTurnaroundTime+0xc4>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4a20      	ldr	r2, [pc, #128]	; (800710c <USB_SetTurnaroundTime+0x13c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d802      	bhi.n	8007094 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800708e:	2308      	movs	r3, #8
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	e015      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4a1d      	ldr	r2, [pc, #116]	; (800710c <USB_SetTurnaroundTime+0x13c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d906      	bls.n	80070aa <USB_SetTurnaroundTime+0xda>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	4a1c      	ldr	r2, [pc, #112]	; (8007110 <USB_SetTurnaroundTime+0x140>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d202      	bcs.n	80070aa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80070a4:	2307      	movs	r3, #7
 80070a6:	617b      	str	r3, [r7, #20]
 80070a8:	e00a      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80070aa:	2306      	movs	r3, #6
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e007      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d102      	bne.n	80070bc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80070b6:	2309      	movs	r3, #9
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e001      	b.n	80070c0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80070bc:	2309      	movs	r3, #9
 80070be:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	029b      	lsls	r3, r3, #10
 80070d4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80070d8:	431a      	orrs	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	371c      	adds	r7, #28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	00d8acbf 	.word	0x00d8acbf
 80070f0:	00e4e1c0 	.word	0x00e4e1c0
 80070f4:	00f42400 	.word	0x00f42400
 80070f8:	01067380 	.word	0x01067380
 80070fc:	011a499f 	.word	0x011a499f
 8007100:	01312cff 	.word	0x01312cff
 8007104:	014ca43f 	.word	0x014ca43f
 8007108:	016e3600 	.word	0x016e3600
 800710c:	01a6ab1f 	.word	0x01a6ab1f
 8007110:	01e84800 	.word	0x01e84800

08007114 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f043 0201 	orr.w	r2, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f023 0201 	bic.w	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d115      	bne.n	80071a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007186:	2001      	movs	r0, #1
 8007188:	f7fa f996 	bl	80014b8 <HAL_Delay>
      ms++;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3301      	adds	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fa45 	bl	8008622 <USB_GetMode>
 8007198:	4603      	mov	r3, r0
 800719a:	2b01      	cmp	r3, #1
 800719c:	d01e      	beq.n	80071dc <USB_SetCurrentMode+0x84>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b31      	cmp	r3, #49	; 0x31
 80071a2:	d9f0      	bls.n	8007186 <USB_SetCurrentMode+0x2e>
 80071a4:	e01a      	b.n	80071dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071a6:	78fb      	ldrb	r3, [r7, #3]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d115      	bne.n	80071d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071b8:	2001      	movs	r0, #1
 80071ba:	f7fa f97d 	bl	80014b8 <HAL_Delay>
      ms++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 fa2c 	bl	8008622 <USB_GetMode>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d005      	beq.n	80071dc <USB_SetCurrentMode+0x84>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b31      	cmp	r3, #49	; 0x31
 80071d4:	d9f0      	bls.n	80071b8 <USB_SetCurrentMode+0x60>
 80071d6:	e001      	b.n	80071dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e005      	b.n	80071e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2b32      	cmp	r3, #50	; 0x32
 80071e0:	d101      	bne.n	80071e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80071f0:	b084      	sub	sp, #16
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b086      	sub	sp, #24
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800720a:	2300      	movs	r3, #0
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	e009      	b.n	8007224 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	3340      	adds	r3, #64	; 0x40
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	2200      	movs	r2, #0
 800721c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	3301      	adds	r3, #1
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	2b0e      	cmp	r3, #14
 8007228:	d9f2      	bls.n	8007210 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800722a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d11c      	bne.n	800726a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800723e:	f043 0302 	orr.w	r3, r3, #2
 8007242:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007248:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007254:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38
 8007268:	e00b      	b.n	8007282 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007288:	461a      	mov	r2, r3
 800728a:	2300      	movs	r3, #0
 800728c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007294:	4619      	mov	r1, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729c:	461a      	mov	r2, r3
 800729e:	680b      	ldr	r3, [r1, #0]
 80072a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d10c      	bne.n	80072c2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072ae:	2100      	movs	r1, #0
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f965 	bl	8007580 <USB_SetDevSpeed>
 80072b6:	e008      	b.n	80072ca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80072b8:	2101      	movs	r1, #1
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f960 	bl	8007580 <USB_SetDevSpeed>
 80072c0:	e003      	b.n	80072ca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80072c2:	2103      	movs	r1, #3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f95b 	bl	8007580 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072ca:	2110      	movs	r1, #16
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f8f3 	bl	80074b8 <USB_FlushTxFifo>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f91f 	bl	8007520 <USB_FlushRxFifo>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f2:	461a      	mov	r2, r3
 80072f4:	2300      	movs	r3, #0
 80072f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fe:	461a      	mov	r2, r3
 8007300:	2300      	movs	r3, #0
 8007302:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	461a      	mov	r2, r3
 800730c:	2300      	movs	r3, #0
 800730e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	e043      	b.n	800739e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007328:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800732c:	d118      	bne.n	8007360 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007340:	461a      	mov	r2, r3
 8007342:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	e013      	b.n	8007372 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007356:	461a      	mov	r2, r3
 8007358:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	e008      	b.n	8007372 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	4413      	add	r3, r2
 8007368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736c:	461a      	mov	r2, r3
 800736e:	2300      	movs	r3, #0
 8007370:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800737e:	461a      	mov	r2, r3
 8007380:	2300      	movs	r3, #0
 8007382:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007390:	461a      	mov	r2, r3
 8007392:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007396:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	3301      	adds	r3, #1
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d3b7      	bcc.n	8007316 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	e043      	b.n	8007434 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c2:	d118      	bne.n	80073f6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10a      	bne.n	80073e0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d6:	461a      	mov	r2, r3
 80073d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	e013      	b.n	8007408 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ec:	461a      	mov	r2, r3
 80073ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	e008      	b.n	8007408 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007402:	461a      	mov	r2, r3
 8007404:	2300      	movs	r3, #0
 8007406:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	461a      	mov	r2, r3
 8007416:	2300      	movs	r3, #0
 8007418:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007426:	461a      	mov	r2, r3
 8007428:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800742c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	3301      	adds	r3, #1
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	429a      	cmp	r2, r3
 800743a:	d3b7      	bcc.n	80073ac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800744a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800744e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800745c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	2b00      	cmp	r3, #0
 8007462:	d105      	bne.n	8007470 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	f043 0210 	orr.w	r2, r3, #16
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699a      	ldr	r2, [r3, #24]
 8007474:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <USB_DevInit+0x2c4>)
 8007476:	4313      	orrs	r3, r2
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800747c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	f043 0208 	orr.w	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800748e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007490:	2b01      	cmp	r3, #1
 8007492:	d107      	bne.n	80074a4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800749c:	f043 0304 	orr.w	r3, r3, #4
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074b0:	b004      	add	sp, #16
 80074b2:	4770      	bx	lr
 80074b4:	803c3800 	.word	0x803c3800

080074b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4a13      	ldr	r2, [pc, #76]	; (800751c <USB_FlushTxFifo+0x64>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d901      	bls.n	80074d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e01b      	b.n	8007510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	daf2      	bge.n	80074c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	019b      	lsls	r3, r3, #6
 80074e8:	f043 0220 	orr.w	r2, r3, #32
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	4a08      	ldr	r2, [pc, #32]	; (800751c <USB_FlushTxFifo+0x64>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d901      	bls.n	8007502 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e006      	b.n	8007510 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b20      	cmp	r3, #32
 800750c:	d0f0      	beq.n	80074f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	00030d40 	.word	0x00030d40

08007520 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	3301      	adds	r3, #1
 8007530:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4a11      	ldr	r2, [pc, #68]	; (800757c <USB_FlushRxFifo+0x5c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d901      	bls.n	800753e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800753a:	2303      	movs	r3, #3
 800753c:	e018      	b.n	8007570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	2b00      	cmp	r3, #0
 8007544:	daf2      	bge.n	800752c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007546:	2300      	movs	r3, #0
 8007548:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2210      	movs	r2, #16
 800754e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3301      	adds	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4a08      	ldr	r2, [pc, #32]	; (800757c <USB_FlushRxFifo+0x5c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d901      	bls.n	8007562 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e006      	b.n	8007570 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0310 	and.w	r3, r3, #16
 800756a:	2b10      	cmp	r3, #16
 800756c:	d0f0      	beq.n	8007550 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	00030d40 	.word	0x00030d40

08007580 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	68f9      	ldr	r1, [r7, #12]
 800759c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075a0:	4313      	orrs	r3, r2
 80075a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b087      	sub	sp, #28
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f003 0306 	and.w	r3, r3, #6
 80075ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d102      	bne.n	80075d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80075d2:	2300      	movs	r3, #0
 80075d4:	75fb      	strb	r3, [r7, #23]
 80075d6:	e00a      	b.n	80075ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d002      	beq.n	80075e4 <USB_GetDevSpeed+0x32>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b06      	cmp	r3, #6
 80075e2:	d102      	bne.n	80075ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80075e4:	2302      	movs	r3, #2
 80075e6:	75fb      	strb	r3, [r7, #23]
 80075e8:	e001      	b.n	80075ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80075ea:	230f      	movs	r3, #15
 80075ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80075ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	785b      	ldrb	r3, [r3, #1]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d13a      	bne.n	800768e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761e:	69da      	ldr	r2, [r3, #28]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	2101      	movs	r1, #1
 800762a:	fa01 f303 	lsl.w	r3, r1, r3
 800762e:	b29b      	uxth	r3, r3
 8007630:	68f9      	ldr	r1, [r7, #12]
 8007632:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007636:	4313      	orrs	r3, r2
 8007638:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d155      	bne.n	80076fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	791b      	ldrb	r3, [r3, #4]
 800766a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800766c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	059b      	lsls	r3, r3, #22
 8007672:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007674:	4313      	orrs	r3, r2
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	0151      	lsls	r1, r2, #5
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	440a      	add	r2, r1
 800767e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800768a:	6013      	str	r3, [r2, #0]
 800768c:	e036      	b.n	80076fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007694:	69da      	ldr	r2, [r3, #28]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	f003 030f 	and.w	r3, r3, #15
 800769e:	2101      	movs	r1, #1
 80076a0:	fa01 f303 	lsl.w	r3, r1, r3
 80076a4:	041b      	lsls	r3, r3, #16
 80076a6:	68f9      	ldr	r1, [r7, #12]
 80076a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ac:	4313      	orrs	r3, r2
 80076ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d11a      	bne.n	80076fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	791b      	ldrb	r3, [r3, #4]
 80076e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076e2:	430b      	orrs	r3, r1
 80076e4:	4313      	orrs	r3, r2
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
	...

0800770c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	785b      	ldrb	r3, [r3, #1]
 8007724:	2b01      	cmp	r3, #1
 8007726:	d161      	bne.n	80077ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800773a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800773e:	d11f      	bne.n	8007780 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	0151      	lsls	r1, r2, #5
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	440a      	add	r2, r1
 8007756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800775e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800777e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	f003 030f 	and.w	r3, r3, #15
 8007790:	2101      	movs	r1, #1
 8007792:	fa01 f303 	lsl.w	r3, r1, r3
 8007796:	b29b      	uxth	r3, r3
 8007798:	43db      	mvns	r3, r3
 800779a:	68f9      	ldr	r1, [r7, #12]
 800779c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a0:	4013      	ands	r3, r2
 80077a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	2101      	movs	r1, #1
 80077b6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	43db      	mvns	r3, r3
 80077be:	68f9      	ldr	r1, [r7, #12]
 80077c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c4:	4013      	ands	r3, r2
 80077c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	0159      	lsls	r1, r3, #5
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	440b      	add	r3, r1
 80077de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e2:	4619      	mov	r1, r3
 80077e4:	4b35      	ldr	r3, [pc, #212]	; (80078bc <USB_DeactivateEndpoint+0x1b0>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	600b      	str	r3, [r1, #0]
 80077ea:	e060      	b.n	80078ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007802:	d11f      	bne.n	8007844 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007822:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	440a      	add	r2, r1
 800783a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800783e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007842:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	2101      	movs	r1, #1
 8007856:	fa01 f303 	lsl.w	r3, r1, r3
 800785a:	041b      	lsls	r3, r3, #16
 800785c:	43db      	mvns	r3, r3
 800785e:	68f9      	ldr	r1, [r7, #12]
 8007860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007864:	4013      	ands	r3, r2
 8007866:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786e:	69da      	ldr	r2, [r3, #28]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	2101      	movs	r1, #1
 800787a:	fa01 f303 	lsl.w	r3, r1, r3
 800787e:	041b      	lsls	r3, r3, #16
 8007880:	43db      	mvns	r3, r3
 8007882:	68f9      	ldr	r1, [r7, #12]
 8007884:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007888:	4013      	ands	r3, r2
 800788a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	0159      	lsls	r1, r3, #5
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	440b      	add	r3, r1
 80078a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a6:	4619      	mov	r1, r3
 80078a8:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <USB_DeactivateEndpoint+0x1b4>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3714      	adds	r7, #20
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	ec337800 	.word	0xec337800
 80078c0:	eff37800 	.word	0xeff37800

080078c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	; 0x28
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	785b      	ldrb	r3, [r3, #1]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	f040 815c 	bne.w	8007b9e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	699b      	ldr	r3, [r3, #24]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d132      	bne.n	8007954 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	69ba      	ldr	r2, [r7, #24]
 80078fe:	0151      	lsls	r1, r2, #5
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	440a      	add	r2, r1
 8007904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007908:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800790c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007910:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	0151      	lsls	r1, r2, #5
 8007924:	69fa      	ldr	r2, [r7, #28]
 8007926:	440a      	add	r2, r1
 8007928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	440a      	add	r2, r1
 8007948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800794c:	0cdb      	lsrs	r3, r3, #19
 800794e:	04db      	lsls	r3, r3, #19
 8007950:	6113      	str	r3, [r2, #16]
 8007952:	e074      	b.n	8007a3e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	4413      	add	r3, r2
 800795c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	69ba      	ldr	r2, [r7, #24]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	440a      	add	r2, r1
 800796a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800796e:	0cdb      	lsrs	r3, r3, #19
 8007970:	04db      	lsls	r3, r3, #19
 8007972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007992:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6999      	ldr	r1, [r3, #24]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	440b      	add	r3, r1
 80079b0:	1e59      	subs	r1, r3, #1
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80079ba:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80079bc:	4b9d      	ldr	r3, [pc, #628]	; (8007c34 <USB_EPStartXfer+0x370>)
 80079be:	400b      	ands	r3, r1
 80079c0:	69b9      	ldr	r1, [r7, #24]
 80079c2:	0148      	lsls	r0, r1, #5
 80079c4:	69f9      	ldr	r1, [r7, #28]
 80079c6:	4401      	add	r1, r0
 80079c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079cc:	4313      	orrs	r3, r2
 80079ce:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	691a      	ldr	r2, [r3, #16]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e6:	69b9      	ldr	r1, [r7, #24]
 80079e8:	0148      	lsls	r0, r1, #5
 80079ea:	69f9      	ldr	r1, [r7, #28]
 80079ec:	4401      	add	r1, r0
 80079ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079f2:	4313      	orrs	r3, r2
 80079f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d11f      	bne.n	8007a3e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a3c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d14b      	bne.n	8007adc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d009      	beq.n	8007a60 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a58:	461a      	mov	r2, r3
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	791b      	ldrb	r3, [r3, #4]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d128      	bne.n	8007aba <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d110      	bne.n	8007a9a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69ba      	ldr	r2, [r7, #24]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	e00f      	b.n	8007aba <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69ba      	ldr	r2, [r7, #24]
 8007aaa:	0151      	lsls	r1, r2, #5
 8007aac:	69fa      	ldr	r2, [r7, #28]
 8007aae:	440a      	add	r2, r1
 8007ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	015a      	lsls	r2, r3, #5
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69ba      	ldr	r2, [r7, #24]
 8007aca:	0151      	lsls	r1, r2, #5
 8007acc:	69fa      	ldr	r2, [r7, #28]
 8007ace:	440a      	add	r2, r1
 8007ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	e133      	b.n	8007d44 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	0151      	lsls	r1, r2, #5
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	440a      	add	r2, r1
 8007af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007afa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	791b      	ldrb	r3, [r3, #4]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d015      	beq.n	8007b30 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	699b      	ldr	r3, [r3, #24]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 811b 	beq.w	8007d44 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	2101      	movs	r1, #1
 8007b20:	fa01 f303 	lsl.w	r3, r1, r3
 8007b24:	69f9      	ldr	r1, [r7, #28]
 8007b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	634b      	str	r3, [r1, #52]	; 0x34
 8007b2e:	e109      	b.n	8007d44 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d110      	bne.n	8007b62 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	e00f      	b.n	8007b82 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b80:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6919      	ldr	r1, [r3, #16]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	781a      	ldrb	r2, [r3, #0]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	b298      	uxth	r0, r3
 8007b90:	79fb      	ldrb	r3, [r7, #7]
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	4603      	mov	r3, r0
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 fade 	bl	8008158 <USB_WritePacket>
 8007b9c:	e0d2      	b.n	8007d44 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	69fa      	ldr	r2, [r7, #28]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb8:	0cdb      	lsrs	r3, r3, #19
 8007bba:	04db      	lsls	r3, r3, #19
 8007bbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	69ba      	ldr	r2, [r7, #24]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007be0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d126      	bne.n	8007c38 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	015a      	lsls	r2, r3, #5
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c00:	69b9      	ldr	r1, [r7, #24]
 8007c02:	0148      	lsls	r0, r1, #5
 8007c04:	69f9      	ldr	r1, [r7, #28]
 8007c06:	4401      	add	r1, r0
 8007c08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c2e:	6113      	str	r3, [r2, #16]
 8007c30:	e03a      	b.n	8007ca8 <USB_EPStartXfer+0x3e4>
 8007c32:	bf00      	nop
 8007c34:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	1e5a      	subs	r2, r3, #1
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	8afa      	ldrh	r2, [r7, #22]
 8007c54:	fb03 f202 	mul.w	r2, r3, r2
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c68:	691a      	ldr	r2, [r3, #16]
 8007c6a:	8afb      	ldrh	r3, [r7, #22]
 8007c6c:	04d9      	lsls	r1, r3, #19
 8007c6e:	4b38      	ldr	r3, [pc, #224]	; (8007d50 <USB_EPStartXfer+0x48c>)
 8007c70:	400b      	ands	r3, r1
 8007c72:	69b9      	ldr	r1, [r7, #24]
 8007c74:	0148      	lsls	r0, r1, #5
 8007c76:	69f9      	ldr	r1, [r7, #28]
 8007c78:	4401      	add	r1, r0
 8007c7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c98:	69b9      	ldr	r1, [r7, #24]
 8007c9a:	0148      	lsls	r0, r1, #5
 8007c9c:	69f9      	ldr	r1, [r7, #28]
 8007c9e:	4401      	add	r1, r0
 8007ca0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d10d      	bne.n	8007cca <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6919      	ldr	r1, [r3, #16]
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc6:	460a      	mov	r2, r1
 8007cc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d128      	bne.n	8007d24 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d110      	bne.n	8007d04 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	e00f      	b.n	8007d24 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	0151      	lsls	r1, r2, #5
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	440a      	add	r2, r1
 8007d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	1ff80000 	.word	0x1ff80000

08007d54 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	f040 80ce 	bne.w	8007f12 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d132      	bne.n	8007de4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	0151      	lsls	r1, r2, #5
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	440a      	add	r2, r1
 8007d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	0151      	lsls	r1, r2, #5
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	440a      	add	r2, r1
 8007db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	0151      	lsls	r1, r2, #5
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	440a      	add	r2, r1
 8007dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ddc:	0cdb      	lsrs	r3, r3, #19
 8007dde:	04db      	lsls	r3, r3, #19
 8007de0:	6113      	str	r3, [r2, #16]
 8007de2:	e04e      	b.n	8007e82 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dfe:	0cdb      	lsrs	r3, r3, #19
 8007e00:	04db      	lsls	r3, r3, #19
 8007e02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e26:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d903      	bls.n	8007e3c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	68da      	ldr	r2, [r3, #12]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	0151      	lsls	r1, r2, #5
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	440a      	add	r2, r1
 8007e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e68:	691a      	ldr	r2, [r3, #16]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e72:	6939      	ldr	r1, [r7, #16]
 8007e74:	0148      	lsls	r0, r1, #5
 8007e76:	6979      	ldr	r1, [r7, #20]
 8007e78:	4401      	add	r1, r0
 8007e7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d11e      	bne.n	8007ec6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d009      	beq.n	8007ea4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	0151      	lsls	r1, r2, #5
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	440a      	add	r2, r1
 8007eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ebe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ec2:	6013      	str	r3, [r2, #0]
 8007ec4:	e097      	b.n	8007ff6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	0151      	lsls	r1, r2, #5
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	440a      	add	r2, r1
 8007edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ee4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 8083 	beq.w	8007ff6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	2101      	movs	r1, #1
 8007f02:	fa01 f303 	lsl.w	r3, r1, r3
 8007f06:	6979      	ldr	r1, [r7, #20]
 8007f08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	634b      	str	r3, [r1, #52]	; 0x34
 8007f10:	e071      	b.n	8007ff6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	015a      	lsls	r2, r3, #5
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	4413      	add	r3, r2
 8007f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	0151      	lsls	r1, r2, #5
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	440a      	add	r2, r1
 8007f28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f2c:	0cdb      	lsrs	r3, r3, #19
 8007f2e:	04db      	lsls	r3, r3, #19
 8007f30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	0151      	lsls	r1, r2, #5
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	440a      	add	r2, r1
 8007f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	693a      	ldr	r2, [r7, #16]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fa4:	6939      	ldr	r1, [r7, #16]
 8007fa6:	0148      	lsls	r0, r1, #5
 8007fa8:	6979      	ldr	r1, [r7, #20]
 8007faa:	4401      	add	r1, r0
 8007fac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d10d      	bne.n	8007fd6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d009      	beq.n	8007fd6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	6919      	ldr	r1, [r3, #16]
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	697a      	ldr	r2, [r7, #20]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ff0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ff4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008004:	b480      	push	{r7}
 8008006:	b087      	sub	sp, #28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	785b      	ldrb	r3, [r3, #1]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d14a      	bne.n	80080b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800803a:	f040 8086 	bne.w	800814a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	7812      	ldrb	r2, [r2, #0]
 8008052:	0151      	lsls	r1, r2, #5
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	440a      	add	r2, r1
 8008058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800805c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008060:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	015a      	lsls	r2, r3, #5
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	4413      	add	r3, r2
 800806c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	7812      	ldrb	r2, [r2, #0]
 8008076:	0151      	lsls	r1, r2, #5
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	440a      	add	r2, r1
 800807c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008084:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3301      	adds	r3, #1
 800808a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008092:	4293      	cmp	r3, r2
 8008094:	d902      	bls.n	800809c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	75fb      	strb	r3, [r7, #23]
          break;
 800809a:	e056      	b.n	800814a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080b4:	d0e7      	beq.n	8008086 <USB_EPStopXfer+0x82>
 80080b6:	e048      	b.n	800814a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d0:	d13b      	bne.n	800814a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	015a      	lsls	r2, r3, #5
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	4413      	add	r3, r2
 80080dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	7812      	ldrb	r2, [r2, #0]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80080f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	7812      	ldrb	r2, [r2, #0]
 800810a:	0151      	lsls	r1, r2, #5
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	440a      	add	r2, r1
 8008110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008118:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f242 7210 	movw	r2, #10000	; 0x2710
 8008126:	4293      	cmp	r3, r2
 8008128:	d902      	bls.n	8008130 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	75fb      	strb	r3, [r7, #23]
          break;
 800812e:	e00c      	b.n	800814a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	4413      	add	r3, r2
 800813a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008148:	d0e7      	beq.n	800811a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
}
 800814c:	4618      	mov	r0, r3
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008158:	b480      	push	{r7}
 800815a:	b089      	sub	sp, #36	; 0x24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	4611      	mov	r1, r2
 8008164:	461a      	mov	r2, r3
 8008166:	460b      	mov	r3, r1
 8008168:	71fb      	strb	r3, [r7, #7]
 800816a:	4613      	mov	r3, r2
 800816c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008176:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800817a:	2b00      	cmp	r3, #0
 800817c:	d123      	bne.n	80081c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800817e:	88bb      	ldrh	r3, [r7, #4]
 8008180:	3303      	adds	r3, #3
 8008182:	089b      	lsrs	r3, r3, #2
 8008184:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008186:	2300      	movs	r3, #0
 8008188:	61bb      	str	r3, [r7, #24]
 800818a:	e018      	b.n	80081be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	031a      	lsls	r2, r3, #12
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	4413      	add	r3, r2
 8008194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008198:	461a      	mov	r2, r3
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	6013      	str	r3, [r2, #0]
      pSrc++;
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	3301      	adds	r3, #1
 80081a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	3301      	adds	r3, #1
 80081aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	3301      	adds	r3, #1
 80081b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	3301      	adds	r3, #1
 80081b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	3301      	adds	r3, #1
 80081bc:	61bb      	str	r3, [r7, #24]
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d3e2      	bcc.n	800818c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3724      	adds	r7, #36	; 0x24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b08b      	sub	sp, #44	; 0x2c
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	4613      	mov	r3, r2
 80081e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80081ea:	88fb      	ldrh	r3, [r7, #6]
 80081ec:	089b      	lsrs	r3, r3, #2
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80081f2:	88fb      	ldrh	r3, [r7, #6]
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80081fa:	2300      	movs	r3, #0
 80081fc:	623b      	str	r3, [r7, #32]
 80081fe:	e014      	b.n	800822a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820a:	601a      	str	r2, [r3, #0]
    pDest++;
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	3301      	adds	r3, #1
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	3301      	adds	r3, #1
 8008216:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	3301      	adds	r3, #1
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	3301      	adds	r3, #1
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	3301      	adds	r3, #1
 8008228:	623b      	str	r3, [r7, #32]
 800822a:	6a3a      	ldr	r2, [r7, #32]
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	429a      	cmp	r2, r3
 8008230:	d3e6      	bcc.n	8008200 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008232:	8bfb      	ldrh	r3, [r7, #30]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01e      	beq.n	8008276 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008242:	461a      	mov	r2, r3
 8008244:	f107 0310 	add.w	r3, r7, #16
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	fa22 f303 	lsr.w	r3, r2, r3
 8008258:	b2da      	uxtb	r2, r3
 800825a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825c:	701a      	strb	r2, [r3, #0]
      i++;
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	3301      	adds	r3, #1
 8008262:	623b      	str	r3, [r7, #32]
      pDest++;
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	3301      	adds	r3, #1
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800826a:	8bfb      	ldrh	r3, [r7, #30]
 800826c:	3b01      	subs	r3, #1
 800826e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008270:	8bfb      	ldrh	r3, [r7, #30]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1ea      	bne.n	800824c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008278:	4618      	mov	r0, r3
 800827a:	372c      	adds	r7, #44	; 0x2c
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d12c      	bne.n	80082fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	db12      	blt.n	80082d8 <USB_EPSetStall+0x54>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00f      	beq.n	80082d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	0151      	lsls	r1, r2, #5
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	440a      	add	r2, r1
 80082ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	0151      	lsls	r1, r2, #5
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	440a      	add	r2, r1
 80082ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	e02b      	b.n	8008352 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	db12      	blt.n	8008332 <USB_EPSetStall+0xae>
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00f      	beq.n	8008332 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4413      	add	r3, r2
 800831a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	0151      	lsls	r1, r2, #5
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	440a      	add	r2, r1
 8008328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800832c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008330:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68ba      	ldr	r2, [r7, #8]
 8008342:	0151      	lsls	r1, r2, #5
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	440a      	add	r2, r1
 8008348:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800834c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008350:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	785b      	ldrb	r3, [r3, #1]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d128      	bne.n	80083ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	015a      	lsls	r2, r3, #5
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4413      	add	r3, r2
 8008384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	0151      	lsls	r1, r2, #5
 800838e:	68fa      	ldr	r2, [r7, #12]
 8008390:	440a      	add	r2, r1
 8008392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008396:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800839a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	791b      	ldrb	r3, [r3, #4]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d003      	beq.n	80083ac <USB_EPClearStall+0x4c>
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	791b      	ldrb	r3, [r3, #4]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d138      	bne.n	800841e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	0151      	lsls	r1, r2, #5
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	440a      	add	r2, r1
 80083c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ca:	6013      	str	r3, [r2, #0]
 80083cc:	e027      	b.n	800841e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	791b      	ldrb	r3, [r3, #4]
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d003      	beq.n	80083fe <USB_EPClearStall+0x9e>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	791b      	ldrb	r3, [r3, #4]
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d10f      	bne.n	800841e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4413      	add	r3, r2
 8008406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	0151      	lsls	r1, r2, #5
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	440a      	add	r2, r1
 8008414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800841c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	460b      	mov	r3, r1
 8008436:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800844a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800844e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	011b      	lsls	r3, r3, #4
 800845c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008460:	68f9      	ldr	r1, [r7, #12]
 8008462:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008466:	4313      	orrs	r3, r2
 8008468:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008492:	f023 0303 	bic.w	r3, r3, #3
 8008496:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084a6:	f023 0302 	bic.w	r3, r3, #2
 80084aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3714      	adds	r7, #20
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084d4:	f023 0303 	bic.w	r3, r3, #3
 80084d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084e8:	f043 0302 	orr.w	r3, r3, #2
 80084ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	695b      	ldr	r3, [r3, #20]
 8008508:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	4013      	ands	r3, r2
 8008512:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008514:	68fb      	ldr	r3, [r7, #12]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	4013      	ands	r3, r2
 8008544:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	0c1b      	lsrs	r3, r3, #16
}
 800854a:	4618      	mov	r0, r3
 800854c:	3714      	adds	r7, #20
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008572:	69db      	ldr	r3, [r3, #28]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	4013      	ands	r3, r2
 8008578:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	b29b      	uxth	r3, r3
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	460b      	mov	r3, r1
 8008594:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	4013      	ands	r3, r2
 80085b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085b8:	68bb      	ldr	r3, [r7, #8]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b087      	sub	sp, #28
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	460b      	mov	r3, r1
 80085d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80085ea:	78fb      	ldrb	r3, [r7, #3]
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	fa22 f303 	lsr.w	r3, r2, r3
 80085f6:	01db      	lsls	r3, r3, #7
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	4013      	ands	r3, r2
 8008612:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008614:	68bb      	ldr	r3, [r7, #8]
}
 8008616:	4618      	mov	r0, r3
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	f003 0301 	and.w	r3, r3, #1
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008658:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800865c:	f023 0307 	bic.w	r3, r3, #7
 8008660:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	68fa      	ldr	r2, [r7, #12]
 800866c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008674:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	460b      	mov	r3, r1
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	333c      	adds	r3, #60	; 0x3c
 800869a:	3304      	adds	r3, #4
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	4a26      	ldr	r2, [pc, #152]	; (800873c <USB_EP0_OutStart+0xb8>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d90a      	bls.n	80086be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b8:	d101      	bne.n	80086be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	e037      	b.n	800872e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c4:	461a      	mov	r2, r3
 80086c6:	2300      	movs	r3, #0
 80086c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ec:	f043 0318 	orr.w	r3, r3, #24
 80086f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	697a      	ldr	r2, [r7, #20]
 80086fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008700:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008704:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008706:	7afb      	ldrb	r3, [r7, #11]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d10f      	bne.n	800872c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008712:	461a      	mov	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008726:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800872a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	4f54300a 	.word	0x4f54300a

08008740 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3301      	adds	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <USB_CoreReset+0x64>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d901      	bls.n	800875e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e01b      	b.n	8008796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	daf2      	bge.n	800874c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	f043 0201 	orr.w	r2, r3, #1
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	3301      	adds	r3, #1
 800877a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <USB_CoreReset+0x64>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d901      	bls.n	8008788 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e006      	b.n	8008796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b01      	cmp	r3, #1
 8008792:	d0f0      	beq.n	8008776 <USB_CoreReset+0x36>

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	00030d40 	.word	0x00030d40

080087a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80087ac:	4904      	ldr	r1, [pc, #16]	; (80087c0 <MX_FATFS_Init+0x18>)
 80087ae:	4805      	ldr	r0, [pc, #20]	; (80087c4 <MX_FATFS_Init+0x1c>)
 80087b0:	f002 fa0c 	bl	800abcc <FATFS_LinkDriver>
 80087b4:	4603      	mov	r3, r0
 80087b6:	461a      	mov	r2, r3
 80087b8:	4b03      	ldr	r3, [pc, #12]	; (80087c8 <MX_FATFS_Init+0x20>)
 80087ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80087bc:	bf00      	nop
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20000518 	.word	0x20000518
 80087c4:	0800e684 	.word	0x0800e684
 80087c8:	20000514 	.word	0x20000514

080087cc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80087d6:	f000 f87b 	bl	80088d0 <BSP_SD_IsDetected>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d001      	beq.n	80087e4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e012      	b.n	800880a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80087e4:	480b      	ldr	r0, [pc, #44]	; (8008814 <BSP_SD_Init+0x48>)
 80087e6:	f7fb ff7f 	bl	80046e8 <HAL_SD_Init>
 80087ea:	4603      	mov	r3, r0
 80087ec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d109      	bne.n	8008808 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80087f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80087f8:	4806      	ldr	r0, [pc, #24]	; (8008814 <BSP_SD_Init+0x48>)
 80087fa:	f7fc fbc7 	bl	8004f8c <HAL_SD_ConfigWideBusOperation>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d001      	beq.n	8008808 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008808:	79fb      	ldrb	r3, [r7, #7]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	200001c0 	.word	0x200001c0

08008818 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	68f9      	ldr	r1, [r7, #12]
 800882e:	4806      	ldr	r0, [pc, #24]	; (8008848 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008830:	f7fc f80a 	bl	8004848 <HAL_SD_ReadBlocks_DMA>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	200001c0 	.word	0x200001c0

0800884c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	68f9      	ldr	r1, [r7, #12]
 8008862:	4806      	ldr	r0, [pc, #24]	; (800887c <BSP_SD_WriteBlocks_DMA+0x30>)
 8008864:	f7fc f8d2 	bl	8004a0c <HAL_SD_WriteBlocks_DMA>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008872:	7dfb      	ldrb	r3, [r7, #23]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}
 800887c:	200001c0 	.word	0x200001c0

08008880 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008884:	4805      	ldr	r0, [pc, #20]	; (800889c <BSP_SD_GetCardState+0x1c>)
 8008886:	f7fc fc1b 	bl	80050c0 <HAL_SD_GetCardState>
 800888a:	4603      	mov	r3, r0
 800888c:	2b04      	cmp	r3, #4
 800888e:	bf14      	ite	ne
 8008890:	2301      	movne	r3, #1
 8008892:	2300      	moveq	r3, #0
 8008894:	b2db      	uxtb	r3, r3
}
 8008896:	4618      	mov	r0, r3
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	200001c0 	.word	0x200001c0

080088a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4803      	ldr	r0, [pc, #12]	; (80088b8 <BSP_SD_GetCardInfo+0x18>)
 80088ac:	f7fc fb42 	bl	8004f34 <HAL_SD_GetCardInfo>
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	200001c0 	.word	0x200001c0

080088bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b082      	sub	sp, #8
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80088c4:	f000 f9a2 	bl	8008c0c <BSP_SD_ReadCpltCallback>
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80088d6:	2301      	movs	r3, #1
 80088d8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80088da:	f000 f80b 	bl	80088f4 <BSP_PlatformIsDetected>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d101      	bne.n	80088e8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80088e4:	2300      	movs	r3, #0
 80088e6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	b2db      	uxtb	r3, r3
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80088fa:	2301      	movs	r3, #1
 80088fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80088fe:	2180      	movs	r1, #128	; 0x80
 8008900:	4806      	ldr	r0, [pc, #24]	; (800891c <BSP_PlatformIsDetected+0x28>)
 8008902:	f7f9 fea5 	bl	8002650 <HAL_GPIO_ReadPin>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800890c:	2300      	movs	r3, #0
 800890e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008910:	79fb      	ldrb	r3, [r7, #7]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3708      	adds	r7, #8
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40020800 	.word	0x40020800

08008920 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8008928:	f002 fa00 	bl	800ad2c <osKernelGetTickCount>
 800892c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800892e:	e006      	b.n	800893e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008930:	f7ff ffa6 	bl	8008880 <BSP_SD_GetCardState>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d101      	bne.n	800893e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800893a:	2300      	movs	r3, #0
 800893c:	e009      	b.n	8008952 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800893e:	f002 f9f5 	bl	800ad2c <osKernelGetTickCount>
 8008942:	4602      	mov	r2, r0
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	429a      	cmp	r2, r3
 800894c:	d8f0      	bhi.n	8008930 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800894e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008966:	4b0b      	ldr	r3, [pc, #44]	; (8008994 <SD_CheckStatus+0x38>)
 8008968:	2201      	movs	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800896c:	f7ff ff88 	bl	8008880 <BSP_SD_GetCardState>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d107      	bne.n	8008986 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008976:	4b07      	ldr	r3, [pc, #28]	; (8008994 <SD_CheckStatus+0x38>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	f023 0301 	bic.w	r3, r3, #1
 8008980:	b2da      	uxtb	r2, r3
 8008982:	4b04      	ldr	r3, [pc, #16]	; (8008994 <SD_CheckStatus+0x38>)
 8008984:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008986:	4b03      	ldr	r3, [pc, #12]	; (8008994 <SD_CheckStatus+0x38>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b2db      	uxtb	r3, r3
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20000009 	.word	0x20000009

08008998 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <SD_initialize+0x7c>)
 80089a4:	2201      	movs	r2, #1
 80089a6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80089a8:	f002 f978 	bl	800ac9c <osKernelGetState>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d129      	bne.n	8008a06 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80089b2:	f7ff ff0b 	bl	80087cc <BSP_SD_Init>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d107      	bne.n	80089cc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	4618      	mov	r0, r3
 80089c0:	f7ff ffcc 	bl	800895c <SD_CheckStatus>
 80089c4:	4603      	mov	r3, r0
 80089c6:	461a      	mov	r2, r3
 80089c8:	4b12      	ldr	r3, [pc, #72]	; (8008a14 <SD_initialize+0x7c>)
 80089ca:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 80089cc:	4b11      	ldr	r3, [pc, #68]	; (8008a14 <SD_initialize+0x7c>)
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d017      	beq.n	8008a06 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 80089d6:	4b10      	ldr	r3, [pc, #64]	; (8008a18 <SD_initialize+0x80>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d107      	bne.n	80089ee <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80089de:	2200      	movs	r2, #0
 80089e0:	2102      	movs	r1, #2
 80089e2:	200a      	movs	r0, #10
 80089e4:	f002 fa64 	bl	800aeb0 <osMessageQueueNew>
 80089e8:	4603      	mov	r3, r0
 80089ea:	4a0b      	ldr	r2, [pc, #44]	; (8008a18 <SD_initialize+0x80>)
 80089ec:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80089ee:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <SD_initialize+0x80>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d107      	bne.n	8008a06 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80089f6:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <SD_initialize+0x7c>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	f043 0301 	orr.w	r3, r3, #1
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	4b04      	ldr	r3, [pc, #16]	; (8008a14 <SD_initialize+0x7c>)
 8008a04:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008a06:	4b03      	ldr	r3, [pc, #12]	; (8008a14 <SD_initialize+0x7c>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b2db      	uxtb	r3, r3
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	20000009 	.word	0x20000009
 8008a18:	2000051c 	.word	0x2000051c

08008a1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff ff97 	bl	800895c <SD_CheckStatus>
 8008a2e:	4603      	mov	r3, r0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b088      	sub	sp, #32
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	603b      	str	r3, [r7, #0]
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008a4c:	f247 5030 	movw	r0, #30000	; 0x7530
 8008a50:	f7ff ff66 	bl	8008920 <SD_CheckStatusWithTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	da01      	bge.n	8008a5e <SD_read+0x26>
  {
    return res;
 8008a5a:	7ffb      	ldrb	r3, [r7, #31]
 8008a5c:	e02f      	b.n	8008abe <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	6879      	ldr	r1, [r7, #4]
 8008a62:	68b8      	ldr	r0, [r7, #8]
 8008a64:	f7ff fed8 	bl	8008818 <BSP_SD_ReadBlocks_DMA>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8008a6c:	7fbb      	ldrb	r3, [r7, #30]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d124      	bne.n	8008abc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008a72:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <SD_read+0x90>)
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	f107 0112 	add.w	r1, r7, #18
 8008a7a:	f247 5330 	movw	r3, #30000	; 0x7530
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f002 faea 	bl	800b058 <osMessageQueueGet>
 8008a84:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d117      	bne.n	8008abc <SD_read+0x84>
 8008a8c:	8a7b      	ldrh	r3, [r7, #18]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d114      	bne.n	8008abc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8008a92:	f002 f94b 	bl	800ad2c <osKernelGetTickCount>
 8008a96:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008a98:	e007      	b.n	8008aaa <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008a9a:	f7ff fef1 	bl	8008880 <BSP_SD_GetCardState>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d102      	bne.n	8008aaa <SD_read+0x72>
              {
                res = RES_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8008aa8:	e008      	b.n	8008abc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008aaa:	f002 f93f 	bl	800ad2c <osKernelGetTickCount>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	f247 522f 	movw	r2, #29999	; 0x752f
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d9ee      	bls.n	8008a9a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008abc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3720      	adds	r7, #32
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	2000051c 	.word	0x2000051c

08008acc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b088      	sub	sp, #32
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	607a      	str	r2, [r7, #4]
 8008ad6:	603b      	str	r3, [r7, #0]
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008ae0:	f247 5030 	movw	r0, #30000	; 0x7530
 8008ae4:	f7ff ff1c 	bl	8008920 <SD_CheckStatusWithTimeout>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	da01      	bge.n	8008af2 <SD_write+0x26>
  {
    return res;
 8008aee:	7ffb      	ldrb	r3, [r7, #31]
 8008af0:	e02d      	b.n	8008b4e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008af2:	683a      	ldr	r2, [r7, #0]
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	68b8      	ldr	r0, [r7, #8]
 8008af8:	f7ff fea8 	bl	800884c <BSP_SD_WriteBlocks_DMA>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d124      	bne.n	8008b4c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008b02:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <SD_write+0x8c>)
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	f107 0112 	add.w	r1, r7, #18
 8008b0a:	f247 5330 	movw	r3, #30000	; 0x7530
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f002 faa2 	bl	800b058 <osMessageQueueGet>
 8008b14:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d117      	bne.n	8008b4c <SD_write+0x80>
 8008b1c:	8a7b      	ldrh	r3, [r7, #18]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d114      	bne.n	8008b4c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8008b22:	f002 f903 	bl	800ad2c <osKernelGetTickCount>
 8008b26:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8008b28:	e007      	b.n	8008b3a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008b2a:	f7ff fea9 	bl	8008880 <BSP_SD_GetCardState>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <SD_write+0x6e>
          {
            res = RES_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	77fb      	strb	r3, [r7, #31]
            break;
 8008b38:	e008      	b.n	8008b4c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8008b3a:	f002 f8f7 	bl	800ad2c <osKernelGetTickCount>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	f247 522f 	movw	r2, #29999	; 0x752f
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d9ee      	bls.n	8008b2a <SD_write+0x5e>
    }

  }
#endif

  return res;
 8008b4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3720      	adds	r7, #32
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	2000051c 	.word	0x2000051c

08008b5c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08c      	sub	sp, #48	; 0x30
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	603a      	str	r2, [r7, #0]
 8008b66:	71fb      	strb	r3, [r7, #7]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008b72:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <SD_ioctl+0xac>)
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <SD_ioctl+0x28>
 8008b80:	2303      	movs	r3, #3
 8008b82:	e03c      	b.n	8008bfe <SD_ioctl+0xa2>

  switch (cmd)
 8008b84:	79bb      	ldrb	r3, [r7, #6]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d834      	bhi.n	8008bf4 <SD_ioctl+0x98>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <SD_ioctl+0x34>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008ba1 	.word	0x08008ba1
 8008b94:	08008ba9 	.word	0x08008ba9
 8008b98:	08008bc1 	.word	0x08008bc1
 8008b9c:	08008bdb 	.word	0x08008bdb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008ba6:	e028      	b.n	8008bfa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008ba8:	f107 030c 	add.w	r3, r7, #12
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff fe77 	bl	80088a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008bbe:	e01c      	b.n	8008bfa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008bc0:	f107 030c 	add.w	r3, r7, #12
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff fe6b 	bl	80088a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008bd8:	e00f      	b.n	8008bfa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008bda:	f107 030c 	add.w	r3, r7, #12
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff fe5e 	bl	80088a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	0a5a      	lsrs	r2, r3, #9
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008bf2:	e002      	b.n	8008bfa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3730      	adds	r7, #48	; 0x30
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20000009 	.word	0x20000009

08008c0c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8008c12:	2301      	movs	r3, #1
 8008c14:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8008c16:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <BSP_SD_ReadCpltCallback+0x20>)
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	1db9      	adds	r1, r7, #6
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f002 f9ba 	bl	800af98 <osMessageQueuePut>
#endif
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	2000051c 	.word	0x2000051c

08008c30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008c3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008c40:	f005 fc3e 	bl	800e4c0 <USBD_static_malloc>
 8008c44:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d109      	bne.n	8008c60 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	32b0      	adds	r2, #176	; 0xb0
 8008c56:	2100      	movs	r1, #0
 8008c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e0d4      	b.n	8008e0a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008c60:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008c64:	2100      	movs	r1, #0
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f005 fca0 	bl	800e5ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	32b0      	adds	r2, #176	; 0xb0
 8008c76:	68f9      	ldr	r1, [r7, #12]
 8008c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	32b0      	adds	r2, #176	; 0xb0
 8008c86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	7c1b      	ldrb	r3, [r3, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d138      	bne.n	8008d0a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008c98:	4b5e      	ldr	r3, [pc, #376]	; (8008e14 <USBD_CDC_Init+0x1e4>)
 8008c9a:	7819      	ldrb	r1, [r3, #0]
 8008c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f005 fae9 	bl	800e27a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ca8:	4b5a      	ldr	r3, [pc, #360]	; (8008e14 <USBD_CDC_Init+0x1e4>)
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 020f 	and.w	r2, r3, #15
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	3324      	adds	r3, #36	; 0x24
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008cc2:	4b55      	ldr	r3, [pc, #340]	; (8008e18 <USBD_CDC_Init+0x1e8>)
 8008cc4:	7819      	ldrb	r1, [r3, #0]
 8008cc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cca:	2202      	movs	r2, #2
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f005 fad4 	bl	800e27a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008cd2:	4b51      	ldr	r3, [pc, #324]	; (8008e18 <USBD_CDC_Init+0x1e8>)
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	f003 020f 	and.w	r2, r3, #15
 8008cda:	6879      	ldr	r1, [r7, #4]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008cea:	2201      	movs	r2, #1
 8008cec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008cee:	4b4b      	ldr	r3, [pc, #300]	; (8008e1c <USBD_CDC_Init+0x1ec>)
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	f003 020f 	and.w	r2, r3, #15
 8008cf6:	6879      	ldr	r1, [r7, #4]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	440b      	add	r3, r1
 8008d02:	3326      	adds	r3, #38	; 0x26
 8008d04:	2210      	movs	r2, #16
 8008d06:	801a      	strh	r2, [r3, #0]
 8008d08:	e035      	b.n	8008d76 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008d0a:	4b42      	ldr	r3, [pc, #264]	; (8008e14 <USBD_CDC_Init+0x1e4>)
 8008d0c:	7819      	ldrb	r1, [r3, #0]
 8008d0e:	2340      	movs	r3, #64	; 0x40
 8008d10:	2202      	movs	r2, #2
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f005 fab1 	bl	800e27a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008d18:	4b3e      	ldr	r3, [pc, #248]	; (8008e14 <USBD_CDC_Init+0x1e4>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	f003 020f 	and.w	r2, r3, #15
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	3324      	adds	r3, #36	; 0x24
 8008d2e:	2201      	movs	r2, #1
 8008d30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008d32:	4b39      	ldr	r3, [pc, #228]	; (8008e18 <USBD_CDC_Init+0x1e8>)
 8008d34:	7819      	ldrb	r1, [r3, #0]
 8008d36:	2340      	movs	r3, #64	; 0x40
 8008d38:	2202      	movs	r2, #2
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f005 fa9d 	bl	800e27a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008d40:	4b35      	ldr	r3, [pc, #212]	; (8008e18 <USBD_CDC_Init+0x1e8>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 020f 	and.w	r2, r3, #15
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d58:	2201      	movs	r2, #1
 8008d5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008d5c:	4b2f      	ldr	r3, [pc, #188]	; (8008e1c <USBD_CDC_Init+0x1ec>)
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f003 020f 	and.w	r2, r3, #15
 8008d64:	6879      	ldr	r1, [r7, #4]
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	440b      	add	r3, r1
 8008d70:	3326      	adds	r3, #38	; 0x26
 8008d72:	2210      	movs	r2, #16
 8008d74:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d76:	4b29      	ldr	r3, [pc, #164]	; (8008e1c <USBD_CDC_Init+0x1ec>)
 8008d78:	7819      	ldrb	r1, [r3, #0]
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	2203      	movs	r2, #3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f005 fa7b 	bl	800e27a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008d84:	4b25      	ldr	r3, [pc, #148]	; (8008e1c <USBD_CDC_Init+0x1ec>)
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f003 020f 	and.w	r2, r3, #15
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	3324      	adds	r3, #36	; 0x24
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	33b0      	adds	r3, #176	; 0xb0
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e018      	b.n	8008e0a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	7c1b      	ldrb	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008de0:	4b0d      	ldr	r3, [pc, #52]	; (8008e18 <USBD_CDC_Init+0x1e8>)
 8008de2:	7819      	ldrb	r1, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f005 fb32 	bl	800e458 <USBD_LL_PrepareReceive>
 8008df4:	e008      	b.n	8008e08 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008df6:	4b08      	ldr	r3, [pc, #32]	; (8008e18 <USBD_CDC_Init+0x1e8>)
 8008df8:	7819      	ldrb	r1, [r3, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e00:	2340      	movs	r3, #64	; 0x40
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f005 fb28 	bl	800e458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20000093 	.word	0x20000093
 8008e18:	20000094 	.word	0x20000094
 8008e1c:	20000095 	.word	0x20000095

08008e20 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	460b      	mov	r3, r1
 8008e2a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008e2c:	4b3a      	ldr	r3, [pc, #232]	; (8008f18 <USBD_CDC_DeInit+0xf8>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f005 fa47 	bl	800e2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008e38:	4b37      	ldr	r3, [pc, #220]	; (8008f18 <USBD_CDC_DeInit+0xf8>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	f003 020f 	and.w	r2, r3, #15
 8008e40:	6879      	ldr	r1, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3324      	adds	r3, #36	; 0x24
 8008e4e:	2200      	movs	r2, #0
 8008e50:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008e52:	4b32      	ldr	r3, [pc, #200]	; (8008f1c <USBD_CDC_DeInit+0xfc>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f005 fa34 	bl	800e2c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008e5e:	4b2f      	ldr	r3, [pc, #188]	; (8008f1c <USBD_CDC_DeInit+0xfc>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f003 020f 	and.w	r2, r3, #15
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e76:	2200      	movs	r2, #0
 8008e78:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008e7a:	4b29      	ldr	r3, [pc, #164]	; (8008f20 <USBD_CDC_DeInit+0x100>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f005 fa20 	bl	800e2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008e86:	4b26      	ldr	r3, [pc, #152]	; (8008f20 <USBD_CDC_DeInit+0x100>)
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	f003 020f 	and.w	r2, r3, #15
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	4613      	mov	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	3324      	adds	r3, #36	; 0x24
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008ea0:	4b1f      	ldr	r3, [pc, #124]	; (8008f20 <USBD_CDC_DeInit+0x100>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	f003 020f 	and.w	r2, r3, #15
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	3326      	adds	r3, #38	; 0x26
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	32b0      	adds	r2, #176	; 0xb0
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01f      	beq.n	8008f0c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	33b0      	adds	r3, #176	; 0xb0
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	32b0      	adds	r2, #176	; 0xb0
 8008eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f005 faf4 	bl	800e4dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	32b0      	adds	r2, #176	; 0xb0
 8008efe:	2100      	movs	r1, #0
 8008f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20000093 	.word	0x20000093
 8008f1c:	20000094 	.word	0x20000094
 8008f20:	20000095 	.word	0x20000095

08008f24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	32b0      	adds	r2, #176	; 0xb0
 8008f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e0bf      	b.n	80090d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d050      	beq.n	8009002 <USBD_CDC_Setup+0xde>
 8008f60:	2b20      	cmp	r3, #32
 8008f62:	f040 80af 	bne.w	80090c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	88db      	ldrh	r3, [r3, #6]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d03a      	beq.n	8008fe4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	781b      	ldrb	r3, [r3, #0]
 8008f72:	b25b      	sxtb	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da1b      	bge.n	8008fb0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	33b0      	adds	r3, #176	; 0xb0
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	4413      	add	r3, r2
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008f8e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	88d2      	ldrh	r2, [r2, #6]
 8008f94:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	88db      	ldrh	r3, [r3, #6]
 8008f9a:	2b07      	cmp	r3, #7
 8008f9c:	bf28      	it	cs
 8008f9e:	2307      	movcs	r3, #7
 8008fa0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	89fa      	ldrh	r2, [r7, #14]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 fd43 	bl	800aa34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008fae:	e090      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	785a      	ldrb	r2, [r3, #1]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	88db      	ldrh	r3, [r3, #6]
 8008fbe:	2b3f      	cmp	r3, #63	; 0x3f
 8008fc0:	d803      	bhi.n	8008fca <USBD_CDC_Setup+0xa6>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	88db      	ldrh	r3, [r3, #6]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	e000      	b.n	8008fcc <USBD_CDC_Setup+0xa8>
 8008fca:	2240      	movs	r2, #64	; 0x40
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008fd2:	6939      	ldr	r1, [r7, #16]
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008fda:	461a      	mov	r2, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 fd55 	bl	800aa8c <USBD_CtlPrepareRx>
      break;
 8008fe2:	e076      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	33b0      	adds	r3, #176	; 0xb0
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	7850      	ldrb	r0, [r2, #1]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	4798      	blx	r3
      break;
 8009000:	e067      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	785b      	ldrb	r3, [r3, #1]
 8009006:	2b0b      	cmp	r3, #11
 8009008:	d851      	bhi.n	80090ae <USBD_CDC_Setup+0x18a>
 800900a:	a201      	add	r2, pc, #4	; (adr r2, 8009010 <USBD_CDC_Setup+0xec>)
 800900c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009010:	08009041 	.word	0x08009041
 8009014:	080090bd 	.word	0x080090bd
 8009018:	080090af 	.word	0x080090af
 800901c:	080090af 	.word	0x080090af
 8009020:	080090af 	.word	0x080090af
 8009024:	080090af 	.word	0x080090af
 8009028:	080090af 	.word	0x080090af
 800902c:	080090af 	.word	0x080090af
 8009030:	080090af 	.word	0x080090af
 8009034:	080090af 	.word	0x080090af
 8009038:	0800906b 	.word	0x0800906b
 800903c:	08009095 	.word	0x08009095
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009046:	b2db      	uxtb	r3, r3
 8009048:	2b03      	cmp	r3, #3
 800904a:	d107      	bne.n	800905c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800904c:	f107 030a 	add.w	r3, r7, #10
 8009050:	2202      	movs	r2, #2
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 fced 	bl	800aa34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800905a:	e032      	b.n	80090c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f001 fc77 	bl	800a952 <USBD_CtlError>
            ret = USBD_FAIL;
 8009064:	2303      	movs	r3, #3
 8009066:	75fb      	strb	r3, [r7, #23]
          break;
 8009068:	e02b      	b.n	80090c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b03      	cmp	r3, #3
 8009074:	d107      	bne.n	8009086 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009076:	f107 030d 	add.w	r3, r7, #13
 800907a:	2201      	movs	r2, #1
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f001 fcd8 	bl	800aa34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009084:	e01d      	b.n	80090c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009086:	6839      	ldr	r1, [r7, #0]
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 fc62 	bl	800a952 <USBD_CtlError>
            ret = USBD_FAIL;
 800908e:	2303      	movs	r3, #3
 8009090:	75fb      	strb	r3, [r7, #23]
          break;
 8009092:	e016      	b.n	80090c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b03      	cmp	r3, #3
 800909e:	d00f      	beq.n	80090c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f001 fc55 	bl	800a952 <USBD_CtlError>
            ret = USBD_FAIL;
 80090a8:	2303      	movs	r3, #3
 80090aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80090ac:	e008      	b.n	80090c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80090ae:	6839      	ldr	r1, [r7, #0]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 fc4e 	bl	800a952 <USBD_CtlError>
          ret = USBD_FAIL;
 80090b6:	2303      	movs	r3, #3
 80090b8:	75fb      	strb	r3, [r7, #23]
          break;
 80090ba:	e002      	b.n	80090c2 <USBD_CDC_Setup+0x19e>
          break;
 80090bc:	bf00      	nop
 80090be:	e008      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>
          break;
 80090c0:	bf00      	nop
      }
      break;
 80090c2:	e006      	b.n	80090d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 fc43 	bl	800a952 <USBD_CtlError>
      ret = USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	75fb      	strb	r3, [r7, #23]
      break;
 80090d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	32b0      	adds	r2, #176	; 0xb0
 80090fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d101      	bne.n	8009106 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009102:	2303      	movs	r3, #3
 8009104:	e065      	b.n	80091d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	32b0      	adds	r2, #176	; 0xb0
 8009110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009114:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	f003 020f 	and.w	r2, r3, #15
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	440b      	add	r3, r1
 8009128:	3318      	adds	r3, #24
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d02f      	beq.n	8009190 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	f003 020f 	and.w	r2, r3, #15
 8009136:	6879      	ldr	r1, [r7, #4]
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	440b      	add	r3, r1
 8009142:	3318      	adds	r3, #24
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	f003 010f 	and.w	r1, r3, #15
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	460b      	mov	r3, r1
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	440b      	add	r3, r1
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4403      	add	r3, r0
 8009158:	3348      	adds	r3, #72	; 0x48
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009160:	fb01 f303 	mul.w	r3, r1, r3
 8009164:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009166:	2b00      	cmp	r3, #0
 8009168:	d112      	bne.n	8009190 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	f003 020f 	and.w	r2, r3, #15
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	440b      	add	r3, r1
 800917c:	3318      	adds	r3, #24
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009182:	78f9      	ldrb	r1, [r7, #3]
 8009184:	2300      	movs	r3, #0
 8009186:	2200      	movs	r2, #0
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f005 f944 	bl	800e416 <USBD_LL_Transmit>
 800918e:	e01f      	b.n	80091d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	33b0      	adds	r3, #176	; 0xb0
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	4413      	add	r3, r2
 80091a6:	685b      	ldr	r3, [r3, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d010      	beq.n	80091d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	33b0      	adds	r3, #176	; 0xb0
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4413      	add	r3, r2
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80091c6:	68ba      	ldr	r2, [r7, #8]
 80091c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
 80091e2:	460b      	mov	r3, r1
 80091e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	32b0      	adds	r2, #176	; 0xb0
 80091f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	32b0      	adds	r2, #176	; 0xb0
 8009200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009208:	2303      	movs	r3, #3
 800920a:	e01a      	b.n	8009242 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f005 f942 	bl	800e49a <USBD_LL_GetRxDataSize>
 8009216:	4602      	mov	r2, r0
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	33b0      	adds	r3, #176	; 0xb0
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800923c:	4611      	mov	r1, r2
 800923e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b084      	sub	sp, #16
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	32b0      	adds	r2, #176	; 0xb0
 800925c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009260:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d101      	bne.n	800926c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	e025      	b.n	80092b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	33b0      	adds	r3, #176	; 0xb0
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d01a      	beq.n	80092b6 <USBD_CDC_EP0_RxReady+0x6c>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009286:	2bff      	cmp	r3, #255	; 0xff
 8009288:	d015      	beq.n	80092b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	33b0      	adds	r3, #176	; 0xb0
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80092a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80092a4:	68fa      	ldr	r2, [r7, #12]
 80092a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80092aa:	b292      	uxth	r2, r2
 80092ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	22ff      	movs	r2, #255	; 0xff
 80092b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80092c8:	2182      	movs	r1, #130	; 0x82
 80092ca:	4818      	ldr	r0, [pc, #96]	; (800932c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092cc:	f000 fd09 	bl	8009ce2 <USBD_GetEpDesc>
 80092d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80092d2:	2101      	movs	r1, #1
 80092d4:	4815      	ldr	r0, [pc, #84]	; (800932c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092d6:	f000 fd04 	bl	8009ce2 <USBD_GetEpDesc>
 80092da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80092dc:	2181      	movs	r1, #129	; 0x81
 80092de:	4813      	ldr	r0, [pc, #76]	; (800932c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80092e0:	f000 fcff 	bl	8009ce2 <USBD_GetEpDesc>
 80092e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2210      	movs	r2, #16
 80092f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d006      	beq.n	8009306 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009300:	711a      	strb	r2, [r3, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d006      	beq.n	800931a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009314:	711a      	strb	r2, [r3, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2243      	movs	r2, #67	; 0x43
 800931e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009322:	4618      	mov	r0, r3
 8009324:	3718      	adds	r7, #24
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000050 	.word	0x20000050

08009330 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009338:	2182      	movs	r1, #130	; 0x82
 800933a:	4818      	ldr	r0, [pc, #96]	; (800939c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800933c:	f000 fcd1 	bl	8009ce2 <USBD_GetEpDesc>
 8009340:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009342:	2101      	movs	r1, #1
 8009344:	4815      	ldr	r0, [pc, #84]	; (800939c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009346:	f000 fccc 	bl	8009ce2 <USBD_GetEpDesc>
 800934a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800934c:	2181      	movs	r1, #129	; 0x81
 800934e:	4813      	ldr	r0, [pc, #76]	; (800939c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009350:	f000 fcc7 	bl	8009ce2 <USBD_GetEpDesc>
 8009354:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	2210      	movs	r2, #16
 8009360:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d006      	beq.n	8009376 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2200      	movs	r2, #0
 800936c:	711a      	strb	r2, [r3, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f042 0202 	orr.w	r2, r2, #2
 8009374:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d006      	beq.n	800938a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	711a      	strb	r2, [r3, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f042 0202 	orr.w	r2, r2, #2
 8009388:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2243      	movs	r2, #67	; 0x43
 800938e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009390:	4b02      	ldr	r3, [pc, #8]	; (800939c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009392:	4618      	mov	r0, r3
 8009394:	3718      	adds	r7, #24
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20000050 	.word	0x20000050

080093a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b086      	sub	sp, #24
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80093a8:	2182      	movs	r1, #130	; 0x82
 80093aa:	4818      	ldr	r0, [pc, #96]	; (800940c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093ac:	f000 fc99 	bl	8009ce2 <USBD_GetEpDesc>
 80093b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80093b2:	2101      	movs	r1, #1
 80093b4:	4815      	ldr	r0, [pc, #84]	; (800940c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093b6:	f000 fc94 	bl	8009ce2 <USBD_GetEpDesc>
 80093ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80093bc:	2181      	movs	r1, #129	; 0x81
 80093be:	4813      	ldr	r0, [pc, #76]	; (800940c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80093c0:	f000 fc8f 	bl	8009ce2 <USBD_GetEpDesc>
 80093c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	2210      	movs	r2, #16
 80093d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d006      	beq.n	80093e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	2200      	movs	r2, #0
 80093dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093e0:	711a      	strb	r2, [r3, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d006      	beq.n	80093fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093f4:	711a      	strb	r2, [r3, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2243      	movs	r2, #67	; 0x43
 80093fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000050 	.word	0x20000050

08009410 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	220a      	movs	r2, #10
 800941c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800941e:	4b03      	ldr	r3, [pc, #12]	; (800942c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009420:	4618      	mov	r0, r3
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	2000000c 	.word	0x2000000c

08009430 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009440:	2303      	movs	r3, #3
 8009442:	e009      	b.n	8009458 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	33b0      	adds	r3, #176	; 0xb0
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	32b0      	adds	r2, #176	; 0xb0
 800947a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009486:	2303      	movs	r3, #3
 8009488:	e008      	b.n	800949c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	32b0      	adds	r2, #176	; 0xb0
 80094bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e004      	b.n	80094d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	32b0      	adds	r2, #176	; 0xb0
 80094f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	32b0      	adds	r2, #176	; 0xb0
 8009506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800950e:	2303      	movs	r3, #3
 8009510:	e018      	b.n	8009544 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	7c1b      	ldrb	r3, [r3, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10a      	bne.n	8009530 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800951a:	4b0c      	ldr	r3, [pc, #48]	; (800954c <USBD_CDC_ReceivePacket+0x68>)
 800951c:	7819      	ldrb	r1, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f004 ff95 	bl	800e458 <USBD_LL_PrepareReceive>
 800952e:	e008      	b.n	8009542 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009530:	4b06      	ldr	r3, [pc, #24]	; (800954c <USBD_CDC_ReceivePacket+0x68>)
 8009532:	7819      	ldrb	r1, [r3, #0]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800953a:	2340      	movs	r3, #64	; 0x40
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f004 ff8b 	bl	800e458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	20000094 	.word	0x20000094

08009550 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d101      	bne.n	8009568 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009564:	2303      	movs	r3, #3
 8009566:	e01f      	b.n	80095a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	2200      	movs	r2, #0
 8009574:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d003      	beq.n	800958e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	79fa      	ldrb	r2, [r7, #7]
 800959a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f004 fdff 	bl	800e1a0 <USBD_LL_Init>
 80095a2:	4603      	mov	r3, r0
 80095a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80095a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3718      	adds	r7, #24
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e025      	b.n	8009614 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	32ae      	adds	r2, #174	; 0xae
 80095da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00f      	beq.n	8009604 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	32ae      	adds	r2, #174	; 0xae
 80095ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	f107 020e 	add.w	r2, r7, #14
 80095f8:	4610      	mov	r0, r2
 80095fa:	4798      	blx	r3
 80095fc:	4602      	mov	r2, r0
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800960a:	1c5a      	adds	r2, r3, #1
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3710      	adds	r7, #16
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f004 fe0d 	bl	800e244 <USBD_LL_Start>
 800962a:	4603      	mov	r3, r0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800963c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800963e:	4618      	mov	r0, r3
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr

0800964a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b084      	sub	sp, #16
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
 8009652:	460b      	mov	r3, r1
 8009654:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009660:	2b00      	cmp	r3, #0
 8009662:	d009      	beq.n	8009678 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	78fa      	ldrb	r2, [r7, #3]
 800966e:	4611      	mov	r1, r2
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	4798      	blx	r3
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b084      	sub	sp, #16
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	460b      	mov	r3, r1
 800968c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	78fa      	ldrb	r2, [r7, #3]
 800969c:	4611      	mov	r1, r2
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	4798      	blx	r3
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d001      	beq.n	80096ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80096a8:	2303      	movs	r3, #3
 80096aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f001 f908 	bl	800a8de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80096dc:	461a      	mov	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80096ea:	f003 031f 	and.w	r3, r3, #31
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d01a      	beq.n	8009728 <USBD_LL_SetupStage+0x72>
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d822      	bhi.n	800973c <USBD_LL_SetupStage+0x86>
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <USBD_LL_SetupStage+0x4a>
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d00a      	beq.n	8009714 <USBD_LL_SetupStage+0x5e>
 80096fe:	e01d      	b.n	800973c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fb5f 	bl	8009dcc <USBD_StdDevReq>
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]
      break;
 8009712:	e020      	b.n	8009756 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fbc7 	bl	8009eb0 <USBD_StdItfReq>
 8009722:	4603      	mov	r3, r0
 8009724:	73fb      	strb	r3, [r7, #15]
      break;
 8009726:	e016      	b.n	8009756 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800972e:	4619      	mov	r1, r3
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fc29 	bl	8009f88 <USBD_StdEPReq>
 8009736:	4603      	mov	r3, r0
 8009738:	73fb      	strb	r3, [r7, #15]
      break;
 800973a:	e00c      	b.n	8009756 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009742:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009746:	b2db      	uxtb	r3, r3
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f004 fdda 	bl	800e304 <USBD_LL_StallEP>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]
      break;
 8009754:	bf00      	nop
  }

  return ret;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	460b      	mov	r3, r1
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009772:	7afb      	ldrb	r3, [r7, #11]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d16e      	bne.n	8009856 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800977e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009786:	2b03      	cmp	r3, #3
 8009788:	f040 8098 	bne.w	80098bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	689a      	ldr	r2, [r3, #8]
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	429a      	cmp	r2, r3
 8009796:	d913      	bls.n	80097c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	689a      	ldr	r2, [r3, #8]
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	1ad2      	subs	r2, r2, r3
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	68da      	ldr	r2, [r3, #12]
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	4293      	cmp	r3, r2
 80097b0:	bf28      	it	cs
 80097b2:	4613      	movcs	r3, r2
 80097b4:	461a      	mov	r2, r3
 80097b6:	6879      	ldr	r1, [r7, #4]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f001 f984 	bl	800aac6 <USBD_CtlContinueRx>
 80097be:	e07d      	b.n	80098bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80097c6:	f003 031f 	and.w	r3, r3, #31
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d014      	beq.n	80097f8 <USBD_LL_DataOutStage+0x98>
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d81d      	bhi.n	800980e <USBD_LL_DataOutStage+0xae>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <USBD_LL_DataOutStage+0x7c>
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d003      	beq.n	80097e2 <USBD_LL_DataOutStage+0x82>
 80097da:	e018      	b.n	800980e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80097dc:	2300      	movs	r3, #0
 80097de:	75bb      	strb	r3, [r7, #22]
            break;
 80097e0:	e018      	b.n	8009814 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	4619      	mov	r1, r3
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 fa5e 	bl	8009cae <USBD_CoreFindIF>
 80097f2:	4603      	mov	r3, r0
 80097f4:	75bb      	strb	r3, [r7, #22]
            break;
 80097f6:	e00d      	b.n	8009814 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	4619      	mov	r1, r3
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 fa60 	bl	8009cc8 <USBD_CoreFindEP>
 8009808:	4603      	mov	r3, r0
 800980a:	75bb      	strb	r3, [r7, #22]
            break;
 800980c:	e002      	b.n	8009814 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800980e:	2300      	movs	r3, #0
 8009810:	75bb      	strb	r3, [r7, #22]
            break;
 8009812:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009814:	7dbb      	ldrb	r3, [r7, #22]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d119      	bne.n	800984e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b03      	cmp	r3, #3
 8009824:	d113      	bne.n	800984e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009826:	7dba      	ldrb	r2, [r7, #22]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	32ae      	adds	r2, #174	; 0xae
 800982c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009836:	7dba      	ldrb	r2, [r7, #22]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800983e:	7dba      	ldrb	r2, [r7, #22]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	32ae      	adds	r2, #174	; 0xae
 8009844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f001 f94a 	bl	800aae8 <USBD_CtlSendStatus>
 8009854:	e032      	b.n	80098bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009856:	7afb      	ldrb	r3, [r7, #11]
 8009858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800985c:	b2db      	uxtb	r3, r3
 800985e:	4619      	mov	r1, r3
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 fa31 	bl	8009cc8 <USBD_CoreFindEP>
 8009866:	4603      	mov	r3, r0
 8009868:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800986a:	7dbb      	ldrb	r3, [r7, #22]
 800986c:	2bff      	cmp	r3, #255	; 0xff
 800986e:	d025      	beq.n	80098bc <USBD_LL_DataOutStage+0x15c>
 8009870:	7dbb      	ldrb	r3, [r7, #22]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d122      	bne.n	80098bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b03      	cmp	r3, #3
 8009880:	d117      	bne.n	80098b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009882:	7dba      	ldrb	r2, [r7, #22]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	32ae      	adds	r2, #174	; 0xae
 8009888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00f      	beq.n	80098b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009892:	7dba      	ldrb	r2, [r7, #22]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800989a:	7dba      	ldrb	r2, [r7, #22]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	32ae      	adds	r2, #174	; 0xae
 80098a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a4:	699b      	ldr	r3, [r3, #24]
 80098a6:	7afa      	ldrb	r2, [r7, #11]
 80098a8:	4611      	mov	r1, r2
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	4798      	blx	r3
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
 80098ba:	e000      	b.n	80098be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b086      	sub	sp, #24
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	60f8      	str	r0, [r7, #12]
 80098ce:	460b      	mov	r3, r1
 80098d0:	607a      	str	r2, [r7, #4]
 80098d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80098d4:	7afb      	ldrb	r3, [r7, #11]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d16f      	bne.n	80099ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3314      	adds	r3, #20
 80098de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d15a      	bne.n	80099a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	689a      	ldr	r2, [r3, #8]
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d914      	bls.n	8009920 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	689a      	ldr	r2, [r3, #8]
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	1ad2      	subs	r2, r2, r3
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	461a      	mov	r2, r3
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f001 f8ac 	bl	800aa6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009912:	2300      	movs	r3, #0
 8009914:	2200      	movs	r2, #0
 8009916:	2100      	movs	r1, #0
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f004 fd9d 	bl	800e458 <USBD_LL_PrepareReceive>
 800991e:	e03f      	b.n	80099a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	68da      	ldr	r2, [r3, #12]
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	429a      	cmp	r2, r3
 800992a:	d11c      	bne.n	8009966 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	685a      	ldr	r2, [r3, #4]
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009934:	429a      	cmp	r2, r3
 8009936:	d316      	bcc.n	8009966 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009942:	429a      	cmp	r2, r3
 8009944:	d20f      	bcs.n	8009966 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009946:	2200      	movs	r2, #0
 8009948:	2100      	movs	r1, #0
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f001 f88d 	bl	800aa6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009958:	2300      	movs	r3, #0
 800995a:	2200      	movs	r2, #0
 800995c:	2100      	movs	r1, #0
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f004 fd7a 	bl	800e458 <USBD_LL_PrepareReceive>
 8009964:	e01c      	b.n	80099a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b03      	cmp	r3, #3
 8009970:	d10f      	bne.n	8009992 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d009      	beq.n	8009992 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009992:	2180      	movs	r1, #128	; 0x80
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f004 fcb5 	bl	800e304 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f001 f8b7 	bl	800ab0e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d03a      	beq.n	8009a20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff fe42 	bl	8009634 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80099b8:	e032      	b.n	8009a20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80099ba:	7afb      	ldrb	r3, [r7, #11]
 80099bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	4619      	mov	r1, r3
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	f000 f97f 	bl	8009cc8 <USBD_CoreFindEP>
 80099ca:	4603      	mov	r3, r0
 80099cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	2bff      	cmp	r3, #255	; 0xff
 80099d2:	d025      	beq.n	8009a20 <USBD_LL_DataInStage+0x15a>
 80099d4:	7dfb      	ldrb	r3, [r7, #23]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d122      	bne.n	8009a20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b03      	cmp	r3, #3
 80099e4:	d11c      	bne.n	8009a20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80099e6:	7dfa      	ldrb	r2, [r7, #23]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	32ae      	adds	r2, #174	; 0xae
 80099ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d014      	beq.n	8009a20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80099f6:	7dfa      	ldrb	r2, [r7, #23]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80099fe:	7dfa      	ldrb	r2, [r7, #23]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	32ae      	adds	r2, #174	; 0xae
 8009a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	7afa      	ldrb	r2, [r7, #11]
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	4798      	blx	r3
 8009a12:	4603      	mov	r3, r0
 8009a14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009a16:	7dbb      	ldrb	r3, [r7, #22]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009a1c:	7dbb      	ldrb	r3, [r7, #22]
 8009a1e:	e000      	b.n	8009a22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3718      	adds	r7, #24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d014      	beq.n	8009a90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00e      	beq.n	8009a90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	6852      	ldr	r2, [r2, #4]
 8009a7e:	b2d2      	uxtb	r2, r2
 8009a80:	4611      	mov	r1, r2
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	4798      	blx	r3
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	2200      	movs	r2, #0
 8009a94:	2100      	movs	r1, #0
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f004 fbef 	bl	800e27a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2240      	movs	r2, #64	; 0x40
 8009aa8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009aac:	2340      	movs	r3, #64	; 0x40
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2180      	movs	r1, #128	; 0x80
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f004 fbe1 	bl	800e27a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2240      	movs	r2, #64	; 0x40
 8009ac2:	621a      	str	r2, [r3, #32]

  return ret;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	78fa      	ldrb	r2, [r7, #3]
 8009ade:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b083      	sub	sp, #12
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2204      	movs	r2, #4
 8009b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr

08009b1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b1a:	b480      	push	{r7}
 8009b1c:	b083      	sub	sp, #12
 8009b1e:	af00      	add	r7, sp, #0
 8009b20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b04      	cmp	r3, #4
 8009b2c:	d106      	bne.n	8009b3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009b34:	b2da      	uxtb	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b4a:	b580      	push	{r7, lr}
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d110      	bne.n	8009b80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b6e:	69db      	ldr	r3, [r3, #28]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b7a:	69db      	ldr	r3, [r3, #28]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	32ae      	adds	r2, #174	; 0xae
 8009ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e01c      	b.n	8009be6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d115      	bne.n	8009be4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	32ae      	adds	r2, #174	; 0xae
 8009bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00b      	beq.n	8009be4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	32ae      	adds	r2, #174	; 0xae
 8009bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	78fa      	ldrb	r2, [r7, #3]
 8009bde:	4611      	mov	r1, r2
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	32ae      	adds	r2, #174	; 0xae
 8009c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e01c      	b.n	8009c4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b03      	cmp	r3, #3
 8009c1a:	d115      	bne.n	8009c48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	32ae      	adds	r2, #174	; 0xae
 8009c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00b      	beq.n	8009c48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	32ae      	adds	r2, #174	; 0xae
 8009c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c40:	78fa      	ldrb	r2, [r7, #3]
 8009c42:	4611      	mov	r1, r2
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3708      	adds	r7, #8
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b083      	sub	sp, #12
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00e      	beq.n	8009ca4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6852      	ldr	r2, [r2, #4]
 8009c92:	b2d2      	uxtb	r2, r2
 8009c94:	4611      	mov	r1, r2
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	4798      	blx	r3
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009ca0:	2303      	movs	r3, #3
 8009ca2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009cd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b086      	sub	sp, #24
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	885b      	ldrh	r3, [r3, #2]
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d920      	bls.n	8009d4c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009d12:	e013      	b.n	8009d3c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009d14:	f107 030a 	add.w	r3, r7, #10
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6978      	ldr	r0, [r7, #20]
 8009d1c:	f000 f81b 	bl	8009d56 <USBD_GetNextDesc>
 8009d20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	d108      	bne.n	8009d3c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	789b      	ldrb	r3, [r3, #2]
 8009d32:	78fa      	ldrb	r2, [r7, #3]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d008      	beq.n	8009d4a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	885b      	ldrh	r3, [r3, #2]
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	897b      	ldrh	r3, [r7, #10]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d8e5      	bhi.n	8009d14 <USBD_GetEpDesc+0x32>
 8009d48:	e000      	b.n	8009d4c <USBD_GetEpDesc+0x6a>
          break;
 8009d4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009d4c:	693b      	ldr	r3, [r7, #16]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b085      	sub	sp, #20
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	881a      	ldrh	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	4413      	add	r3, r2
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4413      	add	r3, r2
 8009d80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d82:	68fb      	ldr	r3, [r7, #12]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b087      	sub	sp, #28
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	3301      	adds	r3, #1
 8009da6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009dae:	8a3b      	ldrh	r3, [r7, #16]
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	b21a      	sxth	r2, r3
 8009db4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	b21b      	sxth	r3, r3
 8009dbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009dbe:	89fb      	ldrh	r3, [r7, #14]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	371c      	adds	r7, #28
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009de2:	2b40      	cmp	r3, #64	; 0x40
 8009de4:	d005      	beq.n	8009df2 <USBD_StdDevReq+0x26>
 8009de6:	2b40      	cmp	r3, #64	; 0x40
 8009de8:	d857      	bhi.n	8009e9a <USBD_StdDevReq+0xce>
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00f      	beq.n	8009e0e <USBD_StdDevReq+0x42>
 8009dee:	2b20      	cmp	r3, #32
 8009df0:	d153      	bne.n	8009e9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	32ae      	adds	r2, #174	; 0xae
 8009dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	4798      	blx	r3
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0c:	e04a      	b.n	8009ea4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	785b      	ldrb	r3, [r3, #1]
 8009e12:	2b09      	cmp	r3, #9
 8009e14:	d83b      	bhi.n	8009e8e <USBD_StdDevReq+0xc2>
 8009e16:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <USBD_StdDevReq+0x50>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e71 	.word	0x08009e71
 8009e20:	08009e85 	.word	0x08009e85
 8009e24:	08009e8f 	.word	0x08009e8f
 8009e28:	08009e7b 	.word	0x08009e7b
 8009e2c:	08009e8f 	.word	0x08009e8f
 8009e30:	08009e4f 	.word	0x08009e4f
 8009e34:	08009e45 	.word	0x08009e45
 8009e38:	08009e8f 	.word	0x08009e8f
 8009e3c:	08009e67 	.word	0x08009e67
 8009e40:	08009e59 	.word	0x08009e59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fa3c 	bl	800a2c4 <USBD_GetDescriptor>
          break;
 8009e4c:	e024      	b.n	8009e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fba1 	bl	800a598 <USBD_SetAddress>
          break;
 8009e56:	e01f      	b.n	8009e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009e58:	6839      	ldr	r1, [r7, #0]
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fbe0 	bl	800a620 <USBD_SetConfig>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73fb      	strb	r3, [r7, #15]
          break;
 8009e64:	e018      	b.n	8009e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009e66:	6839      	ldr	r1, [r7, #0]
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fc83 	bl	800a774 <USBD_GetConfig>
          break;
 8009e6e:	e013      	b.n	8009e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009e70:	6839      	ldr	r1, [r7, #0]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 fcb4 	bl	800a7e0 <USBD_GetStatus>
          break;
 8009e78:	e00e      	b.n	8009e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fce3 	bl	800a848 <USBD_SetFeature>
          break;
 8009e82:	e009      	b.n	8009e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009e84:	6839      	ldr	r1, [r7, #0]
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fd07 	bl	800a89a <USBD_ClrFeature>
          break;
 8009e8c:	e004      	b.n	8009e98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009e8e:	6839      	ldr	r1, [r7, #0]
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 fd5e 	bl	800a952 <USBD_CtlError>
          break;
 8009e96:	bf00      	nop
      }
      break;
 8009e98:	e004      	b.n	8009ea4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fd58 	bl	800a952 <USBD_CtlError>
      break;
 8009ea2:	bf00      	nop
  }

  return ret;
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3710      	adds	r7, #16
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop

08009eb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ec6:	2b40      	cmp	r3, #64	; 0x40
 8009ec8:	d005      	beq.n	8009ed6 <USBD_StdItfReq+0x26>
 8009eca:	2b40      	cmp	r3, #64	; 0x40
 8009ecc:	d852      	bhi.n	8009f74 <USBD_StdItfReq+0xc4>
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <USBD_StdItfReq+0x26>
 8009ed2:	2b20      	cmp	r3, #32
 8009ed4:	d14e      	bne.n	8009f74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d840      	bhi.n	8009f66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	889b      	ldrh	r3, [r3, #4]
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d836      	bhi.n	8009f5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	889b      	ldrh	r3, [r3, #4]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff fed9 	bl	8009cae <USBD_CoreFindIF>
 8009efc:	4603      	mov	r3, r0
 8009efe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f00:	7bbb      	ldrb	r3, [r7, #14]
 8009f02:	2bff      	cmp	r3, #255	; 0xff
 8009f04:	d01d      	beq.n	8009f42 <USBD_StdItfReq+0x92>
 8009f06:	7bbb      	ldrb	r3, [r7, #14]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d11a      	bne.n	8009f42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009f0c:	7bba      	ldrb	r2, [r7, #14]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	32ae      	adds	r2, #174	; 0xae
 8009f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00f      	beq.n	8009f3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009f1c:	7bba      	ldrb	r2, [r7, #14]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009f24:	7bba      	ldrb	r2, [r7, #14]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	32ae      	adds	r2, #174	; 0xae
 8009f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	4798      	blx	r3
 8009f36:	4603      	mov	r3, r0
 8009f38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f3a:	e004      	b.n	8009f46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009f40:	e001      	b.n	8009f46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009f42:	2303      	movs	r3, #3
 8009f44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	88db      	ldrh	r3, [r3, #6]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d110      	bne.n	8009f70 <USBD_StdItfReq+0xc0>
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10d      	bne.n	8009f70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fdc7 	bl	800aae8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009f5a:	e009      	b.n	8009f70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009f5c:	6839      	ldr	r1, [r7, #0]
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 fcf7 	bl	800a952 <USBD_CtlError>
          break;
 8009f64:	e004      	b.n	8009f70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fcf2 	bl	800a952 <USBD_CtlError>
          break;
 8009f6e:	e000      	b.n	8009f72 <USBD_StdItfReq+0xc2>
          break;
 8009f70:	bf00      	nop
      }
      break;
 8009f72:	e004      	b.n	8009f7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fceb 	bl	800a952 <USBD_CtlError>
      break;
 8009f7c:	bf00      	nop
  }

  return ret;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b084      	sub	sp, #16
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	889b      	ldrh	r3, [r3, #4]
 8009f9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fa4:	2b40      	cmp	r3, #64	; 0x40
 8009fa6:	d007      	beq.n	8009fb8 <USBD_StdEPReq+0x30>
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	f200 817f 	bhi.w	800a2ac <USBD_StdEPReq+0x324>
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d02a      	beq.n	800a008 <USBD_StdEPReq+0x80>
 8009fb2:	2b20      	cmp	r3, #32
 8009fb4:	f040 817a 	bne.w	800a2ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f7ff fe83 	bl	8009cc8 <USBD_CoreFindEP>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fc6:	7b7b      	ldrb	r3, [r7, #13]
 8009fc8:	2bff      	cmp	r3, #255	; 0xff
 8009fca:	f000 8174 	beq.w	800a2b6 <USBD_StdEPReq+0x32e>
 8009fce:	7b7b      	ldrb	r3, [r7, #13]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f040 8170 	bne.w	800a2b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009fd6:	7b7a      	ldrb	r2, [r7, #13]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009fde:	7b7a      	ldrb	r2, [r7, #13]
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	32ae      	adds	r2, #174	; 0xae
 8009fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	f000 8163 	beq.w	800a2b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ff0:	7b7a      	ldrb	r2, [r7, #13]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	32ae      	adds	r2, #174	; 0xae
 8009ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	4798      	blx	r3
 800a002:	4603      	mov	r3, r0
 800a004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a006:	e156      	b.n	800a2b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	785b      	ldrb	r3, [r3, #1]
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d008      	beq.n	800a022 <USBD_StdEPReq+0x9a>
 800a010:	2b03      	cmp	r3, #3
 800a012:	f300 8145 	bgt.w	800a2a0 <USBD_StdEPReq+0x318>
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 809b 	beq.w	800a152 <USBD_StdEPReq+0x1ca>
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d03c      	beq.n	800a09a <USBD_StdEPReq+0x112>
 800a020:	e13e      	b.n	800a2a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d002      	beq.n	800a034 <USBD_StdEPReq+0xac>
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d016      	beq.n	800a060 <USBD_StdEPReq+0xd8>
 800a032:	e02c      	b.n	800a08e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a034:	7bbb      	ldrb	r3, [r7, #14]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00d      	beq.n	800a056 <USBD_StdEPReq+0xce>
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
 800a03c:	2b80      	cmp	r3, #128	; 0x80
 800a03e:	d00a      	beq.n	800a056 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a040:	7bbb      	ldrb	r3, [r7, #14]
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f004 f95d 	bl	800e304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a04a:	2180      	movs	r1, #128	; 0x80
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f004 f959 	bl	800e304 <USBD_LL_StallEP>
 800a052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a054:	e020      	b.n	800a098 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a056:	6839      	ldr	r1, [r7, #0]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fc7a 	bl	800a952 <USBD_CtlError>
              break;
 800a05e:	e01b      	b.n	800a098 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	885b      	ldrh	r3, [r3, #2]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d10e      	bne.n	800a086 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a068:	7bbb      	ldrb	r3, [r7, #14]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <USBD_StdEPReq+0xfe>
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
 800a070:	2b80      	cmp	r3, #128	; 0x80
 800a072:	d008      	beq.n	800a086 <USBD_StdEPReq+0xfe>
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	88db      	ldrh	r3, [r3, #6]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d104      	bne.n	800a086 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f004 f93f 	bl	800e304 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 fd2e 	bl	800aae8 <USBD_CtlSendStatus>

              break;
 800a08c:	e004      	b.n	800a098 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fc5e 	bl	800a952 <USBD_CtlError>
              break;
 800a096:	bf00      	nop
          }
          break;
 800a098:	e107      	b.n	800a2aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d002      	beq.n	800a0ac <USBD_StdEPReq+0x124>
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d016      	beq.n	800a0d8 <USBD_StdEPReq+0x150>
 800a0aa:	e04b      	b.n	800a144 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0ac:	7bbb      	ldrb	r3, [r7, #14]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00d      	beq.n	800a0ce <USBD_StdEPReq+0x146>
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	2b80      	cmp	r3, #128	; 0x80
 800a0b6:	d00a      	beq.n	800a0ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f004 f921 	bl	800e304 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0c2:	2180      	movs	r1, #128	; 0x80
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f004 f91d 	bl	800e304 <USBD_LL_StallEP>
 800a0ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a0cc:	e040      	b.n	800a150 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fc3e 	bl	800a952 <USBD_CtlError>
              break;
 800a0d6:	e03b      	b.n	800a150 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	885b      	ldrh	r3, [r3, #2]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d136      	bne.n	800a14e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d004      	beq.n	800a0f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a0ea:	7bbb      	ldrb	r3, [r7, #14]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f004 f927 	bl	800e342 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f000 fcf7 	bl	800aae8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a0fa:	7bbb      	ldrb	r3, [r7, #14]
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff fde2 	bl	8009cc8 <USBD_CoreFindEP>
 800a104:	4603      	mov	r3, r0
 800a106:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a108:	7b7b      	ldrb	r3, [r7, #13]
 800a10a:	2bff      	cmp	r3, #255	; 0xff
 800a10c:	d01f      	beq.n	800a14e <USBD_StdEPReq+0x1c6>
 800a10e:	7b7b      	ldrb	r3, [r7, #13]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d11c      	bne.n	800a14e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a114:	7b7a      	ldrb	r2, [r7, #13]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a11c:	7b7a      	ldrb	r2, [r7, #13]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	32ae      	adds	r2, #174	; 0xae
 800a122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d010      	beq.n	800a14e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a12c:	7b7a      	ldrb	r2, [r7, #13]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	32ae      	adds	r2, #174	; 0xae
 800a132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	4798      	blx	r3
 800a13e:	4603      	mov	r3, r0
 800a140:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a142:	e004      	b.n	800a14e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a144:	6839      	ldr	r1, [r7, #0]
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fc03 	bl	800a952 <USBD_CtlError>
              break;
 800a14c:	e000      	b.n	800a150 <USBD_StdEPReq+0x1c8>
              break;
 800a14e:	bf00      	nop
          }
          break;
 800a150:	e0ab      	b.n	800a2aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d002      	beq.n	800a164 <USBD_StdEPReq+0x1dc>
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d032      	beq.n	800a1c8 <USBD_StdEPReq+0x240>
 800a162:	e097      	b.n	800a294 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a164:	7bbb      	ldrb	r3, [r7, #14]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d007      	beq.n	800a17a <USBD_StdEPReq+0x1f2>
 800a16a:	7bbb      	ldrb	r3, [r7, #14]
 800a16c:	2b80      	cmp	r3, #128	; 0x80
 800a16e:	d004      	beq.n	800a17a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a170:	6839      	ldr	r1, [r7, #0]
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f000 fbed 	bl	800a952 <USBD_CtlError>
                break;
 800a178:	e091      	b.n	800a29e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a17a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	da0b      	bge.n	800a19a <USBD_StdEPReq+0x212>
 800a182:	7bbb      	ldrb	r3, [r7, #14]
 800a184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a188:	4613      	mov	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	3310      	adds	r3, #16
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	4413      	add	r3, r2
 800a196:	3304      	adds	r3, #4
 800a198:	e00b      	b.n	800a1b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
 800a19c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 fc37 	bl	800aa34 <USBD_CtlSendData>
              break;
 800a1c6:	e06a      	b.n	800a29e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a1c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	da11      	bge.n	800a1f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a1d0:	7bbb      	ldrb	r3, [r7, #14]
 800a1d2:	f003 020f 	and.w	r2, r3, #15
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	440b      	add	r3, r1
 800a1e2:	3324      	adds	r3, #36	; 0x24
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d117      	bne.n	800a21a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fbb0 	bl	800a952 <USBD_CtlError>
                  break;
 800a1f2:	e054      	b.n	800a29e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a1f4:	7bbb      	ldrb	r3, [r7, #14]
 800a1f6:	f003 020f 	and.w	r2, r3, #15
 800a1fa:	6879      	ldr	r1, [r7, #4]
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	4413      	add	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	440b      	add	r3, r1
 800a206:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a20a:	881b      	ldrh	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d104      	bne.n	800a21a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fb9d 	bl	800a952 <USBD_CtlError>
                  break;
 800a218:	e041      	b.n	800a29e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a21a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	da0b      	bge.n	800a23a <USBD_StdEPReq+0x2b2>
 800a222:	7bbb      	ldrb	r3, [r7, #14]
 800a224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a228:	4613      	mov	r3, r2
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	3310      	adds	r3, #16
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	3304      	adds	r3, #4
 800a238:	e00b      	b.n	800a252 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a23a:	7bbb      	ldrb	r3, [r7, #14]
 800a23c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a240:	4613      	mov	r3, r2
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	4413      	add	r3, r2
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	4413      	add	r3, r2
 800a250:	3304      	adds	r3, #4
 800a252:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d002      	beq.n	800a260 <USBD_StdEPReq+0x2d8>
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
 800a25c:	2b80      	cmp	r3, #128	; 0x80
 800a25e:	d103      	bne.n	800a268 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	e00e      	b.n	800a286 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a268:	7bbb      	ldrb	r3, [r7, #14]
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f004 f887 	bl	800e380 <USBD_LL_IsStallEP>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2201      	movs	r2, #1
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	e002      	b.n	800a286 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	2202      	movs	r2, #2
 800a28a:	4619      	mov	r1, r3
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 fbd1 	bl	800aa34 <USBD_CtlSendData>
              break;
 800a292:	e004      	b.n	800a29e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fb5b 	bl	800a952 <USBD_CtlError>
              break;
 800a29c:	bf00      	nop
          }
          break;
 800a29e:	e004      	b.n	800a2aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a2a0:	6839      	ldr	r1, [r7, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fb55 	bl	800a952 <USBD_CtlError>
          break;
 800a2a8:	bf00      	nop
      }
      break;
 800a2aa:	e005      	b.n	800a2b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fb4f 	bl	800a952 <USBD_CtlError>
      break;
 800a2b4:	e000      	b.n	800a2b8 <USBD_StdEPReq+0x330>
      break;
 800a2b6:	bf00      	nop
  }

  return ret;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	885b      	ldrh	r3, [r3, #2]
 800a2de:	0a1b      	lsrs	r3, r3, #8
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	2b06      	cmp	r3, #6
 800a2e6:	f200 8128 	bhi.w	800a53a <USBD_GetDescriptor+0x276>
 800a2ea:	a201      	add	r2, pc, #4	; (adr r2, 800a2f0 <USBD_GetDescriptor+0x2c>)
 800a2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f0:	0800a30d 	.word	0x0800a30d
 800a2f4:	0800a325 	.word	0x0800a325
 800a2f8:	0800a365 	.word	0x0800a365
 800a2fc:	0800a53b 	.word	0x0800a53b
 800a300:	0800a53b 	.word	0x0800a53b
 800a304:	0800a4db 	.word	0x0800a4db
 800a308:	0800a507 	.word	0x0800a507
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	7c12      	ldrb	r2, [r2, #16]
 800a318:	f107 0108 	add.w	r1, r7, #8
 800a31c:	4610      	mov	r0, r2
 800a31e:	4798      	blx	r3
 800a320:	60f8      	str	r0, [r7, #12]
      break;
 800a322:	e112      	b.n	800a54a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	7c1b      	ldrb	r3, [r3, #16]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10d      	bne.n	800a348 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	f107 0208 	add.w	r2, r7, #8
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3
 800a33c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	3301      	adds	r3, #1
 800a342:	2202      	movs	r2, #2
 800a344:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a346:	e100      	b.n	800a54a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a350:	f107 0208 	add.w	r2, r7, #8
 800a354:	4610      	mov	r0, r2
 800a356:	4798      	blx	r3
 800a358:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	3301      	adds	r3, #1
 800a35e:	2202      	movs	r2, #2
 800a360:	701a      	strb	r2, [r3, #0]
      break;
 800a362:	e0f2      	b.n	800a54a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	885b      	ldrh	r3, [r3, #2]
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	2b05      	cmp	r3, #5
 800a36c:	f200 80ac 	bhi.w	800a4c8 <USBD_GetDescriptor+0x204>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <USBD_GetDescriptor+0xb4>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a391 	.word	0x0800a391
 800a37c:	0800a3c5 	.word	0x0800a3c5
 800a380:	0800a3f9 	.word	0x0800a3f9
 800a384:	0800a42d 	.word	0x0800a42d
 800a388:	0800a461 	.word	0x0800a461
 800a38c:	0800a495 	.word	0x0800a495
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00b      	beq.n	800a3b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	7c12      	ldrb	r2, [r2, #16]
 800a3a8:	f107 0108 	add.w	r1, r7, #8
 800a3ac:	4610      	mov	r0, r2
 800a3ae:	4798      	blx	r3
 800a3b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3b2:	e091      	b.n	800a4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 facb 	bl	800a952 <USBD_CtlError>
            err++;
 800a3bc:	7afb      	ldrb	r3, [r7, #11]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a3c2:	e089      	b.n	800a4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00b      	beq.n	800a3e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	7c12      	ldrb	r2, [r2, #16]
 800a3dc:	f107 0108 	add.w	r1, r7, #8
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	4798      	blx	r3
 800a3e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3e6:	e077      	b.n	800a4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fab1 	bl	800a952 <USBD_CtlError>
            err++;
 800a3f0:	7afb      	ldrb	r3, [r7, #11]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a3f6:	e06f      	b.n	800a4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00b      	beq.n	800a41c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	7c12      	ldrb	r2, [r2, #16]
 800a410:	f107 0108 	add.w	r1, r7, #8
 800a414:	4610      	mov	r0, r2
 800a416:	4798      	blx	r3
 800a418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a41a:	e05d      	b.n	800a4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a41c:	6839      	ldr	r1, [r7, #0]
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 fa97 	bl	800a952 <USBD_CtlError>
            err++;
 800a424:	7afb      	ldrb	r3, [r7, #11]
 800a426:	3301      	adds	r3, #1
 800a428:	72fb      	strb	r3, [r7, #11]
          break;
 800a42a:	e055      	b.n	800a4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00b      	beq.n	800a450 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	7c12      	ldrb	r2, [r2, #16]
 800a444:	f107 0108 	add.w	r1, r7, #8
 800a448:	4610      	mov	r0, r2
 800a44a:	4798      	blx	r3
 800a44c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a44e:	e043      	b.n	800a4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a450:	6839      	ldr	r1, [r7, #0]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa7d 	bl	800a952 <USBD_CtlError>
            err++;
 800a458:	7afb      	ldrb	r3, [r7, #11]
 800a45a:	3301      	adds	r3, #1
 800a45c:	72fb      	strb	r3, [r7, #11]
          break;
 800a45e:	e03b      	b.n	800a4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a466:	695b      	ldr	r3, [r3, #20]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00b      	beq.n	800a484 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a472:	695b      	ldr	r3, [r3, #20]
 800a474:	687a      	ldr	r2, [r7, #4]
 800a476:	7c12      	ldrb	r2, [r2, #16]
 800a478:	f107 0108 	add.w	r1, r7, #8
 800a47c:	4610      	mov	r0, r2
 800a47e:	4798      	blx	r3
 800a480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a482:	e029      	b.n	800a4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a484:	6839      	ldr	r1, [r7, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 fa63 	bl	800a952 <USBD_CtlError>
            err++;
 800a48c:	7afb      	ldrb	r3, [r7, #11]
 800a48e:	3301      	adds	r3, #1
 800a490:	72fb      	strb	r3, [r7, #11]
          break;
 800a492:	e021      	b.n	800a4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00b      	beq.n	800a4b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4a6:	699b      	ldr	r3, [r3, #24]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	7c12      	ldrb	r2, [r2, #16]
 800a4ac:	f107 0108 	add.w	r1, r7, #8
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
 800a4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4b6:	e00f      	b.n	800a4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fa49 	bl	800a952 <USBD_CtlError>
            err++;
 800a4c0:	7afb      	ldrb	r3, [r7, #11]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800a4c6:	e007      	b.n	800a4d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a4c8:	6839      	ldr	r1, [r7, #0]
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fa41 	bl	800a952 <USBD_CtlError>
          err++;
 800a4d0:	7afb      	ldrb	r3, [r7, #11]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a4d6:	bf00      	nop
      }
      break;
 800a4d8:	e037      	b.n	800a54a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	7c1b      	ldrb	r3, [r3, #16]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d109      	bne.n	800a4f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ea:	f107 0208 	add.w	r2, r7, #8
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	4798      	blx	r3
 800a4f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a4f4:	e029      	b.n	800a54a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fa2a 	bl	800a952 <USBD_CtlError>
        err++;
 800a4fe:	7afb      	ldrb	r3, [r7, #11]
 800a500:	3301      	adds	r3, #1
 800a502:	72fb      	strb	r3, [r7, #11]
      break;
 800a504:	e021      	b.n	800a54a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	7c1b      	ldrb	r3, [r3, #16]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10d      	bne.n	800a52a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a516:	f107 0208 	add.w	r2, r7, #8
 800a51a:	4610      	mov	r0, r2
 800a51c:	4798      	blx	r3
 800a51e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	3301      	adds	r3, #1
 800a524:	2207      	movs	r2, #7
 800a526:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a528:	e00f      	b.n	800a54a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 fa10 	bl	800a952 <USBD_CtlError>
        err++;
 800a532:	7afb      	ldrb	r3, [r7, #11]
 800a534:	3301      	adds	r3, #1
 800a536:	72fb      	strb	r3, [r7, #11]
      break;
 800a538:	e007      	b.n	800a54a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fa08 	bl	800a952 <USBD_CtlError>
      err++;
 800a542:	7afb      	ldrb	r3, [r7, #11]
 800a544:	3301      	adds	r3, #1
 800a546:	72fb      	strb	r3, [r7, #11]
      break;
 800a548:	bf00      	nop
  }

  if (err != 0U)
 800a54a:	7afb      	ldrb	r3, [r7, #11]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d11e      	bne.n	800a58e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	88db      	ldrh	r3, [r3, #6]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d016      	beq.n	800a586 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a558:	893b      	ldrh	r3, [r7, #8]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00e      	beq.n	800a57c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	88da      	ldrh	r2, [r3, #6]
 800a562:	893b      	ldrh	r3, [r7, #8]
 800a564:	4293      	cmp	r3, r2
 800a566:	bf28      	it	cs
 800a568:	4613      	movcs	r3, r2
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a56e:	893b      	ldrh	r3, [r7, #8]
 800a570:	461a      	mov	r2, r3
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fa5d 	bl	800aa34 <USBD_CtlSendData>
 800a57a:	e009      	b.n	800a590 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f9e7 	bl	800a952 <USBD_CtlError>
 800a584:	e004      	b.n	800a590 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 faae 	bl	800aae8 <USBD_CtlSendStatus>
 800a58c:	e000      	b.n	800a590 <USBD_GetDescriptor+0x2cc>
    return;
 800a58e:	bf00      	nop
  }
}
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop

0800a598 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	889b      	ldrh	r3, [r3, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d131      	bne.n	800a60e <USBD_SetAddress+0x76>
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	88db      	ldrh	r3, [r3, #6]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d12d      	bne.n	800a60e <USBD_SetAddress+0x76>
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	885b      	ldrh	r3, [r3, #2]
 800a5b6:	2b7f      	cmp	r3, #127	; 0x7f
 800a5b8:	d829      	bhi.n	800a60e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	885b      	ldrh	r3, [r3, #2]
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d104      	bne.n	800a5dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 f9bc 	bl	800a952 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5da:	e01d      	b.n	800a618 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	7bfa      	ldrb	r2, [r7, #15]
 800a5e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f003 fef5 	bl	800e3d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fa7a 	bl	800aae8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a5f4:	7bfb      	ldrb	r3, [r7, #15]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d004      	beq.n	800a604 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a602:	e009      	b.n	800a618 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a60c:	e004      	b.n	800a618 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 f99e 	bl	800a952 <USBD_CtlError>
  }
}
 800a616:	bf00      	nop
 800a618:	bf00      	nop
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	885b      	ldrh	r3, [r3, #2]
 800a632:	b2da      	uxtb	r2, r3
 800a634:	4b4e      	ldr	r3, [pc, #312]	; (800a770 <USBD_SetConfig+0x150>)
 800a636:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a638:	4b4d      	ldr	r3, [pc, #308]	; (800a770 <USBD_SetConfig+0x150>)
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d905      	bls.n	800a64c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f985 	bl	800a952 <USBD_CtlError>
    return USBD_FAIL;
 800a648:	2303      	movs	r3, #3
 800a64a:	e08c      	b.n	800a766 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d002      	beq.n	800a65e <USBD_SetConfig+0x3e>
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d029      	beq.n	800a6b0 <USBD_SetConfig+0x90>
 800a65c:	e075      	b.n	800a74a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a65e:	4b44      	ldr	r3, [pc, #272]	; (800a770 <USBD_SetConfig+0x150>)
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d020      	beq.n	800a6a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a666:	4b42      	ldr	r3, [pc, #264]	; (800a770 <USBD_SetConfig+0x150>)
 800a668:	781b      	ldrb	r3, [r3, #0]
 800a66a:	461a      	mov	r2, r3
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a670:	4b3f      	ldr	r3, [pc, #252]	; (800a770 <USBD_SetConfig+0x150>)
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	4619      	mov	r1, r3
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f7fe ffe7 	bl	800964a <USBD_SetClassConfig>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a680:	7bfb      	ldrb	r3, [r7, #15]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d008      	beq.n	800a698 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f962 	bl	800a952 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2202      	movs	r2, #2
 800a692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a696:	e065      	b.n	800a764 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fa25 	bl	800aae8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2203      	movs	r2, #3
 800a6a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a6a6:	e05d      	b.n	800a764 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fa1d 	bl	800aae8 <USBD_CtlSendStatus>
      break;
 800a6ae:	e059      	b.n	800a764 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a6b0:	4b2f      	ldr	r3, [pc, #188]	; (800a770 <USBD_SetConfig+0x150>)
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d112      	bne.n	800a6de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a6c0:	4b2b      	ldr	r3, [pc, #172]	; (800a770 <USBD_SetConfig+0x150>)
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a6ca:	4b29      	ldr	r3, [pc, #164]	; (800a770 <USBD_SetConfig+0x150>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7fe ffd6 	bl	8009682 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fa06 	bl	800aae8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a6dc:	e042      	b.n	800a764 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a6de:	4b24      	ldr	r3, [pc, #144]	; (800a770 <USBD_SetConfig+0x150>)
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d02a      	beq.n	800a742 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7fe ffc4 	bl	8009682 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a6fa:	4b1d      	ldr	r3, [pc, #116]	; (800a770 <USBD_SetConfig+0x150>)
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a704:	4b1a      	ldr	r3, [pc, #104]	; (800a770 <USBD_SetConfig+0x150>)
 800a706:	781b      	ldrb	r3, [r3, #0]
 800a708:	4619      	mov	r1, r3
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7fe ff9d 	bl	800964a <USBD_SetClassConfig>
 800a710:	4603      	mov	r3, r0
 800a712:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a714:	7bfb      	ldrb	r3, [r7, #15]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00f      	beq.n	800a73a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a71a:	6839      	ldr	r1, [r7, #0]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 f918 	bl	800a952 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	b2db      	uxtb	r3, r3
 800a728:	4619      	mov	r1, r3
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7fe ffa9 	bl	8009682 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2202      	movs	r2, #2
 800a734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a738:	e014      	b.n	800a764 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f9d4 	bl	800aae8 <USBD_CtlSendStatus>
      break;
 800a740:	e010      	b.n	800a764 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f9d0 	bl	800aae8 <USBD_CtlSendStatus>
      break;
 800a748:	e00c      	b.n	800a764 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f900 	bl	800a952 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a752:	4b07      	ldr	r3, [pc, #28]	; (800a770 <USBD_SetConfig+0x150>)
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7fe ff92 	bl	8009682 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a75e:	2303      	movs	r3, #3
 800a760:	73fb      	strb	r3, [r7, #15]
      break;
 800a762:	bf00      	nop
  }

  return ret;
 800a764:	7bfb      	ldrb	r3, [r7, #15]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	20000520 	.word	0x20000520

0800a774 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	88db      	ldrh	r3, [r3, #6]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d004      	beq.n	800a790 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 f8e2 	bl	800a952 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a78e:	e023      	b.n	800a7d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b02      	cmp	r3, #2
 800a79a:	dc02      	bgt.n	800a7a2 <USBD_GetConfig+0x2e>
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dc03      	bgt.n	800a7a8 <USBD_GetConfig+0x34>
 800a7a0:	e015      	b.n	800a7ce <USBD_GetConfig+0x5a>
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d00b      	beq.n	800a7be <USBD_GetConfig+0x4a>
 800a7a6:	e012      	b.n	800a7ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3308      	adds	r3, #8
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 f93c 	bl	800aa34 <USBD_CtlSendData>
        break;
 800a7bc:	e00c      	b.n	800a7d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	3304      	adds	r3, #4
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 f934 	bl	800aa34 <USBD_CtlSendData>
        break;
 800a7cc:	e004      	b.n	800a7d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 f8be 	bl	800a952 <USBD_CtlError>
        break;
 800a7d6:	bf00      	nop
}
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d81e      	bhi.n	800a836 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	88db      	ldrh	r3, [r3, #6]
 800a7fc:	2b02      	cmp	r3, #2
 800a7fe:	d004      	beq.n	800a80a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f8a5 	bl	800a952 <USBD_CtlError>
        break;
 800a808:	e01a      	b.n	800a840 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2201      	movs	r2, #1
 800a80e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a816:	2b00      	cmp	r3, #0
 800a818:	d005      	beq.n	800a826 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f043 0202 	orr.w	r2, r3, #2
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	330c      	adds	r3, #12
 800a82a:	2202      	movs	r2, #2
 800a82c:	4619      	mov	r1, r3
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f900 	bl	800aa34 <USBD_CtlSendData>
      break;
 800a834:	e004      	b.n	800a840 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f88a 	bl	800a952 <USBD_CtlError>
      break;
 800a83e:	bf00      	nop
  }
}
 800a840:	bf00      	nop
 800a842:	3708      	adds	r7, #8
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	885b      	ldrh	r3, [r3, #2]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d107      	bne.n	800a86a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f940 	bl	800aae8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a868:	e013      	b.n	800a892 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	885b      	ldrh	r3, [r3, #2]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d10b      	bne.n	800a88a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	889b      	ldrh	r3, [r3, #4]
 800a876:	0a1b      	lsrs	r3, r3, #8
 800a878:	b29b      	uxth	r3, r3
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f930 	bl	800aae8 <USBD_CtlSendStatus>
}
 800a888:	e003      	b.n	800a892 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a88a:	6839      	ldr	r1, [r7, #0]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f860 	bl	800a952 <USBD_CtlError>
}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}

0800a89a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
 800a8a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d80b      	bhi.n	800a8ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	885b      	ldrh	r3, [r3, #2]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d10c      	bne.n	800a8d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f910 	bl	800aae8 <USBD_CtlSendStatus>
      }
      break;
 800a8c8:	e004      	b.n	800a8d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f840 	bl	800a952 <USBD_CtlError>
      break;
 800a8d2:	e000      	b.n	800a8d6 <USBD_ClrFeature+0x3c>
      break;
 800a8d4:	bf00      	nop
  }
}
 800a8d6:	bf00      	nop
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
 800a8e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	781a      	ldrb	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	781a      	ldrb	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3301      	adds	r3, #1
 800a906:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7ff fa41 	bl	8009d90 <SWAPBYTE>
 800a90e:	4603      	mov	r3, r0
 800a910:	461a      	mov	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	3301      	adds	r3, #1
 800a91a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3301      	adds	r3, #1
 800a920:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f7ff fa34 	bl	8009d90 <SWAPBYTE>
 800a928:	4603      	mov	r3, r0
 800a92a:	461a      	mov	r2, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3301      	adds	r3, #1
 800a934:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3301      	adds	r3, #1
 800a93a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff fa27 	bl	8009d90 <SWAPBYTE>
 800a942:	4603      	mov	r3, r0
 800a944:	461a      	mov	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	80da      	strh	r2, [r3, #6]
}
 800a94a:	bf00      	nop
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}

0800a952 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a952:	b580      	push	{r7, lr}
 800a954:	b082      	sub	sp, #8
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]
 800a95a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a95c:	2180      	movs	r1, #128	; 0x80
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f003 fcd0 	bl	800e304 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a964:	2100      	movs	r1, #0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f003 fccc 	bl	800e304 <USBD_LL_StallEP>
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a980:	2300      	movs	r3, #0
 800a982:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d036      	beq.n	800a9f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a98e:	6938      	ldr	r0, [r7, #16]
 800a990:	f000 f836 	bl	800aa00 <USBD_GetLen>
 800a994:	4603      	mov	r3, r0
 800a996:	3301      	adds	r3, #1
 800a998:	b29b      	uxth	r3, r3
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	7812      	ldrb	r2, [r2, #0]
 800a9ac:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	2203      	movs	r2, #3
 800a9bc:	701a      	strb	r2, [r3, #0]
  idx++;
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a9c4:	e013      	b.n	800a9ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	7812      	ldrb	r2, [r2, #0]
 800a9d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	613b      	str	r3, [r7, #16]
    idx++;
 800a9d8:	7dfb      	ldrb	r3, [r7, #23]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	701a      	strb	r2, [r3, #0]
    idx++;
 800a9e8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e7      	bne.n	800a9c6 <USBD_GetString+0x52>
 800a9f6:	e000      	b.n	800a9fa <USBD_GetString+0x86>
    return;
 800a9f8:	bf00      	nop
  }
}
 800a9fa:	3718      	adds	r7, #24
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aa10:	e005      	b.n	800aa1e <USBD_GetLen+0x1e>
  {
    len++;
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
 800aa14:	3301      	adds	r3, #1
 800aa16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1f5      	bne.n	800aa12 <USBD_GetLen+0x12>
  }

  return len;
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2202      	movs	r2, #2
 800aa44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	2100      	movs	r1, #0
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f003 fcdb 	bl	800e416 <USBD_LL_Transmit>

  return USBD_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	60f8      	str	r0, [r7, #12]
 800aa72:	60b9      	str	r1, [r7, #8]
 800aa74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	68ba      	ldr	r2, [r7, #8]
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f003 fcca 	bl	800e416 <USBD_LL_Transmit>

  return USBD_OK;
 800aa82:	2300      	movs	r3, #0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3710      	adds	r7, #16
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b084      	sub	sp, #16
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2203      	movs	r2, #3
 800aa9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	2100      	movs	r1, #0
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f003 fcce 	bl	800e458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b084      	sub	sp, #16
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	60f8      	str	r0, [r7, #12]
 800aace:	60b9      	str	r1, [r7, #8]
 800aad0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	2100      	movs	r1, #0
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f003 fcbd 	bl	800e458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2204      	movs	r2, #4
 800aaf4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aaf8:	2300      	movs	r3, #0
 800aafa:	2200      	movs	r2, #0
 800aafc:	2100      	movs	r1, #0
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f003 fc89 	bl	800e416 <USBD_LL_Transmit>

  return USBD_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b082      	sub	sp, #8
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2205      	movs	r2, #5
 800ab1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab1e:	2300      	movs	r3, #0
 800ab20:	2200      	movs	r2, #0
 800ab22:	2100      	movs	r1, #0
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f003 fc97 	bl	800e458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b087      	sub	sp, #28
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ab42:	2301      	movs	r3, #1
 800ab44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ab4a:	4b1f      	ldr	r3, [pc, #124]	; (800abc8 <FATFS_LinkDriverEx+0x94>)
 800ab4c:	7a5b      	ldrb	r3, [r3, #9]
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d131      	bne.n	800abb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ab54:	4b1c      	ldr	r3, [pc, #112]	; (800abc8 <FATFS_LinkDriverEx+0x94>)
 800ab56:	7a5b      	ldrb	r3, [r3, #9]
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	4b1a      	ldr	r3, [pc, #104]	; (800abc8 <FATFS_LinkDriverEx+0x94>)
 800ab5e:	2100      	movs	r1, #0
 800ab60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ab62:	4b19      	ldr	r3, [pc, #100]	; (800abc8 <FATFS_LinkDriverEx+0x94>)
 800ab64:	7a5b      	ldrb	r3, [r3, #9]
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	4a17      	ldr	r2, [pc, #92]	; (800abc8 <FATFS_LinkDriverEx+0x94>)
 800ab6a:	009b      	lsls	r3, r3, #2
 800ab6c:	4413      	add	r3, r2
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ab72:	4b15      	ldr	r3, [pc, #84]	; (800abc8 <FATFS_LinkDriverEx+0x94>)
 800ab74:	7a5b      	ldrb	r3, [r3, #9]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4b13      	ldr	r3, [pc, #76]	; (800abc8 <FATFS_LinkDriverEx+0x94>)
 800ab7c:	4413      	add	r3, r2
 800ab7e:	79fa      	ldrb	r2, [r7, #7]
 800ab80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab82:	4b11      	ldr	r3, [pc, #68]	; (800abc8 <FATFS_LinkDriverEx+0x94>)
 800ab84:	7a5b      	ldrb	r3, [r3, #9]
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	1c5a      	adds	r2, r3, #1
 800ab8a:	b2d1      	uxtb	r1, r2
 800ab8c:	4a0e      	ldr	r2, [pc, #56]	; (800abc8 <FATFS_LinkDriverEx+0x94>)
 800ab8e:	7251      	strb	r1, [r2, #9]
 800ab90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab92:	7dbb      	ldrb	r3, [r7, #22]
 800ab94:	3330      	adds	r3, #48	; 0x30
 800ab96:	b2da      	uxtb	r2, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	223a      	movs	r2, #58	; 0x3a
 800aba2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	3302      	adds	r3, #2
 800aba8:	222f      	movs	r2, #47	; 0x2f
 800abaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	3303      	adds	r3, #3
 800abb0:	2200      	movs	r2, #0
 800abb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800abb4:	2300      	movs	r3, #0
 800abb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	20000524 	.word	0x20000524

0800abcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800abd6:	2200      	movs	r2, #0
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f7ff ffaa 	bl	800ab34 <FATFS_LinkDriverEx>
 800abe0:	4603      	mov	r3, r0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
	...

0800abec <__NVIC_SetPriority>:
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	6039      	str	r1, [r7, #0]
 800abf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800abf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	db0a      	blt.n	800ac16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	490c      	ldr	r1, [pc, #48]	; (800ac38 <__NVIC_SetPriority+0x4c>)
 800ac06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac0a:	0112      	lsls	r2, r2, #4
 800ac0c:	b2d2      	uxtb	r2, r2
 800ac0e:	440b      	add	r3, r1
 800ac10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ac14:	e00a      	b.n	800ac2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	b2da      	uxtb	r2, r3
 800ac1a:	4908      	ldr	r1, [pc, #32]	; (800ac3c <__NVIC_SetPriority+0x50>)
 800ac1c:	79fb      	ldrb	r3, [r7, #7]
 800ac1e:	f003 030f 	and.w	r3, r3, #15
 800ac22:	3b04      	subs	r3, #4
 800ac24:	0112      	lsls	r2, r2, #4
 800ac26:	b2d2      	uxtb	r2, r2
 800ac28:	440b      	add	r3, r1
 800ac2a:	761a      	strb	r2, [r3, #24]
}
 800ac2c:	bf00      	nop
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr
 800ac38:	e000e100 	.word	0xe000e100
 800ac3c:	e000ed00 	.word	0xe000ed00

0800ac40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ac44:	2100      	movs	r1, #0
 800ac46:	f06f 0004 	mvn.w	r0, #4
 800ac4a:	f7ff ffcf 	bl	800abec <__NVIC_SetPriority>
#endif
}
 800ac4e:	bf00      	nop
 800ac50:	bd80      	pop	{r7, pc}
	...

0800ac54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac5a:	f3ef 8305 	mrs	r3, IPSR
 800ac5e:	603b      	str	r3, [r7, #0]
  return(result);
 800ac60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ac66:	f06f 0305 	mvn.w	r3, #5
 800ac6a:	607b      	str	r3, [r7, #4]
 800ac6c:	e00c      	b.n	800ac88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ac6e:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <osKernelInitialize+0x44>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d105      	bne.n	800ac82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ac76:	4b08      	ldr	r3, [pc, #32]	; (800ac98 <osKernelInitialize+0x44>)
 800ac78:	2201      	movs	r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	607b      	str	r3, [r7, #4]
 800ac80:	e002      	b.n	800ac88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ac82:	f04f 33ff 	mov.w	r3, #4294967295
 800ac86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ac88:	687b      	ldr	r3, [r7, #4]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	20000530 	.word	0x20000530

0800ac9c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800aca2:	f001 fef5 	bl	800ca90 <xTaskGetSchedulerState>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d004      	beq.n	800acb6 <osKernelGetState+0x1a>
 800acac:	2b02      	cmp	r3, #2
 800acae:	d105      	bne.n	800acbc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800acb0:	2302      	movs	r3, #2
 800acb2:	607b      	str	r3, [r7, #4]
      break;
 800acb4:	e00c      	b.n	800acd0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800acb6:	2303      	movs	r3, #3
 800acb8:	607b      	str	r3, [r7, #4]
      break;
 800acba:	e009      	b.n	800acd0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800acbc:	4b07      	ldr	r3, [pc, #28]	; (800acdc <osKernelGetState+0x40>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d102      	bne.n	800acca <osKernelGetState+0x2e>
        state = osKernelReady;
 800acc4:	2301      	movs	r3, #1
 800acc6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800acc8:	e001      	b.n	800acce <osKernelGetState+0x32>
        state = osKernelInactive;
 800acca:	2300      	movs	r3, #0
 800accc:	607b      	str	r3, [r7, #4]
      break;
 800acce:	bf00      	nop
  }

  return (state);
 800acd0:	687b      	ldr	r3, [r7, #4]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	20000530 	.word	0x20000530

0800ace0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ace6:	f3ef 8305 	mrs	r3, IPSR
 800acea:	603b      	str	r3, [r7, #0]
  return(result);
 800acec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <osKernelStart+0x1a>
    stat = osErrorISR;
 800acf2:	f06f 0305 	mvn.w	r3, #5
 800acf6:	607b      	str	r3, [r7, #4]
 800acf8:	e010      	b.n	800ad1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800acfa:	4b0b      	ldr	r3, [pc, #44]	; (800ad28 <osKernelStart+0x48>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d109      	bne.n	800ad16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ad02:	f7ff ff9d 	bl	800ac40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ad06:	4b08      	ldr	r3, [pc, #32]	; (800ad28 <osKernelStart+0x48>)
 800ad08:	2202      	movs	r2, #2
 800ad0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ad0c:	f001 fa66 	bl	800c1dc <vTaskStartScheduler>
      stat = osOK;
 800ad10:	2300      	movs	r3, #0
 800ad12:	607b      	str	r3, [r7, #4]
 800ad14:	e002      	b.n	800ad1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ad16:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ad1c:	687b      	ldr	r3, [r7, #4]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000530 	.word	0x20000530

0800ad2c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad32:	f3ef 8305 	mrs	r3, IPSR
 800ad36:	603b      	str	r3, [r7, #0]
  return(result);
 800ad38:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ad3e:	f001 fb6f 	bl	800c420 <xTaskGetTickCountFromISR>
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	e002      	b.n	800ad4c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ad46:	f001 fb5b 	bl	800c400 <xTaskGetTickCount>
 800ad4a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ad4c:	687b      	ldr	r3, [r7, #4]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b08e      	sub	sp, #56	; 0x38
 800ad5a:	af04      	add	r7, sp, #16
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad66:	f3ef 8305 	mrs	r3, IPSR
 800ad6a:	617b      	str	r3, [r7, #20]
  return(result);
 800ad6c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d17e      	bne.n	800ae70 <osThreadNew+0x11a>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d07b      	beq.n	800ae70 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ad78:	2380      	movs	r3, #128	; 0x80
 800ad7a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ad7c:	2318      	movs	r3, #24
 800ad7e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ad84:	f04f 33ff 	mov.w	r3, #4294967295
 800ad88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d045      	beq.n	800ae1c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <osThreadNew+0x48>
        name = attr->name;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d002      	beq.n	800adac <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	699b      	ldr	r3, [r3, #24]
 800adaa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d008      	beq.n	800adc4 <osThreadNew+0x6e>
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	2b38      	cmp	r3, #56	; 0x38
 800adb6:	d805      	bhi.n	800adc4 <osThreadNew+0x6e>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <osThreadNew+0x72>
        return (NULL);
 800adc4:	2300      	movs	r3, #0
 800adc6:	e054      	b.n	800ae72 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	695b      	ldr	r3, [r3, #20]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	089b      	lsrs	r3, r3, #2
 800add6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d00e      	beq.n	800adfe <osThreadNew+0xa8>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	2b5b      	cmp	r3, #91	; 0x5b
 800ade6:	d90a      	bls.n	800adfe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800adec:	2b00      	cmp	r3, #0
 800adee:	d006      	beq.n	800adfe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	695b      	ldr	r3, [r3, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d002      	beq.n	800adfe <osThreadNew+0xa8>
        mem = 1;
 800adf8:	2301      	movs	r3, #1
 800adfa:	61bb      	str	r3, [r7, #24]
 800adfc:	e010      	b.n	800ae20 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10c      	bne.n	800ae20 <osThreadNew+0xca>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d108      	bne.n	800ae20 <osThreadNew+0xca>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d104      	bne.n	800ae20 <osThreadNew+0xca>
          mem = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	61bb      	str	r3, [r7, #24]
 800ae1a:	e001      	b.n	800ae20 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d110      	bne.n	800ae48 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ae2e:	9202      	str	r2, [sp, #8]
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6a3a      	ldr	r2, [r7, #32]
 800ae3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 fff7 	bl	800be30 <xTaskCreateStatic>
 800ae42:	4603      	mov	r3, r0
 800ae44:	613b      	str	r3, [r7, #16]
 800ae46:	e013      	b.n	800ae70 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d110      	bne.n	800ae70 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ae4e:	6a3b      	ldr	r3, [r7, #32]
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	f107 0310 	add.w	r3, r7, #16
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	9300      	str	r3, [sp, #0]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f001 f842 	bl	800beea <xTaskCreate>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d001      	beq.n	800ae70 <osThreadNew+0x11a>
            hTask = NULL;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ae70:	693b      	ldr	r3, [r7, #16]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3728      	adds	r7, #40	; 0x28
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae82:	f3ef 8305 	mrs	r3, IPSR
 800ae86:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <osDelay+0x1c>
    stat = osErrorISR;
 800ae8e:	f06f 0305 	mvn.w	r3, #5
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	e007      	b.n	800aea6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f001 f967 	bl	800c174 <vTaskDelay>
    }
  }

  return (stat);
 800aea6:	68fb      	ldr	r3, [r7, #12]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b08a      	sub	sp, #40	; 0x28
 800aeb4:	af02      	add	r7, sp, #8
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800aebc:	2300      	movs	r3, #0
 800aebe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aec0:	f3ef 8305 	mrs	r3, IPSR
 800aec4:	613b      	str	r3, [r7, #16]
  return(result);
 800aec6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d15f      	bne.n	800af8c <osMessageQueueNew+0xdc>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d05c      	beq.n	800af8c <osMessageQueueNew+0xdc>
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d059      	beq.n	800af8c <osMessageQueueNew+0xdc>
    mem = -1;
 800aed8:	f04f 33ff 	mov.w	r3, #4294967295
 800aedc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d029      	beq.n	800af38 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d012      	beq.n	800af12 <osMessageQueueNew+0x62>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	68db      	ldr	r3, [r3, #12]
 800aef0:	2b4f      	cmp	r3, #79	; 0x4f
 800aef2:	d90e      	bls.n	800af12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00a      	beq.n	800af12 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	695a      	ldr	r2, [r3, #20]
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	68b9      	ldr	r1, [r7, #8]
 800af04:	fb01 f303 	mul.w	r3, r1, r3
 800af08:	429a      	cmp	r2, r3
 800af0a:	d302      	bcc.n	800af12 <osMessageQueueNew+0x62>
        mem = 1;
 800af0c:	2301      	movs	r3, #1
 800af0e:	61bb      	str	r3, [r7, #24]
 800af10:	e014      	b.n	800af3c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d110      	bne.n	800af3c <osMessageQueueNew+0x8c>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10c      	bne.n	800af3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800af26:	2b00      	cmp	r3, #0
 800af28:	d108      	bne.n	800af3c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d104      	bne.n	800af3c <osMessageQueueNew+0x8c>
          mem = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	61bb      	str	r3, [r7, #24]
 800af36:	e001      	b.n	800af3c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d10b      	bne.n	800af5a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	691a      	ldr	r2, [r3, #16]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	2100      	movs	r1, #0
 800af4c:	9100      	str	r1, [sp, #0]
 800af4e:	68b9      	ldr	r1, [r7, #8]
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f000 fa2f 	bl	800b3b4 <xQueueGenericCreateStatic>
 800af56:	61f8      	str	r0, [r7, #28]
 800af58:	e008      	b.n	800af6c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d105      	bne.n	800af6c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800af60:	2200      	movs	r2, #0
 800af62:	68b9      	ldr	r1, [r7, #8]
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 fa9d 	bl	800b4a4 <xQueueGenericCreate>
 800af6a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00c      	beq.n	800af8c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d003      	beq.n	800af80 <osMessageQueueNew+0xd0>
        name = attr->name;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	617b      	str	r3, [r7, #20]
 800af7e:	e001      	b.n	800af84 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800af80:	2300      	movs	r3, #0
 800af82:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800af84:	6979      	ldr	r1, [r7, #20]
 800af86:	69f8      	ldr	r0, [r7, #28]
 800af88:	f000 fef4 	bl	800bd74 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800af8c:	69fb      	ldr	r3, [r7, #28]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
	...

0800af98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800af98:	b580      	push	{r7, lr}
 800af9a:	b088      	sub	sp, #32
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	603b      	str	r3, [r7, #0]
 800afa4:	4613      	mov	r3, r2
 800afa6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800afac:	2300      	movs	r3, #0
 800afae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afb0:	f3ef 8305 	mrs	r3, IPSR
 800afb4:	617b      	str	r3, [r7, #20]
  return(result);
 800afb6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d028      	beq.n	800b00e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800afbc:	69bb      	ldr	r3, [r7, #24]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d005      	beq.n	800afce <osMessageQueuePut+0x36>
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <osMessageQueuePut+0x36>
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d003      	beq.n	800afd6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800afce:	f06f 0303 	mvn.w	r3, #3
 800afd2:	61fb      	str	r3, [r7, #28]
 800afd4:	e038      	b.n	800b048 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800afd6:	2300      	movs	r3, #0
 800afd8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800afda:	f107 0210 	add.w	r2, r7, #16
 800afde:	2300      	movs	r3, #0
 800afe0:	68b9      	ldr	r1, [r7, #8]
 800afe2:	69b8      	ldr	r0, [r7, #24]
 800afe4:	f000 fbba 	bl	800b75c <xQueueGenericSendFromISR>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b01      	cmp	r3, #1
 800afec:	d003      	beq.n	800aff6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800afee:	f06f 0302 	mvn.w	r3, #2
 800aff2:	61fb      	str	r3, [r7, #28]
 800aff4:	e028      	b.n	800b048 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d025      	beq.n	800b048 <osMessageQueuePut+0xb0>
 800affc:	4b15      	ldr	r3, [pc, #84]	; (800b054 <osMessageQueuePut+0xbc>)
 800affe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	e01c      	b.n	800b048 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <osMessageQueuePut+0x82>
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d103      	bne.n	800b022 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b01a:	f06f 0303 	mvn.w	r3, #3
 800b01e:	61fb      	str	r3, [r7, #28]
 800b020:	e012      	b.n	800b048 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b022:	2300      	movs	r3, #0
 800b024:	683a      	ldr	r2, [r7, #0]
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	69b8      	ldr	r0, [r7, #24]
 800b02a:	f000 fa99 	bl	800b560 <xQueueGenericSend>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b01      	cmp	r3, #1
 800b032:	d009      	beq.n	800b048 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b03a:	f06f 0301 	mvn.w	r3, #1
 800b03e:	61fb      	str	r3, [r7, #28]
 800b040:	e002      	b.n	800b048 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b042:	f06f 0302 	mvn.w	r3, #2
 800b046:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b048:	69fb      	ldr	r3, [r7, #28]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	e000ed04 	.word	0xe000ed04

0800b058 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b058:	b580      	push	{r7, lr}
 800b05a:	b088      	sub	sp, #32
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
 800b064:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b06e:	f3ef 8305 	mrs	r3, IPSR
 800b072:	617b      	str	r3, [r7, #20]
  return(result);
 800b074:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b076:	2b00      	cmp	r3, #0
 800b078:	d028      	beq.n	800b0cc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d005      	beq.n	800b08c <osMessageQueueGet+0x34>
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d002      	beq.n	800b08c <osMessageQueueGet+0x34>
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d003      	beq.n	800b094 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b08c:	f06f 0303 	mvn.w	r3, #3
 800b090:	61fb      	str	r3, [r7, #28]
 800b092:	e037      	b.n	800b104 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b094:	2300      	movs	r3, #0
 800b096:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b098:	f107 0310 	add.w	r3, r7, #16
 800b09c:	461a      	mov	r2, r3
 800b09e:	68b9      	ldr	r1, [r7, #8]
 800b0a0:	69b8      	ldr	r0, [r7, #24]
 800b0a2:	f000 fcd7 	bl	800ba54 <xQueueReceiveFromISR>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d003      	beq.n	800b0b4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b0ac:	f06f 0302 	mvn.w	r3, #2
 800b0b0:	61fb      	str	r3, [r7, #28]
 800b0b2:	e027      	b.n	800b104 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d024      	beq.n	800b104 <osMessageQueueGet+0xac>
 800b0ba:	4b15      	ldr	r3, [pc, #84]	; (800b110 <osMessageQueueGet+0xb8>)
 800b0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0c0:	601a      	str	r2, [r3, #0]
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	e01b      	b.n	800b104 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <osMessageQueueGet+0x80>
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d103      	bne.n	800b0e0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b0d8:	f06f 0303 	mvn.w	r3, #3
 800b0dc:	61fb      	str	r3, [r7, #28]
 800b0de:	e011      	b.n	800b104 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	69b8      	ldr	r0, [r7, #24]
 800b0e6:	f000 fbd5 	bl	800b894 <xQueueReceive>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d009      	beq.n	800b104 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d003      	beq.n	800b0fe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b0f6:	f06f 0301 	mvn.w	r3, #1
 800b0fa:	61fb      	str	r3, [r7, #28]
 800b0fc:	e002      	b.n	800b104 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b0fe:	f06f 0302 	mvn.w	r3, #2
 800b102:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b104:	69fb      	ldr	r3, [r7, #28]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3720      	adds	r7, #32
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	e000ed04 	.word	0xe000ed04

0800b114 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4a07      	ldr	r2, [pc, #28]	; (800b140 <vApplicationGetIdleTaskMemory+0x2c>)
 800b124:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	4a06      	ldr	r2, [pc, #24]	; (800b144 <vApplicationGetIdleTaskMemory+0x30>)
 800b12a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2280      	movs	r2, #128	; 0x80
 800b130:	601a      	str	r2, [r3, #0]
}
 800b132:	bf00      	nop
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	20000534 	.word	0x20000534
 800b144:	20000590 	.word	0x20000590

0800b148 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4a07      	ldr	r2, [pc, #28]	; (800b174 <vApplicationGetTimerTaskMemory+0x2c>)
 800b158:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	4a06      	ldr	r2, [pc, #24]	; (800b178 <vApplicationGetTimerTaskMemory+0x30>)
 800b15e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b166:	601a      	str	r2, [r3, #0]
}
 800b168:	bf00      	nop
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	20000790 	.word	0x20000790
 800b178:	200007ec 	.word	0x200007ec

0800b17c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f103 0208 	add.w	r2, r3, #8
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f04f 32ff 	mov.w	r2, #4294967295
 800b194:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f103 0208 	add.w	r2, r3, #8
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f103 0208 	add.w	r2, r3, #8
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b1b0:	bf00      	nop
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b1ca:	bf00      	nop
 800b1cc:	370c      	adds	r7, #12
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b085      	sub	sp, #20
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	689a      	ldr	r2, [r3, #8]
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	601a      	str	r2, [r3, #0]
}
 800b212:	bf00      	nop
 800b214:	3714      	adds	r7, #20
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b21e:	b480      	push	{r7}
 800b220:	b085      	sub	sp, #20
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b234:	d103      	bne.n	800b23e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	e00c      	b.n	800b258 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3308      	adds	r3, #8
 800b242:	60fb      	str	r3, [r7, #12]
 800b244:	e002      	b.n	800b24c <vListInsert+0x2e>
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	685b      	ldr	r3, [r3, #4]
 800b24a:	60fb      	str	r3, [r7, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	429a      	cmp	r2, r3
 800b256:	d2f6      	bcs.n	800b246 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	683a      	ldr	r2, [r7, #0]
 800b272:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	601a      	str	r2, [r3, #0]
}
 800b284:	bf00      	nop
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	691b      	ldr	r3, [r3, #16]
 800b29c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	6892      	ldr	r2, [r2, #8]
 800b2a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	6852      	ldr	r2, [r2, #4]
 800b2b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d103      	bne.n	800b2c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	689a      	ldr	r2, [r3, #8]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	1e5a      	subs	r2, r3, #1
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3714      	adds	r7, #20
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10a      	bne.n	800b30e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b30a:	bf00      	nop
 800b30c:	e7fe      	b.n	800b30c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b30e:	f002 f919 	bl	800d544 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31a:	68f9      	ldr	r1, [r7, #12]
 800b31c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b31e:	fb01 f303 	mul.w	r3, r1, r3
 800b322:	441a      	add	r2, r3
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33e:	3b01      	subs	r3, #1
 800b340:	68f9      	ldr	r1, [r7, #12]
 800b342:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b344:	fb01 f303 	mul.w	r3, r1, r3
 800b348:	441a      	add	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	22ff      	movs	r2, #255	; 0xff
 800b352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	22ff      	movs	r2, #255	; 0xff
 800b35a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d114      	bne.n	800b38e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d01a      	beq.n	800b3a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	3310      	adds	r3, #16
 800b370:	4618      	mov	r0, r3
 800b372:	f001 f9cf 	bl	800c714 <xTaskRemoveFromEventList>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d012      	beq.n	800b3a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b37c:	4b0c      	ldr	r3, [pc, #48]	; (800b3b0 <xQueueGenericReset+0xcc>)
 800b37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	e009      	b.n	800b3a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	3310      	adds	r3, #16
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff fef2 	bl	800b17c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	3324      	adds	r3, #36	; 0x24
 800b39c:	4618      	mov	r0, r3
 800b39e:	f7ff feed 	bl	800b17c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b3a2:	f002 f8ff 	bl	800d5a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b3a6:	2301      	movs	r3, #1
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	e000ed04 	.word	0xe000ed04

0800b3b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08e      	sub	sp, #56	; 0x38
 800b3b8:	af02      	add	r7, sp, #8
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10a      	bne.n	800b3de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	f383 8811 	msr	BASEPRI, r3
 800b3d0:	f3bf 8f6f 	isb	sy
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b3da:	bf00      	nop
 800b3dc:	e7fe      	b.n	800b3dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10a      	bne.n	800b3fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b3f6:	bf00      	nop
 800b3f8:	e7fe      	b.n	800b3f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d002      	beq.n	800b406 <xQueueGenericCreateStatic+0x52>
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <xQueueGenericCreateStatic+0x56>
 800b406:	2301      	movs	r3, #1
 800b408:	e000      	b.n	800b40c <xQueueGenericCreateStatic+0x58>
 800b40a:	2300      	movs	r3, #0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10a      	bne.n	800b426 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	623b      	str	r3, [r7, #32]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d102      	bne.n	800b432 <xQueueGenericCreateStatic+0x7e>
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <xQueueGenericCreateStatic+0x82>
 800b432:	2301      	movs	r3, #1
 800b434:	e000      	b.n	800b438 <xQueueGenericCreateStatic+0x84>
 800b436:	2300      	movs	r3, #0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10a      	bne.n	800b452 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b440:	f383 8811 	msr	BASEPRI, r3
 800b444:	f3bf 8f6f 	isb	sy
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	61fb      	str	r3, [r7, #28]
}
 800b44e:	bf00      	nop
 800b450:	e7fe      	b.n	800b450 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b452:	2350      	movs	r3, #80	; 0x50
 800b454:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2b50      	cmp	r3, #80	; 0x50
 800b45a:	d00a      	beq.n	800b472 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	61bb      	str	r3, [r7, #24]
}
 800b46e:	bf00      	nop
 800b470:	e7fe      	b.n	800b470 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b472:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00d      	beq.n	800b49a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b480:	2201      	movs	r2, #1
 800b482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b486:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	4613      	mov	r3, r2
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	68b9      	ldr	r1, [r7, #8]
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f000 f83f 	bl	800b518 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3730      	adds	r7, #48	; 0x30
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b08a      	sub	sp, #40	; 0x28
 800b4a8:	af02      	add	r7, sp, #8
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <xQueueGenericCreate+0x2a>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	613b      	str	r3, [r7, #16]
}
 800b4ca:	bf00      	nop
 800b4cc:	e7fe      	b.n	800b4cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	fb02 f303 	mul.w	r3, r2, r3
 800b4d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	3350      	adds	r3, #80	; 0x50
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f002 f953 	bl	800d788 <pvPortMalloc>
 800b4e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b4e4:	69bb      	ldr	r3, [r7, #24]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d011      	beq.n	800b50e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	3350      	adds	r3, #80	; 0x50
 800b4f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b4fc:	79fa      	ldrb	r2, [r7, #7]
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	4613      	mov	r3, r2
 800b504:	697a      	ldr	r2, [r7, #20]
 800b506:	68b9      	ldr	r1, [r7, #8]
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 f805 	bl	800b518 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b50e:	69bb      	ldr	r3, [r7, #24]
	}
 800b510:	4618      	mov	r0, r3
 800b512:	3720      	adds	r7, #32
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]
 800b524:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d103      	bne.n	800b534 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	69ba      	ldr	r2, [r7, #24]
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	e002      	b.n	800b53a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	68fa      	ldr	r2, [r7, #12]
 800b53e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b540:	69bb      	ldr	r3, [r7, #24]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b546:	2101      	movs	r1, #1
 800b548:	69b8      	ldr	r0, [r7, #24]
 800b54a:	f7ff fecb 	bl	800b2e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	78fa      	ldrb	r2, [r7, #3]
 800b552:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b556:	bf00      	nop
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08e      	sub	sp, #56	; 0x38
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b56e:	2300      	movs	r3, #0
 800b570:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10a      	bne.n	800b592 <xQueueGenericSend+0x32>
	__asm volatile
 800b57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b58e:	bf00      	nop
 800b590:	e7fe      	b.n	800b590 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d103      	bne.n	800b5a0 <xQueueGenericSend+0x40>
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <xQueueGenericSend+0x44>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e000      	b.n	800b5a6 <xQueueGenericSend+0x46>
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10a      	bne.n	800b5c0 <xQueueGenericSend+0x60>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b5bc:	bf00      	nop
 800b5be:	e7fe      	b.n	800b5be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d103      	bne.n	800b5ce <xQueueGenericSend+0x6e>
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d101      	bne.n	800b5d2 <xQueueGenericSend+0x72>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e000      	b.n	800b5d4 <xQueueGenericSend+0x74>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10a      	bne.n	800b5ee <xQueueGenericSend+0x8e>
	__asm volatile
 800b5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	623b      	str	r3, [r7, #32]
}
 800b5ea:	bf00      	nop
 800b5ec:	e7fe      	b.n	800b5ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5ee:	f001 fa4f 	bl	800ca90 <xTaskGetSchedulerState>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d102      	bne.n	800b5fe <xQueueGenericSend+0x9e>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <xQueueGenericSend+0xa2>
 800b5fe:	2301      	movs	r3, #1
 800b600:	e000      	b.n	800b604 <xQueueGenericSend+0xa4>
 800b602:	2300      	movs	r3, #0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d10a      	bne.n	800b61e <xQueueGenericSend+0xbe>
	__asm volatile
 800b608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b60c:	f383 8811 	msr	BASEPRI, r3
 800b610:	f3bf 8f6f 	isb	sy
 800b614:	f3bf 8f4f 	dsb	sy
 800b618:	61fb      	str	r3, [r7, #28]
}
 800b61a:	bf00      	nop
 800b61c:	e7fe      	b.n	800b61c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b61e:	f001 ff91 	bl	800d544 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d302      	bcc.n	800b634 <xQueueGenericSend+0xd4>
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b02      	cmp	r3, #2
 800b632:	d129      	bne.n	800b688 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	68b9      	ldr	r1, [r7, #8]
 800b638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b63a:	f000 fa8b 	bl	800bb54 <prvCopyDataToQueue>
 800b63e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b644:	2b00      	cmp	r3, #0
 800b646:	d010      	beq.n	800b66a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64a:	3324      	adds	r3, #36	; 0x24
 800b64c:	4618      	mov	r0, r3
 800b64e:	f001 f861 	bl	800c714 <xTaskRemoveFromEventList>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d013      	beq.n	800b680 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b658:	4b3f      	ldr	r3, [pc, #252]	; (800b758 <xQueueGenericSend+0x1f8>)
 800b65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	e00a      	b.n	800b680 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d007      	beq.n	800b680 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b670:	4b39      	ldr	r3, [pc, #228]	; (800b758 <xQueueGenericSend+0x1f8>)
 800b672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b676:	601a      	str	r2, [r3, #0]
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b680:	f001 ff90 	bl	800d5a4 <vPortExitCritical>
				return pdPASS;
 800b684:	2301      	movs	r3, #1
 800b686:	e063      	b.n	800b750 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d103      	bne.n	800b696 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b68e:	f001 ff89 	bl	800d5a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b692:	2300      	movs	r3, #0
 800b694:	e05c      	b.n	800b750 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d106      	bne.n	800b6aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b69c:	f107 0314 	add.w	r3, r7, #20
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f001 f89b 	bl	800c7dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6aa:	f001 ff7b 	bl	800d5a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b6ae:	f000 fdfb 	bl	800c2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b6b2:	f001 ff47 	bl	800d544 <vPortEnterCritical>
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6bc:	b25b      	sxtb	r3, r3
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c2:	d103      	bne.n	800b6cc <xQueueGenericSend+0x16c>
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6d2:	b25b      	sxtb	r3, r3
 800b6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d8:	d103      	bne.n	800b6e2 <xQueueGenericSend+0x182>
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6e2:	f001 ff5f 	bl	800d5a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6e6:	1d3a      	adds	r2, r7, #4
 800b6e8:	f107 0314 	add.w	r3, r7, #20
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f001 f88a 	bl	800c808 <xTaskCheckForTimeOut>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d124      	bne.n	800b744 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6fc:	f000 fb22 	bl	800bd44 <prvIsQueueFull>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d018      	beq.n	800b738 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b708:	3310      	adds	r3, #16
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	4611      	mov	r1, r2
 800b70e:	4618      	mov	r0, r3
 800b710:	f000 ffb0 	bl	800c674 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b716:	f000 faad 	bl	800bc74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b71a:	f000 fdd3 	bl	800c2c4 <xTaskResumeAll>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	f47f af7c 	bne.w	800b61e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b726:	4b0c      	ldr	r3, [pc, #48]	; (800b758 <xQueueGenericSend+0x1f8>)
 800b728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b72c:	601a      	str	r2, [r3, #0]
 800b72e:	f3bf 8f4f 	dsb	sy
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	e772      	b.n	800b61e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b73a:	f000 fa9b 	bl	800bc74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b73e:	f000 fdc1 	bl	800c2c4 <xTaskResumeAll>
 800b742:	e76c      	b.n	800b61e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b746:	f000 fa95 	bl	800bc74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b74a:	f000 fdbb 	bl	800c2c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b74e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b750:	4618      	mov	r0, r3
 800b752:	3738      	adds	r7, #56	; 0x38
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	e000ed04 	.word	0xe000ed04

0800b75c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b090      	sub	sp, #64	; 0x40
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b770:	2b00      	cmp	r3, #0
 800b772:	d10a      	bne.n	800b78a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d103      	bne.n	800b798 <xQueueGenericSendFromISR+0x3c>
 800b790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <xQueueGenericSendFromISR+0x40>
 800b798:	2301      	movs	r3, #1
 800b79a:	e000      	b.n	800b79e <xQueueGenericSendFromISR+0x42>
 800b79c:	2300      	movs	r3, #0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10a      	bne.n	800b7b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b7b4:	bf00      	nop
 800b7b6:	e7fe      	b.n	800b7b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2b02      	cmp	r3, #2
 800b7bc:	d103      	bne.n	800b7c6 <xQueueGenericSendFromISR+0x6a>
 800b7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c2:	2b01      	cmp	r3, #1
 800b7c4:	d101      	bne.n	800b7ca <xQueueGenericSendFromISR+0x6e>
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e000      	b.n	800b7cc <xQueueGenericSendFromISR+0x70>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	623b      	str	r3, [r7, #32]
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7e6:	f001 ff8f 	bl	800d708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7ea:	f3ef 8211 	mrs	r2, BASEPRI
 800b7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	61fa      	str	r2, [r7, #28]
 800b800:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b802:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b804:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b80e:	429a      	cmp	r2, r3
 800b810:	d302      	bcc.n	800b818 <xQueueGenericSendFromISR+0xbc>
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	2b02      	cmp	r3, #2
 800b816:	d12f      	bne.n	800b878 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b826:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b82e:	f000 f991 	bl	800bb54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b832:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83a:	d112      	bne.n	800b862 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	2b00      	cmp	r3, #0
 800b842:	d016      	beq.n	800b872 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b846:	3324      	adds	r3, #36	; 0x24
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 ff63 	bl	800c714 <xTaskRemoveFromEventList>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00e      	beq.n	800b872 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00b      	beq.n	800b872 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	e007      	b.n	800b872 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b862:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b866:	3301      	adds	r3, #1
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	b25a      	sxtb	r2, r3
 800b86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b872:	2301      	movs	r3, #1
 800b874:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b876:	e001      	b.n	800b87c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b878:	2300      	movs	r3, #0
 800b87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b87e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b886:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3740      	adds	r7, #64	; 0x40
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08c      	sub	sp, #48	; 0x30
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60f8      	str	r0, [r7, #12]
 800b89c:	60b9      	str	r1, [r7, #8]
 800b89e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d10a      	bne.n	800b8c4 <xQueueReceive+0x30>
	__asm volatile
 800b8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b2:	f383 8811 	msr	BASEPRI, r3
 800b8b6:	f3bf 8f6f 	isb	sy
 800b8ba:	f3bf 8f4f 	dsb	sy
 800b8be:	623b      	str	r3, [r7, #32]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d103      	bne.n	800b8d2 <xQueueReceive+0x3e>
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <xQueueReceive+0x42>
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e000      	b.n	800b8d8 <xQueueReceive+0x44>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d10a      	bne.n	800b8f2 <xQueueReceive+0x5e>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	61fb      	str	r3, [r7, #28]
}
 800b8ee:	bf00      	nop
 800b8f0:	e7fe      	b.n	800b8f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8f2:	f001 f8cd 	bl	800ca90 <xTaskGetSchedulerState>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d102      	bne.n	800b902 <xQueueReceive+0x6e>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d101      	bne.n	800b906 <xQueueReceive+0x72>
 800b902:	2301      	movs	r3, #1
 800b904:	e000      	b.n	800b908 <xQueueReceive+0x74>
 800b906:	2300      	movs	r3, #0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10a      	bne.n	800b922 <xQueueReceive+0x8e>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	f383 8811 	msr	BASEPRI, r3
 800b914:	f3bf 8f6f 	isb	sy
 800b918:	f3bf 8f4f 	dsb	sy
 800b91c:	61bb      	str	r3, [r7, #24]
}
 800b91e:	bf00      	nop
 800b920:	e7fe      	b.n	800b920 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b922:	f001 fe0f 	bl	800d544 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01f      	beq.n	800b972 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b932:	68b9      	ldr	r1, [r7, #8]
 800b934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b936:	f000 f977 	bl	800bc28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93c:	1e5a      	subs	r2, r3, #1
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00f      	beq.n	800b96a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94c:	3310      	adds	r3, #16
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 fee0 	bl	800c714 <xTaskRemoveFromEventList>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d007      	beq.n	800b96a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b95a:	4b3d      	ldr	r3, [pc, #244]	; (800ba50 <xQueueReceive+0x1bc>)
 800b95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b96a:	f001 fe1b 	bl	800d5a4 <vPortExitCritical>
				return pdPASS;
 800b96e:	2301      	movs	r3, #1
 800b970:	e069      	b.n	800ba46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d103      	bne.n	800b980 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b978:	f001 fe14 	bl	800d5a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b97c:	2300      	movs	r3, #0
 800b97e:	e062      	b.n	800ba46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	2b00      	cmp	r3, #0
 800b984:	d106      	bne.n	800b994 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b986:	f107 0310 	add.w	r3, r7, #16
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 ff26 	bl	800c7dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b990:	2301      	movs	r3, #1
 800b992:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b994:	f001 fe06 	bl	800d5a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b998:	f000 fc86 	bl	800c2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b99c:	f001 fdd2 	bl	800d544 <vPortEnterCritical>
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9a6:	b25b      	sxtb	r3, r3
 800b9a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ac:	d103      	bne.n	800b9b6 <xQueueReceive+0x122>
 800b9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9bc:	b25b      	sxtb	r3, r3
 800b9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c2:	d103      	bne.n	800b9cc <xQueueReceive+0x138>
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9cc:	f001 fdea 	bl	800d5a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9d0:	1d3a      	adds	r2, r7, #4
 800b9d2:	f107 0310 	add.w	r3, r7, #16
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f000 ff15 	bl	800c808 <xTaskCheckForTimeOut>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d123      	bne.n	800ba2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9e6:	f000 f997 	bl	800bd18 <prvIsQueueEmpty>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d017      	beq.n	800ba20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	3324      	adds	r3, #36	; 0x24
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 fe3b 	bl	800c674 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b9fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba00:	f000 f938 	bl	800bc74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba04:	f000 fc5e 	bl	800c2c4 <xTaskResumeAll>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d189      	bne.n	800b922 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ba0e:	4b10      	ldr	r3, [pc, #64]	; (800ba50 <xQueueReceive+0x1bc>)
 800ba10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	e780      	b.n	800b922 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba22:	f000 f927 	bl	800bc74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba26:	f000 fc4d 	bl	800c2c4 <xTaskResumeAll>
 800ba2a:	e77a      	b.n	800b922 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba2e:	f000 f921 	bl	800bc74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba32:	f000 fc47 	bl	800c2c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba38:	f000 f96e 	bl	800bd18 <prvIsQueueEmpty>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f43f af6f 	beq.w	800b922 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3730      	adds	r7, #48	; 0x30
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	e000ed04 	.word	0xe000ed04

0800ba54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b08e      	sub	sp, #56	; 0x38
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10a      	bne.n	800ba80 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	623b      	str	r3, [r7, #32]
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d103      	bne.n	800ba8e <xQueueReceiveFromISR+0x3a>
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <xQueueReceiveFromISR+0x3e>
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e000      	b.n	800ba94 <xQueueReceiveFromISR+0x40>
 800ba92:	2300      	movs	r3, #0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d10a      	bne.n	800baae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ba98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9c:	f383 8811 	msr	BASEPRI, r3
 800baa0:	f3bf 8f6f 	isb	sy
 800baa4:	f3bf 8f4f 	dsb	sy
 800baa8:	61fb      	str	r3, [r7, #28]
}
 800baaa:	bf00      	nop
 800baac:	e7fe      	b.n	800baac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800baae:	f001 fe2b 	bl	800d708 <vPortValidateInterruptPriority>
	__asm volatile
 800bab2:	f3ef 8211 	mrs	r2, BASEPRI
 800bab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	61ba      	str	r2, [r7, #24]
 800bac8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800baca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bacc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d02f      	beq.n	800bb3a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800badc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bae4:	68b9      	ldr	r1, [r7, #8]
 800bae6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae8:	f000 f89e 	bl	800bc28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800baec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baee:	1e5a      	subs	r2, r3, #1
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800baf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800baf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bafc:	d112      	bne.n	800bb24 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d016      	beq.n	800bb34 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb08:	3310      	adds	r3, #16
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 fe02 	bl	800c714 <xTaskRemoveFromEventList>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00e      	beq.n	800bb34 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00b      	beq.n	800bb34 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
 800bb22:	e007      	b.n	800bb34 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb28:	3301      	adds	r3, #1
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	b25a      	sxtb	r2, r3
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bb34:	2301      	movs	r3, #1
 800bb36:	637b      	str	r3, [r7, #52]	; 0x34
 800bb38:	e001      	b.n	800bb3e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f383 8811 	msr	BASEPRI, r3
}
 800bb48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3738      	adds	r7, #56	; 0x38
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bb60:	2300      	movs	r3, #0
 800bb62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d10d      	bne.n	800bb8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d14d      	bne.n	800bc16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 ffa4 	bl	800cacc <xTaskPriorityDisinherit>
 800bb84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	609a      	str	r2, [r3, #8]
 800bb8c:	e043      	b.n	800bc16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d119      	bne.n	800bbc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6858      	ldr	r0, [r3, #4]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	68b9      	ldr	r1, [r7, #8]
 800bba0:	f002 fcf6 	bl	800e590 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	685a      	ldr	r2, [r3, #4]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbac:	441a      	add	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d32b      	bcc.n	800bc16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681a      	ldr	r2, [r3, #0]
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	605a      	str	r2, [r3, #4]
 800bbc6:	e026      	b.n	800bc16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	68d8      	ldr	r0, [r3, #12]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	f002 fcdc 	bl	800e590 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	68da      	ldr	r2, [r3, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe0:	425b      	negs	r3, r3
 800bbe2:	441a      	add	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	68da      	ldr	r2, [r3, #12]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d207      	bcs.n	800bc04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	689a      	ldr	r2, [r3, #8]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfc:	425b      	negs	r3, r3
 800bbfe:	441a      	add	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d105      	bne.n	800bc16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	1c5a      	adds	r2, r3, #1
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bc1e:	697b      	ldr	r3, [r7, #20]
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d018      	beq.n	800bc6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68da      	ldr	r2, [r3, #12]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc42:	441a      	add	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68da      	ldr	r2, [r3, #12]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d303      	bcc.n	800bc5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	68d9      	ldr	r1, [r3, #12]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc64:	461a      	mov	r2, r3
 800bc66:	6838      	ldr	r0, [r7, #0]
 800bc68:	f002 fc92 	bl	800e590 <memcpy>
	}
}
 800bc6c:	bf00      	nop
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc7c:	f001 fc62 	bl	800d544 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc88:	e011      	b.n	800bcae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d012      	beq.n	800bcb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	3324      	adds	r3, #36	; 0x24
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 fd3c 	bl	800c714 <xTaskRemoveFromEventList>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bca2:	f000 fe13 	bl	800c8cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
 800bca8:	3b01      	subs	r3, #1
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	dce9      	bgt.n	800bc8a <prvUnlockQueue+0x16>
 800bcb6:	e000      	b.n	800bcba <prvUnlockQueue+0x46>
					break;
 800bcb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	22ff      	movs	r2, #255	; 0xff
 800bcbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bcc2:	f001 fc6f 	bl	800d5a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bcc6:	f001 fc3d 	bl	800d544 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcd2:	e011      	b.n	800bcf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d012      	beq.n	800bd02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	3310      	adds	r3, #16
 800bce0:	4618      	mov	r0, r3
 800bce2:	f000 fd17 	bl	800c714 <xTaskRemoveFromEventList>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d001      	beq.n	800bcf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bcec:	f000 fdee 	bl	800c8cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bcf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	dce9      	bgt.n	800bcd4 <prvUnlockQueue+0x60>
 800bd00:	e000      	b.n	800bd04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	22ff      	movs	r2, #255	; 0xff
 800bd08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bd0c:	f001 fc4a 	bl	800d5a4 <vPortExitCritical>
}
 800bd10:	bf00      	nop
 800bd12:	3710      	adds	r7, #16
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd20:	f001 fc10 	bl	800d544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d102      	bne.n	800bd32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	60fb      	str	r3, [r7, #12]
 800bd30:	e001      	b.n	800bd36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd32:	2300      	movs	r3, #0
 800bd34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd36:	f001 fc35 	bl	800d5a4 <vPortExitCritical>

	return xReturn;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd4c:	f001 fbfa 	bl	800d544 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d102      	bne.n	800bd62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	e001      	b.n	800bd66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bd62:	2300      	movs	r3, #0
 800bd64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd66:	f001 fc1d 	bl	800d5a4 <vPortExitCritical>

	return xReturn;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd7e:	2300      	movs	r3, #0
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	e014      	b.n	800bdae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd84:	4a0f      	ldr	r2, [pc, #60]	; (800bdc4 <vQueueAddToRegistry+0x50>)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10b      	bne.n	800bda8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd90:	490c      	ldr	r1, [pc, #48]	; (800bdc4 <vQueueAddToRegistry+0x50>)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd9a:	4a0a      	ldr	r2, [pc, #40]	; (800bdc4 <vQueueAddToRegistry+0x50>)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	00db      	lsls	r3, r3, #3
 800bda0:	4413      	add	r3, r2
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bda6:	e006      	b.n	800bdb6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	60fb      	str	r3, [r7, #12]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b07      	cmp	r3, #7
 800bdb2:	d9e7      	bls.n	800bd84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bdb4:	bf00      	nop
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop
 800bdc4:	20000bec 	.word	0x20000bec

0800bdc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bdd8:	f001 fbb4 	bl	800d544 <vPortEnterCritical>
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bde2:	b25b      	sxtb	r3, r3
 800bde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde8:	d103      	bne.n	800bdf2 <vQueueWaitForMessageRestricted+0x2a>
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdf8:	b25b      	sxtb	r3, r3
 800bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfe:	d103      	bne.n	800be08 <vQueueWaitForMessageRestricted+0x40>
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be08:	f001 fbcc 	bl	800d5a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be10:	2b00      	cmp	r3, #0
 800be12:	d106      	bne.n	800be22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	3324      	adds	r3, #36	; 0x24
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	68b9      	ldr	r1, [r7, #8]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 fc4d 	bl	800c6bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be22:	6978      	ldr	r0, [r7, #20]
 800be24:	f7ff ff26 	bl	800bc74 <prvUnlockQueue>
	}
 800be28:	bf00      	nop
 800be2a:	3718      	adds	r7, #24
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be30:	b580      	push	{r7, lr}
 800be32:	b08e      	sub	sp, #56	; 0x38
 800be34:	af04      	add	r7, sp, #16
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
 800be3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10a      	bne.n	800be5a <xTaskCreateStatic+0x2a>
	__asm volatile
 800be44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be48:	f383 8811 	msr	BASEPRI, r3
 800be4c:	f3bf 8f6f 	isb	sy
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	623b      	str	r3, [r7, #32]
}
 800be56:	bf00      	nop
 800be58:	e7fe      	b.n	800be58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10a      	bne.n	800be76 <xTaskCreateStatic+0x46>
	__asm volatile
 800be60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be64:	f383 8811 	msr	BASEPRI, r3
 800be68:	f3bf 8f6f 	isb	sy
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	61fb      	str	r3, [r7, #28]
}
 800be72:	bf00      	nop
 800be74:	e7fe      	b.n	800be74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be76:	235c      	movs	r3, #92	; 0x5c
 800be78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2b5c      	cmp	r3, #92	; 0x5c
 800be7e:	d00a      	beq.n	800be96 <xTaskCreateStatic+0x66>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	61bb      	str	r3, [r7, #24]
}
 800be92:	bf00      	nop
 800be94:	e7fe      	b.n	800be94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d01e      	beq.n	800bedc <xTaskCreateStatic+0xac>
 800be9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d01b      	beq.n	800bedc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800beac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800beae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb0:	2202      	movs	r2, #2
 800beb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800beb6:	2300      	movs	r3, #0
 800beb8:	9303      	str	r3, [sp, #12]
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	9302      	str	r3, [sp, #8]
 800bebe:	f107 0314 	add.w	r3, r7, #20
 800bec2:	9301      	str	r3, [sp, #4]
 800bec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	68b9      	ldr	r1, [r7, #8]
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f000 f850 	bl	800bf74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bed6:	f000 f8dd 	bl	800c094 <prvAddNewTaskToReadyList>
 800beda:	e001      	b.n	800bee0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bee0:	697b      	ldr	r3, [r7, #20]
	}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3728      	adds	r7, #40	; 0x28
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}

0800beea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800beea:	b580      	push	{r7, lr}
 800beec:	b08c      	sub	sp, #48	; 0x30
 800beee:	af04      	add	r7, sp, #16
 800bef0:	60f8      	str	r0, [r7, #12]
 800bef2:	60b9      	str	r1, [r7, #8]
 800bef4:	603b      	str	r3, [r7, #0]
 800bef6:	4613      	mov	r3, r2
 800bef8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800befa:	88fb      	ldrh	r3, [r7, #6]
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4618      	mov	r0, r3
 800bf00:	f001 fc42 	bl	800d788 <pvPortMalloc>
 800bf04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00e      	beq.n	800bf2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf0c:	205c      	movs	r0, #92	; 0x5c
 800bf0e:	f001 fc3b 	bl	800d788 <pvPortMalloc>
 800bf12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf14:	69fb      	ldr	r3, [r7, #28]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d003      	beq.n	800bf22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	631a      	str	r2, [r3, #48]	; 0x30
 800bf20:	e005      	b.n	800bf2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf22:	6978      	ldr	r0, [r7, #20]
 800bf24:	f001 fcfc 	bl	800d920 <vPortFree>
 800bf28:	e001      	b.n	800bf2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d017      	beq.n	800bf64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf3c:	88fa      	ldrh	r2, [r7, #6]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9303      	str	r3, [sp, #12]
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	9302      	str	r3, [sp, #8]
 800bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf48:	9301      	str	r3, [sp, #4]
 800bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4c:	9300      	str	r3, [sp, #0]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	68b9      	ldr	r1, [r7, #8]
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f000 f80e 	bl	800bf74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf58:	69f8      	ldr	r0, [r7, #28]
 800bf5a:	f000 f89b 	bl	800c094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	61bb      	str	r3, [r7, #24]
 800bf62:	e002      	b.n	800bf6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf64:	f04f 33ff 	mov.w	r3, #4294967295
 800bf68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bf6a:	69bb      	ldr	r3, [r7, #24]
	}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3720      	adds	r7, #32
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	21a5      	movs	r1, #165	; 0xa5
 800bf8e:	f002 fb0d 	bl	800e5ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	f023 0307 	bic.w	r3, r3, #7
 800bfaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	f003 0307 	and.w	r3, r3, #7
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00a      	beq.n	800bfcc <prvInitialiseNewTask+0x58>
	__asm volatile
 800bfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	617b      	str	r3, [r7, #20]
}
 800bfc8:	bf00      	nop
 800bfca:	e7fe      	b.n	800bfca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d01f      	beq.n	800c012 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	61fb      	str	r3, [r7, #28]
 800bfd6:	e012      	b.n	800bffe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	4413      	add	r3, r2
 800bfde:	7819      	ldrb	r1, [r3, #0]
 800bfe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	3334      	adds	r3, #52	; 0x34
 800bfe8:	460a      	mov	r2, r1
 800bfea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	4413      	add	r3, r2
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d006      	beq.n	800c006 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	3301      	adds	r3, #1
 800bffc:	61fb      	str	r3, [r7, #28]
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	2b0f      	cmp	r3, #15
 800c002:	d9e9      	bls.n	800bfd8 <prvInitialiseNewTask+0x64>
 800c004:	e000      	b.n	800c008 <prvInitialiseNewTask+0x94>
			{
				break;
 800c006:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c010:	e003      	b.n	800c01a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c014:	2200      	movs	r2, #0
 800c016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c01c:	2b37      	cmp	r3, #55	; 0x37
 800c01e:	d901      	bls.n	800c024 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c020:	2337      	movs	r3, #55	; 0x37
 800c022:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c028:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c02e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c032:	2200      	movs	r2, #0
 800c034:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c038:	3304      	adds	r3, #4
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7ff f8be 	bl	800b1bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c042:	3318      	adds	r3, #24
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff f8b9 	bl	800b1bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c04e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c052:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c058:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c05e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	2200      	movs	r2, #0
 800c064:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c06e:	683a      	ldr	r2, [r7, #0]
 800c070:	68f9      	ldr	r1, [r7, #12]
 800c072:	69b8      	ldr	r0, [r7, #24]
 800c074:	f001 f93a 	bl	800d2ec <pxPortInitialiseStack>
 800c078:	4602      	mov	r2, r0
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c080:	2b00      	cmp	r3, #0
 800c082:	d002      	beq.n	800c08a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c08a:	bf00      	nop
 800c08c:	3720      	adds	r7, #32
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c09c:	f001 fa52 	bl	800d544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c0a0:	4b2d      	ldr	r3, [pc, #180]	; (800c158 <prvAddNewTaskToReadyList+0xc4>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3301      	adds	r3, #1
 800c0a6:	4a2c      	ldr	r2, [pc, #176]	; (800c158 <prvAddNewTaskToReadyList+0xc4>)
 800c0a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c0aa:	4b2c      	ldr	r3, [pc, #176]	; (800c15c <prvAddNewTaskToReadyList+0xc8>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d109      	bne.n	800c0c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c0b2:	4a2a      	ldr	r2, [pc, #168]	; (800c15c <prvAddNewTaskToReadyList+0xc8>)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c0b8:	4b27      	ldr	r3, [pc, #156]	; (800c158 <prvAddNewTaskToReadyList+0xc4>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d110      	bne.n	800c0e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c0c0:	f000 fc28 	bl	800c914 <prvInitialiseTaskLists>
 800c0c4:	e00d      	b.n	800c0e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c0c6:	4b26      	ldr	r3, [pc, #152]	; (800c160 <prvAddNewTaskToReadyList+0xcc>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d109      	bne.n	800c0e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c0ce:	4b23      	ldr	r3, [pc, #140]	; (800c15c <prvAddNewTaskToReadyList+0xc8>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d802      	bhi.n	800c0e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c0dc:	4a1f      	ldr	r2, [pc, #124]	; (800c15c <prvAddNewTaskToReadyList+0xc8>)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0e2:	4b20      	ldr	r3, [pc, #128]	; (800c164 <prvAddNewTaskToReadyList+0xd0>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	4a1e      	ldr	r2, [pc, #120]	; (800c164 <prvAddNewTaskToReadyList+0xd0>)
 800c0ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0ec:	4b1d      	ldr	r3, [pc, #116]	; (800c164 <prvAddNewTaskToReadyList+0xd0>)
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f8:	4b1b      	ldr	r3, [pc, #108]	; (800c168 <prvAddNewTaskToReadyList+0xd4>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d903      	bls.n	800c108 <prvAddNewTaskToReadyList+0x74>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	4a18      	ldr	r2, [pc, #96]	; (800c168 <prvAddNewTaskToReadyList+0xd4>)
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10c:	4613      	mov	r3, r2
 800c10e:	009b      	lsls	r3, r3, #2
 800c110:	4413      	add	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4a15      	ldr	r2, [pc, #84]	; (800c16c <prvAddNewTaskToReadyList+0xd8>)
 800c116:	441a      	add	r2, r3
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	3304      	adds	r3, #4
 800c11c:	4619      	mov	r1, r3
 800c11e:	4610      	mov	r0, r2
 800c120:	f7ff f859 	bl	800b1d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c124:	f001 fa3e 	bl	800d5a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c128:	4b0d      	ldr	r3, [pc, #52]	; (800c160 <prvAddNewTaskToReadyList+0xcc>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00e      	beq.n	800c14e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c130:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <prvAddNewTaskToReadyList+0xc8>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d207      	bcs.n	800c14e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c13e:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <prvAddNewTaskToReadyList+0xdc>)
 800c140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c14e:	bf00      	nop
 800c150:	3708      	adds	r7, #8
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	20001100 	.word	0x20001100
 800c15c:	20000c2c 	.word	0x20000c2c
 800c160:	2000110c 	.word	0x2000110c
 800c164:	2000111c 	.word	0x2000111c
 800c168:	20001108 	.word	0x20001108
 800c16c:	20000c30 	.word	0x20000c30
 800c170:	e000ed04 	.word	0xe000ed04

0800c174 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c17c:	2300      	movs	r3, #0
 800c17e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d017      	beq.n	800c1b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c186:	4b13      	ldr	r3, [pc, #76]	; (800c1d4 <vTaskDelay+0x60>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00a      	beq.n	800c1a4 <vTaskDelay+0x30>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	60bb      	str	r3, [r7, #8]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c1a4:	f000 f880 	bl	800c2a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fcfc 	bl	800cba8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c1b0:	f000 f888 	bl	800c2c4 <xTaskResumeAll>
 800c1b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d107      	bne.n	800c1cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c1bc:	4b06      	ldr	r3, [pc, #24]	; (800c1d8 <vTaskDelay+0x64>)
 800c1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c1cc:	bf00      	nop
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	20001128 	.word	0x20001128
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b08a      	sub	sp, #40	; 0x28
 800c1e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1ea:	463a      	mov	r2, r7
 800c1ec:	1d39      	adds	r1, r7, #4
 800c1ee:	f107 0308 	add.w	r3, r7, #8
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe ff8e 	bl	800b114 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	9202      	str	r2, [sp, #8]
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	2300      	movs	r3, #0
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	2300      	movs	r3, #0
 800c208:	460a      	mov	r2, r1
 800c20a:	4921      	ldr	r1, [pc, #132]	; (800c290 <vTaskStartScheduler+0xb4>)
 800c20c:	4821      	ldr	r0, [pc, #132]	; (800c294 <vTaskStartScheduler+0xb8>)
 800c20e:	f7ff fe0f 	bl	800be30 <xTaskCreateStatic>
 800c212:	4603      	mov	r3, r0
 800c214:	4a20      	ldr	r2, [pc, #128]	; (800c298 <vTaskStartScheduler+0xbc>)
 800c216:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c218:	4b1f      	ldr	r3, [pc, #124]	; (800c298 <vTaskStartScheduler+0xbc>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d002      	beq.n	800c226 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c220:	2301      	movs	r3, #1
 800c222:	617b      	str	r3, [r7, #20]
 800c224:	e001      	b.n	800c22a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c226:	2300      	movs	r3, #0
 800c228:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d102      	bne.n	800c236 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c230:	f000 fd0e 	bl	800cc50 <xTimerCreateTimerTask>
 800c234:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d116      	bne.n	800c26a <vTaskStartScheduler+0x8e>
	__asm volatile
 800c23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c240:	f383 8811 	msr	BASEPRI, r3
 800c244:	f3bf 8f6f 	isb	sy
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	613b      	str	r3, [r7, #16]
}
 800c24e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c250:	4b12      	ldr	r3, [pc, #72]	; (800c29c <vTaskStartScheduler+0xc0>)
 800c252:	f04f 32ff 	mov.w	r2, #4294967295
 800c256:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c258:	4b11      	ldr	r3, [pc, #68]	; (800c2a0 <vTaskStartScheduler+0xc4>)
 800c25a:	2201      	movs	r2, #1
 800c25c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c25e:	4b11      	ldr	r3, [pc, #68]	; (800c2a4 <vTaskStartScheduler+0xc8>)
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c264:	f001 f8cc 	bl	800d400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c268:	e00e      	b.n	800c288 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c270:	d10a      	bne.n	800c288 <vTaskStartScheduler+0xac>
	__asm volatile
 800c272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c276:	f383 8811 	msr	BASEPRI, r3
 800c27a:	f3bf 8f6f 	isb	sy
 800c27e:	f3bf 8f4f 	dsb	sy
 800c282:	60fb      	str	r3, [r7, #12]
}
 800c284:	bf00      	nop
 800c286:	e7fe      	b.n	800c286 <vTaskStartScheduler+0xaa>
}
 800c288:	bf00      	nop
 800c28a:	3718      	adds	r7, #24
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	0800e5e0 	.word	0x0800e5e0
 800c294:	0800c8e5 	.word	0x0800c8e5
 800c298:	20001124 	.word	0x20001124
 800c29c:	20001120 	.word	0x20001120
 800c2a0:	2000110c 	.word	0x2000110c
 800c2a4:	20001104 	.word	0x20001104

0800c2a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c2ac:	4b04      	ldr	r3, [pc, #16]	; (800c2c0 <vTaskSuspendAll+0x18>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	3301      	adds	r3, #1
 800c2b2:	4a03      	ldr	r2, [pc, #12]	; (800c2c0 <vTaskSuspendAll+0x18>)
 800c2b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c2b6:	bf00      	nop
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr
 800c2c0:	20001128 	.word	0x20001128

0800c2c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2d2:	4b42      	ldr	r3, [pc, #264]	; (800c3dc <xTaskResumeAll+0x118>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10a      	bne.n	800c2f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800c2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2de:	f383 8811 	msr	BASEPRI, r3
 800c2e2:	f3bf 8f6f 	isb	sy
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	603b      	str	r3, [r7, #0]
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c2f0:	f001 f928 	bl	800d544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c2f4:	4b39      	ldr	r3, [pc, #228]	; (800c3dc <xTaskResumeAll+0x118>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	4a38      	ldr	r2, [pc, #224]	; (800c3dc <xTaskResumeAll+0x118>)
 800c2fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2fe:	4b37      	ldr	r3, [pc, #220]	; (800c3dc <xTaskResumeAll+0x118>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d162      	bne.n	800c3cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c306:	4b36      	ldr	r3, [pc, #216]	; (800c3e0 <xTaskResumeAll+0x11c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d05e      	beq.n	800c3cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c30e:	e02f      	b.n	800c370 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c310:	4b34      	ldr	r3, [pc, #208]	; (800c3e4 <xTaskResumeAll+0x120>)
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	3318      	adds	r3, #24
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe ffb7 	bl	800b290 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3304      	adds	r3, #4
 800c326:	4618      	mov	r0, r3
 800c328:	f7fe ffb2 	bl	800b290 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c330:	4b2d      	ldr	r3, [pc, #180]	; (800c3e8 <xTaskResumeAll+0x124>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	429a      	cmp	r2, r3
 800c336:	d903      	bls.n	800c340 <xTaskResumeAll+0x7c>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33c:	4a2a      	ldr	r2, [pc, #168]	; (800c3e8 <xTaskResumeAll+0x124>)
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c344:	4613      	mov	r3, r2
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4a27      	ldr	r2, [pc, #156]	; (800c3ec <xTaskResumeAll+0x128>)
 800c34e:	441a      	add	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	3304      	adds	r3, #4
 800c354:	4619      	mov	r1, r3
 800c356:	4610      	mov	r0, r2
 800c358:	f7fe ff3d 	bl	800b1d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c360:	4b23      	ldr	r3, [pc, #140]	; (800c3f0 <xTaskResumeAll+0x12c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c366:	429a      	cmp	r2, r3
 800c368:	d302      	bcc.n	800c370 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c36a:	4b22      	ldr	r3, [pc, #136]	; (800c3f4 <xTaskResumeAll+0x130>)
 800c36c:	2201      	movs	r2, #1
 800c36e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c370:	4b1c      	ldr	r3, [pc, #112]	; (800c3e4 <xTaskResumeAll+0x120>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1cb      	bne.n	800c310 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d001      	beq.n	800c382 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c37e:	f000 fb67 	bl	800ca50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c382:	4b1d      	ldr	r3, [pc, #116]	; (800c3f8 <xTaskResumeAll+0x134>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d010      	beq.n	800c3b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c38e:	f000 f859 	bl	800c444 <xTaskIncrementTick>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d002      	beq.n	800c39e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c398:	4b16      	ldr	r3, [pc, #88]	; (800c3f4 <xTaskResumeAll+0x130>)
 800c39a:	2201      	movs	r2, #1
 800c39c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d1f1      	bne.n	800c38e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c3aa:	4b13      	ldr	r3, [pc, #76]	; (800c3f8 <xTaskResumeAll+0x134>)
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c3b0:	4b10      	ldr	r3, [pc, #64]	; (800c3f4 <xTaskResumeAll+0x130>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d009      	beq.n	800c3cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c3bc:	4b0f      	ldr	r3, [pc, #60]	; (800c3fc <xTaskResumeAll+0x138>)
 800c3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3c2:	601a      	str	r2, [r3, #0]
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3cc:	f001 f8ea 	bl	800d5a4 <vPortExitCritical>

	return xAlreadyYielded;
 800c3d0:	68bb      	ldr	r3, [r7, #8]
}
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	20001128 	.word	0x20001128
 800c3e0:	20001100 	.word	0x20001100
 800c3e4:	200010c0 	.word	0x200010c0
 800c3e8:	20001108 	.word	0x20001108
 800c3ec:	20000c30 	.word	0x20000c30
 800c3f0:	20000c2c 	.word	0x20000c2c
 800c3f4:	20001114 	.word	0x20001114
 800c3f8:	20001110 	.word	0x20001110
 800c3fc:	e000ed04 	.word	0xe000ed04

0800c400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c406:	4b05      	ldr	r3, [pc, #20]	; (800c41c <xTaskGetTickCount+0x1c>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c40c:	687b      	ldr	r3, [r7, #4]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	370c      	adds	r7, #12
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop
 800c41c:	20001104 	.word	0x20001104

0800c420 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c426:	f001 f96f 	bl	800d708 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c42a:	2300      	movs	r3, #0
 800c42c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c42e:	4b04      	ldr	r3, [pc, #16]	; (800c440 <xTaskGetTickCountFromISR+0x20>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c434:	683b      	ldr	r3, [r7, #0]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3708      	adds	r7, #8
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	20001104 	.word	0x20001104

0800c444 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b086      	sub	sp, #24
 800c448:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c44a:	2300      	movs	r3, #0
 800c44c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c44e:	4b4f      	ldr	r3, [pc, #316]	; (800c58c <xTaskIncrementTick+0x148>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	f040 808f 	bne.w	800c576 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c458:	4b4d      	ldr	r3, [pc, #308]	; (800c590 <xTaskIncrementTick+0x14c>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	3301      	adds	r3, #1
 800c45e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c460:	4a4b      	ldr	r2, [pc, #300]	; (800c590 <xTaskIncrementTick+0x14c>)
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d120      	bne.n	800c4ae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c46c:	4b49      	ldr	r3, [pc, #292]	; (800c594 <xTaskIncrementTick+0x150>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d00a      	beq.n	800c48c <xTaskIncrementTick+0x48>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	603b      	str	r3, [r7, #0]
}
 800c488:	bf00      	nop
 800c48a:	e7fe      	b.n	800c48a <xTaskIncrementTick+0x46>
 800c48c:	4b41      	ldr	r3, [pc, #260]	; (800c594 <xTaskIncrementTick+0x150>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	4b41      	ldr	r3, [pc, #260]	; (800c598 <xTaskIncrementTick+0x154>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a3f      	ldr	r2, [pc, #252]	; (800c594 <xTaskIncrementTick+0x150>)
 800c498:	6013      	str	r3, [r2, #0]
 800c49a:	4a3f      	ldr	r2, [pc, #252]	; (800c598 <xTaskIncrementTick+0x154>)
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6013      	str	r3, [r2, #0]
 800c4a0:	4b3e      	ldr	r3, [pc, #248]	; (800c59c <xTaskIncrementTick+0x158>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	4a3d      	ldr	r2, [pc, #244]	; (800c59c <xTaskIncrementTick+0x158>)
 800c4a8:	6013      	str	r3, [r2, #0]
 800c4aa:	f000 fad1 	bl	800ca50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c4ae:	4b3c      	ldr	r3, [pc, #240]	; (800c5a0 <xTaskIncrementTick+0x15c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	693a      	ldr	r2, [r7, #16]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d349      	bcc.n	800c54c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4b8:	4b36      	ldr	r3, [pc, #216]	; (800c594 <xTaskIncrementTick+0x150>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d104      	bne.n	800c4cc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4c2:	4b37      	ldr	r3, [pc, #220]	; (800c5a0 <xTaskIncrementTick+0x15c>)
 800c4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c8:	601a      	str	r2, [r3, #0]
					break;
 800c4ca:	e03f      	b.n	800c54c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4cc:	4b31      	ldr	r3, [pc, #196]	; (800c594 <xTaskIncrementTick+0x150>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d203      	bcs.n	800c4ec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c4e4:	4a2e      	ldr	r2, [pc, #184]	; (800c5a0 <xTaskIncrementTick+0x15c>)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4ea:	e02f      	b.n	800c54c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7fe fecd 	bl	800b290 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d004      	beq.n	800c508 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	3318      	adds	r3, #24
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe fec4 	bl	800b290 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50c:	4b25      	ldr	r3, [pc, #148]	; (800c5a4 <xTaskIncrementTick+0x160>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	429a      	cmp	r2, r3
 800c512:	d903      	bls.n	800c51c <xTaskIncrementTick+0xd8>
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c518:	4a22      	ldr	r2, [pc, #136]	; (800c5a4 <xTaskIncrementTick+0x160>)
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c520:	4613      	mov	r3, r2
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4413      	add	r3, r2
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	4a1f      	ldr	r2, [pc, #124]	; (800c5a8 <xTaskIncrementTick+0x164>)
 800c52a:	441a      	add	r2, r3
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	3304      	adds	r3, #4
 800c530:	4619      	mov	r1, r3
 800c532:	4610      	mov	r0, r2
 800c534:	f7fe fe4f 	bl	800b1d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53c:	4b1b      	ldr	r3, [pc, #108]	; (800c5ac <xTaskIncrementTick+0x168>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	429a      	cmp	r2, r3
 800c544:	d3b8      	bcc.n	800c4b8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c546:	2301      	movs	r3, #1
 800c548:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c54a:	e7b5      	b.n	800c4b8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c54c:	4b17      	ldr	r3, [pc, #92]	; (800c5ac <xTaskIncrementTick+0x168>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c552:	4915      	ldr	r1, [pc, #84]	; (800c5a8 <xTaskIncrementTick+0x164>)
 800c554:	4613      	mov	r3, r2
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	4413      	add	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	440b      	add	r3, r1
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b01      	cmp	r3, #1
 800c562:	d901      	bls.n	800c568 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c564:	2301      	movs	r3, #1
 800c566:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c568:	4b11      	ldr	r3, [pc, #68]	; (800c5b0 <xTaskIncrementTick+0x16c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d007      	beq.n	800c580 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c570:	2301      	movs	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e004      	b.n	800c580 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c576:	4b0f      	ldr	r3, [pc, #60]	; (800c5b4 <xTaskIncrementTick+0x170>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	3301      	adds	r3, #1
 800c57c:	4a0d      	ldr	r2, [pc, #52]	; (800c5b4 <xTaskIncrementTick+0x170>)
 800c57e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c580:	697b      	ldr	r3, [r7, #20]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20001128 	.word	0x20001128
 800c590:	20001104 	.word	0x20001104
 800c594:	200010b8 	.word	0x200010b8
 800c598:	200010bc 	.word	0x200010bc
 800c59c:	20001118 	.word	0x20001118
 800c5a0:	20001120 	.word	0x20001120
 800c5a4:	20001108 	.word	0x20001108
 800c5a8:	20000c30 	.word	0x20000c30
 800c5ac:	20000c2c 	.word	0x20000c2c
 800c5b0:	20001114 	.word	0x20001114
 800c5b4:	20001110 	.word	0x20001110

0800c5b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c5be:	4b28      	ldr	r3, [pc, #160]	; (800c660 <vTaskSwitchContext+0xa8>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c5c6:	4b27      	ldr	r3, [pc, #156]	; (800c664 <vTaskSwitchContext+0xac>)
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c5cc:	e041      	b.n	800c652 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800c5ce:	4b25      	ldr	r3, [pc, #148]	; (800c664 <vTaskSwitchContext+0xac>)
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5d4:	4b24      	ldr	r3, [pc, #144]	; (800c668 <vTaskSwitchContext+0xb0>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	60fb      	str	r3, [r7, #12]
 800c5da:	e010      	b.n	800c5fe <vTaskSwitchContext+0x46>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d10a      	bne.n	800c5f8 <vTaskSwitchContext+0x40>
	__asm volatile
 800c5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e6:	f383 8811 	msr	BASEPRI, r3
 800c5ea:	f3bf 8f6f 	isb	sy
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	607b      	str	r3, [r7, #4]
}
 800c5f4:	bf00      	nop
 800c5f6:	e7fe      	b.n	800c5f6 <vTaskSwitchContext+0x3e>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	60fb      	str	r3, [r7, #12]
 800c5fe:	491b      	ldr	r1, [pc, #108]	; (800c66c <vTaskSwitchContext+0xb4>)
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	4613      	mov	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	440b      	add	r3, r1
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d0e4      	beq.n	800c5dc <vTaskSwitchContext+0x24>
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4613      	mov	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	4a13      	ldr	r2, [pc, #76]	; (800c66c <vTaskSwitchContext+0xb4>)
 800c61e:	4413      	add	r3, r2
 800c620:	60bb      	str	r3, [r7, #8]
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	605a      	str	r2, [r3, #4]
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	685a      	ldr	r2, [r3, #4]
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	3308      	adds	r3, #8
 800c634:	429a      	cmp	r2, r3
 800c636:	d104      	bne.n	800c642 <vTaskSwitchContext+0x8a>
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	605a      	str	r2, [r3, #4]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	4a09      	ldr	r2, [pc, #36]	; (800c670 <vTaskSwitchContext+0xb8>)
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	4a06      	ldr	r2, [pc, #24]	; (800c668 <vTaskSwitchContext+0xb0>)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6013      	str	r3, [r2, #0]
}
 800c652:	bf00      	nop
 800c654:	3714      	adds	r7, #20
 800c656:	46bd      	mov	sp, r7
 800c658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65c:	4770      	bx	lr
 800c65e:	bf00      	nop
 800c660:	20001128 	.word	0x20001128
 800c664:	20001114 	.word	0x20001114
 800c668:	20001108 	.word	0x20001108
 800c66c:	20000c30 	.word	0x20000c30
 800c670:	20000c2c 	.word	0x20000c2c

0800c674 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b084      	sub	sp, #16
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	60fb      	str	r3, [r7, #12]
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c69a:	4b07      	ldr	r3, [pc, #28]	; (800c6b8 <vTaskPlaceOnEventList+0x44>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3318      	adds	r3, #24
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7fe fdbb 	bl	800b21e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	6838      	ldr	r0, [r7, #0]
 800c6ac:	f000 fa7c 	bl	800cba8 <prvAddCurrentTaskToDelayedList>
}
 800c6b0:	bf00      	nop
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	20000c2c 	.word	0x20000c2c

0800c6bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b086      	sub	sp, #24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d10a      	bne.n	800c6e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d2:	f383 8811 	msr	BASEPRI, r3
 800c6d6:	f3bf 8f6f 	isb	sy
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	617b      	str	r3, [r7, #20]
}
 800c6e0:	bf00      	nop
 800c6e2:	e7fe      	b.n	800c6e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6e4:	4b0a      	ldr	r3, [pc, #40]	; (800c710 <vTaskPlaceOnEventListRestricted+0x54>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3318      	adds	r3, #24
 800c6ea:	4619      	mov	r1, r3
 800c6ec:	68f8      	ldr	r0, [r7, #12]
 800c6ee:	f7fe fd72 	bl	800b1d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c6fe:	6879      	ldr	r1, [r7, #4]
 800c700:	68b8      	ldr	r0, [r7, #8]
 800c702:	f000 fa51 	bl	800cba8 <prvAddCurrentTaskToDelayedList>
	}
 800c706:	bf00      	nop
 800c708:	3718      	adds	r7, #24
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	20000c2c 	.word	0x20000c2c

0800c714 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10a      	bne.n	800c740 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	60fb      	str	r3, [r7, #12]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	3318      	adds	r3, #24
 800c744:	4618      	mov	r0, r3
 800c746:	f7fe fda3 	bl	800b290 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c74a:	4b1e      	ldr	r3, [pc, #120]	; (800c7c4 <xTaskRemoveFromEventList+0xb0>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d11d      	bne.n	800c78e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	3304      	adds	r3, #4
 800c756:	4618      	mov	r0, r3
 800c758:	f7fe fd9a 	bl	800b290 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c760:	4b19      	ldr	r3, [pc, #100]	; (800c7c8 <xTaskRemoveFromEventList+0xb4>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	429a      	cmp	r2, r3
 800c766:	d903      	bls.n	800c770 <xTaskRemoveFromEventList+0x5c>
 800c768:	693b      	ldr	r3, [r7, #16]
 800c76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c76c:	4a16      	ldr	r2, [pc, #88]	; (800c7c8 <xTaskRemoveFromEventList+0xb4>)
 800c76e:	6013      	str	r3, [r2, #0]
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	4613      	mov	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	009b      	lsls	r3, r3, #2
 800c77c:	4a13      	ldr	r2, [pc, #76]	; (800c7cc <xTaskRemoveFromEventList+0xb8>)
 800c77e:	441a      	add	r2, r3
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	3304      	adds	r3, #4
 800c784:	4619      	mov	r1, r3
 800c786:	4610      	mov	r0, r2
 800c788:	f7fe fd25 	bl	800b1d6 <vListInsertEnd>
 800c78c:	e005      	b.n	800c79a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	3318      	adds	r3, #24
 800c792:	4619      	mov	r1, r3
 800c794:	480e      	ldr	r0, [pc, #56]	; (800c7d0 <xTaskRemoveFromEventList+0xbc>)
 800c796:	f7fe fd1e 	bl	800b1d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c79e:	4b0d      	ldr	r3, [pc, #52]	; (800c7d4 <xTaskRemoveFromEventList+0xc0>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d905      	bls.n	800c7b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c7ac:	4b0a      	ldr	r3, [pc, #40]	; (800c7d8 <xTaskRemoveFromEventList+0xc4>)
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	601a      	str	r2, [r3, #0]
 800c7b2:	e001      	b.n	800c7b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c7b8:	697b      	ldr	r3, [r7, #20]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3718      	adds	r7, #24
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	20001128 	.word	0x20001128
 800c7c8:	20001108 	.word	0x20001108
 800c7cc:	20000c30 	.word	0x20000c30
 800c7d0:	200010c0 	.word	0x200010c0
 800c7d4:	20000c2c 	.word	0x20000c2c
 800c7d8:	20001114 	.word	0x20001114

0800c7dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c7e4:	4b06      	ldr	r3, [pc, #24]	; (800c800 <vTaskInternalSetTimeOutState+0x24>)
 800c7e6:	681a      	ldr	r2, [r3, #0]
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c7ec:	4b05      	ldr	r3, [pc, #20]	; (800c804 <vTaskInternalSetTimeOutState+0x28>)
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	605a      	str	r2, [r3, #4]
}
 800c7f4:	bf00      	nop
 800c7f6:	370c      	adds	r7, #12
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr
 800c800:	20001118 	.word	0x20001118
 800c804:	20001104 	.word	0x20001104

0800c808 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b088      	sub	sp, #32
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d10a      	bne.n	800c82e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	613b      	str	r3, [r7, #16]
}
 800c82a:	bf00      	nop
 800c82c:	e7fe      	b.n	800c82c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10a      	bne.n	800c84a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	60fb      	str	r3, [r7, #12]
}
 800c846:	bf00      	nop
 800c848:	e7fe      	b.n	800c848 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c84a:	f000 fe7b 	bl	800d544 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c84e:	4b1d      	ldr	r3, [pc, #116]	; (800c8c4 <xTaskCheckForTimeOut+0xbc>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	69ba      	ldr	r2, [r7, #24]
 800c85a:	1ad3      	subs	r3, r2, r3
 800c85c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c866:	d102      	bne.n	800c86e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c868:	2300      	movs	r3, #0
 800c86a:	61fb      	str	r3, [r7, #28]
 800c86c:	e023      	b.n	800c8b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	4b15      	ldr	r3, [pc, #84]	; (800c8c8 <xTaskCheckForTimeOut+0xc0>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	429a      	cmp	r2, r3
 800c878:	d007      	beq.n	800c88a <xTaskCheckForTimeOut+0x82>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	69ba      	ldr	r2, [r7, #24]
 800c880:	429a      	cmp	r2, r3
 800c882:	d302      	bcc.n	800c88a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c884:	2301      	movs	r3, #1
 800c886:	61fb      	str	r3, [r7, #28]
 800c888:	e015      	b.n	800c8b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	429a      	cmp	r2, r3
 800c892:	d20b      	bcs.n	800c8ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	1ad2      	subs	r2, r2, r3
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7ff ff9b 	bl	800c7dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	61fb      	str	r3, [r7, #28]
 800c8aa:	e004      	b.n	800c8b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c8b6:	f000 fe75 	bl	800d5a4 <vPortExitCritical>

	return xReturn;
 800c8ba:	69fb      	ldr	r3, [r7, #28]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	20001104 	.word	0x20001104
 800c8c8:	20001118 	.word	0x20001118

0800c8cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c8d0:	4b03      	ldr	r3, [pc, #12]	; (800c8e0 <vTaskMissedYield+0x14>)
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	601a      	str	r2, [r3, #0]
}
 800c8d6:	bf00      	nop
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	20001114 	.word	0x20001114

0800c8e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c8ec:	f000 f852 	bl	800c994 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c8f0:	4b06      	ldr	r3, [pc, #24]	; (800c90c <prvIdleTask+0x28>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d9f9      	bls.n	800c8ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800c8f8:	4b05      	ldr	r3, [pc, #20]	; (800c910 <prvIdleTask+0x2c>)
 800c8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c908:	e7f0      	b.n	800c8ec <prvIdleTask+0x8>
 800c90a:	bf00      	nop
 800c90c:	20000c30 	.word	0x20000c30
 800c910:	e000ed04 	.word	0xe000ed04

0800c914 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c91a:	2300      	movs	r3, #0
 800c91c:	607b      	str	r3, [r7, #4]
 800c91e:	e00c      	b.n	800c93a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	4613      	mov	r3, r2
 800c924:	009b      	lsls	r3, r3, #2
 800c926:	4413      	add	r3, r2
 800c928:	009b      	lsls	r3, r3, #2
 800c92a:	4a12      	ldr	r2, [pc, #72]	; (800c974 <prvInitialiseTaskLists+0x60>)
 800c92c:	4413      	add	r3, r2
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fe fc24 	bl	800b17c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	3301      	adds	r3, #1
 800c938:	607b      	str	r3, [r7, #4]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	2b37      	cmp	r3, #55	; 0x37
 800c93e:	d9ef      	bls.n	800c920 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c940:	480d      	ldr	r0, [pc, #52]	; (800c978 <prvInitialiseTaskLists+0x64>)
 800c942:	f7fe fc1b 	bl	800b17c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c946:	480d      	ldr	r0, [pc, #52]	; (800c97c <prvInitialiseTaskLists+0x68>)
 800c948:	f7fe fc18 	bl	800b17c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c94c:	480c      	ldr	r0, [pc, #48]	; (800c980 <prvInitialiseTaskLists+0x6c>)
 800c94e:	f7fe fc15 	bl	800b17c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c952:	480c      	ldr	r0, [pc, #48]	; (800c984 <prvInitialiseTaskLists+0x70>)
 800c954:	f7fe fc12 	bl	800b17c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c958:	480b      	ldr	r0, [pc, #44]	; (800c988 <prvInitialiseTaskLists+0x74>)
 800c95a:	f7fe fc0f 	bl	800b17c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c95e:	4b0b      	ldr	r3, [pc, #44]	; (800c98c <prvInitialiseTaskLists+0x78>)
 800c960:	4a05      	ldr	r2, [pc, #20]	; (800c978 <prvInitialiseTaskLists+0x64>)
 800c962:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c964:	4b0a      	ldr	r3, [pc, #40]	; (800c990 <prvInitialiseTaskLists+0x7c>)
 800c966:	4a05      	ldr	r2, [pc, #20]	; (800c97c <prvInitialiseTaskLists+0x68>)
 800c968:	601a      	str	r2, [r3, #0]
}
 800c96a:	bf00      	nop
 800c96c:	3708      	adds	r7, #8
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	20000c30 	.word	0x20000c30
 800c978:	20001090 	.word	0x20001090
 800c97c:	200010a4 	.word	0x200010a4
 800c980:	200010c0 	.word	0x200010c0
 800c984:	200010d4 	.word	0x200010d4
 800c988:	200010ec 	.word	0x200010ec
 800c98c:	200010b8 	.word	0x200010b8
 800c990:	200010bc 	.word	0x200010bc

0800c994 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c99a:	e019      	b.n	800c9d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c99c:	f000 fdd2 	bl	800d544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9a0:	4b10      	ldr	r3, [pc, #64]	; (800c9e4 <prvCheckTasksWaitingTermination+0x50>)
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7fe fc6f 	bl	800b290 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c9b2:	4b0d      	ldr	r3, [pc, #52]	; (800c9e8 <prvCheckTasksWaitingTermination+0x54>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	4a0b      	ldr	r2, [pc, #44]	; (800c9e8 <prvCheckTasksWaitingTermination+0x54>)
 800c9ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c9bc:	4b0b      	ldr	r3, [pc, #44]	; (800c9ec <prvCheckTasksWaitingTermination+0x58>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	3b01      	subs	r3, #1
 800c9c2:	4a0a      	ldr	r2, [pc, #40]	; (800c9ec <prvCheckTasksWaitingTermination+0x58>)
 800c9c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c9c6:	f000 fded 	bl	800d5a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 f810 	bl	800c9f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9d0:	4b06      	ldr	r3, [pc, #24]	; (800c9ec <prvCheckTasksWaitingTermination+0x58>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1e1      	bne.n	800c99c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c9d8:	bf00      	nop
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	200010d4 	.word	0x200010d4
 800c9e8:	20001100 	.word	0x20001100
 800c9ec:	200010e8 	.word	0x200010e8

0800c9f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d108      	bne.n	800ca14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 ff8a 	bl	800d920 <vPortFree>
				vPortFree( pxTCB );
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 ff87 	bl	800d920 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca12:	e018      	b.n	800ca46 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d103      	bne.n	800ca26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 ff7e 	bl	800d920 <vPortFree>
	}
 800ca24:	e00f      	b.n	800ca46 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d00a      	beq.n	800ca46 <prvDeleteTCB+0x56>
	__asm volatile
 800ca30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca34:	f383 8811 	msr	BASEPRI, r3
 800ca38:	f3bf 8f6f 	isb	sy
 800ca3c:	f3bf 8f4f 	dsb	sy
 800ca40:	60fb      	str	r3, [r7, #12]
}
 800ca42:	bf00      	nop
 800ca44:	e7fe      	b.n	800ca44 <prvDeleteTCB+0x54>
	}
 800ca46:	bf00      	nop
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca56:	4b0c      	ldr	r3, [pc, #48]	; (800ca88 <prvResetNextTaskUnblockTime+0x38>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d104      	bne.n	800ca6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca60:	4b0a      	ldr	r3, [pc, #40]	; (800ca8c <prvResetNextTaskUnblockTime+0x3c>)
 800ca62:	f04f 32ff 	mov.w	r2, #4294967295
 800ca66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca68:	e008      	b.n	800ca7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca6a:	4b07      	ldr	r3, [pc, #28]	; (800ca88 <prvResetNextTaskUnblockTime+0x38>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	4a04      	ldr	r2, [pc, #16]	; (800ca8c <prvResetNextTaskUnblockTime+0x3c>)
 800ca7a:	6013      	str	r3, [r2, #0]
}
 800ca7c:	bf00      	nop
 800ca7e:	370c      	adds	r7, #12
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr
 800ca88:	200010b8 	.word	0x200010b8
 800ca8c:	20001120 	.word	0x20001120

0800ca90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ca96:	4b0b      	ldr	r3, [pc, #44]	; (800cac4 <xTaskGetSchedulerState+0x34>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d102      	bne.n	800caa4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	607b      	str	r3, [r7, #4]
 800caa2:	e008      	b.n	800cab6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800caa4:	4b08      	ldr	r3, [pc, #32]	; (800cac8 <xTaskGetSchedulerState+0x38>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d102      	bne.n	800cab2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800caac:	2302      	movs	r3, #2
 800caae:	607b      	str	r3, [r7, #4]
 800cab0:	e001      	b.n	800cab6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cab2:	2300      	movs	r3, #0
 800cab4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cab6:	687b      	ldr	r3, [r7, #4]
	}
 800cab8:	4618      	mov	r0, r3
 800caba:	370c      	adds	r7, #12
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr
 800cac4:	2000110c 	.word	0x2000110c
 800cac8:	20001128 	.word	0x20001128

0800cacc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cad8:	2300      	movs	r3, #0
 800cada:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d056      	beq.n	800cb90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cae2:	4b2e      	ldr	r3, [pc, #184]	; (800cb9c <xTaskPriorityDisinherit+0xd0>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	693a      	ldr	r2, [r7, #16]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d00a      	beq.n	800cb02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	60fb      	str	r3, [r7, #12]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d10a      	bne.n	800cb20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	60bb      	str	r3, [r7, #8]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb24:	1e5a      	subs	r2, r3, #1
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d02c      	beq.n	800cb90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d128      	bne.n	800cb90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	3304      	adds	r3, #4
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7fe fba4 	bl	800b290 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb60:	4b0f      	ldr	r3, [pc, #60]	; (800cba0 <xTaskPriorityDisinherit+0xd4>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d903      	bls.n	800cb70 <xTaskPriorityDisinherit+0xa4>
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6c:	4a0c      	ldr	r2, [pc, #48]	; (800cba0 <xTaskPriorityDisinherit+0xd4>)
 800cb6e:	6013      	str	r3, [r2, #0]
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb74:	4613      	mov	r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4a09      	ldr	r2, [pc, #36]	; (800cba4 <xTaskPriorityDisinherit+0xd8>)
 800cb7e:	441a      	add	r2, r3
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	3304      	adds	r3, #4
 800cb84:	4619      	mov	r1, r3
 800cb86:	4610      	mov	r0, r2
 800cb88:	f7fe fb25 	bl	800b1d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cb90:	697b      	ldr	r3, [r7, #20]
	}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3718      	adds	r7, #24
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20000c2c 	.word	0x20000c2c
 800cba0:	20001108 	.word	0x20001108
 800cba4:	20000c30 	.word	0x20000c30

0800cba8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cbb2:	4b21      	ldr	r3, [pc, #132]	; (800cc38 <prvAddCurrentTaskToDelayedList+0x90>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbb8:	4b20      	ldr	r3, [pc, #128]	; (800cc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	3304      	adds	r3, #4
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fe fb66 	bl	800b290 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbca:	d10a      	bne.n	800cbe2 <prvAddCurrentTaskToDelayedList+0x3a>
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d007      	beq.n	800cbe2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbd2:	4b1a      	ldr	r3, [pc, #104]	; (800cc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	4619      	mov	r1, r3
 800cbda:	4819      	ldr	r0, [pc, #100]	; (800cc40 <prvAddCurrentTaskToDelayedList+0x98>)
 800cbdc:	f7fe fafb 	bl	800b1d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cbe0:	e026      	b.n	800cc30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cbea:	4b14      	ldr	r3, [pc, #80]	; (800cc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	68ba      	ldr	r2, [r7, #8]
 800cbf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d209      	bcs.n	800cc0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cbfa:	4b12      	ldr	r3, [pc, #72]	; (800cc44 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	; (800cc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	3304      	adds	r3, #4
 800cc04:	4619      	mov	r1, r3
 800cc06:	4610      	mov	r0, r2
 800cc08:	f7fe fb09 	bl	800b21e <vListInsert>
}
 800cc0c:	e010      	b.n	800cc30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cc0e:	4b0e      	ldr	r3, [pc, #56]	; (800cc48 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cc10:	681a      	ldr	r2, [r3, #0]
 800cc12:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <prvAddCurrentTaskToDelayedList+0x94>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	3304      	adds	r3, #4
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4610      	mov	r0, r2
 800cc1c:	f7fe faff 	bl	800b21e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cc20:	4b0a      	ldr	r3, [pc, #40]	; (800cc4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	68ba      	ldr	r2, [r7, #8]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d202      	bcs.n	800cc30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cc2a:	4a08      	ldr	r2, [pc, #32]	; (800cc4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	6013      	str	r3, [r2, #0]
}
 800cc30:	bf00      	nop
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	20001104 	.word	0x20001104
 800cc3c:	20000c2c 	.word	0x20000c2c
 800cc40:	200010ec 	.word	0x200010ec
 800cc44:	200010bc 	.word	0x200010bc
 800cc48:	200010b8 	.word	0x200010b8
 800cc4c:	20001120 	.word	0x20001120

0800cc50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b08a      	sub	sp, #40	; 0x28
 800cc54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cc56:	2300      	movs	r3, #0
 800cc58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cc5a:	f000 fb07 	bl	800d26c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cc5e:	4b1c      	ldr	r3, [pc, #112]	; (800ccd0 <xTimerCreateTimerTask+0x80>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d021      	beq.n	800ccaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cc66:	2300      	movs	r3, #0
 800cc68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cc6e:	1d3a      	adds	r2, r7, #4
 800cc70:	f107 0108 	add.w	r1, r7, #8
 800cc74:	f107 030c 	add.w	r3, r7, #12
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fe fa65 	bl	800b148 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc7e:	6879      	ldr	r1, [r7, #4]
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	9202      	str	r2, [sp, #8]
 800cc86:	9301      	str	r3, [sp, #4]
 800cc88:	2302      	movs	r3, #2
 800cc8a:	9300      	str	r3, [sp, #0]
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	460a      	mov	r2, r1
 800cc90:	4910      	ldr	r1, [pc, #64]	; (800ccd4 <xTimerCreateTimerTask+0x84>)
 800cc92:	4811      	ldr	r0, [pc, #68]	; (800ccd8 <xTimerCreateTimerTask+0x88>)
 800cc94:	f7ff f8cc 	bl	800be30 <xTaskCreateStatic>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	4a10      	ldr	r2, [pc, #64]	; (800ccdc <xTimerCreateTimerTask+0x8c>)
 800cc9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cc9e:	4b0f      	ldr	r3, [pc, #60]	; (800ccdc <xTimerCreateTimerTask+0x8c>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cca6:	2301      	movs	r3, #1
 800cca8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d10a      	bne.n	800ccc6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ccb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb4:	f383 8811 	msr	BASEPRI, r3
 800ccb8:	f3bf 8f6f 	isb	sy
 800ccbc:	f3bf 8f4f 	dsb	sy
 800ccc0:	613b      	str	r3, [r7, #16]
}
 800ccc2:	bf00      	nop
 800ccc4:	e7fe      	b.n	800ccc4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ccc6:	697b      	ldr	r3, [r7, #20]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3718      	adds	r7, #24
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	2000115c 	.word	0x2000115c
 800ccd4:	0800e5e8 	.word	0x0800e5e8
 800ccd8:	0800ce15 	.word	0x0800ce15
 800ccdc:	20001160 	.word	0x20001160

0800cce0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b08a      	sub	sp, #40	; 0x28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10a      	bne.n	800cd0e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ccf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	623b      	str	r3, [r7, #32]
}
 800cd0a:	bf00      	nop
 800cd0c:	e7fe      	b.n	800cd0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cd0e:	4b1a      	ldr	r3, [pc, #104]	; (800cd78 <xTimerGenericCommand+0x98>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d02a      	beq.n	800cd6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	2b05      	cmp	r3, #5
 800cd26:	dc18      	bgt.n	800cd5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cd28:	f7ff feb2 	bl	800ca90 <xTaskGetSchedulerState>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d109      	bne.n	800cd46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cd32:	4b11      	ldr	r3, [pc, #68]	; (800cd78 <xTimerGenericCommand+0x98>)
 800cd34:	6818      	ldr	r0, [r3, #0]
 800cd36:	f107 0110 	add.w	r1, r7, #16
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd3e:	f7fe fc0f 	bl	800b560 <xQueueGenericSend>
 800cd42:	6278      	str	r0, [r7, #36]	; 0x24
 800cd44:	e012      	b.n	800cd6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cd46:	4b0c      	ldr	r3, [pc, #48]	; (800cd78 <xTimerGenericCommand+0x98>)
 800cd48:	6818      	ldr	r0, [r3, #0]
 800cd4a:	f107 0110 	add.w	r1, r7, #16
 800cd4e:	2300      	movs	r3, #0
 800cd50:	2200      	movs	r2, #0
 800cd52:	f7fe fc05 	bl	800b560 <xQueueGenericSend>
 800cd56:	6278      	str	r0, [r7, #36]	; 0x24
 800cd58:	e008      	b.n	800cd6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cd5a:	4b07      	ldr	r3, [pc, #28]	; (800cd78 <xTimerGenericCommand+0x98>)
 800cd5c:	6818      	ldr	r0, [r3, #0]
 800cd5e:	f107 0110 	add.w	r1, r7, #16
 800cd62:	2300      	movs	r3, #0
 800cd64:	683a      	ldr	r2, [r7, #0]
 800cd66:	f7fe fcf9 	bl	800b75c <xQueueGenericSendFromISR>
 800cd6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3728      	adds	r7, #40	; 0x28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	2000115c 	.word	0x2000115c

0800cd7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b088      	sub	sp, #32
 800cd80:	af02      	add	r7, sp, #8
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd86:	4b22      	ldr	r3, [pc, #136]	; (800ce10 <prvProcessExpiredTimer+0x94>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	3304      	adds	r3, #4
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7fe fa7b 	bl	800b290 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cda0:	f003 0304 	and.w	r3, r3, #4
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d022      	beq.n	800cdee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	699a      	ldr	r2, [r3, #24]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	18d1      	adds	r1, r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	683a      	ldr	r2, [r7, #0]
 800cdb4:	6978      	ldr	r0, [r7, #20]
 800cdb6:	f000 f8d1 	bl	800cf5c <prvInsertTimerInActiveList>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d01f      	beq.n	800ce00 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	2100      	movs	r1, #0
 800cdca:	6978      	ldr	r0, [r7, #20]
 800cdcc:	f7ff ff88 	bl	800cce0 <xTimerGenericCommand>
 800cdd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d113      	bne.n	800ce00 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cddc:	f383 8811 	msr	BASEPRI, r3
 800cde0:	f3bf 8f6f 	isb	sy
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	60fb      	str	r3, [r7, #12]
}
 800cdea:	bf00      	nop
 800cdec:	e7fe      	b.n	800cdec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdf4:	f023 0301 	bic.w	r3, r3, #1
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	6a1b      	ldr	r3, [r3, #32]
 800ce04:	6978      	ldr	r0, [r7, #20]
 800ce06:	4798      	blx	r3
}
 800ce08:	bf00      	nop
 800ce0a:	3718      	adds	r7, #24
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	20001154 	.word	0x20001154

0800ce14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce1c:	f107 0308 	add.w	r3, r7, #8
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 f857 	bl	800ced4 <prvGetNextExpireTime>
 800ce26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f000 f803 	bl	800ce38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ce32:	f000 f8d5 	bl	800cfe0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ce36:	e7f1      	b.n	800ce1c <prvTimerTask+0x8>

0800ce38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ce42:	f7ff fa31 	bl	800c2a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ce46:	f107 0308 	add.w	r3, r7, #8
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 f866 	bl	800cf1c <prvSampleTimeNow>
 800ce50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d130      	bne.n	800ceba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10a      	bne.n	800ce74 <prvProcessTimerOrBlockTask+0x3c>
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d806      	bhi.n	800ce74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ce66:	f7ff fa2d 	bl	800c2c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ce6a:	68f9      	ldr	r1, [r7, #12]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7ff ff85 	bl	800cd7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce72:	e024      	b.n	800cebe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d008      	beq.n	800ce8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce7a:	4b13      	ldr	r3, [pc, #76]	; (800cec8 <prvProcessTimerOrBlockTask+0x90>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d101      	bne.n	800ce88 <prvProcessTimerOrBlockTask+0x50>
 800ce84:	2301      	movs	r3, #1
 800ce86:	e000      	b.n	800ce8a <prvProcessTimerOrBlockTask+0x52>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce8c:	4b0f      	ldr	r3, [pc, #60]	; (800cecc <prvProcessTimerOrBlockTask+0x94>)
 800ce8e:	6818      	ldr	r0, [r3, #0]
 800ce90:	687a      	ldr	r2, [r7, #4]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	683a      	ldr	r2, [r7, #0]
 800ce98:	4619      	mov	r1, r3
 800ce9a:	f7fe ff95 	bl	800bdc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce9e:	f7ff fa11 	bl	800c2c4 <xTaskResumeAll>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d10a      	bne.n	800cebe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cea8:	4b09      	ldr	r3, [pc, #36]	; (800ced0 <prvProcessTimerOrBlockTask+0x98>)
 800ceaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceae:	601a      	str	r2, [r3, #0]
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	f3bf 8f6f 	isb	sy
}
 800ceb8:	e001      	b.n	800cebe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ceba:	f7ff fa03 	bl	800c2c4 <xTaskResumeAll>
}
 800cebe:	bf00      	nop
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20001158 	.word	0x20001158
 800cecc:	2000115c 	.word	0x2000115c
 800ced0:	e000ed04 	.word	0xe000ed04

0800ced4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cedc:	4b0e      	ldr	r3, [pc, #56]	; (800cf18 <prvGetNextExpireTime+0x44>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d101      	bne.n	800ceea <prvGetNextExpireTime+0x16>
 800cee6:	2201      	movs	r2, #1
 800cee8:	e000      	b.n	800ceec <prvGetNextExpireTime+0x18>
 800ceea:	2200      	movs	r2, #0
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d105      	bne.n	800cf04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cef8:	4b07      	ldr	r3, [pc, #28]	; (800cf18 <prvGetNextExpireTime+0x44>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	60fb      	str	r3, [r7, #12]
 800cf02:	e001      	b.n	800cf08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cf04:	2300      	movs	r3, #0
 800cf06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cf08:	68fb      	ldr	r3, [r7, #12]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3714      	adds	r7, #20
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	20001154 	.word	0x20001154

0800cf1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cf24:	f7ff fa6c 	bl	800c400 <xTaskGetTickCount>
 800cf28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cf2a:	4b0b      	ldr	r3, [pc, #44]	; (800cf58 <prvSampleTimeNow+0x3c>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d205      	bcs.n	800cf40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cf34:	f000 f936 	bl	800d1a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	e002      	b.n	800cf46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cf46:	4a04      	ldr	r2, [pc, #16]	; (800cf58 <prvSampleTimeNow+0x3c>)
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3710      	adds	r7, #16
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20001164 	.word	0x20001164

0800cf5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
 800cf68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d812      	bhi.n	800cfa8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	1ad2      	subs	r2, r2, r3
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	699b      	ldr	r3, [r3, #24]
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d302      	bcc.n	800cf96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf90:	2301      	movs	r3, #1
 800cf92:	617b      	str	r3, [r7, #20]
 800cf94:	e01b      	b.n	800cfce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf96:	4b10      	ldr	r3, [pc, #64]	; (800cfd8 <prvInsertTimerInActiveList+0x7c>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	3304      	adds	r3, #4
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	4610      	mov	r0, r2
 800cfa2:	f7fe f93c 	bl	800b21e <vListInsert>
 800cfa6:	e012      	b.n	800cfce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cfa8:	687a      	ldr	r2, [r7, #4]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d206      	bcs.n	800cfbe <prvInsertTimerInActiveList+0x62>
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d302      	bcc.n	800cfbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	617b      	str	r3, [r7, #20]
 800cfbc:	e007      	b.n	800cfce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfbe:	4b07      	ldr	r3, [pc, #28]	; (800cfdc <prvInsertTimerInActiveList+0x80>)
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	3304      	adds	r3, #4
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	4610      	mov	r0, r2
 800cfca:	f7fe f928 	bl	800b21e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cfce:	697b      	ldr	r3, [r7, #20]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3718      	adds	r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}
 800cfd8:	20001158 	.word	0x20001158
 800cfdc:	20001154 	.word	0x20001154

0800cfe0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b08e      	sub	sp, #56	; 0x38
 800cfe4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cfe6:	e0ca      	b.n	800d17e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	da18      	bge.n	800d020 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cfee:	1d3b      	adds	r3, r7, #4
 800cff0:	3304      	adds	r3, #4
 800cff2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10a      	bne.n	800d010 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffe:	f383 8811 	msr	BASEPRI, r3
 800d002:	f3bf 8f6f 	isb	sy
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	61fb      	str	r3, [r7, #28]
}
 800d00c:	bf00      	nop
 800d00e:	e7fe      	b.n	800d00e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d016:	6850      	ldr	r0, [r2, #4]
 800d018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d01a:	6892      	ldr	r2, [r2, #8]
 800d01c:	4611      	mov	r1, r2
 800d01e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2b00      	cmp	r3, #0
 800d024:	f2c0 80aa 	blt.w	800d17c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	695b      	ldr	r3, [r3, #20]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d004      	beq.n	800d03e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	3304      	adds	r3, #4
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe f929 	bl	800b290 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d03e:	463b      	mov	r3, r7
 800d040:	4618      	mov	r0, r3
 800d042:	f7ff ff6b 	bl	800cf1c <prvSampleTimeNow>
 800d046:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b09      	cmp	r3, #9
 800d04c:	f200 8097 	bhi.w	800d17e <prvProcessReceivedCommands+0x19e>
 800d050:	a201      	add	r2, pc, #4	; (adr r2, 800d058 <prvProcessReceivedCommands+0x78>)
 800d052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d056:	bf00      	nop
 800d058:	0800d081 	.word	0x0800d081
 800d05c:	0800d081 	.word	0x0800d081
 800d060:	0800d081 	.word	0x0800d081
 800d064:	0800d0f5 	.word	0x0800d0f5
 800d068:	0800d109 	.word	0x0800d109
 800d06c:	0800d153 	.word	0x0800d153
 800d070:	0800d081 	.word	0x0800d081
 800d074:	0800d081 	.word	0x0800d081
 800d078:	0800d0f5 	.word	0x0800d0f5
 800d07c:	0800d109 	.word	0x0800d109
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d082:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d086:	f043 0301 	orr.w	r3, r3, #1
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d092:	68ba      	ldr	r2, [r7, #8]
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	18d1      	adds	r1, r2, r3
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d09e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0a0:	f7ff ff5c 	bl	800cf5c <prvInsertTimerInActiveList>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d069      	beq.n	800d17e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ac:	6a1b      	ldr	r3, [r3, #32]
 800d0ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0b8:	f003 0304 	and.w	r3, r3, #4
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d05e      	beq.n	800d17e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c4:	699b      	ldr	r3, [r3, #24]
 800d0c6:	441a      	add	r2, r3
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	2100      	movs	r1, #0
 800d0d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0d2:	f7ff fe05 	bl	800cce0 <xTimerGenericCommand>
 800d0d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d0d8:	6a3b      	ldr	r3, [r7, #32]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d14f      	bne.n	800d17e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	61bb      	str	r3, [r7, #24]
}
 800d0f0:	bf00      	nop
 800d0f2:	e7fe      	b.n	800d0f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0fa:	f023 0301 	bic.w	r3, r3, #1
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d106:	e03a      	b.n	800d17e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d10e:	f043 0301 	orr.w	r3, r3, #1
 800d112:	b2da      	uxtb	r2, r3
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d11a:	68ba      	ldr	r2, [r7, #8]
 800d11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d122:	699b      	ldr	r3, [r3, #24]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10a      	bne.n	800d13e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	617b      	str	r3, [r7, #20]
}
 800d13a:	bf00      	nop
 800d13c:	e7fe      	b.n	800d13c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d140:	699a      	ldr	r2, [r3, #24]
 800d142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d144:	18d1      	adds	r1, r2, r3
 800d146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d14a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d14c:	f7ff ff06 	bl	800cf5c <prvInsertTimerInActiveList>
					break;
 800d150:	e015      	b.n	800d17e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d158:	f003 0302 	and.w	r3, r3, #2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d103      	bne.n	800d168 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d162:	f000 fbdd 	bl	800d920 <vPortFree>
 800d166:	e00a      	b.n	800d17e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d16e:	f023 0301 	bic.w	r3, r3, #1
 800d172:	b2da      	uxtb	r2, r3
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d17a:	e000      	b.n	800d17e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d17c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d17e:	4b08      	ldr	r3, [pc, #32]	; (800d1a0 <prvProcessReceivedCommands+0x1c0>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	1d39      	adds	r1, r7, #4
 800d184:	2200      	movs	r2, #0
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe fb84 	bl	800b894 <xQueueReceive>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f47f af2a 	bne.w	800cfe8 <prvProcessReceivedCommands+0x8>
	}
}
 800d194:	bf00      	nop
 800d196:	bf00      	nop
 800d198:	3730      	adds	r7, #48	; 0x30
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	2000115c 	.word	0x2000115c

0800d1a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b088      	sub	sp, #32
 800d1a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1aa:	e048      	b.n	800d23e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1ac:	4b2d      	ldr	r3, [pc, #180]	; (800d264 <prvSwitchTimerLists+0xc0>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1b6:	4b2b      	ldr	r3, [pc, #172]	; (800d264 <prvSwitchTimerLists+0xc0>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	68db      	ldr	r3, [r3, #12]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fe f863 	bl	800b290 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6a1b      	ldr	r3, [r3, #32]
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1d8:	f003 0304 	and.w	r3, r3, #4
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d02e      	beq.n	800d23e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	693a      	ldr	r2, [r7, #16]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d90e      	bls.n	800d210 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	68ba      	ldr	r2, [r7, #8]
 800d1f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1fe:	4b19      	ldr	r3, [pc, #100]	; (800d264 <prvSwitchTimerLists+0xc0>)
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3304      	adds	r3, #4
 800d206:	4619      	mov	r1, r3
 800d208:	4610      	mov	r0, r2
 800d20a:	f7fe f808 	bl	800b21e <vListInsert>
 800d20e:	e016      	b.n	800d23e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d210:	2300      	movs	r3, #0
 800d212:	9300      	str	r3, [sp, #0]
 800d214:	2300      	movs	r3, #0
 800d216:	693a      	ldr	r2, [r7, #16]
 800d218:	2100      	movs	r1, #0
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f7ff fd60 	bl	800cce0 <xTimerGenericCommand>
 800d220:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10a      	bne.n	800d23e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	603b      	str	r3, [r7, #0]
}
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d23e:	4b09      	ldr	r3, [pc, #36]	; (800d264 <prvSwitchTimerLists+0xc0>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d1b1      	bne.n	800d1ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d248:	4b06      	ldr	r3, [pc, #24]	; (800d264 <prvSwitchTimerLists+0xc0>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d24e:	4b06      	ldr	r3, [pc, #24]	; (800d268 <prvSwitchTimerLists+0xc4>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4a04      	ldr	r2, [pc, #16]	; (800d264 <prvSwitchTimerLists+0xc0>)
 800d254:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d256:	4a04      	ldr	r2, [pc, #16]	; (800d268 <prvSwitchTimerLists+0xc4>)
 800d258:	697b      	ldr	r3, [r7, #20]
 800d25a:	6013      	str	r3, [r2, #0]
}
 800d25c:	bf00      	nop
 800d25e:	3718      	adds	r7, #24
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	20001154 	.word	0x20001154
 800d268:	20001158 	.word	0x20001158

0800d26c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d272:	f000 f967 	bl	800d544 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d276:	4b15      	ldr	r3, [pc, #84]	; (800d2cc <prvCheckForValidListAndQueue+0x60>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d120      	bne.n	800d2c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d27e:	4814      	ldr	r0, [pc, #80]	; (800d2d0 <prvCheckForValidListAndQueue+0x64>)
 800d280:	f7fd ff7c 	bl	800b17c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d284:	4813      	ldr	r0, [pc, #76]	; (800d2d4 <prvCheckForValidListAndQueue+0x68>)
 800d286:	f7fd ff79 	bl	800b17c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d28a:	4b13      	ldr	r3, [pc, #76]	; (800d2d8 <prvCheckForValidListAndQueue+0x6c>)
 800d28c:	4a10      	ldr	r2, [pc, #64]	; (800d2d0 <prvCheckForValidListAndQueue+0x64>)
 800d28e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d290:	4b12      	ldr	r3, [pc, #72]	; (800d2dc <prvCheckForValidListAndQueue+0x70>)
 800d292:	4a10      	ldr	r2, [pc, #64]	; (800d2d4 <prvCheckForValidListAndQueue+0x68>)
 800d294:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d296:	2300      	movs	r3, #0
 800d298:	9300      	str	r3, [sp, #0]
 800d29a:	4b11      	ldr	r3, [pc, #68]	; (800d2e0 <prvCheckForValidListAndQueue+0x74>)
 800d29c:	4a11      	ldr	r2, [pc, #68]	; (800d2e4 <prvCheckForValidListAndQueue+0x78>)
 800d29e:	2110      	movs	r1, #16
 800d2a0:	200a      	movs	r0, #10
 800d2a2:	f7fe f887 	bl	800b3b4 <xQueueGenericCreateStatic>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4a08      	ldr	r2, [pc, #32]	; (800d2cc <prvCheckForValidListAndQueue+0x60>)
 800d2aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d2ac:	4b07      	ldr	r3, [pc, #28]	; (800d2cc <prvCheckForValidListAndQueue+0x60>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d005      	beq.n	800d2c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d2b4:	4b05      	ldr	r3, [pc, #20]	; (800d2cc <prvCheckForValidListAndQueue+0x60>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	490b      	ldr	r1, [pc, #44]	; (800d2e8 <prvCheckForValidListAndQueue+0x7c>)
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fe fd5a 	bl	800bd74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2c0:	f000 f970 	bl	800d5a4 <vPortExitCritical>
}
 800d2c4:	bf00      	nop
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	2000115c 	.word	0x2000115c
 800d2d0:	2000112c 	.word	0x2000112c
 800d2d4:	20001140 	.word	0x20001140
 800d2d8:	20001154 	.word	0x20001154
 800d2dc:	20001158 	.word	0x20001158
 800d2e0:	20001208 	.word	0x20001208
 800d2e4:	20001168 	.word	0x20001168
 800d2e8:	0800e5f0 	.word	0x0800e5f0

0800d2ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b085      	sub	sp, #20
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	3b04      	subs	r3, #4
 800d2fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3b04      	subs	r3, #4
 800d30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	f023 0201 	bic.w	r2, r3, #1
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	3b04      	subs	r3, #4
 800d31a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d31c:	4a0c      	ldr	r2, [pc, #48]	; (800d350 <pxPortInitialiseStack+0x64>)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3b14      	subs	r3, #20
 800d326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	3b04      	subs	r3, #4
 800d332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f06f 0202 	mvn.w	r2, #2
 800d33a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	3b20      	subs	r3, #32
 800d340:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d342:	68fb      	ldr	r3, [r7, #12]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3714      	adds	r7, #20
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	0800d355 	.word	0x0800d355

0800d354 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d35e:	4b12      	ldr	r3, [pc, #72]	; (800d3a8 <prvTaskExitError+0x54>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d366:	d00a      	beq.n	800d37e <prvTaskExitError+0x2a>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	60fb      	str	r3, [r7, #12]
}
 800d37a:	bf00      	nop
 800d37c:	e7fe      	b.n	800d37c <prvTaskExitError+0x28>
	__asm volatile
 800d37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	60bb      	str	r3, [r7, #8]
}
 800d390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d392:	bf00      	nop
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d0fc      	beq.n	800d394 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d39a:	bf00      	nop
 800d39c:	bf00      	nop
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	20000098 	.word	0x20000098
 800d3ac:	00000000 	.word	0x00000000

0800d3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d3b0:	4b07      	ldr	r3, [pc, #28]	; (800d3d0 <pxCurrentTCBConst2>)
 800d3b2:	6819      	ldr	r1, [r3, #0]
 800d3b4:	6808      	ldr	r0, [r1, #0]
 800d3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ba:	f380 8809 	msr	PSP, r0
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f04f 0000 	mov.w	r0, #0
 800d3c6:	f380 8811 	msr	BASEPRI, r0
 800d3ca:	4770      	bx	lr
 800d3cc:	f3af 8000 	nop.w

0800d3d0 <pxCurrentTCBConst2>:
 800d3d0:	20000c2c 	.word	0x20000c2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d3d4:	bf00      	nop
 800d3d6:	bf00      	nop

0800d3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d3d8:	4808      	ldr	r0, [pc, #32]	; (800d3fc <prvPortStartFirstTask+0x24>)
 800d3da:	6800      	ldr	r0, [r0, #0]
 800d3dc:	6800      	ldr	r0, [r0, #0]
 800d3de:	f380 8808 	msr	MSP, r0
 800d3e2:	f04f 0000 	mov.w	r0, #0
 800d3e6:	f380 8814 	msr	CONTROL, r0
 800d3ea:	b662      	cpsie	i
 800d3ec:	b661      	cpsie	f
 800d3ee:	f3bf 8f4f 	dsb	sy
 800d3f2:	f3bf 8f6f 	isb	sy
 800d3f6:	df00      	svc	0
 800d3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d3fa:	bf00      	nop
 800d3fc:	e000ed08 	.word	0xe000ed08

0800d400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d406:	4b46      	ldr	r3, [pc, #280]	; (800d520 <xPortStartScheduler+0x120>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4a46      	ldr	r2, [pc, #280]	; (800d524 <xPortStartScheduler+0x124>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d10a      	bne.n	800d426 <xPortStartScheduler+0x26>
	__asm volatile
 800d410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d414:	f383 8811 	msr	BASEPRI, r3
 800d418:	f3bf 8f6f 	isb	sy
 800d41c:	f3bf 8f4f 	dsb	sy
 800d420:	613b      	str	r3, [r7, #16]
}
 800d422:	bf00      	nop
 800d424:	e7fe      	b.n	800d424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d426:	4b3e      	ldr	r3, [pc, #248]	; (800d520 <xPortStartScheduler+0x120>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	4a3f      	ldr	r2, [pc, #252]	; (800d528 <xPortStartScheduler+0x128>)
 800d42c:	4293      	cmp	r3, r2
 800d42e:	d10a      	bne.n	800d446 <xPortStartScheduler+0x46>
	__asm volatile
 800d430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	60fb      	str	r3, [r7, #12]
}
 800d442:	bf00      	nop
 800d444:	e7fe      	b.n	800d444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d446:	4b39      	ldr	r3, [pc, #228]	; (800d52c <xPortStartScheduler+0x12c>)
 800d448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	22ff      	movs	r2, #255	; 0xff
 800d456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	b2db      	uxtb	r3, r3
 800d45e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d460:	78fb      	ldrb	r3, [r7, #3]
 800d462:	b2db      	uxtb	r3, r3
 800d464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d468:	b2da      	uxtb	r2, r3
 800d46a:	4b31      	ldr	r3, [pc, #196]	; (800d530 <xPortStartScheduler+0x130>)
 800d46c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d46e:	4b31      	ldr	r3, [pc, #196]	; (800d534 <xPortStartScheduler+0x134>)
 800d470:	2207      	movs	r2, #7
 800d472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d474:	e009      	b.n	800d48a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d476:	4b2f      	ldr	r3, [pc, #188]	; (800d534 <xPortStartScheduler+0x134>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3b01      	subs	r3, #1
 800d47c:	4a2d      	ldr	r2, [pc, #180]	; (800d534 <xPortStartScheduler+0x134>)
 800d47e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d480:	78fb      	ldrb	r3, [r7, #3]
 800d482:	b2db      	uxtb	r3, r3
 800d484:	005b      	lsls	r3, r3, #1
 800d486:	b2db      	uxtb	r3, r3
 800d488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d48a:	78fb      	ldrb	r3, [r7, #3]
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d492:	2b80      	cmp	r3, #128	; 0x80
 800d494:	d0ef      	beq.n	800d476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d496:	4b27      	ldr	r3, [pc, #156]	; (800d534 <xPortStartScheduler+0x134>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f1c3 0307 	rsb	r3, r3, #7
 800d49e:	2b04      	cmp	r3, #4
 800d4a0:	d00a      	beq.n	800d4b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a6:	f383 8811 	msr	BASEPRI, r3
 800d4aa:	f3bf 8f6f 	isb	sy
 800d4ae:	f3bf 8f4f 	dsb	sy
 800d4b2:	60bb      	str	r3, [r7, #8]
}
 800d4b4:	bf00      	nop
 800d4b6:	e7fe      	b.n	800d4b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d4b8:	4b1e      	ldr	r3, [pc, #120]	; (800d534 <xPortStartScheduler+0x134>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	021b      	lsls	r3, r3, #8
 800d4be:	4a1d      	ldr	r2, [pc, #116]	; (800d534 <xPortStartScheduler+0x134>)
 800d4c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d4c2:	4b1c      	ldr	r3, [pc, #112]	; (800d534 <xPortStartScheduler+0x134>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4ca:	4a1a      	ldr	r2, [pc, #104]	; (800d534 <xPortStartScheduler+0x134>)
 800d4cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d4d6:	4b18      	ldr	r3, [pc, #96]	; (800d538 <xPortStartScheduler+0x138>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	4a17      	ldr	r2, [pc, #92]	; (800d538 <xPortStartScheduler+0x138>)
 800d4dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d4e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d4e2:	4b15      	ldr	r3, [pc, #84]	; (800d538 <xPortStartScheduler+0x138>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	4a14      	ldr	r2, [pc, #80]	; (800d538 <xPortStartScheduler+0x138>)
 800d4e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d4ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d4ee:	f000 f8dd 	bl	800d6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d4f2:	4b12      	ldr	r3, [pc, #72]	; (800d53c <xPortStartScheduler+0x13c>)
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d4f8:	f000 f8fc 	bl	800d6f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d4fc:	4b10      	ldr	r3, [pc, #64]	; (800d540 <xPortStartScheduler+0x140>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a0f      	ldr	r2, [pc, #60]	; (800d540 <xPortStartScheduler+0x140>)
 800d502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d508:	f7ff ff66 	bl	800d3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d50c:	f7ff f854 	bl	800c5b8 <vTaskSwitchContext>
	prvTaskExitError();
 800d510:	f7ff ff20 	bl	800d354 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3718      	adds	r7, #24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	e000ed00 	.word	0xe000ed00
 800d524:	410fc271 	.word	0x410fc271
 800d528:	410fc270 	.word	0x410fc270
 800d52c:	e000e400 	.word	0xe000e400
 800d530:	20001258 	.word	0x20001258
 800d534:	2000125c 	.word	0x2000125c
 800d538:	e000ed20 	.word	0xe000ed20
 800d53c:	20000098 	.word	0x20000098
 800d540:	e000ef34 	.word	0xe000ef34

0800d544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
	__asm volatile
 800d54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54e:	f383 8811 	msr	BASEPRI, r3
 800d552:	f3bf 8f6f 	isb	sy
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	607b      	str	r3, [r7, #4]
}
 800d55c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d55e:	4b0f      	ldr	r3, [pc, #60]	; (800d59c <vPortEnterCritical+0x58>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3301      	adds	r3, #1
 800d564:	4a0d      	ldr	r2, [pc, #52]	; (800d59c <vPortEnterCritical+0x58>)
 800d566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d568:	4b0c      	ldr	r3, [pc, #48]	; (800d59c <vPortEnterCritical+0x58>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d10f      	bne.n	800d590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d570:	4b0b      	ldr	r3, [pc, #44]	; (800d5a0 <vPortEnterCritical+0x5c>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	b2db      	uxtb	r3, r3
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00a      	beq.n	800d590 <vPortEnterCritical+0x4c>
	__asm volatile
 800d57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d57e:	f383 8811 	msr	BASEPRI, r3
 800d582:	f3bf 8f6f 	isb	sy
 800d586:	f3bf 8f4f 	dsb	sy
 800d58a:	603b      	str	r3, [r7, #0]
}
 800d58c:	bf00      	nop
 800d58e:	e7fe      	b.n	800d58e <vPortEnterCritical+0x4a>
	}
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr
 800d59c:	20000098 	.word	0x20000098
 800d5a0:	e000ed04 	.word	0xe000ed04

0800d5a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d5aa:	4b12      	ldr	r3, [pc, #72]	; (800d5f4 <vPortExitCritical+0x50>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d10a      	bne.n	800d5c8 <vPortExitCritical+0x24>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	607b      	str	r3, [r7, #4]
}
 800d5c4:	bf00      	nop
 800d5c6:	e7fe      	b.n	800d5c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d5c8:	4b0a      	ldr	r3, [pc, #40]	; (800d5f4 <vPortExitCritical+0x50>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	4a09      	ldr	r2, [pc, #36]	; (800d5f4 <vPortExitCritical+0x50>)
 800d5d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d5d2:	4b08      	ldr	r3, [pc, #32]	; (800d5f4 <vPortExitCritical+0x50>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d105      	bne.n	800d5e6 <vPortExitCritical+0x42>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	f383 8811 	msr	BASEPRI, r3
}
 800d5e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d5e6:	bf00      	nop
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	20000098 	.word	0x20000098
	...

0800d600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d600:	f3ef 8009 	mrs	r0, PSP
 800d604:	f3bf 8f6f 	isb	sy
 800d608:	4b15      	ldr	r3, [pc, #84]	; (800d660 <pxCurrentTCBConst>)
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	f01e 0f10 	tst.w	lr, #16
 800d610:	bf08      	it	eq
 800d612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61a:	6010      	str	r0, [r2, #0]
 800d61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d620:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d624:	f380 8811 	msr	BASEPRI, r0
 800d628:	f3bf 8f4f 	dsb	sy
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f7fe ffc2 	bl	800c5b8 <vTaskSwitchContext>
 800d634:	f04f 0000 	mov.w	r0, #0
 800d638:	f380 8811 	msr	BASEPRI, r0
 800d63c:	bc09      	pop	{r0, r3}
 800d63e:	6819      	ldr	r1, [r3, #0]
 800d640:	6808      	ldr	r0, [r1, #0]
 800d642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d646:	f01e 0f10 	tst.w	lr, #16
 800d64a:	bf08      	it	eq
 800d64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d650:	f380 8809 	msr	PSP, r0
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	f3af 8000 	nop.w

0800d660 <pxCurrentTCBConst>:
 800d660:	20000c2c 	.word	0x20000c2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d664:	bf00      	nop
 800d666:	bf00      	nop

0800d668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
	__asm volatile
 800d66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d672:	f383 8811 	msr	BASEPRI, r3
 800d676:	f3bf 8f6f 	isb	sy
 800d67a:	f3bf 8f4f 	dsb	sy
 800d67e:	607b      	str	r3, [r7, #4]
}
 800d680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d682:	f7fe fedf 	bl	800c444 <xTaskIncrementTick>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d003      	beq.n	800d694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d68c:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <xPortSysTickHandler+0x40>)
 800d68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	2300      	movs	r3, #0
 800d696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	f383 8811 	msr	BASEPRI, r3
}
 800d69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d6a0:	bf00      	nop
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	e000ed04 	.word	0xe000ed04

0800d6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d6b0:	4b0b      	ldr	r3, [pc, #44]	; (800d6e0 <vPortSetupTimerInterrupt+0x34>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d6b6:	4b0b      	ldr	r3, [pc, #44]	; (800d6e4 <vPortSetupTimerInterrupt+0x38>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d6bc:	4b0a      	ldr	r3, [pc, #40]	; (800d6e8 <vPortSetupTimerInterrupt+0x3c>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	4a0a      	ldr	r2, [pc, #40]	; (800d6ec <vPortSetupTimerInterrupt+0x40>)
 800d6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d6c6:	099b      	lsrs	r3, r3, #6
 800d6c8:	4a09      	ldr	r2, [pc, #36]	; (800d6f0 <vPortSetupTimerInterrupt+0x44>)
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d6ce:	4b04      	ldr	r3, [pc, #16]	; (800d6e0 <vPortSetupTimerInterrupt+0x34>)
 800d6d0:	2207      	movs	r2, #7
 800d6d2:	601a      	str	r2, [r3, #0]
}
 800d6d4:	bf00      	nop
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	e000e010 	.word	0xe000e010
 800d6e4:	e000e018 	.word	0xe000e018
 800d6e8:	20000000 	.word	0x20000000
 800d6ec:	10624dd3 	.word	0x10624dd3
 800d6f0:	e000e014 	.word	0xe000e014

0800d6f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d6f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d704 <vPortEnableVFP+0x10>
 800d6f8:	6801      	ldr	r1, [r0, #0]
 800d6fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d6fe:	6001      	str	r1, [r0, #0]
 800d700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d702:	bf00      	nop
 800d704:	e000ed88 	.word	0xe000ed88

0800d708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d70e:	f3ef 8305 	mrs	r3, IPSR
 800d712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2b0f      	cmp	r3, #15
 800d718:	d914      	bls.n	800d744 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d71a:	4a17      	ldr	r2, [pc, #92]	; (800d778 <vPortValidateInterruptPriority+0x70>)
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	4413      	add	r3, r2
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d724:	4b15      	ldr	r3, [pc, #84]	; (800d77c <vPortValidateInterruptPriority+0x74>)
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	7afa      	ldrb	r2, [r7, #11]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d20a      	bcs.n	800d744 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	607b      	str	r3, [r7, #4]
}
 800d740:	bf00      	nop
 800d742:	e7fe      	b.n	800d742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d744:	4b0e      	ldr	r3, [pc, #56]	; (800d780 <vPortValidateInterruptPriority+0x78>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d74c:	4b0d      	ldr	r3, [pc, #52]	; (800d784 <vPortValidateInterruptPriority+0x7c>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	429a      	cmp	r2, r3
 800d752:	d90a      	bls.n	800d76a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d758:	f383 8811 	msr	BASEPRI, r3
 800d75c:	f3bf 8f6f 	isb	sy
 800d760:	f3bf 8f4f 	dsb	sy
 800d764:	603b      	str	r3, [r7, #0]
}
 800d766:	bf00      	nop
 800d768:	e7fe      	b.n	800d768 <vPortValidateInterruptPriority+0x60>
	}
 800d76a:	bf00      	nop
 800d76c:	3714      	adds	r7, #20
 800d76e:	46bd      	mov	sp, r7
 800d770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d774:	4770      	bx	lr
 800d776:	bf00      	nop
 800d778:	e000e3f0 	.word	0xe000e3f0
 800d77c:	20001258 	.word	0x20001258
 800d780:	e000ed0c 	.word	0xe000ed0c
 800d784:	2000125c 	.word	0x2000125c

0800d788 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b08a      	sub	sp, #40	; 0x28
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d790:	2300      	movs	r3, #0
 800d792:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d794:	f7fe fd88 	bl	800c2a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d798:	4b5b      	ldr	r3, [pc, #364]	; (800d908 <pvPortMalloc+0x180>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d7a0:	f000 f920 	bl	800d9e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d7a4:	4b59      	ldr	r3, [pc, #356]	; (800d90c <pvPortMalloc+0x184>)
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	4013      	ands	r3, r2
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f040 8093 	bne.w	800d8d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d01d      	beq.n	800d7f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d7b8:	2208      	movs	r2, #8
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4413      	add	r3, r2
 800d7be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f003 0307 	and.w	r3, r3, #7
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d014      	beq.n	800d7f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f023 0307 	bic.w	r3, r3, #7
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f003 0307 	and.w	r3, r3, #7
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00a      	beq.n	800d7f4 <pvPortMalloc+0x6c>
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	617b      	str	r3, [r7, #20]
}
 800d7f0:	bf00      	nop
 800d7f2:	e7fe      	b.n	800d7f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d06e      	beq.n	800d8d8 <pvPortMalloc+0x150>
 800d7fa:	4b45      	ldr	r3, [pc, #276]	; (800d910 <pvPortMalloc+0x188>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	429a      	cmp	r2, r3
 800d802:	d869      	bhi.n	800d8d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d804:	4b43      	ldr	r3, [pc, #268]	; (800d914 <pvPortMalloc+0x18c>)
 800d806:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d808:	4b42      	ldr	r3, [pc, #264]	; (800d914 <pvPortMalloc+0x18c>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d80e:	e004      	b.n	800d81a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	429a      	cmp	r2, r3
 800d822:	d903      	bls.n	800d82c <pvPortMalloc+0xa4>
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d1f1      	bne.n	800d810 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d82c:	4b36      	ldr	r3, [pc, #216]	; (800d908 <pvPortMalloc+0x180>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d832:	429a      	cmp	r2, r3
 800d834:	d050      	beq.n	800d8d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d836:	6a3b      	ldr	r3, [r7, #32]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2208      	movs	r2, #8
 800d83c:	4413      	add	r3, r2
 800d83e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	6a3b      	ldr	r3, [r7, #32]
 800d846:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84a:	685a      	ldr	r2, [r3, #4]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	1ad2      	subs	r2, r2, r3
 800d850:	2308      	movs	r3, #8
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	429a      	cmp	r2, r3
 800d856:	d91f      	bls.n	800d898 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4413      	add	r3, r2
 800d85e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	f003 0307 	and.w	r3, r3, #7
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00a      	beq.n	800d880 <pvPortMalloc+0xf8>
	__asm volatile
 800d86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d86e:	f383 8811 	msr	BASEPRI, r3
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	f3bf 8f4f 	dsb	sy
 800d87a:	613b      	str	r3, [r7, #16]
}
 800d87c:	bf00      	nop
 800d87e:	e7fe      	b.n	800d87e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	1ad2      	subs	r2, r2, r3
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	687a      	ldr	r2, [r7, #4]
 800d890:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d892:	69b8      	ldr	r0, [r7, #24]
 800d894:	f000 f908 	bl	800daa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d898:	4b1d      	ldr	r3, [pc, #116]	; (800d910 <pvPortMalloc+0x188>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	1ad3      	subs	r3, r2, r3
 800d8a2:	4a1b      	ldr	r2, [pc, #108]	; (800d910 <pvPortMalloc+0x188>)
 800d8a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d8a6:	4b1a      	ldr	r3, [pc, #104]	; (800d910 <pvPortMalloc+0x188>)
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	4b1b      	ldr	r3, [pc, #108]	; (800d918 <pvPortMalloc+0x190>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d203      	bcs.n	800d8ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d8b2:	4b17      	ldr	r3, [pc, #92]	; (800d910 <pvPortMalloc+0x188>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a18      	ldr	r2, [pc, #96]	; (800d918 <pvPortMalloc+0x190>)
 800d8b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8bc:	685a      	ldr	r2, [r3, #4]
 800d8be:	4b13      	ldr	r3, [pc, #76]	; (800d90c <pvPortMalloc+0x184>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	431a      	orrs	r2, r3
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d8ce:	4b13      	ldr	r3, [pc, #76]	; (800d91c <pvPortMalloc+0x194>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	4a11      	ldr	r2, [pc, #68]	; (800d91c <pvPortMalloc+0x194>)
 800d8d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d8d8:	f7fe fcf4 	bl	800c2c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8dc:	69fb      	ldr	r3, [r7, #28]
 800d8de:	f003 0307 	and.w	r3, r3, #7
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d00a      	beq.n	800d8fc <pvPortMalloc+0x174>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	60fb      	str	r3, [r7, #12]
}
 800d8f8:	bf00      	nop
 800d8fa:	e7fe      	b.n	800d8fa <pvPortMalloc+0x172>
	return pvReturn;
 800d8fc:	69fb      	ldr	r3, [r7, #28]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3728      	adds	r7, #40	; 0x28
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	20004e68 	.word	0x20004e68
 800d90c:	20004e7c 	.word	0x20004e7c
 800d910:	20004e6c 	.word	0x20004e6c
 800d914:	20004e60 	.word	0x20004e60
 800d918:	20004e70 	.word	0x20004e70
 800d91c:	20004e74 	.word	0x20004e74

0800d920 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d04d      	beq.n	800d9ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d932:	2308      	movs	r3, #8
 800d934:	425b      	negs	r3, r3
 800d936:	697a      	ldr	r2, [r7, #20]
 800d938:	4413      	add	r3, r2
 800d93a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	685a      	ldr	r2, [r3, #4]
 800d944:	4b24      	ldr	r3, [pc, #144]	; (800d9d8 <vPortFree+0xb8>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	4013      	ands	r3, r2
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10a      	bne.n	800d964 <vPortFree+0x44>
	__asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	60fb      	str	r3, [r7, #12]
}
 800d960:	bf00      	nop
 800d962:	e7fe      	b.n	800d962 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00a      	beq.n	800d982 <vPortFree+0x62>
	__asm volatile
 800d96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	60bb      	str	r3, [r7, #8]
}
 800d97e:	bf00      	nop
 800d980:	e7fe      	b.n	800d980 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	685a      	ldr	r2, [r3, #4]
 800d986:	4b14      	ldr	r3, [pc, #80]	; (800d9d8 <vPortFree+0xb8>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4013      	ands	r3, r2
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d01e      	beq.n	800d9ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d11a      	bne.n	800d9ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	685a      	ldr	r2, [r3, #4]
 800d99c:	4b0e      	ldr	r3, [pc, #56]	; (800d9d8 <vPortFree+0xb8>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	43db      	mvns	r3, r3
 800d9a2:	401a      	ands	r2, r3
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d9a8:	f7fe fc7e 	bl	800c2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	685a      	ldr	r2, [r3, #4]
 800d9b0:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <vPortFree+0xbc>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	4a09      	ldr	r2, [pc, #36]	; (800d9dc <vPortFree+0xbc>)
 800d9b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d9ba:	6938      	ldr	r0, [r7, #16]
 800d9bc:	f000 f874 	bl	800daa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d9c0:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <vPortFree+0xc0>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	4a06      	ldr	r2, [pc, #24]	; (800d9e0 <vPortFree+0xc0>)
 800d9c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d9ca:	f7fe fc7b 	bl	800c2c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d9ce:	bf00      	nop
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	20004e7c 	.word	0x20004e7c
 800d9dc:	20004e6c 	.word	0x20004e6c
 800d9e0:	20004e78 	.word	0x20004e78

0800d9e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d9ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d9ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d9f0:	4b27      	ldr	r3, [pc, #156]	; (800da90 <prvHeapInit+0xac>)
 800d9f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f003 0307 	and.w	r3, r3, #7
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00c      	beq.n	800da18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3307      	adds	r3, #7
 800da02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f023 0307 	bic.w	r3, r3, #7
 800da0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	4a1f      	ldr	r2, [pc, #124]	; (800da90 <prvHeapInit+0xac>)
 800da14:	4413      	add	r3, r2
 800da16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da1c:	4a1d      	ldr	r2, [pc, #116]	; (800da94 <prvHeapInit+0xb0>)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da22:	4b1c      	ldr	r3, [pc, #112]	; (800da94 <prvHeapInit+0xb0>)
 800da24:	2200      	movs	r2, #0
 800da26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	68ba      	ldr	r2, [r7, #8]
 800da2c:	4413      	add	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da30:	2208      	movs	r2, #8
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	1a9b      	subs	r3, r3, r2
 800da36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f023 0307 	bic.w	r3, r3, #7
 800da3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	4a15      	ldr	r2, [pc, #84]	; (800da98 <prvHeapInit+0xb4>)
 800da44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800da46:	4b14      	ldr	r3, [pc, #80]	; (800da98 <prvHeapInit+0xb4>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2200      	movs	r2, #0
 800da4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800da4e:	4b12      	ldr	r3, [pc, #72]	; (800da98 <prvHeapInit+0xb4>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2200      	movs	r2, #0
 800da54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	1ad2      	subs	r2, r2, r3
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800da64:	4b0c      	ldr	r3, [pc, #48]	; (800da98 <prvHeapInit+0xb4>)
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	4a0a      	ldr	r2, [pc, #40]	; (800da9c <prvHeapInit+0xb8>)
 800da72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	4a09      	ldr	r2, [pc, #36]	; (800daa0 <prvHeapInit+0xbc>)
 800da7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da7c:	4b09      	ldr	r3, [pc, #36]	; (800daa4 <prvHeapInit+0xc0>)
 800da7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da82:	601a      	str	r2, [r3, #0]
}
 800da84:	bf00      	nop
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr
 800da90:	20001260 	.word	0x20001260
 800da94:	20004e60 	.word	0x20004e60
 800da98:	20004e68 	.word	0x20004e68
 800da9c:	20004e70 	.word	0x20004e70
 800daa0:	20004e6c 	.word	0x20004e6c
 800daa4:	20004e7c 	.word	0x20004e7c

0800daa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dab0:	4b28      	ldr	r3, [pc, #160]	; (800db54 <prvInsertBlockIntoFreeList+0xac>)
 800dab2:	60fb      	str	r3, [r7, #12]
 800dab4:	e002      	b.n	800dabc <prvInsertBlockIntoFreeList+0x14>
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	60fb      	str	r3, [r7, #12]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d8f7      	bhi.n	800dab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	4413      	add	r3, r2
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d108      	bne.n	800daea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	441a      	add	r2, r3
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	68ba      	ldr	r2, [r7, #8]
 800daf4:	441a      	add	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d118      	bne.n	800db30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	4b15      	ldr	r3, [pc, #84]	; (800db58 <prvInsertBlockIntoFreeList+0xb0>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	429a      	cmp	r2, r3
 800db08:	d00d      	beq.n	800db26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	685a      	ldr	r2, [r3, #4]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	441a      	add	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	601a      	str	r2, [r3, #0]
 800db24:	e008      	b.n	800db38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db26:	4b0c      	ldr	r3, [pc, #48]	; (800db58 <prvInsertBlockIntoFreeList+0xb0>)
 800db28:	681a      	ldr	r2, [r3, #0]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	601a      	str	r2, [r3, #0]
 800db2e:	e003      	b.n	800db38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db38:	68fa      	ldr	r2, [r7, #12]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d002      	beq.n	800db46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db46:	bf00      	nop
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	20004e60 	.word	0x20004e60
 800db58:	20004e68 	.word	0x20004e68

0800db5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800db60:	2201      	movs	r2, #1
 800db62:	4912      	ldr	r1, [pc, #72]	; (800dbac <MX_USB_DEVICE_Init+0x50>)
 800db64:	4812      	ldr	r0, [pc, #72]	; (800dbb0 <MX_USB_DEVICE_Init+0x54>)
 800db66:	f7fb fcf3 	bl	8009550 <USBD_Init>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db70:	f7f3 f858 	bl	8000c24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800db74:	490f      	ldr	r1, [pc, #60]	; (800dbb4 <MX_USB_DEVICE_Init+0x58>)
 800db76:	480e      	ldr	r0, [pc, #56]	; (800dbb0 <MX_USB_DEVICE_Init+0x54>)
 800db78:	f7fb fd1a 	bl	80095b0 <USBD_RegisterClass>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d001      	beq.n	800db86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db82:	f7f3 f84f 	bl	8000c24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800db86:	490c      	ldr	r1, [pc, #48]	; (800dbb8 <MX_USB_DEVICE_Init+0x5c>)
 800db88:	4809      	ldr	r0, [pc, #36]	; (800dbb0 <MX_USB_DEVICE_Init+0x54>)
 800db8a:	f7fb fc51 	bl	8009430 <USBD_CDC_RegisterInterface>
 800db8e:	4603      	mov	r3, r0
 800db90:	2b00      	cmp	r3, #0
 800db92:	d001      	beq.n	800db98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db94:	f7f3 f846 	bl	8000c24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800db98:	4805      	ldr	r0, [pc, #20]	; (800dbb0 <MX_USB_DEVICE_Init+0x54>)
 800db9a:	f7fb fd3f 	bl	800961c <USBD_Start>
 800db9e:	4603      	mov	r3, r0
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d001      	beq.n	800dba8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dba4:	f7f3 f83e 	bl	8000c24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dba8:	bf00      	nop
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	200000b0 	.word	0x200000b0
 800dbb0:	20004e80 	.word	0x20004e80
 800dbb4:	20000018 	.word	0x20000018
 800dbb8:	2000009c 	.word	0x2000009c

0800dbbc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	4905      	ldr	r1, [pc, #20]	; (800dbd8 <CDC_Init_HS+0x1c>)
 800dbc4:	4805      	ldr	r0, [pc, #20]	; (800dbdc <CDC_Init_HS+0x20>)
 800dbc6:	f7fb fc4d 	bl	8009464 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800dbca:	4905      	ldr	r1, [pc, #20]	; (800dbe0 <CDC_Init_HS+0x24>)
 800dbcc:	4803      	ldr	r0, [pc, #12]	; (800dbdc <CDC_Init_HS+0x20>)
 800dbce:	f7fb fc6b 	bl	80094a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dbd2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	2000595c 	.word	0x2000595c
 800dbdc:	20004e80 	.word	0x20004e80
 800dbe0:	2000515c 	.word	0x2000515c

0800dbe4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800dbe8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	6039      	str	r1, [r7, #0]
 800dbfe:	71fb      	strb	r3, [r7, #7]
 800dc00:	4613      	mov	r3, r2
 800dc02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800dc04:	79fb      	ldrb	r3, [r7, #7]
 800dc06:	2b23      	cmp	r3, #35	; 0x23
 800dc08:	d84a      	bhi.n	800dca0 <CDC_Control_HS+0xac>
 800dc0a:	a201      	add	r2, pc, #4	; (adr r2, 800dc10 <CDC_Control_HS+0x1c>)
 800dc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc10:	0800dca1 	.word	0x0800dca1
 800dc14:	0800dca1 	.word	0x0800dca1
 800dc18:	0800dca1 	.word	0x0800dca1
 800dc1c:	0800dca1 	.word	0x0800dca1
 800dc20:	0800dca1 	.word	0x0800dca1
 800dc24:	0800dca1 	.word	0x0800dca1
 800dc28:	0800dca1 	.word	0x0800dca1
 800dc2c:	0800dca1 	.word	0x0800dca1
 800dc30:	0800dca1 	.word	0x0800dca1
 800dc34:	0800dca1 	.word	0x0800dca1
 800dc38:	0800dca1 	.word	0x0800dca1
 800dc3c:	0800dca1 	.word	0x0800dca1
 800dc40:	0800dca1 	.word	0x0800dca1
 800dc44:	0800dca1 	.word	0x0800dca1
 800dc48:	0800dca1 	.word	0x0800dca1
 800dc4c:	0800dca1 	.word	0x0800dca1
 800dc50:	0800dca1 	.word	0x0800dca1
 800dc54:	0800dca1 	.word	0x0800dca1
 800dc58:	0800dca1 	.word	0x0800dca1
 800dc5c:	0800dca1 	.word	0x0800dca1
 800dc60:	0800dca1 	.word	0x0800dca1
 800dc64:	0800dca1 	.word	0x0800dca1
 800dc68:	0800dca1 	.word	0x0800dca1
 800dc6c:	0800dca1 	.word	0x0800dca1
 800dc70:	0800dca1 	.word	0x0800dca1
 800dc74:	0800dca1 	.word	0x0800dca1
 800dc78:	0800dca1 	.word	0x0800dca1
 800dc7c:	0800dca1 	.word	0x0800dca1
 800dc80:	0800dca1 	.word	0x0800dca1
 800dc84:	0800dca1 	.word	0x0800dca1
 800dc88:	0800dca1 	.word	0x0800dca1
 800dc8c:	0800dca1 	.word	0x0800dca1
 800dc90:	0800dca1 	.word	0x0800dca1
 800dc94:	0800dca1 	.word	0x0800dca1
 800dc98:	0800dca1 	.word	0x0800dca1
 800dc9c:	0800dca1 	.word	0x0800dca1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dca0:	bf00      	nop
  }

  return (USBD_OK);
 800dca2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800dcba:	6879      	ldr	r1, [r7, #4]
 800dcbc:	4805      	ldr	r0, [pc, #20]	; (800dcd4 <CDC_Receive_HS+0x24>)
 800dcbe:	f7fb fbf3 	bl	80094a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800dcc2:	4804      	ldr	r0, [pc, #16]	; (800dcd4 <CDC_Receive_HS+0x24>)
 800dcc4:	f7fb fc0e 	bl	80094e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dcc8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20004e80 	.word	0x20004e80

0800dcd8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b087      	sub	sp, #28
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	4613      	mov	r3, r2
 800dce4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800dcea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	371c      	adds	r7, #28
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
	...

0800dcfc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	4603      	mov	r3, r0
 800dd04:	6039      	str	r1, [r7, #0]
 800dd06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	2212      	movs	r2, #18
 800dd0c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800dd0e:	4b03      	ldr	r3, [pc, #12]	; (800dd1c <USBD_HS_DeviceDescriptor+0x20>)
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	370c      	adds	r7, #12
 800dd14:	46bd      	mov	sp, r7
 800dd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1a:	4770      	bx	lr
 800dd1c:	200000cc 	.word	0x200000cc

0800dd20 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b083      	sub	sp, #12
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4603      	mov	r3, r0
 800dd28:	6039      	str	r1, [r7, #0]
 800dd2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	2204      	movs	r2, #4
 800dd30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd32:	4b03      	ldr	r3, [pc, #12]	; (800dd40 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	370c      	adds	r7, #12
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	200000e0 	.word	0x200000e0

0800dd44 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	6039      	str	r1, [r7, #0]
 800dd4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd50:	79fb      	ldrb	r3, [r7, #7]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d105      	bne.n	800dd62 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	4907      	ldr	r1, [pc, #28]	; (800dd78 <USBD_HS_ProductStrDescriptor+0x34>)
 800dd5a:	4808      	ldr	r0, [pc, #32]	; (800dd7c <USBD_HS_ProductStrDescriptor+0x38>)
 800dd5c:	f7fc fe0a 	bl	800a974 <USBD_GetString>
 800dd60:	e004      	b.n	800dd6c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800dd62:	683a      	ldr	r2, [r7, #0]
 800dd64:	4904      	ldr	r1, [pc, #16]	; (800dd78 <USBD_HS_ProductStrDescriptor+0x34>)
 800dd66:	4805      	ldr	r0, [pc, #20]	; (800dd7c <USBD_HS_ProductStrDescriptor+0x38>)
 800dd68:	f7fc fe04 	bl	800a974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd6c:	4b02      	ldr	r3, [pc, #8]	; (800dd78 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	2000615c 	.word	0x2000615c
 800dd7c:	0800e5f8 	.word	0x0800e5f8

0800dd80 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	4603      	mov	r3, r0
 800dd88:	6039      	str	r1, [r7, #0]
 800dd8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	4904      	ldr	r1, [pc, #16]	; (800dda0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800dd90:	4804      	ldr	r0, [pc, #16]	; (800dda4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800dd92:	f7fc fdef 	bl	800a974 <USBD_GetString>
  return USBD_StrDesc;
 800dd96:	4b02      	ldr	r3, [pc, #8]	; (800dda0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	2000615c 	.word	0x2000615c
 800dda4:	0800e610 	.word	0x0800e610

0800dda8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	4603      	mov	r3, r0
 800ddb0:	6039      	str	r1, [r7, #0]
 800ddb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	221a      	movs	r2, #26
 800ddb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddba:	f000 f843 	bl	800de44 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ddbe:	4b02      	ldr	r3, [pc, #8]	; (800ddc8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3708      	adds	r7, #8
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	200000e4 	.word	0x200000e4

0800ddcc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	6039      	str	r1, [r7, #0]
 800ddd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddd8:	79fb      	ldrb	r3, [r7, #7]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d105      	bne.n	800ddea <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ddde:	683a      	ldr	r2, [r7, #0]
 800dde0:	4907      	ldr	r1, [pc, #28]	; (800de00 <USBD_HS_ConfigStrDescriptor+0x34>)
 800dde2:	4808      	ldr	r0, [pc, #32]	; (800de04 <USBD_HS_ConfigStrDescriptor+0x38>)
 800dde4:	f7fc fdc6 	bl	800a974 <USBD_GetString>
 800dde8:	e004      	b.n	800ddf4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	4904      	ldr	r1, [pc, #16]	; (800de00 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ddee:	4805      	ldr	r0, [pc, #20]	; (800de04 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ddf0:	f7fc fdc0 	bl	800a974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ddf4:	4b02      	ldr	r3, [pc, #8]	; (800de00 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3708      	adds	r7, #8
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	2000615c 	.word	0x2000615c
 800de04:	0800e624 	.word	0x0800e624

0800de08 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	6039      	str	r1, [r7, #0]
 800de12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de14:	79fb      	ldrb	r3, [r7, #7]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d105      	bne.n	800de26 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800de1a:	683a      	ldr	r2, [r7, #0]
 800de1c:	4907      	ldr	r1, [pc, #28]	; (800de3c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800de1e:	4808      	ldr	r0, [pc, #32]	; (800de40 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800de20:	f7fc fda8 	bl	800a974 <USBD_GetString>
 800de24:	e004      	b.n	800de30 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	4904      	ldr	r1, [pc, #16]	; (800de3c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800de2a:	4805      	ldr	r0, [pc, #20]	; (800de40 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800de2c:	f7fc fda2 	bl	800a974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de30:	4b02      	ldr	r3, [pc, #8]	; (800de3c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	2000615c 	.word	0x2000615c
 800de40:	0800e630 	.word	0x0800e630

0800de44 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de4a:	4b0f      	ldr	r3, [pc, #60]	; (800de88 <Get_SerialNum+0x44>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de50:	4b0e      	ldr	r3, [pc, #56]	; (800de8c <Get_SerialNum+0x48>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de56:	4b0e      	ldr	r3, [pc, #56]	; (800de90 <Get_SerialNum+0x4c>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	4413      	add	r3, r2
 800de62:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d009      	beq.n	800de7e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de6a:	2208      	movs	r2, #8
 800de6c:	4909      	ldr	r1, [pc, #36]	; (800de94 <Get_SerialNum+0x50>)
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	f000 f814 	bl	800de9c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de74:	2204      	movs	r2, #4
 800de76:	4908      	ldr	r1, [pc, #32]	; (800de98 <Get_SerialNum+0x54>)
 800de78:	68b8      	ldr	r0, [r7, #8]
 800de7a:	f000 f80f 	bl	800de9c <IntToUnicode>
  }
}
 800de7e:	bf00      	nop
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	1fff7a10 	.word	0x1fff7a10
 800de8c:	1fff7a14 	.word	0x1fff7a14
 800de90:	1fff7a18 	.word	0x1fff7a18
 800de94:	200000e6 	.word	0x200000e6
 800de98:	200000f6 	.word	0x200000f6

0800de9c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b087      	sub	sp, #28
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	4613      	mov	r3, r2
 800dea8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800deae:	2300      	movs	r3, #0
 800deb0:	75fb      	strb	r3, [r7, #23]
 800deb2:	e027      	b.n	800df04 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	0f1b      	lsrs	r3, r3, #28
 800deb8:	2b09      	cmp	r3, #9
 800deba:	d80b      	bhi.n	800ded4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	0f1b      	lsrs	r3, r3, #28
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	7dfb      	ldrb	r3, [r7, #23]
 800dec4:	005b      	lsls	r3, r3, #1
 800dec6:	4619      	mov	r1, r3
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	440b      	add	r3, r1
 800decc:	3230      	adds	r2, #48	; 0x30
 800dece:	b2d2      	uxtb	r2, r2
 800ded0:	701a      	strb	r2, [r3, #0]
 800ded2:	e00a      	b.n	800deea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	0f1b      	lsrs	r3, r3, #28
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	7dfb      	ldrb	r3, [r7, #23]
 800dedc:	005b      	lsls	r3, r3, #1
 800dede:	4619      	mov	r1, r3
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	440b      	add	r3, r1
 800dee4:	3237      	adds	r2, #55	; 0x37
 800dee6:	b2d2      	uxtb	r2, r2
 800dee8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	011b      	lsls	r3, r3, #4
 800deee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800def0:	7dfb      	ldrb	r3, [r7, #23]
 800def2:	005b      	lsls	r3, r3, #1
 800def4:	3301      	adds	r3, #1
 800def6:	68ba      	ldr	r2, [r7, #8]
 800def8:	4413      	add	r3, r2
 800defa:	2200      	movs	r2, #0
 800defc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800defe:	7dfb      	ldrb	r3, [r7, #23]
 800df00:	3301      	adds	r3, #1
 800df02:	75fb      	strb	r3, [r7, #23]
 800df04:	7dfa      	ldrb	r2, [r7, #23]
 800df06:	79fb      	ldrb	r3, [r7, #7]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d3d3      	bcc.n	800deb4 <IntToUnicode+0x18>
  }
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	371c      	adds	r7, #28
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
	...

0800df1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b08a      	sub	sp, #40	; 0x28
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df24:	f107 0314 	add.w	r3, r7, #20
 800df28:	2200      	movs	r2, #0
 800df2a:	601a      	str	r2, [r3, #0]
 800df2c:	605a      	str	r2, [r3, #4]
 800df2e:	609a      	str	r2, [r3, #8]
 800df30:	60da      	str	r2, [r3, #12]
 800df32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a1d      	ldr	r2, [pc, #116]	; (800dfb0 <HAL_PCD_MspInit+0x94>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d134      	bne.n	800dfa8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800df3e:	2300      	movs	r3, #0
 800df40:	613b      	str	r3, [r7, #16]
 800df42:	4b1c      	ldr	r3, [pc, #112]	; (800dfb4 <HAL_PCD_MspInit+0x98>)
 800df44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df46:	4a1b      	ldr	r2, [pc, #108]	; (800dfb4 <HAL_PCD_MspInit+0x98>)
 800df48:	f043 0302 	orr.w	r3, r3, #2
 800df4c:	6313      	str	r3, [r2, #48]	; 0x30
 800df4e:	4b19      	ldr	r3, [pc, #100]	; (800dfb4 <HAL_PCD_MspInit+0x98>)
 800df50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df52:	f003 0302 	and.w	r3, r3, #2
 800df56:	613b      	str	r3, [r7, #16]
 800df58:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800df5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800df5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df60:	2302      	movs	r3, #2
 800df62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df64:	2300      	movs	r3, #0
 800df66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800df68:	2303      	movs	r3, #3
 800df6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800df6c:	230c      	movs	r3, #12
 800df6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800df70:	f107 0314 	add.w	r3, r7, #20
 800df74:	4619      	mov	r1, r3
 800df76:	4810      	ldr	r0, [pc, #64]	; (800dfb8 <HAL_PCD_MspInit+0x9c>)
 800df78:	f7f4 f9ce 	bl	8002318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800df7c:	2300      	movs	r3, #0
 800df7e:	60fb      	str	r3, [r7, #12]
 800df80:	4b0c      	ldr	r3, [pc, #48]	; (800dfb4 <HAL_PCD_MspInit+0x98>)
 800df82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df84:	4a0b      	ldr	r2, [pc, #44]	; (800dfb4 <HAL_PCD_MspInit+0x98>)
 800df86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800df8a:	6313      	str	r3, [r2, #48]	; 0x30
 800df8c:	4b09      	ldr	r3, [pc, #36]	; (800dfb4 <HAL_PCD_MspInit+0x98>)
 800df8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df94:	60fb      	str	r3, [r7, #12]
 800df96:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800df98:	2200      	movs	r2, #0
 800df9a:	2105      	movs	r1, #5
 800df9c:	204d      	movs	r0, #77	; 0x4d
 800df9e:	f7f3 fdec 	bl	8001b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dfa2:	204d      	movs	r0, #77	; 0x4d
 800dfa4:	f7f3 fe05 	bl	8001bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800dfa8:	bf00      	nop
 800dfaa:	3728      	adds	r7, #40	; 0x28
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	40040000 	.word	0x40040000
 800dfb4:	40023800 	.word	0x40023800
 800dfb8:	40020400 	.word	0x40020400

0800dfbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b082      	sub	sp, #8
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	4610      	mov	r0, r2
 800dfd4:	f7fb fb6f 	bl	80096b6 <USBD_LL_SetupStage>
}
 800dfd8:	bf00      	nop
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dff2:	78fa      	ldrb	r2, [r7, #3]
 800dff4:	6879      	ldr	r1, [r7, #4]
 800dff6:	4613      	mov	r3, r2
 800dff8:	00db      	lsls	r3, r3, #3
 800dffa:	4413      	add	r3, r2
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	440b      	add	r3, r1
 800e000:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	78fb      	ldrb	r3, [r7, #3]
 800e008:	4619      	mov	r1, r3
 800e00a:	f7fb fba9 	bl	8009760 <USBD_LL_DataOutStage>
}
 800e00e:	bf00      	nop
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}

0800e016 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e016:	b580      	push	{r7, lr}
 800e018:	b082      	sub	sp, #8
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	460b      	mov	r3, r1
 800e020:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e028:	78fa      	ldrb	r2, [r7, #3]
 800e02a:	6879      	ldr	r1, [r7, #4]
 800e02c:	4613      	mov	r3, r2
 800e02e:	00db      	lsls	r3, r3, #3
 800e030:	4413      	add	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	440b      	add	r3, r1
 800e036:	334c      	adds	r3, #76	; 0x4c
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	78fb      	ldrb	r3, [r7, #3]
 800e03c:	4619      	mov	r1, r3
 800e03e:	f7fb fc42 	bl	80098c6 <USBD_LL_DataInStage>
}
 800e042:	bf00      	nop
 800e044:	3708      	adds	r7, #8
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b082      	sub	sp, #8
 800e04e:	af00      	add	r7, sp, #0
 800e050:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fb fd76 	bl	8009b4a <USBD_LL_SOF>
}
 800e05e:	bf00      	nop
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b084      	sub	sp, #16
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e06e:	2301      	movs	r3, #1
 800e070:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d102      	bne.n	800e080 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e07a:	2300      	movs	r3, #0
 800e07c:	73fb      	strb	r3, [r7, #15]
 800e07e:	e008      	b.n	800e092 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	2b02      	cmp	r3, #2
 800e086:	d102      	bne.n	800e08e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e088:	2301      	movs	r3, #1
 800e08a:	73fb      	strb	r3, [r7, #15]
 800e08c:	e001      	b.n	800e092 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e08e:	f7f2 fdc9 	bl	8000c24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e098:	7bfa      	ldrb	r2, [r7, #15]
 800e09a:	4611      	mov	r1, r2
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fb fd16 	bl	8009ace <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fb fcbe 	bl	8009a2a <USBD_LL_Reset>
}
 800e0ae:	bf00      	nop
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
	...

0800e0b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fb fd11 	bl	8009aee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	6812      	ldr	r2, [r2, #0]
 800e0da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e0de:	f043 0301 	orr.w	r3, r3, #1
 800e0e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a1b      	ldr	r3, [r3, #32]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d005      	beq.n	800e0f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e0ec:	4b04      	ldr	r3, [pc, #16]	; (800e100 <HAL_PCD_SuspendCallback+0x48>)
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	4a03      	ldr	r2, [pc, #12]	; (800e100 <HAL_PCD_SuspendCallback+0x48>)
 800e0f2:	f043 0306 	orr.w	r3, r3, #6
 800e0f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e0f8:	bf00      	nop
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	e000ed00 	.word	0xe000ed00

0800e104 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e112:	4618      	mov	r0, r3
 800e114:	f7fb fd01 	bl	8009b1a <USBD_LL_Resume>
}
 800e118:	bf00      	nop
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b082      	sub	sp, #8
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	460b      	mov	r3, r1
 800e12a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e132:	78fa      	ldrb	r2, [r7, #3]
 800e134:	4611      	mov	r1, r2
 800e136:	4618      	mov	r0, r3
 800e138:	f7fb fd59 	bl	8009bee <USBD_LL_IsoOUTIncomplete>
}
 800e13c:	bf00      	nop
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
 800e14c:	460b      	mov	r3, r1
 800e14e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e156:	78fa      	ldrb	r2, [r7, #3]
 800e158:	4611      	mov	r1, r2
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fb fd15 	bl	8009b8a <USBD_LL_IsoINIncomplete>
}
 800e160:	bf00      	nop
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e176:	4618      	mov	r0, r3
 800e178:	f7fb fd6b 	bl	8009c52 <USBD_LL_DevConnected>
}
 800e17c:	bf00      	nop
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e192:	4618      	mov	r0, r3
 800e194:	f7fb fd68 	bl	8009c68 <USBD_LL_DevDisconnected>
}
 800e198:	bf00      	nop
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}

0800e1a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b082      	sub	sp, #8
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d140      	bne.n	800e232 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e1b0:	4a22      	ldr	r2, [pc, #136]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	4a20      	ldr	r2, [pc, #128]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1bc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e1c0:	4b1e      	ldr	r3, [pc, #120]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1c2:	4a1f      	ldr	r2, [pc, #124]	; (800e240 <USBD_LL_Init+0xa0>)
 800e1c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800e1c6:	4b1d      	ldr	r3, [pc, #116]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1c8:	2206      	movs	r2, #6
 800e1ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e1cc:	4b1b      	ldr	r3, [pc, #108]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1ce:	2202      	movs	r2, #2
 800e1d0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e1d2:	4b1a      	ldr	r3, [pc, #104]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e1d8:	4b18      	ldr	r3, [pc, #96]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1da:	2202      	movs	r2, #2
 800e1dc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e1de:	4b17      	ldr	r3, [pc, #92]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e1e4:	4b15      	ldr	r3, [pc, #84]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e1ea:	4b14      	ldr	r3, [pc, #80]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e1f0:	4b12      	ldr	r3, [pc, #72]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e1f6:	4b11      	ldr	r3, [pc, #68]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e1fc:	4b0f      	ldr	r3, [pc, #60]	; (800e23c <USBD_LL_Init+0x9c>)
 800e1fe:	2200      	movs	r2, #0
 800e200:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e202:	480e      	ldr	r0, [pc, #56]	; (800e23c <USBD_LL_Init+0x9c>)
 800e204:	f7f4 fb9a 	bl	800293c <HAL_PCD_Init>
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e20e:	f7f2 fd09 	bl	8000c24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e212:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e216:	4809      	ldr	r0, [pc, #36]	; (800e23c <USBD_LL_Init+0x9c>)
 800e218:	f7f5 fdf1 	bl	8003dfe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e21c:	2280      	movs	r2, #128	; 0x80
 800e21e:	2100      	movs	r1, #0
 800e220:	4806      	ldr	r0, [pc, #24]	; (800e23c <USBD_LL_Init+0x9c>)
 800e222:	f7f5 fda5 	bl	8003d70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e226:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e22a:	2101      	movs	r1, #1
 800e22c:	4803      	ldr	r0, [pc, #12]	; (800e23c <USBD_LL_Init+0x9c>)
 800e22e:	f7f5 fd9f 	bl	8003d70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e232:	2300      	movs	r3, #0
}
 800e234:	4618      	mov	r0, r3
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	2000635c 	.word	0x2000635c
 800e240:	40040000 	.word	0x40040000

0800e244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e24c:	2300      	movs	r3, #0
 800e24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e250:	2300      	movs	r3, #0
 800e252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7f4 fc8b 	bl	8002b76 <HAL_PCD_Start>
 800e260:	4603      	mov	r3, r0
 800e262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e264:	7bfb      	ldrb	r3, [r7, #15]
 800e266:	4618      	mov	r0, r3
 800e268:	f000 f942 	bl	800e4f0 <USBD_Get_USB_Status>
 800e26c:	4603      	mov	r3, r0
 800e26e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e270:	7bbb      	ldrb	r3, [r7, #14]
}
 800e272:	4618      	mov	r0, r3
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b084      	sub	sp, #16
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	4608      	mov	r0, r1
 800e284:	4611      	mov	r1, r2
 800e286:	461a      	mov	r2, r3
 800e288:	4603      	mov	r3, r0
 800e28a:	70fb      	strb	r3, [r7, #3]
 800e28c:	460b      	mov	r3, r1
 800e28e:	70bb      	strb	r3, [r7, #2]
 800e290:	4613      	mov	r3, r2
 800e292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e298:	2300      	movs	r3, #0
 800e29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e2a2:	78bb      	ldrb	r3, [r7, #2]
 800e2a4:	883a      	ldrh	r2, [r7, #0]
 800e2a6:	78f9      	ldrb	r1, [r7, #3]
 800e2a8:	f7f5 f95c 	bl	8003564 <HAL_PCD_EP_Open>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2b0:	7bfb      	ldrb	r3, [r7, #15]
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f000 f91c 	bl	800e4f0 <USBD_Get_USB_Status>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b084      	sub	sp, #16
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2e0:	78fa      	ldrb	r2, [r7, #3]
 800e2e2:	4611      	mov	r1, r2
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7f5 f9a5 	bl	8003634 <HAL_PCD_EP_Close>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ee:	7bfb      	ldrb	r3, [r7, #15]
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f000 f8fd 	bl	800e4f0 <USBD_Get_USB_Status>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	460b      	mov	r3, r1
 800e30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e314:	2300      	movs	r3, #0
 800e316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e31e:	78fa      	ldrb	r2, [r7, #3]
 800e320:	4611      	mov	r1, r2
 800e322:	4618      	mov	r0, r3
 800e324:	f7f5 fa7d 	bl	8003822 <HAL_PCD_EP_SetStall>
 800e328:	4603      	mov	r3, r0
 800e32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e32c:	7bfb      	ldrb	r3, [r7, #15]
 800e32e:	4618      	mov	r0, r3
 800e330:	f000 f8de 	bl	800e4f0 <USBD_Get_USB_Status>
 800e334:	4603      	mov	r3, r0
 800e336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e338:	7bbb      	ldrb	r3, [r7, #14]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b084      	sub	sp, #16
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	460b      	mov	r3, r1
 800e34c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e34e:	2300      	movs	r3, #0
 800e350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e352:	2300      	movs	r3, #0
 800e354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e35c:	78fa      	ldrb	r2, [r7, #3]
 800e35e:	4611      	mov	r1, r2
 800e360:	4618      	mov	r0, r3
 800e362:	f7f5 fac2 	bl	80038ea <HAL_PCD_EP_ClrStall>
 800e366:	4603      	mov	r3, r0
 800e368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
 800e36c:	4618      	mov	r0, r3
 800e36e:	f000 f8bf 	bl	800e4f0 <USBD_Get_USB_Status>
 800e372:	4603      	mov	r3, r0
 800e374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e376:	7bbb      	ldrb	r3, [r7, #14]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	460b      	mov	r3, r1
 800e38a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e392:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	da0b      	bge.n	800e3b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e39c:	78fb      	ldrb	r3, [r7, #3]
 800e39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3a2:	68f9      	ldr	r1, [r7, #12]
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	00db      	lsls	r3, r3, #3
 800e3a8:	4413      	add	r3, r2
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	440b      	add	r3, r1
 800e3ae:	333e      	adds	r3, #62	; 0x3e
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	e00b      	b.n	800e3cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e3b4:	78fb      	ldrb	r3, [r7, #3]
 800e3b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3ba:	68f9      	ldr	r1, [r7, #12]
 800e3bc:	4613      	mov	r3, r2
 800e3be:	00db      	lsls	r3, r3, #3
 800e3c0:	4413      	add	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	440b      	add	r3, r1
 800e3c6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e3ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3714      	adds	r7, #20
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3f2:	78fa      	ldrb	r2, [r7, #3]
 800e3f4:	4611      	mov	r1, r2
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7f5 f88f 	bl	800351a <HAL_PCD_SetAddress>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e400:	7bfb      	ldrb	r3, [r7, #15]
 800e402:	4618      	mov	r0, r3
 800e404:	f000 f874 	bl	800e4f0 <USBD_Get_USB_Status>
 800e408:	4603      	mov	r3, r0
 800e40a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b086      	sub	sp, #24
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	603b      	str	r3, [r7, #0]
 800e422:	460b      	mov	r3, r1
 800e424:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e426:	2300      	movs	r3, #0
 800e428:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e42a:	2300      	movs	r3, #0
 800e42c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e434:	7af9      	ldrb	r1, [r7, #11]
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	f7f5 f9a8 	bl	800378e <HAL_PCD_EP_Transmit>
 800e43e:	4603      	mov	r3, r0
 800e440:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e442:	7dfb      	ldrb	r3, [r7, #23]
 800e444:	4618      	mov	r0, r3
 800e446:	f000 f853 	bl	800e4f0 <USBD_Get_USB_Status>
 800e44a:	4603      	mov	r3, r0
 800e44c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e44e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e450:	4618      	mov	r0, r3
 800e452:	3718      	adds	r7, #24
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	60f8      	str	r0, [r7, #12]
 800e460:	607a      	str	r2, [r7, #4]
 800e462:	603b      	str	r3, [r7, #0]
 800e464:	460b      	mov	r3, r1
 800e466:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e468:	2300      	movs	r3, #0
 800e46a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e476:	7af9      	ldrb	r1, [r7, #11]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	f7f5 f924 	bl	80036c8 <HAL_PCD_EP_Receive>
 800e480:	4603      	mov	r3, r0
 800e482:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e484:	7dfb      	ldrb	r3, [r7, #23]
 800e486:	4618      	mov	r0, r3
 800e488:	f000 f832 	bl	800e4f0 <USBD_Get_USB_Status>
 800e48c:	4603      	mov	r3, r0
 800e48e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e490:	7dbb      	ldrb	r3, [r7, #22]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3718      	adds	r7, #24
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b082      	sub	sp, #8
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4ac:	78fa      	ldrb	r2, [r7, #3]
 800e4ae:	4611      	mov	r1, r2
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7f5 f954 	bl	800375e <HAL_PCD_EP_GetRxCount>
 800e4b6:	4603      	mov	r3, r0
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e4c8:	4b03      	ldr	r3, [pc, #12]	; (800e4d8 <USBD_static_malloc+0x18>)
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	20006868 	.word	0x20006868

0800e4dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]

}
 800e4e4:	bf00      	nop
 800e4e6:	370c      	adds	r7, #12
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ee:	4770      	bx	lr

0800e4f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e4fe:	79fb      	ldrb	r3, [r7, #7]
 800e500:	2b03      	cmp	r3, #3
 800e502:	d817      	bhi.n	800e534 <USBD_Get_USB_Status+0x44>
 800e504:	a201      	add	r2, pc, #4	; (adr r2, 800e50c <USBD_Get_USB_Status+0x1c>)
 800e506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e50a:	bf00      	nop
 800e50c:	0800e51d 	.word	0x0800e51d
 800e510:	0800e523 	.word	0x0800e523
 800e514:	0800e529 	.word	0x0800e529
 800e518:	0800e52f 	.word	0x0800e52f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	73fb      	strb	r3, [r7, #15]
    break;
 800e520:	e00b      	b.n	800e53a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e522:	2303      	movs	r3, #3
 800e524:	73fb      	strb	r3, [r7, #15]
    break;
 800e526:	e008      	b.n	800e53a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e528:	2301      	movs	r3, #1
 800e52a:	73fb      	strb	r3, [r7, #15]
    break;
 800e52c:	e005      	b.n	800e53a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e52e:	2303      	movs	r3, #3
 800e530:	73fb      	strb	r3, [r7, #15]
    break;
 800e532:	e002      	b.n	800e53a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e534:	2303      	movs	r3, #3
 800e536:	73fb      	strb	r3, [r7, #15]
    break;
 800e538:	bf00      	nop
  }
  return usb_status;
 800e53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3714      	adds	r7, #20
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr

0800e548 <__libc_init_array>:
 800e548:	b570      	push	{r4, r5, r6, lr}
 800e54a:	4d0d      	ldr	r5, [pc, #52]	; (800e580 <__libc_init_array+0x38>)
 800e54c:	4c0d      	ldr	r4, [pc, #52]	; (800e584 <__libc_init_array+0x3c>)
 800e54e:	1b64      	subs	r4, r4, r5
 800e550:	10a4      	asrs	r4, r4, #2
 800e552:	2600      	movs	r6, #0
 800e554:	42a6      	cmp	r6, r4
 800e556:	d109      	bne.n	800e56c <__libc_init_array+0x24>
 800e558:	4d0b      	ldr	r5, [pc, #44]	; (800e588 <__libc_init_array+0x40>)
 800e55a:	4c0c      	ldr	r4, [pc, #48]	; (800e58c <__libc_init_array+0x44>)
 800e55c:	f000 f82e 	bl	800e5bc <_init>
 800e560:	1b64      	subs	r4, r4, r5
 800e562:	10a4      	asrs	r4, r4, #2
 800e564:	2600      	movs	r6, #0
 800e566:	42a6      	cmp	r6, r4
 800e568:	d105      	bne.n	800e576 <__libc_init_array+0x2e>
 800e56a:	bd70      	pop	{r4, r5, r6, pc}
 800e56c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e570:	4798      	blx	r3
 800e572:	3601      	adds	r6, #1
 800e574:	e7ee      	b.n	800e554 <__libc_init_array+0xc>
 800e576:	f855 3b04 	ldr.w	r3, [r5], #4
 800e57a:	4798      	blx	r3
 800e57c:	3601      	adds	r6, #1
 800e57e:	e7f2      	b.n	800e566 <__libc_init_array+0x1e>
 800e580:	0800e6a0 	.word	0x0800e6a0
 800e584:	0800e6a0 	.word	0x0800e6a0
 800e588:	0800e6a0 	.word	0x0800e6a0
 800e58c:	0800e6a4 	.word	0x0800e6a4

0800e590 <memcpy>:
 800e590:	440a      	add	r2, r1
 800e592:	4291      	cmp	r1, r2
 800e594:	f100 33ff 	add.w	r3, r0, #4294967295
 800e598:	d100      	bne.n	800e59c <memcpy+0xc>
 800e59a:	4770      	bx	lr
 800e59c:	b510      	push	{r4, lr}
 800e59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5a6:	4291      	cmp	r1, r2
 800e5a8:	d1f9      	bne.n	800e59e <memcpy+0xe>
 800e5aa:	bd10      	pop	{r4, pc}

0800e5ac <memset>:
 800e5ac:	4402      	add	r2, r0
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	4293      	cmp	r3, r2
 800e5b2:	d100      	bne.n	800e5b6 <memset+0xa>
 800e5b4:	4770      	bx	lr
 800e5b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e5ba:	e7f9      	b.n	800e5b0 <memset+0x4>

0800e5bc <_init>:
 800e5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5be:	bf00      	nop
 800e5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5c2:	bc08      	pop	{r3}
 800e5c4:	469e      	mov	lr, r3
 800e5c6:	4770      	bx	lr

0800e5c8 <_fini>:
 800e5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ca:	bf00      	nop
 800e5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5ce:	bc08      	pop	{r3}
 800e5d0:	469e      	mov	lr, r3
 800e5d2:	4770      	bx	lr
