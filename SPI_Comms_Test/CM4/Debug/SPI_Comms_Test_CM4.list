
SPI_Comms_Test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006170  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08106410  08106410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081064c8  081064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081064d0  081064d0  000164d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081064d4  081064d4  000164d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  081064d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000198  10000074  0810654c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000020c  0810654c  0002020c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015a0b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000286d  00000000  00000000  00035aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e28  00000000  00000000  00038320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d30  00000000  00000000  00039148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a7fe  00000000  00000000  00039e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015341  00000000  00000000  00074676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018182c  00000000  00000000  000899b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020b1e3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e40  00000000  00000000  0020b234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000074 	.word	0x10000074
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081063f8 	.word	0x081063f8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000078 	.word	0x10000078
 81002dc:	081063f8 	.word	0x081063f8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295
 8100390:	f04f 30ff 	movne.w	r0, #4294967295
 8100394:	f000 b974 	b.w	8100680 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9d08      	ldr	r5, [sp, #32]
 81003b6:	4604      	mov	r4, r0
 81003b8:	468e      	mov	lr, r1
 81003ba:	2b00      	cmp	r3, #0
 81003bc:	d14d      	bne.n	810045a <__udivmoddi4+0xaa>
 81003be:	428a      	cmp	r2, r1
 81003c0:	4694      	mov	ip, r2
 81003c2:	d969      	bls.n	8100498 <__udivmoddi4+0xe8>
 81003c4:	fab2 f282 	clz	r2, r2
 81003c8:	b152      	cbz	r2, 81003e0 <__udivmoddi4+0x30>
 81003ca:	fa01 f302 	lsl.w	r3, r1, r2
 81003ce:	f1c2 0120 	rsb	r1, r2, #32
 81003d2:	fa20 f101 	lsr.w	r1, r0, r1
 81003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 81003da:	ea41 0e03 	orr.w	lr, r1, r3
 81003de:	4094      	lsls	r4, r2
 81003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003e4:	0c21      	lsrs	r1, r4, #16
 81003e6:	fbbe f6f8 	udiv	r6, lr, r8
 81003ea:	fa1f f78c 	uxth.w	r7, ip
 81003ee:	fb08 e316 	mls	r3, r8, r6, lr
 81003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 81003f6:	fb06 f107 	mul.w	r1, r6, r7
 81003fa:	4299      	cmp	r1, r3
 81003fc:	d90a      	bls.n	8100414 <__udivmoddi4+0x64>
 81003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8100402:	f106 30ff 	add.w	r0, r6, #4294967295
 8100406:	f080 811f 	bcs.w	8100648 <__udivmoddi4+0x298>
 810040a:	4299      	cmp	r1, r3
 810040c:	f240 811c 	bls.w	8100648 <__udivmoddi4+0x298>
 8100410:	3e02      	subs	r6, #2
 8100412:	4463      	add	r3, ip
 8100414:	1a5b      	subs	r3, r3, r1
 8100416:	b2a4      	uxth	r4, r4
 8100418:	fbb3 f0f8 	udiv	r0, r3, r8
 810041c:	fb08 3310 	mls	r3, r8, r0, r3
 8100420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100424:	fb00 f707 	mul.w	r7, r0, r7
 8100428:	42a7      	cmp	r7, r4
 810042a:	d90a      	bls.n	8100442 <__udivmoddi4+0x92>
 810042c:	eb1c 0404 	adds.w	r4, ip, r4
 8100430:	f100 33ff 	add.w	r3, r0, #4294967295
 8100434:	f080 810a 	bcs.w	810064c <__udivmoddi4+0x29c>
 8100438:	42a7      	cmp	r7, r4
 810043a:	f240 8107 	bls.w	810064c <__udivmoddi4+0x29c>
 810043e:	4464      	add	r4, ip
 8100440:	3802      	subs	r0, #2
 8100442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100446:	1be4      	subs	r4, r4, r7
 8100448:	2600      	movs	r6, #0
 810044a:	b11d      	cbz	r5, 8100454 <__udivmoddi4+0xa4>
 810044c:	40d4      	lsrs	r4, r2
 810044e:	2300      	movs	r3, #0
 8100450:	e9c5 4300 	strd	r4, r3, [r5]
 8100454:	4631      	mov	r1, r6
 8100456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810045a:	428b      	cmp	r3, r1
 810045c:	d909      	bls.n	8100472 <__udivmoddi4+0xc2>
 810045e:	2d00      	cmp	r5, #0
 8100460:	f000 80ef 	beq.w	8100642 <__udivmoddi4+0x292>
 8100464:	2600      	movs	r6, #0
 8100466:	e9c5 0100 	strd	r0, r1, [r5]
 810046a:	4630      	mov	r0, r6
 810046c:	4631      	mov	r1, r6
 810046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100472:	fab3 f683 	clz	r6, r3
 8100476:	2e00      	cmp	r6, #0
 8100478:	d14a      	bne.n	8100510 <__udivmoddi4+0x160>
 810047a:	428b      	cmp	r3, r1
 810047c:	d302      	bcc.n	8100484 <__udivmoddi4+0xd4>
 810047e:	4282      	cmp	r2, r0
 8100480:	f200 80f9 	bhi.w	8100676 <__udivmoddi4+0x2c6>
 8100484:	1a84      	subs	r4, r0, r2
 8100486:	eb61 0303 	sbc.w	r3, r1, r3
 810048a:	2001      	movs	r0, #1
 810048c:	469e      	mov	lr, r3
 810048e:	2d00      	cmp	r5, #0
 8100490:	d0e0      	beq.n	8100454 <__udivmoddi4+0xa4>
 8100492:	e9c5 4e00 	strd	r4, lr, [r5]
 8100496:	e7dd      	b.n	8100454 <__udivmoddi4+0xa4>
 8100498:	b902      	cbnz	r2, 810049c <__udivmoddi4+0xec>
 810049a:	deff      	udf	#255	; 0xff
 810049c:	fab2 f282 	clz	r2, r2
 81004a0:	2a00      	cmp	r2, #0
 81004a2:	f040 8092 	bne.w	81005ca <__udivmoddi4+0x21a>
 81004a6:	eba1 010c 	sub.w	r1, r1, ip
 81004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81004ae:	fa1f fe8c 	uxth.w	lr, ip
 81004b2:	2601      	movs	r6, #1
 81004b4:	0c20      	lsrs	r0, r4, #16
 81004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 81004ba:	fb07 1113 	mls	r1, r7, r3, r1
 81004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 81004c2:	fb0e f003 	mul.w	r0, lr, r3
 81004c6:	4288      	cmp	r0, r1
 81004c8:	d908      	bls.n	81004dc <__udivmoddi4+0x12c>
 81004ca:	eb1c 0101 	adds.w	r1, ip, r1
 81004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 81004d2:	d202      	bcs.n	81004da <__udivmoddi4+0x12a>
 81004d4:	4288      	cmp	r0, r1
 81004d6:	f200 80cb 	bhi.w	8100670 <__udivmoddi4+0x2c0>
 81004da:	4643      	mov	r3, r8
 81004dc:	1a09      	subs	r1, r1, r0
 81004de:	b2a4      	uxth	r4, r4
 81004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 81004e4:	fb07 1110 	mls	r1, r7, r0, r1
 81004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 81004ec:	fb0e fe00 	mul.w	lr, lr, r0
 81004f0:	45a6      	cmp	lr, r4
 81004f2:	d908      	bls.n	8100506 <__udivmoddi4+0x156>
 81004f4:	eb1c 0404 	adds.w	r4, ip, r4
 81004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 81004fc:	d202      	bcs.n	8100504 <__udivmoddi4+0x154>
 81004fe:	45a6      	cmp	lr, r4
 8100500:	f200 80bb 	bhi.w	810067a <__udivmoddi4+0x2ca>
 8100504:	4608      	mov	r0, r1
 8100506:	eba4 040e 	sub.w	r4, r4, lr
 810050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 810050e:	e79c      	b.n	810044a <__udivmoddi4+0x9a>
 8100510:	f1c6 0720 	rsb	r7, r6, #32
 8100514:	40b3      	lsls	r3, r6
 8100516:	fa22 fc07 	lsr.w	ip, r2, r7
 810051a:	ea4c 0c03 	orr.w	ip, ip, r3
 810051e:	fa20 f407 	lsr.w	r4, r0, r7
 8100522:	fa01 f306 	lsl.w	r3, r1, r6
 8100526:	431c      	orrs	r4, r3
 8100528:	40f9      	lsrs	r1, r7
 810052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810052e:	fa00 f306 	lsl.w	r3, r0, r6
 8100532:	fbb1 f8f9 	udiv	r8, r1, r9
 8100536:	0c20      	lsrs	r0, r4, #16
 8100538:	fa1f fe8c 	uxth.w	lr, ip
 810053c:	fb09 1118 	mls	r1, r9, r8, r1
 8100540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8100544:	fb08 f00e 	mul.w	r0, r8, lr
 8100548:	4288      	cmp	r0, r1
 810054a:	fa02 f206 	lsl.w	r2, r2, r6
 810054e:	d90b      	bls.n	8100568 <__udivmoddi4+0x1b8>
 8100550:	eb1c 0101 	adds.w	r1, ip, r1
 8100554:	f108 3aff 	add.w	sl, r8, #4294967295
 8100558:	f080 8088 	bcs.w	810066c <__udivmoddi4+0x2bc>
 810055c:	4288      	cmp	r0, r1
 810055e:	f240 8085 	bls.w	810066c <__udivmoddi4+0x2bc>
 8100562:	f1a8 0802 	sub.w	r8, r8, #2
 8100566:	4461      	add	r1, ip
 8100568:	1a09      	subs	r1, r1, r0
 810056a:	b2a4      	uxth	r4, r4
 810056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8100570:	fb09 1110 	mls	r1, r9, r0, r1
 8100574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8100578:	fb00 fe0e 	mul.w	lr, r0, lr
 810057c:	458e      	cmp	lr, r1
 810057e:	d908      	bls.n	8100592 <__udivmoddi4+0x1e2>
 8100580:	eb1c 0101 	adds.w	r1, ip, r1
 8100584:	f100 34ff 	add.w	r4, r0, #4294967295
 8100588:	d26c      	bcs.n	8100664 <__udivmoddi4+0x2b4>
 810058a:	458e      	cmp	lr, r1
 810058c:	d96a      	bls.n	8100664 <__udivmoddi4+0x2b4>
 810058e:	3802      	subs	r0, #2
 8100590:	4461      	add	r1, ip
 8100592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8100596:	fba0 9402 	umull	r9, r4, r0, r2
 810059a:	eba1 010e 	sub.w	r1, r1, lr
 810059e:	42a1      	cmp	r1, r4
 81005a0:	46c8      	mov	r8, r9
 81005a2:	46a6      	mov	lr, r4
 81005a4:	d356      	bcc.n	8100654 <__udivmoddi4+0x2a4>
 81005a6:	d053      	beq.n	8100650 <__udivmoddi4+0x2a0>
 81005a8:	b15d      	cbz	r5, 81005c2 <__udivmoddi4+0x212>
 81005aa:	ebb3 0208 	subs.w	r2, r3, r8
 81005ae:	eb61 010e 	sbc.w	r1, r1, lr
 81005b2:	fa01 f707 	lsl.w	r7, r1, r7
 81005b6:	fa22 f306 	lsr.w	r3, r2, r6
 81005ba:	40f1      	lsrs	r1, r6
 81005bc:	431f      	orrs	r7, r3
 81005be:	e9c5 7100 	strd	r7, r1, [r5]
 81005c2:	2600      	movs	r6, #0
 81005c4:	4631      	mov	r1, r6
 81005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005ca:	f1c2 0320 	rsb	r3, r2, #32
 81005ce:	40d8      	lsrs	r0, r3
 81005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 81005d4:	fa21 f303 	lsr.w	r3, r1, r3
 81005d8:	4091      	lsls	r1, r2
 81005da:	4301      	orrs	r1, r0
 81005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81005e0:	fa1f fe8c 	uxth.w	lr, ip
 81005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 81005e8:	fb07 3610 	mls	r6, r7, r0, r3
 81005ec:	0c0b      	lsrs	r3, r1, #16
 81005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 81005f2:	fb00 f60e 	mul.w	r6, r0, lr
 81005f6:	429e      	cmp	r6, r3
 81005f8:	fa04 f402 	lsl.w	r4, r4, r2
 81005fc:	d908      	bls.n	8100610 <__udivmoddi4+0x260>
 81005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8100602:	f100 38ff 	add.w	r8, r0, #4294967295
 8100606:	d22f      	bcs.n	8100668 <__udivmoddi4+0x2b8>
 8100608:	429e      	cmp	r6, r3
 810060a:	d92d      	bls.n	8100668 <__udivmoddi4+0x2b8>
 810060c:	3802      	subs	r0, #2
 810060e:	4463      	add	r3, ip
 8100610:	1b9b      	subs	r3, r3, r6
 8100612:	b289      	uxth	r1, r1
 8100614:	fbb3 f6f7 	udiv	r6, r3, r7
 8100618:	fb07 3316 	mls	r3, r7, r6, r3
 810061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100620:	fb06 f30e 	mul.w	r3, r6, lr
 8100624:	428b      	cmp	r3, r1
 8100626:	d908      	bls.n	810063a <__udivmoddi4+0x28a>
 8100628:	eb1c 0101 	adds.w	r1, ip, r1
 810062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8100630:	d216      	bcs.n	8100660 <__udivmoddi4+0x2b0>
 8100632:	428b      	cmp	r3, r1
 8100634:	d914      	bls.n	8100660 <__udivmoddi4+0x2b0>
 8100636:	3e02      	subs	r6, #2
 8100638:	4461      	add	r1, ip
 810063a:	1ac9      	subs	r1, r1, r3
 810063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8100640:	e738      	b.n	81004b4 <__udivmoddi4+0x104>
 8100642:	462e      	mov	r6, r5
 8100644:	4628      	mov	r0, r5
 8100646:	e705      	b.n	8100454 <__udivmoddi4+0xa4>
 8100648:	4606      	mov	r6, r0
 810064a:	e6e3      	b.n	8100414 <__udivmoddi4+0x64>
 810064c:	4618      	mov	r0, r3
 810064e:	e6f8      	b.n	8100442 <__udivmoddi4+0x92>
 8100650:	454b      	cmp	r3, r9
 8100652:	d2a9      	bcs.n	81005a8 <__udivmoddi4+0x1f8>
 8100654:	ebb9 0802 	subs.w	r8, r9, r2
 8100658:	eb64 0e0c 	sbc.w	lr, r4, ip
 810065c:	3801      	subs	r0, #1
 810065e:	e7a3      	b.n	81005a8 <__udivmoddi4+0x1f8>
 8100660:	4646      	mov	r6, r8
 8100662:	e7ea      	b.n	810063a <__udivmoddi4+0x28a>
 8100664:	4620      	mov	r0, r4
 8100666:	e794      	b.n	8100592 <__udivmoddi4+0x1e2>
 8100668:	4640      	mov	r0, r8
 810066a:	e7d1      	b.n	8100610 <__udivmoddi4+0x260>
 810066c:	46d0      	mov	r8, sl
 810066e:	e77b      	b.n	8100568 <__udivmoddi4+0x1b8>
 8100670:	3b02      	subs	r3, #2
 8100672:	4461      	add	r1, ip
 8100674:	e732      	b.n	81004dc <__udivmoddi4+0x12c>
 8100676:	4630      	mov	r0, r6
 8100678:	e709      	b.n	810048e <__udivmoddi4+0xde>
 810067a:	4464      	add	r4, ip
 810067c:	3802      	subs	r0, #2
 810067e:	e742      	b.n	8100506 <__udivmoddi4+0x156>

08100680 <__aeabi_idiv0>:
 8100680:	4770      	bx	lr
 8100682:	bf00      	nop

08100684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100684:	b480      	push	{r7}
 8100686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100688:	4b09      	ldr	r3, [pc, #36]	; (81006b0 <SystemInit+0x2c>)
 810068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810068e:	4a08      	ldr	r2, [pc, #32]	; (81006b0 <SystemInit+0x2c>)
 8100690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100698:	4b05      	ldr	r3, [pc, #20]	; (81006b0 <SystemInit+0x2c>)
 810069a:	691b      	ldr	r3, [r3, #16]
 810069c:	4a04      	ldr	r2, [pc, #16]	; (81006b0 <SystemInit+0x2c>)
 810069e:	f043 0310 	orr.w	r3, r3, #16
 81006a2:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81006a4:	bf00      	nop
 81006a6:	46bd      	mov	sp, r7
 81006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ac:	4770      	bx	lr
 81006ae:	bf00      	nop
 81006b0:	e000ed00 	.word	0xe000ed00

081006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81006b4:	b590      	push	{r4, r7, lr}
 81006b6:	b09b      	sub	sp, #108	; 0x6c
 81006b8:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81006ba:	4b63      	ldr	r3, [pc, #396]	; (8100848 <main+0x194>)
 81006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006c0:	4a61      	ldr	r2, [pc, #388]	; (8100848 <main+0x194>)
 81006c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006ca:	4b5f      	ldr	r3, [pc, #380]	; (8100848 <main+0x194>)
 81006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81006d4:	64bb      	str	r3, [r7, #72]	; 0x48
 81006d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006d8:	2001      	movs	r0, #1
 81006da:	f001 fbb9 	bl	8101e50 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006de:	f001 fc43 	bl	8101f68 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006e2:	2201      	movs	r2, #1
 81006e4:	2102      	movs	r1, #2
 81006e6:	2000      	movs	r0, #0
 81006e8:	f001 fbc4 	bl	8101e74 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006ec:	4b57      	ldr	r3, [pc, #348]	; (810084c <main+0x198>)
 81006ee:	681b      	ldr	r3, [r3, #0]
 81006f0:	091b      	lsrs	r3, r3, #4
 81006f2:	f003 030f 	and.w	r3, r3, #15
 81006f6:	2b07      	cmp	r3, #7
 81006f8:	d108      	bne.n	810070c <main+0x58>
 81006fa:	4b55      	ldr	r3, [pc, #340]	; (8100850 <main+0x19c>)
 81006fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100700:	4a53      	ldr	r2, [pc, #332]	; (8100850 <main+0x19c>)
 8100702:	f043 0301 	orr.w	r3, r3, #1
 8100706:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810070a:	e007      	b.n	810071c <main+0x68>
 810070c:	4b50      	ldr	r3, [pc, #320]	; (8100850 <main+0x19c>)
 810070e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100712:	4a4f      	ldr	r2, [pc, #316]	; (8100850 <main+0x19c>)
 8100714:	f043 0301 	orr.w	r3, r3, #1
 8100718:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810071c:	f000 fb8e 	bl	8100e3c <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_GPIO_Init();
 8100720:	f000 f96c 	bl	81009fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8100724:	f000 f91e 	bl	8100964 <MX_USART3_UART_Init>
  MX_CRC_Init();
 8100728:	f000 f8aa 	bl	8100880 <MX_CRC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SPI2_Init();
 810072c:	f000 f8ca 	bl	81008c4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
 8100730:	2215      	movs	r2, #21
 8100732:	4948      	ldr	r1, [pc, #288]	; (8100854 <main+0x1a0>)
 8100734:	4848      	ldr	r0, [pc, #288]	; (8100858 <main+0x1a4>)
 8100736:	f003 fa6b 	bl	8103c10 <HAL_SPI_Receive_IT>

  HAL_UART_Transmit(&huart3, "Starting M4\r\n", sizeof("Starting M4\r\n"), HAL_MAX_DELAY);
 810073a:	f04f 33ff 	mov.w	r3, #4294967295
 810073e:	220e      	movs	r2, #14
 8100740:	4946      	ldr	r1, [pc, #280]	; (810085c <main+0x1a8>)
 8100742:	4847      	ldr	r0, [pc, #284]	; (8100860 <main+0x1ac>)
 8100744:	f004 f8ee 	bl	8104924 <HAL_UART_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8100748:	2201      	movs	r2, #1
 810074a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810074e:	4845      	ldr	r0, [pc, #276]	; (8100864 <main+0x1b0>)
 8100750:	f001 fb64 	bl	8101e1c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8100754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8100758:	f000 fc24 	bl	8100fa4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 810075c:	2200      	movs	r2, #0
 810075e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100762:	4840      	ldr	r0, [pc, #256]	; (8100864 <main+0x1b0>)
 8100764:	f001 fb5a 	bl	8101e1c <HAL_GPIO_WritePin>

  hcrc.Instance = CRC;
 8100768:	4b3f      	ldr	r3, [pc, #252]	; (8100868 <main+0x1b4>)
 810076a:	4a40      	ldr	r2, [pc, #256]	; (810086c <main+0x1b8>)
 810076c:	601a      	str	r2, [r3, #0]
  HAL_CRC_Init(&hcrc);
 810076e:	483e      	ldr	r0, [pc, #248]	; (8100868 <main+0x1b4>)
 8100770:	f000 fd60 	bl	8101234 <HAL_CRC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(SPI_ready) {
 8100774:	4b3e      	ldr	r3, [pc, #248]	; (8100870 <main+0x1bc>)
 8100776:	781b      	ldrb	r3, [r3, #0]
 8100778:	2b00      	cmp	r3, #0
 810077a:	d05d      	beq.n	8100838 <main+0x184>
		  SPI_ready = 0;
 810077c:	4b3c      	ldr	r3, [pc, #240]	; (8100870 <main+0x1bc>)
 810077e:	2200      	movs	r2, #0
 8100780:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, "Received data\r\n", sizeof("Received data\r\n"), HAL_MAX_DELAY);
 8100782:	f04f 33ff 	mov.w	r3, #4294967295
 8100786:	2210      	movs	r2, #16
 8100788:	493a      	ldr	r1, [pc, #232]	; (8100874 <main+0x1c0>)
 810078a:	4835      	ldr	r0, [pc, #212]	; (8100860 <main+0x1ac>)
 810078c:	f004 f8ca 	bl	8104924 <HAL_UART_Transmit>
 8100790:	4b30      	ldr	r3, [pc, #192]	; (8100854 <main+0x1a0>)
 8100792:	f8d3 3011 	ldr.w	r3, [r3, #17]
		  uint32_t CRC_Rec;
		  memcpy(&CRC_Rec, &RX_Buffer[sizeof(RX_Buffer)-4], sizeof(uint32_t));
 8100796:	647b      	str	r3, [r7, #68]	; 0x44
		  uint32_t CRC_Calc = ~HAL_CRC_Calculate(&hcrc,(uint32_t *) RX_Buffer, sizeof(RX_Buffer)-4);
 8100798:	2211      	movs	r2, #17
 810079a:	492e      	ldr	r1, [pc, #184]	; (8100854 <main+0x1a0>)
 810079c:	4832      	ldr	r0, [pc, #200]	; (8100868 <main+0x1b4>)
 810079e:	f000 fdad 	bl	81012fc <HAL_CRC_Calculate>
 81007a2:	4603      	mov	r3, r0
 81007a4:	43db      	mvns	r3, r3
 81007a6:	657b      	str	r3, [r7, #84]	; 0x54
		  if(CRC_Calc == CRC_Rec){
 81007a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81007aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 81007ac:	429a      	cmp	r2, r3
 81007ae:	d143      	bne.n	8100838 <main+0x184>
			  uint8_t header = RX_Buffer[0];
 81007b0:	4b28      	ldr	r3, [pc, #160]	; (8100854 <main+0x1a0>)
 81007b2:	781b      	ldrb	r3, [r3, #0]
 81007b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			  if(header == 0x44) {
 81007b8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 81007bc:	2b44      	cmp	r3, #68	; 0x44
 81007be:	d132      	bne.n	8100826 <main+0x172>
 81007c0:	4b24      	ldr	r3, [pc, #144]	; (8100854 <main+0x1a0>)
 81007c2:	f8d3 3001 	ldr.w	r3, [r3, #1]
 81007c6:	461a      	mov	r2, r3
				  memcpy(&servos.servo_1_pos, &RX_Buffer[1], sizeof(servos.servo_1_pos));
 81007c8:	4b2b      	ldr	r3, [pc, #172]	; (8100878 <main+0x1c4>)
 81007ca:	601a      	str	r2, [r3, #0]
 81007cc:	4b21      	ldr	r3, [pc, #132]	; (8100854 <main+0x1a0>)
 81007ce:	f8d3 3005 	ldr.w	r3, [r3, #5]
 81007d2:	461a      	mov	r2, r3
				  memcpy(&servos.servo_2_pos, &RX_Buffer[5], sizeof(servos.servo_1_pos));
 81007d4:	4b28      	ldr	r3, [pc, #160]	; (8100878 <main+0x1c4>)
 81007d6:	605a      	str	r2, [r3, #4]
 81007d8:	4b1e      	ldr	r3, [pc, #120]	; (8100854 <main+0x1a0>)
 81007da:	f8d3 3009 	ldr.w	r3, [r3, #9]
 81007de:	461a      	mov	r2, r3
				  memcpy(&servos.servo_3_pos, &RX_Buffer[9], sizeof(servos.servo_1_pos));
 81007e0:	4b25      	ldr	r3, [pc, #148]	; (8100878 <main+0x1c4>)
 81007e2:	609a      	str	r2, [r3, #8]
 81007e4:	4b1b      	ldr	r3, [pc, #108]	; (8100854 <main+0x1a0>)
 81007e6:	f8d3 300d 	ldr.w	r3, [r3, #13]
 81007ea:	461a      	mov	r2, r3
				  memcpy(&servos.servo_4_pos, &RX_Buffer[13], sizeof(servos.servo_1_pos));
 81007ec:	4b22      	ldr	r3, [pc, #136]	; (8100878 <main+0x1c4>)
 81007ee:	60da      	str	r2, [r3, #12]

				  char printString[64];
				  size_t sz = snprintf(printString, sizeof(printString), "Servo Command Received: %d, %d, %d, %d\r\n", servos.servo_1_pos, servos.servo_2_pos, servos.servo_3_pos, servos.servo_4_pos);
 81007f0:	4b21      	ldr	r3, [pc, #132]	; (8100878 <main+0x1c4>)
 81007f2:	681c      	ldr	r4, [r3, #0]
 81007f4:	4b20      	ldr	r3, [pc, #128]	; (8100878 <main+0x1c4>)
 81007f6:	685b      	ldr	r3, [r3, #4]
 81007f8:	4a1f      	ldr	r2, [pc, #124]	; (8100878 <main+0x1c4>)
 81007fa:	6892      	ldr	r2, [r2, #8]
 81007fc:	491e      	ldr	r1, [pc, #120]	; (8100878 <main+0x1c4>)
 81007fe:	68c9      	ldr	r1, [r1, #12]
 8100800:	1d38      	adds	r0, r7, #4
 8100802:	9102      	str	r1, [sp, #8]
 8100804:	9201      	str	r2, [sp, #4]
 8100806:	9300      	str	r3, [sp, #0]
 8100808:	4623      	mov	r3, r4
 810080a:	4a1c      	ldr	r2, [pc, #112]	; (810087c <main+0x1c8>)
 810080c:	2140      	movs	r1, #64	; 0x40
 810080e:	f005 f971 	bl	8105af4 <sniprintf>
 8100812:	4603      	mov	r3, r0
 8100814:	64fb      	str	r3, [r7, #76]	; 0x4c
				  HAL_UART_Transmit(&huart3, (uint8_t*)printString, sz, HAL_MAX_DELAY);
 8100816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8100818:	b29a      	uxth	r2, r3
 810081a:	1d39      	adds	r1, r7, #4
 810081c:	f04f 33ff 	mov.w	r3, #4294967295
 8100820:	480f      	ldr	r0, [pc, #60]	; (8100860 <main+0x1ac>)
 8100822:	f004 f87f 	bl	8104924 <HAL_UART_Transmit>
			  }
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8100826:	2201      	movs	r2, #1
 8100828:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810082c:	480d      	ldr	r0, [pc, #52]	; (8100864 <main+0x1b0>)
 810082e:	f001 faf5 	bl	8101e1c <HAL_GPIO_WritePin>
			  HAL_Delay(100);
 8100832:	2064      	movs	r0, #100	; 0x64
 8100834:	f000 fbb6 	bl	8100fa4 <HAL_Delay>
		  }
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8100838:	2200      	movs	r2, #0
 810083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810083e:	4809      	ldr	r0, [pc, #36]	; (8100864 <main+0x1b0>)
 8100840:	f001 faec 	bl	8101e1c <HAL_GPIO_WritePin>
	  if(SPI_ready) {
 8100844:	e796      	b.n	8100774 <main+0xc0>
 8100846:	bf00      	nop
 8100848:	58024400 	.word	0x58024400
 810084c:	e000ed00 	.word	0xe000ed00
 8100850:	58026400 	.word	0x58026400
 8100854:	100001cc 	.word	0x100001cc
 8100858:	100000b4 	.word	0x100000b4
 810085c:	08106410 	.word	0x08106410
 8100860:	1000013c 	.word	0x1000013c
 8100864:	58020400 	.word	0x58020400
 8100868:	10000090 	.word	0x10000090
 810086c:	58024c00 	.word	0x58024c00
 8100870:	100001e1 	.word	0x100001e1
 8100874:	08106420 	.word	0x08106420
 8100878:	100001e4 	.word	0x100001e4
 810087c:	08106430 	.word	0x08106430

08100880 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
void MX_CRC_Init(void)
{
 8100880:	b580      	push	{r7, lr}
 8100882:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8100884:	4b0d      	ldr	r3, [pc, #52]	; (81008bc <MX_CRC_Init+0x3c>)
 8100886:	4a0e      	ldr	r2, [pc, #56]	; (81008c0 <MX_CRC_Init+0x40>)
 8100888:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 810088a:	4b0c      	ldr	r3, [pc, #48]	; (81008bc <MX_CRC_Init+0x3c>)
 810088c:	2200      	movs	r2, #0
 810088e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8100890:	4b0a      	ldr	r3, [pc, #40]	; (81008bc <MX_CRC_Init+0x3c>)
 8100892:	2200      	movs	r2, #0
 8100894:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8100896:	4b09      	ldr	r3, [pc, #36]	; (81008bc <MX_CRC_Init+0x3c>)
 8100898:	2200      	movs	r2, #0
 810089a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 810089c:	4b07      	ldr	r3, [pc, #28]	; (81008bc <MX_CRC_Init+0x3c>)
 810089e:	2200      	movs	r2, #0
 81008a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 81008a2:	4b06      	ldr	r3, [pc, #24]	; (81008bc <MX_CRC_Init+0x3c>)
 81008a4:	2201      	movs	r2, #1
 81008a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 81008a8:	4804      	ldr	r0, [pc, #16]	; (81008bc <MX_CRC_Init+0x3c>)
 81008aa:	f000 fcc3 	bl	8101234 <HAL_CRC_Init>
 81008ae:	4603      	mov	r3, r0
 81008b0:	2b00      	cmp	r3, #0
 81008b2:	d001      	beq.n	81008b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 81008b4:	f000 f922 	bl	8100afc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 81008b8:	bf00      	nop
 81008ba:	bd80      	pop	{r7, pc}
 81008bc:	10000090 	.word	0x10000090
 81008c0:	58024c00 	.word	0x58024c00

081008c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 81008c4:	b580      	push	{r7, lr}
 81008c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 81008c8:	4b24      	ldr	r3, [pc, #144]	; (810095c <MX_SPI2_Init+0x98>)
 81008ca:	4a25      	ldr	r2, [pc, #148]	; (8100960 <MX_SPI2_Init+0x9c>)
 81008cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 81008ce:	4b23      	ldr	r3, [pc, #140]	; (810095c <MX_SPI2_Init+0x98>)
 81008d0:	2200      	movs	r2, #0
 81008d2:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 81008d4:	4b21      	ldr	r3, [pc, #132]	; (810095c <MX_SPI2_Init+0x98>)
 81008d6:	2200      	movs	r2, #0
 81008d8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 81008da:	4b20      	ldr	r3, [pc, #128]	; (810095c <MX_SPI2_Init+0x98>)
 81008dc:	2207      	movs	r2, #7
 81008de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 81008e0:	4b1e      	ldr	r3, [pc, #120]	; (810095c <MX_SPI2_Init+0x98>)
 81008e2:	2200      	movs	r2, #0
 81008e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 81008e6:	4b1d      	ldr	r3, [pc, #116]	; (810095c <MX_SPI2_Init+0x98>)
 81008e8:	2200      	movs	r2, #0
 81008ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 81008ec:	4b1b      	ldr	r3, [pc, #108]	; (810095c <MX_SPI2_Init+0x98>)
 81008ee:	2200      	movs	r2, #0
 81008f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81008f2:	4b1a      	ldr	r3, [pc, #104]	; (810095c <MX_SPI2_Init+0x98>)
 81008f4:	2200      	movs	r2, #0
 81008f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 81008f8:	4b18      	ldr	r3, [pc, #96]	; (810095c <MX_SPI2_Init+0x98>)
 81008fa:	2200      	movs	r2, #0
 81008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81008fe:	4b17      	ldr	r3, [pc, #92]	; (810095c <MX_SPI2_Init+0x98>)
 8100900:	2200      	movs	r2, #0
 8100902:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100904:	4b15      	ldr	r3, [pc, #84]	; (810095c <MX_SPI2_Init+0x98>)
 8100906:	2200      	movs	r2, #0
 8100908:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 810090a:	4b14      	ldr	r3, [pc, #80]	; (810095c <MX_SPI2_Init+0x98>)
 810090c:	2200      	movs	r2, #0
 810090e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100910:	4b12      	ldr	r3, [pc, #72]	; (810095c <MX_SPI2_Init+0x98>)
 8100912:	2200      	movs	r2, #0
 8100914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100916:	4b11      	ldr	r3, [pc, #68]	; (810095c <MX_SPI2_Init+0x98>)
 8100918:	2200      	movs	r2, #0
 810091a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810091c:	4b0f      	ldr	r3, [pc, #60]	; (810095c <MX_SPI2_Init+0x98>)
 810091e:	2200      	movs	r2, #0
 8100920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100922:	4b0e      	ldr	r3, [pc, #56]	; (810095c <MX_SPI2_Init+0x98>)
 8100924:	2200      	movs	r2, #0
 8100926:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100928:	4b0c      	ldr	r3, [pc, #48]	; (810095c <MX_SPI2_Init+0x98>)
 810092a:	2200      	movs	r2, #0
 810092c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810092e:	4b0b      	ldr	r3, [pc, #44]	; (810095c <MX_SPI2_Init+0x98>)
 8100930:	2200      	movs	r2, #0
 8100932:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100934:	4b09      	ldr	r3, [pc, #36]	; (810095c <MX_SPI2_Init+0x98>)
 8100936:	2200      	movs	r2, #0
 8100938:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810093a:	4b08      	ldr	r3, [pc, #32]	; (810095c <MX_SPI2_Init+0x98>)
 810093c:	2200      	movs	r2, #0
 810093e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100940:	4b06      	ldr	r3, [pc, #24]	; (810095c <MX_SPI2_Init+0x98>)
 8100942:	2200      	movs	r2, #0
 8100944:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100946:	4805      	ldr	r0, [pc, #20]	; (810095c <MX_SPI2_Init+0x98>)
 8100948:	f003 f85c 	bl	8103a04 <HAL_SPI_Init>
 810094c:	4603      	mov	r3, r0
 810094e:	2b00      	cmp	r3, #0
 8100950:	d001      	beq.n	8100956 <MX_SPI2_Init+0x92>
  {
    Error_Handler();
 8100952:	f000 f8d3 	bl	8100afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100956:	bf00      	nop
 8100958:	bd80      	pop	{r7, pc}
 810095a:	bf00      	nop
 810095c:	100000b4 	.word	0x100000b4
 8100960:	40003800 	.word	0x40003800

08100964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8100964:	b580      	push	{r7, lr}
 8100966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100968:	4b22      	ldr	r3, [pc, #136]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 810096a:	4a23      	ldr	r2, [pc, #140]	; (81009f8 <MX_USART3_UART_Init+0x94>)
 810096c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810096e:	4b21      	ldr	r3, [pc, #132]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 8100970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100976:	4b1f      	ldr	r3, [pc, #124]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 8100978:	2200      	movs	r2, #0
 810097a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810097c:	4b1d      	ldr	r3, [pc, #116]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 810097e:	2200      	movs	r2, #0
 8100980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100982:	4b1c      	ldr	r3, [pc, #112]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 8100984:	2200      	movs	r2, #0
 8100986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100988:	4b1a      	ldr	r3, [pc, #104]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 810098a:	220c      	movs	r2, #12
 810098c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810098e:	4b19      	ldr	r3, [pc, #100]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 8100990:	2200      	movs	r2, #0
 8100992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100994:	4b17      	ldr	r3, [pc, #92]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 8100996:	2200      	movs	r2, #0
 8100998:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810099a:	4b16      	ldr	r3, [pc, #88]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 810099c:	2200      	movs	r2, #0
 810099e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81009a0:	4b14      	ldr	r3, [pc, #80]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 81009a2:	2200      	movs	r2, #0
 81009a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81009a6:	4b13      	ldr	r3, [pc, #76]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 81009a8:	2200      	movs	r2, #0
 81009aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81009ac:	4811      	ldr	r0, [pc, #68]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 81009ae:	f003 ff69 	bl	8104884 <HAL_UART_Init>
 81009b2:	4603      	mov	r3, r0
 81009b4:	2b00      	cmp	r3, #0
 81009b6:	d001      	beq.n	81009bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81009b8:	f000 f8a0 	bl	8100afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81009bc:	2100      	movs	r1, #0
 81009be:	480d      	ldr	r0, [pc, #52]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 81009c0:	f004 ff9c 	bl	81058fc <HAL_UARTEx_SetTxFifoThreshold>
 81009c4:	4603      	mov	r3, r0
 81009c6:	2b00      	cmp	r3, #0
 81009c8:	d001      	beq.n	81009ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81009ca:	f000 f897 	bl	8100afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81009ce:	2100      	movs	r1, #0
 81009d0:	4808      	ldr	r0, [pc, #32]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 81009d2:	f004 ffd1 	bl	8105978 <HAL_UARTEx_SetRxFifoThreshold>
 81009d6:	4603      	mov	r3, r0
 81009d8:	2b00      	cmp	r3, #0
 81009da:	d001      	beq.n	81009e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81009dc:	f000 f88e 	bl	8100afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81009e0:	4804      	ldr	r0, [pc, #16]	; (81009f4 <MX_USART3_UART_Init+0x90>)
 81009e2:	f004 ff52 	bl	810588a <HAL_UARTEx_DisableFifoMode>
 81009e6:	4603      	mov	r3, r0
 81009e8:	2b00      	cmp	r3, #0
 81009ea:	d001      	beq.n	81009f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81009ec:	f000 f886 	bl	8100afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81009f0:	bf00      	nop
 81009f2:	bd80      	pop	{r7, pc}
 81009f4:	1000013c 	.word	0x1000013c
 81009f8:	40004800 	.word	0x40004800

081009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 81009fc:	b580      	push	{r7, lr}
 81009fe:	b088      	sub	sp, #32
 8100a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100a02:	f107 030c 	add.w	r3, r7, #12
 8100a06:	2200      	movs	r2, #0
 8100a08:	601a      	str	r2, [r3, #0]
 8100a0a:	605a      	str	r2, [r3, #4]
 8100a0c:	609a      	str	r2, [r3, #8]
 8100a0e:	60da      	str	r2, [r3, #12]
 8100a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100a12:	4b2c      	ldr	r3, [pc, #176]	; (8100ac4 <MX_GPIO_Init+0xc8>)
 8100a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a18:	4a2a      	ldr	r2, [pc, #168]	; (8100ac4 <MX_GPIO_Init+0xc8>)
 8100a1a:	f043 0304 	orr.w	r3, r3, #4
 8100a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a22:	4b28      	ldr	r3, [pc, #160]	; (8100ac4 <MX_GPIO_Init+0xc8>)
 8100a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a28:	f003 0304 	and.w	r3, r3, #4
 8100a2c:	60bb      	str	r3, [r7, #8]
 8100a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100a30:	4b24      	ldr	r3, [pc, #144]	; (8100ac4 <MX_GPIO_Init+0xc8>)
 8100a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a36:	4a23      	ldr	r2, [pc, #140]	; (8100ac4 <MX_GPIO_Init+0xc8>)
 8100a38:	f043 0302 	orr.w	r3, r3, #2
 8100a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a40:	4b20      	ldr	r3, [pc, #128]	; (8100ac4 <MX_GPIO_Init+0xc8>)
 8100a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a46:	f003 0302 	and.w	r3, r3, #2
 8100a4a:	607b      	str	r3, [r7, #4]
 8100a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100a4e:	4b1d      	ldr	r3, [pc, #116]	; (8100ac4 <MX_GPIO_Init+0xc8>)
 8100a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a54:	4a1b      	ldr	r2, [pc, #108]	; (8100ac4 <MX_GPIO_Init+0xc8>)
 8100a56:	f043 0310 	orr.w	r3, r3, #16
 8100a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a5e:	4b19      	ldr	r3, [pc, #100]	; (8100ac4 <MX_GPIO_Init+0xc8>)
 8100a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a64:	f003 0310 	and.w	r3, r3, #16
 8100a68:	603b      	str	r3, [r7, #0]
 8100a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8100a6c:	2200      	movs	r2, #0
 8100a6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100a72:	4815      	ldr	r0, [pc, #84]	; (8100ac8 <MX_GPIO_Init+0xcc>)
 8100a74:	f001 f9d2 	bl	8101e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100a78:	2200      	movs	r2, #0
 8100a7a:	2102      	movs	r1, #2
 8100a7c:	4813      	ldr	r0, [pc, #76]	; (8100acc <MX_GPIO_Init+0xd0>)
 8100a7e:	f001 f9cd 	bl	8101e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8100a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8100a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100a88:	2301      	movs	r3, #1
 8100a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8100a8c:	2302      	movs	r3, #2
 8100a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100a90:	2300      	movs	r3, #0
 8100a92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8100a94:	f107 030c 	add.w	r3, r7, #12
 8100a98:	4619      	mov	r1, r3
 8100a9a:	480b      	ldr	r0, [pc, #44]	; (8100ac8 <MX_GPIO_Init+0xcc>)
 8100a9c:	f001 f80e 	bl	8101abc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8100aa0:	2302      	movs	r3, #2
 8100aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100aa4:	2301      	movs	r3, #1
 8100aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8100aa8:	2302      	movs	r3, #2
 8100aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100aac:	2300      	movs	r3, #0
 8100aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100ab0:	f107 030c 	add.w	r3, r7, #12
 8100ab4:	4619      	mov	r1, r3
 8100ab6:	4805      	ldr	r0, [pc, #20]	; (8100acc <MX_GPIO_Init+0xd0>)
 8100ab8:	f001 f800 	bl	8101abc <HAL_GPIO_Init>

}
 8100abc:	bf00      	nop
 8100abe:	3720      	adds	r7, #32
 8100ac0:	46bd      	mov	sp, r7
 8100ac2:	bd80      	pop	{r7, pc}
 8100ac4:	58024400 	.word	0x58024400
 8100ac8:	58020400 	.word	0x58020400
 8100acc:	58021000 	.word	0x58021000

08100ad0 <HAL_SPI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8100ad0:	b580      	push	{r7, lr}
 8100ad2:	b082      	sub	sp, #8
 8100ad4:	af00      	add	r7, sp, #0
 8100ad6:	6078      	str	r0, [r7, #4]
	SPI_ready = 1;
 8100ad8:	4b05      	ldr	r3, [pc, #20]	; (8100af0 <HAL_SPI_RxCpltCallback+0x20>)
 8100ada:	2201      	movs	r2, #1
 8100adc:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Receive_IT(&hspi2, RX_Buffer, BUFFER_SIZE);
 8100ade:	2215      	movs	r2, #21
 8100ae0:	4904      	ldr	r1, [pc, #16]	; (8100af4 <HAL_SPI_RxCpltCallback+0x24>)
 8100ae2:	4805      	ldr	r0, [pc, #20]	; (8100af8 <HAL_SPI_RxCpltCallback+0x28>)
 8100ae4:	f003 f894 	bl	8103c10 <HAL_SPI_Receive_IT>
}
 8100ae8:	bf00      	nop
 8100aea:	3708      	adds	r7, #8
 8100aec:	46bd      	mov	sp, r7
 8100aee:	bd80      	pop	{r7, pc}
 8100af0:	100001e1 	.word	0x100001e1
 8100af4:	100001cc 	.word	0x100001cc
 8100af8:	100000b4 	.word	0x100000b4

08100afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100afc:	b480      	push	{r7}
 8100afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100b00:	b672      	cpsid	i
}
 8100b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100b04:	e7fe      	b.n	8100b04 <Error_Handler+0x8>
	...

08100b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100b08:	b480      	push	{r7}
 8100b0a:	b083      	sub	sp, #12
 8100b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100b0e:	4b0a      	ldr	r3, [pc, #40]	; (8100b38 <HAL_MspInit+0x30>)
 8100b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b14:	4a08      	ldr	r2, [pc, #32]	; (8100b38 <HAL_MspInit+0x30>)
 8100b16:	f043 0302 	orr.w	r3, r3, #2
 8100b1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100b1e:	4b06      	ldr	r3, [pc, #24]	; (8100b38 <HAL_MspInit+0x30>)
 8100b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b24:	f003 0302 	and.w	r3, r3, #2
 8100b28:	607b      	str	r3, [r7, #4]
 8100b2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100b2c:	bf00      	nop
 8100b2e:	370c      	adds	r7, #12
 8100b30:	46bd      	mov	sp, r7
 8100b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b36:	4770      	bx	lr
 8100b38:	58024400 	.word	0x58024400

08100b3c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8100b3c:	b480      	push	{r7}
 8100b3e:	b085      	sub	sp, #20
 8100b40:	af00      	add	r7, sp, #0
 8100b42:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8100b44:	687b      	ldr	r3, [r7, #4]
 8100b46:	681b      	ldr	r3, [r3, #0]
 8100b48:	4a0b      	ldr	r2, [pc, #44]	; (8100b78 <HAL_CRC_MspInit+0x3c>)
 8100b4a:	4293      	cmp	r3, r2
 8100b4c:	d10e      	bne.n	8100b6c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8100b4e:	4b0b      	ldr	r3, [pc, #44]	; (8100b7c <HAL_CRC_MspInit+0x40>)
 8100b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b54:	4a09      	ldr	r2, [pc, #36]	; (8100b7c <HAL_CRC_MspInit+0x40>)
 8100b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8100b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b5e:	4b07      	ldr	r3, [pc, #28]	; (8100b7c <HAL_CRC_MspInit+0x40>)
 8100b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8100b68:	60fb      	str	r3, [r7, #12]
 8100b6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8100b6c:	bf00      	nop
 8100b6e:	3714      	adds	r7, #20
 8100b70:	46bd      	mov	sp, r7
 8100b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b76:	4770      	bx	lr
 8100b78:	58024c00 	.word	0x58024c00
 8100b7c:	58024400 	.word	0x58024400

08100b80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8100b80:	b580      	push	{r7, lr}
 8100b82:	b0ba      	sub	sp, #232	; 0xe8
 8100b84:	af00      	add	r7, sp, #0
 8100b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b88:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100b8c:	2200      	movs	r2, #0
 8100b8e:	601a      	str	r2, [r3, #0]
 8100b90:	605a      	str	r2, [r3, #4]
 8100b92:	609a      	str	r2, [r3, #8]
 8100b94:	60da      	str	r2, [r3, #12]
 8100b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100b98:	f107 0318 	add.w	r3, r7, #24
 8100b9c:	22bc      	movs	r2, #188	; 0xbc
 8100b9e:	2100      	movs	r1, #0
 8100ba0:	4618      	mov	r0, r3
 8100ba2:	f004 ff9f 	bl	8105ae4 <memset>
  if(hspi->Instance==SPI2)
 8100ba6:	687b      	ldr	r3, [r7, #4]
 8100ba8:	681b      	ldr	r3, [r3, #0]
 8100baa:	4a3b      	ldr	r2, [pc, #236]	; (8100c98 <HAL_SPI_MspInit+0x118>)
 8100bac:	4293      	cmp	r3, r2
 8100bae:	d16e      	bne.n	8100c8e <HAL_SPI_MspInit+0x10e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8100bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100bb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8100bb6:	2300      	movs	r3, #0
 8100bb8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100bba:	f107 0318 	add.w	r3, r7, #24
 8100bbe:	4618      	mov	r0, r3
 8100bc0:	f001 fbb8 	bl	8102334 <HAL_RCCEx_PeriphCLKConfig>
 8100bc4:	4603      	mov	r3, r0
 8100bc6:	2b00      	cmp	r3, #0
 8100bc8:	d001      	beq.n	8100bce <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8100bca:	f7ff ff97 	bl	8100afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8100bce:	4b33      	ldr	r3, [pc, #204]	; (8100c9c <HAL_SPI_MspInit+0x11c>)
 8100bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100bd4:	4a31      	ldr	r2, [pc, #196]	; (8100c9c <HAL_SPI_MspInit+0x11c>)
 8100bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100bda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100bde:	4b2f      	ldr	r3, [pc, #188]	; (8100c9c <HAL_SPI_MspInit+0x11c>)
 8100be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100be8:	617b      	str	r3, [r7, #20]
 8100bea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100bec:	4b2b      	ldr	r3, [pc, #172]	; (8100c9c <HAL_SPI_MspInit+0x11c>)
 8100bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bf2:	4a2a      	ldr	r2, [pc, #168]	; (8100c9c <HAL_SPI_MspInit+0x11c>)
 8100bf4:	f043 0304 	orr.w	r3, r3, #4
 8100bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bfc:	4b27      	ldr	r3, [pc, #156]	; (8100c9c <HAL_SPI_MspInit+0x11c>)
 8100bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c02:	f003 0304 	and.w	r3, r3, #4
 8100c06:	613b      	str	r3, [r7, #16]
 8100c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100c0a:	4b24      	ldr	r3, [pc, #144]	; (8100c9c <HAL_SPI_MspInit+0x11c>)
 8100c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c10:	4a22      	ldr	r2, [pc, #136]	; (8100c9c <HAL_SPI_MspInit+0x11c>)
 8100c12:	f043 0302 	orr.w	r3, r3, #2
 8100c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c1a:	4b20      	ldr	r3, [pc, #128]	; (8100c9c <HAL_SPI_MspInit+0x11c>)
 8100c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c20:	f003 0302 	and.w	r3, r3, #2
 8100c24:	60fb      	str	r3, [r7, #12]
 8100c26:	68fb      	ldr	r3, [r7, #12]
    PC2_C     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8100c28:	2304      	movs	r3, #4
 8100c2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c2e:	2302      	movs	r3, #2
 8100c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c34:	2300      	movs	r3, #0
 8100c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c3a:	2300      	movs	r3, #0
 8100c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8100c40:	2305      	movs	r3, #5
 8100c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8100c46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100c4a:	4619      	mov	r1, r3
 8100c4c:	4814      	ldr	r0, [pc, #80]	; (8100ca0 <HAL_SPI_MspInit+0x120>)
 8100c4e:	f000 ff35 	bl	8101abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
 8100c52:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8100c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100c5a:	2302      	movs	r3, #2
 8100c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c60:	2300      	movs	r3, #0
 8100c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c66:	2300      	movs	r3, #0
 8100c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8100c6c:	2305      	movs	r3, #5
 8100c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100c72:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8100c76:	4619      	mov	r1, r3
 8100c78:	480a      	ldr	r0, [pc, #40]	; (8100ca4 <HAL_SPI_MspInit+0x124>)
 8100c7a:	f000 ff1f 	bl	8101abc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8100c7e:	2200      	movs	r2, #0
 8100c80:	2100      	movs	r1, #0
 8100c82:	2024      	movs	r0, #36	; 0x24
 8100c84:	f000 fa8d 	bl	81011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8100c88:	2024      	movs	r0, #36	; 0x24
 8100c8a:	f000 faa4 	bl	81011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8100c8e:	bf00      	nop
 8100c90:	37e8      	adds	r7, #232	; 0xe8
 8100c92:	46bd      	mov	sp, r7
 8100c94:	bd80      	pop	{r7, pc}
 8100c96:	bf00      	nop
 8100c98:	40003800 	.word	0x40003800
 8100c9c:	58024400 	.word	0x58024400
 8100ca0:	58020800 	.word	0x58020800
 8100ca4:	58020400 	.word	0x58020400

08100ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100ca8:	b580      	push	{r7, lr}
 8100caa:	b0b2      	sub	sp, #200	; 0xc8
 8100cac:	af00      	add	r7, sp, #0
 8100cae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100cb0:	f107 030c 	add.w	r3, r7, #12
 8100cb4:	22bc      	movs	r2, #188	; 0xbc
 8100cb6:	2100      	movs	r1, #0
 8100cb8:	4618      	mov	r0, r3
 8100cba:	f004 ff13 	bl	8105ae4 <memset>
  if(huart->Instance==USART3)
 8100cbe:	687b      	ldr	r3, [r7, #4]
 8100cc0:	681b      	ldr	r3, [r3, #0]
 8100cc2:	4a12      	ldr	r2, [pc, #72]	; (8100d0c <HAL_UART_MspInit+0x64>)
 8100cc4:	4293      	cmp	r3, r2
 8100cc6:	d11d      	bne.n	8100d04 <HAL_UART_MspInit+0x5c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100cc8:	2302      	movs	r3, #2
 8100cca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100ccc:	2300      	movs	r3, #0
 8100cce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100cd2:	f107 030c 	add.w	r3, r7, #12
 8100cd6:	4618      	mov	r0, r3
 8100cd8:	f001 fb2c 	bl	8102334 <HAL_RCCEx_PeriphCLKConfig>
 8100cdc:	4603      	mov	r3, r0
 8100cde:	2b00      	cmp	r3, #0
 8100ce0:	d001      	beq.n	8100ce6 <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
 8100ce2:	f7ff ff0b 	bl	8100afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100ce6:	4b0a      	ldr	r3, [pc, #40]	; (8100d10 <HAL_UART_MspInit+0x68>)
 8100ce8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100cec:	4a08      	ldr	r2, [pc, #32]	; (8100d10 <HAL_UART_MspInit+0x68>)
 8100cee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100cf2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100cf6:	4b06      	ldr	r3, [pc, #24]	; (8100d10 <HAL_UART_MspInit+0x68>)
 8100cf8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100d00:	60bb      	str	r3, [r7, #8]
 8100d02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100d04:	bf00      	nop
 8100d06:	37c8      	adds	r7, #200	; 0xc8
 8100d08:	46bd      	mov	sp, r7
 8100d0a:	bd80      	pop	{r7, pc}
 8100d0c:	40004800 	.word	0x40004800
 8100d10:	58024400 	.word	0x58024400

08100d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100d14:	b480      	push	{r7}
 8100d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100d18:	e7fe      	b.n	8100d18 <NMI_Handler+0x4>

08100d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100d1a:	b480      	push	{r7}
 8100d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100d1e:	e7fe      	b.n	8100d1e <HardFault_Handler+0x4>

08100d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100d20:	b480      	push	{r7}
 8100d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100d24:	e7fe      	b.n	8100d24 <MemManage_Handler+0x4>

08100d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100d26:	b480      	push	{r7}
 8100d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100d2a:	e7fe      	b.n	8100d2a <BusFault_Handler+0x4>

08100d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100d2c:	b480      	push	{r7}
 8100d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100d30:	e7fe      	b.n	8100d30 <UsageFault_Handler+0x4>

08100d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100d32:	b480      	push	{r7}
 8100d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100d36:	bf00      	nop
 8100d38:	46bd      	mov	sp, r7
 8100d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d3e:	4770      	bx	lr

08100d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100d40:	b480      	push	{r7}
 8100d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100d44:	bf00      	nop
 8100d46:	46bd      	mov	sp, r7
 8100d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d4c:	4770      	bx	lr

08100d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100d4e:	b480      	push	{r7}
 8100d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100d52:	bf00      	nop
 8100d54:	46bd      	mov	sp, r7
 8100d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d5a:	4770      	bx	lr

08100d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100d5c:	b580      	push	{r7, lr}
 8100d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100d60:	f000 f900 	bl	8100f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100d64:	bf00      	nop
 8100d66:	bd80      	pop	{r7, pc}

08100d68 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8100d68:	b580      	push	{r7, lr}
 8100d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8100d6c:	4802      	ldr	r0, [pc, #8]	; (8100d78 <SPI2_IRQHandler+0x10>)
 8100d6e:	f003 f9b7 	bl	81040e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8100d72:	bf00      	nop
 8100d74:	bd80      	pop	{r7, pc}
 8100d76:	bf00      	nop
 8100d78:	100000b4 	.word	0x100000b4

08100d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100d7c:	b580      	push	{r7, lr}
 8100d7e:	b086      	sub	sp, #24
 8100d80:	af00      	add	r7, sp, #0
 8100d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100d84:	4a14      	ldr	r2, [pc, #80]	; (8100dd8 <_sbrk+0x5c>)
 8100d86:	4b15      	ldr	r3, [pc, #84]	; (8100ddc <_sbrk+0x60>)
 8100d88:	1ad3      	subs	r3, r2, r3
 8100d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100d8c:	697b      	ldr	r3, [r7, #20]
 8100d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100d90:	4b13      	ldr	r3, [pc, #76]	; (8100de0 <_sbrk+0x64>)
 8100d92:	681b      	ldr	r3, [r3, #0]
 8100d94:	2b00      	cmp	r3, #0
 8100d96:	d102      	bne.n	8100d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100d98:	4b11      	ldr	r3, [pc, #68]	; (8100de0 <_sbrk+0x64>)
 8100d9a:	4a12      	ldr	r2, [pc, #72]	; (8100de4 <_sbrk+0x68>)
 8100d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100d9e:	4b10      	ldr	r3, [pc, #64]	; (8100de0 <_sbrk+0x64>)
 8100da0:	681a      	ldr	r2, [r3, #0]
 8100da2:	687b      	ldr	r3, [r7, #4]
 8100da4:	4413      	add	r3, r2
 8100da6:	693a      	ldr	r2, [r7, #16]
 8100da8:	429a      	cmp	r2, r3
 8100daa:	d207      	bcs.n	8100dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100dac:	f004 fe70 	bl	8105a90 <__errno>
 8100db0:	4603      	mov	r3, r0
 8100db2:	220c      	movs	r2, #12
 8100db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100db6:	f04f 33ff 	mov.w	r3, #4294967295
 8100dba:	e009      	b.n	8100dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100dbc:	4b08      	ldr	r3, [pc, #32]	; (8100de0 <_sbrk+0x64>)
 8100dbe:	681b      	ldr	r3, [r3, #0]
 8100dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100dc2:	4b07      	ldr	r3, [pc, #28]	; (8100de0 <_sbrk+0x64>)
 8100dc4:	681a      	ldr	r2, [r3, #0]
 8100dc6:	687b      	ldr	r3, [r7, #4]
 8100dc8:	4413      	add	r3, r2
 8100dca:	4a05      	ldr	r2, [pc, #20]	; (8100de0 <_sbrk+0x64>)
 8100dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8100dce:	68fb      	ldr	r3, [r7, #12]
}
 8100dd0:	4618      	mov	r0, r3
 8100dd2:	3718      	adds	r7, #24
 8100dd4:	46bd      	mov	sp, r7
 8100dd6:	bd80      	pop	{r7, pc}
 8100dd8:	10048000 	.word	0x10048000
 8100ddc:	00000400 	.word	0x00000400
 8100de0:	100001f4 	.word	0x100001f4
 8100de4:	10000210 	.word	0x10000210

08100de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100dec:	f7ff fc4a 	bl	8100684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100df0:	480c      	ldr	r0, [pc, #48]	; (8100e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100df2:	490d      	ldr	r1, [pc, #52]	; (8100e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100df4:	4a0d      	ldr	r2, [pc, #52]	; (8100e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100df8:	e002      	b.n	8100e00 <LoopCopyDataInit>

08100dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100dfe:	3304      	adds	r3, #4

08100e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100e04:	d3f9      	bcc.n	8100dfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100e06:	4a0a      	ldr	r2, [pc, #40]	; (8100e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100e08:	4c0a      	ldr	r4, [pc, #40]	; (8100e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100e0c:	e001      	b.n	8100e12 <LoopFillZerobss>

08100e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100e10:	3204      	adds	r2, #4

08100e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100e14:	d3fb      	bcc.n	8100e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100e16:	f004 fe41 	bl	8105a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100e1a:	f7ff fc4b 	bl	81006b4 <main>
  bx  lr
 8100e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100e20:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100e24:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100e28:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 8100e2c:	081064d8 	.word	0x081064d8
  ldr r2, =_sbss
 8100e30:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 8100e34:	1000020c 	.word	0x1000020c

08100e38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100e38:	e7fe      	b.n	8100e38 <ADC3_IRQHandler>
	...

08100e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100e3c:	b580      	push	{r7, lr}
 8100e3e:	b082      	sub	sp, #8
 8100e40:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100e42:	4b28      	ldr	r3, [pc, #160]	; (8100ee4 <HAL_Init+0xa8>)
 8100e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e48:	4a26      	ldr	r2, [pc, #152]	; (8100ee4 <HAL_Init+0xa8>)
 8100e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100e52:	4b24      	ldr	r3, [pc, #144]	; (8100ee4 <HAL_Init+0xa8>)
 8100e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100e5c:	603b      	str	r3, [r7, #0]
 8100e5e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100e60:	4b21      	ldr	r3, [pc, #132]	; (8100ee8 <HAL_Init+0xac>)
 8100e62:	681b      	ldr	r3, [r3, #0]
 8100e64:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100e68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100e6c:	4a1e      	ldr	r2, [pc, #120]	; (8100ee8 <HAL_Init+0xac>)
 8100e6e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100e72:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100e74:	4b1c      	ldr	r3, [pc, #112]	; (8100ee8 <HAL_Init+0xac>)
 8100e76:	681b      	ldr	r3, [r3, #0]
 8100e78:	4a1b      	ldr	r2, [pc, #108]	; (8100ee8 <HAL_Init+0xac>)
 8100e7a:	f043 0301 	orr.w	r3, r3, #1
 8100e7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100e80:	2003      	movs	r0, #3
 8100e82:	f000 f983 	bl	810118c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100e86:	f001 f87d 	bl	8101f84 <HAL_RCC_GetSysClockFreq>
 8100e8a:	4602      	mov	r2, r0
 8100e8c:	4b15      	ldr	r3, [pc, #84]	; (8100ee4 <HAL_Init+0xa8>)
 8100e8e:	699b      	ldr	r3, [r3, #24]
 8100e90:	0a1b      	lsrs	r3, r3, #8
 8100e92:	f003 030f 	and.w	r3, r3, #15
 8100e96:	4915      	ldr	r1, [pc, #84]	; (8100eec <HAL_Init+0xb0>)
 8100e98:	5ccb      	ldrb	r3, [r1, r3]
 8100e9a:	f003 031f 	and.w	r3, r3, #31
 8100e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8100ea2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100ea4:	4b0f      	ldr	r3, [pc, #60]	; (8100ee4 <HAL_Init+0xa8>)
 8100ea6:	699b      	ldr	r3, [r3, #24]
 8100ea8:	f003 030f 	and.w	r3, r3, #15
 8100eac:	4a0f      	ldr	r2, [pc, #60]	; (8100eec <HAL_Init+0xb0>)
 8100eae:	5cd3      	ldrb	r3, [r2, r3]
 8100eb0:	f003 031f 	and.w	r3, r3, #31
 8100eb4:	687a      	ldr	r2, [r7, #4]
 8100eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8100eba:	4a0d      	ldr	r2, [pc, #52]	; (8100ef0 <HAL_Init+0xb4>)
 8100ebc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100ebe:	4b0c      	ldr	r3, [pc, #48]	; (8100ef0 <HAL_Init+0xb4>)
 8100ec0:	681b      	ldr	r3, [r3, #0]
 8100ec2:	4a0c      	ldr	r2, [pc, #48]	; (8100ef4 <HAL_Init+0xb8>)
 8100ec4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100ec6:	2000      	movs	r0, #0
 8100ec8:	f000 f816 	bl	8100ef8 <HAL_InitTick>
 8100ecc:	4603      	mov	r3, r0
 8100ece:	2b00      	cmp	r3, #0
 8100ed0:	d001      	beq.n	8100ed6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100ed2:	2301      	movs	r3, #1
 8100ed4:	e002      	b.n	8100edc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100ed6:	f7ff fe17 	bl	8100b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100eda:	2300      	movs	r3, #0
}
 8100edc:	4618      	mov	r0, r3
 8100ede:	3708      	adds	r7, #8
 8100ee0:	46bd      	mov	sp, r7
 8100ee2:	bd80      	pop	{r7, pc}
 8100ee4:	58024400 	.word	0x58024400
 8100ee8:	40024400 	.word	0x40024400
 8100eec:	0810645c 	.word	0x0810645c
 8100ef0:	10000004 	.word	0x10000004
 8100ef4:	10000000 	.word	0x10000000

08100ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100ef8:	b580      	push	{r7, lr}
 8100efa:	b082      	sub	sp, #8
 8100efc:	af00      	add	r7, sp, #0
 8100efe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100f00:	4b15      	ldr	r3, [pc, #84]	; (8100f58 <HAL_InitTick+0x60>)
 8100f02:	781b      	ldrb	r3, [r3, #0]
 8100f04:	2b00      	cmp	r3, #0
 8100f06:	d101      	bne.n	8100f0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100f08:	2301      	movs	r3, #1
 8100f0a:	e021      	b.n	8100f50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100f0c:	4b13      	ldr	r3, [pc, #76]	; (8100f5c <HAL_InitTick+0x64>)
 8100f0e:	681a      	ldr	r2, [r3, #0]
 8100f10:	4b11      	ldr	r3, [pc, #68]	; (8100f58 <HAL_InitTick+0x60>)
 8100f12:	781b      	ldrb	r3, [r3, #0]
 8100f14:	4619      	mov	r1, r3
 8100f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8100f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8100f22:	4618      	mov	r0, r3
 8100f24:	f000 f965 	bl	81011f2 <HAL_SYSTICK_Config>
 8100f28:	4603      	mov	r3, r0
 8100f2a:	2b00      	cmp	r3, #0
 8100f2c:	d001      	beq.n	8100f32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100f2e:	2301      	movs	r3, #1
 8100f30:	e00e      	b.n	8100f50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100f32:	687b      	ldr	r3, [r7, #4]
 8100f34:	2b0f      	cmp	r3, #15
 8100f36:	d80a      	bhi.n	8100f4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100f38:	2200      	movs	r2, #0
 8100f3a:	6879      	ldr	r1, [r7, #4]
 8100f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8100f40:	f000 f92f 	bl	81011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100f44:	4a06      	ldr	r2, [pc, #24]	; (8100f60 <HAL_InitTick+0x68>)
 8100f46:	687b      	ldr	r3, [r7, #4]
 8100f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100f4a:	2300      	movs	r3, #0
 8100f4c:	e000      	b.n	8100f50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100f4e:	2301      	movs	r3, #1
}
 8100f50:	4618      	mov	r0, r3
 8100f52:	3708      	adds	r7, #8
 8100f54:	46bd      	mov	sp, r7
 8100f56:	bd80      	pop	{r7, pc}
 8100f58:	1000000c 	.word	0x1000000c
 8100f5c:	10000000 	.word	0x10000000
 8100f60:	10000008 	.word	0x10000008

08100f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100f64:	b480      	push	{r7}
 8100f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100f68:	4b06      	ldr	r3, [pc, #24]	; (8100f84 <HAL_IncTick+0x20>)
 8100f6a:	781b      	ldrb	r3, [r3, #0]
 8100f6c:	461a      	mov	r2, r3
 8100f6e:	4b06      	ldr	r3, [pc, #24]	; (8100f88 <HAL_IncTick+0x24>)
 8100f70:	681b      	ldr	r3, [r3, #0]
 8100f72:	4413      	add	r3, r2
 8100f74:	4a04      	ldr	r2, [pc, #16]	; (8100f88 <HAL_IncTick+0x24>)
 8100f76:	6013      	str	r3, [r2, #0]
}
 8100f78:	bf00      	nop
 8100f7a:	46bd      	mov	sp, r7
 8100f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f80:	4770      	bx	lr
 8100f82:	bf00      	nop
 8100f84:	1000000c 	.word	0x1000000c
 8100f88:	100001f8 	.word	0x100001f8

08100f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100f8c:	b480      	push	{r7}
 8100f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8100f90:	4b03      	ldr	r3, [pc, #12]	; (8100fa0 <HAL_GetTick+0x14>)
 8100f92:	681b      	ldr	r3, [r3, #0]
}
 8100f94:	4618      	mov	r0, r3
 8100f96:	46bd      	mov	sp, r7
 8100f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f9c:	4770      	bx	lr
 8100f9e:	bf00      	nop
 8100fa0:	100001f8 	.word	0x100001f8

08100fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100fa4:	b580      	push	{r7, lr}
 8100fa6:	b084      	sub	sp, #16
 8100fa8:	af00      	add	r7, sp, #0
 8100faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100fac:	f7ff ffee 	bl	8100f8c <HAL_GetTick>
 8100fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100fb2:	687b      	ldr	r3, [r7, #4]
 8100fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100fb6:	68fb      	ldr	r3, [r7, #12]
 8100fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100fbc:	d005      	beq.n	8100fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100fbe:	4b0a      	ldr	r3, [pc, #40]	; (8100fe8 <HAL_Delay+0x44>)
 8100fc0:	781b      	ldrb	r3, [r3, #0]
 8100fc2:	461a      	mov	r2, r3
 8100fc4:	68fb      	ldr	r3, [r7, #12]
 8100fc6:	4413      	add	r3, r2
 8100fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100fca:	bf00      	nop
 8100fcc:	f7ff ffde 	bl	8100f8c <HAL_GetTick>
 8100fd0:	4602      	mov	r2, r0
 8100fd2:	68bb      	ldr	r3, [r7, #8]
 8100fd4:	1ad3      	subs	r3, r2, r3
 8100fd6:	68fa      	ldr	r2, [r7, #12]
 8100fd8:	429a      	cmp	r2, r3
 8100fda:	d8f7      	bhi.n	8100fcc <HAL_Delay+0x28>
  {
  }
}
 8100fdc:	bf00      	nop
 8100fde:	bf00      	nop
 8100fe0:	3710      	adds	r7, #16
 8100fe2:	46bd      	mov	sp, r7
 8100fe4:	bd80      	pop	{r7, pc}
 8100fe6:	bf00      	nop
 8100fe8:	1000000c 	.word	0x1000000c

08100fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100fec:	b480      	push	{r7}
 8100fee:	b085      	sub	sp, #20
 8100ff0:	af00      	add	r7, sp, #0
 8100ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100ff4:	687b      	ldr	r3, [r7, #4]
 8100ff6:	f003 0307 	and.w	r3, r3, #7
 8100ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100ffc:	4b0c      	ldr	r3, [pc, #48]	; (8101030 <__NVIC_SetPriorityGrouping+0x44>)
 8100ffe:	68db      	ldr	r3, [r3, #12]
 8101000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101002:	68ba      	ldr	r2, [r7, #8]
 8101004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101008:	4013      	ands	r3, r2
 810100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810100c:	68fb      	ldr	r3, [r7, #12]
 810100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101010:	68bb      	ldr	r3, [r7, #8]
 8101012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810101e:	4a04      	ldr	r2, [pc, #16]	; (8101030 <__NVIC_SetPriorityGrouping+0x44>)
 8101020:	68bb      	ldr	r3, [r7, #8]
 8101022:	60d3      	str	r3, [r2, #12]
}
 8101024:	bf00      	nop
 8101026:	3714      	adds	r7, #20
 8101028:	46bd      	mov	sp, r7
 810102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810102e:	4770      	bx	lr
 8101030:	e000ed00 	.word	0xe000ed00

08101034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101034:	b480      	push	{r7}
 8101036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101038:	4b04      	ldr	r3, [pc, #16]	; (810104c <__NVIC_GetPriorityGrouping+0x18>)
 810103a:	68db      	ldr	r3, [r3, #12]
 810103c:	0a1b      	lsrs	r3, r3, #8
 810103e:	f003 0307 	and.w	r3, r3, #7
}
 8101042:	4618      	mov	r0, r3
 8101044:	46bd      	mov	sp, r7
 8101046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810104a:	4770      	bx	lr
 810104c:	e000ed00 	.word	0xe000ed00

08101050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101050:	b480      	push	{r7}
 8101052:	b083      	sub	sp, #12
 8101054:	af00      	add	r7, sp, #0
 8101056:	4603      	mov	r3, r0
 8101058:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810105a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810105e:	2b00      	cmp	r3, #0
 8101060:	db0b      	blt.n	810107a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101062:	88fb      	ldrh	r3, [r7, #6]
 8101064:	f003 021f 	and.w	r2, r3, #31
 8101068:	4907      	ldr	r1, [pc, #28]	; (8101088 <__NVIC_EnableIRQ+0x38>)
 810106a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810106e:	095b      	lsrs	r3, r3, #5
 8101070:	2001      	movs	r0, #1
 8101072:	fa00 f202 	lsl.w	r2, r0, r2
 8101076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810107a:	bf00      	nop
 810107c:	370c      	adds	r7, #12
 810107e:	46bd      	mov	sp, r7
 8101080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101084:	4770      	bx	lr
 8101086:	bf00      	nop
 8101088:	e000e100 	.word	0xe000e100

0810108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810108c:	b480      	push	{r7}
 810108e:	b083      	sub	sp, #12
 8101090:	af00      	add	r7, sp, #0
 8101092:	4603      	mov	r3, r0
 8101094:	6039      	str	r1, [r7, #0]
 8101096:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101098:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810109c:	2b00      	cmp	r3, #0
 810109e:	db0a      	blt.n	81010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81010a0:	683b      	ldr	r3, [r7, #0]
 81010a2:	b2da      	uxtb	r2, r3
 81010a4:	490c      	ldr	r1, [pc, #48]	; (81010d8 <__NVIC_SetPriority+0x4c>)
 81010a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81010aa:	0112      	lsls	r2, r2, #4
 81010ac:	b2d2      	uxtb	r2, r2
 81010ae:	440b      	add	r3, r1
 81010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81010b4:	e00a      	b.n	81010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81010b6:	683b      	ldr	r3, [r7, #0]
 81010b8:	b2da      	uxtb	r2, r3
 81010ba:	4908      	ldr	r1, [pc, #32]	; (81010dc <__NVIC_SetPriority+0x50>)
 81010bc:	88fb      	ldrh	r3, [r7, #6]
 81010be:	f003 030f 	and.w	r3, r3, #15
 81010c2:	3b04      	subs	r3, #4
 81010c4:	0112      	lsls	r2, r2, #4
 81010c6:	b2d2      	uxtb	r2, r2
 81010c8:	440b      	add	r3, r1
 81010ca:	761a      	strb	r2, [r3, #24]
}
 81010cc:	bf00      	nop
 81010ce:	370c      	adds	r7, #12
 81010d0:	46bd      	mov	sp, r7
 81010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010d6:	4770      	bx	lr
 81010d8:	e000e100 	.word	0xe000e100
 81010dc:	e000ed00 	.word	0xe000ed00

081010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81010e0:	b480      	push	{r7}
 81010e2:	b089      	sub	sp, #36	; 0x24
 81010e4:	af00      	add	r7, sp, #0
 81010e6:	60f8      	str	r0, [r7, #12]
 81010e8:	60b9      	str	r1, [r7, #8]
 81010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81010ec:	68fb      	ldr	r3, [r7, #12]
 81010ee:	f003 0307 	and.w	r3, r3, #7
 81010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81010f4:	69fb      	ldr	r3, [r7, #28]
 81010f6:	f1c3 0307 	rsb	r3, r3, #7
 81010fa:	2b04      	cmp	r3, #4
 81010fc:	bf28      	it	cs
 81010fe:	2304      	movcs	r3, #4
 8101100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101102:	69fb      	ldr	r3, [r7, #28]
 8101104:	3304      	adds	r3, #4
 8101106:	2b06      	cmp	r3, #6
 8101108:	d902      	bls.n	8101110 <NVIC_EncodePriority+0x30>
 810110a:	69fb      	ldr	r3, [r7, #28]
 810110c:	3b03      	subs	r3, #3
 810110e:	e000      	b.n	8101112 <NVIC_EncodePriority+0x32>
 8101110:	2300      	movs	r3, #0
 8101112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101114:	f04f 32ff 	mov.w	r2, #4294967295
 8101118:	69bb      	ldr	r3, [r7, #24]
 810111a:	fa02 f303 	lsl.w	r3, r2, r3
 810111e:	43da      	mvns	r2, r3
 8101120:	68bb      	ldr	r3, [r7, #8]
 8101122:	401a      	ands	r2, r3
 8101124:	697b      	ldr	r3, [r7, #20]
 8101126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101128:	f04f 31ff 	mov.w	r1, #4294967295
 810112c:	697b      	ldr	r3, [r7, #20]
 810112e:	fa01 f303 	lsl.w	r3, r1, r3
 8101132:	43d9      	mvns	r1, r3
 8101134:	687b      	ldr	r3, [r7, #4]
 8101136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101138:	4313      	orrs	r3, r2
         );
}
 810113a:	4618      	mov	r0, r3
 810113c:	3724      	adds	r7, #36	; 0x24
 810113e:	46bd      	mov	sp, r7
 8101140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101144:	4770      	bx	lr
	...

08101148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101148:	b580      	push	{r7, lr}
 810114a:	b082      	sub	sp, #8
 810114c:	af00      	add	r7, sp, #0
 810114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101150:	687b      	ldr	r3, [r7, #4]
 8101152:	3b01      	subs	r3, #1
 8101154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101158:	d301      	bcc.n	810115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810115a:	2301      	movs	r3, #1
 810115c:	e00f      	b.n	810117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810115e:	4a0a      	ldr	r2, [pc, #40]	; (8101188 <SysTick_Config+0x40>)
 8101160:	687b      	ldr	r3, [r7, #4]
 8101162:	3b01      	subs	r3, #1
 8101164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101166:	210f      	movs	r1, #15
 8101168:	f04f 30ff 	mov.w	r0, #4294967295
 810116c:	f7ff ff8e 	bl	810108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101170:	4b05      	ldr	r3, [pc, #20]	; (8101188 <SysTick_Config+0x40>)
 8101172:	2200      	movs	r2, #0
 8101174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101176:	4b04      	ldr	r3, [pc, #16]	; (8101188 <SysTick_Config+0x40>)
 8101178:	2207      	movs	r2, #7
 810117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810117c:	2300      	movs	r3, #0
}
 810117e:	4618      	mov	r0, r3
 8101180:	3708      	adds	r7, #8
 8101182:	46bd      	mov	sp, r7
 8101184:	bd80      	pop	{r7, pc}
 8101186:	bf00      	nop
 8101188:	e000e010 	.word	0xe000e010

0810118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810118c:	b580      	push	{r7, lr}
 810118e:	b082      	sub	sp, #8
 8101190:	af00      	add	r7, sp, #0
 8101192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101194:	6878      	ldr	r0, [r7, #4]
 8101196:	f7ff ff29 	bl	8100fec <__NVIC_SetPriorityGrouping>
}
 810119a:	bf00      	nop
 810119c:	3708      	adds	r7, #8
 810119e:	46bd      	mov	sp, r7
 81011a0:	bd80      	pop	{r7, pc}

081011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81011a2:	b580      	push	{r7, lr}
 81011a4:	b086      	sub	sp, #24
 81011a6:	af00      	add	r7, sp, #0
 81011a8:	4603      	mov	r3, r0
 81011aa:	60b9      	str	r1, [r7, #8]
 81011ac:	607a      	str	r2, [r7, #4]
 81011ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81011b0:	f7ff ff40 	bl	8101034 <__NVIC_GetPriorityGrouping>
 81011b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81011b6:	687a      	ldr	r2, [r7, #4]
 81011b8:	68b9      	ldr	r1, [r7, #8]
 81011ba:	6978      	ldr	r0, [r7, #20]
 81011bc:	f7ff ff90 	bl	81010e0 <NVIC_EncodePriority>
 81011c0:	4602      	mov	r2, r0
 81011c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81011c6:	4611      	mov	r1, r2
 81011c8:	4618      	mov	r0, r3
 81011ca:	f7ff ff5f 	bl	810108c <__NVIC_SetPriority>
}
 81011ce:	bf00      	nop
 81011d0:	3718      	adds	r7, #24
 81011d2:	46bd      	mov	sp, r7
 81011d4:	bd80      	pop	{r7, pc}

081011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81011d6:	b580      	push	{r7, lr}
 81011d8:	b082      	sub	sp, #8
 81011da:	af00      	add	r7, sp, #0
 81011dc:	4603      	mov	r3, r0
 81011de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81011e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81011e4:	4618      	mov	r0, r3
 81011e6:	f7ff ff33 	bl	8101050 <__NVIC_EnableIRQ>
}
 81011ea:	bf00      	nop
 81011ec:	3708      	adds	r7, #8
 81011ee:	46bd      	mov	sp, r7
 81011f0:	bd80      	pop	{r7, pc}

081011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81011f2:	b580      	push	{r7, lr}
 81011f4:	b082      	sub	sp, #8
 81011f6:	af00      	add	r7, sp, #0
 81011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81011fa:	6878      	ldr	r0, [r7, #4]
 81011fc:	f7ff ffa4 	bl	8101148 <SysTick_Config>
 8101200:	4603      	mov	r3, r0
}
 8101202:	4618      	mov	r0, r3
 8101204:	3708      	adds	r7, #8
 8101206:	46bd      	mov	sp, r7
 8101208:	bd80      	pop	{r7, pc}
	...

0810120c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810120c:	b480      	push	{r7}
 810120e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101210:	4b07      	ldr	r3, [pc, #28]	; (8101230 <HAL_GetCurrentCPUID+0x24>)
 8101212:	681b      	ldr	r3, [r3, #0]
 8101214:	091b      	lsrs	r3, r3, #4
 8101216:	f003 030f 	and.w	r3, r3, #15
 810121a:	2b07      	cmp	r3, #7
 810121c:	d101      	bne.n	8101222 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810121e:	2303      	movs	r3, #3
 8101220:	e000      	b.n	8101224 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101222:	2301      	movs	r3, #1
  }
}
 8101224:	4618      	mov	r0, r3
 8101226:	46bd      	mov	sp, r7
 8101228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810122c:	4770      	bx	lr
 810122e:	bf00      	nop
 8101230:	e000ed00 	.word	0xe000ed00

08101234 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8101234:	b580      	push	{r7, lr}
 8101236:	b082      	sub	sp, #8
 8101238:	af00      	add	r7, sp, #0
 810123a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 810123c:	687b      	ldr	r3, [r7, #4]
 810123e:	2b00      	cmp	r3, #0
 8101240:	d101      	bne.n	8101246 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8101242:	2301      	movs	r3, #1
 8101244:	e054      	b.n	81012f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8101246:	687b      	ldr	r3, [r7, #4]
 8101248:	7f5b      	ldrb	r3, [r3, #29]
 810124a:	b2db      	uxtb	r3, r3
 810124c:	2b00      	cmp	r3, #0
 810124e:	d105      	bne.n	810125c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8101250:	687b      	ldr	r3, [r7, #4]
 8101252:	2200      	movs	r2, #0
 8101254:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8101256:	6878      	ldr	r0, [r7, #4]
 8101258:	f7ff fc70 	bl	8100b3c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 810125c:	687b      	ldr	r3, [r7, #4]
 810125e:	2202      	movs	r2, #2
 8101260:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8101262:	687b      	ldr	r3, [r7, #4]
 8101264:	791b      	ldrb	r3, [r3, #4]
 8101266:	2b00      	cmp	r3, #0
 8101268:	d10c      	bne.n	8101284 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 810126a:	687b      	ldr	r3, [r7, #4]
 810126c:	681b      	ldr	r3, [r3, #0]
 810126e:	4a22      	ldr	r2, [pc, #136]	; (81012f8 <HAL_CRC_Init+0xc4>)
 8101270:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8101272:	687b      	ldr	r3, [r7, #4]
 8101274:	681b      	ldr	r3, [r3, #0]
 8101276:	689a      	ldr	r2, [r3, #8]
 8101278:	687b      	ldr	r3, [r7, #4]
 810127a:	681b      	ldr	r3, [r3, #0]
 810127c:	f022 0218 	bic.w	r2, r2, #24
 8101280:	609a      	str	r2, [r3, #8]
 8101282:	e00c      	b.n	810129e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8101284:	687b      	ldr	r3, [r7, #4]
 8101286:	6899      	ldr	r1, [r3, #8]
 8101288:	687b      	ldr	r3, [r7, #4]
 810128a:	68db      	ldr	r3, [r3, #12]
 810128c:	461a      	mov	r2, r3
 810128e:	6878      	ldr	r0, [r7, #4]
 8101290:	f000 f948 	bl	8101524 <HAL_CRCEx_Polynomial_Set>
 8101294:	4603      	mov	r3, r0
 8101296:	2b00      	cmp	r3, #0
 8101298:	d001      	beq.n	810129e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 810129a:	2301      	movs	r3, #1
 810129c:	e028      	b.n	81012f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 810129e:	687b      	ldr	r3, [r7, #4]
 81012a0:	795b      	ldrb	r3, [r3, #5]
 81012a2:	2b00      	cmp	r3, #0
 81012a4:	d105      	bne.n	81012b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 81012a6:	687b      	ldr	r3, [r7, #4]
 81012a8:	681b      	ldr	r3, [r3, #0]
 81012aa:	f04f 32ff 	mov.w	r2, #4294967295
 81012ae:	611a      	str	r2, [r3, #16]
 81012b0:	e004      	b.n	81012bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 81012b2:	687b      	ldr	r3, [r7, #4]
 81012b4:	681b      	ldr	r3, [r3, #0]
 81012b6:	687a      	ldr	r2, [r7, #4]
 81012b8:	6912      	ldr	r2, [r2, #16]
 81012ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 81012bc:	687b      	ldr	r3, [r7, #4]
 81012be:	681b      	ldr	r3, [r3, #0]
 81012c0:	689b      	ldr	r3, [r3, #8]
 81012c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 81012c6:	687b      	ldr	r3, [r7, #4]
 81012c8:	695a      	ldr	r2, [r3, #20]
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	430a      	orrs	r2, r1
 81012d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 81012d2:	687b      	ldr	r3, [r7, #4]
 81012d4:	681b      	ldr	r3, [r3, #0]
 81012d6:	689b      	ldr	r3, [r3, #8]
 81012d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 81012dc:	687b      	ldr	r3, [r7, #4]
 81012de:	699a      	ldr	r2, [r3, #24]
 81012e0:	687b      	ldr	r3, [r7, #4]
 81012e2:	681b      	ldr	r3, [r3, #0]
 81012e4:	430a      	orrs	r2, r1
 81012e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 81012e8:	687b      	ldr	r3, [r7, #4]
 81012ea:	2201      	movs	r2, #1
 81012ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 81012ee:	2300      	movs	r3, #0
}
 81012f0:	4618      	mov	r0, r3
 81012f2:	3708      	adds	r7, #8
 81012f4:	46bd      	mov	sp, r7
 81012f6:	bd80      	pop	{r7, pc}
 81012f8:	04c11db7 	.word	0x04c11db7

081012fc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 81012fc:	b580      	push	{r7, lr}
 81012fe:	b086      	sub	sp, #24
 8101300:	af00      	add	r7, sp, #0
 8101302:	60f8      	str	r0, [r7, #12]
 8101304:	60b9      	str	r1, [r7, #8]
 8101306:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8101308:	2300      	movs	r3, #0
 810130a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 810130c:	68fb      	ldr	r3, [r7, #12]
 810130e:	2202      	movs	r2, #2
 8101310:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8101312:	68fb      	ldr	r3, [r7, #12]
 8101314:	681b      	ldr	r3, [r3, #0]
 8101316:	689a      	ldr	r2, [r3, #8]
 8101318:	68fb      	ldr	r3, [r7, #12]
 810131a:	681b      	ldr	r3, [r3, #0]
 810131c:	f042 0201 	orr.w	r2, r2, #1
 8101320:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8101322:	68fb      	ldr	r3, [r7, #12]
 8101324:	6a1b      	ldr	r3, [r3, #32]
 8101326:	2b03      	cmp	r3, #3
 8101328:	d006      	beq.n	8101338 <HAL_CRC_Calculate+0x3c>
 810132a:	2b03      	cmp	r3, #3
 810132c:	d829      	bhi.n	8101382 <HAL_CRC_Calculate+0x86>
 810132e:	2b01      	cmp	r3, #1
 8101330:	d019      	beq.n	8101366 <HAL_CRC_Calculate+0x6a>
 8101332:	2b02      	cmp	r3, #2
 8101334:	d01e      	beq.n	8101374 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8101336:	e024      	b.n	8101382 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8101338:	2300      	movs	r3, #0
 810133a:	617b      	str	r3, [r7, #20]
 810133c:	e00a      	b.n	8101354 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 810133e:	697b      	ldr	r3, [r7, #20]
 8101340:	009b      	lsls	r3, r3, #2
 8101342:	68ba      	ldr	r2, [r7, #8]
 8101344:	441a      	add	r2, r3
 8101346:	68fb      	ldr	r3, [r7, #12]
 8101348:	681b      	ldr	r3, [r3, #0]
 810134a:	6812      	ldr	r2, [r2, #0]
 810134c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 810134e:	697b      	ldr	r3, [r7, #20]
 8101350:	3301      	adds	r3, #1
 8101352:	617b      	str	r3, [r7, #20]
 8101354:	697a      	ldr	r2, [r7, #20]
 8101356:	687b      	ldr	r3, [r7, #4]
 8101358:	429a      	cmp	r2, r3
 810135a:	d3f0      	bcc.n	810133e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 810135c:	68fb      	ldr	r3, [r7, #12]
 810135e:	681b      	ldr	r3, [r3, #0]
 8101360:	681b      	ldr	r3, [r3, #0]
 8101362:	613b      	str	r3, [r7, #16]
      break;
 8101364:	e00e      	b.n	8101384 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8101366:	687a      	ldr	r2, [r7, #4]
 8101368:	68b9      	ldr	r1, [r7, #8]
 810136a:	68f8      	ldr	r0, [r7, #12]
 810136c:	f000 f812 	bl	8101394 <CRC_Handle_8>
 8101370:	6138      	str	r0, [r7, #16]
      break;
 8101372:	e007      	b.n	8101384 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8101374:	687a      	ldr	r2, [r7, #4]
 8101376:	68b9      	ldr	r1, [r7, #8]
 8101378:	68f8      	ldr	r0, [r7, #12]
 810137a:	f000 f899 	bl	81014b0 <CRC_Handle_16>
 810137e:	6138      	str	r0, [r7, #16]
      break;
 8101380:	e000      	b.n	8101384 <HAL_CRC_Calculate+0x88>
      break;
 8101382:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8101384:	68fb      	ldr	r3, [r7, #12]
 8101386:	2201      	movs	r2, #1
 8101388:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 810138a:	693b      	ldr	r3, [r7, #16]
}
 810138c:	4618      	mov	r0, r3
 810138e:	3718      	adds	r7, #24
 8101390:	46bd      	mov	sp, r7
 8101392:	bd80      	pop	{r7, pc}

08101394 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8101394:	b480      	push	{r7}
 8101396:	b089      	sub	sp, #36	; 0x24
 8101398:	af00      	add	r7, sp, #0
 810139a:	60f8      	str	r0, [r7, #12]
 810139c:	60b9      	str	r1, [r7, #8]
 810139e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 81013a0:	2300      	movs	r3, #0
 81013a2:	61fb      	str	r3, [r7, #28]
 81013a4:	e023      	b.n	81013ee <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 81013a6:	69fb      	ldr	r3, [r7, #28]
 81013a8:	009b      	lsls	r3, r3, #2
 81013aa:	68ba      	ldr	r2, [r7, #8]
 81013ac:	4413      	add	r3, r2
 81013ae:	781b      	ldrb	r3, [r3, #0]
 81013b0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 81013b2:	69fb      	ldr	r3, [r7, #28]
 81013b4:	009b      	lsls	r3, r3, #2
 81013b6:	3301      	adds	r3, #1
 81013b8:	68b9      	ldr	r1, [r7, #8]
 81013ba:	440b      	add	r3, r1
 81013bc:	781b      	ldrb	r3, [r3, #0]
 81013be:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 81013c0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 81013c2:	69fb      	ldr	r3, [r7, #28]
 81013c4:	009b      	lsls	r3, r3, #2
 81013c6:	3302      	adds	r3, #2
 81013c8:	68b9      	ldr	r1, [r7, #8]
 81013ca:	440b      	add	r3, r1
 81013cc:	781b      	ldrb	r3, [r3, #0]
 81013ce:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 81013d0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 81013d2:	69fb      	ldr	r3, [r7, #28]
 81013d4:	009b      	lsls	r3, r3, #2
 81013d6:	3303      	adds	r3, #3
 81013d8:	68b9      	ldr	r1, [r7, #8]
 81013da:	440b      	add	r3, r1
 81013dc:	781b      	ldrb	r3, [r3, #0]
 81013de:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 81013e0:	68fb      	ldr	r3, [r7, #12]
 81013e2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 81013e4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 81013e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 81013e8:	69fb      	ldr	r3, [r7, #28]
 81013ea:	3301      	adds	r3, #1
 81013ec:	61fb      	str	r3, [r7, #28]
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	089b      	lsrs	r3, r3, #2
 81013f2:	69fa      	ldr	r2, [r7, #28]
 81013f4:	429a      	cmp	r2, r3
 81013f6:	d3d6      	bcc.n	81013a6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 81013f8:	687b      	ldr	r3, [r7, #4]
 81013fa:	f003 0303 	and.w	r3, r3, #3
 81013fe:	2b00      	cmp	r3, #0
 8101400:	d04d      	beq.n	810149e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8101402:	687b      	ldr	r3, [r7, #4]
 8101404:	f003 0303 	and.w	r3, r3, #3
 8101408:	2b01      	cmp	r3, #1
 810140a:	d107      	bne.n	810141c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 810140c:	69fb      	ldr	r3, [r7, #28]
 810140e:	009b      	lsls	r3, r3, #2
 8101410:	68ba      	ldr	r2, [r7, #8]
 8101412:	4413      	add	r3, r2
 8101414:	68fa      	ldr	r2, [r7, #12]
 8101416:	6812      	ldr	r2, [r2, #0]
 8101418:	781b      	ldrb	r3, [r3, #0]
 810141a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 810141c:	687b      	ldr	r3, [r7, #4]
 810141e:	f003 0303 	and.w	r3, r3, #3
 8101422:	2b02      	cmp	r3, #2
 8101424:	d116      	bne.n	8101454 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8101426:	69fb      	ldr	r3, [r7, #28]
 8101428:	009b      	lsls	r3, r3, #2
 810142a:	68ba      	ldr	r2, [r7, #8]
 810142c:	4413      	add	r3, r2
 810142e:	781b      	ldrb	r3, [r3, #0]
 8101430:	021b      	lsls	r3, r3, #8
 8101432:	b21a      	sxth	r2, r3
 8101434:	69fb      	ldr	r3, [r7, #28]
 8101436:	009b      	lsls	r3, r3, #2
 8101438:	3301      	adds	r3, #1
 810143a:	68b9      	ldr	r1, [r7, #8]
 810143c:	440b      	add	r3, r1
 810143e:	781b      	ldrb	r3, [r3, #0]
 8101440:	b21b      	sxth	r3, r3
 8101442:	4313      	orrs	r3, r2
 8101444:	b21b      	sxth	r3, r3
 8101446:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8101448:	68fb      	ldr	r3, [r7, #12]
 810144a:	681b      	ldr	r3, [r3, #0]
 810144c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 810144e:	697b      	ldr	r3, [r7, #20]
 8101450:	8b7a      	ldrh	r2, [r7, #26]
 8101452:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8101454:	687b      	ldr	r3, [r7, #4]
 8101456:	f003 0303 	and.w	r3, r3, #3
 810145a:	2b03      	cmp	r3, #3
 810145c:	d11f      	bne.n	810149e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 810145e:	69fb      	ldr	r3, [r7, #28]
 8101460:	009b      	lsls	r3, r3, #2
 8101462:	68ba      	ldr	r2, [r7, #8]
 8101464:	4413      	add	r3, r2
 8101466:	781b      	ldrb	r3, [r3, #0]
 8101468:	021b      	lsls	r3, r3, #8
 810146a:	b21a      	sxth	r2, r3
 810146c:	69fb      	ldr	r3, [r7, #28]
 810146e:	009b      	lsls	r3, r3, #2
 8101470:	3301      	adds	r3, #1
 8101472:	68b9      	ldr	r1, [r7, #8]
 8101474:	440b      	add	r3, r1
 8101476:	781b      	ldrb	r3, [r3, #0]
 8101478:	b21b      	sxth	r3, r3
 810147a:	4313      	orrs	r3, r2
 810147c:	b21b      	sxth	r3, r3
 810147e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8101480:	68fb      	ldr	r3, [r7, #12]
 8101482:	681b      	ldr	r3, [r3, #0]
 8101484:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8101486:	697b      	ldr	r3, [r7, #20]
 8101488:	8b7a      	ldrh	r2, [r7, #26]
 810148a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 810148c:	69fb      	ldr	r3, [r7, #28]
 810148e:	009b      	lsls	r3, r3, #2
 8101490:	3302      	adds	r3, #2
 8101492:	68ba      	ldr	r2, [r7, #8]
 8101494:	4413      	add	r3, r2
 8101496:	68fa      	ldr	r2, [r7, #12]
 8101498:	6812      	ldr	r2, [r2, #0]
 810149a:	781b      	ldrb	r3, [r3, #0]
 810149c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 810149e:	68fb      	ldr	r3, [r7, #12]
 81014a0:	681b      	ldr	r3, [r3, #0]
 81014a2:	681b      	ldr	r3, [r3, #0]
}
 81014a4:	4618      	mov	r0, r3
 81014a6:	3724      	adds	r7, #36	; 0x24
 81014a8:	46bd      	mov	sp, r7
 81014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ae:	4770      	bx	lr

081014b0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 81014b0:	b480      	push	{r7}
 81014b2:	b087      	sub	sp, #28
 81014b4:	af00      	add	r7, sp, #0
 81014b6:	60f8      	str	r0, [r7, #12]
 81014b8:	60b9      	str	r1, [r7, #8]
 81014ba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 81014bc:	2300      	movs	r3, #0
 81014be:	617b      	str	r3, [r7, #20]
 81014c0:	e013      	b.n	81014ea <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 81014c2:	697b      	ldr	r3, [r7, #20]
 81014c4:	009b      	lsls	r3, r3, #2
 81014c6:	68ba      	ldr	r2, [r7, #8]
 81014c8:	4413      	add	r3, r2
 81014ca:	881b      	ldrh	r3, [r3, #0]
 81014cc:	041a      	lsls	r2, r3, #16
 81014ce:	697b      	ldr	r3, [r7, #20]
 81014d0:	009b      	lsls	r3, r3, #2
 81014d2:	3302      	adds	r3, #2
 81014d4:	68b9      	ldr	r1, [r7, #8]
 81014d6:	440b      	add	r3, r1
 81014d8:	881b      	ldrh	r3, [r3, #0]
 81014da:	4619      	mov	r1, r3
 81014dc:	68fb      	ldr	r3, [r7, #12]
 81014de:	681b      	ldr	r3, [r3, #0]
 81014e0:	430a      	orrs	r2, r1
 81014e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 81014e4:	697b      	ldr	r3, [r7, #20]
 81014e6:	3301      	adds	r3, #1
 81014e8:	617b      	str	r3, [r7, #20]
 81014ea:	687b      	ldr	r3, [r7, #4]
 81014ec:	085b      	lsrs	r3, r3, #1
 81014ee:	697a      	ldr	r2, [r7, #20]
 81014f0:	429a      	cmp	r2, r3
 81014f2:	d3e6      	bcc.n	81014c2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 81014f4:	687b      	ldr	r3, [r7, #4]
 81014f6:	f003 0301 	and.w	r3, r3, #1
 81014fa:	2b00      	cmp	r3, #0
 81014fc:	d009      	beq.n	8101512 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 81014fe:	68fb      	ldr	r3, [r7, #12]
 8101500:	681b      	ldr	r3, [r3, #0]
 8101502:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8101504:	697b      	ldr	r3, [r7, #20]
 8101506:	009b      	lsls	r3, r3, #2
 8101508:	68ba      	ldr	r2, [r7, #8]
 810150a:	4413      	add	r3, r2
 810150c:	881a      	ldrh	r2, [r3, #0]
 810150e:	693b      	ldr	r3, [r7, #16]
 8101510:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8101512:	68fb      	ldr	r3, [r7, #12]
 8101514:	681b      	ldr	r3, [r3, #0]
 8101516:	681b      	ldr	r3, [r3, #0]
}
 8101518:	4618      	mov	r0, r3
 810151a:	371c      	adds	r7, #28
 810151c:	46bd      	mov	sp, r7
 810151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101522:	4770      	bx	lr

08101524 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8101524:	b480      	push	{r7}
 8101526:	b087      	sub	sp, #28
 8101528:	af00      	add	r7, sp, #0
 810152a:	60f8      	str	r0, [r7, #12]
 810152c:	60b9      	str	r1, [r7, #8]
 810152e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8101530:	2300      	movs	r3, #0
 8101532:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8101534:	231f      	movs	r3, #31
 8101536:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8101538:	bf00      	nop
 810153a:	693b      	ldr	r3, [r7, #16]
 810153c:	1e5a      	subs	r2, r3, #1
 810153e:	613a      	str	r2, [r7, #16]
 8101540:	2b00      	cmp	r3, #0
 8101542:	d009      	beq.n	8101558 <HAL_CRCEx_Polynomial_Set+0x34>
 8101544:	693b      	ldr	r3, [r7, #16]
 8101546:	f003 031f 	and.w	r3, r3, #31
 810154a:	68ba      	ldr	r2, [r7, #8]
 810154c:	fa22 f303 	lsr.w	r3, r2, r3
 8101550:	f003 0301 	and.w	r3, r3, #1
 8101554:	2b00      	cmp	r3, #0
 8101556:	d0f0      	beq.n	810153a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8101558:	687b      	ldr	r3, [r7, #4]
 810155a:	2b18      	cmp	r3, #24
 810155c:	d846      	bhi.n	81015ec <HAL_CRCEx_Polynomial_Set+0xc8>
 810155e:	a201      	add	r2, pc, #4	; (adr r2, 8101564 <HAL_CRCEx_Polynomial_Set+0x40>)
 8101560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101564:	081015f3 	.word	0x081015f3
 8101568:	081015ed 	.word	0x081015ed
 810156c:	081015ed 	.word	0x081015ed
 8101570:	081015ed 	.word	0x081015ed
 8101574:	081015ed 	.word	0x081015ed
 8101578:	081015ed 	.word	0x081015ed
 810157c:	081015ed 	.word	0x081015ed
 8101580:	081015ed 	.word	0x081015ed
 8101584:	081015e1 	.word	0x081015e1
 8101588:	081015ed 	.word	0x081015ed
 810158c:	081015ed 	.word	0x081015ed
 8101590:	081015ed 	.word	0x081015ed
 8101594:	081015ed 	.word	0x081015ed
 8101598:	081015ed 	.word	0x081015ed
 810159c:	081015ed 	.word	0x081015ed
 81015a0:	081015ed 	.word	0x081015ed
 81015a4:	081015d5 	.word	0x081015d5
 81015a8:	081015ed 	.word	0x081015ed
 81015ac:	081015ed 	.word	0x081015ed
 81015b0:	081015ed 	.word	0x081015ed
 81015b4:	081015ed 	.word	0x081015ed
 81015b8:	081015ed 	.word	0x081015ed
 81015bc:	081015ed 	.word	0x081015ed
 81015c0:	081015ed 	.word	0x081015ed
 81015c4:	081015c9 	.word	0x081015c9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 81015c8:	693b      	ldr	r3, [r7, #16]
 81015ca:	2b06      	cmp	r3, #6
 81015cc:	d913      	bls.n	81015f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 81015ce:	2301      	movs	r3, #1
 81015d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 81015d2:	e010      	b.n	81015f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 81015d4:	693b      	ldr	r3, [r7, #16]
 81015d6:	2b07      	cmp	r3, #7
 81015d8:	d90f      	bls.n	81015fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 81015da:	2301      	movs	r3, #1
 81015dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 81015de:	e00c      	b.n	81015fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 81015e0:	693b      	ldr	r3, [r7, #16]
 81015e2:	2b0f      	cmp	r3, #15
 81015e4:	d90b      	bls.n	81015fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 81015e6:	2301      	movs	r3, #1
 81015e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 81015ea:	e008      	b.n	81015fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 81015ec:	2301      	movs	r3, #1
 81015ee:	75fb      	strb	r3, [r7, #23]
      break;
 81015f0:	e006      	b.n	8101600 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 81015f2:	bf00      	nop
 81015f4:	e004      	b.n	8101600 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 81015f6:	bf00      	nop
 81015f8:	e002      	b.n	8101600 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 81015fa:	bf00      	nop
 81015fc:	e000      	b.n	8101600 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 81015fe:	bf00      	nop
  }
  if (status == HAL_OK)
 8101600:	7dfb      	ldrb	r3, [r7, #23]
 8101602:	2b00      	cmp	r3, #0
 8101604:	d10d      	bne.n	8101622 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8101606:	68fb      	ldr	r3, [r7, #12]
 8101608:	681b      	ldr	r3, [r3, #0]
 810160a:	68ba      	ldr	r2, [r7, #8]
 810160c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 810160e:	68fb      	ldr	r3, [r7, #12]
 8101610:	681b      	ldr	r3, [r3, #0]
 8101612:	689b      	ldr	r3, [r3, #8]
 8101614:	f023 0118 	bic.w	r1, r3, #24
 8101618:	68fb      	ldr	r3, [r7, #12]
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	687a      	ldr	r2, [r7, #4]
 810161e:	430a      	orrs	r2, r1
 8101620:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8101622:	7dfb      	ldrb	r3, [r7, #23]
}
 8101624:	4618      	mov	r0, r3
 8101626:	371c      	adds	r7, #28
 8101628:	46bd      	mov	sp, r7
 810162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810162e:	4770      	bx	lr

08101630 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8101630:	b580      	push	{r7, lr}
 8101632:	b084      	sub	sp, #16
 8101634:	af00      	add	r7, sp, #0
 8101636:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8101638:	687b      	ldr	r3, [r7, #4]
 810163a:	2b00      	cmp	r3, #0
 810163c:	d101      	bne.n	8101642 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 810163e:	2301      	movs	r3, #1
 8101640:	e237      	b.n	8101ab2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8101642:	687b      	ldr	r3, [r7, #4]
 8101644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8101648:	b2db      	uxtb	r3, r3
 810164a:	2b02      	cmp	r3, #2
 810164c:	d004      	beq.n	8101658 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 810164e:	687b      	ldr	r3, [r7, #4]
 8101650:	2280      	movs	r2, #128	; 0x80
 8101652:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8101654:	2301      	movs	r3, #1
 8101656:	e22c      	b.n	8101ab2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8101658:	687b      	ldr	r3, [r7, #4]
 810165a:	681b      	ldr	r3, [r3, #0]
 810165c:	4a5c      	ldr	r2, [pc, #368]	; (81017d0 <HAL_DMA_Abort_IT+0x1a0>)
 810165e:	4293      	cmp	r3, r2
 8101660:	d04a      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 8101662:	687b      	ldr	r3, [r7, #4]
 8101664:	681b      	ldr	r3, [r3, #0]
 8101666:	4a5b      	ldr	r2, [pc, #364]	; (81017d4 <HAL_DMA_Abort_IT+0x1a4>)
 8101668:	4293      	cmp	r3, r2
 810166a:	d045      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 810166c:	687b      	ldr	r3, [r7, #4]
 810166e:	681b      	ldr	r3, [r3, #0]
 8101670:	4a59      	ldr	r2, [pc, #356]	; (81017d8 <HAL_DMA_Abort_IT+0x1a8>)
 8101672:	4293      	cmp	r3, r2
 8101674:	d040      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 8101676:	687b      	ldr	r3, [r7, #4]
 8101678:	681b      	ldr	r3, [r3, #0]
 810167a:	4a58      	ldr	r2, [pc, #352]	; (81017dc <HAL_DMA_Abort_IT+0x1ac>)
 810167c:	4293      	cmp	r3, r2
 810167e:	d03b      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 8101680:	687b      	ldr	r3, [r7, #4]
 8101682:	681b      	ldr	r3, [r3, #0]
 8101684:	4a56      	ldr	r2, [pc, #344]	; (81017e0 <HAL_DMA_Abort_IT+0x1b0>)
 8101686:	4293      	cmp	r3, r2
 8101688:	d036      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 810168a:	687b      	ldr	r3, [r7, #4]
 810168c:	681b      	ldr	r3, [r3, #0]
 810168e:	4a55      	ldr	r2, [pc, #340]	; (81017e4 <HAL_DMA_Abort_IT+0x1b4>)
 8101690:	4293      	cmp	r3, r2
 8101692:	d031      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 8101694:	687b      	ldr	r3, [r7, #4]
 8101696:	681b      	ldr	r3, [r3, #0]
 8101698:	4a53      	ldr	r2, [pc, #332]	; (81017e8 <HAL_DMA_Abort_IT+0x1b8>)
 810169a:	4293      	cmp	r3, r2
 810169c:	d02c      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 810169e:	687b      	ldr	r3, [r7, #4]
 81016a0:	681b      	ldr	r3, [r3, #0]
 81016a2:	4a52      	ldr	r2, [pc, #328]	; (81017ec <HAL_DMA_Abort_IT+0x1bc>)
 81016a4:	4293      	cmp	r3, r2
 81016a6:	d027      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 81016a8:	687b      	ldr	r3, [r7, #4]
 81016aa:	681b      	ldr	r3, [r3, #0]
 81016ac:	4a50      	ldr	r2, [pc, #320]	; (81017f0 <HAL_DMA_Abort_IT+0x1c0>)
 81016ae:	4293      	cmp	r3, r2
 81016b0:	d022      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 81016b2:	687b      	ldr	r3, [r7, #4]
 81016b4:	681b      	ldr	r3, [r3, #0]
 81016b6:	4a4f      	ldr	r2, [pc, #316]	; (81017f4 <HAL_DMA_Abort_IT+0x1c4>)
 81016b8:	4293      	cmp	r3, r2
 81016ba:	d01d      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 81016bc:	687b      	ldr	r3, [r7, #4]
 81016be:	681b      	ldr	r3, [r3, #0]
 81016c0:	4a4d      	ldr	r2, [pc, #308]	; (81017f8 <HAL_DMA_Abort_IT+0x1c8>)
 81016c2:	4293      	cmp	r3, r2
 81016c4:	d018      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 81016c6:	687b      	ldr	r3, [r7, #4]
 81016c8:	681b      	ldr	r3, [r3, #0]
 81016ca:	4a4c      	ldr	r2, [pc, #304]	; (81017fc <HAL_DMA_Abort_IT+0x1cc>)
 81016cc:	4293      	cmp	r3, r2
 81016ce:	d013      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 81016d0:	687b      	ldr	r3, [r7, #4]
 81016d2:	681b      	ldr	r3, [r3, #0]
 81016d4:	4a4a      	ldr	r2, [pc, #296]	; (8101800 <HAL_DMA_Abort_IT+0x1d0>)
 81016d6:	4293      	cmp	r3, r2
 81016d8:	d00e      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 81016da:	687b      	ldr	r3, [r7, #4]
 81016dc:	681b      	ldr	r3, [r3, #0]
 81016de:	4a49      	ldr	r2, [pc, #292]	; (8101804 <HAL_DMA_Abort_IT+0x1d4>)
 81016e0:	4293      	cmp	r3, r2
 81016e2:	d009      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 81016e4:	687b      	ldr	r3, [r7, #4]
 81016e6:	681b      	ldr	r3, [r3, #0]
 81016e8:	4a47      	ldr	r2, [pc, #284]	; (8101808 <HAL_DMA_Abort_IT+0x1d8>)
 81016ea:	4293      	cmp	r3, r2
 81016ec:	d004      	beq.n	81016f8 <HAL_DMA_Abort_IT+0xc8>
 81016ee:	687b      	ldr	r3, [r7, #4]
 81016f0:	681b      	ldr	r3, [r3, #0]
 81016f2:	4a46      	ldr	r2, [pc, #280]	; (810180c <HAL_DMA_Abort_IT+0x1dc>)
 81016f4:	4293      	cmp	r3, r2
 81016f6:	d101      	bne.n	81016fc <HAL_DMA_Abort_IT+0xcc>
 81016f8:	2301      	movs	r3, #1
 81016fa:	e000      	b.n	81016fe <HAL_DMA_Abort_IT+0xce>
 81016fc:	2300      	movs	r3, #0
 81016fe:	2b00      	cmp	r3, #0
 8101700:	f000 8086 	beq.w	8101810 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8101704:	687b      	ldr	r3, [r7, #4]
 8101706:	2204      	movs	r2, #4
 8101708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 810170c:	687b      	ldr	r3, [r7, #4]
 810170e:	681b      	ldr	r3, [r3, #0]
 8101710:	4a2f      	ldr	r2, [pc, #188]	; (81017d0 <HAL_DMA_Abort_IT+0x1a0>)
 8101712:	4293      	cmp	r3, r2
 8101714:	d04a      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 8101716:	687b      	ldr	r3, [r7, #4]
 8101718:	681b      	ldr	r3, [r3, #0]
 810171a:	4a2e      	ldr	r2, [pc, #184]	; (81017d4 <HAL_DMA_Abort_IT+0x1a4>)
 810171c:	4293      	cmp	r3, r2
 810171e:	d045      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 8101720:	687b      	ldr	r3, [r7, #4]
 8101722:	681b      	ldr	r3, [r3, #0]
 8101724:	4a2c      	ldr	r2, [pc, #176]	; (81017d8 <HAL_DMA_Abort_IT+0x1a8>)
 8101726:	4293      	cmp	r3, r2
 8101728:	d040      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 810172a:	687b      	ldr	r3, [r7, #4]
 810172c:	681b      	ldr	r3, [r3, #0]
 810172e:	4a2b      	ldr	r2, [pc, #172]	; (81017dc <HAL_DMA_Abort_IT+0x1ac>)
 8101730:	4293      	cmp	r3, r2
 8101732:	d03b      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 8101734:	687b      	ldr	r3, [r7, #4]
 8101736:	681b      	ldr	r3, [r3, #0]
 8101738:	4a29      	ldr	r2, [pc, #164]	; (81017e0 <HAL_DMA_Abort_IT+0x1b0>)
 810173a:	4293      	cmp	r3, r2
 810173c:	d036      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 810173e:	687b      	ldr	r3, [r7, #4]
 8101740:	681b      	ldr	r3, [r3, #0]
 8101742:	4a28      	ldr	r2, [pc, #160]	; (81017e4 <HAL_DMA_Abort_IT+0x1b4>)
 8101744:	4293      	cmp	r3, r2
 8101746:	d031      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 8101748:	687b      	ldr	r3, [r7, #4]
 810174a:	681b      	ldr	r3, [r3, #0]
 810174c:	4a26      	ldr	r2, [pc, #152]	; (81017e8 <HAL_DMA_Abort_IT+0x1b8>)
 810174e:	4293      	cmp	r3, r2
 8101750:	d02c      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 8101752:	687b      	ldr	r3, [r7, #4]
 8101754:	681b      	ldr	r3, [r3, #0]
 8101756:	4a25      	ldr	r2, [pc, #148]	; (81017ec <HAL_DMA_Abort_IT+0x1bc>)
 8101758:	4293      	cmp	r3, r2
 810175a:	d027      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 810175c:	687b      	ldr	r3, [r7, #4]
 810175e:	681b      	ldr	r3, [r3, #0]
 8101760:	4a23      	ldr	r2, [pc, #140]	; (81017f0 <HAL_DMA_Abort_IT+0x1c0>)
 8101762:	4293      	cmp	r3, r2
 8101764:	d022      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 8101766:	687b      	ldr	r3, [r7, #4]
 8101768:	681b      	ldr	r3, [r3, #0]
 810176a:	4a22      	ldr	r2, [pc, #136]	; (81017f4 <HAL_DMA_Abort_IT+0x1c4>)
 810176c:	4293      	cmp	r3, r2
 810176e:	d01d      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 8101770:	687b      	ldr	r3, [r7, #4]
 8101772:	681b      	ldr	r3, [r3, #0]
 8101774:	4a20      	ldr	r2, [pc, #128]	; (81017f8 <HAL_DMA_Abort_IT+0x1c8>)
 8101776:	4293      	cmp	r3, r2
 8101778:	d018      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 810177a:	687b      	ldr	r3, [r7, #4]
 810177c:	681b      	ldr	r3, [r3, #0]
 810177e:	4a1f      	ldr	r2, [pc, #124]	; (81017fc <HAL_DMA_Abort_IT+0x1cc>)
 8101780:	4293      	cmp	r3, r2
 8101782:	d013      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 8101784:	687b      	ldr	r3, [r7, #4]
 8101786:	681b      	ldr	r3, [r3, #0]
 8101788:	4a1d      	ldr	r2, [pc, #116]	; (8101800 <HAL_DMA_Abort_IT+0x1d0>)
 810178a:	4293      	cmp	r3, r2
 810178c:	d00e      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 810178e:	687b      	ldr	r3, [r7, #4]
 8101790:	681b      	ldr	r3, [r3, #0]
 8101792:	4a1c      	ldr	r2, [pc, #112]	; (8101804 <HAL_DMA_Abort_IT+0x1d4>)
 8101794:	4293      	cmp	r3, r2
 8101796:	d009      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 8101798:	687b      	ldr	r3, [r7, #4]
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	4a1a      	ldr	r2, [pc, #104]	; (8101808 <HAL_DMA_Abort_IT+0x1d8>)
 810179e:	4293      	cmp	r3, r2
 81017a0:	d004      	beq.n	81017ac <HAL_DMA_Abort_IT+0x17c>
 81017a2:	687b      	ldr	r3, [r7, #4]
 81017a4:	681b      	ldr	r3, [r3, #0]
 81017a6:	4a19      	ldr	r2, [pc, #100]	; (810180c <HAL_DMA_Abort_IT+0x1dc>)
 81017a8:	4293      	cmp	r3, r2
 81017aa:	d108      	bne.n	81017be <HAL_DMA_Abort_IT+0x18e>
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	681b      	ldr	r3, [r3, #0]
 81017b0:	681a      	ldr	r2, [r3, #0]
 81017b2:	687b      	ldr	r3, [r7, #4]
 81017b4:	681b      	ldr	r3, [r3, #0]
 81017b6:	f022 0201 	bic.w	r2, r2, #1
 81017ba:	601a      	str	r2, [r3, #0]
 81017bc:	e178      	b.n	8101ab0 <HAL_DMA_Abort_IT+0x480>
 81017be:	687b      	ldr	r3, [r7, #4]
 81017c0:	681b      	ldr	r3, [r3, #0]
 81017c2:	681a      	ldr	r2, [r3, #0]
 81017c4:	687b      	ldr	r3, [r7, #4]
 81017c6:	681b      	ldr	r3, [r3, #0]
 81017c8:	f022 0201 	bic.w	r2, r2, #1
 81017cc:	601a      	str	r2, [r3, #0]
 81017ce:	e16f      	b.n	8101ab0 <HAL_DMA_Abort_IT+0x480>
 81017d0:	40020010 	.word	0x40020010
 81017d4:	40020028 	.word	0x40020028
 81017d8:	40020040 	.word	0x40020040
 81017dc:	40020058 	.word	0x40020058
 81017e0:	40020070 	.word	0x40020070
 81017e4:	40020088 	.word	0x40020088
 81017e8:	400200a0 	.word	0x400200a0
 81017ec:	400200b8 	.word	0x400200b8
 81017f0:	40020410 	.word	0x40020410
 81017f4:	40020428 	.word	0x40020428
 81017f8:	40020440 	.word	0x40020440
 81017fc:	40020458 	.word	0x40020458
 8101800:	40020470 	.word	0x40020470
 8101804:	40020488 	.word	0x40020488
 8101808:	400204a0 	.word	0x400204a0
 810180c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8101810:	687b      	ldr	r3, [r7, #4]
 8101812:	681b      	ldr	r3, [r3, #0]
 8101814:	681a      	ldr	r2, [r3, #0]
 8101816:	687b      	ldr	r3, [r7, #4]
 8101818:	681b      	ldr	r3, [r3, #0]
 810181a:	f022 020e 	bic.w	r2, r2, #14
 810181e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8101820:	687b      	ldr	r3, [r7, #4]
 8101822:	681b      	ldr	r3, [r3, #0]
 8101824:	4a6c      	ldr	r2, [pc, #432]	; (81019d8 <HAL_DMA_Abort_IT+0x3a8>)
 8101826:	4293      	cmp	r3, r2
 8101828:	d04a      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 810182a:	687b      	ldr	r3, [r7, #4]
 810182c:	681b      	ldr	r3, [r3, #0]
 810182e:	4a6b      	ldr	r2, [pc, #428]	; (81019dc <HAL_DMA_Abort_IT+0x3ac>)
 8101830:	4293      	cmp	r3, r2
 8101832:	d045      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 8101834:	687b      	ldr	r3, [r7, #4]
 8101836:	681b      	ldr	r3, [r3, #0]
 8101838:	4a69      	ldr	r2, [pc, #420]	; (81019e0 <HAL_DMA_Abort_IT+0x3b0>)
 810183a:	4293      	cmp	r3, r2
 810183c:	d040      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 810183e:	687b      	ldr	r3, [r7, #4]
 8101840:	681b      	ldr	r3, [r3, #0]
 8101842:	4a68      	ldr	r2, [pc, #416]	; (81019e4 <HAL_DMA_Abort_IT+0x3b4>)
 8101844:	4293      	cmp	r3, r2
 8101846:	d03b      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 8101848:	687b      	ldr	r3, [r7, #4]
 810184a:	681b      	ldr	r3, [r3, #0]
 810184c:	4a66      	ldr	r2, [pc, #408]	; (81019e8 <HAL_DMA_Abort_IT+0x3b8>)
 810184e:	4293      	cmp	r3, r2
 8101850:	d036      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 8101852:	687b      	ldr	r3, [r7, #4]
 8101854:	681b      	ldr	r3, [r3, #0]
 8101856:	4a65      	ldr	r2, [pc, #404]	; (81019ec <HAL_DMA_Abort_IT+0x3bc>)
 8101858:	4293      	cmp	r3, r2
 810185a:	d031      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 810185c:	687b      	ldr	r3, [r7, #4]
 810185e:	681b      	ldr	r3, [r3, #0]
 8101860:	4a63      	ldr	r2, [pc, #396]	; (81019f0 <HAL_DMA_Abort_IT+0x3c0>)
 8101862:	4293      	cmp	r3, r2
 8101864:	d02c      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	681b      	ldr	r3, [r3, #0]
 810186a:	4a62      	ldr	r2, [pc, #392]	; (81019f4 <HAL_DMA_Abort_IT+0x3c4>)
 810186c:	4293      	cmp	r3, r2
 810186e:	d027      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 8101870:	687b      	ldr	r3, [r7, #4]
 8101872:	681b      	ldr	r3, [r3, #0]
 8101874:	4a60      	ldr	r2, [pc, #384]	; (81019f8 <HAL_DMA_Abort_IT+0x3c8>)
 8101876:	4293      	cmp	r3, r2
 8101878:	d022      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 810187a:	687b      	ldr	r3, [r7, #4]
 810187c:	681b      	ldr	r3, [r3, #0]
 810187e:	4a5f      	ldr	r2, [pc, #380]	; (81019fc <HAL_DMA_Abort_IT+0x3cc>)
 8101880:	4293      	cmp	r3, r2
 8101882:	d01d      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 8101884:	687b      	ldr	r3, [r7, #4]
 8101886:	681b      	ldr	r3, [r3, #0]
 8101888:	4a5d      	ldr	r2, [pc, #372]	; (8101a00 <HAL_DMA_Abort_IT+0x3d0>)
 810188a:	4293      	cmp	r3, r2
 810188c:	d018      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 810188e:	687b      	ldr	r3, [r7, #4]
 8101890:	681b      	ldr	r3, [r3, #0]
 8101892:	4a5c      	ldr	r2, [pc, #368]	; (8101a04 <HAL_DMA_Abort_IT+0x3d4>)
 8101894:	4293      	cmp	r3, r2
 8101896:	d013      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 8101898:	687b      	ldr	r3, [r7, #4]
 810189a:	681b      	ldr	r3, [r3, #0]
 810189c:	4a5a      	ldr	r2, [pc, #360]	; (8101a08 <HAL_DMA_Abort_IT+0x3d8>)
 810189e:	4293      	cmp	r3, r2
 81018a0:	d00e      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 81018a2:	687b      	ldr	r3, [r7, #4]
 81018a4:	681b      	ldr	r3, [r3, #0]
 81018a6:	4a59      	ldr	r2, [pc, #356]	; (8101a0c <HAL_DMA_Abort_IT+0x3dc>)
 81018a8:	4293      	cmp	r3, r2
 81018aa:	d009      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 81018ac:	687b      	ldr	r3, [r7, #4]
 81018ae:	681b      	ldr	r3, [r3, #0]
 81018b0:	4a57      	ldr	r2, [pc, #348]	; (8101a10 <HAL_DMA_Abort_IT+0x3e0>)
 81018b2:	4293      	cmp	r3, r2
 81018b4:	d004      	beq.n	81018c0 <HAL_DMA_Abort_IT+0x290>
 81018b6:	687b      	ldr	r3, [r7, #4]
 81018b8:	681b      	ldr	r3, [r3, #0]
 81018ba:	4a56      	ldr	r2, [pc, #344]	; (8101a14 <HAL_DMA_Abort_IT+0x3e4>)
 81018bc:	4293      	cmp	r3, r2
 81018be:	d108      	bne.n	81018d2 <HAL_DMA_Abort_IT+0x2a2>
 81018c0:	687b      	ldr	r3, [r7, #4]
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	681a      	ldr	r2, [r3, #0]
 81018c6:	687b      	ldr	r3, [r7, #4]
 81018c8:	681b      	ldr	r3, [r3, #0]
 81018ca:	f022 0201 	bic.w	r2, r2, #1
 81018ce:	601a      	str	r2, [r3, #0]
 81018d0:	e007      	b.n	81018e2 <HAL_DMA_Abort_IT+0x2b2>
 81018d2:	687b      	ldr	r3, [r7, #4]
 81018d4:	681b      	ldr	r3, [r3, #0]
 81018d6:	681a      	ldr	r2, [r3, #0]
 81018d8:	687b      	ldr	r3, [r7, #4]
 81018da:	681b      	ldr	r3, [r3, #0]
 81018dc:	f022 0201 	bic.w	r2, r2, #1
 81018e0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81018e2:	687b      	ldr	r3, [r7, #4]
 81018e4:	681b      	ldr	r3, [r3, #0]
 81018e6:	4a3c      	ldr	r2, [pc, #240]	; (81019d8 <HAL_DMA_Abort_IT+0x3a8>)
 81018e8:	4293      	cmp	r3, r2
 81018ea:	d072      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 81018ec:	687b      	ldr	r3, [r7, #4]
 81018ee:	681b      	ldr	r3, [r3, #0]
 81018f0:	4a3a      	ldr	r2, [pc, #232]	; (81019dc <HAL_DMA_Abort_IT+0x3ac>)
 81018f2:	4293      	cmp	r3, r2
 81018f4:	d06d      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 81018f6:	687b      	ldr	r3, [r7, #4]
 81018f8:	681b      	ldr	r3, [r3, #0]
 81018fa:	4a39      	ldr	r2, [pc, #228]	; (81019e0 <HAL_DMA_Abort_IT+0x3b0>)
 81018fc:	4293      	cmp	r3, r2
 81018fe:	d068      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	681b      	ldr	r3, [r3, #0]
 8101904:	4a37      	ldr	r2, [pc, #220]	; (81019e4 <HAL_DMA_Abort_IT+0x3b4>)
 8101906:	4293      	cmp	r3, r2
 8101908:	d063      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 810190a:	687b      	ldr	r3, [r7, #4]
 810190c:	681b      	ldr	r3, [r3, #0]
 810190e:	4a36      	ldr	r2, [pc, #216]	; (81019e8 <HAL_DMA_Abort_IT+0x3b8>)
 8101910:	4293      	cmp	r3, r2
 8101912:	d05e      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101914:	687b      	ldr	r3, [r7, #4]
 8101916:	681b      	ldr	r3, [r3, #0]
 8101918:	4a34      	ldr	r2, [pc, #208]	; (81019ec <HAL_DMA_Abort_IT+0x3bc>)
 810191a:	4293      	cmp	r3, r2
 810191c:	d059      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 810191e:	687b      	ldr	r3, [r7, #4]
 8101920:	681b      	ldr	r3, [r3, #0]
 8101922:	4a33      	ldr	r2, [pc, #204]	; (81019f0 <HAL_DMA_Abort_IT+0x3c0>)
 8101924:	4293      	cmp	r3, r2
 8101926:	d054      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101928:	687b      	ldr	r3, [r7, #4]
 810192a:	681b      	ldr	r3, [r3, #0]
 810192c:	4a31      	ldr	r2, [pc, #196]	; (81019f4 <HAL_DMA_Abort_IT+0x3c4>)
 810192e:	4293      	cmp	r3, r2
 8101930:	d04f      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101932:	687b      	ldr	r3, [r7, #4]
 8101934:	681b      	ldr	r3, [r3, #0]
 8101936:	4a30      	ldr	r2, [pc, #192]	; (81019f8 <HAL_DMA_Abort_IT+0x3c8>)
 8101938:	4293      	cmp	r3, r2
 810193a:	d04a      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 810193c:	687b      	ldr	r3, [r7, #4]
 810193e:	681b      	ldr	r3, [r3, #0]
 8101940:	4a2e      	ldr	r2, [pc, #184]	; (81019fc <HAL_DMA_Abort_IT+0x3cc>)
 8101942:	4293      	cmp	r3, r2
 8101944:	d045      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101946:	687b      	ldr	r3, [r7, #4]
 8101948:	681b      	ldr	r3, [r3, #0]
 810194a:	4a2d      	ldr	r2, [pc, #180]	; (8101a00 <HAL_DMA_Abort_IT+0x3d0>)
 810194c:	4293      	cmp	r3, r2
 810194e:	d040      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101950:	687b      	ldr	r3, [r7, #4]
 8101952:	681b      	ldr	r3, [r3, #0]
 8101954:	4a2b      	ldr	r2, [pc, #172]	; (8101a04 <HAL_DMA_Abort_IT+0x3d4>)
 8101956:	4293      	cmp	r3, r2
 8101958:	d03b      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 810195a:	687b      	ldr	r3, [r7, #4]
 810195c:	681b      	ldr	r3, [r3, #0]
 810195e:	4a2a      	ldr	r2, [pc, #168]	; (8101a08 <HAL_DMA_Abort_IT+0x3d8>)
 8101960:	4293      	cmp	r3, r2
 8101962:	d036      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101964:	687b      	ldr	r3, [r7, #4]
 8101966:	681b      	ldr	r3, [r3, #0]
 8101968:	4a28      	ldr	r2, [pc, #160]	; (8101a0c <HAL_DMA_Abort_IT+0x3dc>)
 810196a:	4293      	cmp	r3, r2
 810196c:	d031      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 810196e:	687b      	ldr	r3, [r7, #4]
 8101970:	681b      	ldr	r3, [r3, #0]
 8101972:	4a27      	ldr	r2, [pc, #156]	; (8101a10 <HAL_DMA_Abort_IT+0x3e0>)
 8101974:	4293      	cmp	r3, r2
 8101976:	d02c      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101978:	687b      	ldr	r3, [r7, #4]
 810197a:	681b      	ldr	r3, [r3, #0]
 810197c:	4a25      	ldr	r2, [pc, #148]	; (8101a14 <HAL_DMA_Abort_IT+0x3e4>)
 810197e:	4293      	cmp	r3, r2
 8101980:	d027      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101982:	687b      	ldr	r3, [r7, #4]
 8101984:	681b      	ldr	r3, [r3, #0]
 8101986:	4a24      	ldr	r2, [pc, #144]	; (8101a18 <HAL_DMA_Abort_IT+0x3e8>)
 8101988:	4293      	cmp	r3, r2
 810198a:	d022      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	681b      	ldr	r3, [r3, #0]
 8101990:	4a22      	ldr	r2, [pc, #136]	; (8101a1c <HAL_DMA_Abort_IT+0x3ec>)
 8101992:	4293      	cmp	r3, r2
 8101994:	d01d      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 8101996:	687b      	ldr	r3, [r7, #4]
 8101998:	681b      	ldr	r3, [r3, #0]
 810199a:	4a21      	ldr	r2, [pc, #132]	; (8101a20 <HAL_DMA_Abort_IT+0x3f0>)
 810199c:	4293      	cmp	r3, r2
 810199e:	d018      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 81019a0:	687b      	ldr	r3, [r7, #4]
 81019a2:	681b      	ldr	r3, [r3, #0]
 81019a4:	4a1f      	ldr	r2, [pc, #124]	; (8101a24 <HAL_DMA_Abort_IT+0x3f4>)
 81019a6:	4293      	cmp	r3, r2
 81019a8:	d013      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	681b      	ldr	r3, [r3, #0]
 81019ae:	4a1e      	ldr	r2, [pc, #120]	; (8101a28 <HAL_DMA_Abort_IT+0x3f8>)
 81019b0:	4293      	cmp	r3, r2
 81019b2:	d00e      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	681b      	ldr	r3, [r3, #0]
 81019b8:	4a1c      	ldr	r2, [pc, #112]	; (8101a2c <HAL_DMA_Abort_IT+0x3fc>)
 81019ba:	4293      	cmp	r3, r2
 81019bc:	d009      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 81019be:	687b      	ldr	r3, [r7, #4]
 81019c0:	681b      	ldr	r3, [r3, #0]
 81019c2:	4a1b      	ldr	r2, [pc, #108]	; (8101a30 <HAL_DMA_Abort_IT+0x400>)
 81019c4:	4293      	cmp	r3, r2
 81019c6:	d004      	beq.n	81019d2 <HAL_DMA_Abort_IT+0x3a2>
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	681b      	ldr	r3, [r3, #0]
 81019cc:	4a19      	ldr	r2, [pc, #100]	; (8101a34 <HAL_DMA_Abort_IT+0x404>)
 81019ce:	4293      	cmp	r3, r2
 81019d0:	d132      	bne.n	8101a38 <HAL_DMA_Abort_IT+0x408>
 81019d2:	2301      	movs	r3, #1
 81019d4:	e031      	b.n	8101a3a <HAL_DMA_Abort_IT+0x40a>
 81019d6:	bf00      	nop
 81019d8:	40020010 	.word	0x40020010
 81019dc:	40020028 	.word	0x40020028
 81019e0:	40020040 	.word	0x40020040
 81019e4:	40020058 	.word	0x40020058
 81019e8:	40020070 	.word	0x40020070
 81019ec:	40020088 	.word	0x40020088
 81019f0:	400200a0 	.word	0x400200a0
 81019f4:	400200b8 	.word	0x400200b8
 81019f8:	40020410 	.word	0x40020410
 81019fc:	40020428 	.word	0x40020428
 8101a00:	40020440 	.word	0x40020440
 8101a04:	40020458 	.word	0x40020458
 8101a08:	40020470 	.word	0x40020470
 8101a0c:	40020488 	.word	0x40020488
 8101a10:	400204a0 	.word	0x400204a0
 8101a14:	400204b8 	.word	0x400204b8
 8101a18:	58025408 	.word	0x58025408
 8101a1c:	5802541c 	.word	0x5802541c
 8101a20:	58025430 	.word	0x58025430
 8101a24:	58025444 	.word	0x58025444
 8101a28:	58025458 	.word	0x58025458
 8101a2c:	5802546c 	.word	0x5802546c
 8101a30:	58025480 	.word	0x58025480
 8101a34:	58025494 	.word	0x58025494
 8101a38:	2300      	movs	r3, #0
 8101a3a:	2b00      	cmp	r3, #0
 8101a3c:	d028      	beq.n	8101a90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101a42:	681a      	ldr	r2, [r3, #0]
 8101a44:	687b      	ldr	r3, [r7, #4]
 8101a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101a4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8101a4e:	687b      	ldr	r3, [r7, #4]
 8101a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101a52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8101a54:	687b      	ldr	r3, [r7, #4]
 8101a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8101a58:	f003 031f 	and.w	r3, r3, #31
 8101a5c:	2201      	movs	r2, #1
 8101a5e:	409a      	lsls	r2, r3
 8101a60:	68fb      	ldr	r3, [r7, #12]
 8101a62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8101a64:	687b      	ldr	r3, [r7, #4]
 8101a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101a68:	687a      	ldr	r2, [r7, #4]
 8101a6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8101a6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8101a6e:	687b      	ldr	r3, [r7, #4]
 8101a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101a72:	2b00      	cmp	r3, #0
 8101a74:	d00c      	beq.n	8101a90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101a7a:	681a      	ldr	r2, [r3, #0]
 8101a7c:	687b      	ldr	r3, [r7, #4]
 8101a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8101a84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8101a86:	687b      	ldr	r3, [r7, #4]
 8101a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101a8a:	687a      	ldr	r2, [r7, #4]
 8101a8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8101a8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	2201      	movs	r2, #1
 8101a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8101a98:	687b      	ldr	r3, [r7, #4]
 8101a9a:	2200      	movs	r2, #0
 8101a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8101aa0:	687b      	ldr	r3, [r7, #4]
 8101aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101aa4:	2b00      	cmp	r3, #0
 8101aa6:	d003      	beq.n	8101ab0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101aac:	6878      	ldr	r0, [r7, #4]
 8101aae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8101ab0:	2300      	movs	r3, #0
}
 8101ab2:	4618      	mov	r0, r3
 8101ab4:	3710      	adds	r7, #16
 8101ab6:	46bd      	mov	sp, r7
 8101ab8:	bd80      	pop	{r7, pc}
 8101aba:	bf00      	nop

08101abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101abc:	b480      	push	{r7}
 8101abe:	b089      	sub	sp, #36	; 0x24
 8101ac0:	af00      	add	r7, sp, #0
 8101ac2:	6078      	str	r0, [r7, #4]
 8101ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101ac6:	2300      	movs	r3, #0
 8101ac8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101aca:	4b89      	ldr	r3, [pc, #548]	; (8101cf0 <HAL_GPIO_Init+0x234>)
 8101acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101ace:	e194      	b.n	8101dfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101ad0:	683b      	ldr	r3, [r7, #0]
 8101ad2:	681a      	ldr	r2, [r3, #0]
 8101ad4:	2101      	movs	r1, #1
 8101ad6:	69fb      	ldr	r3, [r7, #28]
 8101ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8101adc:	4013      	ands	r3, r2
 8101ade:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101ae0:	693b      	ldr	r3, [r7, #16]
 8101ae2:	2b00      	cmp	r3, #0
 8101ae4:	f000 8186 	beq.w	8101df4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101ae8:	683b      	ldr	r3, [r7, #0]
 8101aea:	685b      	ldr	r3, [r3, #4]
 8101aec:	f003 0303 	and.w	r3, r3, #3
 8101af0:	2b01      	cmp	r3, #1
 8101af2:	d005      	beq.n	8101b00 <HAL_GPIO_Init+0x44>
 8101af4:	683b      	ldr	r3, [r7, #0]
 8101af6:	685b      	ldr	r3, [r3, #4]
 8101af8:	f003 0303 	and.w	r3, r3, #3
 8101afc:	2b02      	cmp	r3, #2
 8101afe:	d130      	bne.n	8101b62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101b00:	687b      	ldr	r3, [r7, #4]
 8101b02:	689b      	ldr	r3, [r3, #8]
 8101b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101b06:	69fb      	ldr	r3, [r7, #28]
 8101b08:	005b      	lsls	r3, r3, #1
 8101b0a:	2203      	movs	r2, #3
 8101b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8101b10:	43db      	mvns	r3, r3
 8101b12:	69ba      	ldr	r2, [r7, #24]
 8101b14:	4013      	ands	r3, r2
 8101b16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101b18:	683b      	ldr	r3, [r7, #0]
 8101b1a:	68da      	ldr	r2, [r3, #12]
 8101b1c:	69fb      	ldr	r3, [r7, #28]
 8101b1e:	005b      	lsls	r3, r3, #1
 8101b20:	fa02 f303 	lsl.w	r3, r2, r3
 8101b24:	69ba      	ldr	r2, [r7, #24]
 8101b26:	4313      	orrs	r3, r2
 8101b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101b2a:	687b      	ldr	r3, [r7, #4]
 8101b2c:	69ba      	ldr	r2, [r7, #24]
 8101b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101b30:	687b      	ldr	r3, [r7, #4]
 8101b32:	685b      	ldr	r3, [r3, #4]
 8101b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101b36:	2201      	movs	r2, #1
 8101b38:	69fb      	ldr	r3, [r7, #28]
 8101b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8101b3e:	43db      	mvns	r3, r3
 8101b40:	69ba      	ldr	r2, [r7, #24]
 8101b42:	4013      	ands	r3, r2
 8101b44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101b46:	683b      	ldr	r3, [r7, #0]
 8101b48:	685b      	ldr	r3, [r3, #4]
 8101b4a:	091b      	lsrs	r3, r3, #4
 8101b4c:	f003 0201 	and.w	r2, r3, #1
 8101b50:	69fb      	ldr	r3, [r7, #28]
 8101b52:	fa02 f303 	lsl.w	r3, r2, r3
 8101b56:	69ba      	ldr	r2, [r7, #24]
 8101b58:	4313      	orrs	r3, r2
 8101b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	69ba      	ldr	r2, [r7, #24]
 8101b60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101b62:	683b      	ldr	r3, [r7, #0]
 8101b64:	685b      	ldr	r3, [r3, #4]
 8101b66:	f003 0303 	and.w	r3, r3, #3
 8101b6a:	2b03      	cmp	r3, #3
 8101b6c:	d017      	beq.n	8101b9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	68db      	ldr	r3, [r3, #12]
 8101b72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101b74:	69fb      	ldr	r3, [r7, #28]
 8101b76:	005b      	lsls	r3, r3, #1
 8101b78:	2203      	movs	r2, #3
 8101b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8101b7e:	43db      	mvns	r3, r3
 8101b80:	69ba      	ldr	r2, [r7, #24]
 8101b82:	4013      	ands	r3, r2
 8101b84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101b86:	683b      	ldr	r3, [r7, #0]
 8101b88:	689a      	ldr	r2, [r3, #8]
 8101b8a:	69fb      	ldr	r3, [r7, #28]
 8101b8c:	005b      	lsls	r3, r3, #1
 8101b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8101b92:	69ba      	ldr	r2, [r7, #24]
 8101b94:	4313      	orrs	r3, r2
 8101b96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101b98:	687b      	ldr	r3, [r7, #4]
 8101b9a:	69ba      	ldr	r2, [r7, #24]
 8101b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101b9e:	683b      	ldr	r3, [r7, #0]
 8101ba0:	685b      	ldr	r3, [r3, #4]
 8101ba2:	f003 0303 	and.w	r3, r3, #3
 8101ba6:	2b02      	cmp	r3, #2
 8101ba8:	d123      	bne.n	8101bf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101baa:	69fb      	ldr	r3, [r7, #28]
 8101bac:	08da      	lsrs	r2, r3, #3
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	3208      	adds	r2, #8
 8101bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101bb8:	69fb      	ldr	r3, [r7, #28]
 8101bba:	f003 0307 	and.w	r3, r3, #7
 8101bbe:	009b      	lsls	r3, r3, #2
 8101bc0:	220f      	movs	r2, #15
 8101bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8101bc6:	43db      	mvns	r3, r3
 8101bc8:	69ba      	ldr	r2, [r7, #24]
 8101bca:	4013      	ands	r3, r2
 8101bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101bce:	683b      	ldr	r3, [r7, #0]
 8101bd0:	691a      	ldr	r2, [r3, #16]
 8101bd2:	69fb      	ldr	r3, [r7, #28]
 8101bd4:	f003 0307 	and.w	r3, r3, #7
 8101bd8:	009b      	lsls	r3, r3, #2
 8101bda:	fa02 f303 	lsl.w	r3, r2, r3
 8101bde:	69ba      	ldr	r2, [r7, #24]
 8101be0:	4313      	orrs	r3, r2
 8101be2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101be4:	69fb      	ldr	r3, [r7, #28]
 8101be6:	08da      	lsrs	r2, r3, #3
 8101be8:	687b      	ldr	r3, [r7, #4]
 8101bea:	3208      	adds	r2, #8
 8101bec:	69b9      	ldr	r1, [r7, #24]
 8101bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	681b      	ldr	r3, [r3, #0]
 8101bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101bf8:	69fb      	ldr	r3, [r7, #28]
 8101bfa:	005b      	lsls	r3, r3, #1
 8101bfc:	2203      	movs	r2, #3
 8101bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8101c02:	43db      	mvns	r3, r3
 8101c04:	69ba      	ldr	r2, [r7, #24]
 8101c06:	4013      	ands	r3, r2
 8101c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101c0a:	683b      	ldr	r3, [r7, #0]
 8101c0c:	685b      	ldr	r3, [r3, #4]
 8101c0e:	f003 0203 	and.w	r2, r3, #3
 8101c12:	69fb      	ldr	r3, [r7, #28]
 8101c14:	005b      	lsls	r3, r3, #1
 8101c16:	fa02 f303 	lsl.w	r3, r2, r3
 8101c1a:	69ba      	ldr	r2, [r7, #24]
 8101c1c:	4313      	orrs	r3, r2
 8101c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	69ba      	ldr	r2, [r7, #24]
 8101c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101c26:	683b      	ldr	r3, [r7, #0]
 8101c28:	685b      	ldr	r3, [r3, #4]
 8101c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101c2e:	2b00      	cmp	r3, #0
 8101c30:	f000 80e0 	beq.w	8101df4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101c34:	4b2f      	ldr	r3, [pc, #188]	; (8101cf4 <HAL_GPIO_Init+0x238>)
 8101c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c3a:	4a2e      	ldr	r2, [pc, #184]	; (8101cf4 <HAL_GPIO_Init+0x238>)
 8101c3c:	f043 0302 	orr.w	r3, r3, #2
 8101c40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101c44:	4b2b      	ldr	r3, [pc, #172]	; (8101cf4 <HAL_GPIO_Init+0x238>)
 8101c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c4a:	f003 0302 	and.w	r3, r3, #2
 8101c4e:	60fb      	str	r3, [r7, #12]
 8101c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101c52:	4a29      	ldr	r2, [pc, #164]	; (8101cf8 <HAL_GPIO_Init+0x23c>)
 8101c54:	69fb      	ldr	r3, [r7, #28]
 8101c56:	089b      	lsrs	r3, r3, #2
 8101c58:	3302      	adds	r3, #2
 8101c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101c60:	69fb      	ldr	r3, [r7, #28]
 8101c62:	f003 0303 	and.w	r3, r3, #3
 8101c66:	009b      	lsls	r3, r3, #2
 8101c68:	220f      	movs	r2, #15
 8101c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8101c6e:	43db      	mvns	r3, r3
 8101c70:	69ba      	ldr	r2, [r7, #24]
 8101c72:	4013      	ands	r3, r2
 8101c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	4a20      	ldr	r2, [pc, #128]	; (8101cfc <HAL_GPIO_Init+0x240>)
 8101c7a:	4293      	cmp	r3, r2
 8101c7c:	d052      	beq.n	8101d24 <HAL_GPIO_Init+0x268>
 8101c7e:	687b      	ldr	r3, [r7, #4]
 8101c80:	4a1f      	ldr	r2, [pc, #124]	; (8101d00 <HAL_GPIO_Init+0x244>)
 8101c82:	4293      	cmp	r3, r2
 8101c84:	d031      	beq.n	8101cea <HAL_GPIO_Init+0x22e>
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	4a1e      	ldr	r2, [pc, #120]	; (8101d04 <HAL_GPIO_Init+0x248>)
 8101c8a:	4293      	cmp	r3, r2
 8101c8c:	d02b      	beq.n	8101ce6 <HAL_GPIO_Init+0x22a>
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	4a1d      	ldr	r2, [pc, #116]	; (8101d08 <HAL_GPIO_Init+0x24c>)
 8101c92:	4293      	cmp	r3, r2
 8101c94:	d025      	beq.n	8101ce2 <HAL_GPIO_Init+0x226>
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	4a1c      	ldr	r2, [pc, #112]	; (8101d0c <HAL_GPIO_Init+0x250>)
 8101c9a:	4293      	cmp	r3, r2
 8101c9c:	d01f      	beq.n	8101cde <HAL_GPIO_Init+0x222>
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	4a1b      	ldr	r2, [pc, #108]	; (8101d10 <HAL_GPIO_Init+0x254>)
 8101ca2:	4293      	cmp	r3, r2
 8101ca4:	d019      	beq.n	8101cda <HAL_GPIO_Init+0x21e>
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	4a1a      	ldr	r2, [pc, #104]	; (8101d14 <HAL_GPIO_Init+0x258>)
 8101caa:	4293      	cmp	r3, r2
 8101cac:	d013      	beq.n	8101cd6 <HAL_GPIO_Init+0x21a>
 8101cae:	687b      	ldr	r3, [r7, #4]
 8101cb0:	4a19      	ldr	r2, [pc, #100]	; (8101d18 <HAL_GPIO_Init+0x25c>)
 8101cb2:	4293      	cmp	r3, r2
 8101cb4:	d00d      	beq.n	8101cd2 <HAL_GPIO_Init+0x216>
 8101cb6:	687b      	ldr	r3, [r7, #4]
 8101cb8:	4a18      	ldr	r2, [pc, #96]	; (8101d1c <HAL_GPIO_Init+0x260>)
 8101cba:	4293      	cmp	r3, r2
 8101cbc:	d007      	beq.n	8101cce <HAL_GPIO_Init+0x212>
 8101cbe:	687b      	ldr	r3, [r7, #4]
 8101cc0:	4a17      	ldr	r2, [pc, #92]	; (8101d20 <HAL_GPIO_Init+0x264>)
 8101cc2:	4293      	cmp	r3, r2
 8101cc4:	d101      	bne.n	8101cca <HAL_GPIO_Init+0x20e>
 8101cc6:	2309      	movs	r3, #9
 8101cc8:	e02d      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101cca:	230a      	movs	r3, #10
 8101ccc:	e02b      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101cce:	2308      	movs	r3, #8
 8101cd0:	e029      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101cd2:	2307      	movs	r3, #7
 8101cd4:	e027      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101cd6:	2306      	movs	r3, #6
 8101cd8:	e025      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101cda:	2305      	movs	r3, #5
 8101cdc:	e023      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101cde:	2304      	movs	r3, #4
 8101ce0:	e021      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101ce2:	2303      	movs	r3, #3
 8101ce4:	e01f      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101ce6:	2302      	movs	r3, #2
 8101ce8:	e01d      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101cea:	2301      	movs	r3, #1
 8101cec:	e01b      	b.n	8101d26 <HAL_GPIO_Init+0x26a>
 8101cee:	bf00      	nop
 8101cf0:	580000c0 	.word	0x580000c0
 8101cf4:	58024400 	.word	0x58024400
 8101cf8:	58000400 	.word	0x58000400
 8101cfc:	58020000 	.word	0x58020000
 8101d00:	58020400 	.word	0x58020400
 8101d04:	58020800 	.word	0x58020800
 8101d08:	58020c00 	.word	0x58020c00
 8101d0c:	58021000 	.word	0x58021000
 8101d10:	58021400 	.word	0x58021400
 8101d14:	58021800 	.word	0x58021800
 8101d18:	58021c00 	.word	0x58021c00
 8101d1c:	58022000 	.word	0x58022000
 8101d20:	58022400 	.word	0x58022400
 8101d24:	2300      	movs	r3, #0
 8101d26:	69fa      	ldr	r2, [r7, #28]
 8101d28:	f002 0203 	and.w	r2, r2, #3
 8101d2c:	0092      	lsls	r2, r2, #2
 8101d2e:	4093      	lsls	r3, r2
 8101d30:	69ba      	ldr	r2, [r7, #24]
 8101d32:	4313      	orrs	r3, r2
 8101d34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101d36:	4938      	ldr	r1, [pc, #224]	; (8101e18 <HAL_GPIO_Init+0x35c>)
 8101d38:	69fb      	ldr	r3, [r7, #28]
 8101d3a:	089b      	lsrs	r3, r3, #2
 8101d3c:	3302      	adds	r3, #2
 8101d3e:	69ba      	ldr	r2, [r7, #24]
 8101d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101d4c:	693b      	ldr	r3, [r7, #16]
 8101d4e:	43db      	mvns	r3, r3
 8101d50:	69ba      	ldr	r2, [r7, #24]
 8101d52:	4013      	ands	r3, r2
 8101d54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101d56:	683b      	ldr	r3, [r7, #0]
 8101d58:	685b      	ldr	r3, [r3, #4]
 8101d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101d5e:	2b00      	cmp	r3, #0
 8101d60:	d003      	beq.n	8101d6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101d62:	69ba      	ldr	r2, [r7, #24]
 8101d64:	693b      	ldr	r3, [r7, #16]
 8101d66:	4313      	orrs	r3, r2
 8101d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101d6e:	69bb      	ldr	r3, [r7, #24]
 8101d70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101d76:	685b      	ldr	r3, [r3, #4]
 8101d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101d7a:	693b      	ldr	r3, [r7, #16]
 8101d7c:	43db      	mvns	r3, r3
 8101d7e:	69ba      	ldr	r2, [r7, #24]
 8101d80:	4013      	ands	r3, r2
 8101d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101d84:	683b      	ldr	r3, [r7, #0]
 8101d86:	685b      	ldr	r3, [r3, #4]
 8101d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101d8c:	2b00      	cmp	r3, #0
 8101d8e:	d003      	beq.n	8101d98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101d90:	69ba      	ldr	r2, [r7, #24]
 8101d92:	693b      	ldr	r3, [r7, #16]
 8101d94:	4313      	orrs	r3, r2
 8101d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101d9c:	69bb      	ldr	r3, [r7, #24]
 8101d9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101da0:	697b      	ldr	r3, [r7, #20]
 8101da2:	685b      	ldr	r3, [r3, #4]
 8101da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101da6:	693b      	ldr	r3, [r7, #16]
 8101da8:	43db      	mvns	r3, r3
 8101daa:	69ba      	ldr	r2, [r7, #24]
 8101dac:	4013      	ands	r3, r2
 8101dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101db0:	683b      	ldr	r3, [r7, #0]
 8101db2:	685b      	ldr	r3, [r3, #4]
 8101db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101db8:	2b00      	cmp	r3, #0
 8101dba:	d003      	beq.n	8101dc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101dbc:	69ba      	ldr	r2, [r7, #24]
 8101dbe:	693b      	ldr	r3, [r7, #16]
 8101dc0:	4313      	orrs	r3, r2
 8101dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101dc4:	697b      	ldr	r3, [r7, #20]
 8101dc6:	69ba      	ldr	r2, [r7, #24]
 8101dc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101dca:	697b      	ldr	r3, [r7, #20]
 8101dcc:	681b      	ldr	r3, [r3, #0]
 8101dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101dd0:	693b      	ldr	r3, [r7, #16]
 8101dd2:	43db      	mvns	r3, r3
 8101dd4:	69ba      	ldr	r2, [r7, #24]
 8101dd6:	4013      	ands	r3, r2
 8101dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101dda:	683b      	ldr	r3, [r7, #0]
 8101ddc:	685b      	ldr	r3, [r3, #4]
 8101dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101de2:	2b00      	cmp	r3, #0
 8101de4:	d003      	beq.n	8101dee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101de6:	69ba      	ldr	r2, [r7, #24]
 8101de8:	693b      	ldr	r3, [r7, #16]
 8101dea:	4313      	orrs	r3, r2
 8101dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101dee:	697b      	ldr	r3, [r7, #20]
 8101df0:	69ba      	ldr	r2, [r7, #24]
 8101df2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101df4:	69fb      	ldr	r3, [r7, #28]
 8101df6:	3301      	adds	r3, #1
 8101df8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101dfa:	683b      	ldr	r3, [r7, #0]
 8101dfc:	681a      	ldr	r2, [r3, #0]
 8101dfe:	69fb      	ldr	r3, [r7, #28]
 8101e00:	fa22 f303 	lsr.w	r3, r2, r3
 8101e04:	2b00      	cmp	r3, #0
 8101e06:	f47f ae63 	bne.w	8101ad0 <HAL_GPIO_Init+0x14>
  }
}
 8101e0a:	bf00      	nop
 8101e0c:	bf00      	nop
 8101e0e:	3724      	adds	r7, #36	; 0x24
 8101e10:	46bd      	mov	sp, r7
 8101e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e16:	4770      	bx	lr
 8101e18:	58000400 	.word	0x58000400

08101e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101e1c:	b480      	push	{r7}
 8101e1e:	b083      	sub	sp, #12
 8101e20:	af00      	add	r7, sp, #0
 8101e22:	6078      	str	r0, [r7, #4]
 8101e24:	460b      	mov	r3, r1
 8101e26:	807b      	strh	r3, [r7, #2]
 8101e28:	4613      	mov	r3, r2
 8101e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101e2c:	787b      	ldrb	r3, [r7, #1]
 8101e2e:	2b00      	cmp	r3, #0
 8101e30:	d003      	beq.n	8101e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101e32:	887a      	ldrh	r2, [r7, #2]
 8101e34:	687b      	ldr	r3, [r7, #4]
 8101e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101e38:	e003      	b.n	8101e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101e3a:	887b      	ldrh	r3, [r7, #2]
 8101e3c:	041a      	lsls	r2, r3, #16
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	619a      	str	r2, [r3, #24]
}
 8101e42:	bf00      	nop
 8101e44:	370c      	adds	r7, #12
 8101e46:	46bd      	mov	sp, r7
 8101e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e4c:	4770      	bx	lr
	...

08101e50 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101e50:	b480      	push	{r7}
 8101e52:	b083      	sub	sp, #12
 8101e54:	af00      	add	r7, sp, #0
 8101e56:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101e58:	4b05      	ldr	r3, [pc, #20]	; (8101e70 <HAL_HSEM_ActivateNotification+0x20>)
 8101e5a:	681a      	ldr	r2, [r3, #0]
 8101e5c:	4904      	ldr	r1, [pc, #16]	; (8101e70 <HAL_HSEM_ActivateNotification+0x20>)
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	4313      	orrs	r3, r2
 8101e62:	600b      	str	r3, [r1, #0]
#endif
}
 8101e64:	bf00      	nop
 8101e66:	370c      	adds	r7, #12
 8101e68:	46bd      	mov	sp, r7
 8101e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e6e:	4770      	bx	lr
 8101e70:	58026510 	.word	0x58026510

08101e74 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101e74:	b580      	push	{r7, lr}
 8101e76:	b084      	sub	sp, #16
 8101e78:	af00      	add	r7, sp, #0
 8101e7a:	60f8      	str	r0, [r7, #12]
 8101e7c:	460b      	mov	r3, r1
 8101e7e:	607a      	str	r2, [r7, #4]
 8101e80:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101e82:	4b37      	ldr	r3, [pc, #220]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e84:	681b      	ldr	r3, [r3, #0]
 8101e86:	f023 0201 	bic.w	r2, r3, #1
 8101e8a:	4935      	ldr	r1, [pc, #212]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e8c:	68fb      	ldr	r3, [r7, #12]
 8101e8e:	4313      	orrs	r3, r2
 8101e90:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	2b00      	cmp	r3, #0
 8101e96:	d123      	bne.n	8101ee0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101e98:	f7ff f9b8 	bl	810120c <HAL_GetCurrentCPUID>
 8101e9c:	4603      	mov	r3, r0
 8101e9e:	2b03      	cmp	r3, #3
 8101ea0:	d158      	bne.n	8101f54 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101ea2:	4b2f      	ldr	r3, [pc, #188]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ea4:	691b      	ldr	r3, [r3, #16]
 8101ea6:	4a2e      	ldr	r2, [pc, #184]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ea8:	f023 0301 	bic.w	r3, r3, #1
 8101eac:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101eae:	4b2d      	ldr	r3, [pc, #180]	; (8101f64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101eb0:	691b      	ldr	r3, [r3, #16]
 8101eb2:	4a2c      	ldr	r2, [pc, #176]	; (8101f64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101eb4:	f043 0304 	orr.w	r3, r3, #4
 8101eb8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101eba:	f3bf 8f4f 	dsb	sy
}
 8101ebe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101ec0:	f3bf 8f6f 	isb	sy
}
 8101ec4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101ec6:	7afb      	ldrb	r3, [r7, #11]
 8101ec8:	2b01      	cmp	r3, #1
 8101eca:	d101      	bne.n	8101ed0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101ecc:	bf30      	wfi
 8101ece:	e000      	b.n	8101ed2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101ed0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101ed2:	4b24      	ldr	r3, [pc, #144]	; (8101f64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ed4:	691b      	ldr	r3, [r3, #16]
 8101ed6:	4a23      	ldr	r2, [pc, #140]	; (8101f64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ed8:	f023 0304 	bic.w	r3, r3, #4
 8101edc:	6113      	str	r3, [r2, #16]
 8101ede:	e03c      	b.n	8101f5a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101ee0:	687b      	ldr	r3, [r7, #4]
 8101ee2:	2b01      	cmp	r3, #1
 8101ee4:	d123      	bne.n	8101f2e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101ee6:	f7ff f991 	bl	810120c <HAL_GetCurrentCPUID>
 8101eea:	4603      	mov	r3, r0
 8101eec:	2b01      	cmp	r3, #1
 8101eee:	d133      	bne.n	8101f58 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101ef0:	4b1b      	ldr	r3, [pc, #108]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ef2:	695b      	ldr	r3, [r3, #20]
 8101ef4:	4a1a      	ldr	r2, [pc, #104]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ef6:	f023 0302 	bic.w	r3, r3, #2
 8101efa:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101efc:	4b19      	ldr	r3, [pc, #100]	; (8101f64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101efe:	691b      	ldr	r3, [r3, #16]
 8101f00:	4a18      	ldr	r2, [pc, #96]	; (8101f64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101f02:	f043 0304 	orr.w	r3, r3, #4
 8101f06:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101f08:	f3bf 8f4f 	dsb	sy
}
 8101f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101f0e:	f3bf 8f6f 	isb	sy
}
 8101f12:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101f14:	7afb      	ldrb	r3, [r7, #11]
 8101f16:	2b01      	cmp	r3, #1
 8101f18:	d101      	bne.n	8101f1e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101f1a:	bf30      	wfi
 8101f1c:	e000      	b.n	8101f20 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101f1e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101f20:	4b10      	ldr	r3, [pc, #64]	; (8101f64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101f22:	691b      	ldr	r3, [r3, #16]
 8101f24:	4a0f      	ldr	r2, [pc, #60]	; (8101f64 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101f26:	f023 0304 	bic.w	r3, r3, #4
 8101f2a:	6113      	str	r3, [r2, #16]
 8101f2c:	e015      	b.n	8101f5a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101f2e:	f7ff f96d 	bl	810120c <HAL_GetCurrentCPUID>
 8101f32:	4603      	mov	r3, r0
 8101f34:	2b03      	cmp	r3, #3
 8101f36:	d106      	bne.n	8101f46 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101f38:	4b09      	ldr	r3, [pc, #36]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f3a:	691b      	ldr	r3, [r3, #16]
 8101f3c:	4a08      	ldr	r2, [pc, #32]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f3e:	f023 0304 	bic.w	r3, r3, #4
 8101f42:	6113      	str	r3, [r2, #16]
 8101f44:	e009      	b.n	8101f5a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101f46:	4b06      	ldr	r3, [pc, #24]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f48:	695b      	ldr	r3, [r3, #20]
 8101f4a:	4a05      	ldr	r2, [pc, #20]	; (8101f60 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f4c:	f023 0304 	bic.w	r3, r3, #4
 8101f50:	6153      	str	r3, [r2, #20]
 8101f52:	e002      	b.n	8101f5a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101f54:	bf00      	nop
 8101f56:	e000      	b.n	8101f5a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101f58:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101f5a:	3710      	adds	r7, #16
 8101f5c:	46bd      	mov	sp, r7
 8101f5e:	bd80      	pop	{r7, pc}
 8101f60:	58024800 	.word	0x58024800
 8101f64:	e000ed00 	.word	0xe000ed00

08101f68 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101f68:	b580      	push	{r7, lr}
 8101f6a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101f6c:	f7ff f94e 	bl	810120c <HAL_GetCurrentCPUID>
 8101f70:	4603      	mov	r3, r0
 8101f72:	2b03      	cmp	r3, #3
 8101f74:	d101      	bne.n	8101f7a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101f76:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101f78:	e001      	b.n	8101f7e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101f7a:	bf40      	sev
    __WFE ();
 8101f7c:	bf20      	wfe
}
 8101f7e:	bf00      	nop
 8101f80:	bd80      	pop	{r7, pc}
	...

08101f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101f84:	b480      	push	{r7}
 8101f86:	b089      	sub	sp, #36	; 0x24
 8101f88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101f8a:	4bb3      	ldr	r3, [pc, #716]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f8c:	691b      	ldr	r3, [r3, #16]
 8101f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101f92:	2b18      	cmp	r3, #24
 8101f94:	f200 8155 	bhi.w	8102242 <HAL_RCC_GetSysClockFreq+0x2be>
 8101f98:	a201      	add	r2, pc, #4	; (adr r2, 8101fa0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101f9e:	bf00      	nop
 8101fa0:	08102005 	.word	0x08102005
 8101fa4:	08102243 	.word	0x08102243
 8101fa8:	08102243 	.word	0x08102243
 8101fac:	08102243 	.word	0x08102243
 8101fb0:	08102243 	.word	0x08102243
 8101fb4:	08102243 	.word	0x08102243
 8101fb8:	08102243 	.word	0x08102243
 8101fbc:	08102243 	.word	0x08102243
 8101fc0:	0810202b 	.word	0x0810202b
 8101fc4:	08102243 	.word	0x08102243
 8101fc8:	08102243 	.word	0x08102243
 8101fcc:	08102243 	.word	0x08102243
 8101fd0:	08102243 	.word	0x08102243
 8101fd4:	08102243 	.word	0x08102243
 8101fd8:	08102243 	.word	0x08102243
 8101fdc:	08102243 	.word	0x08102243
 8101fe0:	08102031 	.word	0x08102031
 8101fe4:	08102243 	.word	0x08102243
 8101fe8:	08102243 	.word	0x08102243
 8101fec:	08102243 	.word	0x08102243
 8101ff0:	08102243 	.word	0x08102243
 8101ff4:	08102243 	.word	0x08102243
 8101ff8:	08102243 	.word	0x08102243
 8101ffc:	08102243 	.word	0x08102243
 8102000:	08102037 	.word	0x08102037
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102004:	4b94      	ldr	r3, [pc, #592]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102006:	681b      	ldr	r3, [r3, #0]
 8102008:	f003 0320 	and.w	r3, r3, #32
 810200c:	2b00      	cmp	r3, #0
 810200e:	d009      	beq.n	8102024 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102010:	4b91      	ldr	r3, [pc, #580]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	08db      	lsrs	r3, r3, #3
 8102016:	f003 0303 	and.w	r3, r3, #3
 810201a:	4a90      	ldr	r2, [pc, #576]	; (810225c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810201c:	fa22 f303 	lsr.w	r3, r2, r3
 8102020:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102022:	e111      	b.n	8102248 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102024:	4b8d      	ldr	r3, [pc, #564]	; (810225c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102026:	61bb      	str	r3, [r7, #24]
    break;
 8102028:	e10e      	b.n	8102248 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810202a:	4b8d      	ldr	r3, [pc, #564]	; (8102260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810202c:	61bb      	str	r3, [r7, #24]
    break;
 810202e:	e10b      	b.n	8102248 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102030:	4b8c      	ldr	r3, [pc, #560]	; (8102264 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102032:	61bb      	str	r3, [r7, #24]
    break;
 8102034:	e108      	b.n	8102248 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102036:	4b88      	ldr	r3, [pc, #544]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810203a:	f003 0303 	and.w	r3, r3, #3
 810203e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102040:	4b85      	ldr	r3, [pc, #532]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102044:	091b      	lsrs	r3, r3, #4
 8102046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810204a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810204c:	4b82      	ldr	r3, [pc, #520]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102050:	f003 0301 	and.w	r3, r3, #1
 8102054:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8102056:	4b80      	ldr	r3, [pc, #512]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810205a:	08db      	lsrs	r3, r3, #3
 810205c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102060:	68fa      	ldr	r2, [r7, #12]
 8102062:	fb02 f303 	mul.w	r3, r2, r3
 8102066:	ee07 3a90 	vmov	s15, r3
 810206a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810206e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102072:	693b      	ldr	r3, [r7, #16]
 8102074:	2b00      	cmp	r3, #0
 8102076:	f000 80e1 	beq.w	810223c <HAL_RCC_GetSysClockFreq+0x2b8>
 810207a:	697b      	ldr	r3, [r7, #20]
 810207c:	2b02      	cmp	r3, #2
 810207e:	f000 8083 	beq.w	8102188 <HAL_RCC_GetSysClockFreq+0x204>
 8102082:	697b      	ldr	r3, [r7, #20]
 8102084:	2b02      	cmp	r3, #2
 8102086:	f200 80a1 	bhi.w	81021cc <HAL_RCC_GetSysClockFreq+0x248>
 810208a:	697b      	ldr	r3, [r7, #20]
 810208c:	2b00      	cmp	r3, #0
 810208e:	d003      	beq.n	8102098 <HAL_RCC_GetSysClockFreq+0x114>
 8102090:	697b      	ldr	r3, [r7, #20]
 8102092:	2b01      	cmp	r3, #1
 8102094:	d056      	beq.n	8102144 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102096:	e099      	b.n	81021cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102098:	4b6f      	ldr	r3, [pc, #444]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810209a:	681b      	ldr	r3, [r3, #0]
 810209c:	f003 0320 	and.w	r3, r3, #32
 81020a0:	2b00      	cmp	r3, #0
 81020a2:	d02d      	beq.n	8102100 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81020a4:	4b6c      	ldr	r3, [pc, #432]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81020a6:	681b      	ldr	r3, [r3, #0]
 81020a8:	08db      	lsrs	r3, r3, #3
 81020aa:	f003 0303 	and.w	r3, r3, #3
 81020ae:	4a6b      	ldr	r2, [pc, #428]	; (810225c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81020b0:	fa22 f303 	lsr.w	r3, r2, r3
 81020b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81020b6:	687b      	ldr	r3, [r7, #4]
 81020b8:	ee07 3a90 	vmov	s15, r3
 81020bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81020c0:	693b      	ldr	r3, [r7, #16]
 81020c2:	ee07 3a90 	vmov	s15, r3
 81020c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81020ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81020ce:	4b62      	ldr	r3, [pc, #392]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81020d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81020d6:	ee07 3a90 	vmov	s15, r3
 81020da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81020de:	ed97 6a02 	vldr	s12, [r7, #8]
 81020e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102268 <HAL_RCC_GetSysClockFreq+0x2e4>
 81020e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81020ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81020ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81020f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81020f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81020fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81020fe:	e087      	b.n	8102210 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102100:	693b      	ldr	r3, [r7, #16]
 8102102:	ee07 3a90 	vmov	s15, r3
 8102106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810210a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810226c <HAL_RCC_GetSysClockFreq+0x2e8>
 810210e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102112:	4b51      	ldr	r3, [pc, #324]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810211a:	ee07 3a90 	vmov	s15, r3
 810211e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102122:	ed97 6a02 	vldr	s12, [r7, #8]
 8102126:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102268 <HAL_RCC_GetSysClockFreq+0x2e4>
 810212a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810212e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810213e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102142:	e065      	b.n	8102210 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102144:	693b      	ldr	r3, [r7, #16]
 8102146:	ee07 3a90 	vmov	s15, r3
 810214a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810214e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102270 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102156:	4b40      	ldr	r3, [pc, #256]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810215a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810215e:	ee07 3a90 	vmov	s15, r3
 8102162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102166:	ed97 6a02 	vldr	s12, [r7, #8]
 810216a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102268 <HAL_RCC_GetSysClockFreq+0x2e4>
 810216e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810217a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102186:	e043      	b.n	8102210 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102188:	693b      	ldr	r3, [r7, #16]
 810218a:	ee07 3a90 	vmov	s15, r3
 810218e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102192:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102274 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810219a:	4b2f      	ldr	r3, [pc, #188]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810219e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81021a2:	ee07 3a90 	vmov	s15, r3
 81021a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81021aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81021ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102268 <HAL_RCC_GetSysClockFreq+0x2e4>
 81021b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81021b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81021ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81021be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81021c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81021ca:	e021      	b.n	8102210 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81021cc:	693b      	ldr	r3, [r7, #16]
 81021ce:	ee07 3a90 	vmov	s15, r3
 81021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81021d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102270 <HAL_RCC_GetSysClockFreq+0x2ec>
 81021da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81021de:	4b1e      	ldr	r3, [pc, #120]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81021e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81021e6:	ee07 3a90 	vmov	s15, r3
 81021ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81021ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81021f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102268 <HAL_RCC_GetSysClockFreq+0x2e4>
 81021f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81021fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81021fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102206:	ee67 7a27 	vmul.f32	s15, s14, s15
 810220a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810220e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102210:	4b11      	ldr	r3, [pc, #68]	; (8102258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102214:	0a5b      	lsrs	r3, r3, #9
 8102216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810221a:	3301      	adds	r3, #1
 810221c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810221e:	683b      	ldr	r3, [r7, #0]
 8102220:	ee07 3a90 	vmov	s15, r3
 8102224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102228:	edd7 6a07 	vldr	s13, [r7, #28]
 810222c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102234:	ee17 3a90 	vmov	r3, s15
 8102238:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810223a:	e005      	b.n	8102248 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810223c:	2300      	movs	r3, #0
 810223e:	61bb      	str	r3, [r7, #24]
    break;
 8102240:	e002      	b.n	8102248 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102242:	4b07      	ldr	r3, [pc, #28]	; (8102260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102244:	61bb      	str	r3, [r7, #24]
    break;
 8102246:	bf00      	nop
  }

  return sysclockfreq;
 8102248:	69bb      	ldr	r3, [r7, #24]
}
 810224a:	4618      	mov	r0, r3
 810224c:	3724      	adds	r7, #36	; 0x24
 810224e:	46bd      	mov	sp, r7
 8102250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102254:	4770      	bx	lr
 8102256:	bf00      	nop
 8102258:	58024400 	.word	0x58024400
 810225c:	03d09000 	.word	0x03d09000
 8102260:	003d0900 	.word	0x003d0900
 8102264:	007a1200 	.word	0x007a1200
 8102268:	46000000 	.word	0x46000000
 810226c:	4c742400 	.word	0x4c742400
 8102270:	4a742400 	.word	0x4a742400
 8102274:	4af42400 	.word	0x4af42400

08102278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102278:	b580      	push	{r7, lr}
 810227a:	b082      	sub	sp, #8
 810227c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810227e:	f7ff fe81 	bl	8101f84 <HAL_RCC_GetSysClockFreq>
 8102282:	4602      	mov	r2, r0
 8102284:	4b11      	ldr	r3, [pc, #68]	; (81022cc <HAL_RCC_GetHCLKFreq+0x54>)
 8102286:	699b      	ldr	r3, [r3, #24]
 8102288:	0a1b      	lsrs	r3, r3, #8
 810228a:	f003 030f 	and.w	r3, r3, #15
 810228e:	4910      	ldr	r1, [pc, #64]	; (81022d0 <HAL_RCC_GetHCLKFreq+0x58>)
 8102290:	5ccb      	ldrb	r3, [r1, r3]
 8102292:	f003 031f 	and.w	r3, r3, #31
 8102296:	fa22 f303 	lsr.w	r3, r2, r3
 810229a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810229c:	4b0b      	ldr	r3, [pc, #44]	; (81022cc <HAL_RCC_GetHCLKFreq+0x54>)
 810229e:	699b      	ldr	r3, [r3, #24]
 81022a0:	f003 030f 	and.w	r3, r3, #15
 81022a4:	4a0a      	ldr	r2, [pc, #40]	; (81022d0 <HAL_RCC_GetHCLKFreq+0x58>)
 81022a6:	5cd3      	ldrb	r3, [r2, r3]
 81022a8:	f003 031f 	and.w	r3, r3, #31
 81022ac:	687a      	ldr	r2, [r7, #4]
 81022ae:	fa22 f303 	lsr.w	r3, r2, r3
 81022b2:	4a08      	ldr	r2, [pc, #32]	; (81022d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81022b4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81022b6:	4b07      	ldr	r3, [pc, #28]	; (81022d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81022b8:	681b      	ldr	r3, [r3, #0]
 81022ba:	4a07      	ldr	r2, [pc, #28]	; (81022d8 <HAL_RCC_GetHCLKFreq+0x60>)
 81022bc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81022be:	4b05      	ldr	r3, [pc, #20]	; (81022d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81022c0:	681b      	ldr	r3, [r3, #0]
}
 81022c2:	4618      	mov	r0, r3
 81022c4:	3708      	adds	r7, #8
 81022c6:	46bd      	mov	sp, r7
 81022c8:	bd80      	pop	{r7, pc}
 81022ca:	bf00      	nop
 81022cc:	58024400 	.word	0x58024400
 81022d0:	0810645c 	.word	0x0810645c
 81022d4:	10000004 	.word	0x10000004
 81022d8:	10000000 	.word	0x10000000

081022dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81022dc:	b580      	push	{r7, lr}
 81022de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81022e0:	f7ff ffca 	bl	8102278 <HAL_RCC_GetHCLKFreq>
 81022e4:	4602      	mov	r2, r0
 81022e6:	4b06      	ldr	r3, [pc, #24]	; (8102300 <HAL_RCC_GetPCLK1Freq+0x24>)
 81022e8:	69db      	ldr	r3, [r3, #28]
 81022ea:	091b      	lsrs	r3, r3, #4
 81022ec:	f003 0307 	and.w	r3, r3, #7
 81022f0:	4904      	ldr	r1, [pc, #16]	; (8102304 <HAL_RCC_GetPCLK1Freq+0x28>)
 81022f2:	5ccb      	ldrb	r3, [r1, r3]
 81022f4:	f003 031f 	and.w	r3, r3, #31
 81022f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81022fc:	4618      	mov	r0, r3
 81022fe:	bd80      	pop	{r7, pc}
 8102300:	58024400 	.word	0x58024400
 8102304:	0810645c 	.word	0x0810645c

08102308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102308:	b580      	push	{r7, lr}
 810230a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810230c:	f7ff ffb4 	bl	8102278 <HAL_RCC_GetHCLKFreq>
 8102310:	4602      	mov	r2, r0
 8102312:	4b06      	ldr	r3, [pc, #24]	; (810232c <HAL_RCC_GetPCLK2Freq+0x24>)
 8102314:	69db      	ldr	r3, [r3, #28]
 8102316:	0a1b      	lsrs	r3, r3, #8
 8102318:	f003 0307 	and.w	r3, r3, #7
 810231c:	4904      	ldr	r1, [pc, #16]	; (8102330 <HAL_RCC_GetPCLK2Freq+0x28>)
 810231e:	5ccb      	ldrb	r3, [r1, r3]
 8102320:	f003 031f 	and.w	r3, r3, #31
 8102324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102328:	4618      	mov	r0, r3
 810232a:	bd80      	pop	{r7, pc}
 810232c:	58024400 	.word	0x58024400
 8102330:	0810645c 	.word	0x0810645c

08102334 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102334:	b580      	push	{r7, lr}
 8102336:	b086      	sub	sp, #24
 8102338:	af00      	add	r7, sp, #0
 810233a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810233c:	2300      	movs	r3, #0
 810233e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102340:	2300      	movs	r3, #0
 8102342:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102344:	687b      	ldr	r3, [r7, #4]
 8102346:	681b      	ldr	r3, [r3, #0]
 8102348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810234c:	2b00      	cmp	r3, #0
 810234e:	d03f      	beq.n	81023d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102354:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102358:	d02a      	beq.n	81023b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810235a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810235e:	d824      	bhi.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102364:	d018      	beq.n	8102398 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102366:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810236a:	d81e      	bhi.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 810236c:	2b00      	cmp	r3, #0
 810236e:	d003      	beq.n	8102378 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102374:	d007      	beq.n	8102386 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102376:	e018      	b.n	81023aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102378:	4ba3      	ldr	r3, [pc, #652]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810237c:	4aa2      	ldr	r2, [pc, #648]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810237e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102384:	e015      	b.n	81023b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102386:	687b      	ldr	r3, [r7, #4]
 8102388:	3304      	adds	r3, #4
 810238a:	2102      	movs	r1, #2
 810238c:	4618      	mov	r0, r3
 810238e:	f001 f9d5 	bl	810373c <RCCEx_PLL2_Config>
 8102392:	4603      	mov	r3, r0
 8102394:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102396:	e00c      	b.n	81023b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	3324      	adds	r3, #36	; 0x24
 810239c:	2102      	movs	r1, #2
 810239e:	4618      	mov	r0, r3
 81023a0:	f001 fa7e 	bl	81038a0 <RCCEx_PLL3_Config>
 81023a4:	4603      	mov	r3, r0
 81023a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81023a8:	e003      	b.n	81023b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81023aa:	2301      	movs	r3, #1
 81023ac:	75fb      	strb	r3, [r7, #23]
      break;
 81023ae:	e000      	b.n	81023b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81023b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81023b2:	7dfb      	ldrb	r3, [r7, #23]
 81023b4:	2b00      	cmp	r3, #0
 81023b6:	d109      	bne.n	81023cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81023b8:	4b93      	ldr	r3, [pc, #588]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81023ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81023bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81023c4:	4990      	ldr	r1, [pc, #576]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81023c6:	4313      	orrs	r3, r2
 81023c8:	650b      	str	r3, [r1, #80]	; 0x50
 81023ca:	e001      	b.n	81023d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023cc:	7dfb      	ldrb	r3, [r7, #23]
 81023ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81023d8:	2b00      	cmp	r3, #0
 81023da:	d03d      	beq.n	8102458 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81023e0:	2b04      	cmp	r3, #4
 81023e2:	d826      	bhi.n	8102432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81023e4:	a201      	add	r2, pc, #4	; (adr r2, 81023ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81023ea:	bf00      	nop
 81023ec:	08102401 	.word	0x08102401
 81023f0:	0810240f 	.word	0x0810240f
 81023f4:	08102421 	.word	0x08102421
 81023f8:	08102439 	.word	0x08102439
 81023fc:	08102439 	.word	0x08102439
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102400:	4b81      	ldr	r3, [pc, #516]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102404:	4a80      	ldr	r2, [pc, #512]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810240a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810240c:	e015      	b.n	810243a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810240e:	687b      	ldr	r3, [r7, #4]
 8102410:	3304      	adds	r3, #4
 8102412:	2100      	movs	r1, #0
 8102414:	4618      	mov	r0, r3
 8102416:	f001 f991 	bl	810373c <RCCEx_PLL2_Config>
 810241a:	4603      	mov	r3, r0
 810241c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810241e:	e00c      	b.n	810243a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102420:	687b      	ldr	r3, [r7, #4]
 8102422:	3324      	adds	r3, #36	; 0x24
 8102424:	2100      	movs	r1, #0
 8102426:	4618      	mov	r0, r3
 8102428:	f001 fa3a 	bl	81038a0 <RCCEx_PLL3_Config>
 810242c:	4603      	mov	r3, r0
 810242e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102430:	e003      	b.n	810243a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102432:	2301      	movs	r3, #1
 8102434:	75fb      	strb	r3, [r7, #23]
      break;
 8102436:	e000      	b.n	810243a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102438:	bf00      	nop
    }

    if(ret == HAL_OK)
 810243a:	7dfb      	ldrb	r3, [r7, #23]
 810243c:	2b00      	cmp	r3, #0
 810243e:	d109      	bne.n	8102454 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102440:	4b71      	ldr	r3, [pc, #452]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102444:	f023 0207 	bic.w	r2, r3, #7
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810244c:	496e      	ldr	r1, [pc, #440]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810244e:	4313      	orrs	r3, r2
 8102450:	650b      	str	r3, [r1, #80]	; 0x50
 8102452:	e001      	b.n	8102458 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102454:	7dfb      	ldrb	r3, [r7, #23]
 8102456:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102458:	687b      	ldr	r3, [r7, #4]
 810245a:	681b      	ldr	r3, [r3, #0]
 810245c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102460:	2b00      	cmp	r3, #0
 8102462:	d042      	beq.n	81024ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810246c:	d02b      	beq.n	81024c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810246e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102472:	d825      	bhi.n	81024c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102474:	2bc0      	cmp	r3, #192	; 0xc0
 8102476:	d028      	beq.n	81024ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102478:	2bc0      	cmp	r3, #192	; 0xc0
 810247a:	d821      	bhi.n	81024c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810247c:	2b80      	cmp	r3, #128	; 0x80
 810247e:	d016      	beq.n	81024ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102480:	2b80      	cmp	r3, #128	; 0x80
 8102482:	d81d      	bhi.n	81024c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102484:	2b00      	cmp	r3, #0
 8102486:	d002      	beq.n	810248e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102488:	2b40      	cmp	r3, #64	; 0x40
 810248a:	d007      	beq.n	810249c <HAL_RCCEx_PeriphCLKConfig+0x168>
 810248c:	e018      	b.n	81024c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810248e:	4b5e      	ldr	r3, [pc, #376]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102492:	4a5d      	ldr	r2, [pc, #372]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102498:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810249a:	e017      	b.n	81024cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810249c:	687b      	ldr	r3, [r7, #4]
 810249e:	3304      	adds	r3, #4
 81024a0:	2100      	movs	r1, #0
 81024a2:	4618      	mov	r0, r3
 81024a4:	f001 f94a 	bl	810373c <RCCEx_PLL2_Config>
 81024a8:	4603      	mov	r3, r0
 81024aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81024ac:	e00e      	b.n	81024cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	3324      	adds	r3, #36	; 0x24
 81024b2:	2100      	movs	r1, #0
 81024b4:	4618      	mov	r0, r3
 81024b6:	f001 f9f3 	bl	81038a0 <RCCEx_PLL3_Config>
 81024ba:	4603      	mov	r3, r0
 81024bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81024be:	e005      	b.n	81024cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81024c0:	2301      	movs	r3, #1
 81024c2:	75fb      	strb	r3, [r7, #23]
      break;
 81024c4:	e002      	b.n	81024cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81024c6:	bf00      	nop
 81024c8:	e000      	b.n	81024cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81024ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81024cc:	7dfb      	ldrb	r3, [r7, #23]
 81024ce:	2b00      	cmp	r3, #0
 81024d0:	d109      	bne.n	81024e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81024d2:	4b4d      	ldr	r3, [pc, #308]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81024d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81024d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81024de:	494a      	ldr	r1, [pc, #296]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81024e0:	4313      	orrs	r3, r2
 81024e2:	650b      	str	r3, [r1, #80]	; 0x50
 81024e4:	e001      	b.n	81024ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024e6:	7dfb      	ldrb	r3, [r7, #23]
 81024e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81024ea:	687b      	ldr	r3, [r7, #4]
 81024ec:	681b      	ldr	r3, [r3, #0]
 81024ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81024f2:	2b00      	cmp	r3, #0
 81024f4:	d049      	beq.n	810258a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81024fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102500:	d030      	beq.n	8102564 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102502:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102506:	d82a      	bhi.n	810255e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102508:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810250c:	d02c      	beq.n	8102568 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810250e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102512:	d824      	bhi.n	810255e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102518:	d018      	beq.n	810254c <HAL_RCCEx_PeriphCLKConfig+0x218>
 810251a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810251e:	d81e      	bhi.n	810255e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102520:	2b00      	cmp	r3, #0
 8102522:	d003      	beq.n	810252c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102528:	d007      	beq.n	810253a <HAL_RCCEx_PeriphCLKConfig+0x206>
 810252a:	e018      	b.n	810255e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810252c:	4b36      	ldr	r3, [pc, #216]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 810252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102530:	4a35      	ldr	r2, [pc, #212]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102536:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102538:	e017      	b.n	810256a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	3304      	adds	r3, #4
 810253e:	2100      	movs	r1, #0
 8102540:	4618      	mov	r0, r3
 8102542:	f001 f8fb 	bl	810373c <RCCEx_PLL2_Config>
 8102546:	4603      	mov	r3, r0
 8102548:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810254a:	e00e      	b.n	810256a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	3324      	adds	r3, #36	; 0x24
 8102550:	2100      	movs	r1, #0
 8102552:	4618      	mov	r0, r3
 8102554:	f001 f9a4 	bl	81038a0 <RCCEx_PLL3_Config>
 8102558:	4603      	mov	r3, r0
 810255a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810255c:	e005      	b.n	810256a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810255e:	2301      	movs	r3, #1
 8102560:	75fb      	strb	r3, [r7, #23]
      break;
 8102562:	e002      	b.n	810256a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102564:	bf00      	nop
 8102566:	e000      	b.n	810256a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102568:	bf00      	nop
    }

    if(ret == HAL_OK)
 810256a:	7dfb      	ldrb	r3, [r7, #23]
 810256c:	2b00      	cmp	r3, #0
 810256e:	d10a      	bne.n	8102586 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102570:	4b25      	ldr	r3, [pc, #148]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102574:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102578:	687b      	ldr	r3, [r7, #4]
 810257a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810257e:	4922      	ldr	r1, [pc, #136]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8102580:	4313      	orrs	r3, r2
 8102582:	658b      	str	r3, [r1, #88]	; 0x58
 8102584:	e001      	b.n	810258a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102586:	7dfb      	ldrb	r3, [r7, #23]
 8102588:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	681b      	ldr	r3, [r3, #0]
 810258e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102592:	2b00      	cmp	r3, #0
 8102594:	d04b      	beq.n	810262e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810259c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81025a0:	d030      	beq.n	8102604 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81025a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81025a6:	d82a      	bhi.n	81025fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81025a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81025ac:	d02e      	beq.n	810260c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 81025ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81025b2:	d824      	bhi.n	81025fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81025b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81025b8:	d018      	beq.n	81025ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81025ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81025be:	d81e      	bhi.n	81025fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81025c0:	2b00      	cmp	r3, #0
 81025c2:	d003      	beq.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 81025c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81025c8:	d007      	beq.n	81025da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81025ca:	e018      	b.n	81025fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81025cc:	4b0e      	ldr	r3, [pc, #56]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025d0:	4a0d      	ldr	r2, [pc, #52]	; (8102608 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 81025d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81025d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81025d8:	e019      	b.n	810260e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	3304      	adds	r3, #4
 81025de:	2100      	movs	r1, #0
 81025e0:	4618      	mov	r0, r3
 81025e2:	f001 f8ab 	bl	810373c <RCCEx_PLL2_Config>
 81025e6:	4603      	mov	r3, r0
 81025e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81025ea:	e010      	b.n	810260e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	3324      	adds	r3, #36	; 0x24
 81025f0:	2100      	movs	r1, #0
 81025f2:	4618      	mov	r0, r3
 81025f4:	f001 f954 	bl	81038a0 <RCCEx_PLL3_Config>
 81025f8:	4603      	mov	r3, r0
 81025fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81025fc:	e007      	b.n	810260e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81025fe:	2301      	movs	r3, #1
 8102600:	75fb      	strb	r3, [r7, #23]
      break;
 8102602:	e004      	b.n	810260e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8102604:	bf00      	nop
 8102606:	e002      	b.n	810260e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8102608:	58024400 	.word	0x58024400
      break;
 810260c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810260e:	7dfb      	ldrb	r3, [r7, #23]
 8102610:	2b00      	cmp	r3, #0
 8102612:	d10a      	bne.n	810262a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102614:	4b99      	ldr	r3, [pc, #612]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102618:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102622:	4996      	ldr	r1, [pc, #600]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102624:	4313      	orrs	r3, r2
 8102626:	658b      	str	r3, [r1, #88]	; 0x58
 8102628:	e001      	b.n	810262e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810262a:	7dfb      	ldrb	r3, [r7, #23]
 810262c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	681b      	ldr	r3, [r3, #0]
 8102632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102636:	2b00      	cmp	r3, #0
 8102638:	d032      	beq.n	81026a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810263e:	2b30      	cmp	r3, #48	; 0x30
 8102640:	d01c      	beq.n	810267c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8102642:	2b30      	cmp	r3, #48	; 0x30
 8102644:	d817      	bhi.n	8102676 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8102646:	2b20      	cmp	r3, #32
 8102648:	d00c      	beq.n	8102664 <HAL_RCCEx_PeriphCLKConfig+0x330>
 810264a:	2b20      	cmp	r3, #32
 810264c:	d813      	bhi.n	8102676 <HAL_RCCEx_PeriphCLKConfig+0x342>
 810264e:	2b00      	cmp	r3, #0
 8102650:	d016      	beq.n	8102680 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8102652:	2b10      	cmp	r3, #16
 8102654:	d10f      	bne.n	8102676 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102656:	4b89      	ldr	r3, [pc, #548]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810265a:	4a88      	ldr	r2, [pc, #544]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810265c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102660:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102662:	e00e      	b.n	8102682 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	3304      	adds	r3, #4
 8102668:	2102      	movs	r1, #2
 810266a:	4618      	mov	r0, r3
 810266c:	f001 f866 	bl	810373c <RCCEx_PLL2_Config>
 8102670:	4603      	mov	r3, r0
 8102672:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102674:	e005      	b.n	8102682 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102676:	2301      	movs	r3, #1
 8102678:	75fb      	strb	r3, [r7, #23]
      break;
 810267a:	e002      	b.n	8102682 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 810267c:	bf00      	nop
 810267e:	e000      	b.n	8102682 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8102680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102682:	7dfb      	ldrb	r3, [r7, #23]
 8102684:	2b00      	cmp	r3, #0
 8102686:	d109      	bne.n	810269c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102688:	4b7c      	ldr	r3, [pc, #496]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 810268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810268c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102690:	687b      	ldr	r3, [r7, #4]
 8102692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102694:	4979      	ldr	r1, [pc, #484]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102696:	4313      	orrs	r3, r2
 8102698:	64cb      	str	r3, [r1, #76]	; 0x4c
 810269a:	e001      	b.n	81026a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810269c:	7dfb      	ldrb	r3, [r7, #23]
 810269e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81026a0:	687b      	ldr	r3, [r7, #4]
 81026a2:	681b      	ldr	r3, [r3, #0]
 81026a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d047      	beq.n	810273c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81026b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81026b4:	d030      	beq.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 81026b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81026ba:	d82a      	bhi.n	8102712 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81026bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81026c0:	d02c      	beq.n	810271c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 81026c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81026c6:	d824      	bhi.n	8102712 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81026c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81026cc:	d018      	beq.n	8102700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 81026ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81026d2:	d81e      	bhi.n	8102712 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 81026d4:	2b00      	cmp	r3, #0
 81026d6:	d003      	beq.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 81026d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81026dc:	d007      	beq.n	81026ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 81026de:	e018      	b.n	8102712 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026e0:	4b66      	ldr	r3, [pc, #408]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026e4:	4a65      	ldr	r2, [pc, #404]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81026e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81026ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81026ec:	e017      	b.n	810271e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	3304      	adds	r3, #4
 81026f2:	2100      	movs	r1, #0
 81026f4:	4618      	mov	r0, r3
 81026f6:	f001 f821 	bl	810373c <RCCEx_PLL2_Config>
 81026fa:	4603      	mov	r3, r0
 81026fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81026fe:	e00e      	b.n	810271e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102700:	687b      	ldr	r3, [r7, #4]
 8102702:	3324      	adds	r3, #36	; 0x24
 8102704:	2100      	movs	r1, #0
 8102706:	4618      	mov	r0, r3
 8102708:	f001 f8ca 	bl	81038a0 <RCCEx_PLL3_Config>
 810270c:	4603      	mov	r3, r0
 810270e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102710:	e005      	b.n	810271e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102712:	2301      	movs	r3, #1
 8102714:	75fb      	strb	r3, [r7, #23]
      break;
 8102716:	e002      	b.n	810271e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8102718:	bf00      	nop
 810271a:	e000      	b.n	810271e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 810271c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810271e:	7dfb      	ldrb	r3, [r7, #23]
 8102720:	2b00      	cmp	r3, #0
 8102722:	d109      	bne.n	8102738 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102724:	4b55      	ldr	r3, [pc, #340]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102728:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102730:	4952      	ldr	r1, [pc, #328]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102732:	4313      	orrs	r3, r2
 8102734:	650b      	str	r3, [r1, #80]	; 0x50
 8102736:	e001      	b.n	810273c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102738:	7dfb      	ldrb	r3, [r7, #23]
 810273a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102744:	2b00      	cmp	r3, #0
 8102746:	d049      	beq.n	81027dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8102748:	687b      	ldr	r3, [r7, #4]
 810274a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810274c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102750:	d02e      	beq.n	81027b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8102752:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102756:	d828      	bhi.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102758:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810275c:	d02a      	beq.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 810275e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102762:	d822      	bhi.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102764:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102768:	d026      	beq.n	81027b8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 810276a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810276e:	d81c      	bhi.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 8102770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102774:	d010      	beq.n	8102798 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8102776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810277a:	d816      	bhi.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0x476>
 810277c:	2b00      	cmp	r3, #0
 810277e:	d01d      	beq.n	81027bc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8102780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102784:	d111      	bne.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102786:	687b      	ldr	r3, [r7, #4]
 8102788:	3304      	adds	r3, #4
 810278a:	2101      	movs	r1, #1
 810278c:	4618      	mov	r0, r3
 810278e:	f000 ffd5 	bl	810373c <RCCEx_PLL2_Config>
 8102792:	4603      	mov	r3, r0
 8102794:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102796:	e012      	b.n	81027be <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	3324      	adds	r3, #36	; 0x24
 810279c:	2101      	movs	r1, #1
 810279e:	4618      	mov	r0, r3
 81027a0:	f001 f87e 	bl	81038a0 <RCCEx_PLL3_Config>
 81027a4:	4603      	mov	r3, r0
 81027a6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81027a8:	e009      	b.n	81027be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81027aa:	2301      	movs	r3, #1
 81027ac:	75fb      	strb	r3, [r7, #23]
      break;
 81027ae:	e006      	b.n	81027be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81027b0:	bf00      	nop
 81027b2:	e004      	b.n	81027be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81027b4:	bf00      	nop
 81027b6:	e002      	b.n	81027be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81027b8:	bf00      	nop
 81027ba:	e000      	b.n	81027be <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 81027bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81027be:	7dfb      	ldrb	r3, [r7, #23]
 81027c0:	2b00      	cmp	r3, #0
 81027c2:	d109      	bne.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81027c4:	4b2d      	ldr	r3, [pc, #180]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81027c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81027c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81027d0:	492a      	ldr	r1, [pc, #168]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 81027d2:	4313      	orrs	r3, r2
 81027d4:	650b      	str	r3, [r1, #80]	; 0x50
 81027d6:	e001      	b.n	81027dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027d8:	7dfb      	ldrb	r3, [r7, #23]
 81027da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81027dc:	687b      	ldr	r3, [r7, #4]
 81027de:	681b      	ldr	r3, [r3, #0]
 81027e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81027e4:	2b00      	cmp	r3, #0
 81027e6:	d04d      	beq.n	8102884 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81027ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81027f2:	d02e      	beq.n	8102852 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 81027f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81027f8:	d828      	bhi.n	810284c <HAL_RCCEx_PeriphCLKConfig+0x518>
 81027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81027fe:	d02a      	beq.n	8102856 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8102800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102804:	d822      	bhi.n	810284c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102806:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810280a:	d026      	beq.n	810285a <HAL_RCCEx_PeriphCLKConfig+0x526>
 810280c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102810:	d81c      	bhi.n	810284c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8102812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102816:	d010      	beq.n	810283a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8102818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810281c:	d816      	bhi.n	810284c <HAL_RCCEx_PeriphCLKConfig+0x518>
 810281e:	2b00      	cmp	r3, #0
 8102820:	d01d      	beq.n	810285e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8102822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102826:	d111      	bne.n	810284c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	3304      	adds	r3, #4
 810282c:	2101      	movs	r1, #1
 810282e:	4618      	mov	r0, r3
 8102830:	f000 ff84 	bl	810373c <RCCEx_PLL2_Config>
 8102834:	4603      	mov	r3, r0
 8102836:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102838:	e012      	b.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	3324      	adds	r3, #36	; 0x24
 810283e:	2101      	movs	r1, #1
 8102840:	4618      	mov	r0, r3
 8102842:	f001 f82d 	bl	81038a0 <RCCEx_PLL3_Config>
 8102846:	4603      	mov	r3, r0
 8102848:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810284a:	e009      	b.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810284c:	2301      	movs	r3, #1
 810284e:	75fb      	strb	r3, [r7, #23]
      break;
 8102850:	e006      	b.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102852:	bf00      	nop
 8102854:	e004      	b.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8102856:	bf00      	nop
 8102858:	e002      	b.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810285a:	bf00      	nop
 810285c:	e000      	b.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 810285e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102860:	7dfb      	ldrb	r3, [r7, #23]
 8102862:	2b00      	cmp	r3, #0
 8102864:	d10c      	bne.n	8102880 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102866:	4b05      	ldr	r3, [pc, #20]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810286a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810286e:	687b      	ldr	r3, [r7, #4]
 8102870:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102874:	4901      	ldr	r1, [pc, #4]	; (810287c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8102876:	4313      	orrs	r3, r2
 8102878:	658b      	str	r3, [r1, #88]	; 0x58
 810287a:	e003      	b.n	8102884 <HAL_RCCEx_PeriphCLKConfig+0x550>
 810287c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102880:	7dfb      	ldrb	r3, [r7, #23]
 8102882:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	681b      	ldr	r3, [r3, #0]
 8102888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810288c:	2b00      	cmp	r3, #0
 810288e:	d02f      	beq.n	81028f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102898:	d00e      	beq.n	81028b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 810289a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810289e:	d814      	bhi.n	81028ca <HAL_RCCEx_PeriphCLKConfig+0x596>
 81028a0:	2b00      	cmp	r3, #0
 81028a2:	d015      	beq.n	81028d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 81028a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81028a8:	d10f      	bne.n	81028ca <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81028aa:	4bb0      	ldr	r3, [pc, #704]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81028ae:	4aaf      	ldr	r2, [pc, #700]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81028b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81028b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81028b6:	e00c      	b.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	3304      	adds	r3, #4
 81028bc:	2101      	movs	r1, #1
 81028be:	4618      	mov	r0, r3
 81028c0:	f000 ff3c 	bl	810373c <RCCEx_PLL2_Config>
 81028c4:	4603      	mov	r3, r0
 81028c6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81028c8:	e003      	b.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81028ca:	2301      	movs	r3, #1
 81028cc:	75fb      	strb	r3, [r7, #23]
      break;
 81028ce:	e000      	b.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 81028d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81028d2:	7dfb      	ldrb	r3, [r7, #23]
 81028d4:	2b00      	cmp	r3, #0
 81028d6:	d109      	bne.n	81028ec <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81028d8:	4ba4      	ldr	r3, [pc, #656]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81028da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81028dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81028e0:	687b      	ldr	r3, [r7, #4]
 81028e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81028e4:	49a1      	ldr	r1, [pc, #644]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81028e6:	4313      	orrs	r3, r2
 81028e8:	650b      	str	r3, [r1, #80]	; 0x50
 81028ea:	e001      	b.n	81028f0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028ec:	7dfb      	ldrb	r3, [r7, #23]
 81028ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81028f8:	2b00      	cmp	r3, #0
 81028fa:	d032      	beq.n	8102962 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81028fc:	687b      	ldr	r3, [r7, #4]
 81028fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102900:	2b03      	cmp	r3, #3
 8102902:	d81b      	bhi.n	810293c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8102904:	a201      	add	r2, pc, #4	; (adr r2, 810290c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8102906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810290a:	bf00      	nop
 810290c:	08102943 	.word	0x08102943
 8102910:	0810291d 	.word	0x0810291d
 8102914:	0810292b 	.word	0x0810292b
 8102918:	08102943 	.word	0x08102943
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810291c:	4b93      	ldr	r3, [pc, #588]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102920:	4a92      	ldr	r2, [pc, #584]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102928:	e00c      	b.n	8102944 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	3304      	adds	r3, #4
 810292e:	2102      	movs	r1, #2
 8102930:	4618      	mov	r0, r3
 8102932:	f000 ff03 	bl	810373c <RCCEx_PLL2_Config>
 8102936:	4603      	mov	r3, r0
 8102938:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810293a:	e003      	b.n	8102944 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810293c:	2301      	movs	r3, #1
 810293e:	75fb      	strb	r3, [r7, #23]
      break;
 8102940:	e000      	b.n	8102944 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8102942:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102944:	7dfb      	ldrb	r3, [r7, #23]
 8102946:	2b00      	cmp	r3, #0
 8102948:	d109      	bne.n	810295e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810294a:	4b88      	ldr	r3, [pc, #544]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 810294c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810294e:	f023 0203 	bic.w	r2, r3, #3
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102956:	4985      	ldr	r1, [pc, #532]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102958:	4313      	orrs	r3, r2
 810295a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810295c:	e001      	b.n	8102962 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810295e:	7dfb      	ldrb	r3, [r7, #23]
 8102960:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102962:	687b      	ldr	r3, [r7, #4]
 8102964:	681b      	ldr	r3, [r3, #0]
 8102966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810296a:	2b00      	cmp	r3, #0
 810296c:	f000 8088 	beq.w	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102970:	4b7f      	ldr	r3, [pc, #508]	; (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8102972:	681b      	ldr	r3, [r3, #0]
 8102974:	4a7e      	ldr	r2, [pc, #504]	; (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8102976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810297a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810297c:	f7fe fb06 	bl	8100f8c <HAL_GetTick>
 8102980:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102982:	e009      	b.n	8102998 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102984:	f7fe fb02 	bl	8100f8c <HAL_GetTick>
 8102988:	4602      	mov	r2, r0
 810298a:	693b      	ldr	r3, [r7, #16]
 810298c:	1ad3      	subs	r3, r2, r3
 810298e:	2b64      	cmp	r3, #100	; 0x64
 8102990:	d902      	bls.n	8102998 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8102992:	2303      	movs	r3, #3
 8102994:	75fb      	strb	r3, [r7, #23]
        break;
 8102996:	e005      	b.n	81029a4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102998:	4b75      	ldr	r3, [pc, #468]	; (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81029a0:	2b00      	cmp	r3, #0
 81029a2:	d0ef      	beq.n	8102984 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81029a4:	7dfb      	ldrb	r3, [r7, #23]
 81029a6:	2b00      	cmp	r3, #0
 81029a8:	d168      	bne.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81029aa:	4b70      	ldr	r3, [pc, #448]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81029ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81029ae:	687b      	ldr	r3, [r7, #4]
 81029b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81029b4:	4053      	eors	r3, r2
 81029b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81029ba:	2b00      	cmp	r3, #0
 81029bc:	d013      	beq.n	81029e6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81029be:	4b6b      	ldr	r3, [pc, #428]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81029c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81029c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81029c8:	4b68      	ldr	r3, [pc, #416]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81029ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81029cc:	4a67      	ldr	r2, [pc, #412]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81029d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81029d4:	4b65      	ldr	r3, [pc, #404]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81029d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81029d8:	4a64      	ldr	r2, [pc, #400]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81029da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81029de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81029e0:	4a62      	ldr	r2, [pc, #392]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 81029e2:	68fb      	ldr	r3, [r7, #12]
 81029e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81029ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81029f0:	d115      	bne.n	8102a1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81029f2:	f7fe facb 	bl	8100f8c <HAL_GetTick>
 81029f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81029f8:	e00b      	b.n	8102a12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81029fa:	f7fe fac7 	bl	8100f8c <HAL_GetTick>
 81029fe:	4602      	mov	r2, r0
 8102a00:	693b      	ldr	r3, [r7, #16]
 8102a02:	1ad3      	subs	r3, r2, r3
 8102a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8102a08:	4293      	cmp	r3, r2
 8102a0a:	d902      	bls.n	8102a12 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8102a0c:	2303      	movs	r3, #3
 8102a0e:	75fb      	strb	r3, [r7, #23]
            break;
 8102a10:	e005      	b.n	8102a1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102a12:	4b56      	ldr	r3, [pc, #344]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102a16:	f003 0302 	and.w	r3, r3, #2
 8102a1a:	2b00      	cmp	r3, #0
 8102a1c:	d0ed      	beq.n	81029fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8102a1e:	7dfb      	ldrb	r3, [r7, #23]
 8102a20:	2b00      	cmp	r3, #0
 8102a22:	d128      	bne.n	8102a76 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102a32:	d10f      	bne.n	8102a54 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8102a34:	4b4d      	ldr	r3, [pc, #308]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102a36:	691b      	ldr	r3, [r3, #16]
 8102a38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8102a3c:	687b      	ldr	r3, [r7, #4]
 8102a3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102a42:	091b      	lsrs	r3, r3, #4
 8102a44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102a48:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102a4c:	4947      	ldr	r1, [pc, #284]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102a4e:	4313      	orrs	r3, r2
 8102a50:	610b      	str	r3, [r1, #16]
 8102a52:	e005      	b.n	8102a60 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8102a54:	4b45      	ldr	r3, [pc, #276]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102a56:	691b      	ldr	r3, [r3, #16]
 8102a58:	4a44      	ldr	r2, [pc, #272]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102a5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8102a5e:	6113      	str	r3, [r2, #16]
 8102a60:	4b42      	ldr	r3, [pc, #264]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102a6e:	493f      	ldr	r1, [pc, #252]	; (8102b6c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8102a70:	4313      	orrs	r3, r2
 8102a72:	670b      	str	r3, [r1, #112]	; 0x70
 8102a74:	e004      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102a76:	7dfb      	ldrb	r3, [r7, #23]
 8102a78:	75bb      	strb	r3, [r7, #22]
 8102a7a:	e001      	b.n	8102a80 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a7c:	7dfb      	ldrb	r3, [r7, #23]
 8102a7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102a80:	687b      	ldr	r3, [r7, #4]
 8102a82:	681b      	ldr	r3, [r3, #0]
 8102a84:	f003 0301 	and.w	r3, r3, #1
 8102a88:	2b00      	cmp	r3, #0
 8102a8a:	f000 8083 	beq.w	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102a92:	2b28      	cmp	r3, #40	; 0x28
 8102a94:	d866      	bhi.n	8102b64 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8102a96:	a201      	add	r2, pc, #4	; (adr r2, 8102a9c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8102a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a9c:	08102b75 	.word	0x08102b75
 8102aa0:	08102b65 	.word	0x08102b65
 8102aa4:	08102b65 	.word	0x08102b65
 8102aa8:	08102b65 	.word	0x08102b65
 8102aac:	08102b65 	.word	0x08102b65
 8102ab0:	08102b65 	.word	0x08102b65
 8102ab4:	08102b65 	.word	0x08102b65
 8102ab8:	08102b65 	.word	0x08102b65
 8102abc:	08102b41 	.word	0x08102b41
 8102ac0:	08102b65 	.word	0x08102b65
 8102ac4:	08102b65 	.word	0x08102b65
 8102ac8:	08102b65 	.word	0x08102b65
 8102acc:	08102b65 	.word	0x08102b65
 8102ad0:	08102b65 	.word	0x08102b65
 8102ad4:	08102b65 	.word	0x08102b65
 8102ad8:	08102b65 	.word	0x08102b65
 8102adc:	08102b53 	.word	0x08102b53
 8102ae0:	08102b65 	.word	0x08102b65
 8102ae4:	08102b65 	.word	0x08102b65
 8102ae8:	08102b65 	.word	0x08102b65
 8102aec:	08102b65 	.word	0x08102b65
 8102af0:	08102b65 	.word	0x08102b65
 8102af4:	08102b65 	.word	0x08102b65
 8102af8:	08102b65 	.word	0x08102b65
 8102afc:	08102b75 	.word	0x08102b75
 8102b00:	08102b65 	.word	0x08102b65
 8102b04:	08102b65 	.word	0x08102b65
 8102b08:	08102b65 	.word	0x08102b65
 8102b0c:	08102b65 	.word	0x08102b65
 8102b10:	08102b65 	.word	0x08102b65
 8102b14:	08102b65 	.word	0x08102b65
 8102b18:	08102b65 	.word	0x08102b65
 8102b1c:	08102b75 	.word	0x08102b75
 8102b20:	08102b65 	.word	0x08102b65
 8102b24:	08102b65 	.word	0x08102b65
 8102b28:	08102b65 	.word	0x08102b65
 8102b2c:	08102b65 	.word	0x08102b65
 8102b30:	08102b65 	.word	0x08102b65
 8102b34:	08102b65 	.word	0x08102b65
 8102b38:	08102b65 	.word	0x08102b65
 8102b3c:	08102b75 	.word	0x08102b75
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	3304      	adds	r3, #4
 8102b44:	2101      	movs	r1, #1
 8102b46:	4618      	mov	r0, r3
 8102b48:	f000 fdf8 	bl	810373c <RCCEx_PLL2_Config>
 8102b4c:	4603      	mov	r3, r0
 8102b4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102b50:	e011      	b.n	8102b76 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102b52:	687b      	ldr	r3, [r7, #4]
 8102b54:	3324      	adds	r3, #36	; 0x24
 8102b56:	2101      	movs	r1, #1
 8102b58:	4618      	mov	r0, r3
 8102b5a:	f000 fea1 	bl	81038a0 <RCCEx_PLL3_Config>
 8102b5e:	4603      	mov	r3, r0
 8102b60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102b62:	e008      	b.n	8102b76 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b64:	2301      	movs	r3, #1
 8102b66:	75fb      	strb	r3, [r7, #23]
      break;
 8102b68:	e005      	b.n	8102b76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8102b6a:	bf00      	nop
 8102b6c:	58024400 	.word	0x58024400
 8102b70:	58024800 	.word	0x58024800
      break;
 8102b74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b76:	7dfb      	ldrb	r3, [r7, #23]
 8102b78:	2b00      	cmp	r3, #0
 8102b7a:	d109      	bne.n	8102b90 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102b7c:	4b96      	ldr	r3, [pc, #600]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b80:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8102b84:	687b      	ldr	r3, [r7, #4]
 8102b86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102b88:	4993      	ldr	r1, [pc, #588]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102b8a:	4313      	orrs	r3, r2
 8102b8c:	654b      	str	r3, [r1, #84]	; 0x54
 8102b8e:	e001      	b.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b90:	7dfb      	ldrb	r3, [r7, #23]
 8102b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	681b      	ldr	r3, [r3, #0]
 8102b98:	f003 0302 	and.w	r3, r3, #2
 8102b9c:	2b00      	cmp	r3, #0
 8102b9e:	d038      	beq.n	8102c12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8102ba0:	687b      	ldr	r3, [r7, #4]
 8102ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102ba4:	2b05      	cmp	r3, #5
 8102ba6:	d821      	bhi.n	8102bec <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8102ba8:	a201      	add	r2, pc, #4	; (adr r2, 8102bb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8102baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bae:	bf00      	nop
 8102bb0:	08102bf3 	.word	0x08102bf3
 8102bb4:	08102bc9 	.word	0x08102bc9
 8102bb8:	08102bdb 	.word	0x08102bdb
 8102bbc:	08102bf3 	.word	0x08102bf3
 8102bc0:	08102bf3 	.word	0x08102bf3
 8102bc4:	08102bf3 	.word	0x08102bf3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	3304      	adds	r3, #4
 8102bcc:	2101      	movs	r1, #1
 8102bce:	4618      	mov	r0, r3
 8102bd0:	f000 fdb4 	bl	810373c <RCCEx_PLL2_Config>
 8102bd4:	4603      	mov	r3, r0
 8102bd6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102bd8:	e00c      	b.n	8102bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	3324      	adds	r3, #36	; 0x24
 8102bde:	2101      	movs	r1, #1
 8102be0:	4618      	mov	r0, r3
 8102be2:	f000 fe5d 	bl	81038a0 <RCCEx_PLL3_Config>
 8102be6:	4603      	mov	r3, r0
 8102be8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102bea:	e003      	b.n	8102bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102bec:	2301      	movs	r3, #1
 8102bee:	75fb      	strb	r3, [r7, #23]
      break;
 8102bf0:	e000      	b.n	8102bf4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8102bf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102bf4:	7dfb      	ldrb	r3, [r7, #23]
 8102bf6:	2b00      	cmp	r3, #0
 8102bf8:	d109      	bne.n	8102c0e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102bfa:	4b77      	ldr	r3, [pc, #476]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bfe:	f023 0207 	bic.w	r2, r3, #7
 8102c02:	687b      	ldr	r3, [r7, #4]
 8102c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102c06:	4974      	ldr	r1, [pc, #464]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102c08:	4313      	orrs	r3, r2
 8102c0a:	654b      	str	r3, [r1, #84]	; 0x54
 8102c0c:	e001      	b.n	8102c12 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c0e:	7dfb      	ldrb	r3, [r7, #23]
 8102c10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102c12:	687b      	ldr	r3, [r7, #4]
 8102c14:	681b      	ldr	r3, [r3, #0]
 8102c16:	f003 0304 	and.w	r3, r3, #4
 8102c1a:	2b00      	cmp	r3, #0
 8102c1c:	d03a      	beq.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102c24:	2b05      	cmp	r3, #5
 8102c26:	d821      	bhi.n	8102c6c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8102c28:	a201      	add	r2, pc, #4	; (adr r2, 8102c30 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8102c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102c2e:	bf00      	nop
 8102c30:	08102c73 	.word	0x08102c73
 8102c34:	08102c49 	.word	0x08102c49
 8102c38:	08102c5b 	.word	0x08102c5b
 8102c3c:	08102c73 	.word	0x08102c73
 8102c40:	08102c73 	.word	0x08102c73
 8102c44:	08102c73 	.word	0x08102c73
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102c48:	687b      	ldr	r3, [r7, #4]
 8102c4a:	3304      	adds	r3, #4
 8102c4c:	2101      	movs	r1, #1
 8102c4e:	4618      	mov	r0, r3
 8102c50:	f000 fd74 	bl	810373c <RCCEx_PLL2_Config>
 8102c54:	4603      	mov	r3, r0
 8102c56:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102c58:	e00c      	b.n	8102c74 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	3324      	adds	r3, #36	; 0x24
 8102c5e:	2101      	movs	r1, #1
 8102c60:	4618      	mov	r0, r3
 8102c62:	f000 fe1d 	bl	81038a0 <RCCEx_PLL3_Config>
 8102c66:	4603      	mov	r3, r0
 8102c68:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102c6a:	e003      	b.n	8102c74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102c6c:	2301      	movs	r3, #1
 8102c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8102c70:	e000      	b.n	8102c74 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8102c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c74:	7dfb      	ldrb	r3, [r7, #23]
 8102c76:	2b00      	cmp	r3, #0
 8102c78:	d10a      	bne.n	8102c90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102c7a:	4b57      	ldr	r3, [pc, #348]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c7e:	f023 0207 	bic.w	r2, r3, #7
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102c88:	4953      	ldr	r1, [pc, #332]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102c8a:	4313      	orrs	r3, r2
 8102c8c:	658b      	str	r3, [r1, #88]	; 0x58
 8102c8e:	e001      	b.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c90:	7dfb      	ldrb	r3, [r7, #23]
 8102c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	681b      	ldr	r3, [r3, #0]
 8102c98:	f003 0320 	and.w	r3, r3, #32
 8102c9c:	2b00      	cmp	r3, #0
 8102c9e:	d04b      	beq.n	8102d38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102caa:	d02e      	beq.n	8102d0a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8102cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102cb0:	d828      	bhi.n	8102d04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102cb6:	d02a      	beq.n	8102d0e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102cbc:	d822      	bhi.n	8102d04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102cbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102cc2:	d026      	beq.n	8102d12 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8102cc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102cc8:	d81c      	bhi.n	8102d04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102cce:	d010      	beq.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8102cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102cd4:	d816      	bhi.n	8102d04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8102cd6:	2b00      	cmp	r3, #0
 8102cd8:	d01d      	beq.n	8102d16 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8102cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102cde:	d111      	bne.n	8102d04 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102ce0:	687b      	ldr	r3, [r7, #4]
 8102ce2:	3304      	adds	r3, #4
 8102ce4:	2100      	movs	r1, #0
 8102ce6:	4618      	mov	r0, r3
 8102ce8:	f000 fd28 	bl	810373c <RCCEx_PLL2_Config>
 8102cec:	4603      	mov	r3, r0
 8102cee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102cf0:	e012      	b.n	8102d18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	3324      	adds	r3, #36	; 0x24
 8102cf6:	2102      	movs	r1, #2
 8102cf8:	4618      	mov	r0, r3
 8102cfa:	f000 fdd1 	bl	81038a0 <RCCEx_PLL3_Config>
 8102cfe:	4603      	mov	r3, r0
 8102d00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102d02:	e009      	b.n	8102d18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d04:	2301      	movs	r3, #1
 8102d06:	75fb      	strb	r3, [r7, #23]
      break;
 8102d08:	e006      	b.n	8102d18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102d0a:	bf00      	nop
 8102d0c:	e004      	b.n	8102d18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102d0e:	bf00      	nop
 8102d10:	e002      	b.n	8102d18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102d12:	bf00      	nop
 8102d14:	e000      	b.n	8102d18 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8102d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d18:	7dfb      	ldrb	r3, [r7, #23]
 8102d1a:	2b00      	cmp	r3, #0
 8102d1c:	d10a      	bne.n	8102d34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102d1e:	4b2e      	ldr	r3, [pc, #184]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102d2c:	492a      	ldr	r1, [pc, #168]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102d2e:	4313      	orrs	r3, r2
 8102d30:	654b      	str	r3, [r1, #84]	; 0x54
 8102d32:	e001      	b.n	8102d38 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d34:	7dfb      	ldrb	r3, [r7, #23]
 8102d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	681b      	ldr	r3, [r3, #0]
 8102d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102d40:	2b00      	cmp	r3, #0
 8102d42:	d04d      	beq.n	8102de0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102d4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102d4e:	d02e      	beq.n	8102dae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8102d50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102d54:	d828      	bhi.n	8102da8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102d5a:	d02a      	beq.n	8102db2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8102d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102d60:	d822      	bhi.n	8102da8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102d62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102d66:	d026      	beq.n	8102db6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8102d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102d6c:	d81c      	bhi.n	8102da8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102d72:	d010      	beq.n	8102d96 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8102d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102d78:	d816      	bhi.n	8102da8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8102d7a:	2b00      	cmp	r3, #0
 8102d7c:	d01d      	beq.n	8102dba <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8102d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102d82:	d111      	bne.n	8102da8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	3304      	adds	r3, #4
 8102d88:	2100      	movs	r1, #0
 8102d8a:	4618      	mov	r0, r3
 8102d8c:	f000 fcd6 	bl	810373c <RCCEx_PLL2_Config>
 8102d90:	4603      	mov	r3, r0
 8102d92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102d94:	e012      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102d96:	687b      	ldr	r3, [r7, #4]
 8102d98:	3324      	adds	r3, #36	; 0x24
 8102d9a:	2102      	movs	r1, #2
 8102d9c:	4618      	mov	r0, r3
 8102d9e:	f000 fd7f 	bl	81038a0 <RCCEx_PLL3_Config>
 8102da2:	4603      	mov	r3, r0
 8102da4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102da6:	e009      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102da8:	2301      	movs	r3, #1
 8102daa:	75fb      	strb	r3, [r7, #23]
      break;
 8102dac:	e006      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102dae:	bf00      	nop
 8102db0:	e004      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102db2:	bf00      	nop
 8102db4:	e002      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102db6:	bf00      	nop
 8102db8:	e000      	b.n	8102dbc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8102dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102dbc:	7dfb      	ldrb	r3, [r7, #23]
 8102dbe:	2b00      	cmp	r3, #0
 8102dc0:	d10c      	bne.n	8102ddc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102dc2:	4b05      	ldr	r3, [pc, #20]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102dc6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102dd0:	4901      	ldr	r1, [pc, #4]	; (8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8102dd2:	4313      	orrs	r3, r2
 8102dd4:	658b      	str	r3, [r1, #88]	; 0x58
 8102dd6:	e003      	b.n	8102de0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8102dd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ddc:	7dfb      	ldrb	r3, [r7, #23]
 8102dde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102de8:	2b00      	cmp	r3, #0
 8102dea:	d04b      	beq.n	8102e84 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102df2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102df6:	d02e      	beq.n	8102e56 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8102df8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102dfc:	d828      	bhi.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102e02:	d02a      	beq.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102e08:	d822      	bhi.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102e0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102e0e:	d026      	beq.n	8102e5e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8102e10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102e14:	d81c      	bhi.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102e1a:	d010      	beq.n	8102e3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8102e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102e20:	d816      	bhi.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8102e22:	2b00      	cmp	r3, #0
 8102e24:	d01d      	beq.n	8102e62 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8102e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102e2a:	d111      	bne.n	8102e50 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	3304      	adds	r3, #4
 8102e30:	2100      	movs	r1, #0
 8102e32:	4618      	mov	r0, r3
 8102e34:	f000 fc82 	bl	810373c <RCCEx_PLL2_Config>
 8102e38:	4603      	mov	r3, r0
 8102e3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102e3c:	e012      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102e3e:	687b      	ldr	r3, [r7, #4]
 8102e40:	3324      	adds	r3, #36	; 0x24
 8102e42:	2102      	movs	r1, #2
 8102e44:	4618      	mov	r0, r3
 8102e46:	f000 fd2b 	bl	81038a0 <RCCEx_PLL3_Config>
 8102e4a:	4603      	mov	r3, r0
 8102e4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102e4e:	e009      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e50:	2301      	movs	r3, #1
 8102e52:	75fb      	strb	r3, [r7, #23]
      break;
 8102e54:	e006      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102e56:	bf00      	nop
 8102e58:	e004      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102e5a:	bf00      	nop
 8102e5c:	e002      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102e5e:	bf00      	nop
 8102e60:	e000      	b.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8102e62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e64:	7dfb      	ldrb	r3, [r7, #23]
 8102e66:	2b00      	cmp	r3, #0
 8102e68:	d10a      	bne.n	8102e80 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102e6a:	4b9d      	ldr	r3, [pc, #628]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102e78:	4999      	ldr	r1, [pc, #612]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102e7a:	4313      	orrs	r3, r2
 8102e7c:	658b      	str	r3, [r1, #88]	; 0x58
 8102e7e:	e001      	b.n	8102e84 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e80:	7dfb      	ldrb	r3, [r7, #23]
 8102e82:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102e84:	687b      	ldr	r3, [r7, #4]
 8102e86:	681b      	ldr	r3, [r3, #0]
 8102e88:	f003 0308 	and.w	r3, r3, #8
 8102e8c:	2b00      	cmp	r3, #0
 8102e8e:	d01a      	beq.n	8102ec6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102e9a:	d10a      	bne.n	8102eb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	3324      	adds	r3, #36	; 0x24
 8102ea0:	2102      	movs	r1, #2
 8102ea2:	4618      	mov	r0, r3
 8102ea4:	f000 fcfc 	bl	81038a0 <RCCEx_PLL3_Config>
 8102ea8:	4603      	mov	r3, r0
 8102eaa:	2b00      	cmp	r3, #0
 8102eac:	d001      	beq.n	8102eb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8102eae:	2301      	movs	r3, #1
 8102eb0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102eb2:	4b8b      	ldr	r3, [pc, #556]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102eb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102ec0:	4987      	ldr	r1, [pc, #540]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102ec2:	4313      	orrs	r3, r2
 8102ec4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102ec6:	687b      	ldr	r3, [r7, #4]
 8102ec8:	681b      	ldr	r3, [r3, #0]
 8102eca:	f003 0310 	and.w	r3, r3, #16
 8102ece:	2b00      	cmp	r3, #0
 8102ed0:	d01a      	beq.n	8102f08 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102edc:	d10a      	bne.n	8102ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102ede:	687b      	ldr	r3, [r7, #4]
 8102ee0:	3324      	adds	r3, #36	; 0x24
 8102ee2:	2102      	movs	r1, #2
 8102ee4:	4618      	mov	r0, r3
 8102ee6:	f000 fcdb 	bl	81038a0 <RCCEx_PLL3_Config>
 8102eea:	4603      	mov	r3, r0
 8102eec:	2b00      	cmp	r3, #0
 8102eee:	d001      	beq.n	8102ef4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8102ef0:	2301      	movs	r3, #1
 8102ef2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102ef4:	4b7a      	ldr	r3, [pc, #488]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ef8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102f02:	4977      	ldr	r1, [pc, #476]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102f04:	4313      	orrs	r3, r2
 8102f06:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102f10:	2b00      	cmp	r3, #0
 8102f12:	d034      	beq.n	8102f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102f14:	687b      	ldr	r3, [r7, #4]
 8102f16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102f1e:	d01d      	beq.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8102f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102f24:	d817      	bhi.n	8102f56 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8102f26:	2b00      	cmp	r3, #0
 8102f28:	d003      	beq.n	8102f32 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8102f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102f2e:	d009      	beq.n	8102f44 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8102f30:	e011      	b.n	8102f56 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	3304      	adds	r3, #4
 8102f36:	2100      	movs	r1, #0
 8102f38:	4618      	mov	r0, r3
 8102f3a:	f000 fbff 	bl	810373c <RCCEx_PLL2_Config>
 8102f3e:	4603      	mov	r3, r0
 8102f40:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102f42:	e00c      	b.n	8102f5e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102f44:	687b      	ldr	r3, [r7, #4]
 8102f46:	3324      	adds	r3, #36	; 0x24
 8102f48:	2102      	movs	r1, #2
 8102f4a:	4618      	mov	r0, r3
 8102f4c:	f000 fca8 	bl	81038a0 <RCCEx_PLL3_Config>
 8102f50:	4603      	mov	r3, r0
 8102f52:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102f54:	e003      	b.n	8102f5e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102f56:	2301      	movs	r3, #1
 8102f58:	75fb      	strb	r3, [r7, #23]
      break;
 8102f5a:	e000      	b.n	8102f5e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8102f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f5e:	7dfb      	ldrb	r3, [r7, #23]
 8102f60:	2b00      	cmp	r3, #0
 8102f62:	d10a      	bne.n	8102f7a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102f64:	4b5e      	ldr	r3, [pc, #376]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102f72:	495b      	ldr	r1, [pc, #364]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102f74:	4313      	orrs	r3, r2
 8102f76:	658b      	str	r3, [r1, #88]	; 0x58
 8102f78:	e001      	b.n	8102f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f7a:	7dfb      	ldrb	r3, [r7, #23]
 8102f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102f86:	2b00      	cmp	r3, #0
 8102f88:	d033      	beq.n	8102ff2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102f94:	d01c      	beq.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8102f96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102f9a:	d816      	bhi.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8102f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102fa0:	d003      	beq.n	8102faa <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8102fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102fa6:	d007      	beq.n	8102fb8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8102fa8:	e00f      	b.n	8102fca <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102faa:	4b4d      	ldr	r3, [pc, #308]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fae:	4a4c      	ldr	r2, [pc, #304]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8102fb6:	e00c      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	3324      	adds	r3, #36	; 0x24
 8102fbc:	2101      	movs	r1, #1
 8102fbe:	4618      	mov	r0, r3
 8102fc0:	f000 fc6e 	bl	81038a0 <RCCEx_PLL3_Config>
 8102fc4:	4603      	mov	r3, r0
 8102fc6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102fc8:	e003      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102fca:	2301      	movs	r3, #1
 8102fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8102fce:	e000      	b.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8102fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fd2:	7dfb      	ldrb	r3, [r7, #23]
 8102fd4:	2b00      	cmp	r3, #0
 8102fd6:	d10a      	bne.n	8102fee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102fd8:	4b41      	ldr	r3, [pc, #260]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102fe6:	493e      	ldr	r1, [pc, #248]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8102fe8:	4313      	orrs	r3, r2
 8102fea:	654b      	str	r3, [r1, #84]	; 0x54
 8102fec:	e001      	b.n	8102ff2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fee:	7dfb      	ldrb	r3, [r7, #23]
 8102ff0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	681b      	ldr	r3, [r3, #0]
 8102ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102ffa:	2b00      	cmp	r3, #0
 8102ffc:	d029      	beq.n	8103052 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8102ffe:	687b      	ldr	r3, [r7, #4]
 8103000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103002:	2b00      	cmp	r3, #0
 8103004:	d003      	beq.n	810300e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8103006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810300a:	d007      	beq.n	810301c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 810300c:	e00f      	b.n	810302e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810300e:	4b34      	ldr	r3, [pc, #208]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103012:	4a33      	ldr	r2, [pc, #204]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103018:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810301a:	e00b      	b.n	8103034 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810301c:	687b      	ldr	r3, [r7, #4]
 810301e:	3304      	adds	r3, #4
 8103020:	2102      	movs	r1, #2
 8103022:	4618      	mov	r0, r3
 8103024:	f000 fb8a 	bl	810373c <RCCEx_PLL2_Config>
 8103028:	4603      	mov	r3, r0
 810302a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810302c:	e002      	b.n	8103034 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 810302e:	2301      	movs	r3, #1
 8103030:	75fb      	strb	r3, [r7, #23]
      break;
 8103032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103034:	7dfb      	ldrb	r3, [r7, #23]
 8103036:	2b00      	cmp	r3, #0
 8103038:	d109      	bne.n	810304e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810303a:	4b29      	ldr	r3, [pc, #164]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 810303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810303e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8103042:	687b      	ldr	r3, [r7, #4]
 8103044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103046:	4926      	ldr	r1, [pc, #152]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8103048:	4313      	orrs	r3, r2
 810304a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810304c:	e001      	b.n	8103052 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810304e:	7dfb      	ldrb	r3, [r7, #23]
 8103050:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	681b      	ldr	r3, [r3, #0]
 8103056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810305a:	2b00      	cmp	r3, #0
 810305c:	d00a      	beq.n	8103074 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810305e:	687b      	ldr	r3, [r7, #4]
 8103060:	3324      	adds	r3, #36	; 0x24
 8103062:	2102      	movs	r1, #2
 8103064:	4618      	mov	r0, r3
 8103066:	f000 fc1b 	bl	81038a0 <RCCEx_PLL3_Config>
 810306a:	4603      	mov	r3, r0
 810306c:	2b00      	cmp	r3, #0
 810306e:	d001      	beq.n	8103074 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8103070:	2301      	movs	r3, #1
 8103072:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103074:	687b      	ldr	r3, [r7, #4]
 8103076:	681b      	ldr	r3, [r3, #0]
 8103078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810307c:	2b00      	cmp	r3, #0
 810307e:	d033      	beq.n	81030e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103080:	687b      	ldr	r3, [r7, #4]
 8103082:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103088:	d017      	beq.n	81030ba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810308a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810308e:	d811      	bhi.n	81030b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8103090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103094:	d013      	beq.n	81030be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103096:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810309a:	d80b      	bhi.n	81030b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 810309c:	2b00      	cmp	r3, #0
 810309e:	d010      	beq.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 81030a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81030a4:	d106      	bne.n	81030b4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030a6:	4b0e      	ldr	r3, [pc, #56]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030aa:	4a0d      	ldr	r2, [pc, #52]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81030b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81030b2:	e007      	b.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81030b4:	2301      	movs	r3, #1
 81030b6:	75fb      	strb	r3, [r7, #23]
      break;
 81030b8:	e004      	b.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81030ba:	bf00      	nop
 81030bc:	e002      	b.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81030be:	bf00      	nop
 81030c0:	e000      	b.n	81030c4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 81030c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030c4:	7dfb      	ldrb	r3, [r7, #23]
 81030c6:	2b00      	cmp	r3, #0
 81030c8:	d10c      	bne.n	81030e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81030ca:	4b05      	ldr	r3, [pc, #20]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81030d2:	687b      	ldr	r3, [r7, #4]
 81030d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81030d6:	4902      	ldr	r1, [pc, #8]	; (81030e0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 81030d8:	4313      	orrs	r3, r2
 81030da:	654b      	str	r3, [r1, #84]	; 0x54
 81030dc:	e004      	b.n	81030e8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 81030de:	bf00      	nop
 81030e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030e4:	7dfb      	ldrb	r3, [r7, #23]
 81030e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81030f0:	2b00      	cmp	r3, #0
 81030f2:	d008      	beq.n	8103106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81030f4:	4b31      	ldr	r3, [pc, #196]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81030f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81030f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81030fc:	687b      	ldr	r3, [r7, #4]
 81030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103100:	492e      	ldr	r1, [pc, #184]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103102:	4313      	orrs	r3, r2
 8103104:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103106:	687b      	ldr	r3, [r7, #4]
 8103108:	681b      	ldr	r3, [r3, #0]
 810310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810310e:	2b00      	cmp	r3, #0
 8103110:	d009      	beq.n	8103126 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103112:	4b2a      	ldr	r3, [pc, #168]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103114:	691b      	ldr	r3, [r3, #16]
 8103116:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810311a:	687b      	ldr	r3, [r7, #4]
 810311c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103120:	4926      	ldr	r1, [pc, #152]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103122:	4313      	orrs	r3, r2
 8103124:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810312e:	2b00      	cmp	r3, #0
 8103130:	d008      	beq.n	8103144 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103132:	4b22      	ldr	r3, [pc, #136]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103136:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810313e:	491f      	ldr	r1, [pc, #124]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103140:	4313      	orrs	r3, r2
 8103142:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103144:	687b      	ldr	r3, [r7, #4]
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810314c:	2b00      	cmp	r3, #0
 810314e:	d00d      	beq.n	810316c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103150:	4b1a      	ldr	r3, [pc, #104]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103152:	691b      	ldr	r3, [r3, #16]
 8103154:	4a19      	ldr	r2, [pc, #100]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103156:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810315a:	6113      	str	r3, [r2, #16]
 810315c:	4b17      	ldr	r3, [pc, #92]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 810315e:	691a      	ldr	r2, [r3, #16]
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103166:	4915      	ldr	r1, [pc, #84]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103168:	4313      	orrs	r3, r2
 810316a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810316c:	687b      	ldr	r3, [r7, #4]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	2b00      	cmp	r3, #0
 8103172:	da08      	bge.n	8103186 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103174:	4b11      	ldr	r3, [pc, #68]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103178:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103180:	490e      	ldr	r1, [pc, #56]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103182:	4313      	orrs	r3, r2
 8103184:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810318e:	2b00      	cmp	r3, #0
 8103190:	d009      	beq.n	81031a6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103192:	4b0a      	ldr	r3, [pc, #40]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8103194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103196:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81031a0:	4906      	ldr	r1, [pc, #24]	; (81031bc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 81031a2:	4313      	orrs	r3, r2
 81031a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81031a6:	7dbb      	ldrb	r3, [r7, #22]
 81031a8:	2b00      	cmp	r3, #0
 81031aa:	d101      	bne.n	81031b0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 81031ac:	2300      	movs	r3, #0
 81031ae:	e000      	b.n	81031b2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 81031b0:	2301      	movs	r3, #1
}
 81031b2:	4618      	mov	r0, r3
 81031b4:	3718      	adds	r7, #24
 81031b6:	46bd      	mov	sp, r7
 81031b8:	bd80      	pop	{r7, pc}
 81031ba:	bf00      	nop
 81031bc:	58024400 	.word	0x58024400

081031c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81031c0:	b580      	push	{r7, lr}
 81031c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81031c4:	f7ff f858 	bl	8102278 <HAL_RCC_GetHCLKFreq>
 81031c8:	4602      	mov	r2, r0
 81031ca:	4b06      	ldr	r3, [pc, #24]	; (81031e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81031cc:	6a1b      	ldr	r3, [r3, #32]
 81031ce:	091b      	lsrs	r3, r3, #4
 81031d0:	f003 0307 	and.w	r3, r3, #7
 81031d4:	4904      	ldr	r1, [pc, #16]	; (81031e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81031d6:	5ccb      	ldrb	r3, [r1, r3]
 81031d8:	f003 031f 	and.w	r3, r3, #31
 81031dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81031e0:	4618      	mov	r0, r3
 81031e2:	bd80      	pop	{r7, pc}
 81031e4:	58024400 	.word	0x58024400
 81031e8:	0810645c 	.word	0x0810645c

081031ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81031ec:	b480      	push	{r7}
 81031ee:	b089      	sub	sp, #36	; 0x24
 81031f0:	af00      	add	r7, sp, #0
 81031f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81031f4:	4ba1      	ldr	r3, [pc, #644]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81031f8:	f003 0303 	and.w	r3, r3, #3
 81031fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81031fe:	4b9f      	ldr	r3, [pc, #636]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103202:	0b1b      	lsrs	r3, r3, #12
 8103204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103208:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810320a:	4b9c      	ldr	r3, [pc, #624]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810320e:	091b      	lsrs	r3, r3, #4
 8103210:	f003 0301 	and.w	r3, r3, #1
 8103214:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8103216:	4b99      	ldr	r3, [pc, #612]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810321a:	08db      	lsrs	r3, r3, #3
 810321c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103220:	693a      	ldr	r2, [r7, #16]
 8103222:	fb02 f303 	mul.w	r3, r2, r3
 8103226:	ee07 3a90 	vmov	s15, r3
 810322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810322e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103232:	697b      	ldr	r3, [r7, #20]
 8103234:	2b00      	cmp	r3, #0
 8103236:	f000 8111 	beq.w	810345c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810323a:	69bb      	ldr	r3, [r7, #24]
 810323c:	2b02      	cmp	r3, #2
 810323e:	f000 8083 	beq.w	8103348 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103242:	69bb      	ldr	r3, [r7, #24]
 8103244:	2b02      	cmp	r3, #2
 8103246:	f200 80a1 	bhi.w	810338c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810324a:	69bb      	ldr	r3, [r7, #24]
 810324c:	2b00      	cmp	r3, #0
 810324e:	d003      	beq.n	8103258 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103250:	69bb      	ldr	r3, [r7, #24]
 8103252:	2b01      	cmp	r3, #1
 8103254:	d056      	beq.n	8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103256:	e099      	b.n	810338c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103258:	4b88      	ldr	r3, [pc, #544]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810325a:	681b      	ldr	r3, [r3, #0]
 810325c:	f003 0320 	and.w	r3, r3, #32
 8103260:	2b00      	cmp	r3, #0
 8103262:	d02d      	beq.n	81032c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103264:	4b85      	ldr	r3, [pc, #532]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	08db      	lsrs	r3, r3, #3
 810326a:	f003 0303 	and.w	r3, r3, #3
 810326e:	4a84      	ldr	r2, [pc, #528]	; (8103480 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103270:	fa22 f303 	lsr.w	r3, r2, r3
 8103274:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103276:	68bb      	ldr	r3, [r7, #8]
 8103278:	ee07 3a90 	vmov	s15, r3
 810327c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103280:	697b      	ldr	r3, [r7, #20]
 8103282:	ee07 3a90 	vmov	s15, r3
 8103286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810328a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810328e:	4b7b      	ldr	r3, [pc, #492]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103296:	ee07 3a90 	vmov	s15, r3
 810329a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810329e:	ed97 6a03 	vldr	s12, [r7, #12]
 81032a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81032a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81032aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81032ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81032b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81032b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81032be:	e087      	b.n	81033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81032c0:	697b      	ldr	r3, [r7, #20]
 81032c2:	ee07 3a90 	vmov	s15, r3
 81032c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103488 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81032ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81032d2:	4b6a      	ldr	r3, [pc, #424]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81032d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032da:	ee07 3a90 	vmov	s15, r3
 81032de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81032e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81032ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81032ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81032f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81032f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81032fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103302:	e065      	b.n	81033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103304:	697b      	ldr	r3, [r7, #20]
 8103306:	ee07 3a90 	vmov	s15, r3
 810330a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810330e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810348c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103316:	4b59      	ldr	r3, [pc, #356]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810331a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810331e:	ee07 3a90 	vmov	s15, r3
 8103322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103326:	ed97 6a03 	vldr	s12, [r7, #12]
 810332a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810332e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810333a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810333e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103346:	e043      	b.n	81033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103348:	697b      	ldr	r3, [r7, #20]
 810334a:	ee07 3a90 	vmov	s15, r3
 810334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103352:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103490 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810335a:	4b48      	ldr	r3, [pc, #288]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810335e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103362:	ee07 3a90 	vmov	s15, r3
 8103366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810336a:	ed97 6a03 	vldr	s12, [r7, #12]
 810336e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810337a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810337e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810338a:	e021      	b.n	81033d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810338c:	697b      	ldr	r3, [r7, #20]
 810338e:	ee07 3a90 	vmov	s15, r3
 8103392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103396:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810348c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810339a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810339e:	4b37      	ldr	r3, [pc, #220]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81033a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033a6:	ee07 3a90 	vmov	s15, r3
 81033aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81033b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103484 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81033b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81033ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81033be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81033c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81033ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81033d0:	4b2a      	ldr	r3, [pc, #168]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81033d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81033d4:	0a5b      	lsrs	r3, r3, #9
 81033d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81033da:	ee07 3a90 	vmov	s15, r3
 81033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81033e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81033ea:	edd7 6a07 	vldr	s13, [r7, #28]
 81033ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81033f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81033f6:	ee17 2a90 	vmov	r2, s15
 81033fa:	687b      	ldr	r3, [r7, #4]
 81033fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81033fe:	4b1f      	ldr	r3, [pc, #124]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103402:	0c1b      	lsrs	r3, r3, #16
 8103404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103408:	ee07 3a90 	vmov	s15, r3
 810340c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103414:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103418:	edd7 6a07 	vldr	s13, [r7, #28]
 810341c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103424:	ee17 2a90 	vmov	r2, s15
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810342c:	4b13      	ldr	r3, [pc, #76]	; (810347c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103430:	0e1b      	lsrs	r3, r3, #24
 8103432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103436:	ee07 3a90 	vmov	s15, r3
 810343a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810343e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103446:	edd7 6a07 	vldr	s13, [r7, #28]
 810344a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810344e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103452:	ee17 2a90 	vmov	r2, s15
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810345a:	e008      	b.n	810346e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810345c:	687b      	ldr	r3, [r7, #4]
 810345e:	2200      	movs	r2, #0
 8103460:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	2200      	movs	r2, #0
 8103466:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103468:	687b      	ldr	r3, [r7, #4]
 810346a:	2200      	movs	r2, #0
 810346c:	609a      	str	r2, [r3, #8]
}
 810346e:	bf00      	nop
 8103470:	3724      	adds	r7, #36	; 0x24
 8103472:	46bd      	mov	sp, r7
 8103474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103478:	4770      	bx	lr
 810347a:	bf00      	nop
 810347c:	58024400 	.word	0x58024400
 8103480:	03d09000 	.word	0x03d09000
 8103484:	46000000 	.word	0x46000000
 8103488:	4c742400 	.word	0x4c742400
 810348c:	4a742400 	.word	0x4a742400
 8103490:	4af42400 	.word	0x4af42400

08103494 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8103494:	b480      	push	{r7}
 8103496:	b089      	sub	sp, #36	; 0x24
 8103498:	af00      	add	r7, sp, #0
 810349a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810349c:	4ba1      	ldr	r3, [pc, #644]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810349e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81034a0:	f003 0303 	and.w	r3, r3, #3
 81034a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81034a6:	4b9f      	ldr	r3, [pc, #636]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81034aa:	0d1b      	lsrs	r3, r3, #20
 81034ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81034b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81034b2:	4b9c      	ldr	r3, [pc, #624]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034b6:	0a1b      	lsrs	r3, r3, #8
 81034b8:	f003 0301 	and.w	r3, r3, #1
 81034bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81034be:	4b99      	ldr	r3, [pc, #612]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81034c2:	08db      	lsrs	r3, r3, #3
 81034c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81034c8:	693a      	ldr	r2, [r7, #16]
 81034ca:	fb02 f303 	mul.w	r3, r2, r3
 81034ce:	ee07 3a90 	vmov	s15, r3
 81034d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81034da:	697b      	ldr	r3, [r7, #20]
 81034dc:	2b00      	cmp	r3, #0
 81034de:	f000 8111 	beq.w	8103704 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81034e2:	69bb      	ldr	r3, [r7, #24]
 81034e4:	2b02      	cmp	r3, #2
 81034e6:	f000 8083 	beq.w	81035f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81034ea:	69bb      	ldr	r3, [r7, #24]
 81034ec:	2b02      	cmp	r3, #2
 81034ee:	f200 80a1 	bhi.w	8103634 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81034f2:	69bb      	ldr	r3, [r7, #24]
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	d003      	beq.n	8103500 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81034f8:	69bb      	ldr	r3, [r7, #24]
 81034fa:	2b01      	cmp	r3, #1
 81034fc:	d056      	beq.n	81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81034fe:	e099      	b.n	8103634 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103500:	4b88      	ldr	r3, [pc, #544]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103502:	681b      	ldr	r3, [r3, #0]
 8103504:	f003 0320 	and.w	r3, r3, #32
 8103508:	2b00      	cmp	r3, #0
 810350a:	d02d      	beq.n	8103568 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810350c:	4b85      	ldr	r3, [pc, #532]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810350e:	681b      	ldr	r3, [r3, #0]
 8103510:	08db      	lsrs	r3, r3, #3
 8103512:	f003 0303 	and.w	r3, r3, #3
 8103516:	4a84      	ldr	r2, [pc, #528]	; (8103728 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8103518:	fa22 f303 	lsr.w	r3, r2, r3
 810351c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810351e:	68bb      	ldr	r3, [r7, #8]
 8103520:	ee07 3a90 	vmov	s15, r3
 8103524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103528:	697b      	ldr	r3, [r7, #20]
 810352a:	ee07 3a90 	vmov	s15, r3
 810352e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103536:	4b7b      	ldr	r3, [pc, #492]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810353a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810353e:	ee07 3a90 	vmov	s15, r3
 8103542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103546:	ed97 6a03 	vldr	s12, [r7, #12]
 810354a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810372c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810354e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810355a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810355e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103562:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103566:	e087      	b.n	8103678 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103568:	697b      	ldr	r3, [r7, #20]
 810356a:	ee07 3a90 	vmov	s15, r3
 810356e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103572:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103730 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8103576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810357a:	4b6a      	ldr	r3, [pc, #424]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103582:	ee07 3a90 	vmov	s15, r3
 8103586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810358a:	ed97 6a03 	vldr	s12, [r7, #12]
 810358e:	eddf 5a67 	vldr	s11, [pc, #412]	; 810372c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810359a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810359e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81035aa:	e065      	b.n	8103678 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81035ac:	697b      	ldr	r3, [r7, #20]
 81035ae:	ee07 3a90 	vmov	s15, r3
 81035b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103734 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81035ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035be:	4b59      	ldr	r3, [pc, #356]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81035c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035c6:	ee07 3a90 	vmov	s15, r3
 81035ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81035d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 810372c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81035d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81035ee:	e043      	b.n	8103678 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81035f0:	697b      	ldr	r3, [r7, #20]
 81035f2:	ee07 3a90 	vmov	s15, r3
 81035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103738 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81035fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103602:	4b48      	ldr	r3, [pc, #288]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810360a:	ee07 3a90 	vmov	s15, r3
 810360e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103612:	ed97 6a03 	vldr	s12, [r7, #12]
 8103616:	eddf 5a45 	vldr	s11, [pc, #276]	; 810372c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810361a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810361e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810362a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810362e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103632:	e021      	b.n	8103678 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103634:	697b      	ldr	r3, [r7, #20]
 8103636:	ee07 3a90 	vmov	s15, r3
 810363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810363e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103734 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103646:	4b37      	ldr	r3, [pc, #220]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810364a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810364e:	ee07 3a90 	vmov	s15, r3
 8103652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103656:	ed97 6a03 	vldr	s12, [r7, #12]
 810365a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810372c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810365e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810366a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810366e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103672:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103676:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8103678:	4b2a      	ldr	r3, [pc, #168]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810367c:	0a5b      	lsrs	r3, r3, #9
 810367e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103682:	ee07 3a90 	vmov	s15, r3
 8103686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810368a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810368e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103692:	edd7 6a07 	vldr	s13, [r7, #28]
 8103696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810369a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810369e:	ee17 2a90 	vmov	r2, s15
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81036a6:	4b1f      	ldr	r3, [pc, #124]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81036aa:	0c1b      	lsrs	r3, r3, #16
 81036ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81036b0:	ee07 3a90 	vmov	s15, r3
 81036b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81036bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81036c0:	edd7 6a07 	vldr	s13, [r7, #28]
 81036c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81036c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81036cc:	ee17 2a90 	vmov	r2, s15
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81036d4:	4b13      	ldr	r3, [pc, #76]	; (8103724 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81036d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81036d8:	0e1b      	lsrs	r3, r3, #24
 81036da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81036de:	ee07 3a90 	vmov	s15, r3
 81036e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81036ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 81036ee:	edd7 6a07 	vldr	s13, [r7, #28]
 81036f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81036f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81036fa:	ee17 2a90 	vmov	r2, s15
 81036fe:	687b      	ldr	r3, [r7, #4]
 8103700:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103702:	e008      	b.n	8103716 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	2200      	movs	r2, #0
 8103708:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	2200      	movs	r2, #0
 810370e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	2200      	movs	r2, #0
 8103714:	609a      	str	r2, [r3, #8]
}
 8103716:	bf00      	nop
 8103718:	3724      	adds	r7, #36	; 0x24
 810371a:	46bd      	mov	sp, r7
 810371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103720:	4770      	bx	lr
 8103722:	bf00      	nop
 8103724:	58024400 	.word	0x58024400
 8103728:	03d09000 	.word	0x03d09000
 810372c:	46000000 	.word	0x46000000
 8103730:	4c742400 	.word	0x4c742400
 8103734:	4a742400 	.word	0x4a742400
 8103738:	4af42400 	.word	0x4af42400

0810373c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810373c:	b580      	push	{r7, lr}
 810373e:	b084      	sub	sp, #16
 8103740:	af00      	add	r7, sp, #0
 8103742:	6078      	str	r0, [r7, #4]
 8103744:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103746:	2300      	movs	r3, #0
 8103748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810374a:	4b54      	ldr	r3, [pc, #336]	; (810389c <RCCEx_PLL2_Config+0x160>)
 810374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810374e:	f003 0303 	and.w	r3, r3, #3
 8103752:	2b03      	cmp	r3, #3
 8103754:	d101      	bne.n	810375a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103756:	2301      	movs	r3, #1
 8103758:	e09b      	b.n	8103892 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810375a:	4b50      	ldr	r3, [pc, #320]	; (810389c <RCCEx_PLL2_Config+0x160>)
 810375c:	681b      	ldr	r3, [r3, #0]
 810375e:	4a4f      	ldr	r2, [pc, #316]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103760:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103766:	f7fd fc11 	bl	8100f8c <HAL_GetTick>
 810376a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810376c:	e008      	b.n	8103780 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810376e:	f7fd fc0d 	bl	8100f8c <HAL_GetTick>
 8103772:	4602      	mov	r2, r0
 8103774:	68bb      	ldr	r3, [r7, #8]
 8103776:	1ad3      	subs	r3, r2, r3
 8103778:	2b02      	cmp	r3, #2
 810377a:	d901      	bls.n	8103780 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810377c:	2303      	movs	r3, #3
 810377e:	e088      	b.n	8103892 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103780:	4b46      	ldr	r3, [pc, #280]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103788:	2b00      	cmp	r3, #0
 810378a:	d1f0      	bne.n	810376e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810378c:	4b43      	ldr	r3, [pc, #268]	; (810389c <RCCEx_PLL2_Config+0x160>)
 810378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103790:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	681b      	ldr	r3, [r3, #0]
 8103798:	031b      	lsls	r3, r3, #12
 810379a:	4940      	ldr	r1, [pc, #256]	; (810389c <RCCEx_PLL2_Config+0x160>)
 810379c:	4313      	orrs	r3, r2
 810379e:	628b      	str	r3, [r1, #40]	; 0x28
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	685b      	ldr	r3, [r3, #4]
 81037a4:	3b01      	subs	r3, #1
 81037a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81037aa:	687b      	ldr	r3, [r7, #4]
 81037ac:	689b      	ldr	r3, [r3, #8]
 81037ae:	3b01      	subs	r3, #1
 81037b0:	025b      	lsls	r3, r3, #9
 81037b2:	b29b      	uxth	r3, r3
 81037b4:	431a      	orrs	r2, r3
 81037b6:	687b      	ldr	r3, [r7, #4]
 81037b8:	68db      	ldr	r3, [r3, #12]
 81037ba:	3b01      	subs	r3, #1
 81037bc:	041b      	lsls	r3, r3, #16
 81037be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81037c2:	431a      	orrs	r2, r3
 81037c4:	687b      	ldr	r3, [r7, #4]
 81037c6:	691b      	ldr	r3, [r3, #16]
 81037c8:	3b01      	subs	r3, #1
 81037ca:	061b      	lsls	r3, r3, #24
 81037cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81037d0:	4932      	ldr	r1, [pc, #200]	; (810389c <RCCEx_PLL2_Config+0x160>)
 81037d2:	4313      	orrs	r3, r2
 81037d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81037d6:	4b31      	ldr	r3, [pc, #196]	; (810389c <RCCEx_PLL2_Config+0x160>)
 81037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	695b      	ldr	r3, [r3, #20]
 81037e2:	492e      	ldr	r1, [pc, #184]	; (810389c <RCCEx_PLL2_Config+0x160>)
 81037e4:	4313      	orrs	r3, r2
 81037e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81037e8:	4b2c      	ldr	r3, [pc, #176]	; (810389c <RCCEx_PLL2_Config+0x160>)
 81037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037ec:	f023 0220 	bic.w	r2, r3, #32
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	699b      	ldr	r3, [r3, #24]
 81037f4:	4929      	ldr	r1, [pc, #164]	; (810389c <RCCEx_PLL2_Config+0x160>)
 81037f6:	4313      	orrs	r3, r2
 81037f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81037fa:	4b28      	ldr	r3, [pc, #160]	; (810389c <RCCEx_PLL2_Config+0x160>)
 81037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037fe:	4a27      	ldr	r2, [pc, #156]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103800:	f023 0310 	bic.w	r3, r3, #16
 8103804:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103806:	4b25      	ldr	r3, [pc, #148]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810380a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810380e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103812:	687a      	ldr	r2, [r7, #4]
 8103814:	69d2      	ldr	r2, [r2, #28]
 8103816:	00d2      	lsls	r2, r2, #3
 8103818:	4920      	ldr	r1, [pc, #128]	; (810389c <RCCEx_PLL2_Config+0x160>)
 810381a:	4313      	orrs	r3, r2
 810381c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810381e:	4b1f      	ldr	r3, [pc, #124]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103822:	4a1e      	ldr	r2, [pc, #120]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103824:	f043 0310 	orr.w	r3, r3, #16
 8103828:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810382a:	683b      	ldr	r3, [r7, #0]
 810382c:	2b00      	cmp	r3, #0
 810382e:	d106      	bne.n	810383e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103830:	4b1a      	ldr	r3, [pc, #104]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103834:	4a19      	ldr	r2, [pc, #100]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810383a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810383c:	e00f      	b.n	810385e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810383e:	683b      	ldr	r3, [r7, #0]
 8103840:	2b01      	cmp	r3, #1
 8103842:	d106      	bne.n	8103852 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103844:	4b15      	ldr	r3, [pc, #84]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103848:	4a14      	ldr	r2, [pc, #80]	; (810389c <RCCEx_PLL2_Config+0x160>)
 810384a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810384e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103850:	e005      	b.n	810385e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103852:	4b12      	ldr	r3, [pc, #72]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103856:	4a11      	ldr	r2, [pc, #68]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810385c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810385e:	4b0f      	ldr	r3, [pc, #60]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103860:	681b      	ldr	r3, [r3, #0]
 8103862:	4a0e      	ldr	r2, [pc, #56]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810386a:	f7fd fb8f 	bl	8100f8c <HAL_GetTick>
 810386e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103870:	e008      	b.n	8103884 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103872:	f7fd fb8b 	bl	8100f8c <HAL_GetTick>
 8103876:	4602      	mov	r2, r0
 8103878:	68bb      	ldr	r3, [r7, #8]
 810387a:	1ad3      	subs	r3, r2, r3
 810387c:	2b02      	cmp	r3, #2
 810387e:	d901      	bls.n	8103884 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103880:	2303      	movs	r3, #3
 8103882:	e006      	b.n	8103892 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103884:	4b05      	ldr	r3, [pc, #20]	; (810389c <RCCEx_PLL2_Config+0x160>)
 8103886:	681b      	ldr	r3, [r3, #0]
 8103888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810388c:	2b00      	cmp	r3, #0
 810388e:	d0f0      	beq.n	8103872 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103890:	7bfb      	ldrb	r3, [r7, #15]
}
 8103892:	4618      	mov	r0, r3
 8103894:	3710      	adds	r7, #16
 8103896:	46bd      	mov	sp, r7
 8103898:	bd80      	pop	{r7, pc}
 810389a:	bf00      	nop
 810389c:	58024400 	.word	0x58024400

081038a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81038a0:	b580      	push	{r7, lr}
 81038a2:	b084      	sub	sp, #16
 81038a4:	af00      	add	r7, sp, #0
 81038a6:	6078      	str	r0, [r7, #4]
 81038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81038aa:	2300      	movs	r3, #0
 81038ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81038ae:	4b54      	ldr	r3, [pc, #336]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81038b2:	f003 0303 	and.w	r3, r3, #3
 81038b6:	2b03      	cmp	r3, #3
 81038b8:	d101      	bne.n	81038be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81038ba:	2301      	movs	r3, #1
 81038bc:	e09b      	b.n	81039f6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81038be:	4b50      	ldr	r3, [pc, #320]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81038c0:	681b      	ldr	r3, [r3, #0]
 81038c2:	4a4f      	ldr	r2, [pc, #316]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81038c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81038c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81038ca:	f7fd fb5f 	bl	8100f8c <HAL_GetTick>
 81038ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81038d0:	e008      	b.n	81038e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81038d2:	f7fd fb5b 	bl	8100f8c <HAL_GetTick>
 81038d6:	4602      	mov	r2, r0
 81038d8:	68bb      	ldr	r3, [r7, #8]
 81038da:	1ad3      	subs	r3, r2, r3
 81038dc:	2b02      	cmp	r3, #2
 81038de:	d901      	bls.n	81038e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81038e0:	2303      	movs	r3, #3
 81038e2:	e088      	b.n	81039f6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81038e4:	4b46      	ldr	r3, [pc, #280]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81038e6:	681b      	ldr	r3, [r3, #0]
 81038e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81038ec:	2b00      	cmp	r3, #0
 81038ee:	d1f0      	bne.n	81038d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81038f0:	4b43      	ldr	r3, [pc, #268]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81038f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81038f8:	687b      	ldr	r3, [r7, #4]
 81038fa:	681b      	ldr	r3, [r3, #0]
 81038fc:	051b      	lsls	r3, r3, #20
 81038fe:	4940      	ldr	r1, [pc, #256]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 8103900:	4313      	orrs	r3, r2
 8103902:	628b      	str	r3, [r1, #40]	; 0x28
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	685b      	ldr	r3, [r3, #4]
 8103908:	3b01      	subs	r3, #1
 810390a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	689b      	ldr	r3, [r3, #8]
 8103912:	3b01      	subs	r3, #1
 8103914:	025b      	lsls	r3, r3, #9
 8103916:	b29b      	uxth	r3, r3
 8103918:	431a      	orrs	r2, r3
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	68db      	ldr	r3, [r3, #12]
 810391e:	3b01      	subs	r3, #1
 8103920:	041b      	lsls	r3, r3, #16
 8103922:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103926:	431a      	orrs	r2, r3
 8103928:	687b      	ldr	r3, [r7, #4]
 810392a:	691b      	ldr	r3, [r3, #16]
 810392c:	3b01      	subs	r3, #1
 810392e:	061b      	lsls	r3, r3, #24
 8103930:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103934:	4932      	ldr	r1, [pc, #200]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 8103936:	4313      	orrs	r3, r2
 8103938:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810393a:	4b31      	ldr	r3, [pc, #196]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 810393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810393e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	695b      	ldr	r3, [r3, #20]
 8103946:	492e      	ldr	r1, [pc, #184]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 8103948:	4313      	orrs	r3, r2
 810394a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810394c:	4b2c      	ldr	r3, [pc, #176]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 810394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103950:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	699b      	ldr	r3, [r3, #24]
 8103958:	4929      	ldr	r1, [pc, #164]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 810395a:	4313      	orrs	r3, r2
 810395c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810395e:	4b28      	ldr	r3, [pc, #160]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 8103960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103962:	4a27      	ldr	r2, [pc, #156]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 8103964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103968:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810396a:	4b25      	ldr	r3, [pc, #148]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 810396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810396e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103972:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103976:	687a      	ldr	r2, [r7, #4]
 8103978:	69d2      	ldr	r2, [r2, #28]
 810397a:	00d2      	lsls	r2, r2, #3
 810397c:	4920      	ldr	r1, [pc, #128]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 810397e:	4313      	orrs	r3, r2
 8103980:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103982:	4b1f      	ldr	r3, [pc, #124]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 8103984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103986:	4a1e      	ldr	r2, [pc, #120]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 8103988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810398c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810398e:	683b      	ldr	r3, [r7, #0]
 8103990:	2b00      	cmp	r3, #0
 8103992:	d106      	bne.n	81039a2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103994:	4b1a      	ldr	r3, [pc, #104]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 8103996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103998:	4a19      	ldr	r2, [pc, #100]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 810399a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810399e:	62d3      	str	r3, [r2, #44]	; 0x2c
 81039a0:	e00f      	b.n	81039c2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81039a2:	683b      	ldr	r3, [r7, #0]
 81039a4:	2b01      	cmp	r3, #1
 81039a6:	d106      	bne.n	81039b6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81039a8:	4b15      	ldr	r3, [pc, #84]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81039aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039ac:	4a14      	ldr	r2, [pc, #80]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81039ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81039b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81039b4:	e005      	b.n	81039c2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81039b6:	4b12      	ldr	r3, [pc, #72]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039ba:	4a11      	ldr	r2, [pc, #68]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81039bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81039c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81039c2:	4b0f      	ldr	r3, [pc, #60]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81039c4:	681b      	ldr	r3, [r3, #0]
 81039c6:	4a0e      	ldr	r2, [pc, #56]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81039c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81039cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81039ce:	f7fd fadd 	bl	8100f8c <HAL_GetTick>
 81039d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81039d4:	e008      	b.n	81039e8 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81039d6:	f7fd fad9 	bl	8100f8c <HAL_GetTick>
 81039da:	4602      	mov	r2, r0
 81039dc:	68bb      	ldr	r3, [r7, #8]
 81039de:	1ad3      	subs	r3, r2, r3
 81039e0:	2b02      	cmp	r3, #2
 81039e2:	d901      	bls.n	81039e8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81039e4:	2303      	movs	r3, #3
 81039e6:	e006      	b.n	81039f6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81039e8:	4b05      	ldr	r3, [pc, #20]	; (8103a00 <RCCEx_PLL3_Config+0x160>)
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81039f0:	2b00      	cmp	r3, #0
 81039f2:	d0f0      	beq.n	81039d6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 81039f6:	4618      	mov	r0, r3
 81039f8:	3710      	adds	r7, #16
 81039fa:	46bd      	mov	sp, r7
 81039fc:	bd80      	pop	{r7, pc}
 81039fe:	bf00      	nop
 8103a00:	58024400 	.word	0x58024400

08103a04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8103a04:	b580      	push	{r7, lr}
 8103a06:	b084      	sub	sp, #16
 8103a08:	af00      	add	r7, sp, #0
 8103a0a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8103a0c:	687b      	ldr	r3, [r7, #4]
 8103a0e:	2b00      	cmp	r3, #0
 8103a10:	d101      	bne.n	8103a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8103a12:	2301      	movs	r3, #1
 8103a14:	e0f1      	b.n	8103bfa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	2200      	movs	r2, #0
 8103a1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	681b      	ldr	r3, [r3, #0]
 8103a20:	4a78      	ldr	r2, [pc, #480]	; (8103c04 <HAL_SPI_Init+0x200>)
 8103a22:	4293      	cmp	r3, r2
 8103a24:	d00f      	beq.n	8103a46 <HAL_SPI_Init+0x42>
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	681b      	ldr	r3, [r3, #0]
 8103a2a:	4a77      	ldr	r2, [pc, #476]	; (8103c08 <HAL_SPI_Init+0x204>)
 8103a2c:	4293      	cmp	r3, r2
 8103a2e:	d00a      	beq.n	8103a46 <HAL_SPI_Init+0x42>
 8103a30:	687b      	ldr	r3, [r7, #4]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	4a75      	ldr	r2, [pc, #468]	; (8103c0c <HAL_SPI_Init+0x208>)
 8103a36:	4293      	cmp	r3, r2
 8103a38:	d005      	beq.n	8103a46 <HAL_SPI_Init+0x42>
 8103a3a:	687b      	ldr	r3, [r7, #4]
 8103a3c:	68db      	ldr	r3, [r3, #12]
 8103a3e:	2b0f      	cmp	r3, #15
 8103a40:	d901      	bls.n	8103a46 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8103a42:	2301      	movs	r3, #1
 8103a44:	e0d9      	b.n	8103bfa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8103a46:	6878      	ldr	r0, [r7, #4]
 8103a48:	f000 ff01 	bl	810484e <SPI_GetPacketSize>
 8103a4c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	4a6c      	ldr	r2, [pc, #432]	; (8103c04 <HAL_SPI_Init+0x200>)
 8103a54:	4293      	cmp	r3, r2
 8103a56:	d00c      	beq.n	8103a72 <HAL_SPI_Init+0x6e>
 8103a58:	687b      	ldr	r3, [r7, #4]
 8103a5a:	681b      	ldr	r3, [r3, #0]
 8103a5c:	4a6a      	ldr	r2, [pc, #424]	; (8103c08 <HAL_SPI_Init+0x204>)
 8103a5e:	4293      	cmp	r3, r2
 8103a60:	d007      	beq.n	8103a72 <HAL_SPI_Init+0x6e>
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	4a69      	ldr	r2, [pc, #420]	; (8103c0c <HAL_SPI_Init+0x208>)
 8103a68:	4293      	cmp	r3, r2
 8103a6a:	d002      	beq.n	8103a72 <HAL_SPI_Init+0x6e>
 8103a6c:	68fb      	ldr	r3, [r7, #12]
 8103a6e:	2b08      	cmp	r3, #8
 8103a70:	d811      	bhi.n	8103a96 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103a76:	4a63      	ldr	r2, [pc, #396]	; (8103c04 <HAL_SPI_Init+0x200>)
 8103a78:	4293      	cmp	r3, r2
 8103a7a:	d009      	beq.n	8103a90 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103a7c:	687b      	ldr	r3, [r7, #4]
 8103a7e:	681b      	ldr	r3, [r3, #0]
 8103a80:	4a61      	ldr	r2, [pc, #388]	; (8103c08 <HAL_SPI_Init+0x204>)
 8103a82:	4293      	cmp	r3, r2
 8103a84:	d004      	beq.n	8103a90 <HAL_SPI_Init+0x8c>
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	4a60      	ldr	r2, [pc, #384]	; (8103c0c <HAL_SPI_Init+0x208>)
 8103a8c:	4293      	cmp	r3, r2
 8103a8e:	d104      	bne.n	8103a9a <HAL_SPI_Init+0x96>
 8103a90:	68fb      	ldr	r3, [r7, #12]
 8103a92:	2b10      	cmp	r3, #16
 8103a94:	d901      	bls.n	8103a9a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8103a96:	2301      	movs	r3, #1
 8103a98:	e0af      	b.n	8103bfa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103aa0:	b2db      	uxtb	r3, r3
 8103aa2:	2b00      	cmp	r3, #0
 8103aa4:	d106      	bne.n	8103ab4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	2200      	movs	r2, #0
 8103aaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8103aae:	6878      	ldr	r0, [r7, #4]
 8103ab0:	f7fd f866 	bl	8100b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	2202      	movs	r2, #2
 8103ab8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	681b      	ldr	r3, [r3, #0]
 8103ac0:	681a      	ldr	r2, [r3, #0]
 8103ac2:	687b      	ldr	r3, [r7, #4]
 8103ac4:	681b      	ldr	r3, [r3, #0]
 8103ac6:	f022 0201 	bic.w	r2, r2, #1
 8103aca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8103acc:	687b      	ldr	r3, [r7, #4]
 8103ace:	681b      	ldr	r3, [r3, #0]
 8103ad0:	689b      	ldr	r3, [r3, #8]
 8103ad2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8103ad6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8103ad8:	687b      	ldr	r3, [r7, #4]
 8103ada:	699b      	ldr	r3, [r3, #24]
 8103adc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103ae0:	d119      	bne.n	8103b16 <HAL_SPI_Init+0x112>
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	685b      	ldr	r3, [r3, #4]
 8103ae6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103aea:	d103      	bne.n	8103af4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103aec:	687b      	ldr	r3, [r7, #4]
 8103aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8103af0:	2b00      	cmp	r3, #0
 8103af2:	d008      	beq.n	8103b06 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103af8:	2b00      	cmp	r3, #0
 8103afa:	d10c      	bne.n	8103b16 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103b04:	d107      	bne.n	8103b16 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	681a      	ldr	r2, [r3, #0]
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	681b      	ldr	r3, [r3, #0]
 8103b10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8103b14:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	69da      	ldr	r2, [r3, #28]
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b1e:	431a      	orrs	r2, r3
 8103b20:	68bb      	ldr	r3, [r7, #8]
 8103b22:	431a      	orrs	r2, r3
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103b28:	ea42 0103 	orr.w	r1, r2, r3
 8103b2c:	687b      	ldr	r3, [r7, #4]
 8103b2e:	68da      	ldr	r2, [r3, #12]
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	681b      	ldr	r3, [r3, #0]
 8103b34:	430a      	orrs	r2, r1
 8103b36:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103b40:	431a      	orrs	r2, r3
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103b46:	431a      	orrs	r2, r3
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	699b      	ldr	r3, [r3, #24]
 8103b4c:	431a      	orrs	r2, r3
 8103b4e:	687b      	ldr	r3, [r7, #4]
 8103b50:	691b      	ldr	r3, [r3, #16]
 8103b52:	431a      	orrs	r2, r3
 8103b54:	687b      	ldr	r3, [r7, #4]
 8103b56:	695b      	ldr	r3, [r3, #20]
 8103b58:	431a      	orrs	r2, r3
 8103b5a:	687b      	ldr	r3, [r7, #4]
 8103b5c:	6a1b      	ldr	r3, [r3, #32]
 8103b5e:	431a      	orrs	r2, r3
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	685b      	ldr	r3, [r3, #4]
 8103b64:	431a      	orrs	r2, r3
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b6a:	431a      	orrs	r2, r3
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	689b      	ldr	r3, [r3, #8]
 8103b70:	431a      	orrs	r2, r3
 8103b72:	687b      	ldr	r3, [r7, #4]
 8103b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103b76:	ea42 0103 	orr.w	r1, r2, r3
 8103b7a:	687b      	ldr	r3, [r7, #4]
 8103b7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	430a      	orrs	r2, r1
 8103b84:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	685b      	ldr	r3, [r3, #4]
 8103b8a:	2b00      	cmp	r3, #0
 8103b8c:	d113      	bne.n	8103bb6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	681b      	ldr	r3, [r3, #0]
 8103b92:	689b      	ldr	r3, [r3, #8]
 8103b94:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103ba0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8103ba2:	687b      	ldr	r3, [r7, #4]
 8103ba4:	681b      	ldr	r3, [r3, #0]
 8103ba6:	689b      	ldr	r3, [r3, #8]
 8103ba8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	681b      	ldr	r3, [r3, #0]
 8103bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8103bb4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	681b      	ldr	r3, [r3, #0]
 8103bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	681b      	ldr	r3, [r3, #0]
 8103bc0:	f022 0201 	bic.w	r2, r2, #1
 8103bc4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	685b      	ldr	r3, [r3, #4]
 8103bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103bce:	2b00      	cmp	r3, #0
 8103bd0:	d00a      	beq.n	8103be8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8103bd2:	687b      	ldr	r3, [r7, #4]
 8103bd4:	681b      	ldr	r3, [r3, #0]
 8103bd6:	68db      	ldr	r3, [r3, #12]
 8103bd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	681b      	ldr	r3, [r3, #0]
 8103be4:	430a      	orrs	r2, r1
 8103be6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	2200      	movs	r2, #0
 8103bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	2201      	movs	r2, #1
 8103bf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8103bf8:	2300      	movs	r3, #0
}
 8103bfa:	4618      	mov	r0, r3
 8103bfc:	3710      	adds	r7, #16
 8103bfe:	46bd      	mov	sp, r7
 8103c00:	bd80      	pop	{r7, pc}
 8103c02:	bf00      	nop
 8103c04:	40013000 	.word	0x40013000
 8103c08:	40003800 	.word	0x40003800
 8103c0c:	40003c00 	.word	0x40003c00

08103c10 <HAL_SPI_Receive_IT>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8103c10:	b580      	push	{r7, lr}
 8103c12:	b086      	sub	sp, #24
 8103c14:	af00      	add	r7, sp, #0
 8103c16:	60f8      	str	r0, [r7, #12]
 8103c18:	60b9      	str	r1, [r7, #8]
 8103c1a:	4613      	mov	r3, r2
 8103c1c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103c1e:	2300      	movs	r3, #0
 8103c20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8103c22:	68fb      	ldr	r3, [r7, #12]
 8103c24:	689b      	ldr	r3, [r3, #8]
 8103c26:	2b00      	cmp	r3, #0
 8103c28:	d110      	bne.n	8103c4c <HAL_SPI_Receive_IT+0x3c>
 8103c2a:	68fb      	ldr	r3, [r7, #12]
 8103c2c:	685b      	ldr	r3, [r3, #4]
 8103c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103c32:	d10b      	bne.n	8103c4c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8103c34:	68fb      	ldr	r3, [r7, #12]
 8103c36:	2204      	movs	r2, #4
 8103c38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8103c3c:	88fb      	ldrh	r3, [r7, #6]
 8103c3e:	68ba      	ldr	r2, [r7, #8]
 8103c40:	68b9      	ldr	r1, [r7, #8]
 8103c42:	68f8      	ldr	r0, [r7, #12]
 8103c44:	f000 f8a2 	bl	8103d8c <HAL_SPI_TransmitReceive_IT>
 8103c48:	4603      	mov	r3, r0
 8103c4a:	e095      	b.n	8103d78 <HAL_SPI_Receive_IT+0x168>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103c4c:	68fb      	ldr	r3, [r7, #12]
 8103c4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103c52:	2b01      	cmp	r3, #1
 8103c54:	d101      	bne.n	8103c5a <HAL_SPI_Receive_IT+0x4a>
 8103c56:	2302      	movs	r3, #2
 8103c58:	e08e      	b.n	8103d78 <HAL_SPI_Receive_IT+0x168>
 8103c5a:	68fb      	ldr	r3, [r7, #12]
 8103c5c:	2201      	movs	r2, #1
 8103c5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8103c62:	68fb      	ldr	r3, [r7, #12]
 8103c64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103c68:	b2db      	uxtb	r3, r3
 8103c6a:	2b01      	cmp	r3, #1
 8103c6c:	d007      	beq.n	8103c7e <HAL_SPI_Receive_IT+0x6e>
  {
    errorcode = HAL_BUSY;
 8103c6e:	2302      	movs	r3, #2
 8103c70:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8103c72:	68fb      	ldr	r3, [r7, #12]
 8103c74:	2200      	movs	r2, #0
 8103c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103c7a:	7dfb      	ldrb	r3, [r7, #23]
 8103c7c:	e07c      	b.n	8103d78 <HAL_SPI_Receive_IT+0x168>
  }

  if ((pData == NULL) || (Size == 0UL))
 8103c7e:	68bb      	ldr	r3, [r7, #8]
 8103c80:	2b00      	cmp	r3, #0
 8103c82:	d002      	beq.n	8103c8a <HAL_SPI_Receive_IT+0x7a>
 8103c84:	88fb      	ldrh	r3, [r7, #6]
 8103c86:	2b00      	cmp	r3, #0
 8103c88:	d107      	bne.n	8103c9a <HAL_SPI_Receive_IT+0x8a>
  {
    errorcode = HAL_ERROR;
 8103c8a:	2301      	movs	r3, #1
 8103c8c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8103c8e:	68fb      	ldr	r3, [r7, #12]
 8103c90:	2200      	movs	r2, #0
 8103c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103c96:	7dfb      	ldrb	r3, [r7, #23]
 8103c98:	e06e      	b.n	8103d78 <HAL_SPI_Receive_IT+0x168>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8103c9a:	68fb      	ldr	r3, [r7, #12]
 8103c9c:	2204      	movs	r2, #4
 8103c9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103ca2:	68fb      	ldr	r3, [r7, #12]
 8103ca4:	2200      	movs	r2, #0
 8103ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8103caa:	68fb      	ldr	r3, [r7, #12]
 8103cac:	68ba      	ldr	r2, [r7, #8]
 8103cae:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8103cb0:	68fb      	ldr	r3, [r7, #12]
 8103cb2:	88fa      	ldrh	r2, [r7, #6]
 8103cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8103cb8:	68fb      	ldr	r3, [r7, #12]
 8103cba:	88fa      	ldrh	r2, [r7, #6]
 8103cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8103cc0:	68fb      	ldr	r3, [r7, #12]
 8103cc2:	2200      	movs	r2, #0
 8103cc4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8103cc6:	68fb      	ldr	r3, [r7, #12]
 8103cc8:	2200      	movs	r2, #0
 8103cca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8103cce:	68fb      	ldr	r3, [r7, #12]
 8103cd0:	2200      	movs	r2, #0
 8103cd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxISR       = NULL;
 8103cd6:	68fb      	ldr	r3, [r7, #12]
 8103cd8:	2200      	movs	r2, #0
 8103cda:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103cdc:	68fb      	ldr	r3, [r7, #12]
 8103cde:	68db      	ldr	r3, [r3, #12]
 8103ce0:	2b0f      	cmp	r3, #15
 8103ce2:	d903      	bls.n	8103cec <HAL_SPI_Receive_IT+0xdc>
  {
    hspi->RxISR = SPI_RxISR_32BIT;
 8103ce4:	68fb      	ldr	r3, [r7, #12]
 8103ce6:	4a26      	ldr	r2, [pc, #152]	; (8103d80 <HAL_SPI_Receive_IT+0x170>)
 8103ce8:	671a      	str	r2, [r3, #112]	; 0x70
 8103cea:	e00a      	b.n	8103d02 <HAL_SPI_Receive_IT+0xf2>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103cec:	68fb      	ldr	r3, [r7, #12]
 8103cee:	68db      	ldr	r3, [r3, #12]
 8103cf0:	2b07      	cmp	r3, #7
 8103cf2:	d903      	bls.n	8103cfc <HAL_SPI_Receive_IT+0xec>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8103cf4:	68fb      	ldr	r3, [r7, #12]
 8103cf6:	4a23      	ldr	r2, [pc, #140]	; (8103d84 <HAL_SPI_Receive_IT+0x174>)
 8103cf8:	671a      	str	r2, [r3, #112]	; 0x70
 8103cfa:	e002      	b.n	8103d02 <HAL_SPI_Receive_IT+0xf2>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8103cfc:	68fb      	ldr	r3, [r7, #12]
 8103cfe:	4a22      	ldr	r2, [pc, #136]	; (8103d88 <HAL_SPI_Receive_IT+0x178>)
 8103d00:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103d02:	68fb      	ldr	r3, [r7, #12]
 8103d04:	689b      	ldr	r3, [r3, #8]
 8103d06:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8103d0a:	d107      	bne.n	8103d1c <HAL_SPI_Receive_IT+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8103d0c:	68fb      	ldr	r3, [r7, #12]
 8103d0e:	681b      	ldr	r3, [r3, #0]
 8103d10:	681a      	ldr	r2, [r3, #0]
 8103d12:	68fb      	ldr	r3, [r7, #12]
 8103d14:	681b      	ldr	r3, [r3, #0]
 8103d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8103d1a:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103d1c:	68fb      	ldr	r3, [r7, #12]
 8103d1e:	681b      	ldr	r3, [r3, #0]
 8103d20:	685b      	ldr	r3, [r3, #4]
 8103d22:	0c1b      	lsrs	r3, r3, #16
 8103d24:	041b      	lsls	r3, r3, #16
 8103d26:	88f9      	ldrh	r1, [r7, #6]
 8103d28:	68fa      	ldr	r2, [r7, #12]
 8103d2a:	6812      	ldr	r2, [r2, #0]
 8103d2c:	430b      	orrs	r3, r1
 8103d2e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103d30:	68fb      	ldr	r3, [r7, #12]
 8103d32:	681b      	ldr	r3, [r3, #0]
 8103d34:	681a      	ldr	r2, [r3, #0]
 8103d36:	68fb      	ldr	r3, [r7, #12]
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	f042 0201 	orr.w	r2, r2, #1
 8103d3e:	601a      	str	r2, [r3, #0]

  /* Enable EOT, RXP, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));
 8103d40:	68fb      	ldr	r3, [r7, #12]
 8103d42:	681b      	ldr	r3, [r3, #0]
 8103d44:	691b      	ldr	r3, [r3, #16]
 8103d46:	68fa      	ldr	r2, [r7, #12]
 8103d48:	6812      	ldr	r2, [r2, #0]
 8103d4a:	f443 63e9 	orr.w	r3, r3, #1864	; 0x748
 8103d4e:	f043 0301 	orr.w	r3, r3, #1
 8103d52:	6113      	str	r3, [r2, #16]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103d54:	68fb      	ldr	r3, [r7, #12]
 8103d56:	685b      	ldr	r3, [r3, #4]
 8103d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103d5c:	d107      	bne.n	8103d6e <HAL_SPI_Receive_IT+0x15e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103d5e:	68fb      	ldr	r3, [r7, #12]
 8103d60:	681b      	ldr	r3, [r3, #0]
 8103d62:	681a      	ldr	r2, [r3, #0]
 8103d64:	68fb      	ldr	r3, [r7, #12]
 8103d66:	681b      	ldr	r3, [r3, #0]
 8103d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103d6c:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8103d6e:	68fb      	ldr	r3, [r7, #12]
 8103d70:	2200      	movs	r2, #0
 8103d72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8103d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8103d78:	4618      	mov	r0, r3
 8103d7a:	3718      	adds	r7, #24
 8103d7c:	46bd      	mov	sp, r7
 8103d7e:	bd80      	pop	{r7, pc}
 8103d80:	081045a7 	.word	0x081045a7
 8103d84:	08104547 	.word	0x08104547
 8103d88:	081044e9 	.word	0x081044e9

08103d8c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData: pointer to reception data buffer
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8103d8c:	b480      	push	{r7}
 8103d8e:	b08b      	sub	sp, #44	; 0x2c
 8103d90:	af00      	add	r7, sp, #0
 8103d92:	60f8      	str	r0, [r7, #12]
 8103d94:	60b9      	str	r1, [r7, #8]
 8103d96:	607a      	str	r2, [r7, #4]
 8103d98:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef  tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103d9a:	2300      	movs	r3, #0
 8103d9c:	77fb      	strb	r3, [r7, #31]
  uint32_t max_fifo_length = 0UL;
 8103d9e:	2300      	movs	r3, #0
 8103da0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_TxXferCount;

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8103da2:	68fb      	ldr	r3, [r7, #12]
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	3320      	adds	r3, #32
 8103da8:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103daa:	68fb      	ldr	r3, [r7, #12]
 8103dac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103db0:	2b01      	cmp	r3, #1
 8103db2:	d101      	bne.n	8103db8 <HAL_SPI_TransmitReceive_IT+0x2c>
 8103db4:	2302      	movs	r3, #2
 8103db6:	e180      	b.n	81040ba <HAL_SPI_TransmitReceive_IT+0x32e>
 8103db8:	68fb      	ldr	r3, [r7, #12]
 8103dba:	2201      	movs	r2, #1
 8103dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state  = hspi->State;
 8103dc0:	68fb      	ldr	r3, [r7, #12]
 8103dc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103dc6:	75fb      	strb	r3, [r7, #23]
  tmp_mode   = hspi->Init.Mode;
 8103dc8:	68fb      	ldr	r3, [r7, #12]
 8103dca:	685b      	ldr	r3, [r3, #4]
 8103dcc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8103dce:	7dfb      	ldrb	r3, [r7, #23]
 8103dd0:	2b01      	cmp	r3, #1
 8103dd2:	d012      	beq.n	8103dfa <HAL_SPI_TransmitReceive_IT+0x6e>
 8103dd4:	693b      	ldr	r3, [r7, #16]
 8103dd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103dda:	d106      	bne.n	8103dea <HAL_SPI_TransmitReceive_IT+0x5e>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8103ddc:	68fb      	ldr	r3, [r7, #12]
 8103dde:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8103de0:	2b00      	cmp	r3, #0
 8103de2:	d102      	bne.n	8103dea <HAL_SPI_TransmitReceive_IT+0x5e>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8103de4:	7dfb      	ldrb	r3, [r7, #23]
 8103de6:	2b04      	cmp	r3, #4
 8103de8:	d007      	beq.n	8103dfa <HAL_SPI_TransmitReceive_IT+0x6e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8103dea:	2302      	movs	r3, #2
 8103dec:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8103dee:	68fb      	ldr	r3, [r7, #12]
 8103df0:	2200      	movs	r2, #0
 8103df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103df6:	7ffb      	ldrb	r3, [r7, #31]
 8103df8:	e15f      	b.n	81040ba <HAL_SPI_TransmitReceive_IT+0x32e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8103dfa:	68bb      	ldr	r3, [r7, #8]
 8103dfc:	2b00      	cmp	r3, #0
 8103dfe:	d005      	beq.n	8103e0c <HAL_SPI_TransmitReceive_IT+0x80>
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	2b00      	cmp	r3, #0
 8103e04:	d002      	beq.n	8103e0c <HAL_SPI_TransmitReceive_IT+0x80>
 8103e06:	887b      	ldrh	r3, [r7, #2]
 8103e08:	2b00      	cmp	r3, #0
 8103e0a:	d107      	bne.n	8103e1c <HAL_SPI_TransmitReceive_IT+0x90>
  {
    errorcode = HAL_ERROR;
 8103e0c:	2301      	movs	r3, #1
 8103e0e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8103e10:	68fb      	ldr	r3, [r7, #12]
 8103e12:	2200      	movs	r2, #0
 8103e14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103e18:	7ffb      	ldrb	r3, [r7, #31]
 8103e1a:	e14e      	b.n	81040ba <HAL_SPI_TransmitReceive_IT+0x32e>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8103e1c:	68fb      	ldr	r3, [r7, #12]
 8103e1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103e22:	b2db      	uxtb	r3, r3
 8103e24:	2b04      	cmp	r3, #4
 8103e26:	d003      	beq.n	8103e30 <HAL_SPI_TransmitReceive_IT+0xa4>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8103e28:	68fb      	ldr	r3, [r7, #12]
 8103e2a:	2205      	movs	r2, #5
 8103e2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103e30:	68fb      	ldr	r3, [r7, #12]
 8103e32:	2200      	movs	r2, #0
 8103e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8103e38:	68fb      	ldr	r3, [r7, #12]
 8103e3a:	68ba      	ldr	r2, [r7, #8]
 8103e3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8103e3e:	68fb      	ldr	r3, [r7, #12]
 8103e40:	887a      	ldrh	r2, [r7, #2]
 8103e42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8103e46:	68fb      	ldr	r3, [r7, #12]
 8103e48:	887a      	ldrh	r2, [r7, #2]
 8103e4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8103e4e:	68fb      	ldr	r3, [r7, #12]
 8103e50:	687a      	ldr	r2, [r7, #4]
 8103e52:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8103e54:	68fb      	ldr	r3, [r7, #12]
 8103e56:	887a      	ldrh	r2, [r7, #2]
 8103e58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	887a      	ldrh	r2, [r7, #2]
 8103e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 8103e64:	68fb      	ldr	r3, [r7, #12]
 8103e66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103e6a:	b29b      	uxth	r3, r3
 8103e6c:	623b      	str	r3, [r7, #32]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	68db      	ldr	r3, [r3, #12]
 8103e72:	2b0f      	cmp	r3, #15
 8103e74:	d906      	bls.n	8103e84 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8103e76:	68fb      	ldr	r3, [r7, #12]
 8103e78:	4a93      	ldr	r2, [pc, #588]	; (81040c8 <HAL_SPI_TransmitReceive_IT+0x33c>)
 8103e7a:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8103e7c:	68fb      	ldr	r3, [r7, #12]
 8103e7e:	4a93      	ldr	r2, [pc, #588]	; (81040cc <HAL_SPI_TransmitReceive_IT+0x340>)
 8103e80:	671a      	str	r2, [r3, #112]	; 0x70
 8103e82:	e010      	b.n	8103ea6 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103e84:	68fb      	ldr	r3, [r7, #12]
 8103e86:	68db      	ldr	r3, [r3, #12]
 8103e88:	2b07      	cmp	r3, #7
 8103e8a:	d906      	bls.n	8103e9a <HAL_SPI_TransmitReceive_IT+0x10e>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8103e8c:	68fb      	ldr	r3, [r7, #12]
 8103e8e:	4a90      	ldr	r2, [pc, #576]	; (81040d0 <HAL_SPI_TransmitReceive_IT+0x344>)
 8103e90:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 8103e92:	68fb      	ldr	r3, [r7, #12]
 8103e94:	4a8f      	ldr	r2, [pc, #572]	; (81040d4 <HAL_SPI_TransmitReceive_IT+0x348>)
 8103e96:	675a      	str	r2, [r3, #116]	; 0x74
 8103e98:	e005      	b.n	8103ea6 <HAL_SPI_TransmitReceive_IT+0x11a>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8103e9a:	68fb      	ldr	r3, [r7, #12]
 8103e9c:	4a8e      	ldr	r2, [pc, #568]	; (81040d8 <HAL_SPI_TransmitReceive_IT+0x34c>)
 8103e9e:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 8103ea0:	68fb      	ldr	r3, [r7, #12]
 8103ea2:	4a8e      	ldr	r2, [pc, #568]	; (81040dc <HAL_SPI_TransmitReceive_IT+0x350>)
 8103ea4:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103ea6:	68fb      	ldr	r3, [r7, #12]
 8103ea8:	681b      	ldr	r3, [r3, #0]
 8103eaa:	685b      	ldr	r3, [r3, #4]
 8103eac:	0c1b      	lsrs	r3, r3, #16
 8103eae:	041b      	lsls	r3, r3, #16
 8103eb0:	8879      	ldrh	r1, [r7, #2]
 8103eb2:	68fa      	ldr	r2, [r7, #12]
 8103eb4:	6812      	ldr	r2, [r2, #0]
 8103eb6:	430b      	orrs	r3, r1
 8103eb8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103eba:	68fb      	ldr	r3, [r7, #12]
 8103ebc:	681b      	ldr	r3, [r3, #0]
 8103ebe:	681a      	ldr	r2, [r3, #0]
 8103ec0:	68fb      	ldr	r3, [r7, #12]
 8103ec2:	681b      	ldr	r3, [r3, #0]
 8103ec4:	f042 0201 	orr.w	r2, r2, #1
 8103ec8:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8103eca:	e0cf      	b.n	810406c <HAL_SPI_TransmitReceive_IT+0x2e0>
  {
    if (max_fifo_length < MAX_FIFO_LENGTH)
 8103ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103ece:	2b0f      	cmp	r3, #15
 8103ed0:	f200 80c4 	bhi.w	810405c <HAL_SPI_TransmitReceive_IT+0x2d0>
    {
      /* Transmit data in 32 Bit mode */
      if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103ed4:	68fb      	ldr	r3, [r7, #12]
 8103ed6:	68db      	ldr	r3, [r3, #12]
 8103ed8:	2b0f      	cmp	r3, #15
 8103eda:	d919      	bls.n	8103f10 <HAL_SPI_TransmitReceive_IT+0x184>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103ee0:	68fb      	ldr	r3, [r7, #12]
 8103ee2:	681b      	ldr	r3, [r3, #0]
 8103ee4:	6812      	ldr	r2, [r2, #0]
 8103ee6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8103ee8:	68fb      	ldr	r3, [r7, #12]
 8103eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103eec:	1d1a      	adds	r2, r3, #4
 8103eee:	68fb      	ldr	r3, [r7, #12]
 8103ef0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8103ef2:	68fb      	ldr	r3, [r7, #12]
 8103ef4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103ef8:	b29b      	uxth	r3, r3
 8103efa:	3b01      	subs	r3, #1
 8103efc:	b29a      	uxth	r2, r3
 8103efe:	68fb      	ldr	r3, [r7, #12]
 8103f00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        tmp_TxXferCount = hspi->TxXferCount;
 8103f04:	68fb      	ldr	r3, [r7, #12]
 8103f06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103f0a:	b29b      	uxth	r3, r3
 8103f0c:	623b      	str	r3, [r7, #32]
 8103f0e:	e0a1      	b.n	8104054 <HAL_SPI_TransmitReceive_IT+0x2c8>
      }
      /* Transmit data in 16 Bit mode */
      else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103f10:	68fb      	ldr	r3, [r7, #12]
 8103f12:	68db      	ldr	r3, [r3, #12]
 8103f14:	2b07      	cmp	r3, #7
 8103f16:	d93c      	bls.n	8103f92 <HAL_SPI_TransmitReceive_IT+0x206>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103f18:	68fb      	ldr	r3, [r7, #12]
 8103f1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103f1e:	b29b      	uxth	r3, r3
 8103f20:	2b01      	cmp	r3, #1
 8103f22:	d91d      	bls.n	8103f60 <HAL_SPI_TransmitReceive_IT+0x1d4>
 8103f24:	68fb      	ldr	r3, [r7, #12]
 8103f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103f28:	2b00      	cmp	r3, #0
 8103f2a:	d019      	beq.n	8103f60 <HAL_SPI_TransmitReceive_IT+0x1d4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103f2c:	68fb      	ldr	r3, [r7, #12]
 8103f2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103f30:	68fb      	ldr	r3, [r7, #12]
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	6812      	ldr	r2, [r2, #0]
 8103f36:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103f38:	68fb      	ldr	r3, [r7, #12]
 8103f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f3c:	1d1a      	adds	r2, r3, #4
 8103f3e:	68fb      	ldr	r3, [r7, #12]
 8103f40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103f42:	68fb      	ldr	r3, [r7, #12]
 8103f44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103f48:	b29b      	uxth	r3, r3
 8103f4a:	3b02      	subs	r3, #2
 8103f4c:	b29a      	uxth	r2, r3
 8103f4e:	68fb      	ldr	r3, [r7, #12]
 8103f50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8103f54:	68fb      	ldr	r3, [r7, #12]
 8103f56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103f5a:	b29b      	uxth	r3, r3
 8103f5c:	623b      	str	r3, [r7, #32]
 8103f5e:	e079      	b.n	8104054 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8103f60:	68fb      	ldr	r3, [r7, #12]
 8103f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f64:	881a      	ldrh	r2, [r3, #0]
 8103f66:	69bb      	ldr	r3, [r7, #24]
 8103f68:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103f6a:	68fb      	ldr	r3, [r7, #12]
 8103f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f6e:	1c9a      	adds	r2, r3, #2
 8103f70:	68fb      	ldr	r3, [r7, #12]
 8103f72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8103f74:	68fb      	ldr	r3, [r7, #12]
 8103f76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103f7a:	b29b      	uxth	r3, r3
 8103f7c:	3b01      	subs	r3, #1
 8103f7e:	b29a      	uxth	r2, r3
 8103f80:	68fb      	ldr	r3, [r7, #12]
 8103f82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8103f86:	68fb      	ldr	r3, [r7, #12]
 8103f88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103f8c:	b29b      	uxth	r3, r3
 8103f8e:	623b      	str	r3, [r7, #32]
 8103f90:	e060      	b.n	8104054 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
      }
      /* Transmit data in 8 Bit mode */
      else
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8103f92:	68fb      	ldr	r3, [r7, #12]
 8103f94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103f98:	b29b      	uxth	r3, r3
 8103f9a:	2b03      	cmp	r3, #3
 8103f9c:	d91d      	bls.n	8103fda <HAL_SPI_TransmitReceive_IT+0x24e>
 8103f9e:	68fb      	ldr	r3, [r7, #12]
 8103fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103fa2:	2b40      	cmp	r3, #64	; 0x40
 8103fa4:	d919      	bls.n	8103fda <HAL_SPI_TransmitReceive_IT+0x24e>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103fa6:	68fb      	ldr	r3, [r7, #12]
 8103fa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103faa:	68fb      	ldr	r3, [r7, #12]
 8103fac:	681b      	ldr	r3, [r3, #0]
 8103fae:	6812      	ldr	r2, [r2, #0]
 8103fb0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103fb2:	68fb      	ldr	r3, [r7, #12]
 8103fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103fb6:	1d1a      	adds	r2, r3, #4
 8103fb8:	68fb      	ldr	r3, [r7, #12]
 8103fba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8103fbc:	68fb      	ldr	r3, [r7, #12]
 8103fbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103fc2:	b29b      	uxth	r3, r3
 8103fc4:	3b04      	subs	r3, #4
 8103fc6:	b29a      	uxth	r2, r3
 8103fc8:	68fb      	ldr	r3, [r7, #12]
 8103fca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8103fce:	68fb      	ldr	r3, [r7, #12]
 8103fd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103fd4:	b29b      	uxth	r3, r3
 8103fd6:	623b      	str	r3, [r7, #32]
 8103fd8:	e03c      	b.n	8104054 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103fda:	68fb      	ldr	r3, [r7, #12]
 8103fdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103fe0:	b29b      	uxth	r3, r3
 8103fe2:	2b01      	cmp	r3, #1
 8103fe4:	d91c      	bls.n	8104020 <HAL_SPI_TransmitReceive_IT+0x294>
 8103fe6:	68fb      	ldr	r3, [r7, #12]
 8103fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103fea:	2b00      	cmp	r3, #0
 8103fec:	d018      	beq.n	8104020 <HAL_SPI_TransmitReceive_IT+0x294>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8103fee:	68fb      	ldr	r3, [r7, #12]
 8103ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ff2:	881a      	ldrh	r2, [r3, #0]
 8103ff4:	69bb      	ldr	r3, [r7, #24]
 8103ff6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ffc:	1c9a      	adds	r2, r3, #2
 8103ffe:	68fb      	ldr	r3, [r7, #12]
 8104000:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104002:	68fb      	ldr	r3, [r7, #12]
 8104004:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104008:	b29b      	uxth	r3, r3
 810400a:	3b02      	subs	r3, #2
 810400c:	b29a      	uxth	r2, r3
 810400e:	68fb      	ldr	r3, [r7, #12]
 8104010:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 8104014:	68fb      	ldr	r3, [r7, #12]
 8104016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810401a:	b29b      	uxth	r3, r3
 810401c:	623b      	str	r3, [r7, #32]
 810401e:	e019      	b.n	8104054 <HAL_SPI_TransmitReceive_IT+0x2c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8104020:	68fb      	ldr	r3, [r7, #12]
 8104022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104024:	68fb      	ldr	r3, [r7, #12]
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	3320      	adds	r3, #32
 810402a:	7812      	ldrb	r2, [r2, #0]
 810402c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104032:	1c5a      	adds	r2, r3, #1
 8104034:	68fb      	ldr	r3, [r7, #12]
 8104036:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104038:	68fb      	ldr	r3, [r7, #12]
 810403a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810403e:	b29b      	uxth	r3, r3
 8104040:	3b01      	subs	r3, #1
 8104042:	b29a      	uxth	r2, r3
 8104044:	68fb      	ldr	r3, [r7, #12]
 8104046:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          tmp_TxXferCount = hspi->TxXferCount;
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104050:	b29b      	uxth	r3, r3
 8104052:	623b      	str	r3, [r7, #32]
        }
      }

      max_fifo_length++;
 8104054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104056:	3301      	adds	r3, #1
 8104058:	627b      	str	r3, [r7, #36]	; 0x24
 810405a:	e007      	b.n	810406c <HAL_SPI_TransmitReceive_IT+0x2e0>
    }
    else
    {
      errorcode = HAL_BUSY;
 810405c:	2302      	movs	r3, #2
 810405e:	77fb      	strb	r3, [r7, #31]
      __HAL_UNLOCK(hspi);
 8104060:	68fb      	ldr	r3, [r7, #12]
 8104062:	2200      	movs	r2, #0
 8104064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return errorcode;
 8104068:	7ffb      	ldrb	r3, [r7, #31]
 810406a:	e026      	b.n	81040ba <HAL_SPI_TransmitReceive_IT+0x32e>
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 810406c:	68fb      	ldr	r3, [r7, #12]
 810406e:	681b      	ldr	r3, [r3, #0]
 8104070:	695b      	ldr	r3, [r3, #20]
 8104072:	f003 0302 	and.w	r3, r3, #2
 8104076:	2b02      	cmp	r3, #2
 8104078:	d103      	bne.n	8104082 <HAL_SPI_TransmitReceive_IT+0x2f6>
 810407a:	6a3b      	ldr	r3, [r7, #32]
 810407c:	2b00      	cmp	r3, #0
 810407e:	f47f af25 	bne.w	8103ecc <HAL_SPI_TransmitReceive_IT+0x140>
    }
  }

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 8104082:	68fb      	ldr	r3, [r7, #12]
 8104084:	681b      	ldr	r3, [r3, #0]
 8104086:	691b      	ldr	r3, [r3, #16]
 8104088:	68fa      	ldr	r2, [r7, #12]
 810408a:	6812      	ldr	r2, [r2, #0]
 810408c:	f443 63ed 	orr.w	r3, r3, #1896	; 0x768
 8104090:	f043 0304 	orr.w	r3, r3, #4
 8104094:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104096:	68fb      	ldr	r3, [r7, #12]
 8104098:	685b      	ldr	r3, [r3, #4]
 810409a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810409e:	d107      	bne.n	81040b0 <HAL_SPI_TransmitReceive_IT+0x324>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81040a0:	68fb      	ldr	r3, [r7, #12]
 81040a2:	681b      	ldr	r3, [r3, #0]
 81040a4:	681a      	ldr	r2, [r3, #0]
 81040a6:	68fb      	ldr	r3, [r7, #12]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81040ae:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81040b0:	68fb      	ldr	r3, [r7, #12]
 81040b2:	2200      	movs	r2, #0
 81040b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 81040b8:	7ffb      	ldrb	r3, [r7, #31]
}
 81040ba:	4618      	mov	r0, r3
 81040bc:	372c      	adds	r7, #44	; 0x2c
 81040be:	46bd      	mov	sp, r7
 81040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040c4:	4770      	bx	lr
 81040c6:	bf00      	nop
 81040c8:	081046b7 	.word	0x081046b7
 81040cc:	081045a7 	.word	0x081045a7
 81040d0:	08104547 	.word	0x08104547
 81040d4:	08104659 	.word	0x08104659
 81040d8:	081044e9 	.word	0x081044e9
 81040dc:	081045ff 	.word	0x081045ff

081040e0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 81040e0:	b580      	push	{r7, lr}
 81040e2:	b08a      	sub	sp, #40	; 0x28
 81040e4:	af00      	add	r7, sp, #0
 81040e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	681b      	ldr	r3, [r3, #0]
 81040ec:	691b      	ldr	r3, [r3, #16]
 81040ee:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	681b      	ldr	r3, [r3, #0]
 81040f4:	695b      	ldr	r3, [r3, #20]
 81040f6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 81040f8:	6a3a      	ldr	r2, [r7, #32]
 81040fa:	69fb      	ldr	r3, [r7, #28]
 81040fc:	4013      	ands	r3, r2
 81040fe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	689b      	ldr	r3, [r3, #8]
 8104106:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8104108:	2300      	movs	r3, #0
 810410a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104112:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104114:	687b      	ldr	r3, [r7, #4]
 8104116:	681b      	ldr	r3, [r3, #0]
 8104118:	3330      	adds	r3, #48	; 0x30
 810411a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 810411c:	69bb      	ldr	r3, [r7, #24]
 810411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104122:	2b00      	cmp	r3, #0
 8104124:	d113      	bne.n	810414e <HAL_SPI_IRQHandler+0x6e>
 8104126:	69bb      	ldr	r3, [r7, #24]
 8104128:	f003 0320 	and.w	r3, r3, #32
 810412c:	2b00      	cmp	r3, #0
 810412e:	d10e      	bne.n	810414e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8104130:	69bb      	ldr	r3, [r7, #24]
 8104132:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8104136:	2b00      	cmp	r3, #0
 8104138:	d009      	beq.n	810414e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810413e:	6878      	ldr	r0, [r7, #4]
 8104140:	4798      	blx	r3
    hspi->RxISR(hspi);
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104146:	6878      	ldr	r0, [r7, #4]
 8104148:	4798      	blx	r3
    handled = 1UL;
 810414a:	2301      	movs	r3, #1
 810414c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 810414e:	69bb      	ldr	r3, [r7, #24]
 8104150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104154:	2b00      	cmp	r3, #0
 8104156:	d10f      	bne.n	8104178 <HAL_SPI_IRQHandler+0x98>
 8104158:	69bb      	ldr	r3, [r7, #24]
 810415a:	f003 0301 	and.w	r3, r3, #1
 810415e:	2b00      	cmp	r3, #0
 8104160:	d00a      	beq.n	8104178 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8104162:	69bb      	ldr	r3, [r7, #24]
 8104164:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8104168:	2b00      	cmp	r3, #0
 810416a:	d105      	bne.n	8104178 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 810416c:	687b      	ldr	r3, [r7, #4]
 810416e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104170:	6878      	ldr	r0, [r7, #4]
 8104172:	4798      	blx	r3
    handled = 1UL;
 8104174:	2301      	movs	r3, #1
 8104176:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8104178:	69bb      	ldr	r3, [r7, #24]
 810417a:	f003 0320 	and.w	r3, r3, #32
 810417e:	2b00      	cmp	r3, #0
 8104180:	d10f      	bne.n	81041a2 <HAL_SPI_IRQHandler+0xc2>
 8104182:	69bb      	ldr	r3, [r7, #24]
 8104184:	f003 0302 	and.w	r3, r3, #2
 8104188:	2b00      	cmp	r3, #0
 810418a:	d00a      	beq.n	81041a2 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 810418c:	69bb      	ldr	r3, [r7, #24]
 810418e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8104192:	2b00      	cmp	r3, #0
 8104194:	d105      	bne.n	81041a2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810419a:	6878      	ldr	r0, [r7, #4]
 810419c:	4798      	blx	r3
    handled = 1UL;
 810419e:	2301      	movs	r3, #1
 81041a0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 81041a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81041a4:	2b00      	cmp	r3, #0
 81041a6:	f040 815c 	bne.w	8104462 <HAL_SPI_IRQHandler+0x382>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 81041aa:	69bb      	ldr	r3, [r7, #24]
 81041ac:	f003 0308 	and.w	r3, r3, #8
 81041b0:	2b00      	cmp	r3, #0
 81041b2:	f000 808b 	beq.w	81042cc <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	681b      	ldr	r3, [r3, #0]
 81041ba:	699a      	ldr	r2, [r3, #24]
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	f042 0208 	orr.w	r2, r2, #8
 81041c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81041c6:	687b      	ldr	r3, [r7, #4]
 81041c8:	681b      	ldr	r3, [r3, #0]
 81041ca:	699a      	ldr	r2, [r3, #24]
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	f042 0210 	orr.w	r2, r2, #16
 81041d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	699a      	ldr	r2, [r3, #24]
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	681b      	ldr	r3, [r3, #0]
 81041e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81041e4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	681b      	ldr	r3, [r3, #0]
 81041ea:	691a      	ldr	r2, [r3, #16]
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	681b      	ldr	r3, [r3, #0]
 81041f0:	f022 0208 	bic.w	r2, r2, #8
 81041f4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81041f6:	687b      	ldr	r3, [r7, #4]
 81041f8:	681b      	ldr	r3, [r3, #0]
 81041fa:	689b      	ldr	r3, [r3, #8]
 81041fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8104200:	2b00      	cmp	r3, #0
 8104202:	d13d      	bne.n	8104280 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8104204:	e036      	b.n	8104274 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	68db      	ldr	r3, [r3, #12]
 810420a:	2b0f      	cmp	r3, #15
 810420c:	d90b      	bls.n	8104226 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	681a      	ldr	r2, [r3, #0]
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104216:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104218:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810421a:	687b      	ldr	r3, [r7, #4]
 810421c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810421e:	1d1a      	adds	r2, r3, #4
 8104220:	687b      	ldr	r3, [r7, #4]
 8104222:	665a      	str	r2, [r3, #100]	; 0x64
 8104224:	e01d      	b.n	8104262 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	68db      	ldr	r3, [r3, #12]
 810422a:	2b07      	cmp	r3, #7
 810422c:	d90b      	bls.n	8104246 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810422e:	687b      	ldr	r3, [r7, #4]
 8104230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104232:	68fa      	ldr	r2, [r7, #12]
 8104234:	8812      	ldrh	r2, [r2, #0]
 8104236:	b292      	uxth	r2, r2
 8104238:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810423a:	687b      	ldr	r3, [r7, #4]
 810423c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810423e:	1c9a      	adds	r2, r3, #2
 8104240:	687b      	ldr	r3, [r7, #4]
 8104242:	665a      	str	r2, [r3, #100]	; 0x64
 8104244:	e00d      	b.n	8104262 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	681b      	ldr	r3, [r3, #0]
 810424a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104252:	7812      	ldrb	r2, [r2, #0]
 8104254:	b2d2      	uxtb	r2, r2
 8104256:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810425c:	1c5a      	adds	r2, r3, #1
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8104262:	687b      	ldr	r3, [r7, #4]
 8104264:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104268:	b29b      	uxth	r3, r3
 810426a:	3b01      	subs	r3, #1
 810426c:	b29a      	uxth	r2, r3
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810427a:	b29b      	uxth	r3, r3
 810427c:	2b00      	cmp	r3, #0
 810427e:	d1c2      	bne.n	8104206 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8104280:	6878      	ldr	r0, [r7, #4]
 8104282:	f000 fa44 	bl	810470e <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	2201      	movs	r2, #1
 810428a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810428e:	687b      	ldr	r3, [r7, #4]
 8104290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104294:	2b00      	cmp	r3, #0
 8104296:	d003      	beq.n	81042a0 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8104298:	6878      	ldr	r0, [r7, #4]
 810429a:	f000 f901 	bl	81044a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 810429e:	e0e5      	b.n	810446c <HAL_SPI_IRQHandler+0x38c>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 81042a0:	7cfb      	ldrb	r3, [r7, #19]
 81042a2:	2b05      	cmp	r3, #5
 81042a4:	d103      	bne.n	81042ae <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 81042a6:	6878      	ldr	r0, [r7, #4]
 81042a8:	f000 f8f0 	bl	810448c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 81042ac:	e0db      	b.n	8104466 <HAL_SPI_IRQHandler+0x386>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 81042ae:	7cfb      	ldrb	r3, [r7, #19]
 81042b0:	2b04      	cmp	r3, #4
 81042b2:	d103      	bne.n	81042bc <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 81042b4:	6878      	ldr	r0, [r7, #4]
 81042b6:	f7fc fc0b 	bl	8100ad0 <HAL_SPI_RxCpltCallback>
    return;
 81042ba:	e0d4      	b.n	8104466 <HAL_SPI_IRQHandler+0x386>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 81042bc:	7cfb      	ldrb	r3, [r7, #19]
 81042be:	2b03      	cmp	r3, #3
 81042c0:	f040 80d1 	bne.w	8104466 <HAL_SPI_IRQHandler+0x386>
      HAL_SPI_TxCpltCallback(hspi);
 81042c4:	6878      	ldr	r0, [r7, #4]
 81042c6:	f000 f8d7 	bl	8104478 <HAL_SPI_TxCpltCallback>
    return;
 81042ca:	e0cc      	b.n	8104466 <HAL_SPI_IRQHandler+0x386>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 81042cc:	69fb      	ldr	r3, [r7, #28]
 81042ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81042d2:	2b00      	cmp	r3, #0
 81042d4:	d00d      	beq.n	81042f2 <HAL_SPI_IRQHandler+0x212>
 81042d6:	6a3b      	ldr	r3, [r7, #32]
 81042d8:	f003 0308 	and.w	r3, r3, #8
 81042dc:	2b00      	cmp	r3, #0
 81042de:	d008      	beq.n	81042f2 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	699a      	ldr	r2, [r3, #24]
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81042ee:	619a      	str	r2, [r3, #24]

    return;
 81042f0:	e0bc      	b.n	810446c <HAL_SPI_IRQHandler+0x38c>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 81042f2:	69bb      	ldr	r3, [r7, #24]
 81042f4:	f403 7358 	and.w	r3, r3, #864	; 0x360
 81042f8:	2b00      	cmp	r3, #0
 81042fa:	f000 80b7 	beq.w	810446c <HAL_SPI_IRQHandler+0x38c>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 81042fe:	69bb      	ldr	r3, [r7, #24]
 8104300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104304:	2b00      	cmp	r3, #0
 8104306:	d00f      	beq.n	8104328 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8104308:	687b      	ldr	r3, [r7, #4]
 810430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810430e:	f043 0204 	orr.w	r2, r3, #4
 8104312:	687b      	ldr	r3, [r7, #4]
 8104314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	681b      	ldr	r3, [r3, #0]
 810431c:	699a      	ldr	r2, [r3, #24]
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	681b      	ldr	r3, [r3, #0]
 8104322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8104326:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8104328:	69bb      	ldr	r3, [r7, #24]
 810432a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810432e:	2b00      	cmp	r3, #0
 8104330:	d00f      	beq.n	8104352 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8104332:	687b      	ldr	r3, [r7, #4]
 8104334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104338:	f043 0201 	orr.w	r2, r3, #1
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	699a      	ldr	r2, [r3, #24]
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	681b      	ldr	r3, [r3, #0]
 810434c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104350:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8104352:	69bb      	ldr	r3, [r7, #24]
 8104354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104358:	2b00      	cmp	r3, #0
 810435a:	d00f      	beq.n	810437c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810435c:	687b      	ldr	r3, [r7, #4]
 810435e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104362:	f043 0208 	orr.w	r2, r3, #8
 8104366:	687b      	ldr	r3, [r7, #4]
 8104368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	681b      	ldr	r3, [r3, #0]
 8104370:	699a      	ldr	r2, [r3, #24]
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	681b      	ldr	r3, [r3, #0]
 8104376:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810437a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 810437c:	69bb      	ldr	r3, [r7, #24]
 810437e:	f003 0320 	and.w	r3, r3, #32
 8104382:	2b00      	cmp	r3, #0
 8104384:	d00f      	beq.n	81043a6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810438c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104390:	687b      	ldr	r3, [r7, #4]
 8104392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	699a      	ldr	r2, [r3, #24]
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	f042 0220 	orr.w	r2, r2, #32
 81043a4:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043ac:	2b00      	cmp	r3, #0
 81043ae:	d05c      	beq.n	810446a <HAL_SPI_IRQHandler+0x38a>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	681a      	ldr	r2, [r3, #0]
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	681b      	ldr	r3, [r3, #0]
 81043ba:	f022 0201 	bic.w	r2, r2, #1
 81043be:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	691b      	ldr	r3, [r3, #16]
 81043c6:	687a      	ldr	r2, [r7, #4]
 81043c8:	6812      	ldr	r2, [r2, #0]
 81043ca:	f423 735a 	bic.w	r3, r3, #872	; 0x368
 81043ce:	f023 0303 	bic.w	r3, r3, #3
 81043d2:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 81043d4:	697b      	ldr	r3, [r7, #20]
 81043d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 81043da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 81043de:	d138      	bne.n	8104452 <HAL_SPI_IRQHandler+0x372>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	689a      	ldr	r2, [r3, #8]
 81043e6:	687b      	ldr	r3, [r7, #4]
 81043e8:	681b      	ldr	r3, [r3, #0]
 81043ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 81043ee:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81043f4:	2b00      	cmp	r3, #0
 81043f6:	d013      	beq.n	8104420 <HAL_SPI_IRQHandler+0x340>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81043fc:	4a1d      	ldr	r2, [pc, #116]	; (8104474 <HAL_SPI_IRQHandler+0x394>)
 81043fe:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8104400:	687b      	ldr	r3, [r7, #4]
 8104402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104404:	4618      	mov	r0, r3
 8104406:	f7fd f913 	bl	8101630 <HAL_DMA_Abort_IT>
 810440a:	4603      	mov	r3, r0
 810440c:	2b00      	cmp	r3, #0
 810440e:	d007      	beq.n	8104420 <HAL_SPI_IRQHandler+0x340>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8104420:	687b      	ldr	r3, [r7, #4]
 8104422:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104424:	2b00      	cmp	r3, #0
 8104426:	d020      	beq.n	810446a <HAL_SPI_IRQHandler+0x38a>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810442c:	4a11      	ldr	r2, [pc, #68]	; (8104474 <HAL_SPI_IRQHandler+0x394>)
 810442e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104434:	4618      	mov	r0, r3
 8104436:	f7fd f8fb 	bl	8101630 <HAL_DMA_Abort_IT>
 810443a:	4603      	mov	r3, r0
 810443c:	2b00      	cmp	r3, #0
 810443e:	d014      	beq.n	810446a <HAL_SPI_IRQHandler+0x38a>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8104450:	e00b      	b.n	810446a <HAL_SPI_IRQHandler+0x38a>
        hspi->State = HAL_SPI_STATE_READY;
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	2201      	movs	r2, #1
 8104456:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 810445a:	6878      	ldr	r0, [r7, #4]
 810445c:	f000 f820 	bl	81044a0 <HAL_SPI_ErrorCallback>
    return;
 8104460:	e003      	b.n	810446a <HAL_SPI_IRQHandler+0x38a>
    return;
 8104462:	bf00      	nop
 8104464:	e002      	b.n	810446c <HAL_SPI_IRQHandler+0x38c>
    return;
 8104466:	bf00      	nop
 8104468:	e000      	b.n	810446c <HAL_SPI_IRQHandler+0x38c>
    return;
 810446a:	bf00      	nop
  }
}
 810446c:	3728      	adds	r7, #40	; 0x28
 810446e:	46bd      	mov	sp, r7
 8104470:	bd80      	pop	{r7, pc}
 8104472:	bf00      	nop
 8104474:	081044b5 	.word	0x081044b5

08104478 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8104478:	b480      	push	{r7}
 810447a:	b083      	sub	sp, #12
 810447c:	af00      	add	r7, sp, #0
 810447e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8104480:	bf00      	nop
 8104482:	370c      	adds	r7, #12
 8104484:	46bd      	mov	sp, r7
 8104486:	f85d 7b04 	ldr.w	r7, [sp], #4
 810448a:	4770      	bx	lr

0810448c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 810448c:	b480      	push	{r7}
 810448e:	b083      	sub	sp, #12
 8104490:	af00      	add	r7, sp, #0
 8104492:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8104494:	bf00      	nop
 8104496:	370c      	adds	r7, #12
 8104498:	46bd      	mov	sp, r7
 810449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810449e:	4770      	bx	lr

081044a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 81044a0:	b480      	push	{r7}
 81044a2:	b083      	sub	sp, #12
 81044a4:	af00      	add	r7, sp, #0
 81044a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 81044a8:	bf00      	nop
 81044aa:	370c      	adds	r7, #12
 81044ac:	46bd      	mov	sp, r7
 81044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044b2:	4770      	bx	lr

081044b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81044b4:	b580      	push	{r7, lr}
 81044b6:	b084      	sub	sp, #16
 81044b8:	af00      	add	r7, sp, #0
 81044ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 81044bc:	687b      	ldr	r3, [r7, #4]
 81044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81044c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 81044c2:	68fb      	ldr	r3, [r7, #12]
 81044c4:	2200      	movs	r2, #0
 81044c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 81044ca:	68fb      	ldr	r3, [r7, #12]
 81044cc:	2200      	movs	r2, #0
 81044ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 81044d2:	68fb      	ldr	r3, [r7, #12]
 81044d4:	2201      	movs	r2, #1
 81044d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 81044da:	68f8      	ldr	r0, [r7, #12]
 81044dc:	f7ff ffe0 	bl	81044a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 81044e0:	bf00      	nop
 81044e2:	3710      	adds	r7, #16
 81044e4:	46bd      	mov	sp, r7
 81044e6:	bd80      	pop	{r7, pc}

081044e8 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 81044e8:	b480      	push	{r7}
 81044ea:	b083      	sub	sp, #12
 81044ec:	af00      	add	r7, sp, #0
 81044ee:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81044f8:	687b      	ldr	r3, [r7, #4]
 81044fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81044fc:	7812      	ldrb	r2, [r2, #0]
 81044fe:	b2d2      	uxtb	r2, r2
 8104500:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104506:	1c5a      	adds	r2, r3, #1
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104512:	b29b      	uxth	r3, r3
 8104514:	3b01      	subs	r3, #1
 8104516:	b29a      	uxth	r2, r3
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104524:	b29b      	uxth	r3, r3
 8104526:	2b00      	cmp	r3, #0
 8104528:	d107      	bne.n	810453a <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	691a      	ldr	r2, [r3, #16]
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	681b      	ldr	r3, [r3, #0]
 8104534:	f022 0201 	bic.w	r2, r2, #1
 8104538:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 810453a:	bf00      	nop
 810453c:	370c      	adds	r7, #12
 810453e:	46bd      	mov	sp, r7
 8104540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104544:	4770      	bx	lr

08104546 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8104546:	b480      	push	{r7}
 8104548:	b085      	sub	sp, #20
 810454a:	af00      	add	r7, sp, #0
 810454c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	681b      	ldr	r3, [r3, #0]
 8104552:	3330      	adds	r3, #48	; 0x30
 8104554:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810455a:	68fa      	ldr	r2, [r7, #12]
 810455c:	8812      	ldrh	r2, [r2, #0]
 810455e:	b292      	uxth	r2, r2
 8104560:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104566:	1c9a      	adds	r2, r3, #2
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 810456c:	687b      	ldr	r3, [r7, #4]
 810456e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104572:	b29b      	uxth	r3, r3
 8104574:	3b01      	subs	r3, #1
 8104576:	b29a      	uxth	r2, r3
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104584:	b29b      	uxth	r3, r3
 8104586:	2b00      	cmp	r3, #0
 8104588:	d107      	bne.n	810459a <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	681b      	ldr	r3, [r3, #0]
 810458e:	691a      	ldr	r2, [r3, #16]
 8104590:	687b      	ldr	r3, [r7, #4]
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	f022 0201 	bic.w	r2, r2, #1
 8104598:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 810459a:	bf00      	nop
 810459c:	3714      	adds	r7, #20
 810459e:	46bd      	mov	sp, r7
 81045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045a4:	4770      	bx	lr

081045a6 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 81045a6:	b480      	push	{r7}
 81045a8:	b083      	sub	sp, #12
 81045aa:	af00      	add	r7, sp, #0
 81045ac:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	681a      	ldr	r2, [r3, #0]
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81045b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81045b8:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81045be:	1d1a      	adds	r2, r3, #4
 81045c0:	687b      	ldr	r3, [r7, #4]
 81045c2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount--;
 81045c4:	687b      	ldr	r3, [r7, #4]
 81045c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81045ca:	b29b      	uxth	r3, r3
 81045cc:	3b01      	subs	r3, #1
 81045ce:	b29a      	uxth	r2, r3
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81045dc:	b29b      	uxth	r3, r3
 81045de:	2b00      	cmp	r3, #0
 81045e0:	d107      	bne.n	81045f2 <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	691a      	ldr	r2, [r3, #16]
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	f022 0201 	bic.w	r2, r2, #1
 81045f0:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 81045f2:	bf00      	nop
 81045f4:	370c      	adds	r7, #12
 81045f6:	46bd      	mov	sp, r7
 81045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81045fc:	4770      	bx	lr

081045fe <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 81045fe:	b480      	push	{r7}
 8104600:	b083      	sub	sp, #12
 8104602:	af00      	add	r7, sp, #0
 8104604:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((uint8_t *)hspi->pTxBuffPtr);
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810460a:	687b      	ldr	r3, [r7, #4]
 810460c:	681b      	ldr	r3, [r3, #0]
 810460e:	3320      	adds	r3, #32
 8104610:	7812      	ldrb	r2, [r2, #0]
 8104612:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104618:	1c5a      	adds	r2, r3, #1
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104624:	b29b      	uxth	r3, r3
 8104626:	3b01      	subs	r3, #1
 8104628:	b29a      	uxth	r2, r3
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104636:	b29b      	uxth	r3, r3
 8104638:	2b00      	cmp	r3, #0
 810463a:	d107      	bne.n	810464c <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	681b      	ldr	r3, [r3, #0]
 8104640:	691a      	ldr	r2, [r3, #16]
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	681b      	ldr	r3, [r3, #0]
 8104646:	f022 0202 	bic.w	r2, r2, #2
 810464a:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 810464c:	bf00      	nop
 810464e:	370c      	adds	r7, #12
 8104650:	46bd      	mov	sp, r7
 8104652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104656:	4770      	bx	lr

08104658 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8104658:	b480      	push	{r7}
 810465a:	b085      	sub	sp, #20
 810465c:	af00      	add	r7, sp, #0
 810465e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	681b      	ldr	r3, [r3, #0]
 8104664:	3320      	adds	r3, #32
 8104666:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810466c:	881a      	ldrh	r2, [r3, #0]
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104676:	1c9a      	adds	r2, r3, #2
 8104678:	687b      	ldr	r3, [r7, #4]
 810467a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104682:	b29b      	uxth	r3, r3
 8104684:	3b01      	subs	r3, #1
 8104686:	b29a      	uxth	r2, r3
 8104688:	687b      	ldr	r3, [r7, #4]
 810468a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104694:	b29b      	uxth	r3, r3
 8104696:	2b00      	cmp	r3, #0
 8104698:	d107      	bne.n	81046aa <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	691a      	ldr	r2, [r3, #16]
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	681b      	ldr	r3, [r3, #0]
 81046a4:	f022 0202 	bic.w	r2, r2, #2
 81046a8:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 81046aa:	bf00      	nop
 81046ac:	3714      	adds	r7, #20
 81046ae:	46bd      	mov	sp, r7
 81046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046b4:	4770      	bx	lr

081046b6 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 81046b6:	b480      	push	{r7}
 81046b8:	b083      	sub	sp, #12
 81046ba:	af00      	add	r7, sp, #0
 81046bc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81046be:	687b      	ldr	r3, [r7, #4]
 81046c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	6812      	ldr	r2, [r2, #0]
 81046c8:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81046ce:	1d1a      	adds	r2, r3, #4
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount--;
 81046d4:	687b      	ldr	r3, [r7, #4]
 81046d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046da:	b29b      	uxth	r3, r3
 81046dc:	3b01      	subs	r3, #1
 81046de:	b29a      	uxth	r2, r3
 81046e0:	687b      	ldr	r3, [r7, #4]
 81046e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046ec:	b29b      	uxth	r3, r3
 81046ee:	2b00      	cmp	r3, #0
 81046f0:	d107      	bne.n	8104702 <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	691a      	ldr	r2, [r3, #16]
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	681b      	ldr	r3, [r3, #0]
 81046fc:	f022 0202 	bic.w	r2, r2, #2
 8104700:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8104702:	bf00      	nop
 8104704:	370c      	adds	r7, #12
 8104706:	46bd      	mov	sp, r7
 8104708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810470c:	4770      	bx	lr

0810470e <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810470e:	b480      	push	{r7}
 8104710:	b085      	sub	sp, #20
 8104712:	af00      	add	r7, sp, #0
 8104714:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	695b      	ldr	r3, [r3, #20]
 810471c:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	699a      	ldr	r2, [r3, #24]
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	681b      	ldr	r3, [r3, #0]
 8104728:	f042 0208 	orr.w	r2, r2, #8
 810472c:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	699a      	ldr	r2, [r3, #24]
 8104734:	687b      	ldr	r3, [r7, #4]
 8104736:	681b      	ldr	r3, [r3, #0]
 8104738:	f042 0210 	orr.w	r2, r2, #16
 810473c:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	681b      	ldr	r3, [r3, #0]
 8104742:	681a      	ldr	r2, [r3, #0]
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	681b      	ldr	r3, [r3, #0]
 8104748:	f022 0201 	bic.w	r2, r2, #1
 810474c:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 810474e:	687b      	ldr	r3, [r7, #4]
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	691b      	ldr	r3, [r3, #16]
 8104754:	687a      	ldr	r2, [r7, #4]
 8104756:	6812      	ldr	r2, [r2, #0]
 8104758:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810475c:	f023 0303 	bic.w	r3, r3, #3
 8104760:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8104762:	687b      	ldr	r3, [r7, #4]
 8104764:	681b      	ldr	r3, [r3, #0]
 8104766:	689a      	ldr	r2, [r3, #8]
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	681b      	ldr	r3, [r3, #0]
 810476c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104770:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104772:	687b      	ldr	r3, [r7, #4]
 8104774:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104778:	b2db      	uxtb	r3, r3
 810477a:	2b04      	cmp	r3, #4
 810477c:	d014      	beq.n	81047a8 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810477e:	68fb      	ldr	r3, [r7, #12]
 8104780:	f003 0320 	and.w	r3, r3, #32
 8104784:	2b00      	cmp	r3, #0
 8104786:	d00f      	beq.n	81047a8 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810478e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104792:	687b      	ldr	r3, [r7, #4]
 8104794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104798:	687b      	ldr	r3, [r7, #4]
 810479a:	681b      	ldr	r3, [r3, #0]
 810479c:	699a      	ldr	r2, [r3, #24]
 810479e:	687b      	ldr	r3, [r7, #4]
 81047a0:	681b      	ldr	r3, [r3, #0]
 81047a2:	f042 0220 	orr.w	r2, r2, #32
 81047a6:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81047ae:	b2db      	uxtb	r3, r3
 81047b0:	2b03      	cmp	r3, #3
 81047b2:	d014      	beq.n	81047de <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81047b4:	68fb      	ldr	r3, [r7, #12]
 81047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81047ba:	2b00      	cmp	r3, #0
 81047bc:	d00f      	beq.n	81047de <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81047c4:	f043 0204 	orr.w	r2, r3, #4
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81047ce:	687b      	ldr	r3, [r7, #4]
 81047d0:	681b      	ldr	r3, [r3, #0]
 81047d2:	699a      	ldr	r2, [r3, #24]
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	681b      	ldr	r3, [r3, #0]
 81047d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81047dc:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81047de:	68fb      	ldr	r3, [r7, #12]
 81047e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81047e4:	2b00      	cmp	r3, #0
 81047e6:	d00f      	beq.n	8104808 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81047ee:	f043 0201 	orr.w	r2, r3, #1
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	699a      	ldr	r2, [r3, #24]
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	681b      	ldr	r3, [r3, #0]
 8104802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104806:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8104808:	68fb      	ldr	r3, [r7, #12]
 810480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810480e:	2b00      	cmp	r3, #0
 8104810:	d00f      	beq.n	8104832 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8104812:	687b      	ldr	r3, [r7, #4]
 8104814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104818:	f043 0208 	orr.w	r2, r3, #8
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	681b      	ldr	r3, [r3, #0]
 8104826:	699a      	ldr	r2, [r3, #24]
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104830:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	2200      	movs	r2, #0
 8104836:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	2200      	movs	r2, #0
 810483e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8104842:	bf00      	nop
 8104844:	3714      	adds	r7, #20
 8104846:	46bd      	mov	sp, r7
 8104848:	f85d 7b04 	ldr.w	r7, [sp], #4
 810484c:	4770      	bx	lr

0810484e <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810484e:	b480      	push	{r7}
 8104850:	b085      	sub	sp, #20
 8104852:	af00      	add	r7, sp, #0
 8104854:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810485a:	095b      	lsrs	r3, r3, #5
 810485c:	3301      	adds	r3, #1
 810485e:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	68db      	ldr	r3, [r3, #12]
 8104864:	3301      	adds	r3, #1
 8104866:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8104868:	68bb      	ldr	r3, [r7, #8]
 810486a:	3307      	adds	r3, #7
 810486c:	08db      	lsrs	r3, r3, #3
 810486e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8104870:	68bb      	ldr	r3, [r7, #8]
 8104872:	68fa      	ldr	r2, [r7, #12]
 8104874:	fb02 f303 	mul.w	r3, r2, r3
}
 8104878:	4618      	mov	r0, r3
 810487a:	3714      	adds	r7, #20
 810487c:	46bd      	mov	sp, r7
 810487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104882:	4770      	bx	lr

08104884 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104884:	b580      	push	{r7, lr}
 8104886:	b082      	sub	sp, #8
 8104888:	af00      	add	r7, sp, #0
 810488a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810488c:	687b      	ldr	r3, [r7, #4]
 810488e:	2b00      	cmp	r3, #0
 8104890:	d101      	bne.n	8104896 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104892:	2301      	movs	r3, #1
 8104894:	e042      	b.n	810491c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104896:	687b      	ldr	r3, [r7, #4]
 8104898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810489c:	2b00      	cmp	r3, #0
 810489e:	d106      	bne.n	81048ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	2200      	movs	r2, #0
 81048a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81048a8:	6878      	ldr	r0, [r7, #4]
 81048aa:	f7fc f9fd 	bl	8100ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81048ae:	687b      	ldr	r3, [r7, #4]
 81048b0:	2224      	movs	r2, #36	; 0x24
 81048b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	681b      	ldr	r3, [r3, #0]
 81048ba:	681a      	ldr	r2, [r3, #0]
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	681b      	ldr	r3, [r3, #0]
 81048c0:	f022 0201 	bic.w	r2, r2, #1
 81048c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81048c6:	6878      	ldr	r0, [r7, #4]
 81048c8:	f000 f8c2 	bl	8104a50 <UART_SetConfig>
 81048cc:	4603      	mov	r3, r0
 81048ce:	2b01      	cmp	r3, #1
 81048d0:	d101      	bne.n	81048d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81048d2:	2301      	movs	r3, #1
 81048d4:	e022      	b.n	810491c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81048d6:	687b      	ldr	r3, [r7, #4]
 81048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81048da:	2b00      	cmp	r3, #0
 81048dc:	d002      	beq.n	81048e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81048de:	6878      	ldr	r0, [r7, #4]
 81048e0:	f000 fe1e 	bl	8105520 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	685a      	ldr	r2, [r3, #4]
 81048ea:	687b      	ldr	r3, [r7, #4]
 81048ec:	681b      	ldr	r3, [r3, #0]
 81048ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81048f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81048f4:	687b      	ldr	r3, [r7, #4]
 81048f6:	681b      	ldr	r3, [r3, #0]
 81048f8:	689a      	ldr	r2, [r3, #8]
 81048fa:	687b      	ldr	r3, [r7, #4]
 81048fc:	681b      	ldr	r3, [r3, #0]
 81048fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8104902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104904:	687b      	ldr	r3, [r7, #4]
 8104906:	681b      	ldr	r3, [r3, #0]
 8104908:	681a      	ldr	r2, [r3, #0]
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	681b      	ldr	r3, [r3, #0]
 810490e:	f042 0201 	orr.w	r2, r2, #1
 8104912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104914:	6878      	ldr	r0, [r7, #4]
 8104916:	f000 fea5 	bl	8105664 <UART_CheckIdleState>
 810491a:	4603      	mov	r3, r0
}
 810491c:	4618      	mov	r0, r3
 810491e:	3708      	adds	r7, #8
 8104920:	46bd      	mov	sp, r7
 8104922:	bd80      	pop	{r7, pc}

08104924 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104924:	b580      	push	{r7, lr}
 8104926:	b08a      	sub	sp, #40	; 0x28
 8104928:	af02      	add	r7, sp, #8
 810492a:	60f8      	str	r0, [r7, #12]
 810492c:	60b9      	str	r1, [r7, #8]
 810492e:	603b      	str	r3, [r7, #0]
 8104930:	4613      	mov	r3, r2
 8104932:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8104934:	68fb      	ldr	r3, [r7, #12]
 8104936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810493a:	2b20      	cmp	r3, #32
 810493c:	f040 8083 	bne.w	8104a46 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8104940:	68bb      	ldr	r3, [r7, #8]
 8104942:	2b00      	cmp	r3, #0
 8104944:	d002      	beq.n	810494c <HAL_UART_Transmit+0x28>
 8104946:	88fb      	ldrh	r3, [r7, #6]
 8104948:	2b00      	cmp	r3, #0
 810494a:	d101      	bne.n	8104950 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 810494c:	2301      	movs	r3, #1
 810494e:	e07b      	b.n	8104a48 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8104950:	68fb      	ldr	r3, [r7, #12]
 8104952:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104956:	2b01      	cmp	r3, #1
 8104958:	d101      	bne.n	810495e <HAL_UART_Transmit+0x3a>
 810495a:	2302      	movs	r3, #2
 810495c:	e074      	b.n	8104a48 <HAL_UART_Transmit+0x124>
 810495e:	68fb      	ldr	r3, [r7, #12]
 8104960:	2201      	movs	r2, #1
 8104962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104966:	68fb      	ldr	r3, [r7, #12]
 8104968:	2200      	movs	r2, #0
 810496a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810496e:	68fb      	ldr	r3, [r7, #12]
 8104970:	2221      	movs	r2, #33	; 0x21
 8104972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104976:	f7fc fb09 	bl	8100f8c <HAL_GetTick>
 810497a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810497c:	68fb      	ldr	r3, [r7, #12]
 810497e:	88fa      	ldrh	r2, [r7, #6]
 8104980:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	88fa      	ldrh	r2, [r7, #6]
 8104988:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810498c:	68fb      	ldr	r3, [r7, #12]
 810498e:	689b      	ldr	r3, [r3, #8]
 8104990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104994:	d108      	bne.n	81049a8 <HAL_UART_Transmit+0x84>
 8104996:	68fb      	ldr	r3, [r7, #12]
 8104998:	691b      	ldr	r3, [r3, #16]
 810499a:	2b00      	cmp	r3, #0
 810499c:	d104      	bne.n	81049a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810499e:	2300      	movs	r3, #0
 81049a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81049a2:	68bb      	ldr	r3, [r7, #8]
 81049a4:	61bb      	str	r3, [r7, #24]
 81049a6:	e003      	b.n	81049b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81049a8:	68bb      	ldr	r3, [r7, #8]
 81049aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81049ac:	2300      	movs	r3, #0
 81049ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81049b0:	68fb      	ldr	r3, [r7, #12]
 81049b2:	2200      	movs	r2, #0
 81049b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 81049b8:	e02c      	b.n	8104a14 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81049ba:	683b      	ldr	r3, [r7, #0]
 81049bc:	9300      	str	r3, [sp, #0]
 81049be:	697b      	ldr	r3, [r7, #20]
 81049c0:	2200      	movs	r2, #0
 81049c2:	2180      	movs	r1, #128	; 0x80
 81049c4:	68f8      	ldr	r0, [r7, #12]
 81049c6:	f000 fe98 	bl	81056fa <UART_WaitOnFlagUntilTimeout>
 81049ca:	4603      	mov	r3, r0
 81049cc:	2b00      	cmp	r3, #0
 81049ce:	d001      	beq.n	81049d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 81049d0:	2303      	movs	r3, #3
 81049d2:	e039      	b.n	8104a48 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 81049d4:	69fb      	ldr	r3, [r7, #28]
 81049d6:	2b00      	cmp	r3, #0
 81049d8:	d10b      	bne.n	81049f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81049da:	69bb      	ldr	r3, [r7, #24]
 81049dc:	881b      	ldrh	r3, [r3, #0]
 81049de:	461a      	mov	r2, r3
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81049e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81049ea:	69bb      	ldr	r3, [r7, #24]
 81049ec:	3302      	adds	r3, #2
 81049ee:	61bb      	str	r3, [r7, #24]
 81049f0:	e007      	b.n	8104a02 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81049f2:	69fb      	ldr	r3, [r7, #28]
 81049f4:	781a      	ldrb	r2, [r3, #0]
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	681b      	ldr	r3, [r3, #0]
 81049fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81049fc:	69fb      	ldr	r3, [r7, #28]
 81049fe:	3301      	adds	r3, #1
 8104a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8104a02:	68fb      	ldr	r3, [r7, #12]
 8104a04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104a08:	b29b      	uxth	r3, r3
 8104a0a:	3b01      	subs	r3, #1
 8104a0c:	b29a      	uxth	r2, r3
 8104a0e:	68fb      	ldr	r3, [r7, #12]
 8104a10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8104a14:	68fb      	ldr	r3, [r7, #12]
 8104a16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104a1a:	b29b      	uxth	r3, r3
 8104a1c:	2b00      	cmp	r3, #0
 8104a1e:	d1cc      	bne.n	81049ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104a20:	683b      	ldr	r3, [r7, #0]
 8104a22:	9300      	str	r3, [sp, #0]
 8104a24:	697b      	ldr	r3, [r7, #20]
 8104a26:	2200      	movs	r2, #0
 8104a28:	2140      	movs	r1, #64	; 0x40
 8104a2a:	68f8      	ldr	r0, [r7, #12]
 8104a2c:	f000 fe65 	bl	81056fa <UART_WaitOnFlagUntilTimeout>
 8104a30:	4603      	mov	r3, r0
 8104a32:	2b00      	cmp	r3, #0
 8104a34:	d001      	beq.n	8104a3a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8104a36:	2303      	movs	r3, #3
 8104a38:	e006      	b.n	8104a48 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8104a3a:	68fb      	ldr	r3, [r7, #12]
 8104a3c:	2220      	movs	r2, #32
 8104a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8104a42:	2300      	movs	r3, #0
 8104a44:	e000      	b.n	8104a48 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8104a46:	2302      	movs	r3, #2
  }
}
 8104a48:	4618      	mov	r0, r3
 8104a4a:	3720      	adds	r7, #32
 8104a4c:	46bd      	mov	sp, r7
 8104a4e:	bd80      	pop	{r7, pc}

08104a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104a54:	b092      	sub	sp, #72	; 0x48
 8104a56:	af00      	add	r7, sp, #0
 8104a58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104a5a:	2300      	movs	r3, #0
 8104a5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104a60:	697b      	ldr	r3, [r7, #20]
 8104a62:	689a      	ldr	r2, [r3, #8]
 8104a64:	697b      	ldr	r3, [r7, #20]
 8104a66:	691b      	ldr	r3, [r3, #16]
 8104a68:	431a      	orrs	r2, r3
 8104a6a:	697b      	ldr	r3, [r7, #20]
 8104a6c:	695b      	ldr	r3, [r3, #20]
 8104a6e:	431a      	orrs	r2, r3
 8104a70:	697b      	ldr	r3, [r7, #20]
 8104a72:	69db      	ldr	r3, [r3, #28]
 8104a74:	4313      	orrs	r3, r2
 8104a76:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8104a78:	697b      	ldr	r3, [r7, #20]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	681a      	ldr	r2, [r3, #0]
 8104a7e:	4bbd      	ldr	r3, [pc, #756]	; (8104d74 <UART_SetConfig+0x324>)
 8104a80:	4013      	ands	r3, r2
 8104a82:	697a      	ldr	r2, [r7, #20]
 8104a84:	6812      	ldr	r2, [r2, #0]
 8104a86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8104a88:	430b      	orrs	r3, r1
 8104a8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104a8c:	697b      	ldr	r3, [r7, #20]
 8104a8e:	681b      	ldr	r3, [r3, #0]
 8104a90:	685b      	ldr	r3, [r3, #4]
 8104a92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104a96:	697b      	ldr	r3, [r7, #20]
 8104a98:	68da      	ldr	r2, [r3, #12]
 8104a9a:	697b      	ldr	r3, [r7, #20]
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	430a      	orrs	r2, r1
 8104aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8104aa2:	697b      	ldr	r3, [r7, #20]
 8104aa4:	699b      	ldr	r3, [r3, #24]
 8104aa6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104aa8:	697b      	ldr	r3, [r7, #20]
 8104aaa:	681b      	ldr	r3, [r3, #0]
 8104aac:	4ab2      	ldr	r2, [pc, #712]	; (8104d78 <UART_SetConfig+0x328>)
 8104aae:	4293      	cmp	r3, r2
 8104ab0:	d004      	beq.n	8104abc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8104ab2:	697b      	ldr	r3, [r7, #20]
 8104ab4:	6a1b      	ldr	r3, [r3, #32]
 8104ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8104ab8:	4313      	orrs	r3, r2
 8104aba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104abc:	697b      	ldr	r3, [r7, #20]
 8104abe:	681b      	ldr	r3, [r3, #0]
 8104ac0:	689b      	ldr	r3, [r3, #8]
 8104ac2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104ac6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104aca:	697a      	ldr	r2, [r7, #20]
 8104acc:	6812      	ldr	r2, [r2, #0]
 8104ace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8104ad0:	430b      	orrs	r3, r1
 8104ad2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104ad4:	697b      	ldr	r3, [r7, #20]
 8104ad6:	681b      	ldr	r3, [r3, #0]
 8104ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ada:	f023 010f 	bic.w	r1, r3, #15
 8104ade:	697b      	ldr	r3, [r7, #20]
 8104ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104ae2:	697b      	ldr	r3, [r7, #20]
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	430a      	orrs	r2, r1
 8104ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104aea:	697b      	ldr	r3, [r7, #20]
 8104aec:	681b      	ldr	r3, [r3, #0]
 8104aee:	4aa3      	ldr	r2, [pc, #652]	; (8104d7c <UART_SetConfig+0x32c>)
 8104af0:	4293      	cmp	r3, r2
 8104af2:	d177      	bne.n	8104be4 <UART_SetConfig+0x194>
 8104af4:	4ba2      	ldr	r3, [pc, #648]	; (8104d80 <UART_SetConfig+0x330>)
 8104af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104afc:	2b28      	cmp	r3, #40	; 0x28
 8104afe:	d86d      	bhi.n	8104bdc <UART_SetConfig+0x18c>
 8104b00:	a201      	add	r2, pc, #4	; (adr r2, 8104b08 <UART_SetConfig+0xb8>)
 8104b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b06:	bf00      	nop
 8104b08:	08104bad 	.word	0x08104bad
 8104b0c:	08104bdd 	.word	0x08104bdd
 8104b10:	08104bdd 	.word	0x08104bdd
 8104b14:	08104bdd 	.word	0x08104bdd
 8104b18:	08104bdd 	.word	0x08104bdd
 8104b1c:	08104bdd 	.word	0x08104bdd
 8104b20:	08104bdd 	.word	0x08104bdd
 8104b24:	08104bdd 	.word	0x08104bdd
 8104b28:	08104bb5 	.word	0x08104bb5
 8104b2c:	08104bdd 	.word	0x08104bdd
 8104b30:	08104bdd 	.word	0x08104bdd
 8104b34:	08104bdd 	.word	0x08104bdd
 8104b38:	08104bdd 	.word	0x08104bdd
 8104b3c:	08104bdd 	.word	0x08104bdd
 8104b40:	08104bdd 	.word	0x08104bdd
 8104b44:	08104bdd 	.word	0x08104bdd
 8104b48:	08104bbd 	.word	0x08104bbd
 8104b4c:	08104bdd 	.word	0x08104bdd
 8104b50:	08104bdd 	.word	0x08104bdd
 8104b54:	08104bdd 	.word	0x08104bdd
 8104b58:	08104bdd 	.word	0x08104bdd
 8104b5c:	08104bdd 	.word	0x08104bdd
 8104b60:	08104bdd 	.word	0x08104bdd
 8104b64:	08104bdd 	.word	0x08104bdd
 8104b68:	08104bc5 	.word	0x08104bc5
 8104b6c:	08104bdd 	.word	0x08104bdd
 8104b70:	08104bdd 	.word	0x08104bdd
 8104b74:	08104bdd 	.word	0x08104bdd
 8104b78:	08104bdd 	.word	0x08104bdd
 8104b7c:	08104bdd 	.word	0x08104bdd
 8104b80:	08104bdd 	.word	0x08104bdd
 8104b84:	08104bdd 	.word	0x08104bdd
 8104b88:	08104bcd 	.word	0x08104bcd
 8104b8c:	08104bdd 	.word	0x08104bdd
 8104b90:	08104bdd 	.word	0x08104bdd
 8104b94:	08104bdd 	.word	0x08104bdd
 8104b98:	08104bdd 	.word	0x08104bdd
 8104b9c:	08104bdd 	.word	0x08104bdd
 8104ba0:	08104bdd 	.word	0x08104bdd
 8104ba4:	08104bdd 	.word	0x08104bdd
 8104ba8:	08104bd5 	.word	0x08104bd5
 8104bac:	2301      	movs	r3, #1
 8104bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bb2:	e220      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104bb4:	2304      	movs	r3, #4
 8104bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bba:	e21c      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104bbc:	2308      	movs	r3, #8
 8104bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bc2:	e218      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104bc4:	2310      	movs	r3, #16
 8104bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bca:	e214      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104bcc:	2320      	movs	r3, #32
 8104bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bd2:	e210      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104bd4:	2340      	movs	r3, #64	; 0x40
 8104bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bda:	e20c      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104bdc:	2380      	movs	r3, #128	; 0x80
 8104bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104be2:	e208      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104be4:	697b      	ldr	r3, [r7, #20]
 8104be6:	681b      	ldr	r3, [r3, #0]
 8104be8:	4a66      	ldr	r2, [pc, #408]	; (8104d84 <UART_SetConfig+0x334>)
 8104bea:	4293      	cmp	r3, r2
 8104bec:	d130      	bne.n	8104c50 <UART_SetConfig+0x200>
 8104bee:	4b64      	ldr	r3, [pc, #400]	; (8104d80 <UART_SetConfig+0x330>)
 8104bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104bf2:	f003 0307 	and.w	r3, r3, #7
 8104bf6:	2b05      	cmp	r3, #5
 8104bf8:	d826      	bhi.n	8104c48 <UART_SetConfig+0x1f8>
 8104bfa:	a201      	add	r2, pc, #4	; (adr r2, 8104c00 <UART_SetConfig+0x1b0>)
 8104bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c00:	08104c19 	.word	0x08104c19
 8104c04:	08104c21 	.word	0x08104c21
 8104c08:	08104c29 	.word	0x08104c29
 8104c0c:	08104c31 	.word	0x08104c31
 8104c10:	08104c39 	.word	0x08104c39
 8104c14:	08104c41 	.word	0x08104c41
 8104c18:	2300      	movs	r3, #0
 8104c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c1e:	e1ea      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c20:	2304      	movs	r3, #4
 8104c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c26:	e1e6      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c28:	2308      	movs	r3, #8
 8104c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c2e:	e1e2      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c30:	2310      	movs	r3, #16
 8104c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c36:	e1de      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c38:	2320      	movs	r3, #32
 8104c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c3e:	e1da      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c40:	2340      	movs	r3, #64	; 0x40
 8104c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c46:	e1d6      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c48:	2380      	movs	r3, #128	; 0x80
 8104c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c4e:	e1d2      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c50:	697b      	ldr	r3, [r7, #20]
 8104c52:	681b      	ldr	r3, [r3, #0]
 8104c54:	4a4c      	ldr	r2, [pc, #304]	; (8104d88 <UART_SetConfig+0x338>)
 8104c56:	4293      	cmp	r3, r2
 8104c58:	d130      	bne.n	8104cbc <UART_SetConfig+0x26c>
 8104c5a:	4b49      	ldr	r3, [pc, #292]	; (8104d80 <UART_SetConfig+0x330>)
 8104c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c5e:	f003 0307 	and.w	r3, r3, #7
 8104c62:	2b05      	cmp	r3, #5
 8104c64:	d826      	bhi.n	8104cb4 <UART_SetConfig+0x264>
 8104c66:	a201      	add	r2, pc, #4	; (adr r2, 8104c6c <UART_SetConfig+0x21c>)
 8104c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c6c:	08104c85 	.word	0x08104c85
 8104c70:	08104c8d 	.word	0x08104c8d
 8104c74:	08104c95 	.word	0x08104c95
 8104c78:	08104c9d 	.word	0x08104c9d
 8104c7c:	08104ca5 	.word	0x08104ca5
 8104c80:	08104cad 	.word	0x08104cad
 8104c84:	2300      	movs	r3, #0
 8104c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c8a:	e1b4      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c8c:	2304      	movs	r3, #4
 8104c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c92:	e1b0      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c94:	2308      	movs	r3, #8
 8104c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c9a:	e1ac      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104c9c:	2310      	movs	r3, #16
 8104c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ca2:	e1a8      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104ca4:	2320      	movs	r3, #32
 8104ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104caa:	e1a4      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104cac:	2340      	movs	r3, #64	; 0x40
 8104cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cb2:	e1a0      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104cb4:	2380      	movs	r3, #128	; 0x80
 8104cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cba:	e19c      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104cbc:	697b      	ldr	r3, [r7, #20]
 8104cbe:	681b      	ldr	r3, [r3, #0]
 8104cc0:	4a32      	ldr	r2, [pc, #200]	; (8104d8c <UART_SetConfig+0x33c>)
 8104cc2:	4293      	cmp	r3, r2
 8104cc4:	d130      	bne.n	8104d28 <UART_SetConfig+0x2d8>
 8104cc6:	4b2e      	ldr	r3, [pc, #184]	; (8104d80 <UART_SetConfig+0x330>)
 8104cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104cca:	f003 0307 	and.w	r3, r3, #7
 8104cce:	2b05      	cmp	r3, #5
 8104cd0:	d826      	bhi.n	8104d20 <UART_SetConfig+0x2d0>
 8104cd2:	a201      	add	r2, pc, #4	; (adr r2, 8104cd8 <UART_SetConfig+0x288>)
 8104cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104cd8:	08104cf1 	.word	0x08104cf1
 8104cdc:	08104cf9 	.word	0x08104cf9
 8104ce0:	08104d01 	.word	0x08104d01
 8104ce4:	08104d09 	.word	0x08104d09
 8104ce8:	08104d11 	.word	0x08104d11
 8104cec:	08104d19 	.word	0x08104d19
 8104cf0:	2300      	movs	r3, #0
 8104cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cf6:	e17e      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104cf8:	2304      	movs	r3, #4
 8104cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cfe:	e17a      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d00:	2308      	movs	r3, #8
 8104d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d06:	e176      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d08:	2310      	movs	r3, #16
 8104d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d0e:	e172      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d10:	2320      	movs	r3, #32
 8104d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d16:	e16e      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d18:	2340      	movs	r3, #64	; 0x40
 8104d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d1e:	e16a      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d20:	2380      	movs	r3, #128	; 0x80
 8104d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d26:	e166      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d28:	697b      	ldr	r3, [r7, #20]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	4a18      	ldr	r2, [pc, #96]	; (8104d90 <UART_SetConfig+0x340>)
 8104d2e:	4293      	cmp	r3, r2
 8104d30:	d140      	bne.n	8104db4 <UART_SetConfig+0x364>
 8104d32:	4b13      	ldr	r3, [pc, #76]	; (8104d80 <UART_SetConfig+0x330>)
 8104d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d36:	f003 0307 	and.w	r3, r3, #7
 8104d3a:	2b05      	cmp	r3, #5
 8104d3c:	d836      	bhi.n	8104dac <UART_SetConfig+0x35c>
 8104d3e:	a201      	add	r2, pc, #4	; (adr r2, 8104d44 <UART_SetConfig+0x2f4>)
 8104d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d44:	08104d5d 	.word	0x08104d5d
 8104d48:	08104d65 	.word	0x08104d65
 8104d4c:	08104d6d 	.word	0x08104d6d
 8104d50:	08104d95 	.word	0x08104d95
 8104d54:	08104d9d 	.word	0x08104d9d
 8104d58:	08104da5 	.word	0x08104da5
 8104d5c:	2300      	movs	r3, #0
 8104d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d62:	e148      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d64:	2304      	movs	r3, #4
 8104d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d6a:	e144      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d6c:	2308      	movs	r3, #8
 8104d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d72:	e140      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d74:	cfff69f3 	.word	0xcfff69f3
 8104d78:	58000c00 	.word	0x58000c00
 8104d7c:	40011000 	.word	0x40011000
 8104d80:	58024400 	.word	0x58024400
 8104d84:	40004400 	.word	0x40004400
 8104d88:	40004800 	.word	0x40004800
 8104d8c:	40004c00 	.word	0x40004c00
 8104d90:	40005000 	.word	0x40005000
 8104d94:	2310      	movs	r3, #16
 8104d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d9a:	e12c      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104d9c:	2320      	movs	r3, #32
 8104d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104da2:	e128      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104da4:	2340      	movs	r3, #64	; 0x40
 8104da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104daa:	e124      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104dac:	2380      	movs	r3, #128	; 0x80
 8104dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104db2:	e120      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104db4:	697b      	ldr	r3, [r7, #20]
 8104db6:	681b      	ldr	r3, [r3, #0]
 8104db8:	4acb      	ldr	r2, [pc, #812]	; (81050e8 <UART_SetConfig+0x698>)
 8104dba:	4293      	cmp	r3, r2
 8104dbc:	d176      	bne.n	8104eac <UART_SetConfig+0x45c>
 8104dbe:	4bcb      	ldr	r3, [pc, #812]	; (81050ec <UART_SetConfig+0x69c>)
 8104dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104dc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104dc6:	2b28      	cmp	r3, #40	; 0x28
 8104dc8:	d86c      	bhi.n	8104ea4 <UART_SetConfig+0x454>
 8104dca:	a201      	add	r2, pc, #4	; (adr r2, 8104dd0 <UART_SetConfig+0x380>)
 8104dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dd0:	08104e75 	.word	0x08104e75
 8104dd4:	08104ea5 	.word	0x08104ea5
 8104dd8:	08104ea5 	.word	0x08104ea5
 8104ddc:	08104ea5 	.word	0x08104ea5
 8104de0:	08104ea5 	.word	0x08104ea5
 8104de4:	08104ea5 	.word	0x08104ea5
 8104de8:	08104ea5 	.word	0x08104ea5
 8104dec:	08104ea5 	.word	0x08104ea5
 8104df0:	08104e7d 	.word	0x08104e7d
 8104df4:	08104ea5 	.word	0x08104ea5
 8104df8:	08104ea5 	.word	0x08104ea5
 8104dfc:	08104ea5 	.word	0x08104ea5
 8104e00:	08104ea5 	.word	0x08104ea5
 8104e04:	08104ea5 	.word	0x08104ea5
 8104e08:	08104ea5 	.word	0x08104ea5
 8104e0c:	08104ea5 	.word	0x08104ea5
 8104e10:	08104e85 	.word	0x08104e85
 8104e14:	08104ea5 	.word	0x08104ea5
 8104e18:	08104ea5 	.word	0x08104ea5
 8104e1c:	08104ea5 	.word	0x08104ea5
 8104e20:	08104ea5 	.word	0x08104ea5
 8104e24:	08104ea5 	.word	0x08104ea5
 8104e28:	08104ea5 	.word	0x08104ea5
 8104e2c:	08104ea5 	.word	0x08104ea5
 8104e30:	08104e8d 	.word	0x08104e8d
 8104e34:	08104ea5 	.word	0x08104ea5
 8104e38:	08104ea5 	.word	0x08104ea5
 8104e3c:	08104ea5 	.word	0x08104ea5
 8104e40:	08104ea5 	.word	0x08104ea5
 8104e44:	08104ea5 	.word	0x08104ea5
 8104e48:	08104ea5 	.word	0x08104ea5
 8104e4c:	08104ea5 	.word	0x08104ea5
 8104e50:	08104e95 	.word	0x08104e95
 8104e54:	08104ea5 	.word	0x08104ea5
 8104e58:	08104ea5 	.word	0x08104ea5
 8104e5c:	08104ea5 	.word	0x08104ea5
 8104e60:	08104ea5 	.word	0x08104ea5
 8104e64:	08104ea5 	.word	0x08104ea5
 8104e68:	08104ea5 	.word	0x08104ea5
 8104e6c:	08104ea5 	.word	0x08104ea5
 8104e70:	08104e9d 	.word	0x08104e9d
 8104e74:	2301      	movs	r3, #1
 8104e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104e7a:	e0bc      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104e7c:	2304      	movs	r3, #4
 8104e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104e82:	e0b8      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104e84:	2308      	movs	r3, #8
 8104e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104e8a:	e0b4      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104e8c:	2310      	movs	r3, #16
 8104e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104e92:	e0b0      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104e94:	2320      	movs	r3, #32
 8104e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104e9a:	e0ac      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104e9c:	2340      	movs	r3, #64	; 0x40
 8104e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ea2:	e0a8      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104ea4:	2380      	movs	r3, #128	; 0x80
 8104ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104eaa:	e0a4      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104eac:	697b      	ldr	r3, [r7, #20]
 8104eae:	681b      	ldr	r3, [r3, #0]
 8104eb0:	4a8f      	ldr	r2, [pc, #572]	; (81050f0 <UART_SetConfig+0x6a0>)
 8104eb2:	4293      	cmp	r3, r2
 8104eb4:	d130      	bne.n	8104f18 <UART_SetConfig+0x4c8>
 8104eb6:	4b8d      	ldr	r3, [pc, #564]	; (81050ec <UART_SetConfig+0x69c>)
 8104eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104eba:	f003 0307 	and.w	r3, r3, #7
 8104ebe:	2b05      	cmp	r3, #5
 8104ec0:	d826      	bhi.n	8104f10 <UART_SetConfig+0x4c0>
 8104ec2:	a201      	add	r2, pc, #4	; (adr r2, 8104ec8 <UART_SetConfig+0x478>)
 8104ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ec8:	08104ee1 	.word	0x08104ee1
 8104ecc:	08104ee9 	.word	0x08104ee9
 8104ed0:	08104ef1 	.word	0x08104ef1
 8104ed4:	08104ef9 	.word	0x08104ef9
 8104ed8:	08104f01 	.word	0x08104f01
 8104edc:	08104f09 	.word	0x08104f09
 8104ee0:	2300      	movs	r3, #0
 8104ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ee6:	e086      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104ee8:	2304      	movs	r3, #4
 8104eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104eee:	e082      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104ef0:	2308      	movs	r3, #8
 8104ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ef6:	e07e      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104ef8:	2310      	movs	r3, #16
 8104efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104efe:	e07a      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f00:	2320      	movs	r3, #32
 8104f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f06:	e076      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f08:	2340      	movs	r3, #64	; 0x40
 8104f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f0e:	e072      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f10:	2380      	movs	r3, #128	; 0x80
 8104f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f16:	e06e      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f18:	697b      	ldr	r3, [r7, #20]
 8104f1a:	681b      	ldr	r3, [r3, #0]
 8104f1c:	4a75      	ldr	r2, [pc, #468]	; (81050f4 <UART_SetConfig+0x6a4>)
 8104f1e:	4293      	cmp	r3, r2
 8104f20:	d130      	bne.n	8104f84 <UART_SetConfig+0x534>
 8104f22:	4b72      	ldr	r3, [pc, #456]	; (81050ec <UART_SetConfig+0x69c>)
 8104f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f26:	f003 0307 	and.w	r3, r3, #7
 8104f2a:	2b05      	cmp	r3, #5
 8104f2c:	d826      	bhi.n	8104f7c <UART_SetConfig+0x52c>
 8104f2e:	a201      	add	r2, pc, #4	; (adr r2, 8104f34 <UART_SetConfig+0x4e4>)
 8104f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f34:	08104f4d 	.word	0x08104f4d
 8104f38:	08104f55 	.word	0x08104f55
 8104f3c:	08104f5d 	.word	0x08104f5d
 8104f40:	08104f65 	.word	0x08104f65
 8104f44:	08104f6d 	.word	0x08104f6d
 8104f48:	08104f75 	.word	0x08104f75
 8104f4c:	2300      	movs	r3, #0
 8104f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f52:	e050      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f54:	2304      	movs	r3, #4
 8104f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f5a:	e04c      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f5c:	2308      	movs	r3, #8
 8104f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f62:	e048      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f64:	2310      	movs	r3, #16
 8104f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f6a:	e044      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f6c:	2320      	movs	r3, #32
 8104f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f72:	e040      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f74:	2340      	movs	r3, #64	; 0x40
 8104f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f7a:	e03c      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f7c:	2380      	movs	r3, #128	; 0x80
 8104f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104f82:	e038      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104f84:	697b      	ldr	r3, [r7, #20]
 8104f86:	681b      	ldr	r3, [r3, #0]
 8104f88:	4a5b      	ldr	r2, [pc, #364]	; (81050f8 <UART_SetConfig+0x6a8>)
 8104f8a:	4293      	cmp	r3, r2
 8104f8c:	d130      	bne.n	8104ff0 <UART_SetConfig+0x5a0>
 8104f8e:	4b57      	ldr	r3, [pc, #348]	; (81050ec <UART_SetConfig+0x69c>)
 8104f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f92:	f003 0307 	and.w	r3, r3, #7
 8104f96:	2b05      	cmp	r3, #5
 8104f98:	d826      	bhi.n	8104fe8 <UART_SetConfig+0x598>
 8104f9a:	a201      	add	r2, pc, #4	; (adr r2, 8104fa0 <UART_SetConfig+0x550>)
 8104f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104fa0:	08104fb9 	.word	0x08104fb9
 8104fa4:	08104fc1 	.word	0x08104fc1
 8104fa8:	08104fc9 	.word	0x08104fc9
 8104fac:	08104fd1 	.word	0x08104fd1
 8104fb0:	08104fd9 	.word	0x08104fd9
 8104fb4:	08104fe1 	.word	0x08104fe1
 8104fb8:	2302      	movs	r3, #2
 8104fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104fbe:	e01a      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104fc0:	2304      	movs	r3, #4
 8104fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104fc6:	e016      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104fc8:	2308      	movs	r3, #8
 8104fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104fce:	e012      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104fd0:	2310      	movs	r3, #16
 8104fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104fd6:	e00e      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104fd8:	2320      	movs	r3, #32
 8104fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104fde:	e00a      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104fe0:	2340      	movs	r3, #64	; 0x40
 8104fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104fe6:	e006      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104fe8:	2380      	movs	r3, #128	; 0x80
 8104fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104fee:	e002      	b.n	8104ff6 <UART_SetConfig+0x5a6>
 8104ff0:	2380      	movs	r3, #128	; 0x80
 8104ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8104ff6:	697b      	ldr	r3, [r7, #20]
 8104ff8:	681b      	ldr	r3, [r3, #0]
 8104ffa:	4a3f      	ldr	r2, [pc, #252]	; (81050f8 <UART_SetConfig+0x6a8>)
 8104ffc:	4293      	cmp	r3, r2
 8104ffe:	f040 80f8 	bne.w	81051f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105002:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105006:	2b20      	cmp	r3, #32
 8105008:	dc46      	bgt.n	8105098 <UART_SetConfig+0x648>
 810500a:	2b02      	cmp	r3, #2
 810500c:	f2c0 8082 	blt.w	8105114 <UART_SetConfig+0x6c4>
 8105010:	3b02      	subs	r3, #2
 8105012:	2b1e      	cmp	r3, #30
 8105014:	d87e      	bhi.n	8105114 <UART_SetConfig+0x6c4>
 8105016:	a201      	add	r2, pc, #4	; (adr r2, 810501c <UART_SetConfig+0x5cc>)
 8105018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810501c:	0810509f 	.word	0x0810509f
 8105020:	08105115 	.word	0x08105115
 8105024:	081050a7 	.word	0x081050a7
 8105028:	08105115 	.word	0x08105115
 810502c:	08105115 	.word	0x08105115
 8105030:	08105115 	.word	0x08105115
 8105034:	081050b7 	.word	0x081050b7
 8105038:	08105115 	.word	0x08105115
 810503c:	08105115 	.word	0x08105115
 8105040:	08105115 	.word	0x08105115
 8105044:	08105115 	.word	0x08105115
 8105048:	08105115 	.word	0x08105115
 810504c:	08105115 	.word	0x08105115
 8105050:	08105115 	.word	0x08105115
 8105054:	081050c7 	.word	0x081050c7
 8105058:	08105115 	.word	0x08105115
 810505c:	08105115 	.word	0x08105115
 8105060:	08105115 	.word	0x08105115
 8105064:	08105115 	.word	0x08105115
 8105068:	08105115 	.word	0x08105115
 810506c:	08105115 	.word	0x08105115
 8105070:	08105115 	.word	0x08105115
 8105074:	08105115 	.word	0x08105115
 8105078:	08105115 	.word	0x08105115
 810507c:	08105115 	.word	0x08105115
 8105080:	08105115 	.word	0x08105115
 8105084:	08105115 	.word	0x08105115
 8105088:	08105115 	.word	0x08105115
 810508c:	08105115 	.word	0x08105115
 8105090:	08105115 	.word	0x08105115
 8105094:	08105107 	.word	0x08105107
 8105098:	2b40      	cmp	r3, #64	; 0x40
 810509a:	d037      	beq.n	810510c <UART_SetConfig+0x6bc>
 810509c:	e03a      	b.n	8105114 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810509e:	f7fe f88f 	bl	81031c0 <HAL_RCCEx_GetD3PCLK1Freq>
 81050a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81050a4:	e03c      	b.n	8105120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81050a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81050aa:	4618      	mov	r0, r3
 81050ac:	f7fe f89e 	bl	81031ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050b4:	e034      	b.n	8105120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81050b6:	f107 0318 	add.w	r3, r7, #24
 81050ba:	4618      	mov	r0, r3
 81050bc:	f7fe f9ea 	bl	8103494 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81050c0:	69fb      	ldr	r3, [r7, #28]
 81050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050c4:	e02c      	b.n	8105120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81050c6:	4b09      	ldr	r3, [pc, #36]	; (81050ec <UART_SetConfig+0x69c>)
 81050c8:	681b      	ldr	r3, [r3, #0]
 81050ca:	f003 0320 	and.w	r3, r3, #32
 81050ce:	2b00      	cmp	r3, #0
 81050d0:	d016      	beq.n	8105100 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81050d2:	4b06      	ldr	r3, [pc, #24]	; (81050ec <UART_SetConfig+0x69c>)
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	08db      	lsrs	r3, r3, #3
 81050d8:	f003 0303 	and.w	r3, r3, #3
 81050dc:	4a07      	ldr	r2, [pc, #28]	; (81050fc <UART_SetConfig+0x6ac>)
 81050de:	fa22 f303 	lsr.w	r3, r2, r3
 81050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81050e4:	e01c      	b.n	8105120 <UART_SetConfig+0x6d0>
 81050e6:	bf00      	nop
 81050e8:	40011400 	.word	0x40011400
 81050ec:	58024400 	.word	0x58024400
 81050f0:	40007800 	.word	0x40007800
 81050f4:	40007c00 	.word	0x40007c00
 81050f8:	58000c00 	.word	0x58000c00
 81050fc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8105100:	4b9d      	ldr	r3, [pc, #628]	; (8105378 <UART_SetConfig+0x928>)
 8105102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105104:	e00c      	b.n	8105120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105106:	4b9d      	ldr	r3, [pc, #628]	; (810537c <UART_SetConfig+0x92c>)
 8105108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810510a:	e009      	b.n	8105120 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810510c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105112:	e005      	b.n	8105120 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8105114:	2300      	movs	r3, #0
 8105116:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105118:	2301      	movs	r3, #1
 810511a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810511e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105122:	2b00      	cmp	r3, #0
 8105124:	f000 81de 	beq.w	81054e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105128:	697b      	ldr	r3, [r7, #20]
 810512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810512c:	4a94      	ldr	r2, [pc, #592]	; (8105380 <UART_SetConfig+0x930>)
 810512e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105132:	461a      	mov	r2, r3
 8105134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105136:	fbb3 f3f2 	udiv	r3, r3, r2
 810513a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810513c:	697b      	ldr	r3, [r7, #20]
 810513e:	685a      	ldr	r2, [r3, #4]
 8105140:	4613      	mov	r3, r2
 8105142:	005b      	lsls	r3, r3, #1
 8105144:	4413      	add	r3, r2
 8105146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105148:	429a      	cmp	r2, r3
 810514a:	d305      	bcc.n	8105158 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810514c:	697b      	ldr	r3, [r7, #20]
 810514e:	685b      	ldr	r3, [r3, #4]
 8105150:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105154:	429a      	cmp	r2, r3
 8105156:	d903      	bls.n	8105160 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8105158:	2301      	movs	r3, #1
 810515a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810515e:	e1c1      	b.n	81054e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105162:	2200      	movs	r2, #0
 8105164:	60bb      	str	r3, [r7, #8]
 8105166:	60fa      	str	r2, [r7, #12]
 8105168:	697b      	ldr	r3, [r7, #20]
 810516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810516c:	4a84      	ldr	r2, [pc, #528]	; (8105380 <UART_SetConfig+0x930>)
 810516e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105172:	b29b      	uxth	r3, r3
 8105174:	2200      	movs	r2, #0
 8105176:	603b      	str	r3, [r7, #0]
 8105178:	607a      	str	r2, [r7, #4]
 810517a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810517e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8105182:	f7fb f8fd 	bl	8100380 <__aeabi_uldivmod>
 8105186:	4602      	mov	r2, r0
 8105188:	460b      	mov	r3, r1
 810518a:	4610      	mov	r0, r2
 810518c:	4619      	mov	r1, r3
 810518e:	f04f 0200 	mov.w	r2, #0
 8105192:	f04f 0300 	mov.w	r3, #0
 8105196:	020b      	lsls	r3, r1, #8
 8105198:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810519c:	0202      	lsls	r2, r0, #8
 810519e:	6979      	ldr	r1, [r7, #20]
 81051a0:	6849      	ldr	r1, [r1, #4]
 81051a2:	0849      	lsrs	r1, r1, #1
 81051a4:	2000      	movs	r0, #0
 81051a6:	460c      	mov	r4, r1
 81051a8:	4605      	mov	r5, r0
 81051aa:	eb12 0804 	adds.w	r8, r2, r4
 81051ae:	eb43 0905 	adc.w	r9, r3, r5
 81051b2:	697b      	ldr	r3, [r7, #20]
 81051b4:	685b      	ldr	r3, [r3, #4]
 81051b6:	2200      	movs	r2, #0
 81051b8:	469a      	mov	sl, r3
 81051ba:	4693      	mov	fp, r2
 81051bc:	4652      	mov	r2, sl
 81051be:	465b      	mov	r3, fp
 81051c0:	4640      	mov	r0, r8
 81051c2:	4649      	mov	r1, r9
 81051c4:	f7fb f8dc 	bl	8100380 <__aeabi_uldivmod>
 81051c8:	4602      	mov	r2, r0
 81051ca:	460b      	mov	r3, r1
 81051cc:	4613      	mov	r3, r2
 81051ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81051d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81051d6:	d308      	bcc.n	81051ea <UART_SetConfig+0x79a>
 81051d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81051de:	d204      	bcs.n	81051ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81051e0:	697b      	ldr	r3, [r7, #20]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81051e6:	60da      	str	r2, [r3, #12]
 81051e8:	e17c      	b.n	81054e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81051ea:	2301      	movs	r3, #1
 81051ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81051f0:	e178      	b.n	81054e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81051f2:	697b      	ldr	r3, [r7, #20]
 81051f4:	69db      	ldr	r3, [r3, #28]
 81051f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81051fa:	f040 80c5 	bne.w	8105388 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81051fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105202:	2b20      	cmp	r3, #32
 8105204:	dc48      	bgt.n	8105298 <UART_SetConfig+0x848>
 8105206:	2b00      	cmp	r3, #0
 8105208:	db7b      	blt.n	8105302 <UART_SetConfig+0x8b2>
 810520a:	2b20      	cmp	r3, #32
 810520c:	d879      	bhi.n	8105302 <UART_SetConfig+0x8b2>
 810520e:	a201      	add	r2, pc, #4	; (adr r2, 8105214 <UART_SetConfig+0x7c4>)
 8105210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105214:	0810529f 	.word	0x0810529f
 8105218:	081052a7 	.word	0x081052a7
 810521c:	08105303 	.word	0x08105303
 8105220:	08105303 	.word	0x08105303
 8105224:	081052af 	.word	0x081052af
 8105228:	08105303 	.word	0x08105303
 810522c:	08105303 	.word	0x08105303
 8105230:	08105303 	.word	0x08105303
 8105234:	081052bf 	.word	0x081052bf
 8105238:	08105303 	.word	0x08105303
 810523c:	08105303 	.word	0x08105303
 8105240:	08105303 	.word	0x08105303
 8105244:	08105303 	.word	0x08105303
 8105248:	08105303 	.word	0x08105303
 810524c:	08105303 	.word	0x08105303
 8105250:	08105303 	.word	0x08105303
 8105254:	081052cf 	.word	0x081052cf
 8105258:	08105303 	.word	0x08105303
 810525c:	08105303 	.word	0x08105303
 8105260:	08105303 	.word	0x08105303
 8105264:	08105303 	.word	0x08105303
 8105268:	08105303 	.word	0x08105303
 810526c:	08105303 	.word	0x08105303
 8105270:	08105303 	.word	0x08105303
 8105274:	08105303 	.word	0x08105303
 8105278:	08105303 	.word	0x08105303
 810527c:	08105303 	.word	0x08105303
 8105280:	08105303 	.word	0x08105303
 8105284:	08105303 	.word	0x08105303
 8105288:	08105303 	.word	0x08105303
 810528c:	08105303 	.word	0x08105303
 8105290:	08105303 	.word	0x08105303
 8105294:	081052f5 	.word	0x081052f5
 8105298:	2b40      	cmp	r3, #64	; 0x40
 810529a:	d02e      	beq.n	81052fa <UART_SetConfig+0x8aa>
 810529c:	e031      	b.n	8105302 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810529e:	f7fd f81d 	bl	81022dc <HAL_RCC_GetPCLK1Freq>
 81052a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81052a4:	e033      	b.n	810530e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81052a6:	f7fd f82f 	bl	8102308 <HAL_RCC_GetPCLK2Freq>
 81052aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81052ac:	e02f      	b.n	810530e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81052ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81052b2:	4618      	mov	r0, r3
 81052b4:	f7fd ff9a 	bl	81031ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052bc:	e027      	b.n	810530e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81052be:	f107 0318 	add.w	r3, r7, #24
 81052c2:	4618      	mov	r0, r3
 81052c4:	f7fe f8e6 	bl	8103494 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81052c8:	69fb      	ldr	r3, [r7, #28]
 81052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052cc:	e01f      	b.n	810530e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81052ce:	4b2d      	ldr	r3, [pc, #180]	; (8105384 <UART_SetConfig+0x934>)
 81052d0:	681b      	ldr	r3, [r3, #0]
 81052d2:	f003 0320 	and.w	r3, r3, #32
 81052d6:	2b00      	cmp	r3, #0
 81052d8:	d009      	beq.n	81052ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81052da:	4b2a      	ldr	r3, [pc, #168]	; (8105384 <UART_SetConfig+0x934>)
 81052dc:	681b      	ldr	r3, [r3, #0]
 81052de:	08db      	lsrs	r3, r3, #3
 81052e0:	f003 0303 	and.w	r3, r3, #3
 81052e4:	4a24      	ldr	r2, [pc, #144]	; (8105378 <UART_SetConfig+0x928>)
 81052e6:	fa22 f303 	lsr.w	r3, r2, r3
 81052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81052ec:	e00f      	b.n	810530e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81052ee:	4b22      	ldr	r3, [pc, #136]	; (8105378 <UART_SetConfig+0x928>)
 81052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052f2:	e00c      	b.n	810530e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81052f4:	4b21      	ldr	r3, [pc, #132]	; (810537c <UART_SetConfig+0x92c>)
 81052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052f8:	e009      	b.n	810530e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81052fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105300:	e005      	b.n	810530e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8105302:	2300      	movs	r3, #0
 8105304:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105306:	2301      	movs	r3, #1
 8105308:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810530c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810530e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105310:	2b00      	cmp	r3, #0
 8105312:	f000 80e7 	beq.w	81054e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105316:	697b      	ldr	r3, [r7, #20]
 8105318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810531a:	4a19      	ldr	r2, [pc, #100]	; (8105380 <UART_SetConfig+0x930>)
 810531c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105320:	461a      	mov	r2, r3
 8105322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105324:	fbb3 f3f2 	udiv	r3, r3, r2
 8105328:	005a      	lsls	r2, r3, #1
 810532a:	697b      	ldr	r3, [r7, #20]
 810532c:	685b      	ldr	r3, [r3, #4]
 810532e:	085b      	lsrs	r3, r3, #1
 8105330:	441a      	add	r2, r3
 8105332:	697b      	ldr	r3, [r7, #20]
 8105334:	685b      	ldr	r3, [r3, #4]
 8105336:	fbb2 f3f3 	udiv	r3, r2, r3
 810533a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810533e:	2b0f      	cmp	r3, #15
 8105340:	d916      	bls.n	8105370 <UART_SetConfig+0x920>
 8105342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105348:	d212      	bcs.n	8105370 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810534c:	b29b      	uxth	r3, r3
 810534e:	f023 030f 	bic.w	r3, r3, #15
 8105352:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8105354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105356:	085b      	lsrs	r3, r3, #1
 8105358:	b29b      	uxth	r3, r3
 810535a:	f003 0307 	and.w	r3, r3, #7
 810535e:	b29a      	uxth	r2, r3
 8105360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8105362:	4313      	orrs	r3, r2
 8105364:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8105366:	697b      	ldr	r3, [r7, #20]
 8105368:	681b      	ldr	r3, [r3, #0]
 810536a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810536c:	60da      	str	r2, [r3, #12]
 810536e:	e0b9      	b.n	81054e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105370:	2301      	movs	r3, #1
 8105372:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105376:	e0b5      	b.n	81054e4 <UART_SetConfig+0xa94>
 8105378:	03d09000 	.word	0x03d09000
 810537c:	003d0900 	.word	0x003d0900
 8105380:	0810646c 	.word	0x0810646c
 8105384:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8105388:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810538c:	2b20      	cmp	r3, #32
 810538e:	dc49      	bgt.n	8105424 <UART_SetConfig+0x9d4>
 8105390:	2b00      	cmp	r3, #0
 8105392:	db7c      	blt.n	810548e <UART_SetConfig+0xa3e>
 8105394:	2b20      	cmp	r3, #32
 8105396:	d87a      	bhi.n	810548e <UART_SetConfig+0xa3e>
 8105398:	a201      	add	r2, pc, #4	; (adr r2, 81053a0 <UART_SetConfig+0x950>)
 810539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810539e:	bf00      	nop
 81053a0:	0810542b 	.word	0x0810542b
 81053a4:	08105433 	.word	0x08105433
 81053a8:	0810548f 	.word	0x0810548f
 81053ac:	0810548f 	.word	0x0810548f
 81053b0:	0810543b 	.word	0x0810543b
 81053b4:	0810548f 	.word	0x0810548f
 81053b8:	0810548f 	.word	0x0810548f
 81053bc:	0810548f 	.word	0x0810548f
 81053c0:	0810544b 	.word	0x0810544b
 81053c4:	0810548f 	.word	0x0810548f
 81053c8:	0810548f 	.word	0x0810548f
 81053cc:	0810548f 	.word	0x0810548f
 81053d0:	0810548f 	.word	0x0810548f
 81053d4:	0810548f 	.word	0x0810548f
 81053d8:	0810548f 	.word	0x0810548f
 81053dc:	0810548f 	.word	0x0810548f
 81053e0:	0810545b 	.word	0x0810545b
 81053e4:	0810548f 	.word	0x0810548f
 81053e8:	0810548f 	.word	0x0810548f
 81053ec:	0810548f 	.word	0x0810548f
 81053f0:	0810548f 	.word	0x0810548f
 81053f4:	0810548f 	.word	0x0810548f
 81053f8:	0810548f 	.word	0x0810548f
 81053fc:	0810548f 	.word	0x0810548f
 8105400:	0810548f 	.word	0x0810548f
 8105404:	0810548f 	.word	0x0810548f
 8105408:	0810548f 	.word	0x0810548f
 810540c:	0810548f 	.word	0x0810548f
 8105410:	0810548f 	.word	0x0810548f
 8105414:	0810548f 	.word	0x0810548f
 8105418:	0810548f 	.word	0x0810548f
 810541c:	0810548f 	.word	0x0810548f
 8105420:	08105481 	.word	0x08105481
 8105424:	2b40      	cmp	r3, #64	; 0x40
 8105426:	d02e      	beq.n	8105486 <UART_SetConfig+0xa36>
 8105428:	e031      	b.n	810548e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810542a:	f7fc ff57 	bl	81022dc <HAL_RCC_GetPCLK1Freq>
 810542e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105430:	e033      	b.n	810549a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105432:	f7fc ff69 	bl	8102308 <HAL_RCC_GetPCLK2Freq>
 8105436:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105438:	e02f      	b.n	810549a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810543a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810543e:	4618      	mov	r0, r3
 8105440:	f7fd fed4 	bl	81031ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105448:	e027      	b.n	810549a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810544a:	f107 0318 	add.w	r3, r7, #24
 810544e:	4618      	mov	r0, r3
 8105450:	f7fe f820 	bl	8103494 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105454:	69fb      	ldr	r3, [r7, #28]
 8105456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105458:	e01f      	b.n	810549a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810545a:	4b2d      	ldr	r3, [pc, #180]	; (8105510 <UART_SetConfig+0xac0>)
 810545c:	681b      	ldr	r3, [r3, #0]
 810545e:	f003 0320 	and.w	r3, r3, #32
 8105462:	2b00      	cmp	r3, #0
 8105464:	d009      	beq.n	810547a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105466:	4b2a      	ldr	r3, [pc, #168]	; (8105510 <UART_SetConfig+0xac0>)
 8105468:	681b      	ldr	r3, [r3, #0]
 810546a:	08db      	lsrs	r3, r3, #3
 810546c:	f003 0303 	and.w	r3, r3, #3
 8105470:	4a28      	ldr	r2, [pc, #160]	; (8105514 <UART_SetConfig+0xac4>)
 8105472:	fa22 f303 	lsr.w	r3, r2, r3
 8105476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105478:	e00f      	b.n	810549a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810547a:	4b26      	ldr	r3, [pc, #152]	; (8105514 <UART_SetConfig+0xac4>)
 810547c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810547e:	e00c      	b.n	810549a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105480:	4b25      	ldr	r3, [pc, #148]	; (8105518 <UART_SetConfig+0xac8>)
 8105482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105484:	e009      	b.n	810549a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810548a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810548c:	e005      	b.n	810549a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810548e:	2300      	movs	r3, #0
 8105490:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105492:	2301      	movs	r3, #1
 8105494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105498:	bf00      	nop
    }

    if (pclk != 0U)
 810549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810549c:	2b00      	cmp	r3, #0
 810549e:	d021      	beq.n	81054e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81054a0:	697b      	ldr	r3, [r7, #20]
 81054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81054a4:	4a1d      	ldr	r2, [pc, #116]	; (810551c <UART_SetConfig+0xacc>)
 81054a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81054aa:	461a      	mov	r2, r3
 81054ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81054ae:	fbb3 f2f2 	udiv	r2, r3, r2
 81054b2:	697b      	ldr	r3, [r7, #20]
 81054b4:	685b      	ldr	r3, [r3, #4]
 81054b6:	085b      	lsrs	r3, r3, #1
 81054b8:	441a      	add	r2, r3
 81054ba:	697b      	ldr	r3, [r7, #20]
 81054bc:	685b      	ldr	r3, [r3, #4]
 81054be:	fbb2 f3f3 	udiv	r3, r2, r3
 81054c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054c6:	2b0f      	cmp	r3, #15
 81054c8:	d909      	bls.n	81054de <UART_SetConfig+0xa8e>
 81054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81054d0:	d205      	bcs.n	81054de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054d4:	b29a      	uxth	r2, r3
 81054d6:	697b      	ldr	r3, [r7, #20]
 81054d8:	681b      	ldr	r3, [r3, #0]
 81054da:	60da      	str	r2, [r3, #12]
 81054dc:	e002      	b.n	81054e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81054de:	2301      	movs	r3, #1
 81054e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81054e4:	697b      	ldr	r3, [r7, #20]
 81054e6:	2201      	movs	r2, #1
 81054e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81054ec:	697b      	ldr	r3, [r7, #20]
 81054ee:	2201      	movs	r2, #1
 81054f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81054f4:	697b      	ldr	r3, [r7, #20]
 81054f6:	2200      	movs	r2, #0
 81054f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81054fa:	697b      	ldr	r3, [r7, #20]
 81054fc:	2200      	movs	r2, #0
 81054fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8105500:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8105504:	4618      	mov	r0, r3
 8105506:	3748      	adds	r7, #72	; 0x48
 8105508:	46bd      	mov	sp, r7
 810550a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810550e:	bf00      	nop
 8105510:	58024400 	.word	0x58024400
 8105514:	03d09000 	.word	0x03d09000
 8105518:	003d0900 	.word	0x003d0900
 810551c:	0810646c 	.word	0x0810646c

08105520 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105520:	b480      	push	{r7}
 8105522:	b083      	sub	sp, #12
 8105524:	af00      	add	r7, sp, #0
 8105526:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810552c:	f003 0301 	and.w	r3, r3, #1
 8105530:	2b00      	cmp	r3, #0
 8105532:	d00a      	beq.n	810554a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	685b      	ldr	r3, [r3, #4]
 810553a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105542:	687b      	ldr	r3, [r7, #4]
 8105544:	681b      	ldr	r3, [r3, #0]
 8105546:	430a      	orrs	r2, r1
 8105548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810554a:	687b      	ldr	r3, [r7, #4]
 810554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810554e:	f003 0302 	and.w	r3, r3, #2
 8105552:	2b00      	cmp	r3, #0
 8105554:	d00a      	beq.n	810556c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105556:	687b      	ldr	r3, [r7, #4]
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	685b      	ldr	r3, [r3, #4]
 810555c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105560:	687b      	ldr	r3, [r7, #4]
 8105562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	430a      	orrs	r2, r1
 810556a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105570:	f003 0304 	and.w	r3, r3, #4
 8105574:	2b00      	cmp	r3, #0
 8105576:	d00a      	beq.n	810558e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	681b      	ldr	r3, [r3, #0]
 810557c:	685b      	ldr	r3, [r3, #4]
 810557e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8105582:	687b      	ldr	r3, [r7, #4]
 8105584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	430a      	orrs	r2, r1
 810558c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105592:	f003 0308 	and.w	r3, r3, #8
 8105596:	2b00      	cmp	r3, #0
 8105598:	d00a      	beq.n	81055b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810559a:	687b      	ldr	r3, [r7, #4]
 810559c:	681b      	ldr	r3, [r3, #0]
 810559e:	685b      	ldr	r3, [r3, #4]
 81055a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81055a4:	687b      	ldr	r3, [r7, #4]
 81055a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81055a8:	687b      	ldr	r3, [r7, #4]
 81055aa:	681b      	ldr	r3, [r3, #0]
 81055ac:	430a      	orrs	r2, r1
 81055ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81055b0:	687b      	ldr	r3, [r7, #4]
 81055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055b4:	f003 0310 	and.w	r3, r3, #16
 81055b8:	2b00      	cmp	r3, #0
 81055ba:	d00a      	beq.n	81055d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81055bc:	687b      	ldr	r3, [r7, #4]
 81055be:	681b      	ldr	r3, [r3, #0]
 81055c0:	689b      	ldr	r3, [r3, #8]
 81055c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81055c6:	687b      	ldr	r3, [r7, #4]
 81055c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	430a      	orrs	r2, r1
 81055d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055d6:	f003 0320 	and.w	r3, r3, #32
 81055da:	2b00      	cmp	r3, #0
 81055dc:	d00a      	beq.n	81055f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81055de:	687b      	ldr	r3, [r7, #4]
 81055e0:	681b      	ldr	r3, [r3, #0]
 81055e2:	689b      	ldr	r3, [r3, #8]
 81055e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81055e8:	687b      	ldr	r3, [r7, #4]
 81055ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81055ec:	687b      	ldr	r3, [r7, #4]
 81055ee:	681b      	ldr	r3, [r3, #0]
 81055f0:	430a      	orrs	r2, r1
 81055f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81055f4:	687b      	ldr	r3, [r7, #4]
 81055f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81055fc:	2b00      	cmp	r3, #0
 81055fe:	d01a      	beq.n	8105636 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	681b      	ldr	r3, [r3, #0]
 8105604:	685b      	ldr	r3, [r3, #4]
 8105606:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810560e:	687b      	ldr	r3, [r7, #4]
 8105610:	681b      	ldr	r3, [r3, #0]
 8105612:	430a      	orrs	r2, r1
 8105614:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105616:	687b      	ldr	r3, [r7, #4]
 8105618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810561a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810561e:	d10a      	bne.n	8105636 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	681b      	ldr	r3, [r3, #0]
 8105624:	685b      	ldr	r3, [r3, #4]
 8105626:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810562a:	687b      	ldr	r3, [r7, #4]
 810562c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810562e:	687b      	ldr	r3, [r7, #4]
 8105630:	681b      	ldr	r3, [r3, #0]
 8105632:	430a      	orrs	r2, r1
 8105634:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105636:	687b      	ldr	r3, [r7, #4]
 8105638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810563e:	2b00      	cmp	r3, #0
 8105640:	d00a      	beq.n	8105658 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105642:	687b      	ldr	r3, [r7, #4]
 8105644:	681b      	ldr	r3, [r3, #0]
 8105646:	685b      	ldr	r3, [r3, #4]
 8105648:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105650:	687b      	ldr	r3, [r7, #4]
 8105652:	681b      	ldr	r3, [r3, #0]
 8105654:	430a      	orrs	r2, r1
 8105656:	605a      	str	r2, [r3, #4]
  }
}
 8105658:	bf00      	nop
 810565a:	370c      	adds	r7, #12
 810565c:	46bd      	mov	sp, r7
 810565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105662:	4770      	bx	lr

08105664 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105664:	b580      	push	{r7, lr}
 8105666:	b086      	sub	sp, #24
 8105668:	af02      	add	r7, sp, #8
 810566a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810566c:	687b      	ldr	r3, [r7, #4]
 810566e:	2200      	movs	r2, #0
 8105670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8105674:	f7fb fc8a 	bl	8100f8c <HAL_GetTick>
 8105678:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	681b      	ldr	r3, [r3, #0]
 810567e:	681b      	ldr	r3, [r3, #0]
 8105680:	f003 0308 	and.w	r3, r3, #8
 8105684:	2b08      	cmp	r3, #8
 8105686:	d10e      	bne.n	81056a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105688:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810568c:	9300      	str	r3, [sp, #0]
 810568e:	68fb      	ldr	r3, [r7, #12]
 8105690:	2200      	movs	r2, #0
 8105692:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105696:	6878      	ldr	r0, [r7, #4]
 8105698:	f000 f82f 	bl	81056fa <UART_WaitOnFlagUntilTimeout>
 810569c:	4603      	mov	r3, r0
 810569e:	2b00      	cmp	r3, #0
 81056a0:	d001      	beq.n	81056a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81056a2:	2303      	movs	r3, #3
 81056a4:	e025      	b.n	81056f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81056a6:	687b      	ldr	r3, [r7, #4]
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	f003 0304 	and.w	r3, r3, #4
 81056b0:	2b04      	cmp	r3, #4
 81056b2:	d10e      	bne.n	81056d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81056b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81056b8:	9300      	str	r3, [sp, #0]
 81056ba:	68fb      	ldr	r3, [r7, #12]
 81056bc:	2200      	movs	r2, #0
 81056be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81056c2:	6878      	ldr	r0, [r7, #4]
 81056c4:	f000 f819 	bl	81056fa <UART_WaitOnFlagUntilTimeout>
 81056c8:	4603      	mov	r3, r0
 81056ca:	2b00      	cmp	r3, #0
 81056cc:	d001      	beq.n	81056d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81056ce:	2303      	movs	r3, #3
 81056d0:	e00f      	b.n	81056f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81056d2:	687b      	ldr	r3, [r7, #4]
 81056d4:	2220      	movs	r2, #32
 81056d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81056da:	687b      	ldr	r3, [r7, #4]
 81056dc:	2220      	movs	r2, #32
 81056de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81056e2:	687b      	ldr	r3, [r7, #4]
 81056e4:	2200      	movs	r2, #0
 81056e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	2200      	movs	r2, #0
 81056ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81056f0:	2300      	movs	r3, #0
}
 81056f2:	4618      	mov	r0, r3
 81056f4:	3710      	adds	r7, #16
 81056f6:	46bd      	mov	sp, r7
 81056f8:	bd80      	pop	{r7, pc}

081056fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81056fa:	b580      	push	{r7, lr}
 81056fc:	b09c      	sub	sp, #112	; 0x70
 81056fe:	af00      	add	r7, sp, #0
 8105700:	60f8      	str	r0, [r7, #12]
 8105702:	60b9      	str	r1, [r7, #8]
 8105704:	603b      	str	r3, [r7, #0]
 8105706:	4613      	mov	r3, r2
 8105708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810570a:	e0a9      	b.n	8105860 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810570c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105712:	f000 80a5 	beq.w	8105860 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105716:	f7fb fc39 	bl	8100f8c <HAL_GetTick>
 810571a:	4602      	mov	r2, r0
 810571c:	683b      	ldr	r3, [r7, #0]
 810571e:	1ad3      	subs	r3, r2, r3
 8105720:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8105722:	429a      	cmp	r2, r3
 8105724:	d302      	bcc.n	810572c <UART_WaitOnFlagUntilTimeout+0x32>
 8105726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105728:	2b00      	cmp	r3, #0
 810572a:	d140      	bne.n	81057ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810572c:	68fb      	ldr	r3, [r7, #12]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105734:	e853 3f00 	ldrex	r3, [r3]
 8105738:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810573a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810573c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105740:	667b      	str	r3, [r7, #100]	; 0x64
 8105742:	68fb      	ldr	r3, [r7, #12]
 8105744:	681b      	ldr	r3, [r3, #0]
 8105746:	461a      	mov	r2, r3
 8105748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810574a:	65fb      	str	r3, [r7, #92]	; 0x5c
 810574c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810574e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105750:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8105752:	e841 2300 	strex	r3, r2, [r1]
 8105756:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8105758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810575a:	2b00      	cmp	r3, #0
 810575c:	d1e6      	bne.n	810572c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810575e:	68fb      	ldr	r3, [r7, #12]
 8105760:	681b      	ldr	r3, [r3, #0]
 8105762:	3308      	adds	r3, #8
 8105764:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105768:	e853 3f00 	ldrex	r3, [r3]
 810576c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105770:	f023 0301 	bic.w	r3, r3, #1
 8105774:	663b      	str	r3, [r7, #96]	; 0x60
 8105776:	68fb      	ldr	r3, [r7, #12]
 8105778:	681b      	ldr	r3, [r3, #0]
 810577a:	3308      	adds	r3, #8
 810577c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810577e:	64ba      	str	r2, [r7, #72]	; 0x48
 8105780:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105782:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105786:	e841 2300 	strex	r3, r2, [r1]
 810578a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810578c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810578e:	2b00      	cmp	r3, #0
 8105790:	d1e5      	bne.n	810575e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8105792:	68fb      	ldr	r3, [r7, #12]
 8105794:	2220      	movs	r2, #32
 8105796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810579a:	68fb      	ldr	r3, [r7, #12]
 810579c:	2220      	movs	r2, #32
 810579e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81057a2:	68fb      	ldr	r3, [r7, #12]
 81057a4:	2200      	movs	r2, #0
 81057a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81057aa:	2303      	movs	r3, #3
 81057ac:	e069      	b.n	8105882 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81057ae:	68fb      	ldr	r3, [r7, #12]
 81057b0:	681b      	ldr	r3, [r3, #0]
 81057b2:	681b      	ldr	r3, [r3, #0]
 81057b4:	f003 0304 	and.w	r3, r3, #4
 81057b8:	2b00      	cmp	r3, #0
 81057ba:	d051      	beq.n	8105860 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81057bc:	68fb      	ldr	r3, [r7, #12]
 81057be:	681b      	ldr	r3, [r3, #0]
 81057c0:	69db      	ldr	r3, [r3, #28]
 81057c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81057c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81057ca:	d149      	bne.n	8105860 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81057cc:	68fb      	ldr	r3, [r7, #12]
 81057ce:	681b      	ldr	r3, [r3, #0]
 81057d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81057d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81057d6:	68fb      	ldr	r3, [r7, #12]
 81057d8:	681b      	ldr	r3, [r3, #0]
 81057da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057de:	e853 3f00 	ldrex	r3, [r3]
 81057e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81057ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 81057ec:	68fb      	ldr	r3, [r7, #12]
 81057ee:	681b      	ldr	r3, [r3, #0]
 81057f0:	461a      	mov	r2, r3
 81057f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81057f4:	637b      	str	r3, [r7, #52]	; 0x34
 81057f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81057f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81057fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81057fc:	e841 2300 	strex	r3, r2, [r1]
 8105800:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8105802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105804:	2b00      	cmp	r3, #0
 8105806:	d1e6      	bne.n	81057d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105808:	68fb      	ldr	r3, [r7, #12]
 810580a:	681b      	ldr	r3, [r3, #0]
 810580c:	3308      	adds	r3, #8
 810580e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105810:	697b      	ldr	r3, [r7, #20]
 8105812:	e853 3f00 	ldrex	r3, [r3]
 8105816:	613b      	str	r3, [r7, #16]
   return(result);
 8105818:	693b      	ldr	r3, [r7, #16]
 810581a:	f023 0301 	bic.w	r3, r3, #1
 810581e:	66bb      	str	r3, [r7, #104]	; 0x68
 8105820:	68fb      	ldr	r3, [r7, #12]
 8105822:	681b      	ldr	r3, [r3, #0]
 8105824:	3308      	adds	r3, #8
 8105826:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8105828:	623a      	str	r2, [r7, #32]
 810582a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810582c:	69f9      	ldr	r1, [r7, #28]
 810582e:	6a3a      	ldr	r2, [r7, #32]
 8105830:	e841 2300 	strex	r3, r2, [r1]
 8105834:	61bb      	str	r3, [r7, #24]
   return(result);
 8105836:	69bb      	ldr	r3, [r7, #24]
 8105838:	2b00      	cmp	r3, #0
 810583a:	d1e5      	bne.n	8105808 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810583c:	68fb      	ldr	r3, [r7, #12]
 810583e:	2220      	movs	r2, #32
 8105840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8105844:	68fb      	ldr	r3, [r7, #12]
 8105846:	2220      	movs	r2, #32
 8105848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810584c:	68fb      	ldr	r3, [r7, #12]
 810584e:	2220      	movs	r2, #32
 8105850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105854:	68fb      	ldr	r3, [r7, #12]
 8105856:	2200      	movs	r2, #0
 8105858:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810585c:	2303      	movs	r3, #3
 810585e:	e010      	b.n	8105882 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105860:	68fb      	ldr	r3, [r7, #12]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	69da      	ldr	r2, [r3, #28]
 8105866:	68bb      	ldr	r3, [r7, #8]
 8105868:	4013      	ands	r3, r2
 810586a:	68ba      	ldr	r2, [r7, #8]
 810586c:	429a      	cmp	r2, r3
 810586e:	bf0c      	ite	eq
 8105870:	2301      	moveq	r3, #1
 8105872:	2300      	movne	r3, #0
 8105874:	b2db      	uxtb	r3, r3
 8105876:	461a      	mov	r2, r3
 8105878:	79fb      	ldrb	r3, [r7, #7]
 810587a:	429a      	cmp	r2, r3
 810587c:	f43f af46 	beq.w	810570c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105880:	2300      	movs	r3, #0
}
 8105882:	4618      	mov	r0, r3
 8105884:	3770      	adds	r7, #112	; 0x70
 8105886:	46bd      	mov	sp, r7
 8105888:	bd80      	pop	{r7, pc}

0810588a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810588a:	b480      	push	{r7}
 810588c:	b085      	sub	sp, #20
 810588e:	af00      	add	r7, sp, #0
 8105890:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105898:	2b01      	cmp	r3, #1
 810589a:	d101      	bne.n	81058a0 <HAL_UARTEx_DisableFifoMode+0x16>
 810589c:	2302      	movs	r3, #2
 810589e:	e027      	b.n	81058f0 <HAL_UARTEx_DisableFifoMode+0x66>
 81058a0:	687b      	ldr	r3, [r7, #4]
 81058a2:	2201      	movs	r2, #1
 81058a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81058a8:	687b      	ldr	r3, [r7, #4]
 81058aa:	2224      	movs	r2, #36	; 0x24
 81058ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81058b0:	687b      	ldr	r3, [r7, #4]
 81058b2:	681b      	ldr	r3, [r3, #0]
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	681a      	ldr	r2, [r3, #0]
 81058be:	687b      	ldr	r3, [r7, #4]
 81058c0:	681b      	ldr	r3, [r3, #0]
 81058c2:	f022 0201 	bic.w	r2, r2, #1
 81058c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81058c8:	68fb      	ldr	r3, [r7, #12]
 81058ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81058ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	2200      	movs	r2, #0
 81058d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	68fa      	ldr	r2, [r7, #12]
 81058dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81058de:	687b      	ldr	r3, [r7, #4]
 81058e0:	2220      	movs	r2, #32
 81058e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81058e6:	687b      	ldr	r3, [r7, #4]
 81058e8:	2200      	movs	r2, #0
 81058ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81058ee:	2300      	movs	r3, #0
}
 81058f0:	4618      	mov	r0, r3
 81058f2:	3714      	adds	r7, #20
 81058f4:	46bd      	mov	sp, r7
 81058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058fa:	4770      	bx	lr

081058fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81058fc:	b580      	push	{r7, lr}
 81058fe:	b084      	sub	sp, #16
 8105900:	af00      	add	r7, sp, #0
 8105902:	6078      	str	r0, [r7, #4]
 8105904:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105906:	687b      	ldr	r3, [r7, #4]
 8105908:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810590c:	2b01      	cmp	r3, #1
 810590e:	d101      	bne.n	8105914 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105910:	2302      	movs	r3, #2
 8105912:	e02d      	b.n	8105970 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8105914:	687b      	ldr	r3, [r7, #4]
 8105916:	2201      	movs	r2, #1
 8105918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810591c:	687b      	ldr	r3, [r7, #4]
 810591e:	2224      	movs	r2, #36	; 0x24
 8105920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105924:	687b      	ldr	r3, [r7, #4]
 8105926:	681b      	ldr	r3, [r3, #0]
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810592c:	687b      	ldr	r3, [r7, #4]
 810592e:	681b      	ldr	r3, [r3, #0]
 8105930:	681a      	ldr	r2, [r3, #0]
 8105932:	687b      	ldr	r3, [r7, #4]
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	f022 0201 	bic.w	r2, r2, #1
 810593a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810593c:	687b      	ldr	r3, [r7, #4]
 810593e:	681b      	ldr	r3, [r3, #0]
 8105940:	689b      	ldr	r3, [r3, #8]
 8105942:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	683a      	ldr	r2, [r7, #0]
 810594c:	430a      	orrs	r2, r1
 810594e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105950:	6878      	ldr	r0, [r7, #4]
 8105952:	f000 f84f 	bl	81059f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105956:	687b      	ldr	r3, [r7, #4]
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	68fa      	ldr	r2, [r7, #12]
 810595c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810595e:	687b      	ldr	r3, [r7, #4]
 8105960:	2220      	movs	r2, #32
 8105962:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105966:	687b      	ldr	r3, [r7, #4]
 8105968:	2200      	movs	r2, #0
 810596a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810596e:	2300      	movs	r3, #0
}
 8105970:	4618      	mov	r0, r3
 8105972:	3710      	adds	r7, #16
 8105974:	46bd      	mov	sp, r7
 8105976:	bd80      	pop	{r7, pc}

08105978 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105978:	b580      	push	{r7, lr}
 810597a:	b084      	sub	sp, #16
 810597c:	af00      	add	r7, sp, #0
 810597e:	6078      	str	r0, [r7, #4]
 8105980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105988:	2b01      	cmp	r3, #1
 810598a:	d101      	bne.n	8105990 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810598c:	2302      	movs	r3, #2
 810598e:	e02d      	b.n	81059ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105990:	687b      	ldr	r3, [r7, #4]
 8105992:	2201      	movs	r2, #1
 8105994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105998:	687b      	ldr	r3, [r7, #4]
 810599a:	2224      	movs	r2, #36	; 0x24
 810599c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81059a0:	687b      	ldr	r3, [r7, #4]
 81059a2:	681b      	ldr	r3, [r3, #0]
 81059a4:	681b      	ldr	r3, [r3, #0]
 81059a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81059a8:	687b      	ldr	r3, [r7, #4]
 81059aa:	681b      	ldr	r3, [r3, #0]
 81059ac:	681a      	ldr	r2, [r3, #0]
 81059ae:	687b      	ldr	r3, [r7, #4]
 81059b0:	681b      	ldr	r3, [r3, #0]
 81059b2:	f022 0201 	bic.w	r2, r2, #1
 81059b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	681b      	ldr	r3, [r3, #0]
 81059bc:	689b      	ldr	r3, [r3, #8]
 81059be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	681b      	ldr	r3, [r3, #0]
 81059c6:	683a      	ldr	r2, [r7, #0]
 81059c8:	430a      	orrs	r2, r1
 81059ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81059cc:	6878      	ldr	r0, [r7, #4]
 81059ce:	f000 f811 	bl	81059f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	681b      	ldr	r3, [r3, #0]
 81059d6:	68fa      	ldr	r2, [r7, #12]
 81059d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81059da:	687b      	ldr	r3, [r7, #4]
 81059dc:	2220      	movs	r2, #32
 81059de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81059e2:	687b      	ldr	r3, [r7, #4]
 81059e4:	2200      	movs	r2, #0
 81059e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81059ea:	2300      	movs	r3, #0
}
 81059ec:	4618      	mov	r0, r3
 81059ee:	3710      	adds	r7, #16
 81059f0:	46bd      	mov	sp, r7
 81059f2:	bd80      	pop	{r7, pc}

081059f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81059f4:	b480      	push	{r7}
 81059f6:	b085      	sub	sp, #20
 81059f8:	af00      	add	r7, sp, #0
 81059fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81059fc:	687b      	ldr	r3, [r7, #4]
 81059fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105a00:	2b00      	cmp	r3, #0
 8105a02:	d108      	bne.n	8105a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	2201      	movs	r2, #1
 8105a08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	2201      	movs	r2, #1
 8105a10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105a14:	e031      	b.n	8105a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8105a16:	2310      	movs	r3, #16
 8105a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105a1a:	2310      	movs	r3, #16
 8105a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105a1e:	687b      	ldr	r3, [r7, #4]
 8105a20:	681b      	ldr	r3, [r3, #0]
 8105a22:	689b      	ldr	r3, [r3, #8]
 8105a24:	0e5b      	lsrs	r3, r3, #25
 8105a26:	b2db      	uxtb	r3, r3
 8105a28:	f003 0307 	and.w	r3, r3, #7
 8105a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105a2e:	687b      	ldr	r3, [r7, #4]
 8105a30:	681b      	ldr	r3, [r3, #0]
 8105a32:	689b      	ldr	r3, [r3, #8]
 8105a34:	0f5b      	lsrs	r3, r3, #29
 8105a36:	b2db      	uxtb	r3, r3
 8105a38:	f003 0307 	and.w	r3, r3, #7
 8105a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105a3e:	7bbb      	ldrb	r3, [r7, #14]
 8105a40:	7b3a      	ldrb	r2, [r7, #12]
 8105a42:	4911      	ldr	r1, [pc, #68]	; (8105a88 <UARTEx_SetNbDataToProcess+0x94>)
 8105a44:	5c8a      	ldrb	r2, [r1, r2]
 8105a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8105a4a:	7b3a      	ldrb	r2, [r7, #12]
 8105a4c:	490f      	ldr	r1, [pc, #60]	; (8105a8c <UARTEx_SetNbDataToProcess+0x98>)
 8105a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8105a54:	b29a      	uxth	r2, r3
 8105a56:	687b      	ldr	r3, [r7, #4]
 8105a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105a5c:	7bfb      	ldrb	r3, [r7, #15]
 8105a5e:	7b7a      	ldrb	r2, [r7, #13]
 8105a60:	4909      	ldr	r1, [pc, #36]	; (8105a88 <UARTEx_SetNbDataToProcess+0x94>)
 8105a62:	5c8a      	ldrb	r2, [r1, r2]
 8105a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8105a68:	7b7a      	ldrb	r2, [r7, #13]
 8105a6a:	4908      	ldr	r1, [pc, #32]	; (8105a8c <UARTEx_SetNbDataToProcess+0x98>)
 8105a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8105a72:	b29a      	uxth	r2, r3
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8105a7a:	bf00      	nop
 8105a7c:	3714      	adds	r7, #20
 8105a7e:	46bd      	mov	sp, r7
 8105a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a84:	4770      	bx	lr
 8105a86:	bf00      	nop
 8105a88:	08106484 	.word	0x08106484
 8105a8c:	0810648c 	.word	0x0810648c

08105a90 <__errno>:
 8105a90:	4b01      	ldr	r3, [pc, #4]	; (8105a98 <__errno+0x8>)
 8105a92:	6818      	ldr	r0, [r3, #0]
 8105a94:	4770      	bx	lr
 8105a96:	bf00      	nop
 8105a98:	10000010 	.word	0x10000010

08105a9c <__libc_init_array>:
 8105a9c:	b570      	push	{r4, r5, r6, lr}
 8105a9e:	4d0d      	ldr	r5, [pc, #52]	; (8105ad4 <__libc_init_array+0x38>)
 8105aa0:	4c0d      	ldr	r4, [pc, #52]	; (8105ad8 <__libc_init_array+0x3c>)
 8105aa2:	1b64      	subs	r4, r4, r5
 8105aa4:	10a4      	asrs	r4, r4, #2
 8105aa6:	2600      	movs	r6, #0
 8105aa8:	42a6      	cmp	r6, r4
 8105aaa:	d109      	bne.n	8105ac0 <__libc_init_array+0x24>
 8105aac:	4d0b      	ldr	r5, [pc, #44]	; (8105adc <__libc_init_array+0x40>)
 8105aae:	4c0c      	ldr	r4, [pc, #48]	; (8105ae0 <__libc_init_array+0x44>)
 8105ab0:	f000 fca2 	bl	81063f8 <_init>
 8105ab4:	1b64      	subs	r4, r4, r5
 8105ab6:	10a4      	asrs	r4, r4, #2
 8105ab8:	2600      	movs	r6, #0
 8105aba:	42a6      	cmp	r6, r4
 8105abc:	d105      	bne.n	8105aca <__libc_init_array+0x2e>
 8105abe:	bd70      	pop	{r4, r5, r6, pc}
 8105ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8105ac4:	4798      	blx	r3
 8105ac6:	3601      	adds	r6, #1
 8105ac8:	e7ee      	b.n	8105aa8 <__libc_init_array+0xc>
 8105aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8105ace:	4798      	blx	r3
 8105ad0:	3601      	adds	r6, #1
 8105ad2:	e7f2      	b.n	8105aba <__libc_init_array+0x1e>
 8105ad4:	081064d0 	.word	0x081064d0
 8105ad8:	081064d0 	.word	0x081064d0
 8105adc:	081064d0 	.word	0x081064d0
 8105ae0:	081064d4 	.word	0x081064d4

08105ae4 <memset>:
 8105ae4:	4402      	add	r2, r0
 8105ae6:	4603      	mov	r3, r0
 8105ae8:	4293      	cmp	r3, r2
 8105aea:	d100      	bne.n	8105aee <memset+0xa>
 8105aec:	4770      	bx	lr
 8105aee:	f803 1b01 	strb.w	r1, [r3], #1
 8105af2:	e7f9      	b.n	8105ae8 <memset+0x4>

08105af4 <sniprintf>:
 8105af4:	b40c      	push	{r2, r3}
 8105af6:	b530      	push	{r4, r5, lr}
 8105af8:	4b17      	ldr	r3, [pc, #92]	; (8105b58 <sniprintf+0x64>)
 8105afa:	1e0c      	subs	r4, r1, #0
 8105afc:	681d      	ldr	r5, [r3, #0]
 8105afe:	b09d      	sub	sp, #116	; 0x74
 8105b00:	da08      	bge.n	8105b14 <sniprintf+0x20>
 8105b02:	238b      	movs	r3, #139	; 0x8b
 8105b04:	602b      	str	r3, [r5, #0]
 8105b06:	f04f 30ff 	mov.w	r0, #4294967295
 8105b0a:	b01d      	add	sp, #116	; 0x74
 8105b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8105b10:	b002      	add	sp, #8
 8105b12:	4770      	bx	lr
 8105b14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8105b18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8105b1c:	bf14      	ite	ne
 8105b1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8105b22:	4623      	moveq	r3, r4
 8105b24:	9304      	str	r3, [sp, #16]
 8105b26:	9307      	str	r3, [sp, #28]
 8105b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8105b2c:	9002      	str	r0, [sp, #8]
 8105b2e:	9006      	str	r0, [sp, #24]
 8105b30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8105b34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8105b36:	ab21      	add	r3, sp, #132	; 0x84
 8105b38:	a902      	add	r1, sp, #8
 8105b3a:	4628      	mov	r0, r5
 8105b3c:	9301      	str	r3, [sp, #4]
 8105b3e:	f000 f869 	bl	8105c14 <_svfiprintf_r>
 8105b42:	1c43      	adds	r3, r0, #1
 8105b44:	bfbc      	itt	lt
 8105b46:	238b      	movlt	r3, #139	; 0x8b
 8105b48:	602b      	strlt	r3, [r5, #0]
 8105b4a:	2c00      	cmp	r4, #0
 8105b4c:	d0dd      	beq.n	8105b0a <sniprintf+0x16>
 8105b4e:	9b02      	ldr	r3, [sp, #8]
 8105b50:	2200      	movs	r2, #0
 8105b52:	701a      	strb	r2, [r3, #0]
 8105b54:	e7d9      	b.n	8105b0a <sniprintf+0x16>
 8105b56:	bf00      	nop
 8105b58:	10000010 	.word	0x10000010

08105b5c <__ssputs_r>:
 8105b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8105b60:	688e      	ldr	r6, [r1, #8]
 8105b62:	429e      	cmp	r6, r3
 8105b64:	4682      	mov	sl, r0
 8105b66:	460c      	mov	r4, r1
 8105b68:	4690      	mov	r8, r2
 8105b6a:	461f      	mov	r7, r3
 8105b6c:	d838      	bhi.n	8105be0 <__ssputs_r+0x84>
 8105b6e:	898a      	ldrh	r2, [r1, #12]
 8105b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8105b74:	d032      	beq.n	8105bdc <__ssputs_r+0x80>
 8105b76:	6825      	ldr	r5, [r4, #0]
 8105b78:	6909      	ldr	r1, [r1, #16]
 8105b7a:	eba5 0901 	sub.w	r9, r5, r1
 8105b7e:	6965      	ldr	r5, [r4, #20]
 8105b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8105b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8105b88:	3301      	adds	r3, #1
 8105b8a:	444b      	add	r3, r9
 8105b8c:	106d      	asrs	r5, r5, #1
 8105b8e:	429d      	cmp	r5, r3
 8105b90:	bf38      	it	cc
 8105b92:	461d      	movcc	r5, r3
 8105b94:	0553      	lsls	r3, r2, #21
 8105b96:	d531      	bpl.n	8105bfc <__ssputs_r+0xa0>
 8105b98:	4629      	mov	r1, r5
 8105b9a:	f000 fb63 	bl	8106264 <_malloc_r>
 8105b9e:	4606      	mov	r6, r0
 8105ba0:	b950      	cbnz	r0, 8105bb8 <__ssputs_r+0x5c>
 8105ba2:	230c      	movs	r3, #12
 8105ba4:	f8ca 3000 	str.w	r3, [sl]
 8105ba8:	89a3      	ldrh	r3, [r4, #12]
 8105baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105bae:	81a3      	strh	r3, [r4, #12]
 8105bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8105bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8105bb8:	6921      	ldr	r1, [r4, #16]
 8105bba:	464a      	mov	r2, r9
 8105bbc:	f000 fabe 	bl	810613c <memcpy>
 8105bc0:	89a3      	ldrh	r3, [r4, #12]
 8105bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8105bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8105bca:	81a3      	strh	r3, [r4, #12]
 8105bcc:	6126      	str	r6, [r4, #16]
 8105bce:	6165      	str	r5, [r4, #20]
 8105bd0:	444e      	add	r6, r9
 8105bd2:	eba5 0509 	sub.w	r5, r5, r9
 8105bd6:	6026      	str	r6, [r4, #0]
 8105bd8:	60a5      	str	r5, [r4, #8]
 8105bda:	463e      	mov	r6, r7
 8105bdc:	42be      	cmp	r6, r7
 8105bde:	d900      	bls.n	8105be2 <__ssputs_r+0x86>
 8105be0:	463e      	mov	r6, r7
 8105be2:	6820      	ldr	r0, [r4, #0]
 8105be4:	4632      	mov	r2, r6
 8105be6:	4641      	mov	r1, r8
 8105be8:	f000 fab6 	bl	8106158 <memmove>
 8105bec:	68a3      	ldr	r3, [r4, #8]
 8105bee:	1b9b      	subs	r3, r3, r6
 8105bf0:	60a3      	str	r3, [r4, #8]
 8105bf2:	6823      	ldr	r3, [r4, #0]
 8105bf4:	4433      	add	r3, r6
 8105bf6:	6023      	str	r3, [r4, #0]
 8105bf8:	2000      	movs	r0, #0
 8105bfa:	e7db      	b.n	8105bb4 <__ssputs_r+0x58>
 8105bfc:	462a      	mov	r2, r5
 8105bfe:	f000 fba5 	bl	810634c <_realloc_r>
 8105c02:	4606      	mov	r6, r0
 8105c04:	2800      	cmp	r0, #0
 8105c06:	d1e1      	bne.n	8105bcc <__ssputs_r+0x70>
 8105c08:	6921      	ldr	r1, [r4, #16]
 8105c0a:	4650      	mov	r0, sl
 8105c0c:	f000 fabe 	bl	810618c <_free_r>
 8105c10:	e7c7      	b.n	8105ba2 <__ssputs_r+0x46>
	...

08105c14 <_svfiprintf_r>:
 8105c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105c18:	4698      	mov	r8, r3
 8105c1a:	898b      	ldrh	r3, [r1, #12]
 8105c1c:	061b      	lsls	r3, r3, #24
 8105c1e:	b09d      	sub	sp, #116	; 0x74
 8105c20:	4607      	mov	r7, r0
 8105c22:	460d      	mov	r5, r1
 8105c24:	4614      	mov	r4, r2
 8105c26:	d50e      	bpl.n	8105c46 <_svfiprintf_r+0x32>
 8105c28:	690b      	ldr	r3, [r1, #16]
 8105c2a:	b963      	cbnz	r3, 8105c46 <_svfiprintf_r+0x32>
 8105c2c:	2140      	movs	r1, #64	; 0x40
 8105c2e:	f000 fb19 	bl	8106264 <_malloc_r>
 8105c32:	6028      	str	r0, [r5, #0]
 8105c34:	6128      	str	r0, [r5, #16]
 8105c36:	b920      	cbnz	r0, 8105c42 <_svfiprintf_r+0x2e>
 8105c38:	230c      	movs	r3, #12
 8105c3a:	603b      	str	r3, [r7, #0]
 8105c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8105c40:	e0d1      	b.n	8105de6 <_svfiprintf_r+0x1d2>
 8105c42:	2340      	movs	r3, #64	; 0x40
 8105c44:	616b      	str	r3, [r5, #20]
 8105c46:	2300      	movs	r3, #0
 8105c48:	9309      	str	r3, [sp, #36]	; 0x24
 8105c4a:	2320      	movs	r3, #32
 8105c4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8105c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8105c54:	2330      	movs	r3, #48	; 0x30
 8105c56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8105e00 <_svfiprintf_r+0x1ec>
 8105c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8105c5e:	f04f 0901 	mov.w	r9, #1
 8105c62:	4623      	mov	r3, r4
 8105c64:	469a      	mov	sl, r3
 8105c66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8105c6a:	b10a      	cbz	r2, 8105c70 <_svfiprintf_r+0x5c>
 8105c6c:	2a25      	cmp	r2, #37	; 0x25
 8105c6e:	d1f9      	bne.n	8105c64 <_svfiprintf_r+0x50>
 8105c70:	ebba 0b04 	subs.w	fp, sl, r4
 8105c74:	d00b      	beq.n	8105c8e <_svfiprintf_r+0x7a>
 8105c76:	465b      	mov	r3, fp
 8105c78:	4622      	mov	r2, r4
 8105c7a:	4629      	mov	r1, r5
 8105c7c:	4638      	mov	r0, r7
 8105c7e:	f7ff ff6d 	bl	8105b5c <__ssputs_r>
 8105c82:	3001      	adds	r0, #1
 8105c84:	f000 80aa 	beq.w	8105ddc <_svfiprintf_r+0x1c8>
 8105c88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8105c8a:	445a      	add	r2, fp
 8105c8c:	9209      	str	r2, [sp, #36]	; 0x24
 8105c8e:	f89a 3000 	ldrb.w	r3, [sl]
 8105c92:	2b00      	cmp	r3, #0
 8105c94:	f000 80a2 	beq.w	8105ddc <_svfiprintf_r+0x1c8>
 8105c98:	2300      	movs	r3, #0
 8105c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8105c9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8105ca2:	f10a 0a01 	add.w	sl, sl, #1
 8105ca6:	9304      	str	r3, [sp, #16]
 8105ca8:	9307      	str	r3, [sp, #28]
 8105caa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8105cae:	931a      	str	r3, [sp, #104]	; 0x68
 8105cb0:	4654      	mov	r4, sl
 8105cb2:	2205      	movs	r2, #5
 8105cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8105cb8:	4851      	ldr	r0, [pc, #324]	; (8105e00 <_svfiprintf_r+0x1ec>)
 8105cba:	f7fa fb11 	bl	81002e0 <memchr>
 8105cbe:	9a04      	ldr	r2, [sp, #16]
 8105cc0:	b9d8      	cbnz	r0, 8105cfa <_svfiprintf_r+0xe6>
 8105cc2:	06d0      	lsls	r0, r2, #27
 8105cc4:	bf44      	itt	mi
 8105cc6:	2320      	movmi	r3, #32
 8105cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8105ccc:	0711      	lsls	r1, r2, #28
 8105cce:	bf44      	itt	mi
 8105cd0:	232b      	movmi	r3, #43	; 0x2b
 8105cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8105cd6:	f89a 3000 	ldrb.w	r3, [sl]
 8105cda:	2b2a      	cmp	r3, #42	; 0x2a
 8105cdc:	d015      	beq.n	8105d0a <_svfiprintf_r+0xf6>
 8105cde:	9a07      	ldr	r2, [sp, #28]
 8105ce0:	4654      	mov	r4, sl
 8105ce2:	2000      	movs	r0, #0
 8105ce4:	f04f 0c0a 	mov.w	ip, #10
 8105ce8:	4621      	mov	r1, r4
 8105cea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8105cee:	3b30      	subs	r3, #48	; 0x30
 8105cf0:	2b09      	cmp	r3, #9
 8105cf2:	d94e      	bls.n	8105d92 <_svfiprintf_r+0x17e>
 8105cf4:	b1b0      	cbz	r0, 8105d24 <_svfiprintf_r+0x110>
 8105cf6:	9207      	str	r2, [sp, #28]
 8105cf8:	e014      	b.n	8105d24 <_svfiprintf_r+0x110>
 8105cfa:	eba0 0308 	sub.w	r3, r0, r8
 8105cfe:	fa09 f303 	lsl.w	r3, r9, r3
 8105d02:	4313      	orrs	r3, r2
 8105d04:	9304      	str	r3, [sp, #16]
 8105d06:	46a2      	mov	sl, r4
 8105d08:	e7d2      	b.n	8105cb0 <_svfiprintf_r+0x9c>
 8105d0a:	9b03      	ldr	r3, [sp, #12]
 8105d0c:	1d19      	adds	r1, r3, #4
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	9103      	str	r1, [sp, #12]
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	bfbb      	ittet	lt
 8105d16:	425b      	neglt	r3, r3
 8105d18:	f042 0202 	orrlt.w	r2, r2, #2
 8105d1c:	9307      	strge	r3, [sp, #28]
 8105d1e:	9307      	strlt	r3, [sp, #28]
 8105d20:	bfb8      	it	lt
 8105d22:	9204      	strlt	r2, [sp, #16]
 8105d24:	7823      	ldrb	r3, [r4, #0]
 8105d26:	2b2e      	cmp	r3, #46	; 0x2e
 8105d28:	d10c      	bne.n	8105d44 <_svfiprintf_r+0x130>
 8105d2a:	7863      	ldrb	r3, [r4, #1]
 8105d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8105d2e:	d135      	bne.n	8105d9c <_svfiprintf_r+0x188>
 8105d30:	9b03      	ldr	r3, [sp, #12]
 8105d32:	1d1a      	adds	r2, r3, #4
 8105d34:	681b      	ldr	r3, [r3, #0]
 8105d36:	9203      	str	r2, [sp, #12]
 8105d38:	2b00      	cmp	r3, #0
 8105d3a:	bfb8      	it	lt
 8105d3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8105d40:	3402      	adds	r4, #2
 8105d42:	9305      	str	r3, [sp, #20]
 8105d44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8105e10 <_svfiprintf_r+0x1fc>
 8105d48:	7821      	ldrb	r1, [r4, #0]
 8105d4a:	2203      	movs	r2, #3
 8105d4c:	4650      	mov	r0, sl
 8105d4e:	f7fa fac7 	bl	81002e0 <memchr>
 8105d52:	b140      	cbz	r0, 8105d66 <_svfiprintf_r+0x152>
 8105d54:	2340      	movs	r3, #64	; 0x40
 8105d56:	eba0 000a 	sub.w	r0, r0, sl
 8105d5a:	fa03 f000 	lsl.w	r0, r3, r0
 8105d5e:	9b04      	ldr	r3, [sp, #16]
 8105d60:	4303      	orrs	r3, r0
 8105d62:	3401      	adds	r4, #1
 8105d64:	9304      	str	r3, [sp, #16]
 8105d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8105d6a:	4826      	ldr	r0, [pc, #152]	; (8105e04 <_svfiprintf_r+0x1f0>)
 8105d6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8105d70:	2206      	movs	r2, #6
 8105d72:	f7fa fab5 	bl	81002e0 <memchr>
 8105d76:	2800      	cmp	r0, #0
 8105d78:	d038      	beq.n	8105dec <_svfiprintf_r+0x1d8>
 8105d7a:	4b23      	ldr	r3, [pc, #140]	; (8105e08 <_svfiprintf_r+0x1f4>)
 8105d7c:	bb1b      	cbnz	r3, 8105dc6 <_svfiprintf_r+0x1b2>
 8105d7e:	9b03      	ldr	r3, [sp, #12]
 8105d80:	3307      	adds	r3, #7
 8105d82:	f023 0307 	bic.w	r3, r3, #7
 8105d86:	3308      	adds	r3, #8
 8105d88:	9303      	str	r3, [sp, #12]
 8105d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8105d8c:	4433      	add	r3, r6
 8105d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8105d90:	e767      	b.n	8105c62 <_svfiprintf_r+0x4e>
 8105d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8105d96:	460c      	mov	r4, r1
 8105d98:	2001      	movs	r0, #1
 8105d9a:	e7a5      	b.n	8105ce8 <_svfiprintf_r+0xd4>
 8105d9c:	2300      	movs	r3, #0
 8105d9e:	3401      	adds	r4, #1
 8105da0:	9305      	str	r3, [sp, #20]
 8105da2:	4619      	mov	r1, r3
 8105da4:	f04f 0c0a 	mov.w	ip, #10
 8105da8:	4620      	mov	r0, r4
 8105daa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8105dae:	3a30      	subs	r2, #48	; 0x30
 8105db0:	2a09      	cmp	r2, #9
 8105db2:	d903      	bls.n	8105dbc <_svfiprintf_r+0x1a8>
 8105db4:	2b00      	cmp	r3, #0
 8105db6:	d0c5      	beq.n	8105d44 <_svfiprintf_r+0x130>
 8105db8:	9105      	str	r1, [sp, #20]
 8105dba:	e7c3      	b.n	8105d44 <_svfiprintf_r+0x130>
 8105dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8105dc0:	4604      	mov	r4, r0
 8105dc2:	2301      	movs	r3, #1
 8105dc4:	e7f0      	b.n	8105da8 <_svfiprintf_r+0x194>
 8105dc6:	ab03      	add	r3, sp, #12
 8105dc8:	9300      	str	r3, [sp, #0]
 8105dca:	462a      	mov	r2, r5
 8105dcc:	4b0f      	ldr	r3, [pc, #60]	; (8105e0c <_svfiprintf_r+0x1f8>)
 8105dce:	a904      	add	r1, sp, #16
 8105dd0:	4638      	mov	r0, r7
 8105dd2:	f3af 8000 	nop.w
 8105dd6:	1c42      	adds	r2, r0, #1
 8105dd8:	4606      	mov	r6, r0
 8105dda:	d1d6      	bne.n	8105d8a <_svfiprintf_r+0x176>
 8105ddc:	89ab      	ldrh	r3, [r5, #12]
 8105dde:	065b      	lsls	r3, r3, #25
 8105de0:	f53f af2c 	bmi.w	8105c3c <_svfiprintf_r+0x28>
 8105de4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8105de6:	b01d      	add	sp, #116	; 0x74
 8105de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105dec:	ab03      	add	r3, sp, #12
 8105dee:	9300      	str	r3, [sp, #0]
 8105df0:	462a      	mov	r2, r5
 8105df2:	4b06      	ldr	r3, [pc, #24]	; (8105e0c <_svfiprintf_r+0x1f8>)
 8105df4:	a904      	add	r1, sp, #16
 8105df6:	4638      	mov	r0, r7
 8105df8:	f000 f87a 	bl	8105ef0 <_printf_i>
 8105dfc:	e7eb      	b.n	8105dd6 <_svfiprintf_r+0x1c2>
 8105dfe:	bf00      	nop
 8105e00:	08106494 	.word	0x08106494
 8105e04:	0810649e 	.word	0x0810649e
 8105e08:	00000000 	.word	0x00000000
 8105e0c:	08105b5d 	.word	0x08105b5d
 8105e10:	0810649a 	.word	0x0810649a

08105e14 <_printf_common>:
 8105e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8105e18:	4616      	mov	r6, r2
 8105e1a:	4699      	mov	r9, r3
 8105e1c:	688a      	ldr	r2, [r1, #8]
 8105e1e:	690b      	ldr	r3, [r1, #16]
 8105e20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8105e24:	4293      	cmp	r3, r2
 8105e26:	bfb8      	it	lt
 8105e28:	4613      	movlt	r3, r2
 8105e2a:	6033      	str	r3, [r6, #0]
 8105e2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8105e30:	4607      	mov	r7, r0
 8105e32:	460c      	mov	r4, r1
 8105e34:	b10a      	cbz	r2, 8105e3a <_printf_common+0x26>
 8105e36:	3301      	adds	r3, #1
 8105e38:	6033      	str	r3, [r6, #0]
 8105e3a:	6823      	ldr	r3, [r4, #0]
 8105e3c:	0699      	lsls	r1, r3, #26
 8105e3e:	bf42      	ittt	mi
 8105e40:	6833      	ldrmi	r3, [r6, #0]
 8105e42:	3302      	addmi	r3, #2
 8105e44:	6033      	strmi	r3, [r6, #0]
 8105e46:	6825      	ldr	r5, [r4, #0]
 8105e48:	f015 0506 	ands.w	r5, r5, #6
 8105e4c:	d106      	bne.n	8105e5c <_printf_common+0x48>
 8105e4e:	f104 0a19 	add.w	sl, r4, #25
 8105e52:	68e3      	ldr	r3, [r4, #12]
 8105e54:	6832      	ldr	r2, [r6, #0]
 8105e56:	1a9b      	subs	r3, r3, r2
 8105e58:	42ab      	cmp	r3, r5
 8105e5a:	dc26      	bgt.n	8105eaa <_printf_common+0x96>
 8105e5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8105e60:	1e13      	subs	r3, r2, #0
 8105e62:	6822      	ldr	r2, [r4, #0]
 8105e64:	bf18      	it	ne
 8105e66:	2301      	movne	r3, #1
 8105e68:	0692      	lsls	r2, r2, #26
 8105e6a:	d42b      	bmi.n	8105ec4 <_printf_common+0xb0>
 8105e6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8105e70:	4649      	mov	r1, r9
 8105e72:	4638      	mov	r0, r7
 8105e74:	47c0      	blx	r8
 8105e76:	3001      	adds	r0, #1
 8105e78:	d01e      	beq.n	8105eb8 <_printf_common+0xa4>
 8105e7a:	6823      	ldr	r3, [r4, #0]
 8105e7c:	68e5      	ldr	r5, [r4, #12]
 8105e7e:	6832      	ldr	r2, [r6, #0]
 8105e80:	f003 0306 	and.w	r3, r3, #6
 8105e84:	2b04      	cmp	r3, #4
 8105e86:	bf08      	it	eq
 8105e88:	1aad      	subeq	r5, r5, r2
 8105e8a:	68a3      	ldr	r3, [r4, #8]
 8105e8c:	6922      	ldr	r2, [r4, #16]
 8105e8e:	bf0c      	ite	eq
 8105e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8105e94:	2500      	movne	r5, #0
 8105e96:	4293      	cmp	r3, r2
 8105e98:	bfc4      	itt	gt
 8105e9a:	1a9b      	subgt	r3, r3, r2
 8105e9c:	18ed      	addgt	r5, r5, r3
 8105e9e:	2600      	movs	r6, #0
 8105ea0:	341a      	adds	r4, #26
 8105ea2:	42b5      	cmp	r5, r6
 8105ea4:	d11a      	bne.n	8105edc <_printf_common+0xc8>
 8105ea6:	2000      	movs	r0, #0
 8105ea8:	e008      	b.n	8105ebc <_printf_common+0xa8>
 8105eaa:	2301      	movs	r3, #1
 8105eac:	4652      	mov	r2, sl
 8105eae:	4649      	mov	r1, r9
 8105eb0:	4638      	mov	r0, r7
 8105eb2:	47c0      	blx	r8
 8105eb4:	3001      	adds	r0, #1
 8105eb6:	d103      	bne.n	8105ec0 <_printf_common+0xac>
 8105eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8105ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8105ec0:	3501      	adds	r5, #1
 8105ec2:	e7c6      	b.n	8105e52 <_printf_common+0x3e>
 8105ec4:	18e1      	adds	r1, r4, r3
 8105ec6:	1c5a      	adds	r2, r3, #1
 8105ec8:	2030      	movs	r0, #48	; 0x30
 8105eca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8105ece:	4422      	add	r2, r4
 8105ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8105ed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8105ed8:	3302      	adds	r3, #2
 8105eda:	e7c7      	b.n	8105e6c <_printf_common+0x58>
 8105edc:	2301      	movs	r3, #1
 8105ede:	4622      	mov	r2, r4
 8105ee0:	4649      	mov	r1, r9
 8105ee2:	4638      	mov	r0, r7
 8105ee4:	47c0      	blx	r8
 8105ee6:	3001      	adds	r0, #1
 8105ee8:	d0e6      	beq.n	8105eb8 <_printf_common+0xa4>
 8105eea:	3601      	adds	r6, #1
 8105eec:	e7d9      	b.n	8105ea2 <_printf_common+0x8e>
	...

08105ef0 <_printf_i>:
 8105ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8105ef4:	7e0f      	ldrb	r7, [r1, #24]
 8105ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8105ef8:	2f78      	cmp	r7, #120	; 0x78
 8105efa:	4691      	mov	r9, r2
 8105efc:	4680      	mov	r8, r0
 8105efe:	460c      	mov	r4, r1
 8105f00:	469a      	mov	sl, r3
 8105f02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8105f06:	d807      	bhi.n	8105f18 <_printf_i+0x28>
 8105f08:	2f62      	cmp	r7, #98	; 0x62
 8105f0a:	d80a      	bhi.n	8105f22 <_printf_i+0x32>
 8105f0c:	2f00      	cmp	r7, #0
 8105f0e:	f000 80d8 	beq.w	81060c2 <_printf_i+0x1d2>
 8105f12:	2f58      	cmp	r7, #88	; 0x58
 8105f14:	f000 80a3 	beq.w	810605e <_printf_i+0x16e>
 8105f18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8105f1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8105f20:	e03a      	b.n	8105f98 <_printf_i+0xa8>
 8105f22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8105f26:	2b15      	cmp	r3, #21
 8105f28:	d8f6      	bhi.n	8105f18 <_printf_i+0x28>
 8105f2a:	a101      	add	r1, pc, #4	; (adr r1, 8105f30 <_printf_i+0x40>)
 8105f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8105f30:	08105f89 	.word	0x08105f89
 8105f34:	08105f9d 	.word	0x08105f9d
 8105f38:	08105f19 	.word	0x08105f19
 8105f3c:	08105f19 	.word	0x08105f19
 8105f40:	08105f19 	.word	0x08105f19
 8105f44:	08105f19 	.word	0x08105f19
 8105f48:	08105f9d 	.word	0x08105f9d
 8105f4c:	08105f19 	.word	0x08105f19
 8105f50:	08105f19 	.word	0x08105f19
 8105f54:	08105f19 	.word	0x08105f19
 8105f58:	08105f19 	.word	0x08105f19
 8105f5c:	081060a9 	.word	0x081060a9
 8105f60:	08105fcd 	.word	0x08105fcd
 8105f64:	0810608b 	.word	0x0810608b
 8105f68:	08105f19 	.word	0x08105f19
 8105f6c:	08105f19 	.word	0x08105f19
 8105f70:	081060cb 	.word	0x081060cb
 8105f74:	08105f19 	.word	0x08105f19
 8105f78:	08105fcd 	.word	0x08105fcd
 8105f7c:	08105f19 	.word	0x08105f19
 8105f80:	08105f19 	.word	0x08105f19
 8105f84:	08106093 	.word	0x08106093
 8105f88:	682b      	ldr	r3, [r5, #0]
 8105f8a:	1d1a      	adds	r2, r3, #4
 8105f8c:	681b      	ldr	r3, [r3, #0]
 8105f8e:	602a      	str	r2, [r5, #0]
 8105f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8105f94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8105f98:	2301      	movs	r3, #1
 8105f9a:	e0a3      	b.n	81060e4 <_printf_i+0x1f4>
 8105f9c:	6820      	ldr	r0, [r4, #0]
 8105f9e:	6829      	ldr	r1, [r5, #0]
 8105fa0:	0606      	lsls	r6, r0, #24
 8105fa2:	f101 0304 	add.w	r3, r1, #4
 8105fa6:	d50a      	bpl.n	8105fbe <_printf_i+0xce>
 8105fa8:	680e      	ldr	r6, [r1, #0]
 8105faa:	602b      	str	r3, [r5, #0]
 8105fac:	2e00      	cmp	r6, #0
 8105fae:	da03      	bge.n	8105fb8 <_printf_i+0xc8>
 8105fb0:	232d      	movs	r3, #45	; 0x2d
 8105fb2:	4276      	negs	r6, r6
 8105fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8105fb8:	485e      	ldr	r0, [pc, #376]	; (8106134 <_printf_i+0x244>)
 8105fba:	230a      	movs	r3, #10
 8105fbc:	e019      	b.n	8105ff2 <_printf_i+0x102>
 8105fbe:	680e      	ldr	r6, [r1, #0]
 8105fc0:	602b      	str	r3, [r5, #0]
 8105fc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8105fc6:	bf18      	it	ne
 8105fc8:	b236      	sxthne	r6, r6
 8105fca:	e7ef      	b.n	8105fac <_printf_i+0xbc>
 8105fcc:	682b      	ldr	r3, [r5, #0]
 8105fce:	6820      	ldr	r0, [r4, #0]
 8105fd0:	1d19      	adds	r1, r3, #4
 8105fd2:	6029      	str	r1, [r5, #0]
 8105fd4:	0601      	lsls	r1, r0, #24
 8105fd6:	d501      	bpl.n	8105fdc <_printf_i+0xec>
 8105fd8:	681e      	ldr	r6, [r3, #0]
 8105fda:	e002      	b.n	8105fe2 <_printf_i+0xf2>
 8105fdc:	0646      	lsls	r6, r0, #25
 8105fde:	d5fb      	bpl.n	8105fd8 <_printf_i+0xe8>
 8105fe0:	881e      	ldrh	r6, [r3, #0]
 8105fe2:	4854      	ldr	r0, [pc, #336]	; (8106134 <_printf_i+0x244>)
 8105fe4:	2f6f      	cmp	r7, #111	; 0x6f
 8105fe6:	bf0c      	ite	eq
 8105fe8:	2308      	moveq	r3, #8
 8105fea:	230a      	movne	r3, #10
 8105fec:	2100      	movs	r1, #0
 8105fee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8105ff2:	6865      	ldr	r5, [r4, #4]
 8105ff4:	60a5      	str	r5, [r4, #8]
 8105ff6:	2d00      	cmp	r5, #0
 8105ff8:	bfa2      	ittt	ge
 8105ffa:	6821      	ldrge	r1, [r4, #0]
 8105ffc:	f021 0104 	bicge.w	r1, r1, #4
 8106000:	6021      	strge	r1, [r4, #0]
 8106002:	b90e      	cbnz	r6, 8106008 <_printf_i+0x118>
 8106004:	2d00      	cmp	r5, #0
 8106006:	d04d      	beq.n	81060a4 <_printf_i+0x1b4>
 8106008:	4615      	mov	r5, r2
 810600a:	fbb6 f1f3 	udiv	r1, r6, r3
 810600e:	fb03 6711 	mls	r7, r3, r1, r6
 8106012:	5dc7      	ldrb	r7, [r0, r7]
 8106014:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8106018:	4637      	mov	r7, r6
 810601a:	42bb      	cmp	r3, r7
 810601c:	460e      	mov	r6, r1
 810601e:	d9f4      	bls.n	810600a <_printf_i+0x11a>
 8106020:	2b08      	cmp	r3, #8
 8106022:	d10b      	bne.n	810603c <_printf_i+0x14c>
 8106024:	6823      	ldr	r3, [r4, #0]
 8106026:	07de      	lsls	r6, r3, #31
 8106028:	d508      	bpl.n	810603c <_printf_i+0x14c>
 810602a:	6923      	ldr	r3, [r4, #16]
 810602c:	6861      	ldr	r1, [r4, #4]
 810602e:	4299      	cmp	r1, r3
 8106030:	bfde      	ittt	le
 8106032:	2330      	movle	r3, #48	; 0x30
 8106034:	f805 3c01 	strble.w	r3, [r5, #-1]
 8106038:	f105 35ff 	addle.w	r5, r5, #4294967295
 810603c:	1b52      	subs	r2, r2, r5
 810603e:	6122      	str	r2, [r4, #16]
 8106040:	f8cd a000 	str.w	sl, [sp]
 8106044:	464b      	mov	r3, r9
 8106046:	aa03      	add	r2, sp, #12
 8106048:	4621      	mov	r1, r4
 810604a:	4640      	mov	r0, r8
 810604c:	f7ff fee2 	bl	8105e14 <_printf_common>
 8106050:	3001      	adds	r0, #1
 8106052:	d14c      	bne.n	81060ee <_printf_i+0x1fe>
 8106054:	f04f 30ff 	mov.w	r0, #4294967295
 8106058:	b004      	add	sp, #16
 810605a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810605e:	4835      	ldr	r0, [pc, #212]	; (8106134 <_printf_i+0x244>)
 8106060:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8106064:	6829      	ldr	r1, [r5, #0]
 8106066:	6823      	ldr	r3, [r4, #0]
 8106068:	f851 6b04 	ldr.w	r6, [r1], #4
 810606c:	6029      	str	r1, [r5, #0]
 810606e:	061d      	lsls	r5, r3, #24
 8106070:	d514      	bpl.n	810609c <_printf_i+0x1ac>
 8106072:	07df      	lsls	r7, r3, #31
 8106074:	bf44      	itt	mi
 8106076:	f043 0320 	orrmi.w	r3, r3, #32
 810607a:	6023      	strmi	r3, [r4, #0]
 810607c:	b91e      	cbnz	r6, 8106086 <_printf_i+0x196>
 810607e:	6823      	ldr	r3, [r4, #0]
 8106080:	f023 0320 	bic.w	r3, r3, #32
 8106084:	6023      	str	r3, [r4, #0]
 8106086:	2310      	movs	r3, #16
 8106088:	e7b0      	b.n	8105fec <_printf_i+0xfc>
 810608a:	6823      	ldr	r3, [r4, #0]
 810608c:	f043 0320 	orr.w	r3, r3, #32
 8106090:	6023      	str	r3, [r4, #0]
 8106092:	2378      	movs	r3, #120	; 0x78
 8106094:	4828      	ldr	r0, [pc, #160]	; (8106138 <_printf_i+0x248>)
 8106096:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810609a:	e7e3      	b.n	8106064 <_printf_i+0x174>
 810609c:	0659      	lsls	r1, r3, #25
 810609e:	bf48      	it	mi
 81060a0:	b2b6      	uxthmi	r6, r6
 81060a2:	e7e6      	b.n	8106072 <_printf_i+0x182>
 81060a4:	4615      	mov	r5, r2
 81060a6:	e7bb      	b.n	8106020 <_printf_i+0x130>
 81060a8:	682b      	ldr	r3, [r5, #0]
 81060aa:	6826      	ldr	r6, [r4, #0]
 81060ac:	6961      	ldr	r1, [r4, #20]
 81060ae:	1d18      	adds	r0, r3, #4
 81060b0:	6028      	str	r0, [r5, #0]
 81060b2:	0635      	lsls	r5, r6, #24
 81060b4:	681b      	ldr	r3, [r3, #0]
 81060b6:	d501      	bpl.n	81060bc <_printf_i+0x1cc>
 81060b8:	6019      	str	r1, [r3, #0]
 81060ba:	e002      	b.n	81060c2 <_printf_i+0x1d2>
 81060bc:	0670      	lsls	r0, r6, #25
 81060be:	d5fb      	bpl.n	81060b8 <_printf_i+0x1c8>
 81060c0:	8019      	strh	r1, [r3, #0]
 81060c2:	2300      	movs	r3, #0
 81060c4:	6123      	str	r3, [r4, #16]
 81060c6:	4615      	mov	r5, r2
 81060c8:	e7ba      	b.n	8106040 <_printf_i+0x150>
 81060ca:	682b      	ldr	r3, [r5, #0]
 81060cc:	1d1a      	adds	r2, r3, #4
 81060ce:	602a      	str	r2, [r5, #0]
 81060d0:	681d      	ldr	r5, [r3, #0]
 81060d2:	6862      	ldr	r2, [r4, #4]
 81060d4:	2100      	movs	r1, #0
 81060d6:	4628      	mov	r0, r5
 81060d8:	f7fa f902 	bl	81002e0 <memchr>
 81060dc:	b108      	cbz	r0, 81060e2 <_printf_i+0x1f2>
 81060de:	1b40      	subs	r0, r0, r5
 81060e0:	6060      	str	r0, [r4, #4]
 81060e2:	6863      	ldr	r3, [r4, #4]
 81060e4:	6123      	str	r3, [r4, #16]
 81060e6:	2300      	movs	r3, #0
 81060e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81060ec:	e7a8      	b.n	8106040 <_printf_i+0x150>
 81060ee:	6923      	ldr	r3, [r4, #16]
 81060f0:	462a      	mov	r2, r5
 81060f2:	4649      	mov	r1, r9
 81060f4:	4640      	mov	r0, r8
 81060f6:	47d0      	blx	sl
 81060f8:	3001      	adds	r0, #1
 81060fa:	d0ab      	beq.n	8106054 <_printf_i+0x164>
 81060fc:	6823      	ldr	r3, [r4, #0]
 81060fe:	079b      	lsls	r3, r3, #30
 8106100:	d413      	bmi.n	810612a <_printf_i+0x23a>
 8106102:	68e0      	ldr	r0, [r4, #12]
 8106104:	9b03      	ldr	r3, [sp, #12]
 8106106:	4298      	cmp	r0, r3
 8106108:	bfb8      	it	lt
 810610a:	4618      	movlt	r0, r3
 810610c:	e7a4      	b.n	8106058 <_printf_i+0x168>
 810610e:	2301      	movs	r3, #1
 8106110:	4632      	mov	r2, r6
 8106112:	4649      	mov	r1, r9
 8106114:	4640      	mov	r0, r8
 8106116:	47d0      	blx	sl
 8106118:	3001      	adds	r0, #1
 810611a:	d09b      	beq.n	8106054 <_printf_i+0x164>
 810611c:	3501      	adds	r5, #1
 810611e:	68e3      	ldr	r3, [r4, #12]
 8106120:	9903      	ldr	r1, [sp, #12]
 8106122:	1a5b      	subs	r3, r3, r1
 8106124:	42ab      	cmp	r3, r5
 8106126:	dcf2      	bgt.n	810610e <_printf_i+0x21e>
 8106128:	e7eb      	b.n	8106102 <_printf_i+0x212>
 810612a:	2500      	movs	r5, #0
 810612c:	f104 0619 	add.w	r6, r4, #25
 8106130:	e7f5      	b.n	810611e <_printf_i+0x22e>
 8106132:	bf00      	nop
 8106134:	081064a5 	.word	0x081064a5
 8106138:	081064b6 	.word	0x081064b6

0810613c <memcpy>:
 810613c:	440a      	add	r2, r1
 810613e:	4291      	cmp	r1, r2
 8106140:	f100 33ff 	add.w	r3, r0, #4294967295
 8106144:	d100      	bne.n	8106148 <memcpy+0xc>
 8106146:	4770      	bx	lr
 8106148:	b510      	push	{r4, lr}
 810614a:	f811 4b01 	ldrb.w	r4, [r1], #1
 810614e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8106152:	4291      	cmp	r1, r2
 8106154:	d1f9      	bne.n	810614a <memcpy+0xe>
 8106156:	bd10      	pop	{r4, pc}

08106158 <memmove>:
 8106158:	4288      	cmp	r0, r1
 810615a:	b510      	push	{r4, lr}
 810615c:	eb01 0402 	add.w	r4, r1, r2
 8106160:	d902      	bls.n	8106168 <memmove+0x10>
 8106162:	4284      	cmp	r4, r0
 8106164:	4623      	mov	r3, r4
 8106166:	d807      	bhi.n	8106178 <memmove+0x20>
 8106168:	1e43      	subs	r3, r0, #1
 810616a:	42a1      	cmp	r1, r4
 810616c:	d008      	beq.n	8106180 <memmove+0x28>
 810616e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8106172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8106176:	e7f8      	b.n	810616a <memmove+0x12>
 8106178:	4402      	add	r2, r0
 810617a:	4601      	mov	r1, r0
 810617c:	428a      	cmp	r2, r1
 810617e:	d100      	bne.n	8106182 <memmove+0x2a>
 8106180:	bd10      	pop	{r4, pc}
 8106182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8106186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810618a:	e7f7      	b.n	810617c <memmove+0x24>

0810618c <_free_r>:
 810618c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810618e:	2900      	cmp	r1, #0
 8106190:	d044      	beq.n	810621c <_free_r+0x90>
 8106192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106196:	9001      	str	r0, [sp, #4]
 8106198:	2b00      	cmp	r3, #0
 810619a:	f1a1 0404 	sub.w	r4, r1, #4
 810619e:	bfb8      	it	lt
 81061a0:	18e4      	addlt	r4, r4, r3
 81061a2:	f000 f913 	bl	81063cc <__malloc_lock>
 81061a6:	4a1e      	ldr	r2, [pc, #120]	; (8106220 <_free_r+0x94>)
 81061a8:	9801      	ldr	r0, [sp, #4]
 81061aa:	6813      	ldr	r3, [r2, #0]
 81061ac:	b933      	cbnz	r3, 81061bc <_free_r+0x30>
 81061ae:	6063      	str	r3, [r4, #4]
 81061b0:	6014      	str	r4, [r2, #0]
 81061b2:	b003      	add	sp, #12
 81061b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81061b8:	f000 b90e 	b.w	81063d8 <__malloc_unlock>
 81061bc:	42a3      	cmp	r3, r4
 81061be:	d908      	bls.n	81061d2 <_free_r+0x46>
 81061c0:	6825      	ldr	r5, [r4, #0]
 81061c2:	1961      	adds	r1, r4, r5
 81061c4:	428b      	cmp	r3, r1
 81061c6:	bf01      	itttt	eq
 81061c8:	6819      	ldreq	r1, [r3, #0]
 81061ca:	685b      	ldreq	r3, [r3, #4]
 81061cc:	1949      	addeq	r1, r1, r5
 81061ce:	6021      	streq	r1, [r4, #0]
 81061d0:	e7ed      	b.n	81061ae <_free_r+0x22>
 81061d2:	461a      	mov	r2, r3
 81061d4:	685b      	ldr	r3, [r3, #4]
 81061d6:	b10b      	cbz	r3, 81061dc <_free_r+0x50>
 81061d8:	42a3      	cmp	r3, r4
 81061da:	d9fa      	bls.n	81061d2 <_free_r+0x46>
 81061dc:	6811      	ldr	r1, [r2, #0]
 81061de:	1855      	adds	r5, r2, r1
 81061e0:	42a5      	cmp	r5, r4
 81061e2:	d10b      	bne.n	81061fc <_free_r+0x70>
 81061e4:	6824      	ldr	r4, [r4, #0]
 81061e6:	4421      	add	r1, r4
 81061e8:	1854      	adds	r4, r2, r1
 81061ea:	42a3      	cmp	r3, r4
 81061ec:	6011      	str	r1, [r2, #0]
 81061ee:	d1e0      	bne.n	81061b2 <_free_r+0x26>
 81061f0:	681c      	ldr	r4, [r3, #0]
 81061f2:	685b      	ldr	r3, [r3, #4]
 81061f4:	6053      	str	r3, [r2, #4]
 81061f6:	4421      	add	r1, r4
 81061f8:	6011      	str	r1, [r2, #0]
 81061fa:	e7da      	b.n	81061b2 <_free_r+0x26>
 81061fc:	d902      	bls.n	8106204 <_free_r+0x78>
 81061fe:	230c      	movs	r3, #12
 8106200:	6003      	str	r3, [r0, #0]
 8106202:	e7d6      	b.n	81061b2 <_free_r+0x26>
 8106204:	6825      	ldr	r5, [r4, #0]
 8106206:	1961      	adds	r1, r4, r5
 8106208:	428b      	cmp	r3, r1
 810620a:	bf04      	itt	eq
 810620c:	6819      	ldreq	r1, [r3, #0]
 810620e:	685b      	ldreq	r3, [r3, #4]
 8106210:	6063      	str	r3, [r4, #4]
 8106212:	bf04      	itt	eq
 8106214:	1949      	addeq	r1, r1, r5
 8106216:	6021      	streq	r1, [r4, #0]
 8106218:	6054      	str	r4, [r2, #4]
 810621a:	e7ca      	b.n	81061b2 <_free_r+0x26>
 810621c:	b003      	add	sp, #12
 810621e:	bd30      	pop	{r4, r5, pc}
 8106220:	100001fc 	.word	0x100001fc

08106224 <sbrk_aligned>:
 8106224:	b570      	push	{r4, r5, r6, lr}
 8106226:	4e0e      	ldr	r6, [pc, #56]	; (8106260 <sbrk_aligned+0x3c>)
 8106228:	460c      	mov	r4, r1
 810622a:	6831      	ldr	r1, [r6, #0]
 810622c:	4605      	mov	r5, r0
 810622e:	b911      	cbnz	r1, 8106236 <sbrk_aligned+0x12>
 8106230:	f000 f8bc 	bl	81063ac <_sbrk_r>
 8106234:	6030      	str	r0, [r6, #0]
 8106236:	4621      	mov	r1, r4
 8106238:	4628      	mov	r0, r5
 810623a:	f000 f8b7 	bl	81063ac <_sbrk_r>
 810623e:	1c43      	adds	r3, r0, #1
 8106240:	d00a      	beq.n	8106258 <sbrk_aligned+0x34>
 8106242:	1cc4      	adds	r4, r0, #3
 8106244:	f024 0403 	bic.w	r4, r4, #3
 8106248:	42a0      	cmp	r0, r4
 810624a:	d007      	beq.n	810625c <sbrk_aligned+0x38>
 810624c:	1a21      	subs	r1, r4, r0
 810624e:	4628      	mov	r0, r5
 8106250:	f000 f8ac 	bl	81063ac <_sbrk_r>
 8106254:	3001      	adds	r0, #1
 8106256:	d101      	bne.n	810625c <sbrk_aligned+0x38>
 8106258:	f04f 34ff 	mov.w	r4, #4294967295
 810625c:	4620      	mov	r0, r4
 810625e:	bd70      	pop	{r4, r5, r6, pc}
 8106260:	10000200 	.word	0x10000200

08106264 <_malloc_r>:
 8106264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106268:	1ccd      	adds	r5, r1, #3
 810626a:	f025 0503 	bic.w	r5, r5, #3
 810626e:	3508      	adds	r5, #8
 8106270:	2d0c      	cmp	r5, #12
 8106272:	bf38      	it	cc
 8106274:	250c      	movcc	r5, #12
 8106276:	2d00      	cmp	r5, #0
 8106278:	4607      	mov	r7, r0
 810627a:	db01      	blt.n	8106280 <_malloc_r+0x1c>
 810627c:	42a9      	cmp	r1, r5
 810627e:	d905      	bls.n	810628c <_malloc_r+0x28>
 8106280:	230c      	movs	r3, #12
 8106282:	603b      	str	r3, [r7, #0]
 8106284:	2600      	movs	r6, #0
 8106286:	4630      	mov	r0, r6
 8106288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810628c:	4e2e      	ldr	r6, [pc, #184]	; (8106348 <_malloc_r+0xe4>)
 810628e:	f000 f89d 	bl	81063cc <__malloc_lock>
 8106292:	6833      	ldr	r3, [r6, #0]
 8106294:	461c      	mov	r4, r3
 8106296:	bb34      	cbnz	r4, 81062e6 <_malloc_r+0x82>
 8106298:	4629      	mov	r1, r5
 810629a:	4638      	mov	r0, r7
 810629c:	f7ff ffc2 	bl	8106224 <sbrk_aligned>
 81062a0:	1c43      	adds	r3, r0, #1
 81062a2:	4604      	mov	r4, r0
 81062a4:	d14d      	bne.n	8106342 <_malloc_r+0xde>
 81062a6:	6834      	ldr	r4, [r6, #0]
 81062a8:	4626      	mov	r6, r4
 81062aa:	2e00      	cmp	r6, #0
 81062ac:	d140      	bne.n	8106330 <_malloc_r+0xcc>
 81062ae:	6823      	ldr	r3, [r4, #0]
 81062b0:	4631      	mov	r1, r6
 81062b2:	4638      	mov	r0, r7
 81062b4:	eb04 0803 	add.w	r8, r4, r3
 81062b8:	f000 f878 	bl	81063ac <_sbrk_r>
 81062bc:	4580      	cmp	r8, r0
 81062be:	d13a      	bne.n	8106336 <_malloc_r+0xd2>
 81062c0:	6821      	ldr	r1, [r4, #0]
 81062c2:	3503      	adds	r5, #3
 81062c4:	1a6d      	subs	r5, r5, r1
 81062c6:	f025 0503 	bic.w	r5, r5, #3
 81062ca:	3508      	adds	r5, #8
 81062cc:	2d0c      	cmp	r5, #12
 81062ce:	bf38      	it	cc
 81062d0:	250c      	movcc	r5, #12
 81062d2:	4629      	mov	r1, r5
 81062d4:	4638      	mov	r0, r7
 81062d6:	f7ff ffa5 	bl	8106224 <sbrk_aligned>
 81062da:	3001      	adds	r0, #1
 81062dc:	d02b      	beq.n	8106336 <_malloc_r+0xd2>
 81062de:	6823      	ldr	r3, [r4, #0]
 81062e0:	442b      	add	r3, r5
 81062e2:	6023      	str	r3, [r4, #0]
 81062e4:	e00e      	b.n	8106304 <_malloc_r+0xa0>
 81062e6:	6822      	ldr	r2, [r4, #0]
 81062e8:	1b52      	subs	r2, r2, r5
 81062ea:	d41e      	bmi.n	810632a <_malloc_r+0xc6>
 81062ec:	2a0b      	cmp	r2, #11
 81062ee:	d916      	bls.n	810631e <_malloc_r+0xba>
 81062f0:	1961      	adds	r1, r4, r5
 81062f2:	42a3      	cmp	r3, r4
 81062f4:	6025      	str	r5, [r4, #0]
 81062f6:	bf18      	it	ne
 81062f8:	6059      	strne	r1, [r3, #4]
 81062fa:	6863      	ldr	r3, [r4, #4]
 81062fc:	bf08      	it	eq
 81062fe:	6031      	streq	r1, [r6, #0]
 8106300:	5162      	str	r2, [r4, r5]
 8106302:	604b      	str	r3, [r1, #4]
 8106304:	4638      	mov	r0, r7
 8106306:	f104 060b 	add.w	r6, r4, #11
 810630a:	f000 f865 	bl	81063d8 <__malloc_unlock>
 810630e:	f026 0607 	bic.w	r6, r6, #7
 8106312:	1d23      	adds	r3, r4, #4
 8106314:	1af2      	subs	r2, r6, r3
 8106316:	d0b6      	beq.n	8106286 <_malloc_r+0x22>
 8106318:	1b9b      	subs	r3, r3, r6
 810631a:	50a3      	str	r3, [r4, r2]
 810631c:	e7b3      	b.n	8106286 <_malloc_r+0x22>
 810631e:	6862      	ldr	r2, [r4, #4]
 8106320:	42a3      	cmp	r3, r4
 8106322:	bf0c      	ite	eq
 8106324:	6032      	streq	r2, [r6, #0]
 8106326:	605a      	strne	r2, [r3, #4]
 8106328:	e7ec      	b.n	8106304 <_malloc_r+0xa0>
 810632a:	4623      	mov	r3, r4
 810632c:	6864      	ldr	r4, [r4, #4]
 810632e:	e7b2      	b.n	8106296 <_malloc_r+0x32>
 8106330:	4634      	mov	r4, r6
 8106332:	6876      	ldr	r6, [r6, #4]
 8106334:	e7b9      	b.n	81062aa <_malloc_r+0x46>
 8106336:	230c      	movs	r3, #12
 8106338:	603b      	str	r3, [r7, #0]
 810633a:	4638      	mov	r0, r7
 810633c:	f000 f84c 	bl	81063d8 <__malloc_unlock>
 8106340:	e7a1      	b.n	8106286 <_malloc_r+0x22>
 8106342:	6025      	str	r5, [r4, #0]
 8106344:	e7de      	b.n	8106304 <_malloc_r+0xa0>
 8106346:	bf00      	nop
 8106348:	100001fc 	.word	0x100001fc

0810634c <_realloc_r>:
 810634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106350:	4680      	mov	r8, r0
 8106352:	4614      	mov	r4, r2
 8106354:	460e      	mov	r6, r1
 8106356:	b921      	cbnz	r1, 8106362 <_realloc_r+0x16>
 8106358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810635c:	4611      	mov	r1, r2
 810635e:	f7ff bf81 	b.w	8106264 <_malloc_r>
 8106362:	b92a      	cbnz	r2, 8106370 <_realloc_r+0x24>
 8106364:	f7ff ff12 	bl	810618c <_free_r>
 8106368:	4625      	mov	r5, r4
 810636a:	4628      	mov	r0, r5
 810636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106370:	f000 f838 	bl	81063e4 <_malloc_usable_size_r>
 8106374:	4284      	cmp	r4, r0
 8106376:	4607      	mov	r7, r0
 8106378:	d802      	bhi.n	8106380 <_realloc_r+0x34>
 810637a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810637e:	d812      	bhi.n	81063a6 <_realloc_r+0x5a>
 8106380:	4621      	mov	r1, r4
 8106382:	4640      	mov	r0, r8
 8106384:	f7ff ff6e 	bl	8106264 <_malloc_r>
 8106388:	4605      	mov	r5, r0
 810638a:	2800      	cmp	r0, #0
 810638c:	d0ed      	beq.n	810636a <_realloc_r+0x1e>
 810638e:	42bc      	cmp	r4, r7
 8106390:	4622      	mov	r2, r4
 8106392:	4631      	mov	r1, r6
 8106394:	bf28      	it	cs
 8106396:	463a      	movcs	r2, r7
 8106398:	f7ff fed0 	bl	810613c <memcpy>
 810639c:	4631      	mov	r1, r6
 810639e:	4640      	mov	r0, r8
 81063a0:	f7ff fef4 	bl	810618c <_free_r>
 81063a4:	e7e1      	b.n	810636a <_realloc_r+0x1e>
 81063a6:	4635      	mov	r5, r6
 81063a8:	e7df      	b.n	810636a <_realloc_r+0x1e>
	...

081063ac <_sbrk_r>:
 81063ac:	b538      	push	{r3, r4, r5, lr}
 81063ae:	4d06      	ldr	r5, [pc, #24]	; (81063c8 <_sbrk_r+0x1c>)
 81063b0:	2300      	movs	r3, #0
 81063b2:	4604      	mov	r4, r0
 81063b4:	4608      	mov	r0, r1
 81063b6:	602b      	str	r3, [r5, #0]
 81063b8:	f7fa fce0 	bl	8100d7c <_sbrk>
 81063bc:	1c43      	adds	r3, r0, #1
 81063be:	d102      	bne.n	81063c6 <_sbrk_r+0x1a>
 81063c0:	682b      	ldr	r3, [r5, #0]
 81063c2:	b103      	cbz	r3, 81063c6 <_sbrk_r+0x1a>
 81063c4:	6023      	str	r3, [r4, #0]
 81063c6:	bd38      	pop	{r3, r4, r5, pc}
 81063c8:	10000204 	.word	0x10000204

081063cc <__malloc_lock>:
 81063cc:	4801      	ldr	r0, [pc, #4]	; (81063d4 <__malloc_lock+0x8>)
 81063ce:	f000 b811 	b.w	81063f4 <__retarget_lock_acquire_recursive>
 81063d2:	bf00      	nop
 81063d4:	10000208 	.word	0x10000208

081063d8 <__malloc_unlock>:
 81063d8:	4801      	ldr	r0, [pc, #4]	; (81063e0 <__malloc_unlock+0x8>)
 81063da:	f000 b80c 	b.w	81063f6 <__retarget_lock_release_recursive>
 81063de:	bf00      	nop
 81063e0:	10000208 	.word	0x10000208

081063e4 <_malloc_usable_size_r>:
 81063e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81063e8:	1f18      	subs	r0, r3, #4
 81063ea:	2b00      	cmp	r3, #0
 81063ec:	bfbc      	itt	lt
 81063ee:	580b      	ldrlt	r3, [r1, r0]
 81063f0:	18c0      	addlt	r0, r0, r3
 81063f2:	4770      	bx	lr

081063f4 <__retarget_lock_acquire_recursive>:
 81063f4:	4770      	bx	lr

081063f6 <__retarget_lock_release_recursive>:
 81063f6:	4770      	bx	lr

081063f8 <_init>:
 81063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81063fa:	bf00      	nop
 81063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81063fe:	bc08      	pop	{r3}
 8106400:	469e      	mov	lr, r3
 8106402:	4770      	bx	lr

08106404 <_fini>:
 8106404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106406:	bf00      	nop
 8106408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810640a:	bc08      	pop	{r3}
 810640c:	469e      	mov	lr, r3
 810640e:	4770      	bx	lr
