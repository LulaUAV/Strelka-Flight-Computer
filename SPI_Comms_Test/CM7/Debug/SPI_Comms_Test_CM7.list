
SPI_Comms_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007774  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08007a0c  08007a0c  00017a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a50  08007a50  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007a50  08007a50  00017a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a58  08007a58  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a58  08007a58  00017a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08007a70  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08007ad0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000758  240000d0  08007b30  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000828  08007b30  00020828  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d630  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031e6  00000000  00000000  0003d72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001338  00000000  00000000  00040918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001210  00000000  00000000  00041c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b9e5  00000000  00000000  00042e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001add8  00000000  00000000  0007e845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018571e  00000000  00000000  0009961d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021ed3b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000051a8  00000000  00000000  0021ed8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080079f4 	.word	0x080079f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080079f4 	.word	0x080079f4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b48      	ldr	r3, [pc, #288]	; (8000838 <main+0x130>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	617a      	str	r2, [r7, #20]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fae9 	bl	8000d08 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fdff 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f88d 	bl	8000858 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <main+0x130>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a3c      	ldr	r2, [pc, #240]	; (8000838 <main+0x130>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <main+0x130>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f002 fa1b 	bl	8002b98 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f002 fa31 	bl	8002bcc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <main+0x130>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	617a      	str	r2, [r7, #20]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fabb 	bl	8000d08 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 fa29 	bl	8000be8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000796:	f000 f907 	bl	80009a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f9a7 	bl	8000aec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 f9f1 	bl	8000b84 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 80007a2:	f000 f94d 	bl	8000a40 <MX_SPI3_Init>
  MX_CRC_Init();
 80007a6:	f000 f8dd 	bl	8000964 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  hcrc.Instance = CRC;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <main+0x134>)
 80007ac:	4a24      	ldr	r2, [pc, #144]	; (8000840 <main+0x138>)
 80007ae:	601a      	str	r2, [r3, #0]
  HAL_CRC_Init(&hcrc);
 80007b0:	4822      	ldr	r0, [pc, #136]	; (800083c <main+0x134>)
 80007b2:	f000 ffa7 	bl	8001704 <HAL_CRC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ba:	4822      	ldr	r0, [pc, #136]	; (8000844 <main+0x13c>)
 80007bc:	f002 f9ba 	bl	8002b34 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f7      	beq.n	80007b6 <main+0xae>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2101      	movs	r1, #1
 80007ca:	481f      	ldr	r0, [pc, #124]	; (8000848 <main+0x140>)
 80007cc:	f002 f9ca 	bl	8002b64 <HAL_GPIO_WritePin>
		  // Send command over SPI
		  uint8_t data_packet[9];
		  data_packet[0] = 0x44;
 80007d0:	2344      	movs	r3, #68	; 0x44
 80007d2:	713b      	strb	r3, [r7, #4]
		  data_packet[1] = 128;
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	717b      	strb	r3, [r7, #5]
		  data_packet[2] = 64;
 80007d8:	2340      	movs	r3, #64	; 0x40
 80007da:	71bb      	strb	r3, [r7, #6]
		  data_packet[3] = 32;
 80007dc:	2320      	movs	r3, #32
 80007de:	71fb      	strb	r3, [r7, #7]
		  data_packet[4] = 250;
 80007e0:	23fa      	movs	r3, #250	; 0xfa
 80007e2:	723b      	strb	r3, [r7, #8]
		  uint32_t CRC_Calc = ~HAL_CRC_Calculate(&hcrc,(uint32_t *) data_packet, sizeof(data_packet)-4);
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2205      	movs	r2, #5
 80007e8:	4619      	mov	r1, r3
 80007ea:	4814      	ldr	r0, [pc, #80]	; (800083c <main+0x134>)
 80007ec:	f000 ffee 	bl	80017cc <HAL_CRC_Calculate>
 80007f0:	4603      	mov	r3, r0
 80007f2:	43db      	mvns	r3, r3
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]
		  memcpy(&data_packet[5], &CRC_Calc, sizeof(uint32_t));
 80007f8:	f8c7 3009 	str.w	r3, [r7, #9]

		  HAL_SPI_Transmit(&hspi3, (uint8_t*)data_packet, sizeof(data_packet), HAL_MAX_DELAY);
 80007fc:	1d39      	adds	r1, r7, #4
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	2209      	movs	r2, #9
 8000804:	4811      	ldr	r0, [pc, #68]	; (800084c <main+0x144>)
 8000806:	f004 ffcf 	bl	80057a8 <HAL_SPI_Transmit>
		  HAL_UART_Transmit(&huart3, "Sent data\r\n", sizeof("Sent data\r\n"), HAL_MAX_DELAY);
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	220c      	movs	r2, #12
 8000810:	490f      	ldr	r1, [pc, #60]	; (8000850 <main+0x148>)
 8000812:	4810      	ldr	r0, [pc, #64]	; (8000854 <main+0x14c>)
 8000814:	f005 fd01 	bl	800621a <HAL_UART_Transmit>
		  // Loop until pin is released
		  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8000818:	bf00      	nop
 800081a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081e:	4809      	ldr	r0, [pc, #36]	; (8000844 <main+0x13c>)
 8000820:	f002 f988 	bl	8002b34 <HAL_GPIO_ReadPin>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f7      	bne.n	800081a <main+0x112>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2101      	movs	r1, #1
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <main+0x140>)
 8000830:	f002 f998 	bl	8002b64 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000834:	e7bf      	b.n	80007b6 <main+0xae>
 8000836:	bf00      	nop
 8000838:	58024400 	.word	0x58024400
 800083c:	24000124 	.word	0x24000124
 8000840:	58024c00 	.word	0x58024c00
 8000844:	58020800 	.word	0x58020800
 8000848:	58020400 	.word	0x58020400
 800084c:	240001f8 	.word	0x240001f8
 8000850:	08007a0c 	.word	0x08007a0c
 8000854:	24000280 	.word	0x24000280

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09c      	sub	sp, #112	; 0x70
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000862:	224c      	movs	r2, #76	; 0x4c
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f007 f8bc 	bl	80079e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	2220      	movs	r2, #32
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f007 f8b6 	bl	80079e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000878:	2004      	movs	r0, #4
 800087a:	f002 fb03 	bl	8002e84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <SystemClock_Config+0x100>)
 8000884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000886:	4a34      	ldr	r2, [pc, #208]	; (8000958 <SystemClock_Config+0x100>)
 8000888:	f023 0301 	bic.w	r3, r3, #1
 800088c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <SystemClock_Config+0x100>)
 8000890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4b30      	ldr	r3, [pc, #192]	; (800095c <SystemClock_Config+0x104>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008a0:	4a2e      	ldr	r2, [pc, #184]	; (800095c <SystemClock_Config+0x104>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b2c      	ldr	r3, [pc, #176]	; (800095c <SystemClock_Config+0x104>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b4:	bf00      	nop
 80008b6:	4b29      	ldr	r3, [pc, #164]	; (800095c <SystemClock_Config+0x104>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c2:	d1f8      	bne.n	80008b6 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <SystemClock_Config+0x108>)
 80008c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008c8:	f023 0303 	bic.w	r3, r3, #3
 80008cc:	4a24      	ldr	r2, [pc, #144]	; (8000960 <SystemClock_Config+0x108>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e6:	2301      	movs	r3, #1
 80008e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 80008ea:	2312      	movs	r3, #18
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ee:	2302      	movs	r3, #2
 80008f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008fa:	230c      	movs	r3, #12
 80008fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80008fe:	2302      	movs	r3, #2
 8000900:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000902:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000906:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4618      	mov	r0, r3
 800090e:	f002 fb23 	bl	8002f58 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000918:	f000 f9f6 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	233f      	movs	r3, #63	; 0x3f
 800091e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2303      	movs	r3, #3
 8000922:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2101      	movs	r1, #1
 8000940:	4618      	mov	r0, r3
 8000942:	f002 ff37 	bl	80037b4 <HAL_RCC_ClockConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800094c:	f000 f9dc 	bl	8000d08 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3770      	adds	r7, #112	; 0x70
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58000400 	.word	0x58000400
 800095c:	58024800 	.word	0x58024800
 8000960:	58024400 	.word	0x58024400

08000964 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000968:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_CRC_Init+0x3c>)
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <MX_CRC_Init+0x40>)
 800096c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000970:	2200      	movs	r2, #0
 8000972:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000976:	2200      	movs	r2, #0
 8000978:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_CRC_Init+0x3c>)
 800097c:	2200      	movs	r2, #0
 800097e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_CRC_Init+0x3c>)
 8000988:	2201      	movs	r2, #1
 800098a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <MX_CRC_Init+0x3c>)
 800098e:	f000 feb9 	bl	8001704 <HAL_CRC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000998:	f000 f9b6 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000124 	.word	0x24000124
 80009a4:	58024c00 	.word	0x58024c00

080009a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_ETH_Init+0x80>)
 80009ae:	4a1f      	ldr	r2, [pc, #124]	; (8000a2c <MX_ETH_Init+0x84>)
 80009b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_ETH_Init+0x88>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_ETH_Init+0x88>)
 80009ba:	2280      	movs	r2, #128	; 0x80
 80009bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_ETH_Init+0x88>)
 80009c0:	22e1      	movs	r2, #225	; 0xe1
 80009c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_ETH_Init+0x88>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_ETH_Init+0x88>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_ETH_Init+0x88>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_ETH_Init+0x80>)
 80009d8:	4a15      	ldr	r2, [pc, #84]	; (8000a30 <MX_ETH_Init+0x88>)
 80009da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_ETH_Init+0x80>)
 80009de:	2201      	movs	r2, #1
 80009e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_ETH_Init+0x80>)
 80009e4:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <MX_ETH_Init+0x8c>)
 80009e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_ETH_Init+0x80>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <MX_ETH_Init+0x90>)
 80009ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_ETH_Init+0x80>)
 80009f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_ETH_Init+0x80>)
 80009f8:	f001 fac8 	bl	8001f8c <HAL_ETH_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a02:	f000 f981 	bl	8000d08 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a06:	2238      	movs	r2, #56	; 0x38
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_ETH_Init+0x94>)
 8000a0c:	f006 ffea 	bl	80079e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_ETH_Init+0x94>)
 8000a12:	2221      	movs	r2, #33	; 0x21
 8000a14:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_ETH_Init+0x94>)
 8000a18:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a1c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_ETH_Init+0x94>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000148 	.word	0x24000148
 8000a2c:	40028000 	.word	0x40028000
 8000a30:	2400081c 	.word	0x2400081c
 8000a34:	24000070 	.word	0x24000070
 8000a38:	24000010 	.word	0x24000010
 8000a3c:	240000ec 	.word	0x240000ec

08000a40 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a44:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a46:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <MX_SPI3_Init+0xa8>)
 8000a48:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a50:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000a70:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_SPI3_Init+0xa4>)
 8000ad2:	f004 fd63 	bl	800559c <HAL_SPI_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8000adc:	f000 f914 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	240001f8 	.word	0x240001f8
 8000ae8:	40003c00 	.word	0x40003c00

08000aec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000af0:	4b22      	ldr	r3, [pc, #136]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000af2:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <MX_USART3_UART_Init+0x94>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b16      	ldr	r3, [pc, #88]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b28:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b34:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b36:	f005 fb20 	bl	800617a <HAL_UART_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b40:	f000 f8e2 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	480d      	ldr	r0, [pc, #52]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b48:	f006 fb54 	bl	80071f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b52:	f000 f8d9 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b56:	2100      	movs	r1, #0
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b5a:	f006 fb89 	bl	8007270 <HAL_UARTEx_SetRxFifoThreshold>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b64:	f000 f8d0 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_USART3_UART_Init+0x90>)
 8000b6a:	f006 fb0a 	bl	8007182 <HAL_UARTEx_DisableFifoMode>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b74:	f000 f8c8 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24000280 	.word	0x24000280
 8000b80:	40004800 	.word	0x40004800

08000b84 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8a:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b90:	2209      	movs	r2, #9
 8000b92:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b96:	2202      	movs	r2, #2
 8000b98:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b9a:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bcc:	f002 f812 	bl	8002bf4 <HAL_PCD_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bd6:	f000 f897 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	24000310 	.word	0x24000310
 8000be4:	40080000 	.word	0x40080000

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a3d      	ldr	r2, [pc, #244]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1c:	4b37      	ldr	r3, [pc, #220]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a36      	ldr	r2, [pc, #216]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b33      	ldr	r3, [pc, #204]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b30      	ldr	r3, [pc, #192]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a2e      	ldr	r2, [pc, #184]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b2c      	ldr	r3, [pc, #176]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c68:	4b24      	ldr	r3, [pc, #144]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a1f      	ldr	r2, [pc, #124]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f003 0308 	and.w	r3, r3, #8
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_GPIO_Init+0x114>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4812      	ldr	r0, [pc, #72]	; (8000d00 <MX_GPIO_Init+0x118>)
 8000cb8:	f001 ff54 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_GPIO_Init+0x11c>)
 8000cd2:	f001 fd7f 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_GPIO_Init+0x118>)
 8000cee:	f001 fd71 	bl	80027d4 <HAL_GPIO_Init>

}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	; 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	58024400 	.word	0x58024400
 8000d00:	58020400 	.word	0x58020400
 8000d04:	58020800 	.word	0x58020800

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_MspInit+0x30>)
 8000d1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d20:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x30>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x30>)
 8000d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	58024400 	.word	0x58024400

08000d48 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <HAL_CRC_MspInit+0x3c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10e      	bne.n	8000d78 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_CRC_MspInit+0x40>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a09      	ldr	r2, [pc, #36]	; (8000d88 <HAL_CRC_MspInit+0x40>)
 8000d62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_CRC_MspInit+0x40>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	58024c00 	.word	0x58024c00
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08e      	sub	sp, #56	; 0x38
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a59      	ldr	r2, [pc, #356]	; (8000f10 <HAL_ETH_MspInit+0x184>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	f040 80ab 	bne.w	8000f06 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000db0:	4b58      	ldr	r3, [pc, #352]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db6:	4a57      	ldr	r2, [pc, #348]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc0:	4b54      	ldr	r3, [pc, #336]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000dc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dca:	623b      	str	r3, [r7, #32]
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dce:	4b51      	ldr	r3, [pc, #324]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000dd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd4:	4a4f      	ldr	r2, [pc, #316]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dda:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dde:	4b4d      	ldr	r3, [pc, #308]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000de0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dec:	4b49      	ldr	r3, [pc, #292]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000dee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df2:	4a48      	ldr	r2, [pc, #288]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dfc:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000dfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e10:	4a40      	ldr	r2, [pc, #256]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1a:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2e:	4a39      	ldr	r2, [pc, #228]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e38:	4b36      	ldr	r3, [pc, #216]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b33      	ldr	r3, [pc, #204]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e4e:	f043 0302 	orr.w	r3, r3, #2
 8000e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e64:	4b2b      	ldr	r3, [pc, #172]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6a:	4a2a      	ldr	r2, [pc, #168]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e74:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <HAL_ETH_MspInit+0x188>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e82:	2332      	movs	r3, #50	; 0x32
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e92:	230b      	movs	r3, #11
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481e      	ldr	r0, [pc, #120]	; (8000f18 <HAL_ETH_MspInit+0x18c>)
 8000e9e:	f001 fc99 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ea2:	2386      	movs	r3, #134	; 0x86
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb2:	230b      	movs	r3, #11
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4817      	ldr	r0, [pc, #92]	; (8000f1c <HAL_ETH_MspInit+0x190>)
 8000ebe:	f001 fc89 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed4:	230b      	movs	r3, #11
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4810      	ldr	r0, [pc, #64]	; (8000f20 <HAL_ETH_MspInit+0x194>)
 8000ee0:	f001 fc78 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ee4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef6:	230b      	movs	r3, #11
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <HAL_ETH_MspInit+0x198>)
 8000f02:	f001 fc67 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3738      	adds	r7, #56	; 0x38
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40028000 	.word	0x40028000
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020800 	.word	0x58020800
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	58020400 	.word	0x58020400
 8000f24:	58021800 	.word	0x58021800

08000f28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b0ba      	sub	sp, #232	; 0xe8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f40:	f107 0318 	add.w	r3, r7, #24
 8000f44:	22bc      	movs	r2, #188	; 0xbc
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f006 fd4b 	bl	80079e4 <memset>
  if(hspi->Instance==SPI3)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a4d      	ldr	r2, [pc, #308]	; (8001088 <HAL_SPI_MspInit+0x160>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	f040 8093 	bne.w	8001080 <HAL_SPI_MspInit+0x158>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f002 ffaf 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000f74:	f7ff fec8 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f78:	4b44      	ldr	r3, [pc, #272]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f7e:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000f80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f88:	4b40      	ldr	r3, [pc, #256]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b3d      	ldr	r3, [pc, #244]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9c:	4a3b      	ldr	r2, [pc, #236]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb4:	4b35      	ldr	r3, [pc, #212]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fba:	4a34      	ldr	r2, [pc, #208]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc4:	4b31      	ldr	r3, [pc, #196]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b2e      	ldr	r3, [pc, #184]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	4a2c      	ldr	r2, [pc, #176]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <HAL_SPI_MspInit+0x164>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI3_NSS
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001008:	2306      	movs	r3, #6
 800100a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	; (8001090 <HAL_SPI_MspInit+0x168>)
 8001016:	f001 fbdd 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800101a:	2304      	movs	r3, #4
 800101c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001032:	2307      	movs	r3, #7
 8001034:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001038:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800103c:	4619      	mov	r1, r3
 800103e:	4815      	ldr	r0, [pc, #84]	; (8001094 <HAL_SPI_MspInit+0x16c>)
 8001040:	f001 fbc8 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001044:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800105e:	2306      	movs	r3, #6
 8001060:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001068:	4619      	mov	r1, r3
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <HAL_SPI_MspInit+0x170>)
 800106c:	f001 fbb2 	bl	80027d4 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2033      	movs	r0, #51	; 0x33
 8001076:	f000 fb10 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800107a:	2033      	movs	r0, #51	; 0x33
 800107c:	f000 fb27 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001080:	bf00      	nop
 8001082:	37e8      	adds	r7, #232	; 0xe8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40003c00 	.word	0x40003c00
 800108c:	58024400 	.word	0x58024400
 8001090:	58020000 	.word	0x58020000
 8001094:	58020400 	.word	0x58020400
 8001098:	58020800 	.word	0x58020800

0800109c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b0b8      	sub	sp, #224	; 0xe0
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	22bc      	movs	r2, #188	; 0xbc
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f006 fc91 	bl	80079e4 <memset>
  if(huart->Instance==USART3)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <HAL_UART_MspInit+0xc0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d142      	bne.n	8001152 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010cc:	2302      	movs	r3, #2
 80010ce:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fef6 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010e6:	f7ff fe0f 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_UART_MspInit+0xc4>)
 80010ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f0:	4a1b      	ldr	r2, [pc, #108]	; (8001160 <HAL_UART_MspInit+0xc4>)
 80010f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_UART_MspInit+0xc4>)
 80010fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <HAL_UART_MspInit+0xc4>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_UART_MspInit+0xc4>)
 8001110:	f043 0308 	orr.w	r3, r3, #8
 8001114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_UART_MspInit+0xc4>)
 800111a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001126:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001140:	2307      	movs	r3, #7
 8001142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001146:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <HAL_UART_MspInit+0xc8>)
 800114e:	f001 fb41 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001152:	bf00      	nop
 8001154:	37e0      	adds	r7, #224	; 0xe0
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40004800 	.word	0x40004800
 8001160:	58024400 	.word	0x58024400
 8001164:	58020c00 	.word	0x58020c00

08001168 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0b8      	sub	sp, #224	; 0xe0
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	22bc      	movs	r2, #188	; 0xbc
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f006 fc2b 	bl	80079e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a37      	ldr	r2, [pc, #220]	; (8001270 <HAL_PCD_MspInit+0x108>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d166      	bne.n	8001266 <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001198:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800119c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80011a2:	2312      	movs	r3, #18
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80011aa:	2303      	movs	r3, #3
 80011ac:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011b6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80011b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011bc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80011be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fe7e 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80011d6:	f7ff fd97 	bl	8000d08 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011da:	f001 fead 	bl	8002f38 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <HAL_PCD_MspInit+0x10c>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	4a23      	ldr	r2, [pc, #140]	; (8001274 <HAL_PCD_MspInit+0x10c>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_PCD_MspInit+0x10c>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011fc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001200:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001216:	230a      	movs	r3, #10
 8001218:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001220:	4619      	mov	r1, r3
 8001222:	4815      	ldr	r0, [pc, #84]	; (8001278 <HAL_PCD_MspInit+0x110>)
 8001224:	f001 fad6 	bl	80027d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001240:	4619      	mov	r1, r3
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <HAL_PCD_MspInit+0x110>)
 8001244:	f001 fac6 	bl	80027d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_PCD_MspInit+0x10c>)
 800124a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_PCD_MspInit+0x10c>)
 8001250:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001254:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_PCD_MspInit+0x10c>)
 800125a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800125e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	37e0      	adds	r7, #224	; 0xe0
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40080000 	.word	0x40080000
 8001274:	58024400 	.word	0x58024400
 8001278:	58020000 	.word	0x58020000

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c8:	f000 f8a8 	bl	800141c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <SPI3_IRQHandler+0x10>)
 80012d6:	f004 fc59 	bl	8005b8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	240001f8 	.word	0x240001f8

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012e8:	f7ff f978 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ee:	490d      	ldr	r1, [pc, #52]	; (8001324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001304:	4c0a      	ldr	r4, [pc, #40]	; (8001330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001312:	f006 fb43 	bl	800799c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff f9f7 	bl	8000708 <main>
  bx  lr
 800131a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001320:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001324:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001328:	08007a60 	.word	0x08007a60
  ldr r2, =_sbss
 800132c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001330:	24000828 	.word	0x24000828

08001334 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC3_IRQHandler>
	...

08001338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133e:	2003      	movs	r0, #3
 8001340:	f000 f9a0 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001344:	f002 fbec 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8001348:	4602      	mov	r2, r0
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_Init+0x68>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	f003 030f 	and.w	r3, r3, #15
 8001354:	4913      	ldr	r1, [pc, #76]	; (80013a4 <HAL_Init+0x6c>)
 8001356:	5ccb      	ldrb	r3, [r1, r3]
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
 8001360:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_Init+0x68>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_Init+0x6c>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_Init+0x70>)
 800137a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_Init+0x74>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001382:	2000      	movs	r0, #0
 8001384:	f000 f814 	bl	80013b0 <HAL_InitTick>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e002      	b.n	8001398 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001392:	f7ff fcbf 	bl	8000d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	58024400 	.word	0x58024400
 80013a4:	08007a18 	.word	0x08007a18
 80013a8:	24000004 	.word	0x24000004
 80013ac:	24000000 	.word	0x24000000

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_InitTick+0x60>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e021      	b.n	8001408 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_InitTick+0x64>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_InitTick+0x60>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f985 	bl	80016ea <HAL_SYSTICK_Config>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00e      	b.n	8001408 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2b0f      	cmp	r3, #15
 80013ee:	d80a      	bhi.n	8001406 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f0:	2200      	movs	r2, #0
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f000 f94f 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013fc:	4a06      	ldr	r2, [pc, #24]	; (8001418 <HAL_InitTick+0x68>)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
 8001404:	e000      	b.n	8001408 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2400000c 	.word	0x2400000c
 8001414:	24000000 	.word	0x24000000
 8001418:	24000008 	.word	0x24000008

0800141c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001420:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x20>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_IncTick+0x24>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4413      	add	r3, r2
 800142c:	4a04      	ldr	r2, [pc, #16]	; (8001440 <HAL_IncTick+0x24>)
 800142e:	6013      	str	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2400000c 	.word	0x2400000c
 8001440:	24000824 	.word	0x24000824

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	24000824 	.word	0x24000824

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d005      	beq.n	8001482 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <HAL_Delay+0x44>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4413      	add	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001482:	bf00      	nop
 8001484:	f7ff ffde 	bl	8001444 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8f7      	bhi.n	8001484 <HAL_Delay+0x28>
  {
  }
}
 8001494:	bf00      	nop
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2400000c 	.word	0x2400000c

080014a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_GetREVID+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	0c1b      	lsrs	r3, r3, #16
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	5c001000 	.word	0x5c001000

080014bc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014cc:	4904      	ldr	r1, [pc, #16]	; (80014e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	58000400 	.word	0x58000400

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <__NVIC_SetPriorityGrouping+0x40>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 800150e:	4313      	orrs	r3, r2
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x40>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00
 8001528:	05fa0000 	.word	0x05fa0000

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff40 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff90 	bl	80015d8 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5f 	bl	8001584 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff33 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffa4 	bl	8001640 <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e054      	b.n	80017c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7f5b      	ldrb	r3, [r3, #29]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d105      	bne.n	800172c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fb0e 	bl	8000d48 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10c      	bne.n	8001754 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <HAL_CRC_Init+0xc4>)
 8001740:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0218 	bic.w	r2, r2, #24
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	e00c      	b.n	800176e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	461a      	mov	r2, r3
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f948 	bl	80019f4 <HAL_CRCEx_Polynomial_Set>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e028      	b.n	80017c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	795b      	ldrb	r3, [r3, #5]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d105      	bne.n	8001782 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f04f 32ff 	mov.w	r2, #4294967295
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	e004      	b.n	800178c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6912      	ldr	r2, [r2, #16]
 800178a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	695a      	ldr	r2, [r3, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	04c11db7 	.word	0x04c11db7

080017cc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2202      	movs	r2, #2
 80017e0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0201 	orr.w	r2, r2, #1
 80017f0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d006      	beq.n	8001808 <HAL_CRC_Calculate+0x3c>
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d829      	bhi.n	8001852 <HAL_CRC_Calculate+0x86>
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d019      	beq.n	8001836 <HAL_CRC_Calculate+0x6a>
 8001802:	2b02      	cmp	r3, #2
 8001804:	d01e      	beq.n	8001844 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8001806:	e024      	b.n	8001852 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00a      	b.n	8001824 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	441a      	add	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	d3f0      	bcc.n	800180e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	613b      	str	r3, [r7, #16]
      break;
 8001834:	e00e      	b.n	8001854 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f812 	bl	8001864 <CRC_Handle_8>
 8001840:	6138      	str	r0, [r7, #16]
      break;
 8001842:	e007      	b.n	8001854 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	68b9      	ldr	r1, [r7, #8]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f899 	bl	8001980 <CRC_Handle_16>
 800184e:	6138      	str	r0, [r7, #16]
      break;
 8001850:	e000      	b.n	8001854 <HAL_CRC_Calculate+0x88>
      break;
 8001852:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800185a:	693b      	ldr	r3, [r7, #16]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	e023      	b.n	80018be <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	4413      	add	r3, r2
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	3301      	adds	r3, #1
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	440b      	add	r3, r1
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001890:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	440b      	add	r3, r1
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80018a0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	3303      	adds	r3, #3
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	440b      	add	r3, r1
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80018b4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80018b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	3301      	adds	r3, #1
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d3d6      	bcc.n	8001876 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d04d      	beq.n	800196e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	4413      	add	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d116      	bne.n	8001924 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b21a      	sxth	r2, r3
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	3301      	adds	r3, #1
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	440b      	add	r3, r1
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21b      	sxth	r3, r3
 8001916:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	8b7a      	ldrh	r2, [r7, #26]
 8001922:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b03      	cmp	r3, #3
 800192c:	d11f      	bne.n	800196e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	4413      	add	r3, r2
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	b21a      	sxth	r2, r3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	3301      	adds	r3, #1
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	440b      	add	r3, r1
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b21b      	sxth	r3, r3
 800194a:	4313      	orrs	r3, r2
 800194c:	b21b      	sxth	r3, r3
 800194e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	8b7a      	ldrh	r2, [r7, #26]
 800195a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	4413      	add	r3, r2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3724      	adds	r7, #36	; 0x24
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e013      	b.n	80019ba <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	4413      	add	r3, r2
 800199a:	881b      	ldrh	r3, [r3, #0]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	440b      	add	r3, r1
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	4619      	mov	r1, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	085b      	lsrs	r3, r3, #1
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d3e6      	bcc.n	8001992 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	4413      	add	r3, r2
 80019dc:	881a      	ldrh	r2, [r3, #0]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a04:	231f      	movs	r3, #31
 8001a06:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a08:	bf00      	nop
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1e5a      	subs	r2, r3, #1
 8001a0e:	613a      	str	r2, [r7, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <HAL_CRCEx_Polynomial_Set+0x34>
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f003 031f 	and.w	r3, r3, #31
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b18      	cmp	r3, #24
 8001a2c:	d846      	bhi.n	8001abc <HAL_CRCEx_Polynomial_Set+0xc8>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001ac3 	.word	0x08001ac3
 8001a38:	08001abd 	.word	0x08001abd
 8001a3c:	08001abd 	.word	0x08001abd
 8001a40:	08001abd 	.word	0x08001abd
 8001a44:	08001abd 	.word	0x08001abd
 8001a48:	08001abd 	.word	0x08001abd
 8001a4c:	08001abd 	.word	0x08001abd
 8001a50:	08001abd 	.word	0x08001abd
 8001a54:	08001ab1 	.word	0x08001ab1
 8001a58:	08001abd 	.word	0x08001abd
 8001a5c:	08001abd 	.word	0x08001abd
 8001a60:	08001abd 	.word	0x08001abd
 8001a64:	08001abd 	.word	0x08001abd
 8001a68:	08001abd 	.word	0x08001abd
 8001a6c:	08001abd 	.word	0x08001abd
 8001a70:	08001abd 	.word	0x08001abd
 8001a74:	08001aa5 	.word	0x08001aa5
 8001a78:	08001abd 	.word	0x08001abd
 8001a7c:	08001abd 	.word	0x08001abd
 8001a80:	08001abd 	.word	0x08001abd
 8001a84:	08001abd 	.word	0x08001abd
 8001a88:	08001abd 	.word	0x08001abd
 8001a8c:	08001abd 	.word	0x08001abd
 8001a90:	08001abd 	.word	0x08001abd
 8001a94:	08001a99 	.word	0x08001a99
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d913      	bls.n	8001ac6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001aa2:	e010      	b.n	8001ac6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b07      	cmp	r3, #7
 8001aa8:	d90f      	bls.n	8001aca <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001aae:	e00c      	b.n	8001aca <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	d90b      	bls.n	8001ace <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001aba:	e008      	b.n	8001ace <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	75fb      	strb	r3, [r7, #23]
      break;
 8001ac0:	e006      	b.n	8001ad0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ac2:	bf00      	nop
 8001ac4:	e004      	b.n	8001ad0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ac6:	bf00      	nop
 8001ac8:	e002      	b.n	8001ad0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001aca:	bf00      	nop
 8001acc:	e000      	b.n	8001ad0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ace:	bf00      	nop
  }
  if (status == HAL_OK)
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10d      	bne.n	8001af2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 0118 	bic.w	r1, r3, #24
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e237      	b.n	8001f82 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d004      	beq.n	8001b28 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2280      	movs	r2, #128	; 0x80
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e22c      	b.n	8001f82 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ca0 <HAL_DMA_Abort_IT+0x1a0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d04a      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a5b      	ldr	r2, [pc, #364]	; (8001ca4 <HAL_DMA_Abort_IT+0x1a4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d045      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a59      	ldr	r2, [pc, #356]	; (8001ca8 <HAL_DMA_Abort_IT+0x1a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d040      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a58      	ldr	r2, [pc, #352]	; (8001cac <HAL_DMA_Abort_IT+0x1ac>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d03b      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_DMA_Abort_IT+0x1b0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d036      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a55      	ldr	r2, [pc, #340]	; (8001cb4 <HAL_DMA_Abort_IT+0x1b4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d031      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a53      	ldr	r2, [pc, #332]	; (8001cb8 <HAL_DMA_Abort_IT+0x1b8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d02c      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a52      	ldr	r2, [pc, #328]	; (8001cbc <HAL_DMA_Abort_IT+0x1bc>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d027      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a50      	ldr	r2, [pc, #320]	; (8001cc0 <HAL_DMA_Abort_IT+0x1c0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d022      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a4f      	ldr	r2, [pc, #316]	; (8001cc4 <HAL_DMA_Abort_IT+0x1c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d01d      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_DMA_Abort_IT+0x1c8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d018      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a4c      	ldr	r2, [pc, #304]	; (8001ccc <HAL_DMA_Abort_IT+0x1cc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d013      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_DMA_Abort_IT+0x1d0>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d00e      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <HAL_DMA_Abort_IT+0x1d4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d009      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a47      	ldr	r2, [pc, #284]	; (8001cd8 <HAL_DMA_Abort_IT+0x1d8>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d004      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0xc8>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <HAL_DMA_Abort_IT+0x1dc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d101      	bne.n	8001bcc <HAL_DMA_Abort_IT+0xcc>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_DMA_Abort_IT+0xce>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8086 	beq.w	8001ce0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a2f      	ldr	r2, [pc, #188]	; (8001ca0 <HAL_DMA_Abort_IT+0x1a0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d04a      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a2e      	ldr	r2, [pc, #184]	; (8001ca4 <HAL_DMA_Abort_IT+0x1a4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d045      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a2c      	ldr	r2, [pc, #176]	; (8001ca8 <HAL_DMA_Abort_IT+0x1a8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d040      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2b      	ldr	r2, [pc, #172]	; (8001cac <HAL_DMA_Abort_IT+0x1ac>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d03b      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <HAL_DMA_Abort_IT+0x1b0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d036      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a28      	ldr	r2, [pc, #160]	; (8001cb4 <HAL_DMA_Abort_IT+0x1b4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d031      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a26      	ldr	r2, [pc, #152]	; (8001cb8 <HAL_DMA_Abort_IT+0x1b8>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02c      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_DMA_Abort_IT+0x1bc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d027      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_DMA_Abort_IT+0x1c0>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d022      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <HAL_DMA_Abort_IT+0x1c4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d01d      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_DMA_Abort_IT+0x1c8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d018      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ccc <HAL_DMA_Abort_IT+0x1cc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_DMA_Abort_IT+0x1d0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00e      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <HAL_DMA_Abort_IT+0x1d4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <HAL_DMA_Abort_IT+0x1d8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x17c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_DMA_Abort_IT+0x1dc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d108      	bne.n	8001c8e <HAL_DMA_Abort_IT+0x18e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	e178      	b.n	8001f80 <HAL_DMA_Abort_IT+0x480>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0201 	bic.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e16f      	b.n	8001f80 <HAL_DMA_Abort_IT+0x480>
 8001ca0:	40020010 	.word	0x40020010
 8001ca4:	40020028 	.word	0x40020028
 8001ca8:	40020040 	.word	0x40020040
 8001cac:	40020058 	.word	0x40020058
 8001cb0:	40020070 	.word	0x40020070
 8001cb4:	40020088 	.word	0x40020088
 8001cb8:	400200a0 	.word	0x400200a0
 8001cbc:	400200b8 	.word	0x400200b8
 8001cc0:	40020410 	.word	0x40020410
 8001cc4:	40020428 	.word	0x40020428
 8001cc8:	40020440 	.word	0x40020440
 8001ccc:	40020458 	.word	0x40020458
 8001cd0:	40020470 	.word	0x40020470
 8001cd4:	40020488 	.word	0x40020488
 8001cd8:	400204a0 	.word	0x400204a0
 8001cdc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 020e 	bic.w	r2, r2, #14
 8001cee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a6c      	ldr	r2, [pc, #432]	; (8001ea8 <HAL_DMA_Abort_IT+0x3a8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d04a      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6b      	ldr	r2, [pc, #428]	; (8001eac <HAL_DMA_Abort_IT+0x3ac>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d045      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a69      	ldr	r2, [pc, #420]	; (8001eb0 <HAL_DMA_Abort_IT+0x3b0>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d040      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a68      	ldr	r2, [pc, #416]	; (8001eb4 <HAL_DMA_Abort_IT+0x3b4>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d03b      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a66      	ldr	r2, [pc, #408]	; (8001eb8 <HAL_DMA_Abort_IT+0x3b8>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d036      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a65      	ldr	r2, [pc, #404]	; (8001ebc <HAL_DMA_Abort_IT+0x3bc>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d031      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a63      	ldr	r2, [pc, #396]	; (8001ec0 <HAL_DMA_Abort_IT+0x3c0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02c      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a62      	ldr	r2, [pc, #392]	; (8001ec4 <HAL_DMA_Abort_IT+0x3c4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d027      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a60      	ldr	r2, [pc, #384]	; (8001ec8 <HAL_DMA_Abort_IT+0x3c8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d022      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5f      	ldr	r2, [pc, #380]	; (8001ecc <HAL_DMA_Abort_IT+0x3cc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d01d      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5d      	ldr	r2, [pc, #372]	; (8001ed0 <HAL_DMA_Abort_IT+0x3d0>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d018      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a5c      	ldr	r2, [pc, #368]	; (8001ed4 <HAL_DMA_Abort_IT+0x3d4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d013      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a5a      	ldr	r2, [pc, #360]	; (8001ed8 <HAL_DMA_Abort_IT+0x3d8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00e      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a59      	ldr	r2, [pc, #356]	; (8001edc <HAL_DMA_Abort_IT+0x3dc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d009      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a57      	ldr	r2, [pc, #348]	; (8001ee0 <HAL_DMA_Abort_IT+0x3e0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_DMA_Abort_IT+0x290>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a56      	ldr	r2, [pc, #344]	; (8001ee4 <HAL_DMA_Abort_IT+0x3e4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d108      	bne.n	8001da2 <HAL_DMA_Abort_IT+0x2a2>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e007      	b.n	8001db2 <HAL_DMA_Abort_IT+0x2b2>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a3c      	ldr	r2, [pc, #240]	; (8001ea8 <HAL_DMA_Abort_IT+0x3a8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d072      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3a      	ldr	r2, [pc, #232]	; (8001eac <HAL_DMA_Abort_IT+0x3ac>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d06d      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a39      	ldr	r2, [pc, #228]	; (8001eb0 <HAL_DMA_Abort_IT+0x3b0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d068      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a37      	ldr	r2, [pc, #220]	; (8001eb4 <HAL_DMA_Abort_IT+0x3b4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d063      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a36      	ldr	r2, [pc, #216]	; (8001eb8 <HAL_DMA_Abort_IT+0x3b8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d05e      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a34      	ldr	r2, [pc, #208]	; (8001ebc <HAL_DMA_Abort_IT+0x3bc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d059      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a33      	ldr	r2, [pc, #204]	; (8001ec0 <HAL_DMA_Abort_IT+0x3c0>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d054      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a31      	ldr	r2, [pc, #196]	; (8001ec4 <HAL_DMA_Abort_IT+0x3c4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d04f      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a30      	ldr	r2, [pc, #192]	; (8001ec8 <HAL_DMA_Abort_IT+0x3c8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d04a      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2e      	ldr	r2, [pc, #184]	; (8001ecc <HAL_DMA_Abort_IT+0x3cc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d045      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ed0 <HAL_DMA_Abort_IT+0x3d0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d040      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a2b      	ldr	r2, [pc, #172]	; (8001ed4 <HAL_DMA_Abort_IT+0x3d4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d03b      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <HAL_DMA_Abort_IT+0x3d8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d036      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a28      	ldr	r2, [pc, #160]	; (8001edc <HAL_DMA_Abort_IT+0x3dc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d031      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <HAL_DMA_Abort_IT+0x3e0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d02c      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <HAL_DMA_Abort_IT+0x3e4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d027      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a24      	ldr	r2, [pc, #144]	; (8001ee8 <HAL_DMA_Abort_IT+0x3e8>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d022      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_DMA_Abort_IT+0x3ec>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01d      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <HAL_DMA_Abort_IT+0x3f0>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d018      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <HAL_DMA_Abort_IT+0x3f4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <HAL_DMA_Abort_IT+0x3f8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00e      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <HAL_DMA_Abort_IT+0x3fc>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d009      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_DMA_Abort_IT+0x400>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_DMA_Abort_IT+0x3a2>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <HAL_DMA_Abort_IT+0x404>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d132      	bne.n	8001f08 <HAL_DMA_Abort_IT+0x408>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e031      	b.n	8001f0a <HAL_DMA_Abort_IT+0x40a>
 8001ea6:	bf00      	nop
 8001ea8:	40020010 	.word	0x40020010
 8001eac:	40020028 	.word	0x40020028
 8001eb0:	40020040 	.word	0x40020040
 8001eb4:	40020058 	.word	0x40020058
 8001eb8:	40020070 	.word	0x40020070
 8001ebc:	40020088 	.word	0x40020088
 8001ec0:	400200a0 	.word	0x400200a0
 8001ec4:	400200b8 	.word	0x400200b8
 8001ec8:	40020410 	.word	0x40020410
 8001ecc:	40020428 	.word	0x40020428
 8001ed0:	40020440 	.word	0x40020440
 8001ed4:	40020458 	.word	0x40020458
 8001ed8:	40020470 	.word	0x40020470
 8001edc:	40020488 	.word	0x40020488
 8001ee0:	400204a0 	.word	0x400204a0
 8001ee4:	400204b8 	.word	0x400204b8
 8001ee8:	58025408 	.word	0x58025408
 8001eec:	5802541c 	.word	0x5802541c
 8001ef0:	58025430 	.word	0x58025430
 8001ef4:	58025444 	.word	0x58025444
 8001ef8:	58025458 	.word	0x58025458
 8001efc:	5802546c 	.word	0x5802546c
 8001f00:	58025480 	.word	0x58025480
 8001f04:	58025494 	.word	0x58025494
 8001f08:	2300      	movs	r3, #0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d028      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f22:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f3c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f54:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f5e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop

08001f8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0cf      	b.n	800213e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d106      	bne.n	8001fb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2223      	movs	r2, #35	; 0x23
 8001fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7fe feeb 	bl	8000d8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb6:	4b64      	ldr	r3, [pc, #400]	; (8002148 <HAL_ETH_Init+0x1bc>)
 8001fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fbc:	4a62      	ldr	r2, [pc, #392]	; (8002148 <HAL_ETH_Init+0x1bc>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fc6:	4b60      	ldr	r3, [pc, #384]	; (8002148 <HAL_ETH_Init+0x1bc>)
 8001fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7a1b      	ldrb	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d103      	bne.n	8001fe4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001fdc:	2000      	movs	r0, #0
 8001fde:	f7ff fa6d 	bl	80014bc <HAL_SYSCFG_ETHInterfaceSelect>
 8001fe2:	e003      	b.n	8001fec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001fe4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001fe8:	f7ff fa68 	bl	80014bc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001fec:	4b57      	ldr	r3, [pc, #348]	; (800214c <HAL_ETH_Init+0x1c0>)
 8001fee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002006:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002008:	f7ff fa1c 	bl	8001444 <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800200e:	e011      	b.n	8002034 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002010:	f7ff fa18 	bl	8001444 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800201e:	d909      	bls.n	8002034 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2204      	movs	r2, #4
 8002024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	22e0      	movs	r2, #224	; 0xe0
 800202c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e084      	b.n	800213e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e4      	bne.n	8002010 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f886 	bl	8002158 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800204c:	f001 fee2 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8002050:	4603      	mov	r3, r0
 8002052:	4a3f      	ldr	r2, [pc, #252]	; (8002150 <HAL_ETH_Init+0x1c4>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	0c9a      	lsrs	r2, r3, #18
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3a01      	subs	r2, #1
 8002060:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 fa71 	bl	800254c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002072:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002076:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002082:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002086:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	22e0      	movs	r2, #224	; 0xe0
 80020a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e049      	b.n	800213e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80020b6:	4b27      	ldr	r3, [pc, #156]	; (8002154 <HAL_ETH_Init+0x1c8>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6952      	ldr	r2, [r2, #20]
 80020be:	0051      	lsls	r1, r2, #1
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 fad9 	bl	8002686 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 fb1f 	bl	8002718 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	3305      	adds	r3, #5
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	021a      	lsls	r2, r3, #8
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	3303      	adds	r3, #3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	061a      	lsls	r2, r3, #24
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	3302      	adds	r3, #2
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	3301      	adds	r3, #1
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002118:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002126:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002128:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2210      	movs	r2, #16
 8002138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	58024400 	.word	0x58024400
 800214c:	58000400 	.word	0x58000400
 8002150:	431bde83 	.word	0x431bde83
 8002154:	ffff8001 	.word	0xffff8001

08002158 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002168:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002170:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002172:	f001 fe4f 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8002176:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d908      	bls.n	8002192 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d804      	bhi.n	8002192 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e027      	b.n	80021e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	4a18      	ldr	r2, [pc, #96]	; (80021f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d908      	bls.n	80021ac <HAL_ETH_SetMDIOClockRange+0x54>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d204      	bcs.n	80021ac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	e01a      	b.n	80021e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	4a13      	ldr	r2, [pc, #76]	; (80021fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d303      	bcc.n	80021bc <HAL_ETH_SetMDIOClockRange+0x64>
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d911      	bls.n	80021e0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d908      	bls.n	80021d6 <HAL_ETH_SetMDIOClockRange+0x7e>
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_ETH_SetMDIOClockRange+0xac>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d804      	bhi.n	80021d6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e005      	b.n	80021e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e000      	b.n	80021e2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80021e0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80021ec:	bf00      	nop
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	01312cff 	.word	0x01312cff
 80021f8:	02160ebf 	.word	0x02160ebf
 80021fc:	03938700 	.word	0x03938700
 8002200:	05f5e0ff 	.word	0x05f5e0ff
 8002204:	08f0d17f 	.word	0x08f0d17f

08002208 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800221a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	791b      	ldrb	r3, [r3, #4]
 8002220:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	7b1b      	ldrb	r3, [r3, #12]
 8002228:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800222a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	7b5b      	ldrb	r3, [r3, #13]
 8002230:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002232:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7b9b      	ldrb	r3, [r3, #14]
 8002238:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800223a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	7bdb      	ldrb	r3, [r3, #15]
 8002240:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002242:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	7c12      	ldrb	r2, [r2, #16]
 8002248:	2a00      	cmp	r2, #0
 800224a:	d102      	bne.n	8002252 <ETH_SetMACConfig+0x4a>
 800224c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002250:	e000      	b.n	8002254 <ETH_SetMACConfig+0x4c>
 8002252:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002254:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	7c52      	ldrb	r2, [r2, #17]
 800225a:	2a00      	cmp	r2, #0
 800225c:	d102      	bne.n	8002264 <ETH_SetMACConfig+0x5c>
 800225e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002262:	e000      	b.n	8002266 <ETH_SetMACConfig+0x5e>
 8002264:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002266:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	7c9b      	ldrb	r3, [r3, #18]
 800226c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800226e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002274:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800227a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	7f1b      	ldrb	r3, [r3, #28]
 8002280:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002282:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	7f5b      	ldrb	r3, [r3, #29]
 8002288:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800228a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	7f92      	ldrb	r2, [r2, #30]
 8002290:	2a00      	cmp	r2, #0
 8002292:	d102      	bne.n	800229a <ETH_SetMACConfig+0x92>
 8002294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002298:	e000      	b.n	800229c <ETH_SetMACConfig+0x94>
 800229a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800229c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	7fdb      	ldrb	r3, [r3, #31]
 80022a2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022ac:	2a00      	cmp	r2, #0
 80022ae:	d102      	bne.n	80022b6 <ETH_SetMACConfig+0xae>
 80022b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b4:	e000      	b.n	80022b8 <ETH_SetMACConfig+0xb0>
 80022b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022b8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022c6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80022c8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b56      	ldr	r3, [pc, #344]	; (8002434 <ETH_SetMACConfig+0x22c>)
 80022da:	4013      	ands	r3, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	68f9      	ldr	r1, [r7, #12]
 80022e2:	430b      	orrs	r3, r1
 80022e4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022f2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022fc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80022fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002306:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002308:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002310:	2a00      	cmp	r2, #0
 8002312:	d102      	bne.n	800231a <ETH_SetMACConfig+0x112>
 8002314:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002318:	e000      	b.n	800231c <ETH_SetMACConfig+0x114>
 800231a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800231c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	4b42      	ldr	r3, [pc, #264]	; (8002438 <ETH_SetMACConfig+0x230>)
 800232e:	4013      	ands	r3, r2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	68f9      	ldr	r1, [r7, #12]
 8002336:	430b      	orrs	r3, r1
 8002338:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002340:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	4b3a      	ldr	r3, [pc, #232]	; (800243c <ETH_SetMACConfig+0x234>)
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	430b      	orrs	r3, r1
 800235c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002364:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800236a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002372:	2a00      	cmp	r2, #0
 8002374:	d101      	bne.n	800237a <ETH_SetMACConfig+0x172>
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	e000      	b.n	800237c <ETH_SetMACConfig+0x174>
 800237a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800237c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002382:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800238e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002392:	4013      	ands	r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	68f9      	ldr	r1, [r7, #12]
 800239a:	430b      	orrs	r3, r1
 800239c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80023a4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023ac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	f023 0103 	bic.w	r1, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023d2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	d101      	bne.n	80023f6 <ETH_SetMACConfig+0x1ee>
 80023f2:	2240      	movs	r2, #64	; 0x40
 80023f4:	e000      	b.n	80023f8 <ETH_SetMACConfig+0x1f0>
 80023f6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80023f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002400:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002402:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800240a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800240c:	4313      	orrs	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002418:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	430a      	orrs	r2, r1
 8002424:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	00048083 	.word	0x00048083
 8002438:	c0f88000 	.word	0xc0f88000
 800243c:	fffffef0 	.word	0xfffffef0

08002440 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b38      	ldr	r3, [pc, #224]	; (8002538 <ETH_SetDMAConfig+0xf8>)
 8002456:	4013      	ands	r3, r2
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	6811      	ldr	r1, [r2, #0]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002466:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	791b      	ldrb	r3, [r3, #4]
 800246c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002472:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	7b1b      	ldrb	r3, [r3, #12]
 8002478:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800247a:	4313      	orrs	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <ETH_SetDMAConfig+0xfc>)
 800248a:	4013      	ands	r3, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	68f9      	ldr	r1, [r7, #12]
 8002492:	430b      	orrs	r3, r1
 8002494:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002498:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	7b5b      	ldrb	r3, [r3, #13]
 800249e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <ETH_SetDMAConfig+0x100>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	68f9      	ldr	r1, [r7, #12]
 80024be:	430b      	orrs	r3, r1
 80024c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	7d1b      	ldrb	r3, [r3, #20]
 80024d0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	7f5b      	ldrb	r3, [r3, #29]
 80024d8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80024ea:	4b16      	ldr	r3, [pc, #88]	; (8002544 <ETH_SetDMAConfig+0x104>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024fa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	7f1b      	ldrb	r3, [r3, #28]
 8002502:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002508:	4313      	orrs	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002514:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <ETH_SetDMAConfig+0x108>)
 800251a:	4013      	ands	r3, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	68f9      	ldr	r1, [r7, #12]
 8002522:	430b      	orrs	r3, r1
 8002524:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002528:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	ffff87fd 	.word	0xffff87fd
 800253c:	ffff2ffe 	.word	0xffff2ffe
 8002540:	fffec000 	.word	0xfffec000
 8002544:	ffc0efef 	.word	0xffc0efef
 8002548:	7fc0ffff 	.word	0x7fc0ffff

0800254c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0a4      	sub	sp, #144	; 0x90
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002554:	2301      	movs	r3, #1
 8002556:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800255a:	2300      	movs	r3, #0
 800255c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002570:	2301      	movs	r3, #1
 8002572:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800257c:	2300      	movs	r3, #0
 800257e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002582:	2301      	movs	r3, #1
 8002584:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002594:	2300      	movs	r3, #0
 8002596:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80025a4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80025a8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025b0:	2300      	movs	r3, #0
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80025b4:	2301      	movs	r3, #1
 80025b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025c6:	2300      	movs	r3, #0
 80025c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80025ce:	2300      	movs	r3, #0
 80025d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025e4:	2320      	movs	r3, #32
 80025e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80025f6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002600:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002620:	2301      	movs	r3, #1
 8002622:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002626:	2300      	movs	r3, #0
 8002628:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800262a:	2301      	movs	r3, #1
 800262c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002634:	4619      	mov	r1, r3
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fde6 	bl	8002208 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800263c:	2301      	movs	r3, #1
 800263e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002640:	2301      	movs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002656:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800265a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002660:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002664:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800266c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	4619      	mov	r1, r3
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff fee1 	bl	8002440 <ETH_SetDMAConfig>
}
 800267e:	bf00      	nop
 8002680:	3790      	adds	r7, #144	; 0x90
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002686:	b480      	push	{r7}
 8002688:	b085      	sub	sp, #20
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e01d      	b.n	80026d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	440b      	add	r3, r1
 80026a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2200      	movs	r2, #0
 80026b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	3206      	adds	r2, #6
 80026c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3301      	adds	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d9de      	bls.n	8002694 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026e4:	461a      	mov	r2, r3
 80026e6:	2303      	movs	r3, #3
 80026e8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002708:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002720:	2300      	movs	r3, #0
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e023      	b.n	800276e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6919      	ldr	r1, [r3, #16]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2200      	movs	r2, #0
 800275a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	3212      	adds	r2, #18
 8002764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d9d8      	bls.n	8002726 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800279a:	461a      	mov	r2, r3
 800279c:	2303      	movs	r3, #3
 800279e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027e2:	4b89      	ldr	r3, [pc, #548]	; (8002a08 <HAL_GPIO_Init+0x234>)
 80027e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027e6:	e194      	b.n	8002b12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8186 	beq.w	8002b0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d005      	beq.n	8002818 <HAL_GPIO_Init+0x44>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d130      	bne.n	800287a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800284e:	2201      	movs	r2, #1
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f003 0201 	and.w	r2, r3, #1
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4313      	orrs	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b03      	cmp	r3, #3
 8002884:	d017      	beq.n	80028b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d123      	bne.n	800290a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	08da      	lsrs	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3208      	adds	r2, #8
 80028ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	08da      	lsrs	r2, r3, #3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3208      	adds	r2, #8
 8002904:	69b9      	ldr	r1, [r7, #24]
 8002906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0203 	and.w	r2, r3, #3
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 80e0 	beq.w	8002b0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294c:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_GPIO_Init+0x238>)
 800294e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002952:	4a2e      	ldr	r2, [pc, #184]	; (8002a0c <HAL_GPIO_Init+0x238>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800295c:	4b2b      	ldr	r3, [pc, #172]	; (8002a0c <HAL_GPIO_Init+0x238>)
 800295e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a29      	ldr	r2, [pc, #164]	; (8002a10 <HAL_GPIO_Init+0x23c>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <HAL_GPIO_Init+0x240>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d052      	beq.n	8002a3c <HAL_GPIO_Init+0x268>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <HAL_GPIO_Init+0x244>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d031      	beq.n	8002a02 <HAL_GPIO_Init+0x22e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <HAL_GPIO_Init+0x248>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d02b      	beq.n	80029fe <HAL_GPIO_Init+0x22a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_GPIO_Init+0x24c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d025      	beq.n	80029fa <HAL_GPIO_Init+0x226>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_GPIO_Init+0x250>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01f      	beq.n	80029f6 <HAL_GPIO_Init+0x222>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_GPIO_Init+0x254>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d019      	beq.n	80029f2 <HAL_GPIO_Init+0x21e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <HAL_GPIO_Init+0x258>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d013      	beq.n	80029ee <HAL_GPIO_Init+0x21a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_GPIO_Init+0x25c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00d      	beq.n	80029ea <HAL_GPIO_Init+0x216>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a18      	ldr	r2, [pc, #96]	; (8002a34 <HAL_GPIO_Init+0x260>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <HAL_GPIO_Init+0x212>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a17      	ldr	r2, [pc, #92]	; (8002a38 <HAL_GPIO_Init+0x264>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d101      	bne.n	80029e2 <HAL_GPIO_Init+0x20e>
 80029de:	2309      	movs	r3, #9
 80029e0:	e02d      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 80029e2:	230a      	movs	r3, #10
 80029e4:	e02b      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 80029e6:	2308      	movs	r3, #8
 80029e8:	e029      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 80029ea:	2307      	movs	r3, #7
 80029ec:	e027      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 80029ee:	2306      	movs	r3, #6
 80029f0:	e025      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 80029f2:	2305      	movs	r3, #5
 80029f4:	e023      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 80029f6:	2304      	movs	r3, #4
 80029f8:	e021      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 80029fa:	2303      	movs	r3, #3
 80029fc:	e01f      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e01d      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e01b      	b.n	8002a3e <HAL_GPIO_Init+0x26a>
 8002a06:	bf00      	nop
 8002a08:	58000080 	.word	0x58000080
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	58000400 	.word	0x58000400
 8002a14:	58020000 	.word	0x58020000
 8002a18:	58020400 	.word	0x58020400
 8002a1c:	58020800 	.word	0x58020800
 8002a20:	58020c00 	.word	0x58020c00
 8002a24:	58021000 	.word	0x58021000
 8002a28:	58021400 	.word	0x58021400
 8002a2c:	58021800 	.word	0x58021800
 8002a30:	58021c00 	.word	0x58021c00
 8002a34:	58022000 	.word	0x58022000
 8002a38:	58022400 	.word	0x58022400
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	69fa      	ldr	r2, [r7, #28]
 8002a40:	f002 0203 	and.w	r2, r2, #3
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	4093      	lsls	r3, r2
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4e:	4938      	ldr	r1, [pc, #224]	; (8002b30 <HAL_GPIO_Init+0x35c>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f47f ae63 	bne.w	80027e8 <HAL_GPIO_Init+0x14>
  }
}
 8002b22:	bf00      	nop
 8002b24:	bf00      	nop
 8002b26:	3724      	adds	r7, #36	; 0x24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	58000400 	.word	0x58000400

08002b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691a      	ldr	r2, [r3, #16]
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e001      	b.n	8002b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002ba0:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <HAL_HSEM_FastTake+0x2c>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3320      	adds	r3, #32
 8002ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002baa:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_HSEM_FastTake+0x30>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d101      	bne.n	8002bb4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	e000      	b.n	8002bb6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	58026400 	.word	0x58026400
 8002bc8:	80000300 	.word	0x80000300

08002bcc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002bd6:	4906      	ldr	r1, [pc, #24]	; (8002bf0 <HAL_HSEM_Release+0x24>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	58026400 	.word	0x58026400

08002bf4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf6:	b08f      	sub	sp, #60	; 0x3c
 8002bf8:	af0a      	add	r7, sp, #40	; 0x28
 8002bfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e116      	b.n	8002e34 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe faa1 	bl	8001168 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2203      	movs	r2, #3
 8002c2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f004 fc0d 	bl	8007464 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	687e      	ldr	r6, [r7, #4]
 8002c52:	466d      	mov	r5, sp
 8002c54:	f106 0410 	add.w	r4, r6, #16
 8002c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c64:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c68:	1d33      	adds	r3, r6, #4
 8002c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6c:	6838      	ldr	r0, [r7, #0]
 8002c6e:	f004 fb8b 	bl	8007388 <USB_CoreInit>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0d7      	b.n	8002e34 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2100      	movs	r1, #0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 fbfb 	bl	8007486 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e04a      	b.n	8002d2c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	333d      	adds	r3, #61	; 0x3d
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	333c      	adds	r3, #60	; 0x3c
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cbe:	7bfa      	ldrb	r2, [r7, #15]
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	b298      	uxth	r0, r3
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3344      	adds	r3, #68	; 0x44
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3340      	adds	r3, #64	; 0x40
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3348      	adds	r3, #72	; 0x48
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	334c      	adds	r3, #76	; 0x4c
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3354      	adds	r3, #84	; 0x54
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d3af      	bcc.n	8002c96 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e044      	b.n	8002dc6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4413      	add	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3b5      	bcc.n	8002d3c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	687e      	ldr	r6, [r7, #4]
 8002dd8:	466d      	mov	r5, sp
 8002dda:	f106 0410 	add.w	r4, r6, #16
 8002dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dea:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dee:	1d33      	adds	r3, r6, #4
 8002df0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df2:	6838      	ldr	r0, [r7, #0]
 8002df4:	f004 fb94 	bl	8007520 <USB_DevInit>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d005      	beq.n	8002e0a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e014      	b.n	8002e34 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f80a 	bl	8002e3c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f004 fd52 	bl	80078d6 <USB_DevDisconnect>

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_PCDEx_ActivateLPM+0x44>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	10000003 	.word	0x10000003

08002e84 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002e8c:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	2b06      	cmp	r3, #6
 8002e96:	d00a      	beq.n	8002eae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e98:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e040      	b.n	8002f2c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e03e      	b.n	8002f2c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002eae:	4b21      	ldr	r3, [pc, #132]	; (8002f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002eb6:	491f      	ldr	r1, [pc, #124]	; (8002f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ebe:	f7fe fac1 	bl	8001444 <HAL_GetTick>
 8002ec2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ec4:	e009      	b.n	8002eda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ec6:	f7fe fabd 	bl	8001444 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ed4:	d901      	bls.n	8002eda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e028      	b.n	8002f2c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee6:	d1ee      	bne.n	8002ec6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b1e      	cmp	r3, #30
 8002eec:	d008      	beq.n	8002f00 <HAL_PWREx_ConfigSupply+0x7c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ef2:	d005      	beq.n	8002f00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b1d      	cmp	r3, #29
 8002ef8:	d002      	beq.n	8002f00 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b2d      	cmp	r3, #45	; 0x2d
 8002efe:	d114      	bne.n	8002f2a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f00:	f7fe faa0 	bl	8001444 <HAL_GetTick>
 8002f04:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f06:	e009      	b.n	8002f1c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f08:	f7fe fa9c 	bl	8001444 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f16:	d901      	bls.n	8002f1c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e007      	b.n	8002f2c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d1ee      	bne.n	8002f08 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	58024800 	.word	0x58024800

08002f38 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a04      	ldr	r2, [pc, #16]	; (8002f54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	60d3      	str	r3, [r2, #12]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	58024800 	.word	0x58024800

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	; 0x30
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f000 bc1d 	b.w	80037a6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8087 	beq.w	8003088 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7a:	4b99      	ldr	r3, [pc, #612]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f84:	4b96      	ldr	r3, [pc, #600]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	2b10      	cmp	r3, #16
 8002f8e:	d007      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x48>
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	2b18      	cmp	r3, #24
 8002f94:	d110      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x60>
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa0:	4b8f      	ldr	r3, [pc, #572]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d06c      	beq.n	8003086 <HAL_RCC_OscConfig+0x12e>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d168      	bne.n	8003086 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e3f6      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc0:	d106      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x78>
 8002fc2:	4b87      	ldr	r3, [pc, #540]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a86      	ldr	r2, [pc, #536]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e02e      	b.n	800302e <HAL_RCC_OscConfig+0xd6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10c      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x9a>
 8002fd8:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a80      	ldr	r2, [pc, #512]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b7e      	ldr	r3, [pc, #504]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a7d      	ldr	r2, [pc, #500]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e01d      	b.n	800302e <HAL_RCC_OscConfig+0xd6>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ffa:	d10c      	bne.n	8003016 <HAL_RCC_OscConfig+0xbe>
 8002ffc:	4b78      	ldr	r3, [pc, #480]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a77      	ldr	r2, [pc, #476]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a74      	ldr	r2, [pc, #464]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 800300e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e00b      	b.n	800302e <HAL_RCC_OscConfig+0xd6>
 8003016:	4b72      	ldr	r3, [pc, #456]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a71      	ldr	r2, [pc, #452]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 800301c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	4b6f      	ldr	r3, [pc, #444]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a6e      	ldr	r2, [pc, #440]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d013      	beq.n	800305e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003036:	f7fe fa05 	bl	8001444 <HAL_GetTick>
 800303a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800303e:	f7fe fa01 	bl	8001444 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b64      	cmp	r3, #100	; 0x64
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e3aa      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003050:	4b63      	ldr	r3, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0xe6>
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305e:	f7fe f9f1 	bl	8001444 <HAL_GetTick>
 8003062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003066:	f7fe f9ed 	bl	8001444 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b64      	cmp	r3, #100	; 0x64
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e396      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003078:	4b59      	ldr	r3, [pc, #356]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f0      	bne.n	8003066 <HAL_RCC_OscConfig+0x10e>
 8003084:	e000      	b.n	8003088 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003086:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80cb 	beq.w	800322c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003096:	4b52      	ldr	r3, [pc, #328]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800309e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030a0:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_RCC_OscConfig+0x164>
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2b18      	cmp	r3, #24
 80030b0:	d156      	bne.n	8003160 <HAL_RCC_OscConfig+0x208>
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d151      	bne.n	8003160 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030bc:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_OscConfig+0x17c>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e368      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030d4:	4b42      	ldr	r3, [pc, #264]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f023 0219 	bic.w	r2, r3, #25
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	493f      	ldr	r1, [pc, #252]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030e6:	f7fe f9ad 	bl	8001444 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fe f9a9 	bl	8001444 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e352      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003100:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0f0      	beq.n	80030ee <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	f7fe f9ca 	bl	80014a4 <HAL_GetREVID>
 8003110:	4603      	mov	r3, r0
 8003112:	f241 0203 	movw	r2, #4099	; 0x1003
 8003116:	4293      	cmp	r3, r2
 8003118:	d817      	bhi.n	800314a <HAL_RCC_OscConfig+0x1f2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b40      	cmp	r3, #64	; 0x40
 8003120:	d108      	bne.n	8003134 <HAL_RCC_OscConfig+0x1dc>
 8003122:	4b2f      	ldr	r3, [pc, #188]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800312a:	4a2d      	ldr	r2, [pc, #180]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 800312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003130:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003132:	e07b      	b.n	800322c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	031b      	lsls	r3, r3, #12
 8003142:	4927      	ldr	r1, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003148:	e070      	b.n	800322c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314a:	4b25      	ldr	r3, [pc, #148]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	061b      	lsls	r3, r3, #24
 8003158:	4921      	ldr	r1, [pc, #132]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 800315a:	4313      	orrs	r3, r2
 800315c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800315e:	e065      	b.n	800322c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d048      	beq.n	80031fa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003168:	4b1d      	ldr	r3, [pc, #116]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f023 0219 	bic.w	r2, r3, #25
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	491a      	ldr	r1, [pc, #104]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317a:	f7fe f963 	bl	8001444 <HAL_GetTick>
 800317e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003182:	f7fe f95f 	bl	8001444 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e308      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a0:	f7fe f980 	bl	80014a4 <HAL_GetREVID>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d81a      	bhi.n	80031e4 <HAL_RCC_OscConfig+0x28c>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b40      	cmp	r3, #64	; 0x40
 80031b4:	d108      	bne.n	80031c8 <HAL_RCC_OscConfig+0x270>
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031be:	4a08      	ldr	r2, [pc, #32]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 80031c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c4:	6053      	str	r3, [r2, #4]
 80031c6:	e031      	b.n	800322c <HAL_RCC_OscConfig+0x2d4>
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	031b      	lsls	r3, r3, #12
 80031d6:	4902      	ldr	r1, [pc, #8]	; (80031e0 <HAL_RCC_OscConfig+0x288>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
 80031dc:	e026      	b.n	800322c <HAL_RCC_OscConfig+0x2d4>
 80031de:	bf00      	nop
 80031e0:	58024400 	.word	0x58024400
 80031e4:	4b9a      	ldr	r3, [pc, #616]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	061b      	lsls	r3, r3, #24
 80031f2:	4997      	ldr	r1, [pc, #604]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	604b      	str	r3, [r1, #4]
 80031f8:	e018      	b.n	800322c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4b95      	ldr	r3, [pc, #596]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a94      	ldr	r2, [pc, #592]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fe f91d 	bl	8001444 <HAL_GetTick>
 800320a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320e:	f7fe f919 	bl	8001444 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e2c2      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003220:	4b8b      	ldr	r3, [pc, #556]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1f0      	bne.n	800320e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a9 	beq.w	800338c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323a:	4b85      	ldr	r3, [pc, #532]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003242:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003244:	4b82      	ldr	r3, [pc, #520]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d007      	beq.n	8003260 <HAL_RCC_OscConfig+0x308>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b18      	cmp	r3, #24
 8003254:	d13a      	bne.n	80032cc <HAL_RCC_OscConfig+0x374>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d135      	bne.n	80032cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003260:	4b7b      	ldr	r3, [pc, #492]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x320>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e296      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003278:	f7fe f914 	bl	80014a4 <HAL_GetREVID>
 800327c:	4603      	mov	r3, r0
 800327e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003282:	4293      	cmp	r3, r2
 8003284:	d817      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x35e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d108      	bne.n	80032a0 <HAL_RCC_OscConfig+0x348>
 800328e:	4b70      	ldr	r3, [pc, #448]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003296:	4a6e      	ldr	r2, [pc, #440]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800329c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800329e:	e075      	b.n	800338c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032a0:	4b6b      	ldr	r3, [pc, #428]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	069b      	lsls	r3, r3, #26
 80032ae:	4968      	ldr	r1, [pc, #416]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032b4:	e06a      	b.n	800338c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032b6:	4b66      	ldr	r3, [pc, #408]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	4962      	ldr	r1, [pc, #392]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ca:	e05f      	b.n	800338c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d042      	beq.n	800335a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032d4:	4b5e      	ldr	r3, [pc, #376]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a5d      	ldr	r2, [pc, #372]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80032da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe f8b0 	bl	8001444 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032e8:	f7fe f8ac 	bl	8001444 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e255      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032fa:	4b55      	ldr	r3, [pc, #340]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003306:	f7fe f8cd 	bl	80014a4 <HAL_GetREVID>
 800330a:	4603      	mov	r3, r0
 800330c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003310:	4293      	cmp	r3, r2
 8003312:	d817      	bhi.n	8003344 <HAL_RCC_OscConfig+0x3ec>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	2b20      	cmp	r3, #32
 800331a:	d108      	bne.n	800332e <HAL_RCC_OscConfig+0x3d6>
 800331c:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003324:	4a4a      	ldr	r2, [pc, #296]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800332a:	6053      	str	r3, [r2, #4]
 800332c:	e02e      	b.n	800338c <HAL_RCC_OscConfig+0x434>
 800332e:	4b48      	ldr	r3, [pc, #288]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	069b      	lsls	r3, r3, #26
 800333c:	4944      	ldr	r1, [pc, #272]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
 8003342:	e023      	b.n	800338c <HAL_RCC_OscConfig+0x434>
 8003344:	4b42      	ldr	r3, [pc, #264]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	493f      	ldr	r1, [pc, #252]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003354:	4313      	orrs	r3, r2
 8003356:	60cb      	str	r3, [r1, #12]
 8003358:	e018      	b.n	800338c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800335a:	4b3d      	ldr	r3, [pc, #244]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a3c      	ldr	r2, [pc, #240]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fe f86d 	bl	8001444 <HAL_GetTick>
 800336a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800336e:	f7fe f869 	bl	8001444 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e212      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003380:	4b33      	ldr	r3, [pc, #204]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d036      	beq.n	8003406 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d019      	beq.n	80033d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a0:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fe f84a 	bl	8001444 <HAL_GetTick>
 80033b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fe f846 	bl	8001444 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1ef      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033c6:	4b22      	ldr	r3, [pc, #136]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x45c>
 80033d2:	e018      	b.n	8003406 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fe f830 	bl	8001444 <HAL_GetTick>
 80033e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fe f82c 	bl	8001444 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1d5      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033fa:	4b15      	ldr	r3, [pc, #84]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d039      	beq.n	8003486 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d01c      	beq.n	8003454 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003424:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003426:	f7fe f80d 	bl	8001444 <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800342e:	f7fe f809 	bl	8001444 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1b2      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_RCC_OscConfig+0x4f8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x4d6>
 800344c:	e01b      	b.n	8003486 <HAL_RCC_OscConfig+0x52e>
 800344e:	bf00      	nop
 8003450:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003454:	4b9b      	ldr	r3, [pc, #620]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a9a      	ldr	r2, [pc, #616]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800345a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800345e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003460:	f7fd fff0 	bl	8001444 <HAL_GetTick>
 8003464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003468:	f7fd ffec 	bl	8001444 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e195      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800347a:	4b92      	ldr	r3, [pc, #584]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 8081 	beq.w	8003596 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003494:	4b8c      	ldr	r3, [pc, #560]	; (80036c8 <HAL_RCC_OscConfig+0x770>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a8b      	ldr	r2, [pc, #556]	; (80036c8 <HAL_RCC_OscConfig+0x770>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a0:	f7fd ffd0 	bl	8001444 <HAL_GetTick>
 80034a4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034a8:	f7fd ffcc 	bl	8001444 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	; 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e175      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ba:	4b83      	ldr	r3, [pc, #524]	; (80036c8 <HAL_RCC_OscConfig+0x770>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d106      	bne.n	80034dc <HAL_RCC_OscConfig+0x584>
 80034ce:	4b7d      	ldr	r3, [pc, #500]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	4a7c      	ldr	r2, [pc, #496]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6713      	str	r3, [r2, #112]	; 0x70
 80034da:	e02d      	b.n	8003538 <HAL_RCC_OscConfig+0x5e0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10c      	bne.n	80034fe <HAL_RCC_OscConfig+0x5a6>
 80034e4:	4b77      	ldr	r3, [pc, #476]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e8:	4a76      	ldr	r2, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80034ea:	f023 0301 	bic.w	r3, r3, #1
 80034ee:	6713      	str	r3, [r2, #112]	; 0x70
 80034f0:	4b74      	ldr	r3, [pc, #464]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80034f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f4:	4a73      	ldr	r2, [pc, #460]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80034f6:	f023 0304 	bic.w	r3, r3, #4
 80034fa:	6713      	str	r3, [r2, #112]	; 0x70
 80034fc:	e01c      	b.n	8003538 <HAL_RCC_OscConfig+0x5e0>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b05      	cmp	r3, #5
 8003504:	d10c      	bne.n	8003520 <HAL_RCC_OscConfig+0x5c8>
 8003506:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	6713      	str	r3, [r2, #112]	; 0x70
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003516:	4a6b      	ldr	r2, [pc, #428]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003518:	f043 0301 	orr.w	r3, r3, #1
 800351c:	6713      	str	r3, [r2, #112]	; 0x70
 800351e:	e00b      	b.n	8003538 <HAL_RCC_OscConfig+0x5e0>
 8003520:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a67      	ldr	r2, [pc, #412]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	4b65      	ldr	r3, [pc, #404]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003530:	4a64      	ldr	r2, [pc, #400]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003532:	f023 0304 	bic.w	r3, r3, #4
 8003536:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d015      	beq.n	800356c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003540:	f7fd ff80 	bl	8001444 <HAL_GetTick>
 8003544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003546:	e00a      	b.n	800355e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003548:	f7fd ff7c 	bl	8001444 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	f241 3288 	movw	r2, #5000	; 0x1388
 8003556:	4293      	cmp	r3, r2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e123      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800355e:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ee      	beq.n	8003548 <HAL_RCC_OscConfig+0x5f0>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fd ff6a 	bl	8001444 <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003574:	f7fd ff66 	bl	8001444 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e10d      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800358a:	4b4e      	ldr	r3, [pc, #312]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800358c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ee      	bne.n	8003574 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8102 	beq.w	80037a4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035a0:	4b48      	ldr	r3, [pc, #288]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035a8:	2b18      	cmp	r3, #24
 80035aa:	f000 80bd 	beq.w	8003728 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	f040 809e 	bne.w	80036f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b42      	ldr	r3, [pc, #264]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a41      	ldr	r2, [pc, #260]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fd ff3e 	bl	8001444 <HAL_GetTick>
 80035c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fd ff3a 	bl	8001444 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0e3      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80035ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ee:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCC_OscConfig+0x774>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	430a      	orrs	r2, r1
 80035fe:	4931      	ldr	r1, [pc, #196]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	628b      	str	r3, [r1, #40]	; 0x28
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	3b01      	subs	r3, #1
 800360a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003612:	3b01      	subs	r3, #1
 8003614:	025b      	lsls	r3, r3, #9
 8003616:	b29b      	uxth	r3, r3
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	3b01      	subs	r3, #1
 8003620:	041b      	lsls	r3, r3, #16
 8003622:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003626:	431a      	orrs	r2, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	3b01      	subs	r3, #1
 800362e:	061b      	lsls	r3, r3, #24
 8003630:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003634:	4923      	ldr	r1, [pc, #140]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003636:	4313      	orrs	r3, r2
 8003638:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003646:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364a:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <HAL_RCC_OscConfig+0x778>)
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003652:	00d2      	lsls	r2, r2, #3
 8003654:	491b      	ldr	r1, [pc, #108]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003656:	4313      	orrs	r3, r2
 8003658:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f023 020c 	bic.w	r2, r3, #12
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	4917      	ldr	r1, [pc, #92]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003668:	4313      	orrs	r3, r2
 800366a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800366c:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	f023 0202 	bic.w	r2, r3, #2
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	4912      	ldr	r1, [pc, #72]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800367a:	4313      	orrs	r3, r2
 800367c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003688:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003694:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 800369c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80036a2:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_RCC_OscConfig+0x76c>)
 80036b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd fec3 	bl	8001444 <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036c0:	e011      	b.n	80036e6 <HAL_RCC_OscConfig+0x78e>
 80036c2:	bf00      	nop
 80036c4:	58024400 	.word	0x58024400
 80036c8:	58024800 	.word	0x58024800
 80036cc:	fffffc0c 	.word	0xfffffc0c
 80036d0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fd feb6 	bl	8001444 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e05f      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036e6:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_RCC_OscConfig+0x858>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x77c>
 80036f2:	e057      	b.n	80037a4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f4:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <HAL_RCC_OscConfig+0x858>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2d      	ldr	r2, [pc, #180]	; (80037b0 <HAL_RCC_OscConfig+0x858>)
 80036fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fd fea0 	bl	8001444 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003708:	f7fd fe9c 	bl	8001444 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e045      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCC_OscConfig+0x858>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x7b0>
 8003726:	e03d      	b.n	80037a4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_RCC_OscConfig+0x858>)
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_RCC_OscConfig+0x858>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2b01      	cmp	r3, #1
 800373a:	d031      	beq.n	80037a0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d12a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d122      	bne.n	80037a0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d11a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	0a5b      	lsrs	r3, r3, #9
 800376e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003776:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d111      	bne.n	80037a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	0c1b      	lsrs	r3, r3, #16
 8003780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0e1b      	lsrs	r3, r3, #24
 8003792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3730      	adds	r7, #48	; 0x30
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400

080037b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e19c      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b8a      	ldr	r3, [pc, #552]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d910      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b87      	ldr	r3, [pc, #540]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 020f 	bic.w	r2, r3, #15
 80037de:	4985      	ldr	r1, [pc, #532]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b83      	ldr	r3, [pc, #524]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e184      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	4b7b      	ldr	r3, [pc, #492]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003810:	429a      	cmp	r2, r3
 8003812:	d908      	bls.n	8003826 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	4975      	ldr	r1, [pc, #468]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003822:	4313      	orrs	r3, r2
 8003824:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800383e:	429a      	cmp	r2, r3
 8003840:	d908      	bls.n	8003854 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003842:	4b6d      	ldr	r3, [pc, #436]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	496a      	ldr	r1, [pc, #424]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003850:	4313      	orrs	r3, r2
 8003852:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800386c:	429a      	cmp	r2, r3
 800386e:	d908      	bls.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003870:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	495e      	ldr	r1, [pc, #376]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800387e:	4313      	orrs	r3, r2
 8003880:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d010      	beq.n	80038b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800389a:	429a      	cmp	r2, r3
 800389c:	d908      	bls.n	80038b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800389e:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4953      	ldr	r1, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d908      	bls.n	80038de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f023 020f 	bic.w	r2, r3, #15
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4947      	ldr	r1, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d055      	beq.n	8003996 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	4940      	ldr	r1, [pc, #256]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d107      	bne.n	8003914 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003904:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d121      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0f6      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d107      	bne.n	800392c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800391c:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d115      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0ea      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0de      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003944:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0d6      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003954:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f023 0207 	bic.w	r2, r3, #7
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4925      	ldr	r1, [pc, #148]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003962:	4313      	orrs	r3, r2
 8003964:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003966:	f7fd fd6d 	bl	8001444 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396c:	e00a      	b.n	8003984 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396e:	f7fd fd69 	bl	8001444 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	; 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e0be      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	429a      	cmp	r2, r3
 8003994:	d1eb      	bne.n	800396e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d010      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d208      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f023 020f 	bic.w	r2, r3, #15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d214      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 020f 	bic.w	r2, r3, #15
 80039da:	4906      	ldr	r1, [pc, #24]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e086      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
 80039f4:	52002000 	.word	0x52002000
 80039f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d208      	bcs.n	8003a2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a18:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4939      	ldr	r1, [pc, #228]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d010      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d208      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	492e      	ldr	r1, [pc, #184]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d208      	bcs.n	8003a86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	4922      	ldr	r1, [pc, #136]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d010      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d208      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4917      	ldr	r1, [pc, #92]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ab4:	f000 f834 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	4912      	ldr	r1, [pc, #72]	; (8003b10 <HAL_RCC_ClockConfig+0x35c>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <HAL_RCC_ClockConfig+0x35c>)
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_RCC_ClockConfig+0x360>)
 8003aea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x364>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x368>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd fc5a 	bl	80013b0 <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	08007a18 	.word	0x08007a18
 8003b14:	24000004 	.word	0x24000004
 8003b18:	24000000 	.word	0x24000000
 8003b1c:	24000008 	.word	0x24000008

08003b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b26:	4bb3      	ldr	r3, [pc, #716]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b2e:	2b18      	cmp	r3, #24
 8003b30:	f200 8155 	bhi.w	8003dde <HAL_RCC_GetSysClockFreq+0x2be>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003ba1 	.word	0x08003ba1
 8003b40:	08003ddf 	.word	0x08003ddf
 8003b44:	08003ddf 	.word	0x08003ddf
 8003b48:	08003ddf 	.word	0x08003ddf
 8003b4c:	08003ddf 	.word	0x08003ddf
 8003b50:	08003ddf 	.word	0x08003ddf
 8003b54:	08003ddf 	.word	0x08003ddf
 8003b58:	08003ddf 	.word	0x08003ddf
 8003b5c:	08003bc7 	.word	0x08003bc7
 8003b60:	08003ddf 	.word	0x08003ddf
 8003b64:	08003ddf 	.word	0x08003ddf
 8003b68:	08003ddf 	.word	0x08003ddf
 8003b6c:	08003ddf 	.word	0x08003ddf
 8003b70:	08003ddf 	.word	0x08003ddf
 8003b74:	08003ddf 	.word	0x08003ddf
 8003b78:	08003ddf 	.word	0x08003ddf
 8003b7c:	08003bcd 	.word	0x08003bcd
 8003b80:	08003ddf 	.word	0x08003ddf
 8003b84:	08003ddf 	.word	0x08003ddf
 8003b88:	08003ddf 	.word	0x08003ddf
 8003b8c:	08003ddf 	.word	0x08003ddf
 8003b90:	08003ddf 	.word	0x08003ddf
 8003b94:	08003ddf 	.word	0x08003ddf
 8003b98:	08003ddf 	.word	0x08003ddf
 8003b9c:	08003bd3 	.word	0x08003bd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ba0:	4b94      	ldr	r3, [pc, #592]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bac:	4b91      	ldr	r3, [pc, #580]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	08db      	lsrs	r3, r3, #3
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	4a90      	ldr	r2, [pc, #576]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003bbe:	e111      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bc0:	4b8d      	ldr	r3, [pc, #564]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bc2:	61bb      	str	r3, [r7, #24]
    break;
 8003bc4:	e10e      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003bc6:	4b8d      	ldr	r3, [pc, #564]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bc8:	61bb      	str	r3, [r7, #24]
    break;
 8003bca:	e10b      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003bcc:	4b8c      	ldr	r3, [pc, #560]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bce:	61bb      	str	r3, [r7, #24]
    break;
 8003bd0:	e108      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003bdc:	4b85      	ldr	r3, [pc, #532]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003be8:	4b82      	ldr	r3, [pc, #520]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003bf2:	4b80      	ldr	r3, [pc, #512]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	08db      	lsrs	r3, r3, #3
 8003bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80e1 	beq.w	8003dd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	f000 8083 	beq.w	8003d24 <HAL_RCC_GetSysClockFreq+0x204>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	f200 80a1 	bhi.w	8003d68 <HAL_RCC_GetSysClockFreq+0x248>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x114>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d056      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c32:	e099      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c34:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d02d      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c40:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	4a6b      	ldr	r2, [pc, #428]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6a:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003c9a:	e087      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cae:	4b51      	ldr	r3, [pc, #324]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cde:	e065      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf2:	4b40      	ldr	r3, [pc, #256]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d22:	e043      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d36:	4b2f      	ldr	r3, [pc, #188]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d66:	e021      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003daa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	0a5b      	lsrs	r3, r3, #9
 8003db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db6:	3301      	adds	r3, #1
 8003db8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd0:	ee17 3a90 	vmov	r3, s15
 8003dd4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003dd6:	e005      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
    break;
 8003ddc:	e002      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003de0:	61bb      	str	r3, [r7, #24]
    break;
 8003de2:	bf00      	nop
  }

  return sysclockfreq;
 8003de4:	69bb      	ldr	r3, [r7, #24]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	58024400 	.word	0x58024400
 8003df8:	03d09000 	.word	0x03d09000
 8003dfc:	003d0900 	.word	0x003d0900
 8003e00:	007a1200 	.word	0x007a1200
 8003e04:	46000000 	.word	0x46000000
 8003e08:	4c742400 	.word	0x4c742400
 8003e0c:	4a742400 	.word	0x4a742400
 8003e10:	4af42400 	.word	0x4af42400

08003e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e1a:	f7ff fe81 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	490f      	ldr	r1, [pc, #60]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e2c:	5ccb      	ldrb	r3, [r1, r3]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e52:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	58024400 	.word	0x58024400
 8003e68:	08007a18 	.word	0x08007a18
 8003e6c:	24000004 	.word	0x24000004
 8003e70:	24000000 	.word	0x24000000

08003e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e78:	f7ff ffcc 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	08007a18 	.word	0x08007a18

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ea4:	f7ff ffb6 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	08007a18 	.word	0x08007a18

08003ecc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d03f      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef0:	d02a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef6:	d824      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003efc:	d018      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f02:	d81e      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0c:	d007      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f0e:	e018      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f10:	4ba3      	ldr	r3, [pc, #652]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4aa2      	ldr	r2, [pc, #648]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f1c:	e015      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2102      	movs	r1, #2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 f9d5 	bl	80052d4 <RCCEx_PLL2_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3324      	adds	r3, #36	; 0x24
 8003f34:	2102      	movs	r1, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 fa7e 	bl	8005438 <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
      break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f50:	4b93      	ldr	r3, [pc, #588]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5c:	4990      	ldr	r1, [pc, #576]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	650b      	str	r3, [r1, #80]	; 0x50
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d03d      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d826      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003f99 	.word	0x08003f99
 8003f88:	08003fa7 	.word	0x08003fa7
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	08003fd1 	.word	0x08003fd1
 8003f94:	08003fd1 	.word	0x08003fd1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f98:	4b81      	ldr	r3, [pc, #516]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a80      	ldr	r2, [pc, #512]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f991 	bl	80052d4 <RCCEx_PLL2_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fb6:	e00c      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3324      	adds	r3, #36	; 0x24
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fa3a 	bl	8005438 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e003      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fd8:	4b71      	ldr	r3, [pc, #452]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fdc:	f023 0207 	bic.w	r2, r3, #7
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	496e      	ldr	r1, [pc, #440]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8003fea:	e001      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d042      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004004:	d02b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400a:	d825      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800400c:	2bc0      	cmp	r3, #192	; 0xc0
 800400e:	d028      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004010:	2bc0      	cmp	r3, #192	; 0xc0
 8004012:	d821      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004014:	2b80      	cmp	r3, #128	; 0x80
 8004016:	d016      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d81d      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d007      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004024:	e018      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004026:	4b5e      	ldr	r3, [pc, #376]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	4a5d      	ldr	r2, [pc, #372]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004032:	e017      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f94a 	bl	80052d4 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004044:	e00e      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f001 f9f3 	bl	8005438 <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800406a:	4b4d      	ldr	r3, [pc, #308]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	494a      	ldr	r1, [pc, #296]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	650b      	str	r3, [r1, #80]	; 0x50
 800407c:	e001      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	2b00      	cmp	r3, #0
 800408c:	d049      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004098:	d030      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800409a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800409e:	d82a      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040a4:	d02c      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80040a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040aa:	d824      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b0:	d018      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80040b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b6:	d81e      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80040bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c0:	d007      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80040c2:	e018      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c4:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a35      	ldr	r2, [pc, #212]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040d0:	e017      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 f8fb 	bl	80052d4 <RCCEx_PLL2_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040e2:	e00e      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3324      	adds	r3, #36	; 0x24
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 f9a4 	bl	8005438 <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040f4:	e005      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
      break;
 80040fa:	e002      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004108:	4b25      	ldr	r3, [pc, #148]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004116:	4922      	ldr	r1, [pc, #136]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	658b      	str	r3, [r1, #88]	; 0x58
 800411c:	e001      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04b      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004138:	d030      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800413a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800413e:	d82a      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004140:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004144:	d02e      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800414a:	d824      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800414c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004150:	d018      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004156:	d81e      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800415c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004160:	d007      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004162:	e018      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004164:	4b0e      	ldr	r3, [pc, #56]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4a0d      	ldr	r2, [pc, #52]	; (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800416a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004170:	e019      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3304      	adds	r3, #4
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f8ab 	bl	80052d4 <RCCEx_PLL2_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004182:	e010      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3324      	adds	r3, #36	; 0x24
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f954 	bl	8005438 <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004194:	e007      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
      break;
 800419a:	e004      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800419c:	bf00      	nop
 800419e:	e002      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80041a0:	58024400 	.word	0x58024400
      break;
 80041a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80041ac:	4b99      	ldr	r3, [pc, #612]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041ba:	4996      	ldr	r1, [pc, #600]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	658b      	str	r3, [r1, #88]	; 0x58
 80041c0:	e001      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d032      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d6:	2b30      	cmp	r3, #48	; 0x30
 80041d8:	d01c      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80041da:	2b30      	cmp	r3, #48	; 0x30
 80041dc:	d817      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d00c      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d813      	bhi.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x342>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d10f      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ee:	4b89      	ldr	r3, [pc, #548]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	4a88      	ldr	r2, [pc, #544]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80041fa:	e00e      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	2102      	movs	r1, #2
 8004202:	4618      	mov	r0, r3
 8004204:	f001 f866 	bl	80052d4 <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800420c:	e005      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
      break;
 8004212:	e002      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d109      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004220:	4b7c      	ldr	r3, [pc, #496]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422c:	4979      	ldr	r1, [pc, #484]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800422e:	4313      	orrs	r3, r2
 8004230:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d047      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800424c:	d030      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800424e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004252:	d82a      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004254:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004258:	d02c      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800425a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800425e:	d824      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004264:	d018      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426a:	d81e      	bhi.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d007      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004276:	e018      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004278:	4b66      	ldr	r3, [pc, #408]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	4a65      	ldr	r2, [pc, #404]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800427e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004282:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004284:	e017      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3304      	adds	r3, #4
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f821 	bl	80052d4 <RCCEx_PLL2_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004296:	e00e      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3324      	adds	r3, #36	; 0x24
 800429c:	2100      	movs	r1, #0
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 f8ca 	bl	8005438 <RCCEx_PLL3_Config>
 80042a4:	4603      	mov	r3, r0
 80042a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042a8:	e005      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	75fb      	strb	r3, [r7, #23]
      break;
 80042ae:	e002      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80042b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042bc:	4b55      	ldr	r3, [pc, #340]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	4952      	ldr	r1, [pc, #328]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	650b      	str	r3, [r1, #80]	; 0x50
 80042ce:	e001      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d049      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e8:	d02e      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80042ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ee:	d828      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80042f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f4:	d02a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x480>
 80042f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042fa:	d822      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80042fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004300:	d026      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004302:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004306:	d81c      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430c:	d010      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800430e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004312:	d816      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01d      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431c:	d111      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2101      	movs	r1, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f000 ffd5 	bl	80052d4 <RCCEx_PLL2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800432e:	e012      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3324      	adds	r3, #36	; 0x24
 8004334:	2101      	movs	r1, #1
 8004336:	4618      	mov	r0, r3
 8004338:	f001 f87e 	bl	8005438 <RCCEx_PLL3_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004340:	e009      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
      break;
 8004346:	e006      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004348:	bf00      	nop
 800434a:	e004      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800434c:	bf00      	nop
 800434e:	e002      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004350:	bf00      	nop
 8004352:	e000      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004356:	7dfb      	ldrb	r3, [r7, #23]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d109      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800435e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004360:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004368:	492a      	ldr	r1, [pc, #168]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800436a:	4313      	orrs	r3, r2
 800436c:	650b      	str	r3, [r1, #80]	; 0x50
 800436e:	e001      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d04d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800438a:	d02e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800438c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004390:	d828      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d02a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439c:	d822      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800439e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043a2:	d026      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80043a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043a8:	d81c      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ae:	d010      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80043b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b4:	d816      	bhi.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01d      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80043ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043be:	d111      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	2101      	movs	r1, #1
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 ff84 	bl	80052d4 <RCCEx_PLL2_Config>
 80043cc:	4603      	mov	r3, r0
 80043ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043d0:	e012      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3324      	adds	r3, #36	; 0x24
 80043d6:	2101      	movs	r1, #1
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f82d 	bl	8005438 <RCCEx_PLL3_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043e2:	e009      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	75fb      	strb	r3, [r7, #23]
      break;
 80043e8:	e006      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80043ea:	bf00      	nop
 80043ec:	e004      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80043ee:	bf00      	nop
 80043f0:	e002      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80043f2:	bf00      	nop
 80043f4:	e000      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80043f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004402:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800440c:	4901      	ldr	r1, [pc, #4]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800440e:	4313      	orrs	r3, r2
 8004410:	658b      	str	r3, [r1, #88]	; 0x58
 8004412:	e003      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004430:	d00e      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004436:	d814      	bhi.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d015      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800443c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004440:	d10f      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004442:	4baf      	ldr	r3, [pc, #700]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	4aae      	ldr	r2, [pc, #696]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800444e:	e00c      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3304      	adds	r3, #4
 8004454:	2101      	movs	r1, #1
 8004456:	4618      	mov	r0, r3
 8004458:	f000 ff3c 	bl	80052d4 <RCCEx_PLL2_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004460:	e003      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
      break;
 8004466:	e000      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800446a:	7dfb      	ldrb	r3, [r7, #23]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004470:	4ba3      	ldr	r3, [pc, #652]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004474:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447c:	49a0      	ldr	r1, [pc, #640]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800447e:	4313      	orrs	r3, r2
 8004480:	650b      	str	r3, [r1, #80]	; 0x50
 8004482:	e001      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	7dfb      	ldrb	r3, [r7, #23]
 8004486:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d032      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004498:	2b03      	cmp	r3, #3
 800449a:	d81b      	bhi.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044db 	.word	0x080044db
 80044a8:	080044b5 	.word	0x080044b5
 80044ac:	080044c3 	.word	0x080044c3
 80044b0:	080044db 	.word	0x080044db
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b4:	4b92      	ldr	r3, [pc, #584]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4a91      	ldr	r2, [pc, #580]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044c0:	e00c      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 ff03 	bl	80052d4 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044d2:	e003      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
      break;
 80044d8:	e000      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80044da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044e2:	4b87      	ldr	r3, [pc, #540]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	4984      	ldr	r1, [pc, #528]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044f4:	e001      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8086 	beq.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004508:	4b7e      	ldr	r3, [pc, #504]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a7d      	ldr	r2, [pc, #500]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800450e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004512:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004514:	f7fc ff96 	bl	8001444 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451a:	e009      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451c:	f7fc ff92 	bl	8001444 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d902      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	75fb      	strb	r3, [r7, #23]
        break;
 800452e:	e005      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004530:	4b74      	ldr	r3, [pc, #464]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d166      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004542:	4b6f      	ldr	r3, [pc, #444]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004544:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800454c:	4053      	eors	r3, r2
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d013      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004556:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004560:	4b67      	ldr	r3, [pc, #412]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	4a66      	ldr	r2, [pc, #408]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800456c:	4b64      	ldr	r3, [pc, #400]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4a63      	ldr	r2, [pc, #396]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004578:	4a61      	ldr	r2, [pc, #388]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004588:	d115      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fc ff5b 	bl	8001444 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004590:	e00b      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fc ff57 	bl	8001444 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d902      	bls.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	75fb      	strb	r3, [r7, #23]
            break;
 80045a8:	e005      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045aa:	4b55      	ldr	r3, [pc, #340]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0ed      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d126      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ca:	d10d      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80045cc:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045da:	0919      	lsrs	r1, r3, #4
 80045dc:	4b4a      	ldr	r3, [pc, #296]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80045de:	400b      	ands	r3, r1
 80045e0:	4947      	ldr	r1, [pc, #284]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	610b      	str	r3, [r1, #16]
 80045e6:	e005      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80045e8:	4b45      	ldr	r3, [pc, #276]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	4a44      	ldr	r2, [pc, #272]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045f2:	6113      	str	r3, [r2, #16]
 80045f4:	4b42      	ldr	r3, [pc, #264]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004602:	493f      	ldr	r1, [pc, #252]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004604:	4313      	orrs	r3, r2
 8004606:	670b      	str	r3, [r1, #112]	; 0x70
 8004608:	e004      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	75bb      	strb	r3, [r7, #22]
 800460e:	e001      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8085 	beq.w	800472c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004626:	2b28      	cmp	r3, #40	; 0x28
 8004628:	d866      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	0800470d 	.word	0x0800470d
 8004634:	080046f9 	.word	0x080046f9
 8004638:	080046f9 	.word	0x080046f9
 800463c:	080046f9 	.word	0x080046f9
 8004640:	080046f9 	.word	0x080046f9
 8004644:	080046f9 	.word	0x080046f9
 8004648:	080046f9 	.word	0x080046f9
 800464c:	080046f9 	.word	0x080046f9
 8004650:	080046d5 	.word	0x080046d5
 8004654:	080046f9 	.word	0x080046f9
 8004658:	080046f9 	.word	0x080046f9
 800465c:	080046f9 	.word	0x080046f9
 8004660:	080046f9 	.word	0x080046f9
 8004664:	080046f9 	.word	0x080046f9
 8004668:	080046f9 	.word	0x080046f9
 800466c:	080046f9 	.word	0x080046f9
 8004670:	080046e7 	.word	0x080046e7
 8004674:	080046f9 	.word	0x080046f9
 8004678:	080046f9 	.word	0x080046f9
 800467c:	080046f9 	.word	0x080046f9
 8004680:	080046f9 	.word	0x080046f9
 8004684:	080046f9 	.word	0x080046f9
 8004688:	080046f9 	.word	0x080046f9
 800468c:	080046f9 	.word	0x080046f9
 8004690:	0800470d 	.word	0x0800470d
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080046f9 	.word	0x080046f9
 800469c:	080046f9 	.word	0x080046f9
 80046a0:	080046f9 	.word	0x080046f9
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	0800470d 	.word	0x0800470d
 80046b4:	080046f9 	.word	0x080046f9
 80046b8:	080046f9 	.word	0x080046f9
 80046bc:	080046f9 	.word	0x080046f9
 80046c0:	080046f9 	.word	0x080046f9
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	080046f9 	.word	0x080046f9
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	0800470d 	.word	0x0800470d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fdfa 	bl	80052d4 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046e4:	e013      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	2101      	movs	r1, #1
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fea3 	bl	8005438 <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046f6:	e00a      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
      break;
 80046fc:	e007      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80046fe:	bf00      	nop
 8004700:	58024400 	.word	0x58024400
 8004704:	58024800 	.word	0x58024800
 8004708:	00ffffcf 	.word	0x00ffffcf
      break;
 800470c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004714:	4b96      	ldr	r3, [pc, #600]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004718:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004720:	4993      	ldr	r1, [pc, #588]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004722:	4313      	orrs	r3, r2
 8004724:	654b      	str	r3, [r1, #84]	; 0x54
 8004726:	e001      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d038      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473c:	2b05      	cmp	r3, #5
 800473e:	d821      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004740:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800478b 	.word	0x0800478b
 800474c:	08004761 	.word	0x08004761
 8004750:	08004773 	.word	0x08004773
 8004754:	0800478b 	.word	0x0800478b
 8004758:	0800478b 	.word	0x0800478b
 800475c:	0800478b 	.word	0x0800478b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3304      	adds	r3, #4
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fdb4 	bl	80052d4 <RCCEx_PLL2_Config>
 800476c:	4603      	mov	r3, r0
 800476e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004770:	e00c      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3324      	adds	r3, #36	; 0x24
 8004776:	2101      	movs	r1, #1
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fe5d 	bl	8005438 <RCCEx_PLL3_Config>
 800477e:	4603      	mov	r3, r0
 8004780:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004782:	e003      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	75fb      	strb	r3, [r7, #23]
      break;
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800478a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800478c:	7dfb      	ldrb	r3, [r7, #23]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004792:	4b77      	ldr	r3, [pc, #476]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	f023 0207 	bic.w	r2, r3, #7
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479e:	4974      	ldr	r1, [pc, #464]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	654b      	str	r3, [r1, #84]	; 0x54
 80047a4:	e001      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	7dfb      	ldrb	r3, [r7, #23]
 80047a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d03a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	2b05      	cmp	r3, #5
 80047be:	d821      	bhi.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	0800480b 	.word	0x0800480b
 80047cc:	080047e1 	.word	0x080047e1
 80047d0:	080047f3 	.word	0x080047f3
 80047d4:	0800480b 	.word	0x0800480b
 80047d8:	0800480b 	.word	0x0800480b
 80047dc:	0800480b 	.word	0x0800480b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	2101      	movs	r1, #1
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fd74 	bl	80052d4 <RCCEx_PLL2_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047f0:	e00c      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3324      	adds	r3, #36	; 0x24
 80047f6:	2101      	movs	r1, #1
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fe1d 	bl	8005438 <RCCEx_PLL3_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004802:	e003      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	75fb      	strb	r3, [r7, #23]
      break;
 8004808:	e000      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800480a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004812:	4b57      	ldr	r3, [pc, #348]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	f023 0207 	bic.w	r2, r3, #7
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	4953      	ldr	r1, [pc, #332]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004822:	4313      	orrs	r3, r2
 8004824:	658b      	str	r3, [r1, #88]	; 0x58
 8004826:	e001      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	7dfb      	ldrb	r3, [r7, #23]
 800482a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d04b      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800483e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004842:	d02e      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004848:	d828      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484e:	d02a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004854:	d822      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004856:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800485a:	d026      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800485c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004860:	d81c      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004866:	d010      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004868:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800486c:	d816      	bhi.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01d      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004876:	d111      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f000 fd28 	bl	80052d4 <RCCEx_PLL2_Config>
 8004884:	4603      	mov	r3, r0
 8004886:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004888:	e012      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	3324      	adds	r3, #36	; 0x24
 800488e:	2102      	movs	r1, #2
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fdd1 	bl	8005438 <RCCEx_PLL3_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800489a:	e009      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	75fb      	strb	r3, [r7, #23]
      break;
 80048a0:	e006      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048a2:	bf00      	nop
 80048a4:	e004      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048b6:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c4:	492a      	ldr	r1, [pc, #168]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	654b      	str	r3, [r1, #84]	; 0x54
 80048ca:	e001      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d04d      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048e6:	d02e      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80048e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048ec:	d828      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f2:	d02a      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f8:	d822      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80048fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048fe:	d026      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004904:	d81c      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490a:	d010      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800490c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004910:	d816      	bhi.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01d      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d111      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2100      	movs	r1, #0
 8004922:	4618      	mov	r0, r3
 8004924:	f000 fcd6 	bl	80052d4 <RCCEx_PLL2_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800492c:	e012      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3324      	adds	r3, #36	; 0x24
 8004932:	2102      	movs	r1, #2
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fd7f 	bl	8005438 <RCCEx_PLL3_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800493e:	e009      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	75fb      	strb	r3, [r7, #23]
      break;
 8004944:	e006      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004946:	bf00      	nop
 8004948:	e004      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10c      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004968:	4901      	ldr	r1, [pc, #4]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	658b      	str	r3, [r1, #88]	; 0x58
 800496e:	e003      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004980:	2b00      	cmp	r3, #0
 8004982:	d04b      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800498a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800498e:	d02e      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004990:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004994:	d828      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499a:	d02a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800499c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a0:	d822      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049a6:	d026      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80049a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049ac:	d81c      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b2:	d010      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80049b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b8:	d816      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01d      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80049be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049c2:	d111      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3304      	adds	r3, #4
 80049c8:	2100      	movs	r1, #0
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 fc82 	bl	80052d4 <RCCEx_PLL2_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049d4:	e012      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3324      	adds	r3, #36	; 0x24
 80049da:	2102      	movs	r1, #2
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fd2b 	bl	8005438 <RCCEx_PLL3_Config>
 80049e2:	4603      	mov	r3, r0
 80049e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049e6:	e009      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	75fb      	strb	r3, [r7, #23]
      break;
 80049ec:	e006      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80049ee:	bf00      	nop
 80049f0:	e004      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80049fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10a      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a02:	4b9d      	ldr	r3, [pc, #628]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a10:	4999      	ldr	r1, [pc, #612]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	658b      	str	r3, [r1, #88]	; 0x58
 8004a16:	e001      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	d10a      	bne.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3324      	adds	r3, #36	; 0x24
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fcfc 	bl	8005438 <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a4a:	4b8b      	ldr	r3, [pc, #556]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a58:	4987      	ldr	r1, [pc, #540]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d01a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a74:	d10a      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3324      	adds	r3, #36	; 0x24
 8004a7a:	2102      	movs	r1, #2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f000 fcdb 	bl	8005438 <RCCEx_PLL3_Config>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a8c:	4b7a      	ldr	r3, [pc, #488]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a9a:	4977      	ldr	r1, [pc, #476]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d034      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ab6:	d01d      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004ab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004abc:	d817      	bhi.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac6:	d009      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004ac8:	e011      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3304      	adds	r3, #4
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fbff 	bl	80052d4 <RCCEx_PLL2_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ada:	e00c      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3324      	adds	r3, #36	; 0x24
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fca8 	bl	8005438 <RCCEx_PLL3_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004aec:	e003      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
      break;
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af6:	7dfb      	ldrb	r3, [r7, #23]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004afc:	4b5e      	ldr	r3, [pc, #376]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b0a:	495b      	ldr	r1, [pc, #364]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	658b      	str	r3, [r1, #88]	; 0x58
 8004b10:	e001      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d033      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b2c:	d01c      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004b2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b32:	d816      	bhi.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b38:	d003      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b3e:	d007      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004b40:	e00f      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b42:	4b4d      	ldr	r3, [pc, #308]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	4a4c      	ldr	r2, [pc, #304]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b4e:	e00c      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3324      	adds	r3, #36	; 0x24
 8004b54:	2101      	movs	r1, #1
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fc6e 	bl	8005438 <RCCEx_PLL3_Config>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b60:	e003      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
      break;
 8004b66:	e000      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b70:	4b41      	ldr	r3, [pc, #260]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7e:	493e      	ldr	r1, [pc, #248]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	654b      	str	r3, [r1, #84]	; 0x54
 8004b84:	e001      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
 8004b88:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d029      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba2:	d007      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004ba4:	e00f      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba6:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	4a33      	ldr	r2, [pc, #204]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bb2:	e00b      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	2102      	movs	r1, #2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fb8a 	bl	80052d4 <RCCEx_PLL2_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bd2:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	4926      	ldr	r1, [pc, #152]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004be4:	e001      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
 8004be8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3324      	adds	r3, #36	; 0x24
 8004bfa:	2102      	movs	r1, #2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fc1b 	bl	8005438 <RCCEx_PLL3_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d033      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c20:	d017      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c26:	d811      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2c:	d013      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c32:	d80b      	bhi.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d010      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c3c:	d106      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a0d      	ldr	r2, [pc, #52]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c4a:	e007      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c5c:	7dfb      	ldrb	r3, [r7, #23]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c62:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6e:	4902      	ldr	r1, [pc, #8]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	654b      	str	r3, [r1, #84]	; 0x54
 8004c74:	e004      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004c76:	bf00      	nop
 8004c78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7c:	7dfb      	ldrb	r3, [r7, #23]
 8004c7e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c8c:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	492e      	ldr	r1, [pc, #184]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004caa:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cb8:	4926      	ldr	r1, [pc, #152]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d008      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cca:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd6:	491f      	ldr	r1, [pc, #124]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00d      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cf2:	6113      	str	r3, [r2, #16]
 8004cf4:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004cfe:	4915      	ldr	r1, [pc, #84]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	da08      	bge.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d0c:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d10:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	490e      	ldr	r1, [pc, #56]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d38:	4906      	ldr	r1, [pc, #24]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d3e:	7dbb      	ldrb	r3, [r7, #22]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e000      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400

08004d58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d5c:	f7ff f85a 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8004d60:	4602      	mov	r2, r0
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	091b      	lsrs	r3, r3, #4
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	4904      	ldr	r1, [pc, #16]	; (8004d80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d6e:	5ccb      	ldrb	r3, [r1, r3]
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	58024400 	.word	0x58024400
 8004d80:	08007a18 	.word	0x08007a18

08004d84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b089      	sub	sp, #36	; 0x24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d8c:	4ba1      	ldr	r3, [pc, #644]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004d96:	4b9f      	ldr	r3, [pc, #636]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	0b1b      	lsrs	r3, r3, #12
 8004d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004da0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004da2:	4b9c      	ldr	r3, [pc, #624]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004dae:	4b99      	ldr	r3, [pc, #612]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db2:	08db      	lsrs	r3, r3, #3
 8004db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8111 	beq.w	8004ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	f000 8083 	beq.w	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	f200 80a1 	bhi.w	8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d056      	beq.n	8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004dee:	e099      	b.n	8004f24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004df0:	4b88      	ldr	r3, [pc, #544]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02d      	beq.n	8004e58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dfc:	4b85      	ldr	r3, [pc, #532]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	08db      	lsrs	r3, r3, #3
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	4a84      	ldr	r2, [pc, #528]	; (8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	ee07 3a90 	vmov	s15, r3
 8004e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e26:	4b7b      	ldr	r3, [pc, #492]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e56:	e087      	b.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005020 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6a:	4b6a      	ldr	r3, [pc, #424]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e9a:	e065      	b.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eae:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ede:	e043      	b.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	ee07 3a90 	vmov	s15, r3
 8004ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005028 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef2:	4b48      	ldr	r3, [pc, #288]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efa:	ee07 3a90 	vmov	s15, r3
 8004efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f06:	eddf 5a45 	vldr	s11, [pc, #276]	; 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f22:	e021      	b.n	8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005024 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f36:	4b37      	ldr	r3, [pc, #220]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3e:	ee07 3a90 	vmov	s15, r3
 8004f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	0a5b      	lsrs	r3, r3, #9
 8004f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8e:	ee17 2a90 	vmov	r2, s15
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	0c1b      	lsrs	r3, r3, #16
 8004f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa0:	ee07 3a90 	vmov	s15, r3
 8004fa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fb0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fbc:	ee17 2a90 	vmov	r2, s15
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004fc4:	4b13      	ldr	r3, [pc, #76]	; (8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	0e1b      	lsrs	r3, r3, #24
 8004fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fce:	ee07 3a90 	vmov	s15, r3
 8004fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fea:	ee17 2a90 	vmov	r2, s15
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ff2:	e008      	b.n	8005006 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
}
 8005006:	bf00      	nop
 8005008:	3724      	adds	r7, #36	; 0x24
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	58024400 	.word	0x58024400
 8005018:	03d09000 	.word	0x03d09000
 800501c:	46000000 	.word	0x46000000
 8005020:	4c742400 	.word	0x4c742400
 8005024:	4a742400 	.word	0x4a742400
 8005028:	4af42400 	.word	0x4af42400

0800502c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800502c:	b480      	push	{r7}
 800502e:	b089      	sub	sp, #36	; 0x24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005034:	4ba1      	ldr	r3, [pc, #644]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800503e:	4b9f      	ldr	r3, [pc, #636]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	0d1b      	lsrs	r3, r3, #20
 8005044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005048:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800504a:	4b9c      	ldr	r3, [pc, #624]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	0a1b      	lsrs	r3, r3, #8
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005056:	4b99      	ldr	r3, [pc, #612]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	08db      	lsrs	r3, r3, #3
 800505c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8111 	beq.w	800529c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b02      	cmp	r3, #2
 800507e:	f000 8083 	beq.w	8005188 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	2b02      	cmp	r3, #2
 8005086:	f200 80a1 	bhi.w	80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d056      	beq.n	8005144 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005096:	e099      	b.n	80051cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005098:	4b88      	ldr	r3, [pc, #544]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0320 	and.w	r3, r3, #32
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d02d      	beq.n	8005100 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050a4:	4b85      	ldr	r3, [pc, #532]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	08db      	lsrs	r3, r3, #3
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	4a84      	ldr	r2, [pc, #528]	; (80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
 80050b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ce:	4b7b      	ldr	r3, [pc, #492]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050de:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050fe:	e087      	b.n	8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005112:	4b6a      	ldr	r3, [pc, #424]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005122:	ed97 6a03 	vldr	s12, [r7, #12]
 8005126:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005142:	e065      	b.n	8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b59      	ldr	r3, [pc, #356]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a03 	vldr	s12, [r7, #12]
 800516a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005186:	e043      	b.n	8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b48      	ldr	r3, [pc, #288]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ca:	e021      	b.n	8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b37      	ldr	r3, [pc, #220]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80051f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800520e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005210:	4b2a      	ldr	r3, [pc, #168]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005214:	0a5b      	lsrs	r3, r3, #9
 8005216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521a:	ee07 3a90 	vmov	s15, r3
 800521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005222:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005226:	ee37 7a87 	vadd.f32	s14, s15, s14
 800522a:	edd7 6a07 	vldr	s13, [r7, #28]
 800522e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005236:	ee17 2a90 	vmov	r2, s15
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800523e:	4b1f      	ldr	r3, [pc, #124]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005248:	ee07 3a90 	vmov	s15, r3
 800524c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005254:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005258:	edd7 6a07 	vldr	s13, [r7, #28]
 800525c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005264:	ee17 2a90 	vmov	r2, s15
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800526c:	4b13      	ldr	r3, [pc, #76]	; (80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	0e1b      	lsrs	r3, r3, #24
 8005272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005276:	ee07 3a90 	vmov	s15, r3
 800527a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800527e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005286:	edd7 6a07 	vldr	s13, [r7, #28]
 800528a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800528e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005292:	ee17 2a90 	vmov	r2, s15
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800529a:	e008      	b.n	80052ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	609a      	str	r2, [r3, #8]
}
 80052ae:	bf00      	nop
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	58024400 	.word	0x58024400
 80052c0:	03d09000 	.word	0x03d09000
 80052c4:	46000000 	.word	0x46000000
 80052c8:	4c742400 	.word	0x4c742400
 80052cc:	4a742400 	.word	0x4a742400
 80052d0:	4af42400 	.word	0x4af42400

080052d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052e2:	4b53      	ldr	r3, [pc, #332]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d101      	bne.n	80052f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e099      	b.n	8005426 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052f2:	4b4f      	ldr	r3, [pc, #316]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a4e      	ldr	r2, [pc, #312]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80052f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fe:	f7fc f8a1 	bl	8001444 <HAL_GetTick>
 8005302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005304:	e008      	b.n	8005318 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005306:	f7fc f89d 	bl	8001444 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d901      	bls.n	8005318 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	e086      	b.n	8005426 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005318:	4b45      	ldr	r3, [pc, #276]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1f0      	bne.n	8005306 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005324:	4b42      	ldr	r3, [pc, #264]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	031b      	lsls	r3, r3, #12
 8005332:	493f      	ldr	r1, [pc, #252]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 8005334:	4313      	orrs	r3, r2
 8005336:	628b      	str	r3, [r1, #40]	; 0x28
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	3b01      	subs	r3, #1
 800533e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	3b01      	subs	r3, #1
 8005348:	025b      	lsls	r3, r3, #9
 800534a:	b29b      	uxth	r3, r3
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	3b01      	subs	r3, #1
 8005354:	041b      	lsls	r3, r3, #16
 8005356:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	3b01      	subs	r3, #1
 8005362:	061b      	lsls	r3, r3, #24
 8005364:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005368:	4931      	ldr	r1, [pc, #196]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 800536a:	4313      	orrs	r3, r2
 800536c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800536e:	4b30      	ldr	r3, [pc, #192]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	492d      	ldr	r1, [pc, #180]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 800537c:	4313      	orrs	r3, r2
 800537e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005380:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	f023 0220 	bic.w	r2, r3, #32
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	4928      	ldr	r1, [pc, #160]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005392:	4b27      	ldr	r3, [pc, #156]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	4a26      	ldr	r2, [pc, #152]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 8005398:	f023 0310 	bic.w	r3, r3, #16
 800539c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800539e:	4b24      	ldr	r3, [pc, #144]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053a2:	4b24      	ldr	r3, [pc, #144]	; (8005434 <RCCEx_PLL2_Config+0x160>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	69d2      	ldr	r2, [r2, #28]
 80053aa:	00d2      	lsls	r2, r2, #3
 80053ac:	4920      	ldr	r1, [pc, #128]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053b2:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	4a1e      	ldr	r2, [pc, #120]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053b8:	f043 0310 	orr.w	r3, r3, #16
 80053bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053d0:	e00f      	b.n	80053f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d106      	bne.n	80053e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053d8:	4b15      	ldr	r3, [pc, #84]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	4a14      	ldr	r2, [pc, #80]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053e4:	e005      	b.n	80053f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ea:	4a11      	ldr	r2, [pc, #68]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a0e      	ldr	r2, [pc, #56]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fe:	f7fc f821 	bl	8001444 <HAL_GetTick>
 8005402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005404:	e008      	b.n	8005418 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005406:	f7fc f81d 	bl	8001444 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d901      	bls.n	8005418 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e006      	b.n	8005426 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <RCCEx_PLL2_Config+0x15c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d0f0      	beq.n	8005406 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005424:	7bfb      	ldrb	r3, [r7, #15]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	58024400 	.word	0x58024400
 8005434:	ffff0007 	.word	0xffff0007

08005438 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005446:	4b53      	ldr	r3, [pc, #332]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b03      	cmp	r3, #3
 8005450:	d101      	bne.n	8005456 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e099      	b.n	800558a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005456:	4b4f      	ldr	r3, [pc, #316]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a4e      	ldr	r2, [pc, #312]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800545c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005462:	f7fb ffef 	bl	8001444 <HAL_GetTick>
 8005466:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005468:	e008      	b.n	800547c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800546a:	f7fb ffeb 	bl	8001444 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e086      	b.n	800558a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800547c:	4b45      	ldr	r3, [pc, #276]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1f0      	bne.n	800546a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005488:	4b42      	ldr	r3, [pc, #264]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800548a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	051b      	lsls	r3, r3, #20
 8005496:	493f      	ldr	r1, [pc, #252]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 8005498:	4313      	orrs	r3, r2
 800549a:	628b      	str	r3, [r1, #40]	; 0x28
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	025b      	lsls	r3, r3, #9
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	431a      	orrs	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	041b      	lsls	r3, r3, #16
 80054ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	061b      	lsls	r3, r3, #24
 80054c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054cc:	4931      	ldr	r1, [pc, #196]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054d2:	4b30      	ldr	r3, [pc, #192]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	492d      	ldr	r1, [pc, #180]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054e4:	4b2b      	ldr	r3, [pc, #172]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	4928      	ldr	r1, [pc, #160]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054f6:	4b27      	ldr	r3, [pc, #156]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	4a26      	ldr	r2, [pc, #152]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005500:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005502:	4b24      	ldr	r3, [pc, #144]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 8005504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005506:	4b24      	ldr	r3, [pc, #144]	; (8005598 <RCCEx_PLL3_Config+0x160>)
 8005508:	4013      	ands	r3, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	69d2      	ldr	r2, [r2, #28]
 800550e:	00d2      	lsls	r2, r2, #3
 8005510:	4920      	ldr	r1, [pc, #128]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005516:	4b1f      	ldr	r3, [pc, #124]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800551c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d106      	bne.n	8005536 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005528:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	4a19      	ldr	r2, [pc, #100]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800552e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005532:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005534:	e00f      	b.n	8005556 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d106      	bne.n	800554a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800553c:	4b15      	ldr	r3, [pc, #84]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4a14      	ldr	r2, [pc, #80]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 8005542:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005546:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005548:	e005      	b.n	8005556 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800554a:	4b12      	ldr	r3, [pc, #72]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	4a11      	ldr	r2, [pc, #68]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 8005550:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005554:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800555c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005562:	f7fb ff6f 	bl	8001444 <HAL_GetTick>
 8005566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005568:	e008      	b.n	800557c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800556a:	f7fb ff6b 	bl	8001444 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e006      	b.n	800558a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <RCCEx_PLL3_Config+0x15c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	58024400 	.word	0x58024400
 8005598:	ffff0007 	.word	0xffff0007

0800559c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e0f1      	b.n	8005792 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a78      	ldr	r2, [pc, #480]	; (800579c <HAL_SPI_Init+0x200>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00f      	beq.n	80055de <HAL_SPI_Init+0x42>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a77      	ldr	r2, [pc, #476]	; (80057a0 <HAL_SPI_Init+0x204>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00a      	beq.n	80055de <HAL_SPI_Init+0x42>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a75      	ldr	r2, [pc, #468]	; (80057a4 <HAL_SPI_Init+0x208>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d005      	beq.n	80055de <HAL_SPI_Init+0x42>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b0f      	cmp	r3, #15
 80055d8:	d901      	bls.n	80055de <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0d9      	b.n	8005792 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fdb0 	bl	8006144 <SPI_GetPacketSize>
 80055e4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a6c      	ldr	r2, [pc, #432]	; (800579c <HAL_SPI_Init+0x200>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00c      	beq.n	800560a <HAL_SPI_Init+0x6e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a6a      	ldr	r2, [pc, #424]	; (80057a0 <HAL_SPI_Init+0x204>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d007      	beq.n	800560a <HAL_SPI_Init+0x6e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a69      	ldr	r2, [pc, #420]	; (80057a4 <HAL_SPI_Init+0x208>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d002      	beq.n	800560a <HAL_SPI_Init+0x6e>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b08      	cmp	r3, #8
 8005608:	d811      	bhi.n	800562e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800560e:	4a63      	ldr	r2, [pc, #396]	; (800579c <HAL_SPI_Init+0x200>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d009      	beq.n	8005628 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a61      	ldr	r2, [pc, #388]	; (80057a0 <HAL_SPI_Init+0x204>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <HAL_SPI_Init+0x8c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a60      	ldr	r2, [pc, #384]	; (80057a4 <HAL_SPI_Init+0x208>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d104      	bne.n	8005632 <HAL_SPI_Init+0x96>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b10      	cmp	r3, #16
 800562c:	d901      	bls.n	8005632 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e0af      	b.n	8005792 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fb fc6e 	bl	8000f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800566e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005678:	d119      	bne.n	80056ae <HAL_SPI_Init+0x112>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005682:	d103      	bne.n	800568c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10c      	bne.n	80056ae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800569c:	d107      	bne.n	80056ae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056ac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b6:	431a      	orrs	r2, r3
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c0:	ea42 0103 	orr.w	r1, r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d8:	431a      	orrs	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	ea42 0103 	orr.w	r1, r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d113      	bne.n	800574e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005738:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800574c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40013000 	.word	0x40013000
 80057a0:	40003800 	.word	0x40003800
 80057a4:	40003c00 	.word	0x40003c00

080057a8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3320      	adds	r3, #32
 80057be:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d101      	bne.n	80057d2 <HAL_SPI_Transmit+0x2a>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e1d7      	b.n	8005b82 <HAL_SPI_Transmit+0x3da>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057da:	f7fb fe33 	bl	8001444 <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d007      	beq.n	80057fc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
 80057ee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80057f8:	7efb      	ldrb	r3, [r7, #27]
 80057fa:	e1c2      	b.n	8005b82 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <HAL_SPI_Transmit+0x60>
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005814:	7efb      	ldrb	r3, [r7, #27]
 8005816:	e1b4      	b.n	8005b82 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2203      	movs	r2, #3
 800581c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	88fa      	ldrh	r2, [r7, #6]
 800583a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005868:	d107      	bne.n	800587a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005878:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	4b96      	ldr	r3, [pc, #600]	; (8005adc <HAL_SPI_Transmit+0x334>)
 8005882:	4013      	ands	r3, r2
 8005884:	88f9      	ldrh	r1, [r7, #6]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	6812      	ldr	r2, [r2, #0]
 800588a:	430b      	orrs	r3, r1
 800588c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0201 	orr.w	r2, r2, #1
 800589c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058a6:	d107      	bne.n	80058b8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b0f      	cmp	r3, #15
 80058be:	d947      	bls.n	8005950 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80058c0:	e03f      	b.n	8005942 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d114      	bne.n	80058fa <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e0:	1d1a      	adds	r2, r3, #4
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058f8:	e023      	b.n	8005942 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058fa:	f7fb fda3 	bl	8001444 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	429a      	cmp	r2, r3
 8005908:	d803      	bhi.n	8005912 <HAL_SPI_Transmit+0x16a>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d102      	bne.n	8005918 <HAL_SPI_Transmit+0x170>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d114      	bne.n	8005942 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 fb45 	bl	8005fa8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800592c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e11f      	b.n	8005b82 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1b9      	bne.n	80058c2 <HAL_SPI_Transmit+0x11a>
 800594e:	e0f2      	b.n	8005b36 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b07      	cmp	r3, #7
 8005956:	f240 80e7 	bls.w	8005b28 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800595a:	e05d      	b.n	8005a18 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b02      	cmp	r3, #2
 8005968:	d132      	bne.n	80059d0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005970:	b29b      	uxth	r3, r3
 8005972:	2b01      	cmp	r3, #1
 8005974:	d918      	bls.n	80059a8 <HAL_SPI_Transmit+0x200>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d014      	beq.n	80059a8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6812      	ldr	r2, [r2, #0]
 8005988:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598e:	1d1a      	adds	r2, r3, #4
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b02      	subs	r3, #2
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80059a6:	e037      	b.n	8005a18 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ac:	881a      	ldrh	r2, [r3, #0]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	1c9a      	adds	r2, r3, #2
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80059ce:	e023      	b.n	8005a18 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059d0:	f7fb fd38 	bl	8001444 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d803      	bhi.n	80059e8 <HAL_SPI_Transmit+0x240>
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e6:	d102      	bne.n	80059ee <HAL_SPI_Transmit+0x246>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d114      	bne.n	8005a18 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fada 	bl	8005fa8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e0b4      	b.n	8005b82 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d19b      	bne.n	800595c <HAL_SPI_Transmit+0x1b4>
 8005a24:	e087      	b.n	8005b36 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d155      	bne.n	8005ae0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d918      	bls.n	8005a72 <HAL_SPI_Transmit+0x2ca>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d914      	bls.n	8005a72 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a58:	1d1a      	adds	r2, r3, #4
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b04      	subs	r3, #4
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a70:	e05a      	b.n	8005b28 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d917      	bls.n	8005aae <HAL_SPI_Transmit+0x306>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d013      	beq.n	8005aae <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8a:	881a      	ldrh	r2, [r3, #0]
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a94:	1c9a      	adds	r2, r3, #2
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b02      	subs	r3, #2
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005aac:	e03c      	b.n	8005b28 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3320      	adds	r3, #32
 8005ab8:	7812      	ldrb	r2, [r2, #0]
 8005aba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005ad8:	e026      	b.n	8005b28 <HAL_SPI_Transmit+0x380>
 8005ada:	bf00      	nop
 8005adc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ae0:	f7fb fcb0 	bl	8001444 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d803      	bhi.n	8005af8 <HAL_SPI_Transmit+0x350>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d102      	bne.n	8005afe <HAL_SPI_Transmit+0x356>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d114      	bne.n	8005b28 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fa52 	bl	8005fa8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e02c      	b.n	8005b82 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f47f af78 	bne.w	8005a26 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2108      	movs	r1, #8
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fad1 	bl	80060e8 <SPI_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d007      	beq.n	8005b5c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fa23 	bl	8005fa8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005b80:	7efb      	ldrb	r3, [r7, #27]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop

08005b8c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005bbe:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3330      	adds	r3, #48	; 0x30
 8005bc6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d113      	bne.n	8005bfa <HAL_SPI_IRQHandler+0x6e>
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f003 0320 	and.w	r3, r3, #32
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10e      	bne.n	8005bfa <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	4798      	blx	r3
    handled = 1UL;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10f      	bne.n	8005c24 <HAL_SPI_IRQHandler+0x98>
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00a      	beq.n	8005c24 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d105      	bne.n	8005c24 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	4798      	blx	r3
    handled = 1UL;
 8005c20:	2301      	movs	r3, #1
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f003 0320 	and.w	r3, r3, #32
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10f      	bne.n	8005c4e <HAL_SPI_IRQHandler+0xc2>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d105      	bne.n	8005c4e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	4798      	blx	r3
    handled = 1UL;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f040 815a 	bne.w	8005f0a <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 808b 	beq.w	8005d78 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0208 	orr.w	r2, r2, #8
 8005c70:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699a      	ldr	r2, [r3, #24]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0210 	orr.w	r2, r2, #16
 8005c80:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	699a      	ldr	r2, [r3, #24]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c90:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0208 	bic.w	r2, r2, #8
 8005ca0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d13d      	bne.n	8005d2c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005cb0:	e036      	b.n	8005d20 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	2b0f      	cmp	r3, #15
 8005cb8:	d90b      	bls.n	8005cd2 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cc4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cca:	1d1a      	adds	r2, r3, #4
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	665a      	str	r2, [r3, #100]	; 0x64
 8005cd0:	e01d      	b.n	8005d0e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	2b07      	cmp	r3, #7
 8005cd8:	d90b      	bls.n	8005cf2 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	8812      	ldrh	r2, [r2, #0]
 8005ce2:	b292      	uxth	r2, r2
 8005ce4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cea:	1c9a      	adds	r2, r3, #2
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	665a      	str	r2, [r3, #100]	; 0x64
 8005cf0:	e00d      	b.n	8005d0e <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cfe:	7812      	ldrb	r2, [r2, #0]
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	3b01      	subs	r3, #1
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1c2      	bne.n	8005cb2 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f93b 	bl	8005fa8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f90b 	bl	8005f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d4a:	e0e3      	b.n	8005f14 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005d4c:	7cfb      	ldrb	r3, [r7, #19]
 8005d4e:	2b05      	cmp	r3, #5
 8005d50:	d103      	bne.n	8005d5a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f8fa 	bl	8005f4c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005d58:	e0d9      	b.n	8005f0e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005d5a:	7cfb      	ldrb	r3, [r7, #19]
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d103      	bne.n	8005d68 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f8e9 	bl	8005f38 <HAL_SPI_RxCpltCallback>
    return;
 8005d66:	e0d2      	b.n	8005f0e <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005d68:	7cfb      	ldrb	r3, [r7, #19]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	f040 80cf 	bne.w	8005f0e <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f8d7 	bl	8005f24 <HAL_SPI_TxCpltCallback>
    return;
 8005d76:	e0ca      	b.n	8005f0e <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00d      	beq.n	8005d9e <HAL_SPI_IRQHandler+0x212>
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d008      	beq.n	8005d9e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9a:	619a      	str	r2, [r3, #24]

    return;
 8005d9c:	e0ba      	b.n	8005f14 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 80b5 	beq.w	8005f14 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00f      	beq.n	8005dd4 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dba:	f043 0204 	orr.w	r2, r3, #4
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dd2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00f      	beq.n	8005dfe <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de4:	f043 0201 	orr.w	r2, r3, #1
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00f      	beq.n	8005e28 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e0e:	f043 0208 	orr.w	r2, r3, #8
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e26:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00f      	beq.n	8005e52 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	699a      	ldr	r2, [r3, #24]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0220 	orr.w	r2, r2, #32
 8005e50:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d05a      	beq.n	8005f12 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6919      	ldr	r1, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <HAL_SPI_IRQHandler+0x390>)
 8005e78:	400b      	ands	r3, r1
 8005e7a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e82:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e86:	d138      	bne.n	8005efa <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005e96:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ea4:	4a1e      	ldr	r2, [pc, #120]	; (8005f20 <HAL_SPI_IRQHandler+0x394>)
 8005ea6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fb fe27 	bl	8001b00 <HAL_DMA_Abort_IT>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ebe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d020      	beq.n	8005f12 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ed4:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <HAL_SPI_IRQHandler+0x394>)
 8005ed6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fb fe0f 	bl	8001b00 <HAL_DMA_Abort_IT>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d014      	beq.n	8005f12 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005ef8:	e00b      	b.n	8005f12 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f82c 	bl	8005f60 <HAL_SPI_ErrorCallback>
    return;
 8005f08:	e003      	b.n	8005f12 <HAL_SPI_IRQHandler+0x386>
    return;
 8005f0a:	bf00      	nop
 8005f0c:	e002      	b.n	8005f14 <HAL_SPI_IRQHandler+0x388>
    return;
 8005f0e:	bf00      	nop
 8005f10:	e000      	b.n	8005f14 <HAL_SPI_IRQHandler+0x388>
    return;
 8005f12:	bf00      	nop
  }
}
 8005f14:	3728      	adds	r7, #40	; 0x28
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	fffffc94 	.word	0xfffffc94
 8005f20:	08005f75 	.word	0x08005f75

08005f24 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff ffe0 	bl	8005f60 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0208 	orr.w	r2, r2, #8
 8005fc6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0210 	orr.w	r2, r2, #16
 8005fd6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6919      	ldr	r1, [r3, #16]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b3c      	ldr	r3, [pc, #240]	; (80060e4 <SPI_CloseTransfer+0x13c>)
 8005ff4:	400b      	ands	r3, r1
 8005ff6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689a      	ldr	r2, [r3, #8]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006006:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b04      	cmp	r3, #4
 8006012:	d014      	beq.n	800603e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00f      	beq.n	800603e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006024:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699a      	ldr	r2, [r3, #24]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f042 0220 	orr.w	r2, r2, #32
 800603c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b03      	cmp	r3, #3
 8006048:	d014      	beq.n	8006074 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00f      	beq.n	8006074 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800605a:	f043 0204 	orr.w	r2, r3, #4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006072:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00f      	beq.n	800609e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006084:	f043 0201 	orr.w	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699a      	ldr	r2, [r3, #24]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800609c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00f      	beq.n	80060c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ae:	f043 0208 	orr.w	r2, r3, #8
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80060d8:	bf00      	nop
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	fffffc90 	.word	0xfffffc90

080060e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	603b      	str	r3, [r7, #0]
 80060f4:	4613      	mov	r3, r2
 80060f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80060f8:	e010      	b.n	800611c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060fa:	f7fb f9a3 	bl	8001444 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	429a      	cmp	r2, r3
 8006108:	d803      	bhi.n	8006112 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006110:	d102      	bne.n	8006118 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e00f      	b.n	800613c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695a      	ldr	r2, [r3, #20]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4013      	ands	r3, r2
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	429a      	cmp	r2, r3
 8006138:	d0df      	beq.n	80060fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	3301      	adds	r3, #1
 8006154:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	3307      	adds	r3, #7
 8006162:	08db      	lsrs	r3, r3, #3
 8006164:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	fb02 f303 	mul.w	r3, r2, r3
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b082      	sub	sp, #8
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e042      	b.n	8006212 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7fa ff7c 	bl	800109c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2224      	movs	r2, #36	; 0x24
 80061a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f8c3 	bl	8006348 <UART_SetConfig>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e022      	b.n	8006212 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fe1f 	bl	8006e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 fea6 	bl	8006f5c <UART_CheckIdleState>
 8006210:	4603      	mov	r3, r0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b08a      	sub	sp, #40	; 0x28
 800621e:	af02      	add	r7, sp, #8
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	4613      	mov	r3, r2
 8006228:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006230:	2b20      	cmp	r3, #32
 8006232:	f040 8083 	bne.w	800633c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_UART_Transmit+0x28>
 800623c:	88fb      	ldrh	r3, [r7, #6]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e07b      	b.n	800633e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_UART_Transmit+0x3a>
 8006250:	2302      	movs	r3, #2
 8006252:	e074      	b.n	800633e <HAL_UART_Transmit+0x124>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2221      	movs	r2, #33	; 0x21
 8006268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800626c:	f7fb f8ea 	bl	8001444 <HAL_GetTick>
 8006270:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	88fa      	ldrh	r2, [r7, #6]
 800627e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628a:	d108      	bne.n	800629e <HAL_UART_Transmit+0x84>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006294:	2300      	movs	r3, #0
 8006296:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e003      	b.n	80062a6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80062ae:	e02c      	b.n	800630a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2200      	movs	r2, #0
 80062b8:	2180      	movs	r1, #128	; 0x80
 80062ba:	68f8      	ldr	r0, [r7, #12]
 80062bc:	f000 fe99 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e039      	b.n	800633e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10b      	bne.n	80062e8 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	3302      	adds	r3, #2
 80062e4:	61bb      	str	r3, [r7, #24]
 80062e6:	e007      	b.n	80062f8 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	781a      	ldrb	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	3301      	adds	r3, #1
 80062f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006310:	b29b      	uxth	r3, r3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1cc      	bne.n	80062b0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2200      	movs	r2, #0
 800631e:	2140      	movs	r1, #64	; 0x40
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fe66 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e006      	b.n	800633e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	e000      	b.n	800633e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800633c:	2302      	movs	r3, #2
  }
}
 800633e:	4618      	mov	r0, r3
 8006340:	3720      	adds	r7, #32
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800634c:	b092      	sub	sp, #72	; 0x48
 800634e:	af00      	add	r7, sp, #0
 8006350:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	431a      	orrs	r2, r3
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	431a      	orrs	r2, r3
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	4313      	orrs	r3, r2
 800636e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4bbe      	ldr	r3, [pc, #760]	; (8006670 <UART_SetConfig+0x328>)
 8006378:	4013      	ands	r3, r2
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006380:	430b      	orrs	r3, r1
 8006382:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4ab3      	ldr	r2, [pc, #716]	; (8006674 <UART_SetConfig+0x32c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063b0:	4313      	orrs	r3, r2
 80063b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	4baf      	ldr	r3, [pc, #700]	; (8006678 <UART_SetConfig+0x330>)
 80063bc:	4013      	ands	r3, r2
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	6812      	ldr	r2, [r2, #0]
 80063c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063c4:	430b      	orrs	r3, r1
 80063c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ce:	f023 010f 	bic.w	r1, r3, #15
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	430a      	orrs	r2, r1
 80063dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4aa6      	ldr	r2, [pc, #664]	; (800667c <UART_SetConfig+0x334>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d177      	bne.n	80064d8 <UART_SetConfig+0x190>
 80063e8:	4ba5      	ldr	r3, [pc, #660]	; (8006680 <UART_SetConfig+0x338>)
 80063ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063f0:	2b28      	cmp	r3, #40	; 0x28
 80063f2:	d86d      	bhi.n	80064d0 <UART_SetConfig+0x188>
 80063f4:	a201      	add	r2, pc, #4	; (adr r2, 80063fc <UART_SetConfig+0xb4>)
 80063f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fa:	bf00      	nop
 80063fc:	080064a1 	.word	0x080064a1
 8006400:	080064d1 	.word	0x080064d1
 8006404:	080064d1 	.word	0x080064d1
 8006408:	080064d1 	.word	0x080064d1
 800640c:	080064d1 	.word	0x080064d1
 8006410:	080064d1 	.word	0x080064d1
 8006414:	080064d1 	.word	0x080064d1
 8006418:	080064d1 	.word	0x080064d1
 800641c:	080064a9 	.word	0x080064a9
 8006420:	080064d1 	.word	0x080064d1
 8006424:	080064d1 	.word	0x080064d1
 8006428:	080064d1 	.word	0x080064d1
 800642c:	080064d1 	.word	0x080064d1
 8006430:	080064d1 	.word	0x080064d1
 8006434:	080064d1 	.word	0x080064d1
 8006438:	080064d1 	.word	0x080064d1
 800643c:	080064b1 	.word	0x080064b1
 8006440:	080064d1 	.word	0x080064d1
 8006444:	080064d1 	.word	0x080064d1
 8006448:	080064d1 	.word	0x080064d1
 800644c:	080064d1 	.word	0x080064d1
 8006450:	080064d1 	.word	0x080064d1
 8006454:	080064d1 	.word	0x080064d1
 8006458:	080064d1 	.word	0x080064d1
 800645c:	080064b9 	.word	0x080064b9
 8006460:	080064d1 	.word	0x080064d1
 8006464:	080064d1 	.word	0x080064d1
 8006468:	080064d1 	.word	0x080064d1
 800646c:	080064d1 	.word	0x080064d1
 8006470:	080064d1 	.word	0x080064d1
 8006474:	080064d1 	.word	0x080064d1
 8006478:	080064d1 	.word	0x080064d1
 800647c:	080064c1 	.word	0x080064c1
 8006480:	080064d1 	.word	0x080064d1
 8006484:	080064d1 	.word	0x080064d1
 8006488:	080064d1 	.word	0x080064d1
 800648c:	080064d1 	.word	0x080064d1
 8006490:	080064d1 	.word	0x080064d1
 8006494:	080064d1 	.word	0x080064d1
 8006498:	080064d1 	.word	0x080064d1
 800649c:	080064c9 	.word	0x080064c9
 80064a0:	2301      	movs	r3, #1
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e222      	b.n	80068ee <UART_SetConfig+0x5a6>
 80064a8:	2304      	movs	r3, #4
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e21e      	b.n	80068ee <UART_SetConfig+0x5a6>
 80064b0:	2308      	movs	r3, #8
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e21a      	b.n	80068ee <UART_SetConfig+0x5a6>
 80064b8:	2310      	movs	r3, #16
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e216      	b.n	80068ee <UART_SetConfig+0x5a6>
 80064c0:	2320      	movs	r3, #32
 80064c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064c6:	e212      	b.n	80068ee <UART_SetConfig+0x5a6>
 80064c8:	2340      	movs	r3, #64	; 0x40
 80064ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ce:	e20e      	b.n	80068ee <UART_SetConfig+0x5a6>
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d6:	e20a      	b.n	80068ee <UART_SetConfig+0x5a6>
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a69      	ldr	r2, [pc, #420]	; (8006684 <UART_SetConfig+0x33c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d130      	bne.n	8006544 <UART_SetConfig+0x1fc>
 80064e2:	4b67      	ldr	r3, [pc, #412]	; (8006680 <UART_SetConfig+0x338>)
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	2b05      	cmp	r3, #5
 80064ec:	d826      	bhi.n	800653c <UART_SetConfig+0x1f4>
 80064ee:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <UART_SetConfig+0x1ac>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	0800650d 	.word	0x0800650d
 80064f8:	08006515 	.word	0x08006515
 80064fc:	0800651d 	.word	0x0800651d
 8006500:	08006525 	.word	0x08006525
 8006504:	0800652d 	.word	0x0800652d
 8006508:	08006535 	.word	0x08006535
 800650c:	2300      	movs	r3, #0
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006512:	e1ec      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006514:	2304      	movs	r3, #4
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651a:	e1e8      	b.n	80068ee <UART_SetConfig+0x5a6>
 800651c:	2308      	movs	r3, #8
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e1e4      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006524:	2310      	movs	r3, #16
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e1e0      	b.n	80068ee <UART_SetConfig+0x5a6>
 800652c:	2320      	movs	r3, #32
 800652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006532:	e1dc      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006534:	2340      	movs	r3, #64	; 0x40
 8006536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653a:	e1d8      	b.n	80068ee <UART_SetConfig+0x5a6>
 800653c:	2380      	movs	r3, #128	; 0x80
 800653e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006542:	e1d4      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a4f      	ldr	r2, [pc, #316]	; (8006688 <UART_SetConfig+0x340>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d130      	bne.n	80065b0 <UART_SetConfig+0x268>
 800654e:	4b4c      	ldr	r3, [pc, #304]	; (8006680 <UART_SetConfig+0x338>)
 8006550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	2b05      	cmp	r3, #5
 8006558:	d826      	bhi.n	80065a8 <UART_SetConfig+0x260>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0x218>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006579 	.word	0x08006579
 8006564:	08006581 	.word	0x08006581
 8006568:	08006589 	.word	0x08006589
 800656c:	08006591 	.word	0x08006591
 8006570:	08006599 	.word	0x08006599
 8006574:	080065a1 	.word	0x080065a1
 8006578:	2300      	movs	r3, #0
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657e:	e1b6      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006580:	2304      	movs	r3, #4
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006586:	e1b2      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006588:	2308      	movs	r3, #8
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658e:	e1ae      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006590:	2310      	movs	r3, #16
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e1aa      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006598:	2320      	movs	r3, #32
 800659a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800659e:	e1a6      	b.n	80068ee <UART_SetConfig+0x5a6>
 80065a0:	2340      	movs	r3, #64	; 0x40
 80065a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a6:	e1a2      	b.n	80068ee <UART_SetConfig+0x5a6>
 80065a8:	2380      	movs	r3, #128	; 0x80
 80065aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ae:	e19e      	b.n	80068ee <UART_SetConfig+0x5a6>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a35      	ldr	r2, [pc, #212]	; (800668c <UART_SetConfig+0x344>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d130      	bne.n	800661c <UART_SetConfig+0x2d4>
 80065ba:	4b31      	ldr	r3, [pc, #196]	; (8006680 <UART_SetConfig+0x338>)
 80065bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065be:	f003 0307 	and.w	r3, r3, #7
 80065c2:	2b05      	cmp	r3, #5
 80065c4:	d826      	bhi.n	8006614 <UART_SetConfig+0x2cc>
 80065c6:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <UART_SetConfig+0x284>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	080065e5 	.word	0x080065e5
 80065d0:	080065ed 	.word	0x080065ed
 80065d4:	080065f5 	.word	0x080065f5
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660d 	.word	0x0800660d
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ea:	e180      	b.n	80068ee <UART_SetConfig+0x5a6>
 80065ec:	2304      	movs	r3, #4
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e17c      	b.n	80068ee <UART_SetConfig+0x5a6>
 80065f4:	2308      	movs	r3, #8
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e178      	b.n	80068ee <UART_SetConfig+0x5a6>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e174      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006604:	2320      	movs	r3, #32
 8006606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660a:	e170      	b.n	80068ee <UART_SetConfig+0x5a6>
 800660c:	2340      	movs	r3, #64	; 0x40
 800660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006612:	e16c      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006614:	2380      	movs	r3, #128	; 0x80
 8006616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661a:	e168      	b.n	80068ee <UART_SetConfig+0x5a6>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <UART_SetConfig+0x348>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d142      	bne.n	80066ac <UART_SetConfig+0x364>
 8006626:	4b16      	ldr	r3, [pc, #88]	; (8006680 <UART_SetConfig+0x338>)
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	2b05      	cmp	r3, #5
 8006630:	d838      	bhi.n	80066a4 <UART_SetConfig+0x35c>
 8006632:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0x2f0>)
 8006634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006638:	08006651 	.word	0x08006651
 800663c:	08006659 	.word	0x08006659
 8006640:	08006661 	.word	0x08006661
 8006644:	08006669 	.word	0x08006669
 8006648:	08006695 	.word	0x08006695
 800664c:	0800669d 	.word	0x0800669d
 8006650:	2300      	movs	r3, #0
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006656:	e14a      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006658:	2304      	movs	r3, #4
 800665a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665e:	e146      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006660:	2308      	movs	r3, #8
 8006662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006666:	e142      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006668:	2310      	movs	r3, #16
 800666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666e:	e13e      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006670:	cfff69f3 	.word	0xcfff69f3
 8006674:	58000c00 	.word	0x58000c00
 8006678:	11fff4ff 	.word	0x11fff4ff
 800667c:	40011000 	.word	0x40011000
 8006680:	58024400 	.word	0x58024400
 8006684:	40004400 	.word	0x40004400
 8006688:	40004800 	.word	0x40004800
 800668c:	40004c00 	.word	0x40004c00
 8006690:	40005000 	.word	0x40005000
 8006694:	2320      	movs	r3, #32
 8006696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800669a:	e128      	b.n	80068ee <UART_SetConfig+0x5a6>
 800669c:	2340      	movs	r3, #64	; 0x40
 800669e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066a2:	e124      	b.n	80068ee <UART_SetConfig+0x5a6>
 80066a4:	2380      	movs	r3, #128	; 0x80
 80066a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066aa:	e120      	b.n	80068ee <UART_SetConfig+0x5a6>
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4acb      	ldr	r2, [pc, #812]	; (80069e0 <UART_SetConfig+0x698>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d176      	bne.n	80067a4 <UART_SetConfig+0x45c>
 80066b6:	4bcb      	ldr	r3, [pc, #812]	; (80069e4 <UART_SetConfig+0x69c>)
 80066b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066be:	2b28      	cmp	r3, #40	; 0x28
 80066c0:	d86c      	bhi.n	800679c <UART_SetConfig+0x454>
 80066c2:	a201      	add	r2, pc, #4	; (adr r2, 80066c8 <UART_SetConfig+0x380>)
 80066c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c8:	0800676d 	.word	0x0800676d
 80066cc:	0800679d 	.word	0x0800679d
 80066d0:	0800679d 	.word	0x0800679d
 80066d4:	0800679d 	.word	0x0800679d
 80066d8:	0800679d 	.word	0x0800679d
 80066dc:	0800679d 	.word	0x0800679d
 80066e0:	0800679d 	.word	0x0800679d
 80066e4:	0800679d 	.word	0x0800679d
 80066e8:	08006775 	.word	0x08006775
 80066ec:	0800679d 	.word	0x0800679d
 80066f0:	0800679d 	.word	0x0800679d
 80066f4:	0800679d 	.word	0x0800679d
 80066f8:	0800679d 	.word	0x0800679d
 80066fc:	0800679d 	.word	0x0800679d
 8006700:	0800679d 	.word	0x0800679d
 8006704:	0800679d 	.word	0x0800679d
 8006708:	0800677d 	.word	0x0800677d
 800670c:	0800679d 	.word	0x0800679d
 8006710:	0800679d 	.word	0x0800679d
 8006714:	0800679d 	.word	0x0800679d
 8006718:	0800679d 	.word	0x0800679d
 800671c:	0800679d 	.word	0x0800679d
 8006720:	0800679d 	.word	0x0800679d
 8006724:	0800679d 	.word	0x0800679d
 8006728:	08006785 	.word	0x08006785
 800672c:	0800679d 	.word	0x0800679d
 8006730:	0800679d 	.word	0x0800679d
 8006734:	0800679d 	.word	0x0800679d
 8006738:	0800679d 	.word	0x0800679d
 800673c:	0800679d 	.word	0x0800679d
 8006740:	0800679d 	.word	0x0800679d
 8006744:	0800679d 	.word	0x0800679d
 8006748:	0800678d 	.word	0x0800678d
 800674c:	0800679d 	.word	0x0800679d
 8006750:	0800679d 	.word	0x0800679d
 8006754:	0800679d 	.word	0x0800679d
 8006758:	0800679d 	.word	0x0800679d
 800675c:	0800679d 	.word	0x0800679d
 8006760:	0800679d 	.word	0x0800679d
 8006764:	0800679d 	.word	0x0800679d
 8006768:	08006795 	.word	0x08006795
 800676c:	2301      	movs	r3, #1
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006772:	e0bc      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006774:	2304      	movs	r3, #4
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e0b8      	b.n	80068ee <UART_SetConfig+0x5a6>
 800677c:	2308      	movs	r3, #8
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e0b4      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006784:	2310      	movs	r3, #16
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e0b0      	b.n	80068ee <UART_SetConfig+0x5a6>
 800678c:	2320      	movs	r3, #32
 800678e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006792:	e0ac      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006794:	2340      	movs	r3, #64	; 0x40
 8006796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679a:	e0a8      	b.n	80068ee <UART_SetConfig+0x5a6>
 800679c:	2380      	movs	r3, #128	; 0x80
 800679e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a2:	e0a4      	b.n	80068ee <UART_SetConfig+0x5a6>
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a8f      	ldr	r2, [pc, #572]	; (80069e8 <UART_SetConfig+0x6a0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d130      	bne.n	8006810 <UART_SetConfig+0x4c8>
 80067ae:	4b8d      	ldr	r3, [pc, #564]	; (80069e4 <UART_SetConfig+0x69c>)
 80067b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b05      	cmp	r3, #5
 80067b8:	d826      	bhi.n	8006808 <UART_SetConfig+0x4c0>
 80067ba:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <UART_SetConfig+0x478>)
 80067bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c0:	080067d9 	.word	0x080067d9
 80067c4:	080067e1 	.word	0x080067e1
 80067c8:	080067e9 	.word	0x080067e9
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	08006801 	.word	0x08006801
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067de:	e086      	b.n	80068ee <UART_SetConfig+0x5a6>
 80067e0:	2304      	movs	r3, #4
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e082      	b.n	80068ee <UART_SetConfig+0x5a6>
 80067e8:	2308      	movs	r3, #8
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ee:	e07e      	b.n	80068ee <UART_SetConfig+0x5a6>
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e07a      	b.n	80068ee <UART_SetConfig+0x5a6>
 80067f8:	2320      	movs	r3, #32
 80067fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fe:	e076      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006800:	2340      	movs	r3, #64	; 0x40
 8006802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006806:	e072      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006808:	2380      	movs	r3, #128	; 0x80
 800680a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680e:	e06e      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a75      	ldr	r2, [pc, #468]	; (80069ec <UART_SetConfig+0x6a4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d130      	bne.n	800687c <UART_SetConfig+0x534>
 800681a:	4b72      	ldr	r3, [pc, #456]	; (80069e4 <UART_SetConfig+0x69c>)
 800681c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	2b05      	cmp	r3, #5
 8006824:	d826      	bhi.n	8006874 <UART_SetConfig+0x52c>
 8006826:	a201      	add	r2, pc, #4	; (adr r2, 800682c <UART_SetConfig+0x4e4>)
 8006828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682c:	08006845 	.word	0x08006845
 8006830:	0800684d 	.word	0x0800684d
 8006834:	08006855 	.word	0x08006855
 8006838:	0800685d 	.word	0x0800685d
 800683c:	08006865 	.word	0x08006865
 8006840:	0800686d 	.word	0x0800686d
 8006844:	2300      	movs	r3, #0
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684a:	e050      	b.n	80068ee <UART_SetConfig+0x5a6>
 800684c:	2304      	movs	r3, #4
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006852:	e04c      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006854:	2308      	movs	r3, #8
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685a:	e048      	b.n	80068ee <UART_SetConfig+0x5a6>
 800685c:	2310      	movs	r3, #16
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006862:	e044      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006864:	2320      	movs	r3, #32
 8006866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686a:	e040      	b.n	80068ee <UART_SetConfig+0x5a6>
 800686c:	2340      	movs	r3, #64	; 0x40
 800686e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006872:	e03c      	b.n	80068ee <UART_SetConfig+0x5a6>
 8006874:	2380      	movs	r3, #128	; 0x80
 8006876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687a:	e038      	b.n	80068ee <UART_SetConfig+0x5a6>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a5b      	ldr	r2, [pc, #364]	; (80069f0 <UART_SetConfig+0x6a8>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d130      	bne.n	80068e8 <UART_SetConfig+0x5a0>
 8006886:	4b57      	ldr	r3, [pc, #348]	; (80069e4 <UART_SetConfig+0x69c>)
 8006888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	2b05      	cmp	r3, #5
 8006890:	d826      	bhi.n	80068e0 <UART_SetConfig+0x598>
 8006892:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <UART_SetConfig+0x550>)
 8006894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006898:	080068b1 	.word	0x080068b1
 800689c:	080068b9 	.word	0x080068b9
 80068a0:	080068c1 	.word	0x080068c1
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	080068d1 	.word	0x080068d1
 80068ac:	080068d9 	.word	0x080068d9
 80068b0:	2302      	movs	r3, #2
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068b6:	e01a      	b.n	80068ee <UART_SetConfig+0x5a6>
 80068b8:	2304      	movs	r3, #4
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068be:	e016      	b.n	80068ee <UART_SetConfig+0x5a6>
 80068c0:	2308      	movs	r3, #8
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068c6:	e012      	b.n	80068ee <UART_SetConfig+0x5a6>
 80068c8:	2310      	movs	r3, #16
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ce:	e00e      	b.n	80068ee <UART_SetConfig+0x5a6>
 80068d0:	2320      	movs	r3, #32
 80068d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068d6:	e00a      	b.n	80068ee <UART_SetConfig+0x5a6>
 80068d8:	2340      	movs	r3, #64	; 0x40
 80068da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068de:	e006      	b.n	80068ee <UART_SetConfig+0x5a6>
 80068e0:	2380      	movs	r3, #128	; 0x80
 80068e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e6:	e002      	b.n	80068ee <UART_SetConfig+0x5a6>
 80068e8:	2380      	movs	r3, #128	; 0x80
 80068ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a3f      	ldr	r2, [pc, #252]	; (80069f0 <UART_SetConfig+0x6a8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	f040 80f8 	bne.w	8006aea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068fe:	2b20      	cmp	r3, #32
 8006900:	dc46      	bgt.n	8006990 <UART_SetConfig+0x648>
 8006902:	2b02      	cmp	r3, #2
 8006904:	f2c0 8082 	blt.w	8006a0c <UART_SetConfig+0x6c4>
 8006908:	3b02      	subs	r3, #2
 800690a:	2b1e      	cmp	r3, #30
 800690c:	d87e      	bhi.n	8006a0c <UART_SetConfig+0x6c4>
 800690e:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <UART_SetConfig+0x5cc>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	08006997 	.word	0x08006997
 8006918:	08006a0d 	.word	0x08006a0d
 800691c:	0800699f 	.word	0x0800699f
 8006920:	08006a0d 	.word	0x08006a0d
 8006924:	08006a0d 	.word	0x08006a0d
 8006928:	08006a0d 	.word	0x08006a0d
 800692c:	080069af 	.word	0x080069af
 8006930:	08006a0d 	.word	0x08006a0d
 8006934:	08006a0d 	.word	0x08006a0d
 8006938:	08006a0d 	.word	0x08006a0d
 800693c:	08006a0d 	.word	0x08006a0d
 8006940:	08006a0d 	.word	0x08006a0d
 8006944:	08006a0d 	.word	0x08006a0d
 8006948:	08006a0d 	.word	0x08006a0d
 800694c:	080069bf 	.word	0x080069bf
 8006950:	08006a0d 	.word	0x08006a0d
 8006954:	08006a0d 	.word	0x08006a0d
 8006958:	08006a0d 	.word	0x08006a0d
 800695c:	08006a0d 	.word	0x08006a0d
 8006960:	08006a0d 	.word	0x08006a0d
 8006964:	08006a0d 	.word	0x08006a0d
 8006968:	08006a0d 	.word	0x08006a0d
 800696c:	08006a0d 	.word	0x08006a0d
 8006970:	08006a0d 	.word	0x08006a0d
 8006974:	08006a0d 	.word	0x08006a0d
 8006978:	08006a0d 	.word	0x08006a0d
 800697c:	08006a0d 	.word	0x08006a0d
 8006980:	08006a0d 	.word	0x08006a0d
 8006984:	08006a0d 	.word	0x08006a0d
 8006988:	08006a0d 	.word	0x08006a0d
 800698c:	080069ff 	.word	0x080069ff
 8006990:	2b40      	cmp	r3, #64	; 0x40
 8006992:	d037      	beq.n	8006a04 <UART_SetConfig+0x6bc>
 8006994:	e03a      	b.n	8006a0c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006996:	f7fe f9df 	bl	8004d58 <HAL_RCCEx_GetD3PCLK1Freq>
 800699a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800699c:	e03c      	b.n	8006a18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800699e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe f9ee 	bl	8004d84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ac:	e034      	b.n	8006a18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ae:	f107 0318 	add.w	r3, r7, #24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe fb3a 	bl	800502c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069bc:	e02c      	b.n	8006a18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069be:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <UART_SetConfig+0x69c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d016      	beq.n	80069f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069ca:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <UART_SetConfig+0x69c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	08db      	lsrs	r3, r3, #3
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	4a07      	ldr	r2, [pc, #28]	; (80069f4 <UART_SetConfig+0x6ac>)
 80069d6:	fa22 f303 	lsr.w	r3, r2, r3
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069dc:	e01c      	b.n	8006a18 <UART_SetConfig+0x6d0>
 80069de:	bf00      	nop
 80069e0:	40011400 	.word	0x40011400
 80069e4:	58024400 	.word	0x58024400
 80069e8:	40007800 	.word	0x40007800
 80069ec:	40007c00 	.word	0x40007c00
 80069f0:	58000c00 	.word	0x58000c00
 80069f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80069f8:	4b9d      	ldr	r3, [pc, #628]	; (8006c70 <UART_SetConfig+0x928>)
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069fc:	e00c      	b.n	8006a18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069fe:	4b9d      	ldr	r3, [pc, #628]	; (8006c74 <UART_SetConfig+0x92c>)
 8006a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a02:	e009      	b.n	8006a18 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a0a:	e005      	b.n	8006a18 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a16:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 81de 	beq.w	8006ddc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	4a94      	ldr	r2, [pc, #592]	; (8006c78 <UART_SetConfig+0x930>)
 8006a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a32:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	4413      	add	r3, r2
 8006a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d305      	bcc.n	8006a50 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d903      	bls.n	8006a58 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a56:	e1c1      	b.n	8006ddc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	60fa      	str	r2, [r7, #12]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	4a84      	ldr	r2, [pc, #528]	; (8006c78 <UART_SetConfig+0x930>)
 8006a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a7a:	f7f9 fc2d 	bl	80002d8 <__aeabi_uldivmod>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4610      	mov	r0, r2
 8006a84:	4619      	mov	r1, r3
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	020b      	lsls	r3, r1, #8
 8006a90:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a94:	0202      	lsls	r2, r0, #8
 8006a96:	6979      	ldr	r1, [r7, #20]
 8006a98:	6849      	ldr	r1, [r1, #4]
 8006a9a:	0849      	lsrs	r1, r1, #1
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	eb12 0804 	adds.w	r8, r2, r4
 8006aa6:	eb43 0905 	adc.w	r9, r3, r5
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	469a      	mov	sl, r3
 8006ab2:	4693      	mov	fp, r2
 8006ab4:	4652      	mov	r2, sl
 8006ab6:	465b      	mov	r3, fp
 8006ab8:	4640      	mov	r0, r8
 8006aba:	4649      	mov	r1, r9
 8006abc:	f7f9 fc0c 	bl	80002d8 <__aeabi_uldivmod>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ace:	d308      	bcc.n	8006ae2 <UART_SetConfig+0x79a>
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ad6:	d204      	bcs.n	8006ae2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ade:	60da      	str	r2, [r3, #12]
 8006ae0:	e17c      	b.n	8006ddc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006ae8:	e178      	b.n	8006ddc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af2:	f040 80c5 	bne.w	8006c80 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006af6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006afa:	2b20      	cmp	r3, #32
 8006afc:	dc48      	bgt.n	8006b90 <UART_SetConfig+0x848>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	db7b      	blt.n	8006bfa <UART_SetConfig+0x8b2>
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d879      	bhi.n	8006bfa <UART_SetConfig+0x8b2>
 8006b06:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <UART_SetConfig+0x7c4>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b97 	.word	0x08006b97
 8006b10:	08006b9f 	.word	0x08006b9f
 8006b14:	08006bfb 	.word	0x08006bfb
 8006b18:	08006bfb 	.word	0x08006bfb
 8006b1c:	08006ba7 	.word	0x08006ba7
 8006b20:	08006bfb 	.word	0x08006bfb
 8006b24:	08006bfb 	.word	0x08006bfb
 8006b28:	08006bfb 	.word	0x08006bfb
 8006b2c:	08006bb7 	.word	0x08006bb7
 8006b30:	08006bfb 	.word	0x08006bfb
 8006b34:	08006bfb 	.word	0x08006bfb
 8006b38:	08006bfb 	.word	0x08006bfb
 8006b3c:	08006bfb 	.word	0x08006bfb
 8006b40:	08006bfb 	.word	0x08006bfb
 8006b44:	08006bfb 	.word	0x08006bfb
 8006b48:	08006bfb 	.word	0x08006bfb
 8006b4c:	08006bc7 	.word	0x08006bc7
 8006b50:	08006bfb 	.word	0x08006bfb
 8006b54:	08006bfb 	.word	0x08006bfb
 8006b58:	08006bfb 	.word	0x08006bfb
 8006b5c:	08006bfb 	.word	0x08006bfb
 8006b60:	08006bfb 	.word	0x08006bfb
 8006b64:	08006bfb 	.word	0x08006bfb
 8006b68:	08006bfb 	.word	0x08006bfb
 8006b6c:	08006bfb 	.word	0x08006bfb
 8006b70:	08006bfb 	.word	0x08006bfb
 8006b74:	08006bfb 	.word	0x08006bfb
 8006b78:	08006bfb 	.word	0x08006bfb
 8006b7c:	08006bfb 	.word	0x08006bfb
 8006b80:	08006bfb 	.word	0x08006bfb
 8006b84:	08006bfb 	.word	0x08006bfb
 8006b88:	08006bfb 	.word	0x08006bfb
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	2b40      	cmp	r3, #64	; 0x40
 8006b92:	d02e      	beq.n	8006bf2 <UART_SetConfig+0x8aa>
 8006b94:	e031      	b.n	8006bfa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b96:	f7fd f96d 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8006b9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b9c:	e033      	b.n	8006c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b9e:	f7fd f97f 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8006ba2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006ba4:	e02f      	b.n	8006c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fe f8ea 	bl	8004d84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bb4:	e027      	b.n	8006c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bb6:	f107 0318 	add.w	r3, r7, #24
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fa36 	bl	800502c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bc4:	e01f      	b.n	8006c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bc6:	4b2d      	ldr	r3, [pc, #180]	; (8006c7c <UART_SetConfig+0x934>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bd2:	4b2a      	ldr	r3, [pc, #168]	; (8006c7c <UART_SetConfig+0x934>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	08db      	lsrs	r3, r3, #3
 8006bd8:	f003 0303 	and.w	r3, r3, #3
 8006bdc:	4a24      	ldr	r2, [pc, #144]	; (8006c70 <UART_SetConfig+0x928>)
 8006bde:	fa22 f303 	lsr.w	r3, r2, r3
 8006be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006be4:	e00f      	b.n	8006c06 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006be6:	4b22      	ldr	r3, [pc, #136]	; (8006c70 <UART_SetConfig+0x928>)
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bea:	e00c      	b.n	8006c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bec:	4b21      	ldr	r3, [pc, #132]	; (8006c74 <UART_SetConfig+0x92c>)
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf0:	e009      	b.n	8006c06 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bf8:	e005      	b.n	8006c06 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80e7 	beq.w	8006ddc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	4a19      	ldr	r2, [pc, #100]	; (8006c78 <UART_SetConfig+0x930>)
 8006c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c20:	005a      	lsls	r2, r3, #1
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	441a      	add	r2, r3
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c36:	2b0f      	cmp	r3, #15
 8006c38:	d916      	bls.n	8006c68 <UART_SetConfig+0x920>
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c40:	d212      	bcs.n	8006c68 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f023 030f 	bic.w	r3, r3, #15
 8006c4a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	085b      	lsrs	r3, r3, #1
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c64:	60da      	str	r2, [r3, #12]
 8006c66:	e0b9      	b.n	8006ddc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c6e:	e0b5      	b.n	8006ddc <UART_SetConfig+0xa94>
 8006c70:	03d09000 	.word	0x03d09000
 8006c74:	003d0900 	.word	0x003d0900
 8006c78:	08007a28 	.word	0x08007a28
 8006c7c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	dc49      	bgt.n	8006d1c <UART_SetConfig+0x9d4>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	db7c      	blt.n	8006d86 <UART_SetConfig+0xa3e>
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d87a      	bhi.n	8006d86 <UART_SetConfig+0xa3e>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <UART_SetConfig+0x950>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006d23 	.word	0x08006d23
 8006c9c:	08006d2b 	.word	0x08006d2b
 8006ca0:	08006d87 	.word	0x08006d87
 8006ca4:	08006d87 	.word	0x08006d87
 8006ca8:	08006d33 	.word	0x08006d33
 8006cac:	08006d87 	.word	0x08006d87
 8006cb0:	08006d87 	.word	0x08006d87
 8006cb4:	08006d87 	.word	0x08006d87
 8006cb8:	08006d43 	.word	0x08006d43
 8006cbc:	08006d87 	.word	0x08006d87
 8006cc0:	08006d87 	.word	0x08006d87
 8006cc4:	08006d87 	.word	0x08006d87
 8006cc8:	08006d87 	.word	0x08006d87
 8006ccc:	08006d87 	.word	0x08006d87
 8006cd0:	08006d87 	.word	0x08006d87
 8006cd4:	08006d87 	.word	0x08006d87
 8006cd8:	08006d53 	.word	0x08006d53
 8006cdc:	08006d87 	.word	0x08006d87
 8006ce0:	08006d87 	.word	0x08006d87
 8006ce4:	08006d87 	.word	0x08006d87
 8006ce8:	08006d87 	.word	0x08006d87
 8006cec:	08006d87 	.word	0x08006d87
 8006cf0:	08006d87 	.word	0x08006d87
 8006cf4:	08006d87 	.word	0x08006d87
 8006cf8:	08006d87 	.word	0x08006d87
 8006cfc:	08006d87 	.word	0x08006d87
 8006d00:	08006d87 	.word	0x08006d87
 8006d04:	08006d87 	.word	0x08006d87
 8006d08:	08006d87 	.word	0x08006d87
 8006d0c:	08006d87 	.word	0x08006d87
 8006d10:	08006d87 	.word	0x08006d87
 8006d14:	08006d87 	.word	0x08006d87
 8006d18:	08006d79 	.word	0x08006d79
 8006d1c:	2b40      	cmp	r3, #64	; 0x40
 8006d1e:	d02e      	beq.n	8006d7e <UART_SetConfig+0xa36>
 8006d20:	e031      	b.n	8006d86 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d22:	f7fd f8a7 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8006d26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d28:	e033      	b.n	8006d92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d2a:	f7fd f8b9 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8006d2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d30:	e02f      	b.n	8006d92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fe f824 	bl	8004d84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d40:	e027      	b.n	8006d92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d42:	f107 0318 	add.w	r3, r7, #24
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe f970 	bl	800502c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d50:	e01f      	b.n	8006d92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d52:	4b2d      	ldr	r3, [pc, #180]	; (8006e08 <UART_SetConfig+0xac0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d009      	beq.n	8006d72 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d5e:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <UART_SetConfig+0xac0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	4a28      	ldr	r2, [pc, #160]	; (8006e0c <UART_SetConfig+0xac4>)
 8006d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d70:	e00f      	b.n	8006d92 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d72:	4b26      	ldr	r3, [pc, #152]	; (8006e0c <UART_SetConfig+0xac4>)
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d76:	e00c      	b.n	8006d92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d78:	4b25      	ldr	r3, [pc, #148]	; (8006e10 <UART_SetConfig+0xac8>)
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d7c:	e009      	b.n	8006d92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d84:	e005      	b.n	8006d92 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006d90:	bf00      	nop
    }

    if (pclk != 0U)
 8006d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d021      	beq.n	8006ddc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <UART_SetConfig+0xacc>)
 8006d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da6:	fbb3 f2f2 	udiv	r2, r3, r2
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	441a      	add	r2, r3
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	2b0f      	cmp	r3, #15
 8006dc0:	d909      	bls.n	8006dd6 <UART_SetConfig+0xa8e>
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc8:	d205      	bcs.n	8006dd6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60da      	str	r2, [r3, #12]
 8006dd4:	e002      	b.n	8006ddc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2200      	movs	r2, #0
 8006df0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2200      	movs	r2, #0
 8006df6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006df8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3748      	adds	r7, #72	; 0x48
 8006e00:	46bd      	mov	sp, r7
 8006e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e06:	bf00      	nop
 8006e08:	58024400 	.word	0x58024400
 8006e0c:	03d09000 	.word	0x03d09000
 8006e10:	003d0900 	.word	0x003d0900
 8006e14:	08007a28 	.word	0x08007a28

08006e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00a      	beq.n	8006e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00a      	beq.n	8006e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00a      	beq.n	8006ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01a      	beq.n	8006f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f16:	d10a      	bne.n	8006f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	605a      	str	r2, [r3, #4]
  }
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af02      	add	r7, sp, #8
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f6c:	f7fa fa6a 	bl	8001444 <HAL_GetTick>
 8006f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0308 	and.w	r3, r3, #8
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d10e      	bne.n	8006f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f82f 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e025      	b.n	8006fea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d10e      	bne.n	8006fca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f819 	bl	8006ff2 <UART_WaitOnFlagUntilTimeout>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d001      	beq.n	8006fca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e00f      	b.n	8006fea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b09c      	sub	sp, #112	; 0x70
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	60f8      	str	r0, [r7, #12]
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	4613      	mov	r3, r2
 8007000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007002:	e0a9      	b.n	8007158 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700a:	f000 80a5 	beq.w	8007158 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800700e:	f7fa fa19 	bl	8001444 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800701a:	429a      	cmp	r2, r3
 800701c:	d302      	bcc.n	8007024 <UART_WaitOnFlagUntilTimeout+0x32>
 800701e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007020:	2b00      	cmp	r3, #0
 8007022:	d140      	bne.n	80070a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800702c:	e853 3f00 	ldrex	r3, [r3]
 8007030:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007038:	667b      	str	r3, [r7, #100]	; 0x64
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007042:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007044:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007046:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007048:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800704a:	e841 2300 	strex	r3, r2, [r1]
 800704e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007052:	2b00      	cmp	r3, #0
 8007054:	d1e6      	bne.n	8007024 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007068:	f023 0301 	bic.w	r3, r3, #1
 800706c:	663b      	str	r3, [r7, #96]	; 0x60
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007076:	64ba      	str	r2, [r7, #72]	; 0x48
 8007078:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800707c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707e:	e841 2300 	strex	r3, r2, [r1]
 8007082:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1e5      	bne.n	8007056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2220      	movs	r2, #32
 8007096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e069      	b.n	800717a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d051      	beq.n	8007158 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c2:	d149      	bne.n	8007158 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	461a      	mov	r2, r3
 80070ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ec:	637b      	str	r3, [r7, #52]	; 0x34
 80070ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e6      	bne.n	80070ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3308      	adds	r3, #8
 8007106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	613b      	str	r3, [r7, #16]
   return(result);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f023 0301 	bic.w	r3, r3, #1
 8007116:	66bb      	str	r3, [r7, #104]	; 0x68
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007120:	623a      	str	r2, [r7, #32]
 8007122:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	69f9      	ldr	r1, [r7, #28]
 8007126:	6a3a      	ldr	r2, [r7, #32]
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	61bb      	str	r3, [r7, #24]
   return(result);
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e5      	bne.n	8007100 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2220      	movs	r2, #32
 8007140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2220      	movs	r2, #32
 8007148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e010      	b.n	800717a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69da      	ldr	r2, [r3, #28]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	4013      	ands	r3, r2
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	429a      	cmp	r2, r3
 8007166:	bf0c      	ite	eq
 8007168:	2301      	moveq	r3, #1
 800716a:	2300      	movne	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	429a      	cmp	r2, r3
 8007174:	f43f af46 	beq.w	8007004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3770      	adds	r7, #112	; 0x70
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007190:	2b01      	cmp	r3, #1
 8007192:	d101      	bne.n	8007198 <HAL_UARTEx_DisableFifoMode+0x16>
 8007194:	2302      	movs	r3, #2
 8007196:	e027      	b.n	80071e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2224      	movs	r2, #36	; 0x24
 80071a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f022 0201 	bic.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80071c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007204:	2b01      	cmp	r3, #1
 8007206:	d101      	bne.n	800720c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007208:	2302      	movs	r3, #2
 800720a:	e02d      	b.n	8007268 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2224      	movs	r2, #36	; 0x24
 8007218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0201 	bic.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f84f 	bl	80072ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3710      	adds	r7, #16
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007280:	2b01      	cmp	r3, #1
 8007282:	d101      	bne.n	8007288 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007284:	2302      	movs	r3, #2
 8007286:	e02d      	b.n	80072e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2224      	movs	r2, #36	; 0x24
 8007294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 0201 	bic.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f811 	bl	80072ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b085      	sub	sp, #20
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d108      	bne.n	800730e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800730c:	e031      	b.n	8007372 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800730e:	2310      	movs	r3, #16
 8007310:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007312:	2310      	movs	r3, #16
 8007314:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	0e5b      	lsrs	r3, r3, #25
 800731e:	b2db      	uxtb	r3, r3
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	0f5b      	lsrs	r3, r3, #29
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007336:	7bbb      	ldrb	r3, [r7, #14]
 8007338:	7b3a      	ldrb	r2, [r7, #12]
 800733a:	4911      	ldr	r1, [pc, #68]	; (8007380 <UARTEx_SetNbDataToProcess+0x94>)
 800733c:	5c8a      	ldrb	r2, [r1, r2]
 800733e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007342:	7b3a      	ldrb	r2, [r7, #12]
 8007344:	490f      	ldr	r1, [pc, #60]	; (8007384 <UARTEx_SetNbDataToProcess+0x98>)
 8007346:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007348:	fb93 f3f2 	sdiv	r3, r3, r2
 800734c:	b29a      	uxth	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007354:	7bfb      	ldrb	r3, [r7, #15]
 8007356:	7b7a      	ldrb	r2, [r7, #13]
 8007358:	4909      	ldr	r1, [pc, #36]	; (8007380 <UARTEx_SetNbDataToProcess+0x94>)
 800735a:	5c8a      	ldrb	r2, [r1, r2]
 800735c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007360:	7b7a      	ldrb	r2, [r7, #13]
 8007362:	4908      	ldr	r1, [pc, #32]	; (8007384 <UARTEx_SetNbDataToProcess+0x98>)
 8007364:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007366:	fb93 f3f2 	sdiv	r3, r3, r2
 800736a:	b29a      	uxth	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007372:	bf00      	nop
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	08007a40 	.word	0x08007a40
 8007384:	08007a48 	.word	0x08007a48

08007388 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007388:	b084      	sub	sp, #16
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	f107 001c 	add.w	r0, r7, #28
 8007396:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2b01      	cmp	r3, #1
 800739e:	d120      	bne.n	80073e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	4b2a      	ldr	r3, [pc, #168]	; (800745c <USB_CoreInit+0xd4>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d105      	bne.n	80073d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 faac 	bl	8007934 <USB_CoreReset>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]
 80073e0:	e01a      	b.n	8007418 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 faa0 	bl	8007934 <USB_CoreReset>
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	639a      	str	r2, [r3, #56]	; 0x38
 800740a:	e005      	b.n	8007418 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	2b01      	cmp	r3, #1
 800741c:	d116      	bne.n	800744c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007422:	b29a      	uxth	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800742c:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <USB_CoreInit+0xd8>)
 800742e:	4313      	orrs	r3, r2
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f043 0206 	orr.w	r2, r3, #6
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800744c:	7bfb      	ldrb	r3, [r7, #15]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007458:	b004      	add	sp, #16
 800745a:	4770      	bx	lr
 800745c:	ffbdffbf 	.word	0xffbdffbf
 8007460:	03ee0000 	.word	0x03ee0000

08007464 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f023 0201 	bic.w	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b084      	sub	sp, #16
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	460b      	mov	r3, r1
 8007490:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d115      	bne.n	80074d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074b4:	2001      	movs	r0, #1
 80074b6:	f7f9 ffd1 	bl	800145c <HAL_Delay>
      ms++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3301      	adds	r3, #1
 80074be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fa29 	bl	8007918 <USB_GetMode>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d01e      	beq.n	800750a <USB_SetCurrentMode+0x84>
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2b31      	cmp	r3, #49	; 0x31
 80074d0:	d9f0      	bls.n	80074b4 <USB_SetCurrentMode+0x2e>
 80074d2:	e01a      	b.n	800750a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d115      	bne.n	8007506 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074e6:	2001      	movs	r0, #1
 80074e8:	f7f9 ffb8 	bl	800145c <HAL_Delay>
      ms++;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3301      	adds	r3, #1
 80074f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fa10 	bl	8007918 <USB_GetMode>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <USB_SetCurrentMode+0x84>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2b31      	cmp	r3, #49	; 0x31
 8007502:	d9f0      	bls.n	80074e6 <USB_SetCurrentMode+0x60>
 8007504:	e001      	b.n	800750a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e005      	b.n	8007516 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2b32      	cmp	r3, #50	; 0x32
 800750e:	d101      	bne.n	8007514 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007520:	b084      	sub	sp, #16
 8007522:	b580      	push	{r7, lr}
 8007524:	b086      	sub	sp, #24
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800752e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007532:	2300      	movs	r3, #0
 8007534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800753a:	2300      	movs	r3, #0
 800753c:	613b      	str	r3, [r7, #16]
 800753e:	e009      	b.n	8007554 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	3340      	adds	r3, #64	; 0x40
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	2200      	movs	r2, #0
 800754c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	3301      	adds	r3, #1
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2b0e      	cmp	r3, #14
 8007558:	d9f2      	bls.n	8007540 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800755a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d11c      	bne.n	800759a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800756e:	f043 0302 	orr.w	r3, r3, #2
 8007572:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007578:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	e005      	b.n	80075a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075ac:	461a      	mov	r2, r3
 80075ae:	2300      	movs	r3, #0
 80075b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b8:	4619      	mov	r1, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c0:	461a      	mov	r2, r3
 80075c2:	680b      	ldr	r3, [r1, #0]
 80075c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d10c      	bne.n	80075e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075d2:	2100      	movs	r1, #0
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f965 	bl	80078a4 <USB_SetDevSpeed>
 80075da:	e008      	b.n	80075ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075dc:	2101      	movs	r1, #1
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f960 	bl	80078a4 <USB_SetDevSpeed>
 80075e4:	e003      	b.n	80075ee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075e6:	2103      	movs	r1, #3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f95b 	bl	80078a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075ee:	2110      	movs	r1, #16
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f8f3 	bl	80077dc <USB_FlushTxFifo>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f91f 	bl	8007844 <USB_FlushRxFifo>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007616:	461a      	mov	r2, r3
 8007618:	2300      	movs	r3, #0
 800761a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007622:	461a      	mov	r2, r3
 8007624:	2300      	movs	r3, #0
 8007626:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762e:	461a      	mov	r2, r3
 8007630:	2300      	movs	r3, #0
 8007632:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	e043      	b.n	80076c2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800764c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007650:	d118      	bne.n	8007684 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007664:	461a      	mov	r2, r3
 8007666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	e013      	b.n	8007696 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767a:	461a      	mov	r2, r3
 800767c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	e008      	b.n	8007696 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	461a      	mov	r2, r3
 8007692:	2300      	movs	r3, #0
 8007694:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a2:	461a      	mov	r2, r3
 80076a4:	2300      	movs	r3, #0
 80076a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	461a      	mov	r2, r3
 80076b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	3301      	adds	r3, #1
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d3b7      	bcc.n	800763a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
 80076ce:	e043      	b.n	8007758 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076e6:	d118      	bne.n	800771a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10a      	bne.n	8007704 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076fa:	461a      	mov	r2, r3
 80076fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e013      	b.n	800772c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007710:	461a      	mov	r2, r3
 8007712:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	e008      	b.n	800772c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007726:	461a      	mov	r2, r3
 8007728:	2300      	movs	r3, #0
 800772a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007738:	461a      	mov	r2, r3
 800773a:	2300      	movs	r3, #0
 800773c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774a:	461a      	mov	r2, r3
 800774c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	3301      	adds	r3, #1
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	429a      	cmp	r2, r3
 800775e:	d3b7      	bcc.n	80076d0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800776e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007772:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007780:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007784:	2b00      	cmp	r3, #0
 8007786:	d105      	bne.n	8007794 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f043 0210 	orr.w	r2, r3, #16
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <USB_DevInit+0x2b4>)
 800779a:	4313      	orrs	r3, r2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	f043 0208 	orr.w	r2, r3, #8
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d105      	bne.n	80077c4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <USB_DevInit+0x2b8>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3718      	adds	r7, #24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077d0:	b004      	add	sp, #16
 80077d2:	4770      	bx	lr
 80077d4:	803c3800 	.word	0x803c3800
 80077d8:	40000004 	.word	0x40000004

080077dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4a13      	ldr	r2, [pc, #76]	; (8007840 <USB_FlushTxFifo+0x64>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d901      	bls.n	80077fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e01b      	b.n	8007834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	daf2      	bge.n	80077ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	019b      	lsls	r3, r3, #6
 800780c:	f043 0220 	orr.w	r2, r3, #32
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4a08      	ldr	r2, [pc, #32]	; (8007840 <USB_FlushTxFifo+0x64>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d901      	bls.n	8007826 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e006      	b.n	8007834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b20      	cmp	r3, #32
 8007830:	d0f0      	beq.n	8007814 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	00030d40 	.word	0x00030d40

08007844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	3301      	adds	r3, #1
 8007854:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	4a11      	ldr	r2, [pc, #68]	; (80078a0 <USB_FlushRxFifo+0x5c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d901      	bls.n	8007862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e018      	b.n	8007894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	daf2      	bge.n	8007850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800786a:	2300      	movs	r3, #0
 800786c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2210      	movs	r2, #16
 8007872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3301      	adds	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4a08      	ldr	r2, [pc, #32]	; (80078a0 <USB_FlushRxFifo+0x5c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d901      	bls.n	8007886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e006      	b.n	8007894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	f003 0310 	and.w	r3, r3, #16
 800788e:	2b10      	cmp	r3, #16
 8007890:	d0f0      	beq.n	8007874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	00030d40 	.word	0x00030d40

080078a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	68f9      	ldr	r1, [r7, #12]
 80078c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078c4:	4313      	orrs	r3, r2
 80078c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078f0:	f023 0303 	bic.w	r3, r3, #3
 80078f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007904:	f043 0302 	orr.w	r3, r3, #2
 8007908:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	f003 0301 	and.w	r3, r3, #1
}
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3301      	adds	r3, #1
 8007944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4a13      	ldr	r2, [pc, #76]	; (8007998 <USB_CoreReset+0x64>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d901      	bls.n	8007952 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e01b      	b.n	800798a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	2b00      	cmp	r3, #0
 8007958:	daf2      	bge.n	8007940 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	f043 0201 	orr.w	r2, r3, #1
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4a09      	ldr	r2, [pc, #36]	; (8007998 <USB_CoreReset+0x64>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d901      	bls.n	800797c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e006      	b.n	800798a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b01      	cmp	r3, #1
 8007986:	d0f0      	beq.n	800796a <USB_CoreReset+0x36>

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	00030d40 	.word	0x00030d40

0800799c <__libc_init_array>:
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	4d0d      	ldr	r5, [pc, #52]	; (80079d4 <__libc_init_array+0x38>)
 80079a0:	4c0d      	ldr	r4, [pc, #52]	; (80079d8 <__libc_init_array+0x3c>)
 80079a2:	1b64      	subs	r4, r4, r5
 80079a4:	10a4      	asrs	r4, r4, #2
 80079a6:	2600      	movs	r6, #0
 80079a8:	42a6      	cmp	r6, r4
 80079aa:	d109      	bne.n	80079c0 <__libc_init_array+0x24>
 80079ac:	4d0b      	ldr	r5, [pc, #44]	; (80079dc <__libc_init_array+0x40>)
 80079ae:	4c0c      	ldr	r4, [pc, #48]	; (80079e0 <__libc_init_array+0x44>)
 80079b0:	f000 f820 	bl	80079f4 <_init>
 80079b4:	1b64      	subs	r4, r4, r5
 80079b6:	10a4      	asrs	r4, r4, #2
 80079b8:	2600      	movs	r6, #0
 80079ba:	42a6      	cmp	r6, r4
 80079bc:	d105      	bne.n	80079ca <__libc_init_array+0x2e>
 80079be:	bd70      	pop	{r4, r5, r6, pc}
 80079c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c4:	4798      	blx	r3
 80079c6:	3601      	adds	r6, #1
 80079c8:	e7ee      	b.n	80079a8 <__libc_init_array+0xc>
 80079ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ce:	4798      	blx	r3
 80079d0:	3601      	adds	r6, #1
 80079d2:	e7f2      	b.n	80079ba <__libc_init_array+0x1e>
 80079d4:	08007a58 	.word	0x08007a58
 80079d8:	08007a58 	.word	0x08007a58
 80079dc:	08007a58 	.word	0x08007a58
 80079e0:	08007a5c 	.word	0x08007a5c

080079e4 <memset>:
 80079e4:	4402      	add	r2, r0
 80079e6:	4603      	mov	r3, r0
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d100      	bne.n	80079ee <memset+0xa>
 80079ec:	4770      	bx	lr
 80079ee:	f803 1b01 	strb.w	r1, [r3], #1
 80079f2:	e7f9      	b.n	80079e8 <memset+0x4>

080079f4 <_init>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr

08007a00 <_fini>:
 8007a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a02:	bf00      	nop
 8007a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a06:	bc08      	pop	{r3}
 8007a08:	469e      	mov	lr, r3
 8007a0a:	4770      	bx	lr
