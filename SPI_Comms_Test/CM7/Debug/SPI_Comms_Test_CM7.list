
SPI_Comms_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007798  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08007a30  08007a30  00017a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a74  08007a74  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a7c  08007a7c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a7c  08007a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a80  08007a80  00017a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08007a94  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08007af4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000758  240000d0  08007b54  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000828  08007b54  00020828  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d656  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031f7  00000000  00000000  0003d754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001338  00000000  00000000  00040950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001210  00000000  00000000  00041c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b9eb  00000000  00000000  00042e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001afbc  00000000  00000000  0007e883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00185900  00000000  00000000  0009983f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021f13f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000051a8  00000000  00000000  0021f190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007a18 	.word	0x08007a18

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007a18 	.word	0x08007a18

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b51      	ldr	r3, [pc, #324]	; (800085c <main+0x154>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fafb 	bl	8000d2c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fe11 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f89f 	bl	800087c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b47      	ldr	r3, [pc, #284]	; (800085c <main+0x154>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a45      	ldr	r2, [pc, #276]	; (800085c <main+0x154>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b43      	ldr	r3, [pc, #268]	; (800085c <main+0x154>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
 800075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f002 fa2d 	bl	8002bbc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f002 fa43 	bl	8002bf0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <main+0x154>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 facd 	bl	8000d2c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 fa3b 	bl	8000c0c <MX_GPIO_Init>
  MX_ETH_Init();
 8000796:	f000 f919 	bl	80009cc <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079a:	f000 f9b9 	bl	8000b10 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079e:	f000 fa03 	bl	8000ba8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 80007a2:	f000 f95f 	bl	8000a64 <MX_SPI3_Init>
  MX_CRC_Init();
 80007a6:	f000 f8ef 	bl	8000988 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  hcrc.Instance = CRC;
 80007aa:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <main+0x158>)
 80007ac:	4a2d      	ldr	r2, [pc, #180]	; (8000864 <main+0x15c>)
 80007ae:	601a      	str	r2, [r3, #0]
  HAL_CRC_Init(&hcrc);
 80007b0:	482b      	ldr	r0, [pc, #172]	; (8000860 <main+0x158>)
 80007b2:	f000 ffb9 	bl	8001728 <HAL_CRC_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80007b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ba:	482b      	ldr	r0, [pc, #172]	; (8000868 <main+0x160>)
 80007bc:	f002 f9cc 	bl	8002b58 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f7      	beq.n	80007b6 <main+0xae>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2101      	movs	r1, #1
 80007ca:	4828      	ldr	r0, [pc, #160]	; (800086c <main+0x164>)
 80007cc:	f002 f9dc 	bl	8002b88 <HAL_GPIO_WritePin>
		  // Send command over SPI
		  uint8_t data_packet[packet_size];
		  data_packet[0] = 0x44;
 80007d0:	2344      	movs	r3, #68	; 0x44
 80007d2:	733b      	strb	r3, [r7, #12]
		  uint32_t servo_byte = 1000;
 80007d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d8:	60bb      	str	r3, [r7, #8]
		  for (int i=0; i<4; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80007de:	e00e      	b.n	80007fe <main+0xf6>
			  memcpy(&data_packet[i*4 + 1], &servo_byte, sizeof(servo_byte));
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	3301      	adds	r3, #1
 80007e6:	f107 020c 	add.w	r2, r7, #12
 80007ea:	4413      	add	r3, r2
 80007ec:	68ba      	ldr	r2, [r7, #8]
 80007ee:	601a      	str	r2, [r3, #0]
			  servo_byte += 1000;
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007f6:	60bb      	str	r3, [r7, #8]
		  for (int i=0; i<4; i++) {
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	3301      	adds	r3, #1
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80007fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000800:	2b03      	cmp	r3, #3
 8000802:	dded      	ble.n	80007e0 <main+0xd8>
		  }
		  uint32_t CRC_Calc = ~HAL_CRC_Calculate(&hcrc,(uint32_t *) data_packet, sizeof(data_packet)-4);
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	2211      	movs	r2, #17
 800080a:	4619      	mov	r1, r3
 800080c:	4814      	ldr	r0, [pc, #80]	; (8000860 <main+0x158>)
 800080e:	f000 ffef 	bl	80017f0 <HAL_CRC_Calculate>
 8000812:	4603      	mov	r3, r0
 8000814:	43db      	mvns	r3, r3
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
		  memcpy(&data_packet[sizeof(data_packet)-4], &CRC_Calc, sizeof(uint32_t));
 800081a:	f8c7 301d 	str.w	r3, [r7, #29]

		  HAL_SPI_Transmit(&hspi3, (uint8_t*)data_packet, sizeof(data_packet), HAL_MAX_DELAY);
 800081e:	f107 010c 	add.w	r1, r7, #12
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	2215      	movs	r2, #21
 8000828:	4811      	ldr	r0, [pc, #68]	; (8000870 <main+0x168>)
 800082a:	f004 ffcf 	bl	80057cc <HAL_SPI_Transmit>
		  HAL_UART_Transmit(&huart3, "Sent data\r\n", sizeof("Sent data\r\n"), HAL_MAX_DELAY);
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	220c      	movs	r2, #12
 8000834:	490f      	ldr	r1, [pc, #60]	; (8000874 <main+0x16c>)
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <main+0x170>)
 8000838:	f005 fd01 	bl	800623e <HAL_UART_Transmit>
		  // Loop until pin is released
		  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 800083c:	bf00      	nop
 800083e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <main+0x160>)
 8000844:	f002 f988 	bl	8002b58 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d1f7      	bne.n	800083e <main+0x136>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2101      	movs	r1, #1
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <main+0x164>)
 8000854:	f002 f998 	bl	8002b88 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000858:	e7ad      	b.n	80007b6 <main+0xae>
 800085a:	bf00      	nop
 800085c:	58024400 	.word	0x58024400
 8000860:	24000124 	.word	0x24000124
 8000864:	58024c00 	.word	0x58024c00
 8000868:	58020800 	.word	0x58020800
 800086c:	58020400 	.word	0x58020400
 8000870:	240001f8 	.word	0x240001f8
 8000874:	08007a30 	.word	0x08007a30
 8000878:	24000280 	.word	0x24000280

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09c      	sub	sp, #112	; 0x70
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	224c      	movs	r2, #76	; 0x4c
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f007 f8bc 	bl	8007a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2220      	movs	r2, #32
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f007 f8b6 	bl	8007a08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800089c:	2004      	movs	r0, #4
 800089e:	f002 fb03 	bl	8002ea8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a2:	2300      	movs	r3, #0
 80008a4:	603b      	str	r3, [r7, #0]
 80008a6:	4b35      	ldr	r3, [pc, #212]	; (800097c <SystemClock_Config+0x100>)
 80008a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008aa:	4a34      	ldr	r2, [pc, #208]	; (800097c <SystemClock_Config+0x100>)
 80008ac:	f023 0301 	bic.w	r3, r3, #1
 80008b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <SystemClock_Config+0x100>)
 80008b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	4b30      	ldr	r3, [pc, #192]	; (8000980 <SystemClock_Config+0x104>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c4:	4a2e      	ldr	r2, [pc, #184]	; (8000980 <SystemClock_Config+0x104>)
 80008c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <SystemClock_Config+0x104>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d8:	bf00      	nop
 80008da:	4b29      	ldr	r3, [pc, #164]	; (8000980 <SystemClock_Config+0x104>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008e6:	d1f8      	bne.n	80008da <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <SystemClock_Config+0x108>)
 80008ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ec:	f023 0303 	bic.w	r3, r3, #3
 80008f0:	4a24      	ldr	r2, [pc, #144]	; (8000984 <SystemClock_Config+0x108>)
 80008f2:	f043 0302 	orr.w	r3, r3, #2
 80008f6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f8:	2301      	movs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	2302      	movs	r3, #2
 8000904:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000906:	2302      	movs	r3, #2
 8000908:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800090a:	2301      	movs	r3, #1
 800090c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800090e:	2312      	movs	r3, #18
 8000910:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800091e:	230c      	movs	r3, #12
 8000920:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000922:	2302      	movs	r3, #2
 8000924:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000926:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800092a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000930:	4618      	mov	r0, r3
 8000932:	f002 fb23 	bl	8002f7c <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800093c:	f000 f9f6 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000940:	233f      	movs	r3, #63	; 0x3f
 8000942:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000944:	2303      	movs	r3, #3
 8000946:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000954:	2340      	movs	r3, #64	; 0x40
 8000956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2101      	movs	r1, #1
 8000964:	4618      	mov	r0, r3
 8000966:	f002 ff37 	bl	80037d8 <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000970:	f000 f9dc 	bl	8000d2c <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3770      	adds	r7, #112	; 0x70
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	58000400 	.word	0x58000400
 8000980:	58024800 	.word	0x58024800
 8000984:	58024400 	.word	0x58024400

08000988 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800098c:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <MX_CRC_Init+0x3c>)
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <MX_CRC_Init+0x40>)
 8000990:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_CRC_Init+0x3c>)
 8000994:	2200      	movs	r2, #0
 8000996:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000998:	4b0a      	ldr	r3, [pc, #40]	; (80009c4 <MX_CRC_Init+0x3c>)
 800099a:	2200      	movs	r2, #0
 800099c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_CRC_Init+0x3c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	; (80009c4 <MX_CRC_Init+0x3c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_CRC_Init+0x3c>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_CRC_Init+0x3c>)
 80009b2:	f000 feb9 	bl	8001728 <HAL_CRC_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009bc:	f000 f9b6 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	24000124 	.word	0x24000124
 80009c8:	58024c00 	.word	0x58024c00

080009cc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <MX_ETH_Init+0x80>)
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <MX_ETH_Init+0x84>)
 80009d4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <MX_ETH_Init+0x88>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <MX_ETH_Init+0x88>)
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <MX_ETH_Init+0x88>)
 80009e4:	22e1      	movs	r2, #225	; 0xe1
 80009e6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_ETH_Init+0x88>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <MX_ETH_Init+0x88>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_ETH_Init+0x88>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_ETH_Init+0x80>)
 80009fc:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <MX_ETH_Init+0x88>)
 80009fe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_ETH_Init+0x80>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_ETH_Init+0x80>)
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <MX_ETH_Init+0x8c>)
 8000a0a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_ETH_Init+0x80>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_ETH_Init+0x90>)
 8000a10:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_ETH_Init+0x80>)
 8000a14:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a18:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a1a:	480c      	ldr	r0, [pc, #48]	; (8000a4c <MX_ETH_Init+0x80>)
 8000a1c:	f001 fac8 	bl	8001fb0 <HAL_ETH_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a26:	f000 f981 	bl	8000d2c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a2a:	2238      	movs	r2, #56	; 0x38
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <MX_ETH_Init+0x94>)
 8000a30:	f006 ffea 	bl	8007a08 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a34:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_ETH_Init+0x94>)
 8000a36:	2221      	movs	r2, #33	; 0x21
 8000a38:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_ETH_Init+0x94>)
 8000a3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a40:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_ETH_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	24000148 	.word	0x24000148
 8000a50:	40028000 	.word	0x40028000
 8000a54:	2400081c 	.word	0x2400081c
 8000a58:	24000070 	.word	0x24000070
 8000a5c:	24000010 	.word	0x24000010
 8000a60:	240000ec 	.word	0x240000ec

08000a64 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000a6a:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <MX_SPI3_Init+0xa8>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000a70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a74:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000a7e:	2207      	movs	r2, #7
 8000a80:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000a90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000a94:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_SPI3_Init+0xa4>)
 8000af6:	f004 fd63 	bl	80055c0 <HAL_SPI_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8000b00:	f000 f914 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	240001f8 	.word	0x240001f8
 8000b0c:	40003c00 	.word	0x40003c00

08000b10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b16:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <MX_USART3_UART_Init+0x94>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b5a:	f005 fb20 	bl	800619e <HAL_UART_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b64:	f000 f8e2 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b6c:	f006 fb54 	bl	8007218 <HAL_UARTEx_SetTxFifoThreshold>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b76:	f000 f8d9 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b7e:	f006 fb89 	bl	8007294 <HAL_UARTEx_SetRxFifoThreshold>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b88:	f000 f8d0 	bl	8000d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b8e:	f006 fb0a 	bl	80071a6 <HAL_UARTEx_DisableFifoMode>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b98:	f000 f8c8 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	24000280 	.word	0x24000280
 8000ba4:	40004800 	.word	0x40004800

08000ba8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bb4:	2209      	movs	r2, #9
 8000bb6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000bf0:	f002 f812 	bl	8002c18 <HAL_PCD_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bfa:	f000 f897 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	24000310 	.word	0x24000310
 8000c08:	40080000 	.word	0x40080000

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08c      	sub	sp, #48	; 0x30
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a3d      	ldr	r2, [pc, #244]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
 8000c3e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c40:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	4a36      	ldr	r2, [pc, #216]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c50:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	4a27      	ldr	r2, [pc, #156]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	4a1f      	ldr	r2, [pc, #124]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a18      	ldr	r2, [pc, #96]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <MX_GPIO_Init+0x114>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000cdc:	f001 ff54 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cea:	2302      	movs	r3, #2
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_GPIO_Init+0x11c>)
 8000cf6:	f001 fd7f 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d02:	2302      	movs	r3, #2
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000d12:	f001 fd71 	bl	80027f8 <HAL_GPIO_Init>

}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58020400 	.word	0x58020400
 8000d28:	58020800 	.word	0x58020800

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_MspInit+0x30>)
 8000d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d44:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x30>)
 8000d46:	f043 0302 	orr.w	r3, r3, #2
 8000d4a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x30>)
 8000d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d54:	f003 0302 	and.w	r3, r3, #2
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	58024400 	.word	0x58024400

08000d6c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_CRC_MspInit+0x3c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10e      	bne.n	8000d9c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_CRC_MspInit+0x40>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_CRC_MspInit+0x40>)
 8000d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_CRC_MspInit+0x40>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	58024c00 	.word	0x58024c00
 8000dac:	58024400 	.word	0x58024400

08000db0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a59      	ldr	r2, [pc, #356]	; (8000f34 <HAL_ETH_MspInit+0x184>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	f040 80ab 	bne.w	8000f2a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dd4:	4b58      	ldr	r3, [pc, #352]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dda:	4a57      	ldr	r2, [pc, #348]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de4:	4b54      	ldr	r3, [pc, #336]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dee:	623b      	str	r3, [r7, #32]
 8000df0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000df2:	4b51      	ldr	r3, [pc, #324]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df8:	4a4f      	ldr	r2, [pc, #316]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e02:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e10:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e16:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e20:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b42      	ldr	r3, [pc, #264]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4a40      	ldr	r2, [pc, #256]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4b3e      	ldr	r3, [pc, #248]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	4a39      	ldr	r2, [pc, #228]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	4a2a      	ldr	r2, [pc, #168]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ea6:	2332      	movs	r3, #50	; 0x32
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481e      	ldr	r0, [pc, #120]	; (8000f3c <HAL_ETH_MspInit+0x18c>)
 8000ec2:	f001 fc99 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ec6:	2386      	movs	r3, #134	; 0x86
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed6:	230b      	movs	r3, #11
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <HAL_ETH_MspInit+0x190>)
 8000ee2:	f001 fc89 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef8:	230b      	movs	r3, #11
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4810      	ldr	r0, [pc, #64]	; (8000f44 <HAL_ETH_MspInit+0x194>)
 8000f04:	f001 fc78 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4808      	ldr	r0, [pc, #32]	; (8000f48 <HAL_ETH_MspInit+0x198>)
 8000f26:	f001 fc67 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3738      	adds	r7, #56	; 0x38
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40028000 	.word	0x40028000
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020800 	.word	0x58020800
 8000f40:	58020000 	.word	0x58020000
 8000f44:	58020400 	.word	0x58020400
 8000f48:	58021800 	.word	0x58021800

08000f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0ba      	sub	sp, #232	; 0xe8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 0318 	add.w	r3, r7, #24
 8000f68:	22bc      	movs	r2, #188	; 0xbc
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f006 fd4b 	bl	8007a08 <memset>
  if(hspi->Instance==SPI3)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a4d      	ldr	r2, [pc, #308]	; (80010ac <HAL_SPI_MspInit+0x160>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	f040 8093 	bne.w	80010a4 <HAL_SPI_MspInit+0x158>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 ffaf 	bl	8003ef0 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000f98:	f7ff fec8 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f9c:	4b44      	ldr	r3, [pc, #272]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fa2:	4a43      	ldr	r2, [pc, #268]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fac:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	4a3b      	ldr	r2, [pc, #236]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fca:	4b39      	ldr	r3, [pc, #228]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	4a34      	ldr	r2, [pc, #208]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe8:	4b31      	ldr	r3, [pc, #196]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff6:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	4a2c      	ldr	r2, [pc, #176]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8000ffe:	f043 0304 	orr.w	r3, r3, #4
 8001002:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001006:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <HAL_SPI_MspInit+0x164>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI3_NSS
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001014:	2310      	movs	r3, #16
 8001016:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800102c:	2306      	movs	r3, #6
 800102e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001036:	4619      	mov	r1, r3
 8001038:	481e      	ldr	r0, [pc, #120]	; (80010b4 <HAL_SPI_MspInit+0x168>)
 800103a:	f001 fbdd 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800103e:	2304      	movs	r3, #4
 8001040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001056:	2307      	movs	r3, #7
 8001058:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001060:	4619      	mov	r1, r3
 8001062:	4815      	ldr	r0, [pc, #84]	; (80010b8 <HAL_SPI_MspInit+0x16c>)
 8001064:	f001 fbc8 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001068:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800106c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001082:	2306      	movs	r3, #6
 8001084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001088:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800108c:	4619      	mov	r1, r3
 800108e:	480b      	ldr	r0, [pc, #44]	; (80010bc <HAL_SPI_MspInit+0x170>)
 8001090:	f001 fbb2 	bl	80027f8 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2033      	movs	r0, #51	; 0x33
 800109a:	f000 fb10 	bl	80016be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800109e:	2033      	movs	r0, #51	; 0x33
 80010a0:	f000 fb27 	bl	80016f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	37e8      	adds	r7, #232	; 0xe8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40003c00 	.word	0x40003c00
 80010b0:	58024400 	.word	0x58024400
 80010b4:	58020000 	.word	0x58020000
 80010b8:	58020400 	.word	0x58020400
 80010bc:	58020800 	.word	0x58020800

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b0b8      	sub	sp, #224	; 0xe0
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	22bc      	movs	r2, #188	; 0xbc
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f006 fc91 	bl	8007a08 <memset>
  if(huart->Instance==USART3)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a25      	ldr	r2, [pc, #148]	; (8001180 <HAL_UART_MspInit+0xc0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d142      	bne.n	8001176 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010f0:	2302      	movs	r3, #2
 80010f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fef6 	bl	8003ef0 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800110a:	f7ff fe0f 	bl	8000d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_UART_MspInit+0xc4>)
 8001110:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_UART_MspInit+0xc4>)
 8001116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_UART_MspInit+0xc4>)
 8001120:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_UART_MspInit+0xc4>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	4a14      	ldr	r2, [pc, #80]	; (8001184 <HAL_UART_MspInit+0xc4>)
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_UART_MspInit+0xc4>)
 800113e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800114a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800114e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001164:	2307      	movs	r3, #7
 8001166:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	; (8001188 <HAL_UART_MspInit+0xc8>)
 8001172:	f001 fb41 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	37e0      	adds	r7, #224	; 0xe0
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40004800 	.word	0x40004800
 8001184:	58024400 	.word	0x58024400
 8001188:	58020c00 	.word	0x58020c00

0800118c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0b8      	sub	sp, #224	; 0xe0
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	22bc      	movs	r2, #188	; 0xbc
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 fc2b 	bl	8007a08 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a37      	ldr	r2, [pc, #220]	; (8001294 <HAL_PCD_MspInit+0x108>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d166      	bne.n	800128a <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80011c6:	2312      	movs	r3, #18
 80011c8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80011ce:	2303      	movs	r3, #3
 80011d0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80011d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011da:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80011dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80011e0:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80011e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ea:	f107 0310 	add.w	r3, r7, #16
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 fe7e 	bl	8003ef0 <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80011fa:	f7ff fd97 	bl	8000d2c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011fe:	f001 fead 	bl	8002f5c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <HAL_PCD_MspInit+0x10c>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <HAL_PCD_MspInit+0x10c>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001212:	4b21      	ldr	r3, [pc, #132]	; (8001298 <HAL_PCD_MspInit+0x10c>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001220:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001224:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800123a:	230a      	movs	r3, #10
 800123c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001244:	4619      	mov	r1, r3
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <HAL_PCD_MspInit+0x110>)
 8001248:	f001 fad6 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800124c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001250:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001264:	4619      	mov	r1, r3
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <HAL_PCD_MspInit+0x110>)
 8001268:	f001 fac6 	bl	80027f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <HAL_PCD_MspInit+0x10c>)
 800126e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001272:	4a09      	ldr	r2, [pc, #36]	; (8001298 <HAL_PCD_MspInit+0x10c>)
 8001274:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001278:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_PCD_MspInit+0x10c>)
 800127e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	37e0      	adds	r7, #224	; 0xe0
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40080000 	.word	0x40080000
 8001298:	58024400 	.word	0x58024400
 800129c:	58020000 	.word	0x58020000

080012a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <NMI_Handler+0x4>

080012a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012aa:	e7fe      	b.n	80012aa <HardFault_Handler+0x4>

080012ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <MemManage_Handler+0x4>

080012b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <UsageFault_Handler+0x4>

080012be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ec:	f000 f8a8 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80012f8:	4802      	ldr	r0, [pc, #8]	; (8001304 <SPI3_IRQHandler+0x10>)
 80012fa:	f004 fc59 	bl	8005bb0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	240001f8 	.word	0x240001f8

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800130c:	f7ff f966 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f006 fb43 	bl	80079c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff f9e5 	bl	8000708 <main>
  bx  lr
 800133e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001344:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001348:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800134c:	08007a84 	.word	0x08007a84
  ldr r2, =_sbss
 8001350:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001354:	24000828 	.word	0x24000828

08001358 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC3_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001362:	2003      	movs	r0, #3
 8001364:	f000 f9a0 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001368:	f002 fbec 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_Init+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	4913      	ldr	r1, [pc, #76]	; (80013c8 <HAL_Init+0x6c>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_Init+0x68>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_Init+0x6c>)
 8001390:	5cd3      	ldrb	r3, [r2, r3]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_Init+0x70>)
 800139e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x74>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 f814 	bl	80013d4 <HAL_InitTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e002      	b.n	80013bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013b6:	f7ff fcbf 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	58024400 	.word	0x58024400
 80013c8:	08007a3c 	.word	0x08007a3c
 80013cc:	24000004 	.word	0x24000004
 80013d0:	24000000 	.word	0x24000000

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_InitTick+0x60>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e021      	b.n	800142c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <HAL_InitTick+0x64>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_InitTick+0x60>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f985 	bl	800170e <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 f94f 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x68>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2400000c 	.word	0x2400000c
 8001438:	24000000 	.word	0x24000000
 800143c:	24000008 	.word	0x24000008

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2400000c 	.word	0x2400000c
 8001464:	24000824 	.word	0x24000824

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	24000824 	.word	0x24000824

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffde 	bl	8001468 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2400000c 	.word	0x2400000c

080014c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetREVID+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	0c1b      	lsrs	r3, r3, #16
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	5c001000 	.word	0x5c001000

080014e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014f0:	4904      	ldr	r1, [pc, #16]	; (8001504 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	58000400 	.word	0x58000400

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 8001532:	4313      	orrs	r3, r2
 8001534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001536:	4a04      	ldr	r2, [pc, #16]	; (8001548 <__NVIC_SetPriorityGrouping+0x40>)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	60d3      	str	r3, [r2, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	05fa0000 	.word	0x05fa0000

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff29 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016cc:	f7ff ff40 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	6978      	ldr	r0, [r7, #20]
 80016d8:	f7ff ff90 	bl	80015fc <NVIC_EncodePriority>
 80016dc:	4602      	mov	r2, r0
 80016de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016e2:	4611      	mov	r1, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff5f 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff33 	bl	800156c <__NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ffa4 	bl	8001664 <SysTick_Config>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e054      	b.n	80017e4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7f5b      	ldrb	r3, [r3, #29]
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fb0e 	bl	8000d6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	791b      	ldrb	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_CRC_Init+0xc4>)
 8001764:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0218 	bic.w	r2, r2, #24
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	e00c      	b.n	8001792 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6899      	ldr	r1, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	461a      	mov	r2, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f948 	bl	8001a18 <HAL_CRCEx_Polynomial_Set>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e028      	b.n	80017e4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	795b      	ldrb	r3, [r3, #5]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d105      	bne.n	80017a6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f04f 32ff 	mov.w	r2, #4294967295
 80017a2:	611a      	str	r2, [r3, #16]
 80017a4:	e004      	b.n	80017b0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6912      	ldr	r2, [r2, #16]
 80017ae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699a      	ldr	r2, [r3, #24]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	04c11db7 	.word	0x04c11db7

080017f0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2202      	movs	r2, #2
 8001804:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0201 	orr.w	r2, r2, #1
 8001814:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d006      	beq.n	800182c <HAL_CRC_Calculate+0x3c>
 800181e:	2b03      	cmp	r3, #3
 8001820:	d829      	bhi.n	8001876 <HAL_CRC_Calculate+0x86>
 8001822:	2b01      	cmp	r3, #1
 8001824:	d019      	beq.n	800185a <HAL_CRC_Calculate+0x6a>
 8001826:	2b02      	cmp	r3, #2
 8001828:	d01e      	beq.n	8001868 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800182a:	e024      	b.n	8001876 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	e00a      	b.n	8001848 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	441a      	add	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	d3f0      	bcc.n	8001832 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	613b      	str	r3, [r7, #16]
      break;
 8001858:	e00e      	b.n	8001878 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f812 	bl	8001888 <CRC_Handle_8>
 8001864:	6138      	str	r0, [r7, #16]
      break;
 8001866:	e007      	b.n	8001878 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	68b9      	ldr	r1, [r7, #8]
 800186c:	68f8      	ldr	r0, [r7, #12]
 800186e:	f000 f899 	bl	80019a4 <CRC_Handle_16>
 8001872:	6138      	str	r0, [r7, #16]
      break;
 8001874:	e000      	b.n	8001878 <HAL_CRC_Calculate+0x88>
      break;
 8001876:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800187e:	693b      	ldr	r3, [r7, #16]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	e023      	b.n	80018e2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	68ba      	ldr	r2, [r7, #8]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	3301      	adds	r3, #1
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	440b      	add	r3, r1
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80018b4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	3302      	adds	r3, #2
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	440b      	add	r3, r1
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80018c4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	3303      	adds	r3, #3
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	440b      	add	r3, r1
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80018d8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80018da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	3301      	adds	r3, #1
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d3d6      	bcc.n	800189a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d04d      	beq.n	8001992 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d107      	bne.n	8001910 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	4413      	add	r3, r2
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d116      	bne.n	8001948 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	3301      	adds	r3, #1
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	440b      	add	r3, r1
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	b21b      	sxth	r3, r3
 800193a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	8b7a      	ldrh	r2, [r7, #26]
 8001946:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b03      	cmp	r3, #3
 8001950:	d11f      	bne.n	8001992 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21a      	sxth	r2, r3
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	3301      	adds	r3, #1
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	440b      	add	r3, r1
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	b21b      	sxth	r3, r3
 800196e:	4313      	orrs	r3, r2
 8001970:	b21b      	sxth	r3, r3
 8001972:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	8b7a      	ldrh	r2, [r7, #26]
 800197e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	4413      	add	r3, r2
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3724      	adds	r7, #36	; 0x24
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	e013      	b.n	80019de <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	4413      	add	r3, r2
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	3302      	adds	r3, #2
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	440b      	add	r3, r1
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	4619      	mov	r1, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	3301      	adds	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3e6      	bcc.n	80019b6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	4413      	add	r3, r2
 8001a00:	881a      	ldrh	r2, [r3, #0]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a24:	2300      	movs	r3, #0
 8001a26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a28:	231f      	movs	r3, #31
 8001a2a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a2c:	bf00      	nop
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	613a      	str	r2, [r7, #16]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_CRCEx_Polynomial_Set+0x34>
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f003 031f 	and.w	r3, r3, #31
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	fa22 f303 	lsr.w	r3, r2, r3
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b18      	cmp	r3, #24
 8001a50:	d846      	bhi.n	8001ae0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001a52:	a201      	add	r2, pc, #4	; (adr r2, 8001a58 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a58:	08001ae7 	.word	0x08001ae7
 8001a5c:	08001ae1 	.word	0x08001ae1
 8001a60:	08001ae1 	.word	0x08001ae1
 8001a64:	08001ae1 	.word	0x08001ae1
 8001a68:	08001ae1 	.word	0x08001ae1
 8001a6c:	08001ae1 	.word	0x08001ae1
 8001a70:	08001ae1 	.word	0x08001ae1
 8001a74:	08001ae1 	.word	0x08001ae1
 8001a78:	08001ad5 	.word	0x08001ad5
 8001a7c:	08001ae1 	.word	0x08001ae1
 8001a80:	08001ae1 	.word	0x08001ae1
 8001a84:	08001ae1 	.word	0x08001ae1
 8001a88:	08001ae1 	.word	0x08001ae1
 8001a8c:	08001ae1 	.word	0x08001ae1
 8001a90:	08001ae1 	.word	0x08001ae1
 8001a94:	08001ae1 	.word	0x08001ae1
 8001a98:	08001ac9 	.word	0x08001ac9
 8001a9c:	08001ae1 	.word	0x08001ae1
 8001aa0:	08001ae1 	.word	0x08001ae1
 8001aa4:	08001ae1 	.word	0x08001ae1
 8001aa8:	08001ae1 	.word	0x08001ae1
 8001aac:	08001ae1 	.word	0x08001ae1
 8001ab0:	08001ae1 	.word	0x08001ae1
 8001ab4:	08001ae1 	.word	0x08001ae1
 8001ab8:	08001abd 	.word	0x08001abd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d913      	bls.n	8001aea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ac6:	e010      	b.n	8001aea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b07      	cmp	r3, #7
 8001acc:	d90f      	bls.n	8001aee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ad2:	e00c      	b.n	8001aee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	d90b      	bls.n	8001af2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001ade:	e008      	b.n	8001af2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8001ae4:	e006      	b.n	8001af4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001ae6:	bf00      	nop
 8001ae8:	e004      	b.n	8001af4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001aea:	bf00      	nop
 8001aec:	e002      	b.n	8001af4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001aee:	bf00      	nop
 8001af0:	e000      	b.n	8001af4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001af2:	bf00      	nop
  }
  if (status == HAL_OK)
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10d      	bne.n	8001b16 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 0118 	bic.w	r1, r3, #24
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e237      	b.n	8001fa6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d004      	beq.n	8001b4c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e22c      	b.n	8001fa6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a5c      	ldr	r2, [pc, #368]	; (8001cc4 <HAL_DMA_Abort_IT+0x1a0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d04a      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a5b      	ldr	r2, [pc, #364]	; (8001cc8 <HAL_DMA_Abort_IT+0x1a4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d045      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a59      	ldr	r2, [pc, #356]	; (8001ccc <HAL_DMA_Abort_IT+0x1a8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d040      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_DMA_Abort_IT+0x1ac>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d03b      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a56      	ldr	r2, [pc, #344]	; (8001cd4 <HAL_DMA_Abort_IT+0x1b0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d036      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a55      	ldr	r2, [pc, #340]	; (8001cd8 <HAL_DMA_Abort_IT+0x1b4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d031      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a53      	ldr	r2, [pc, #332]	; (8001cdc <HAL_DMA_Abort_IT+0x1b8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d02c      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_DMA_Abort_IT+0x1bc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d027      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_DMA_Abort_IT+0x1c0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d022      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_DMA_Abort_IT+0x1c4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d01d      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a4d      	ldr	r2, [pc, #308]	; (8001cec <HAL_DMA_Abort_IT+0x1c8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d018      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a4c      	ldr	r2, [pc, #304]	; (8001cf0 <HAL_DMA_Abort_IT+0x1cc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d013      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	; (8001cf4 <HAL_DMA_Abort_IT+0x1d0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d00e      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a49      	ldr	r2, [pc, #292]	; (8001cf8 <HAL_DMA_Abort_IT+0x1d4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d009      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a47      	ldr	r2, [pc, #284]	; (8001cfc <HAL_DMA_Abort_IT+0x1d8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d004      	beq.n	8001bec <HAL_DMA_Abort_IT+0xc8>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a46      	ldr	r2, [pc, #280]	; (8001d00 <HAL_DMA_Abort_IT+0x1dc>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d101      	bne.n	8001bf0 <HAL_DMA_Abort_IT+0xcc>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_DMA_Abort_IT+0xce>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8086 	beq.w	8001d04 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a2f      	ldr	r2, [pc, #188]	; (8001cc4 <HAL_DMA_Abort_IT+0x1a0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d04a      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <HAL_DMA_Abort_IT+0x1a4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d045      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2c      	ldr	r2, [pc, #176]	; (8001ccc <HAL_DMA_Abort_IT+0x1a8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d040      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2b      	ldr	r2, [pc, #172]	; (8001cd0 <HAL_DMA_Abort_IT+0x1ac>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d03b      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a29      	ldr	r2, [pc, #164]	; (8001cd4 <HAL_DMA_Abort_IT+0x1b0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d036      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a28      	ldr	r2, [pc, #160]	; (8001cd8 <HAL_DMA_Abort_IT+0x1b4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d031      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <HAL_DMA_Abort_IT+0x1b8>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02c      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a25      	ldr	r2, [pc, #148]	; (8001ce0 <HAL_DMA_Abort_IT+0x1bc>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d027      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a23      	ldr	r2, [pc, #140]	; (8001ce4 <HAL_DMA_Abort_IT+0x1c0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d022      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a22      	ldr	r2, [pc, #136]	; (8001ce8 <HAL_DMA_Abort_IT+0x1c4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d01d      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a20      	ldr	r2, [pc, #128]	; (8001cec <HAL_DMA_Abort_IT+0x1c8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d018      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_DMA_Abort_IT+0x1cc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <HAL_DMA_Abort_IT+0x1d0>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00e      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <HAL_DMA_Abort_IT+0x1d4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d009      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1a      	ldr	r2, [pc, #104]	; (8001cfc <HAL_DMA_Abort_IT+0x1d8>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x17c>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_DMA_Abort_IT+0x1dc>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d108      	bne.n	8001cb2 <HAL_DMA_Abort_IT+0x18e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e178      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x480>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	e16f      	b.n	8001fa4 <HAL_DMA_Abort_IT+0x480>
 8001cc4:	40020010 	.word	0x40020010
 8001cc8:	40020028 	.word	0x40020028
 8001ccc:	40020040 	.word	0x40020040
 8001cd0:	40020058 	.word	0x40020058
 8001cd4:	40020070 	.word	0x40020070
 8001cd8:	40020088 	.word	0x40020088
 8001cdc:	400200a0 	.word	0x400200a0
 8001ce0:	400200b8 	.word	0x400200b8
 8001ce4:	40020410 	.word	0x40020410
 8001ce8:	40020428 	.word	0x40020428
 8001cec:	40020440 	.word	0x40020440
 8001cf0:	40020458 	.word	0x40020458
 8001cf4:	40020470 	.word	0x40020470
 8001cf8:	40020488 	.word	0x40020488
 8001cfc:	400204a0 	.word	0x400204a0
 8001d00:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 020e 	bic.w	r2, r2, #14
 8001d12:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a6c      	ldr	r2, [pc, #432]	; (8001ecc <HAL_DMA_Abort_IT+0x3a8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d04a      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a6b      	ldr	r2, [pc, #428]	; (8001ed0 <HAL_DMA_Abort_IT+0x3ac>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d045      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a69      	ldr	r2, [pc, #420]	; (8001ed4 <HAL_DMA_Abort_IT+0x3b0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d040      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a68      	ldr	r2, [pc, #416]	; (8001ed8 <HAL_DMA_Abort_IT+0x3b4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d03b      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a66      	ldr	r2, [pc, #408]	; (8001edc <HAL_DMA_Abort_IT+0x3b8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d036      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a65      	ldr	r2, [pc, #404]	; (8001ee0 <HAL_DMA_Abort_IT+0x3bc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d031      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a63      	ldr	r2, [pc, #396]	; (8001ee4 <HAL_DMA_Abort_IT+0x3c0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d02c      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a62      	ldr	r2, [pc, #392]	; (8001ee8 <HAL_DMA_Abort_IT+0x3c4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d027      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a60      	ldr	r2, [pc, #384]	; (8001eec <HAL_DMA_Abort_IT+0x3c8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d022      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a5f      	ldr	r2, [pc, #380]	; (8001ef0 <HAL_DMA_Abort_IT+0x3cc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d01d      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a5d      	ldr	r2, [pc, #372]	; (8001ef4 <HAL_DMA_Abort_IT+0x3d0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d018      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a5c      	ldr	r2, [pc, #368]	; (8001ef8 <HAL_DMA_Abort_IT+0x3d4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d013      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a5a      	ldr	r2, [pc, #360]	; (8001efc <HAL_DMA_Abort_IT+0x3d8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00e      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a59      	ldr	r2, [pc, #356]	; (8001f00 <HAL_DMA_Abort_IT+0x3dc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d009      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a57      	ldr	r2, [pc, #348]	; (8001f04 <HAL_DMA_Abort_IT+0x3e0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d004      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x290>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a56      	ldr	r2, [pc, #344]	; (8001f08 <HAL_DMA_Abort_IT+0x3e4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d108      	bne.n	8001dc6 <HAL_DMA_Abort_IT+0x2a2>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0201 	bic.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	e007      	b.n	8001dd6 <HAL_DMA_Abort_IT+0x2b2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a3c      	ldr	r2, [pc, #240]	; (8001ecc <HAL_DMA_Abort_IT+0x3a8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d072      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a3a      	ldr	r2, [pc, #232]	; (8001ed0 <HAL_DMA_Abort_IT+0x3ac>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d06d      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a39      	ldr	r2, [pc, #228]	; (8001ed4 <HAL_DMA_Abort_IT+0x3b0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d068      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a37      	ldr	r2, [pc, #220]	; (8001ed8 <HAL_DMA_Abort_IT+0x3b4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d063      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a36      	ldr	r2, [pc, #216]	; (8001edc <HAL_DMA_Abort_IT+0x3b8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d05e      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a34      	ldr	r2, [pc, #208]	; (8001ee0 <HAL_DMA_Abort_IT+0x3bc>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d059      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <HAL_DMA_Abort_IT+0x3c0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d054      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a31      	ldr	r2, [pc, #196]	; (8001ee8 <HAL_DMA_Abort_IT+0x3c4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d04f      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a30      	ldr	r2, [pc, #192]	; (8001eec <HAL_DMA_Abort_IT+0x3c8>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <HAL_DMA_Abort_IT+0x3cc>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ef4 <HAL_DMA_Abort_IT+0x3d0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <HAL_DMA_Abort_IT+0x3d4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a2a      	ldr	r2, [pc, #168]	; (8001efc <HAL_DMA_Abort_IT+0x3d8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <HAL_DMA_Abort_IT+0x3dc>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <HAL_DMA_Abort_IT+0x3e0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <HAL_DMA_Abort_IT+0x3e4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <HAL_DMA_Abort_IT+0x3e8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a22      	ldr	r2, [pc, #136]	; (8001f10 <HAL_DMA_Abort_IT+0x3ec>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <HAL_DMA_Abort_IT+0x3f0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_DMA_Abort_IT+0x3f4>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a1e      	ldr	r2, [pc, #120]	; (8001f1c <HAL_DMA_Abort_IT+0x3f8>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <HAL_DMA_Abort_IT+0x3fc>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <HAL_DMA_Abort_IT+0x400>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x3a2>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_DMA_Abort_IT+0x404>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d132      	bne.n	8001f2c <HAL_DMA_Abort_IT+0x408>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e031      	b.n	8001f2e <HAL_DMA_Abort_IT+0x40a>
 8001eca:	bf00      	nop
 8001ecc:	40020010 	.word	0x40020010
 8001ed0:	40020028 	.word	0x40020028
 8001ed4:	40020040 	.word	0x40020040
 8001ed8:	40020058 	.word	0x40020058
 8001edc:	40020070 	.word	0x40020070
 8001ee0:	40020088 	.word	0x40020088
 8001ee4:	400200a0 	.word	0x400200a0
 8001ee8:	400200b8 	.word	0x400200b8
 8001eec:	40020410 	.word	0x40020410
 8001ef0:	40020428 	.word	0x40020428
 8001ef4:	40020440 	.word	0x40020440
 8001ef8:	40020458 	.word	0x40020458
 8001efc:	40020470 	.word	0x40020470
 8001f00:	40020488 	.word	0x40020488
 8001f04:	400204a0 	.word	0x400204a0
 8001f08:	400204b8 	.word	0x400204b8
 8001f0c:	58025408 	.word	0x58025408
 8001f10:	5802541c 	.word	0x5802541c
 8001f14:	58025430 	.word	0x58025430
 8001f18:	58025444 	.word	0x58025444
 8001f1c:	58025458 	.word	0x58025458
 8001f20:	5802546c 	.word	0x5802546c
 8001f24:	58025480 	.word	0x58025480
 8001f28:	58025494 	.word	0x58025494
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d028      	beq.n	8001f84 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f40:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2201      	movs	r2, #1
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f60:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f78:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f82:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop

08001fb0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0cf      	b.n	8002162 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d106      	bne.n	8001fda <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2223      	movs	r2, #35	; 0x23
 8001fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7fe feeb 	bl	8000db0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	4b64      	ldr	r3, [pc, #400]	; (800216c <HAL_ETH_Init+0x1bc>)
 8001fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe0:	4a62      	ldr	r2, [pc, #392]	; (800216c <HAL_ETH_Init+0x1bc>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fea:	4b60      	ldr	r3, [pc, #384]	; (800216c <HAL_ETH_Init+0x1bc>)
 8001fec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7a1b      	ldrb	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d103      	bne.n	8002008 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff fa6d 	bl	80014e0 <HAL_SYSCFG_ETHInterfaceSelect>
 8002006:	e003      	b.n	8002010 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002008:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800200c:	f7ff fa68 	bl	80014e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002010:	4b57      	ldr	r3, [pc, #348]	; (8002170 <HAL_ETH_Init+0x1c0>)
 8002012:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800202a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800202c:	f7ff fa1c 	bl	8001468 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002032:	e011      	b.n	8002058 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002034:	f7ff fa18 	bl	8001468 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002042:	d909      	bls.n	8002058 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2204      	movs	r2, #4
 8002048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	22e0      	movs	r2, #224	; 0xe0
 8002050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e084      	b.n	8002162 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1e4      	bne.n	8002034 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f886 	bl	800217c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002070:	f001 fee2 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8002074:	4603      	mov	r3, r0
 8002076:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <HAL_ETH_Init+0x1c4>)
 8002078:	fba2 2303 	umull	r2, r3, r2, r3
 800207c:	0c9a      	lsrs	r2, r3, #18
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3a01      	subs	r2, #1
 8002084:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fa71 	bl	8002570 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002096:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800209a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6812      	ldr	r2, [r2, #0]
 80020a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020aa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	22e0      	movs	r2, #224	; 0xe0
 80020c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e049      	b.n	8002162 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_ETH_Init+0x1c8>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6952      	ldr	r2, [r2, #20]
 80020e2:	0051      	lsls	r1, r2, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80020ee:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fad9 	bl	80026aa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fb1f 	bl	800273c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	3305      	adds	r3, #5
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	021a      	lsls	r2, r3, #8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	3304      	adds	r3, #4
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	4619      	mov	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	3303      	adds	r3, #3
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	061a      	lsls	r2, r3, #24
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	3302      	adds	r3, #2
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	041b      	lsls	r3, r3, #16
 8002130:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	3301      	adds	r3, #1
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800213c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800214a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800214c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2210      	movs	r2, #16
 800215c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	58024400 	.word	0x58024400
 8002170:	58000400 	.word	0x58000400
 8002174:	431bde83 	.word	0x431bde83
 8002178:	ffff8001 	.word	0xffff8001

0800217c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800218c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002194:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002196:	f001 fe4f 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 800219a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d908      	bls.n	80021b6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4a1d      	ldr	r2, [pc, #116]	; (800221c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d804      	bhi.n	80021b6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e027      	b.n	8002206 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4a18      	ldr	r2, [pc, #96]	; (800221c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d908      	bls.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x54>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4a17      	ldr	r2, [pc, #92]	; (8002220 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d204      	bcs.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	e01a      	b.n	8002206 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	4a13      	ldr	r2, [pc, #76]	; (8002220 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d303      	bcc.n	80021e0 <HAL_ETH_SetMDIOClockRange+0x64>
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d911      	bls.n	8002204 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d908      	bls.n	80021fa <HAL_ETH_SetMDIOClockRange+0x7e>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <HAL_ETH_SetMDIOClockRange+0xac>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d804      	bhi.n	80021fa <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e005      	b.n	8002206 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e000      	b.n	8002206 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002204:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	01312cff 	.word	0x01312cff
 800221c:	02160ebf 	.word	0x02160ebf
 8002220:	03938700 	.word	0x03938700
 8002224:	05f5e0ff 	.word	0x05f5e0ff
 8002228:	08f0d17f 	.word	0x08f0d17f

0800222c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800223e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	791b      	ldrb	r3, [r3, #4]
 8002244:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002246:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7b1b      	ldrb	r3, [r3, #12]
 800224c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800224e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	7b5b      	ldrb	r3, [r3, #13]
 8002254:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002256:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	7b9b      	ldrb	r3, [r3, #14]
 800225c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800225e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	7bdb      	ldrb	r3, [r3, #15]
 8002264:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002266:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	7c12      	ldrb	r2, [r2, #16]
 800226c:	2a00      	cmp	r2, #0
 800226e:	d102      	bne.n	8002276 <ETH_SetMACConfig+0x4a>
 8002270:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002274:	e000      	b.n	8002278 <ETH_SetMACConfig+0x4c>
 8002276:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002278:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	7c52      	ldrb	r2, [r2, #17]
 800227e:	2a00      	cmp	r2, #0
 8002280:	d102      	bne.n	8002288 <ETH_SetMACConfig+0x5c>
 8002282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002286:	e000      	b.n	800228a <ETH_SetMACConfig+0x5e>
 8002288:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800228a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	7c9b      	ldrb	r3, [r3, #18]
 8002290:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002292:	431a      	orrs	r2, r3
               macconf->Speed |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002298:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800229e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	7f1b      	ldrb	r3, [r3, #28]
 80022a4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80022a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	7f5b      	ldrb	r3, [r3, #29]
 80022ac:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80022ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	7f92      	ldrb	r2, [r2, #30]
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	d102      	bne.n	80022be <ETH_SetMACConfig+0x92>
 80022b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022bc:	e000      	b.n	80022c0 <ETH_SetMACConfig+0x94>
 80022be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	7fdb      	ldrb	r3, [r3, #31]
 80022c6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	d102      	bne.n	80022da <ETH_SetMACConfig+0xae>
 80022d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d8:	e000      	b.n	80022dc <ETH_SetMACConfig+0xb0>
 80022da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022dc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022ea:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80022ec:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b56      	ldr	r3, [pc, #344]	; (8002458 <ETH_SetMACConfig+0x22c>)
 80022fe:	4013      	ands	r3, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	68f9      	ldr	r1, [r7, #12]
 8002306:	430b      	orrs	r3, r1
 8002308:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002316:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002318:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002320:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002322:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800232a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800232c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002334:	2a00      	cmp	r2, #0
 8002336:	d102      	bne.n	800233e <ETH_SetMACConfig+0x112>
 8002338:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800233c:	e000      	b.n	8002340 <ETH_SetMACConfig+0x114>
 800233e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002340:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002346:	4313      	orrs	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4b42      	ldr	r3, [pc, #264]	; (800245c <ETH_SetMACConfig+0x230>)
 8002352:	4013      	ands	r3, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	68f9      	ldr	r1, [r7, #12]
 800235a:	430b      	orrs	r3, r1
 800235c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002364:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800236a:	4313      	orrs	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <ETH_SetMACConfig+0x234>)
 8002376:	4013      	ands	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6812      	ldr	r2, [r2, #0]
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	430b      	orrs	r3, r1
 8002380:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002388:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800238e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002396:	2a00      	cmp	r2, #0
 8002398:	d101      	bne.n	800239e <ETH_SetMACConfig+0x172>
 800239a:	2280      	movs	r2, #128	; 0x80
 800239c:	e000      	b.n	80023a0 <ETH_SetMACConfig+0x174>
 800239e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80023a0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023a8:	4313      	orrs	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023b2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80023b6:	4013      	ands	r3, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	430b      	orrs	r3, r1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80023c8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023d0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	f023 0103 	bic.w	r1, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023f6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002412:	2a00      	cmp	r2, #0
 8002414:	d101      	bne.n	800241a <ETH_SetMACConfig+0x1ee>
 8002416:	2240      	movs	r2, #64	; 0x40
 8002418:	e000      	b.n	800241c <ETH_SetMACConfig+0x1f0>
 800241a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800241c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002424:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002426:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800242e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002430:	4313      	orrs	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800243c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	430a      	orrs	r2, r1
 8002448:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	00048083 	.word	0x00048083
 800245c:	c0f88000 	.word	0xc0f88000
 8002460:	fffffef0 	.word	0xfffffef0

08002464 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b38      	ldr	r3, [pc, #224]	; (800255c <ETH_SetDMAConfig+0xf8>)
 800247a:	4013      	ands	r3, r2
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	6811      	ldr	r1, [r2, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	430b      	orrs	r3, r1
 8002486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800248a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	791b      	ldrb	r3, [r3, #4]
 8002490:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002496:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	7b1b      	ldrb	r3, [r3, #12]
 800249c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800249e:	4313      	orrs	r3, r2
 80024a0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4b2c      	ldr	r3, [pc, #176]	; (8002560 <ETH_SetDMAConfig+0xfc>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	430b      	orrs	r3, r1
 80024b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024bc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	7b5b      	ldrb	r3, [r3, #13]
 80024c2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80024d8:	4b22      	ldr	r3, [pc, #136]	; (8002564 <ETH_SetDMAConfig+0x100>)
 80024da:	4013      	ands	r3, r2
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	68f9      	ldr	r1, [r7, #12]
 80024e2:	430b      	orrs	r3, r1
 80024e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	7d1b      	ldrb	r3, [r3, #20]
 80024f4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	7f5b      	ldrb	r3, [r3, #29]
 80024fc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800250e:	4b16      	ldr	r3, [pc, #88]	; (8002568 <ETH_SetDMAConfig+0x104>)
 8002510:	4013      	ands	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	430b      	orrs	r3, r1
 800251a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800251e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	7f1b      	ldrb	r3, [r3, #28]
 8002526:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002538:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <ETH_SetDMAConfig+0x108>)
 800253e:	4013      	ands	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	68f9      	ldr	r1, [r7, #12]
 8002546:	430b      	orrs	r3, r1
 8002548:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800254c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	ffff87fd 	.word	0xffff87fd
 8002560:	ffff2ffe 	.word	0xffff2ffe
 8002564:	fffec000 	.word	0xfffec000
 8002568:	ffc0efef 	.word	0xffc0efef
 800256c:	7fc0ffff 	.word	0x7fc0ffff

08002570 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b0a4      	sub	sp, #144	; 0x90
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002578:	2301      	movs	r3, #1
 800257a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800257e:	2300      	movs	r3, #0
 8002580:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002594:	2301      	movs	r3, #1
 8002596:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800259a:	2301      	movs	r3, #1
 800259c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80025c8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80025cc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025ea:	2300      	movs	r3, #0
 80025ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80025f2:	2300      	movs	r3, #0
 80025f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002602:	2301      	movs	r3, #1
 8002604:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002608:	2320      	movs	r3, #32
 800260a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800261a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002620:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002624:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800262c:	2302      	movs	r3, #2
 800262e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800264a:	2300      	movs	r3, #0
 800264c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002658:	4619      	mov	r1, r3
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fde6 	bl	800222c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002660:	2301      	movs	r3, #1
 8002662:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002664:	2301      	movs	r3, #1
 8002666:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002668:	2300      	movs	r3, #0
 800266a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800267a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800267e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002684:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002688:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002690:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff fee1 	bl	8002464 <ETH_SetDMAConfig>
}
 80026a2:	bf00      	nop
 80026a4:	3790      	adds	r7, #144	; 0x90
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e01d      	b.n	80026f4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68d9      	ldr	r1, [r3, #12]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026e2:	68b9      	ldr	r1, [r7, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	3206      	adds	r2, #6
 80026ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3301      	adds	r3, #1
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d9de      	bls.n	80026b8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002708:	461a      	mov	r2, r3
 800270a:	2303      	movs	r3, #3
 800270c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800272c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002744:	2300      	movs	r3, #0
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e023      	b.n	8002792 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6919      	ldr	r1, [r3, #16]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2200      	movs	r2, #0
 8002766:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2200      	movs	r2, #0
 8002772:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2200      	movs	r2, #0
 800277e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002780:	68b9      	ldr	r1, [r7, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	3212      	adds	r2, #18
 8002788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3301      	adds	r3, #1
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d9d8      	bls.n	800274a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027be:	461a      	mov	r2, r3
 80027c0:	2303      	movs	r3, #3
 80027c2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002806:	4b89      	ldr	r3, [pc, #548]	; (8002a2c <HAL_GPIO_Init+0x234>)
 8002808:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800280a:	e194      	b.n	8002b36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa01 f303 	lsl.w	r3, r1, r3
 8002818:	4013      	ands	r3, r2
 800281a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8186 	beq.w	8002b30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d005      	beq.n	800283c <HAL_GPIO_Init+0x44>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f003 0303 	and.w	r3, r3, #3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d130      	bne.n	800289e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	2203      	movs	r2, #3
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002872:	2201      	movs	r2, #1
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0201 	and.w	r2, r3, #1
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4313      	orrs	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d017      	beq.n	80028da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	2203      	movs	r2, #3
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d123      	bne.n	800292e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	08da      	lsrs	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	08da      	lsrs	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3208      	adds	r2, #8
 8002928:	69b9      	ldr	r1, [r7, #24]
 800292a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4013      	ands	r3, r2
 8002944:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0203 	and.w	r2, r3, #3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80e0 	beq.w	8002b30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_GPIO_Init+0x238>)
 8002972:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002976:	4a2e      	ldr	r2, [pc, #184]	; (8002a30 <HAL_GPIO_Init+0x238>)
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_GPIO_Init+0x238>)
 8002982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800298e:	4a29      	ldr	r2, [pc, #164]	; (8002a34 <HAL_GPIO_Init+0x23c>)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	089b      	lsrs	r3, r3, #2
 8002994:	3302      	adds	r3, #2
 8002996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	220f      	movs	r2, #15
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4013      	ands	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a20      	ldr	r2, [pc, #128]	; (8002a38 <HAL_GPIO_Init+0x240>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d052      	beq.n	8002a60 <HAL_GPIO_Init+0x268>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <HAL_GPIO_Init+0x244>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d031      	beq.n	8002a26 <HAL_GPIO_Init+0x22e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a1e      	ldr	r2, [pc, #120]	; (8002a40 <HAL_GPIO_Init+0x248>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d02b      	beq.n	8002a22 <HAL_GPIO_Init+0x22a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a1d      	ldr	r2, [pc, #116]	; (8002a44 <HAL_GPIO_Init+0x24c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d025      	beq.n	8002a1e <HAL_GPIO_Init+0x226>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_GPIO_Init+0x250>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01f      	beq.n	8002a1a <HAL_GPIO_Init+0x222>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_GPIO_Init+0x254>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d019      	beq.n	8002a16 <HAL_GPIO_Init+0x21e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1a      	ldr	r2, [pc, #104]	; (8002a50 <HAL_GPIO_Init+0x258>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <HAL_GPIO_Init+0x21a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_GPIO_Init+0x25c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00d      	beq.n	8002a0e <HAL_GPIO_Init+0x216>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_GPIO_Init+0x260>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d007      	beq.n	8002a0a <HAL_GPIO_Init+0x212>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_GPIO_Init+0x264>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d101      	bne.n	8002a06 <HAL_GPIO_Init+0x20e>
 8002a02:	2309      	movs	r3, #9
 8002a04:	e02d      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a06:	230a      	movs	r3, #10
 8002a08:	e02b      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	e029      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a0e:	2307      	movs	r3, #7
 8002a10:	e027      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a12:	2306      	movs	r3, #6
 8002a14:	e025      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a16:	2305      	movs	r3, #5
 8002a18:	e023      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e021      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e01f      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e01d      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e01b      	b.n	8002a62 <HAL_GPIO_Init+0x26a>
 8002a2a:	bf00      	nop
 8002a2c:	58000080 	.word	0x58000080
 8002a30:	58024400 	.word	0x58024400
 8002a34:	58000400 	.word	0x58000400
 8002a38:	58020000 	.word	0x58020000
 8002a3c:	58020400 	.word	0x58020400
 8002a40:	58020800 	.word	0x58020800
 8002a44:	58020c00 	.word	0x58020c00
 8002a48:	58021000 	.word	0x58021000
 8002a4c:	58021400 	.word	0x58021400
 8002a50:	58021800 	.word	0x58021800
 8002a54:	58021c00 	.word	0x58021c00
 8002a58:	58022000 	.word	0x58022000
 8002a5c:	58022400 	.word	0x58022400
 8002a60:	2300      	movs	r3, #0
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	f002 0203 	and.w	r2, r2, #3
 8002a68:	0092      	lsls	r2, r2, #2
 8002a6a:	4093      	lsls	r3, r2
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a72:	4938      	ldr	r1, [pc, #224]	; (8002b54 <HAL_GPIO_Init+0x35c>)
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	3302      	adds	r3, #2
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f47f ae63 	bne.w	800280c <HAL_GPIO_Init+0x14>
  }
}
 8002b46:	bf00      	nop
 8002b48:	bf00      	nop
 8002b4a:	3724      	adds	r7, #36	; 0x24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	58000400 	.word	0x58000400

08002b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
 8002b74:	e001      	b.n	8002b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
 8002b94:	4613      	mov	r3, r2
 8002b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002ba4:	e003      	b.n	8002bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	041a      	lsls	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	619a      	str	r2, [r3, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002bc4:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <HAL_HSEM_FastTake+0x2c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3320      	adds	r3, #32
 8002bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bce:	4a07      	ldr	r2, [pc, #28]	; (8002bec <HAL_HSEM_FastTake+0x30>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	58026400 	.word	0x58026400
 8002bec:	80000300 	.word	0x80000300

08002bf0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002bfa:	4906      	ldr	r1, [pc, #24]	; (8002c14 <HAL_HSEM_Release+0x24>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	58026400 	.word	0x58026400

08002c18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1a:	b08f      	sub	sp, #60	; 0x3c
 8002c1c:	af0a      	add	r7, sp, #40	; 0x28
 8002c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e116      	b.n	8002e58 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d106      	bne.n	8002c4a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f7fe faa1 	bl	800118c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d102      	bne.n	8002c64 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f004 fc0d 	bl	8007488 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	687e      	ldr	r6, [r7, #4]
 8002c76:	466d      	mov	r5, sp
 8002c78:	f106 0410 	add.w	r4, r6, #16
 8002c7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c88:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c8c:	1d33      	adds	r3, r6, #4
 8002c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c90:	6838      	ldr	r0, [r7, #0]
 8002c92:	f004 fb8b 	bl	80073ac <USB_CoreInit>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0d7      	b.n	8002e58 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fbfb 	bl	80074aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e04a      	b.n	8002d50 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	333d      	adds	r3, #61	; 0x3d
 8002cca:	2201      	movs	r2, #1
 8002ccc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	333c      	adds	r3, #60	; 0x3c
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ce2:	7bfa      	ldrb	r2, [r7, #15]
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	b298      	uxth	r0, r3
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3344      	adds	r3, #68	; 0x44
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3340      	adds	r3, #64	; 0x40
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3348      	adds	r3, #72	; 0x48
 8002d1e:	2200      	movs	r2, #0
 8002d20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d22:	7bfa      	ldrb	r2, [r7, #15]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	334c      	adds	r3, #76	; 0x4c
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d36:	7bfa      	ldrb	r2, [r7, #15]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3354      	adds	r3, #84	; 0x54
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	73fb      	strb	r3, [r7, #15]
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d3af      	bcc.n	8002cba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e044      	b.n	8002dea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4413      	add	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d8c:	7bfa      	ldrb	r2, [r7, #15]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002da2:	7bfa      	ldrb	r2, [r7, #15]
 8002da4:	6879      	ldr	r1, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de4:	7bfb      	ldrb	r3, [r7, #15]
 8002de6:	3301      	adds	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d3b5      	bcc.n	8002d60 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	603b      	str	r3, [r7, #0]
 8002dfa:	687e      	ldr	r6, [r7, #4]
 8002dfc:	466d      	mov	r5, sp
 8002dfe:	f106 0410 	add.w	r4, r6, #16
 8002e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e12:	1d33      	adds	r3, r6, #4
 8002e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e16:	6838      	ldr	r0, [r7, #0]
 8002e18:	f004 fb94 	bl	8007544 <USB_DevInit>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e014      	b.n	8002e58 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f80a 	bl	8002e60 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 fd52 	bl	80078fa <USB_DevDisconnect>

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e60 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	10000003 	.word	0x10000003

08002ea8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002eb0:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	2b06      	cmp	r3, #6
 8002eba:	d00a      	beq.n	8002ed2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d001      	beq.n	8002ece <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e040      	b.n	8002f50 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e03e      	b.n	8002f50 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002eda:	491f      	ldr	r1, [pc, #124]	; (8002f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002ee2:	f7fe fac1 	bl	8001468 <HAL_GetTick>
 8002ee6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002ee8:	e009      	b.n	8002efe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002eea:	f7fe fabd 	bl	8001468 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ef8:	d901      	bls.n	8002efe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e028      	b.n	8002f50 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f0a:	d1ee      	bne.n	8002eea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b1e      	cmp	r3, #30
 8002f10:	d008      	beq.n	8002f24 <HAL_PWREx_ConfigSupply+0x7c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b2e      	cmp	r3, #46	; 0x2e
 8002f16:	d005      	beq.n	8002f24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b1d      	cmp	r3, #29
 8002f1c:	d002      	beq.n	8002f24 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b2d      	cmp	r3, #45	; 0x2d
 8002f22:	d114      	bne.n	8002f4e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f24:	f7fe faa0 	bl	8001468 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f2a:	e009      	b.n	8002f40 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f2c:	f7fe fa9c 	bl	8001468 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f3a:	d901      	bls.n	8002f40 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e007      	b.n	8002f50 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f40:	4b05      	ldr	r3, [pc, #20]	; (8002f58 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4c:	d1ee      	bne.n	8002f2c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	58024800 	.word	0x58024800

08002f5c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	60d3      	str	r3, [r2, #12]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	58024800 	.word	0x58024800

08002f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08c      	sub	sp, #48	; 0x30
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f000 bc1d 	b.w	80037ca <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 8087 	beq.w	80030ac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9e:	4b99      	ldr	r3, [pc, #612]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fa8:	4b96      	ldr	r3, [pc, #600]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d007      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x48>
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	2b18      	cmp	r3, #24
 8002fb8:	d110      	bne.n	8002fdc <HAL_RCC_OscConfig+0x60>
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d10b      	bne.n	8002fdc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc4:	4b8f      	ldr	r3, [pc, #572]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d06c      	beq.n	80030aa <HAL_RCC_OscConfig+0x12e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d168      	bne.n	80030aa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e3f6      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe4:	d106      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x78>
 8002fe6:	4b87      	ldr	r3, [pc, #540]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a86      	ldr	r2, [pc, #536]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e02e      	b.n	8003052 <HAL_RCC_OscConfig+0xd6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10c      	bne.n	8003016 <HAL_RCC_OscConfig+0x9a>
 8002ffc:	4b81      	ldr	r3, [pc, #516]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a80      	ldr	r2, [pc, #512]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	4b7e      	ldr	r3, [pc, #504]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a7d      	ldr	r2, [pc, #500]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800300e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003012:	6013      	str	r3, [r2, #0]
 8003014:	e01d      	b.n	8003052 <HAL_RCC_OscConfig+0xd6>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800301e:	d10c      	bne.n	800303a <HAL_RCC_OscConfig+0xbe>
 8003020:	4b78      	ldr	r3, [pc, #480]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a77      	ldr	r2, [pc, #476]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b75      	ldr	r3, [pc, #468]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a74      	ldr	r2, [pc, #464]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0xd6>
 800303a:	4b72      	ldr	r3, [pc, #456]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a71      	ldr	r2, [pc, #452]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800304c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003050:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d013      	beq.n	8003082 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fa05 	bl	8001468 <HAL_GetTick>
 800305e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003062:	f7fe fa01 	bl	8001468 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b64      	cmp	r3, #100	; 0x64
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e3aa      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003074:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0xe6>
 8003080:	e014      	b.n	80030ac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe f9f1 	bl	8001468 <HAL_GetTick>
 8003086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308a:	f7fe f9ed 	bl	8001468 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b64      	cmp	r3, #100	; 0x64
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e396      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800309c:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f0      	bne.n	800308a <HAL_RCC_OscConfig+0x10e>
 80030a8:	e000      	b.n	80030ac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80cb 	beq.w	8003250 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ba:	4b52      	ldr	r3, [pc, #328]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030c4:	4b4f      	ldr	r3, [pc, #316]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_RCC_OscConfig+0x164>
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	2b18      	cmp	r3, #24
 80030d4:	d156      	bne.n	8003184 <HAL_RCC_OscConfig+0x208>
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d151      	bne.n	8003184 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030e0:	4b48      	ldr	r3, [pc, #288]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_RCC_OscConfig+0x17c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e368      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f8:	4b42      	ldr	r3, [pc, #264]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 0219 	bic.w	r2, r3, #25
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	493f      	ldr	r1, [pc, #252]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800310a:	f7fe f9ad 	bl	8001468 <HAL_GetTick>
 800310e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003112:	f7fe f9a9 	bl	8001468 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e352      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003124:	4b37      	ldr	r3, [pc, #220]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	f7fe f9ca 	bl	80014c8 <HAL_GetREVID>
 8003134:	4603      	mov	r3, r0
 8003136:	f241 0203 	movw	r2, #4099	; 0x1003
 800313a:	4293      	cmp	r3, r2
 800313c:	d817      	bhi.n	800316e <HAL_RCC_OscConfig+0x1f2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d108      	bne.n	8003158 <HAL_RCC_OscConfig+0x1dc>
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800314e:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003154:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003156:	e07b      	b.n	8003250 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003158:	4b2a      	ldr	r3, [pc, #168]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	031b      	lsls	r3, r3, #12
 8003166:	4927      	ldr	r1, [pc, #156]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800316c:	e070      	b.n	8003250 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316e:	4b25      	ldr	r3, [pc, #148]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	4921      	ldr	r1, [pc, #132]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003182:	e065      	b.n	8003250 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d048      	beq.n	800321e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800318c:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 0219 	bic.w	r2, r3, #25
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	491a      	ldr	r1, [pc, #104]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe f963 	bl	8001468 <HAL_GetTick>
 80031a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fe f95f 	bl	8001468 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e308      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d0f0      	beq.n	80031a6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	f7fe f980 	bl	80014c8 <HAL_GetREVID>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d81a      	bhi.n	8003208 <HAL_RCC_OscConfig+0x28c>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b40      	cmp	r3, #64	; 0x40
 80031d8:	d108      	bne.n	80031ec <HAL_RCC_OscConfig+0x270>
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 80031e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031e8:	6053      	str	r3, [r2, #4]
 80031ea:	e031      	b.n	8003250 <HAL_RCC_OscConfig+0x2d4>
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	031b      	lsls	r3, r3, #12
 80031fa:	4902      	ldr	r1, [pc, #8]	; (8003204 <HAL_RCC_OscConfig+0x288>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
 8003200:	e026      	b.n	8003250 <HAL_RCC_OscConfig+0x2d4>
 8003202:	bf00      	nop
 8003204:	58024400 	.word	0x58024400
 8003208:	4b9a      	ldr	r3, [pc, #616]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	4997      	ldr	r1, [pc, #604]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
 800321c:	e018      	b.n	8003250 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321e:	4b95      	ldr	r3, [pc, #596]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a94      	ldr	r2, [pc, #592]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe f91d 	bl	8001468 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003232:	f7fe f919 	bl	8001468 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e2c2      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003244:	4b8b      	ldr	r3, [pc, #556]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 80a9 	beq.w	80033b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325e:	4b85      	ldr	r3, [pc, #532]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003266:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003268:	4b82      	ldr	r3, [pc, #520]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d007      	beq.n	8003284 <HAL_RCC_OscConfig+0x308>
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b18      	cmp	r3, #24
 8003278:	d13a      	bne.n	80032f0 <HAL_RCC_OscConfig+0x374>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f003 0303 	and.w	r3, r3, #3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d135      	bne.n	80032f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003284:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_OscConfig+0x320>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e296      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800329c:	f7fe f914 	bl	80014c8 <HAL_GetREVID>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d817      	bhi.n	80032da <HAL_RCC_OscConfig+0x35e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d108      	bne.n	80032c4 <HAL_RCC_OscConfig+0x348>
 80032b2:	4b70      	ldr	r3, [pc, #448]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80032ba:	4a6e      	ldr	r2, [pc, #440]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80032bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032c0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032c2:	e075      	b.n	80033b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032c4:	4b6b      	ldr	r3, [pc, #428]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	069b      	lsls	r3, r3, #26
 80032d2:	4968      	ldr	r1, [pc, #416]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032d8:	e06a      	b.n	80033b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032da:	4b66      	ldr	r3, [pc, #408]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	061b      	lsls	r3, r3, #24
 80032e8:	4962      	ldr	r1, [pc, #392]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ee:	e05f      	b.n	80033b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d042      	beq.n	800337e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032f8:	4b5e      	ldr	r3, [pc, #376]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5d      	ldr	r2, [pc, #372]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80032fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003302:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe f8b0 	bl	8001468 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800330c:	f7fe f8ac 	bl	8001468 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e255      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800331e:	4b55      	ldr	r3, [pc, #340]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800332a:	f7fe f8cd 	bl	80014c8 <HAL_GetREVID>
 800332e:	4603      	mov	r3, r0
 8003330:	f241 0203 	movw	r2, #4099	; 0x1003
 8003334:	4293      	cmp	r3, r2
 8003336:	d817      	bhi.n	8003368 <HAL_RCC_OscConfig+0x3ec>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	2b20      	cmp	r3, #32
 800333e:	d108      	bne.n	8003352 <HAL_RCC_OscConfig+0x3d6>
 8003340:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003348:	4a4a      	ldr	r2, [pc, #296]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 800334a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800334e:	6053      	str	r3, [r2, #4]
 8003350:	e02e      	b.n	80033b0 <HAL_RCC_OscConfig+0x434>
 8003352:	4b48      	ldr	r3, [pc, #288]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	069b      	lsls	r3, r3, #26
 8003360:	4944      	ldr	r1, [pc, #272]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
 8003366:	e023      	b.n	80033b0 <HAL_RCC_OscConfig+0x434>
 8003368:	4b42      	ldr	r3, [pc, #264]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	061b      	lsls	r3, r3, #24
 8003376:	493f      	ldr	r1, [pc, #252]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003378:	4313      	orrs	r3, r2
 800337a:	60cb      	str	r3, [r1, #12]
 800337c:	e018      	b.n	80033b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800337e:	4b3d      	ldr	r3, [pc, #244]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a3c      	ldr	r2, [pc, #240]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fe f86d 	bl	8001468 <HAL_GetTick>
 800338e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003392:	f7fe f869 	bl	8001468 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e212      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033a4:	4b33      	ldr	r3, [pc, #204]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0308 	and.w	r3, r3, #8
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d036      	beq.n	800342a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d019      	beq.n	80033f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c4:	4b2b      	ldr	r3, [pc, #172]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80033c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c8:	4a2a      	ldr	r2, [pc, #168]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe f84a 	bl	8001468 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fe f846 	bl	8001468 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e1ef      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80033ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x45c>
 80033f6:	e018      	b.n	800342a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f8:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80033fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fc:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe f830 	bl	8001468 <HAL_GetTick>
 8003408:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340c:	f7fe f82c 	bl	8001468 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e1d5      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d039      	beq.n	80034aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01c      	beq.n	8003478 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a0c      	ldr	r2, [pc, #48]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003448:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800344a:	f7fe f80d 	bl	8001468 <HAL_GetTick>
 800344e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003452:	f7fe f809 	bl	8001468 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1b2      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <HAL_RCC_OscConfig+0x4f8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x4d6>
 8003470:	e01b      	b.n	80034aa <HAL_RCC_OscConfig+0x52e>
 8003472:	bf00      	nop
 8003474:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003478:	4b9b      	ldr	r3, [pc, #620]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a9a      	ldr	r2, [pc, #616]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800347e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003482:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003484:	f7fd fff0 	bl	8001468 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800348c:	f7fd ffec 	bl	8001468 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e195      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800349e:	4b92      	ldr	r3, [pc, #584]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8081 	beq.w	80035ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034b8:	4b8c      	ldr	r3, [pc, #560]	; (80036ec <HAL_RCC_OscConfig+0x770>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a8b      	ldr	r2, [pc, #556]	; (80036ec <HAL_RCC_OscConfig+0x770>)
 80034be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034c4:	f7fd ffd0 	bl	8001468 <HAL_GetTick>
 80034c8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034cc:	f7fd ffcc 	bl	8001468 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e175      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034de:	4b83      	ldr	r3, [pc, #524]	; (80036ec <HAL_RCC_OscConfig+0x770>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <HAL_RCC_OscConfig+0x584>
 80034f2:	4b7d      	ldr	r3, [pc, #500]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a7c      	ldr	r2, [pc, #496]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
 80034fe:	e02d      	b.n	800355c <HAL_RCC_OscConfig+0x5e0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x5a6>
 8003508:	4b77      	ldr	r3, [pc, #476]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a76      	ldr	r2, [pc, #472]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b74      	ldr	r3, [pc, #464]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a73      	ldr	r2, [pc, #460]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
 8003520:	e01c      	b.n	800355c <HAL_RCC_OscConfig+0x5e0>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b05      	cmp	r3, #5
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c8>
 800352a:	4b6f      	ldr	r3, [pc, #444]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	4a6e      	ldr	r2, [pc, #440]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003530:	f043 0304 	orr.w	r3, r3, #4
 8003534:	6713      	str	r3, [r2, #112]	; 0x70
 8003536:	4b6c      	ldr	r3, [pc, #432]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a6b      	ldr	r2, [pc, #428]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	e00b      	b.n	800355c <HAL_RCC_OscConfig+0x5e0>
 8003544:	4b68      	ldr	r3, [pc, #416]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003548:	4a67      	ldr	r2, [pc, #412]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800354a:	f023 0301 	bic.w	r3, r3, #1
 800354e:	6713      	str	r3, [r2, #112]	; 0x70
 8003550:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	4a64      	ldr	r2, [pc, #400]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003556:	f023 0304 	bic.w	r3, r3, #4
 800355a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d015      	beq.n	8003590 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003564:	f7fd ff80 	bl	8001468 <HAL_GetTick>
 8003568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fd ff7c 	bl	8001468 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e123      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003582:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0ee      	beq.n	800356c <HAL_RCC_OscConfig+0x5f0>
 800358e:	e014      	b.n	80035ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fd ff6a 	bl	8001468 <HAL_GetTick>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003596:	e00a      	b.n	80035ae <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003598:	f7fd ff66 	bl	8001468 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e10d      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035ae:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1ee      	bne.n	8003598 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8102 	beq.w	80037c8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035c4:	4b48      	ldr	r3, [pc, #288]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035cc:	2b18      	cmp	r3, #24
 80035ce:	f000 80bd 	beq.w	800374c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	f040 809e 	bne.w	8003718 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035dc:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a41      	ldr	r2, [pc, #260]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80035e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd ff3e 	bl	8001468 <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fd ff3a 	bl	8001468 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0e3      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003602:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800360e:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003612:	4b37      	ldr	r3, [pc, #220]	; (80036f0 <HAL_RCC_OscConfig+0x774>)
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	430a      	orrs	r2, r1
 8003622:	4931      	ldr	r1, [pc, #196]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003624:	4313      	orrs	r3, r2
 8003626:	628b      	str	r3, [r1, #40]	; 0x28
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	3b01      	subs	r3, #1
 800362e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003636:	3b01      	subs	r3, #1
 8003638:	025b      	lsls	r3, r3, #9
 800363a:	b29b      	uxth	r3, r3
 800363c:	431a      	orrs	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	3b01      	subs	r3, #1
 8003644:	041b      	lsls	r3, r3, #16
 8003646:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	3b01      	subs	r3, #1
 8003652:	061b      	lsls	r3, r3, #24
 8003654:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003658:	4923      	ldr	r1, [pc, #140]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	4a21      	ldr	r2, [pc, #132]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800366a:	4b1f      	ldr	r3, [pc, #124]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800366c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800366e:	4b21      	ldr	r3, [pc, #132]	; (80036f4 <HAL_RCC_OscConfig+0x778>)
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003676:	00d2      	lsls	r2, r2, #3
 8003678:	491b      	ldr	r1, [pc, #108]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800367a:	4313      	orrs	r3, r2
 800367c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f023 020c 	bic.w	r2, r3, #12
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4917      	ldr	r1, [pc, #92]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800368c:	4313      	orrs	r3, r2
 800368e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003690:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	f023 0202 	bic.w	r2, r3, #2
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369c:	4912      	ldr	r1, [pc, #72]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <HAL_RCC_OscConfig+0x76c>)
 80036d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fd fec3 	bl	8001468 <HAL_GetTick>
 80036e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036e4:	e011      	b.n	800370a <HAL_RCC_OscConfig+0x78e>
 80036e6:	bf00      	nop
 80036e8:	58024400 	.word	0x58024400
 80036ec:	58024800 	.word	0x58024800
 80036f0:	fffffc0c 	.word	0xfffffc0c
 80036f4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fd feb6 	bl	8001468 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e05f      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800370a:	4b32      	ldr	r3, [pc, #200]	; (80037d4 <HAL_RCC_OscConfig+0x858>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x77c>
 8003716:	e057      	b.n	80037c8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_RCC_OscConfig+0x858>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a2d      	ldr	r2, [pc, #180]	; (80037d4 <HAL_RCC_OscConfig+0x858>)
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fd fea0 	bl	8001468 <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372c:	f7fd fe9c 	bl	8001468 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e045      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800373e:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_RCC_OscConfig+0x858>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x7b0>
 800374a:	e03d      	b.n	80037c8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800374c:	4b21      	ldr	r3, [pc, #132]	; (80037d4 <HAL_RCC_OscConfig+0x858>)
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_RCC_OscConfig+0x858>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2b01      	cmp	r3, #1
 800375e:	d031      	beq.n	80037c4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f003 0203 	and.w	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d12a      	bne.n	80037c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d122      	bne.n	80037c4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d11a      	bne.n	80037c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0a5b      	lsrs	r3, r3, #9
 8003792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800379a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d111      	bne.n	80037c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d108      	bne.n	80037c4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	0e1b      	lsrs	r3, r3, #24
 80037b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037be:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3730      	adds	r7, #48	; 0x30
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	58024400 	.word	0x58024400

080037d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e19c      	b.n	8003b26 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b8a      	ldr	r3, [pc, #552]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 030f 	and.w	r3, r3, #15
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d910      	bls.n	800381c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b87      	ldr	r3, [pc, #540]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 020f 	bic.w	r2, r3, #15
 8003802:	4985      	ldr	r1, [pc, #532]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b83      	ldr	r3, [pc, #524]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e184      	b.n	8003b26 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d010      	beq.n	800384a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	4b7b      	ldr	r3, [pc, #492]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003834:	429a      	cmp	r2, r3
 8003836:	d908      	bls.n	800384a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003838:	4b78      	ldr	r3, [pc, #480]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4975      	ldr	r1, [pc, #468]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003846:	4313      	orrs	r3, r2
 8003848:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d010      	beq.n	8003878 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	4b70      	ldr	r3, [pc, #448]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003862:	429a      	cmp	r2, r3
 8003864:	d908      	bls.n	8003878 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003866:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	496a      	ldr	r1, [pc, #424]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003874:	4313      	orrs	r3, r2
 8003876:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b00      	cmp	r3, #0
 8003882:	d010      	beq.n	80038a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	4b64      	ldr	r3, [pc, #400]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003890:	429a      	cmp	r2, r3
 8003892:	d908      	bls.n	80038a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003894:	4b61      	ldr	r3, [pc, #388]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	495e      	ldr	r1, [pc, #376]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d010      	beq.n	80038d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038be:	429a      	cmp	r2, r3
 80038c0:	d908      	bls.n	80038d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038c2:	4b56      	ldr	r3, [pc, #344]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4953      	ldr	r1, [pc, #332]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d010      	beq.n	8003902 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	4b4d      	ldr	r3, [pc, #308]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d908      	bls.n	8003902 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f0:	4b4a      	ldr	r3, [pc, #296]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f023 020f 	bic.w	r2, r3, #15
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4947      	ldr	r1, [pc, #284]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d055      	beq.n	80039ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800390e:	4b43      	ldr	r3, [pc, #268]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	4940      	ldr	r1, [pc, #256]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800391c:	4313      	orrs	r3, r2
 800391e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d107      	bne.n	8003938 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003928:	4b3c      	ldr	r3, [pc, #240]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d121      	bne.n	8003978 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0f6      	b.n	8003b26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d107      	bne.n	8003950 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003940:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d115      	bne.n	8003978 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0ea      	b.n	8003b26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003958:	4b30      	ldr	r3, [pc, #192]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e0de      	b.n	8003b26 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003968:	4b2c      	ldr	r3, [pc, #176]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0d6      	b.n	8003b26 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003978:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f023 0207 	bic.w	r2, r3, #7
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4925      	ldr	r1, [pc, #148]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 8003986:	4313      	orrs	r3, r2
 8003988:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398a:	f7fd fd6d 	bl	8001468 <HAL_GetTick>
 800398e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003990:	e00a      	b.n	80039a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003992:	f7fd fd69 	bl	8001468 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e0be      	b.n	8003b26 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a8:	4b1c      	ldr	r3, [pc, #112]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d1eb      	bne.n	8003992 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d010      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d208      	bcs.n	80039e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f023 020f 	bic.w	r2, r3, #15
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	490e      	ldr	r1, [pc, #56]	; (8003a1c <HAL_RCC_ClockConfig+0x244>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d214      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 020f 	bic.w	r2, r3, #15
 80039fe:	4906      	ldr	r1, [pc, #24]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <HAL_RCC_ClockConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e086      	b.n	8003b26 <HAL_RCC_ClockConfig+0x34e>
 8003a18:	52002000 	.word	0x52002000
 8003a1c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d010      	beq.n	8003a4e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d208      	bcs.n	8003a4e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a3c:	4b3c      	ldr	r3, [pc, #240]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	4939      	ldr	r1, [pc, #228]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d010      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d208      	bcs.n	8003a7c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a6a:	4b31      	ldr	r3, [pc, #196]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	492e      	ldr	r1, [pc, #184]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d010      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d208      	bcs.n	8003aaa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	4922      	ldr	r1, [pc, #136]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d010      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69da      	ldr	r2, [r3, #28]
 8003aba:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d208      	bcs.n	8003ad8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ac6:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	4917      	ldr	r1, [pc, #92]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ad8:	f000 f834 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b14      	ldr	r3, [pc, #80]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 030f 	and.w	r3, r3, #15
 8003ae8:	4912      	ldr	r1, [pc, #72]	; (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	f003 031f 	and.w	r3, r3, #31
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
 8003af4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003af6:	4b0e      	ldr	r3, [pc, #56]	; (8003b30 <HAL_RCC_ClockConfig+0x358>)
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	4a0d      	ldr	r2, [pc, #52]	; (8003b34 <HAL_RCC_ClockConfig+0x35c>)
 8003b00:	5cd3      	ldrb	r3, [r2, r3]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0c:	4a0a      	ldr	r2, [pc, #40]	; (8003b38 <HAL_RCC_ClockConfig+0x360>)
 8003b0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b10:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <HAL_RCC_ClockConfig+0x364>)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <HAL_RCC_ClockConfig+0x368>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fc5a 	bl	80013d4 <HAL_InitTick>
 8003b20:	4603      	mov	r3, r0
 8003b22:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	58024400 	.word	0x58024400
 8003b34:	08007a3c 	.word	0x08007a3c
 8003b38:	24000004 	.word	0x24000004
 8003b3c:	24000000 	.word	0x24000000
 8003b40:	24000008 	.word	0x24000008

08003b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b4a:	4bb3      	ldr	r3, [pc, #716]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b52:	2b18      	cmp	r3, #24
 8003b54:	f200 8155 	bhi.w	8003e02 <HAL_RCC_GetSysClockFreq+0x2be>
 8003b58:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003bc5 	.word	0x08003bc5
 8003b64:	08003e03 	.word	0x08003e03
 8003b68:	08003e03 	.word	0x08003e03
 8003b6c:	08003e03 	.word	0x08003e03
 8003b70:	08003e03 	.word	0x08003e03
 8003b74:	08003e03 	.word	0x08003e03
 8003b78:	08003e03 	.word	0x08003e03
 8003b7c:	08003e03 	.word	0x08003e03
 8003b80:	08003beb 	.word	0x08003beb
 8003b84:	08003e03 	.word	0x08003e03
 8003b88:	08003e03 	.word	0x08003e03
 8003b8c:	08003e03 	.word	0x08003e03
 8003b90:	08003e03 	.word	0x08003e03
 8003b94:	08003e03 	.word	0x08003e03
 8003b98:	08003e03 	.word	0x08003e03
 8003b9c:	08003e03 	.word	0x08003e03
 8003ba0:	08003bf1 	.word	0x08003bf1
 8003ba4:	08003e03 	.word	0x08003e03
 8003ba8:	08003e03 	.word	0x08003e03
 8003bac:	08003e03 	.word	0x08003e03
 8003bb0:	08003e03 	.word	0x08003e03
 8003bb4:	08003e03 	.word	0x08003e03
 8003bb8:	08003e03 	.word	0x08003e03
 8003bbc:	08003e03 	.word	0x08003e03
 8003bc0:	08003bf7 	.word	0x08003bf7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bc4:	4b94      	ldr	r3, [pc, #592]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bd0:	4b91      	ldr	r3, [pc, #580]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	08db      	lsrs	r3, r3, #3
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	4a90      	ldr	r2, [pc, #576]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003be0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003be2:	e111      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003be4:	4b8d      	ldr	r3, [pc, #564]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003be6:	61bb      	str	r3, [r7, #24]
    break;
 8003be8:	e10e      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003bea:	4b8d      	ldr	r3, [pc, #564]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bec:	61bb      	str	r3, [r7, #24]
    break;
 8003bee:	e10b      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003bf0:	4b8c      	ldr	r3, [pc, #560]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bf2:	61bb      	str	r3, [r7, #24]
    break;
 8003bf4:	e108      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bf6:	4b88      	ldr	r3, [pc, #544]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c00:	4b85      	ldr	r3, [pc, #532]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c0a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c0c:	4b82      	ldr	r3, [pc, #520]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c16:	4b80      	ldr	r3, [pc, #512]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1a:	08db      	lsrs	r3, r3, #3
 8003c1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80e1 	beq.w	8003dfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	f000 8083 	beq.w	8003d48 <HAL_RCC_GetSysClockFreq+0x204>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	f200 80a1 	bhi.w	8003d8c <HAL_RCC_GetSysClockFreq+0x248>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x114>
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d056      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c56:	e099      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c58:	4b6f      	ldr	r3, [pc, #444]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0320 	and.w	r3, r3, #32
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02d      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c64:	4b6c      	ldr	r3, [pc, #432]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	08db      	lsrs	r3, r3, #3
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	4a6b      	ldr	r2, [pc, #428]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
 8003c74:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	4b62      	ldr	r3, [pc, #392]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ca2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003cbe:	e087      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd2:	4b51      	ldr	r3, [pc, #324]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ce6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d02:	e065      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d2a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d46:	e043      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d52:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5a:	4b2f      	ldr	r3, [pc, #188]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d8a:	e021      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	ee07 3a90 	vmov	s15, r3
 8003d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d96:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dae:	ed97 6a02 	vldr	s12, [r7, #8]
 8003db2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003db6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	0a5b      	lsrs	r3, r3, #9
 8003dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dda:	3301      	adds	r3, #1
 8003ddc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	ee07 3a90 	vmov	s15, r3
 8003de4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003de8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003df4:	ee17 3a90 	vmov	r3, s15
 8003df8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003dfa:	e005      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
    break;
 8003e00:	e002      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e04:	61bb      	str	r3, [r7, #24]
    break;
 8003e06:	bf00      	nop
  }

  return sysclockfreq;
 8003e08:	69bb      	ldr	r3, [r7, #24]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3724      	adds	r7, #36	; 0x24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	58024400 	.word	0x58024400
 8003e1c:	03d09000 	.word	0x03d09000
 8003e20:	003d0900 	.word	0x003d0900
 8003e24:	007a1200 	.word	0x007a1200
 8003e28:	46000000 	.word	0x46000000
 8003e2c:	4c742400 	.word	0x4c742400
 8003e30:	4a742400 	.word	0x4a742400
 8003e34:	4af42400 	.word	0x4af42400

08003e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e3e:	f7ff fe81 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003e42:	4602      	mov	r2, r0
 8003e44:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	0a1b      	lsrs	r3, r3, #8
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	490f      	ldr	r1, [pc, #60]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x54>)
 8003e50:	5ccb      	ldrb	r3, [r1, r3]
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	fa22 f303 	lsr.w	r3, r2, r3
 8003e5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	4a09      	ldr	r2, [pc, #36]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x54>)
 8003e66:	5cd3      	ldrb	r3, [r2, r3]
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	4a07      	ldr	r2, [pc, #28]	; (8003e90 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e76:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <HAL_RCC_GetHCLKFreq+0x58>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	58024400 	.word	0x58024400
 8003e8c:	08007a3c 	.word	0x08007a3c
 8003e90:	24000004 	.word	0x24000004
 8003e94:	24000000 	.word	0x24000000

08003e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e9c:	f7ff ffcc 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	58024400 	.word	0x58024400
 8003ec0:	08007a3c 	.word	0x08007a3c

08003ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ec8:	f7ff ffb6 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4904      	ldr	r1, [pc, #16]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	58024400 	.word	0x58024400
 8003eec:	08007a3c 	.word	0x08007a3c

08003ef0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003efc:	2300      	movs	r3, #0
 8003efe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d03f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f14:	d02a      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f1a:	d824      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f20:	d018      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f26:	d81e      	bhi.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f30:	d007      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f32:	e018      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f34:	4ba3      	ldr	r3, [pc, #652]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4aa2      	ldr	r2, [pc, #648]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f40:	e015      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2102      	movs	r1, #2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 f9d5 	bl	80052f8 <RCCEx_PLL2_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f52:	e00c      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3324      	adds	r3, #36	; 0x24
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 fa7e 	bl	800545c <RCCEx_PLL3_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f64:	e003      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
      break;
 8003f6a:	e000      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d109      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f74:	4b93      	ldr	r3, [pc, #588]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f80:	4990      	ldr	r1, [pc, #576]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	650b      	str	r3, [r1, #80]	; 0x50
 8003f86:	e001      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
 8003f8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d03d      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d826      	bhi.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fbd 	.word	0x08003fbd
 8003fac:	08003fcb 	.word	0x08003fcb
 8003fb0:	08003fdd 	.word	0x08003fdd
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fbc:	4b81      	ldr	r3, [pc, #516]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	4a80      	ldr	r2, [pc, #512]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e015      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 f991 	bl	80052f8 <RCCEx_PLL2_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fda:	e00c      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3324      	adds	r3, #36	; 0x24
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 fa3a 	bl	800545c <RCCEx_PLL3_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fec:	e003      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff6:	7dfb      	ldrb	r3, [r7, #23]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ffc:	4b71      	ldr	r3, [pc, #452]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004000:	f023 0207 	bic.w	r2, r3, #7
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	496e      	ldr	r1, [pc, #440]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	650b      	str	r3, [r1, #80]	; 0x50
 800400e:	e001      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800401c:	2b00      	cmp	r3, #0
 800401e:	d042      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004028:	d02b      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800402a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402e:	d825      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004030:	2bc0      	cmp	r3, #192	; 0xc0
 8004032:	d028      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004034:	2bc0      	cmp	r3, #192	; 0xc0
 8004036:	d821      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d016      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800403c:	2b80      	cmp	r3, #128	; 0x80
 800403e:	d81d      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d007      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004048:	e018      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800404a:	4b5e      	ldr	r3, [pc, #376]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	4a5d      	ldr	r2, [pc, #372]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004054:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004056:	e017      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f001 f94a 	bl	80052f8 <RCCEx_PLL2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004068:	e00e      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3324      	adds	r3, #36	; 0x24
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f001 f9f3 	bl	800545c <RCCEx_PLL3_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800407a:	e005      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
      break;
 8004080:	e002      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004082:	bf00      	nop
 8004084:	e000      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800408e:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004092:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	494a      	ldr	r1, [pc, #296]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800409c:	4313      	orrs	r3, r2
 800409e:	650b      	str	r3, [r1, #80]	; 0x50
 80040a0:	e001      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	7dfb      	ldrb	r3, [r7, #23]
 80040a4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d049      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040bc:	d030      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80040be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040c2:	d82a      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040c8:	d02c      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80040ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040ce:	d824      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d4:	d018      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80040d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040da:	d81e      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80040e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040e4:	d007      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80040e6:	e018      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e8:	4b36      	ldr	r3, [pc, #216]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4a35      	ldr	r2, [pc, #212]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80040ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040f4:	e017      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 f8fb 	bl	80052f8 <RCCEx_PLL2_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004106:	e00e      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3324      	adds	r3, #36	; 0x24
 800410c:	2100      	movs	r1, #0
 800410e:	4618      	mov	r0, r3
 8004110:	f001 f9a4 	bl	800545c <RCCEx_PLL3_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004118:	e005      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
      break;
 800411e:	e002      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004120:	bf00      	nop
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004126:	7dfb      	ldrb	r3, [r7, #23]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800412c:	4b25      	ldr	r3, [pc, #148]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004130:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800413a:	4922      	ldr	r1, [pc, #136]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800413c:	4313      	orrs	r3, r2
 800413e:	658b      	str	r3, [r1, #88]	; 0x58
 8004140:	e001      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414e:	2b00      	cmp	r3, #0
 8004150:	d04b      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800415c:	d030      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800415e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004162:	d82a      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004164:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004168:	d02e      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800416a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800416e:	d824      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004170:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004174:	d018      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004176:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800417a:	d81e      	bhi.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004184:	d007      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004186:	e018      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004188:	4b0e      	ldr	r3, [pc, #56]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800418e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004192:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004194:	e019      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	3304      	adds	r3, #4
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f001 f8ab 	bl	80052f8 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80041a6:	e010      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3324      	adds	r3, #36	; 0x24
 80041ac:	2100      	movs	r1, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 f954 	bl	800545c <RCCEx_PLL3_Config>
 80041b4:	4603      	mov	r3, r0
 80041b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041b8:	e007      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	75fb      	strb	r3, [r7, #23]
      break;
 80041be:	e004      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80041c0:	bf00      	nop
 80041c2:	e002      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80041c4:	58024400 	.word	0x58024400
      break;
 80041c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d10a      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80041d0:	4b99      	ldr	r3, [pc, #612]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041de:	4996      	ldr	r1, [pc, #600]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	658b      	str	r3, [r1, #88]	; 0x58
 80041e4:	e001      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
 80041e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d032      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fa:	2b30      	cmp	r3, #48	; 0x30
 80041fc:	d01c      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80041fe:	2b30      	cmp	r3, #48	; 0x30
 8004200:	d817      	bhi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004202:	2b20      	cmp	r3, #32
 8004204:	d00c      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004206:	2b20      	cmp	r3, #32
 8004208:	d813      	bhi.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d016      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800420e:	2b10      	cmp	r3, #16
 8004210:	d10f      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004212:	4b89      	ldr	r3, [pc, #548]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	4a88      	ldr	r2, [pc, #544]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800421e:	e00e      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	2102      	movs	r1, #2
 8004226:	4618      	mov	r0, r3
 8004228:	f001 f866 	bl	80052f8 <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004230:	e005      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
      break;
 8004236:	e002      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004238:	bf00      	nop
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800423c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800423e:	7dfb      	ldrb	r3, [r7, #23]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004244:	4b7c      	ldr	r3, [pc, #496]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004248:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	4979      	ldr	r1, [pc, #484]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004252:	4313      	orrs	r3, r2
 8004254:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004256:	e001      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d047      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004270:	d030      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004272:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004276:	d82a      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004278:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800427c:	d02c      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800427e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004282:	d824      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004288:	d018      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428e:	d81e      	bhi.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004298:	d007      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800429a:	e018      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429c:	4b66      	ldr	r3, [pc, #408]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	4a65      	ldr	r2, [pc, #404]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042a8:	e017      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	3304      	adds	r3, #4
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 f821 	bl	80052f8 <RCCEx_PLL2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042ba:	e00e      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3324      	adds	r3, #36	; 0x24
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f8ca 	bl	800545c <RCCEx_PLL3_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042cc:	e005      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80042d4:	bf00      	nop
 80042d6:	e000      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80042d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042e0:	4b55      	ldr	r3, [pc, #340]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	4952      	ldr	r1, [pc, #328]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	650b      	str	r3, [r1, #80]	; 0x50
 80042f2:	e001      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d049      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800430c:	d02e      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800430e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004312:	d828      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004314:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004318:	d02a      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800431a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800431e:	d822      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004324:	d026      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004326:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800432a:	d81c      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800432c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004330:	d010      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004336:	d816      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01d      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800433c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004340:	d111      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	2101      	movs	r1, #1
 8004348:	4618      	mov	r0, r3
 800434a:	f000 ffd5 	bl	80052f8 <RCCEx_PLL2_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004352:	e012      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3324      	adds	r3, #36	; 0x24
 8004358:	2101      	movs	r1, #1
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f87e 	bl	800545c <RCCEx_PLL3_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004364:	e009      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	75fb      	strb	r3, [r7, #23]
      break;
 800436a:	e006      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800436c:	bf00      	nop
 800436e:	e004      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004370:	bf00      	nop
 8004372:	e002      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004374:	bf00      	nop
 8004376:	e000      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800437a:	7dfb      	ldrb	r3, [r7, #23]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004380:	4b2d      	ldr	r3, [pc, #180]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004384:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438c:	492a      	ldr	r1, [pc, #168]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800438e:	4313      	orrs	r3, r2
 8004390:	650b      	str	r3, [r1, #80]	; 0x50
 8004392:	e001      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d04d      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ae:	d02e      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80043b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043b4:	d828      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ba:	d02a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d822      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043c6:	d026      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x526>
 80043c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043cc:	d81c      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d2:	d010      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80043d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d8:	d816      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01d      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80043de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043e2:	d111      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	2101      	movs	r1, #1
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 ff84 	bl	80052f8 <RCCEx_PLL2_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043f4:	e012      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3324      	adds	r3, #36	; 0x24
 80043fa:	2101      	movs	r1, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 f82d 	bl	800545c <RCCEx_PLL3_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004406:	e009      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	75fb      	strb	r3, [r7, #23]
      break;
 800440c:	e006      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800440e:	bf00      	nop
 8004410:	e004      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004412:	bf00      	nop
 8004414:	e002      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004416:	bf00      	nop
 8004418:	e000      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800441a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004426:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004430:	4901      	ldr	r1, [pc, #4]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004432:	4313      	orrs	r3, r2
 8004434:	658b      	str	r3, [r1, #88]	; 0x58
 8004436:	e003      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004438:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d02f      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004454:	d00e      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800445a:	d814      	bhi.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d015      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004464:	d10f      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004466:	4baf      	ldr	r3, [pc, #700]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446a:	4aae      	ldr	r2, [pc, #696]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004470:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004472:	e00c      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	2101      	movs	r1, #1
 800447a:	4618      	mov	r0, r3
 800447c:	f000 ff3c 	bl	80052f8 <RCCEx_PLL2_Config>
 8004480:	4603      	mov	r3, r0
 8004482:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004484:	e003      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	75fb      	strb	r3, [r7, #23]
      break;
 800448a:	e000      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800448c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800448e:	7dfb      	ldrb	r3, [r7, #23]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004494:	4ba3      	ldr	r3, [pc, #652]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004498:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a0:	49a0      	ldr	r1, [pc, #640]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	650b      	str	r3, [r1, #80]	; 0x50
 80044a6:	e001      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d032      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d81b      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80044c0:	a201      	add	r2, pc, #4	; (adr r2, 80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044ff 	.word	0x080044ff
 80044cc:	080044d9 	.word	0x080044d9
 80044d0:	080044e7 	.word	0x080044e7
 80044d4:	080044ff 	.word	0x080044ff
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d8:	4b92      	ldr	r3, [pc, #584]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	4a91      	ldr	r2, [pc, #580]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044e4:	e00c      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3304      	adds	r3, #4
 80044ea:	2102      	movs	r1, #2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 ff03 	bl	80052f8 <RCCEx_PLL2_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044f6:	e003      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	75fb      	strb	r3, [r7, #23]
      break;
 80044fc:	e000      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80044fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004500:	7dfb      	ldrb	r3, [r7, #23]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004506:	4b87      	ldr	r3, [pc, #540]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	f023 0203 	bic.w	r2, r3, #3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	4984      	ldr	r1, [pc, #528]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004514:	4313      	orrs	r3, r2
 8004516:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004518:	e001      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 8086 	beq.w	8004638 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452c:	4b7e      	ldr	r3, [pc, #504]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a7d      	ldr	r2, [pc, #500]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004536:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004538:	f7fc ff96 	bl	8001468 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800453e:	e009      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004540:	f7fc ff92 	bl	8001468 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	; 0x64
 800454c:	d902      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	75fb      	strb	r3, [r7, #23]
        break;
 8004552:	e005      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004554:	4b74      	ldr	r3, [pc, #464]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ef      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d166      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004566:	4b6f      	ldr	r3, [pc, #444]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004568:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004570:	4053      	eors	r3, r2
 8004572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004576:	2b00      	cmp	r3, #0
 8004578:	d013      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800457a:	4b6a      	ldr	r3, [pc, #424]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004582:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004584:	4b67      	ldr	r3, [pc, #412]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a66      	ldr	r2, [pc, #408]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800458a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004590:	4b64      	ldr	r3, [pc, #400]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a63      	ldr	r2, [pc, #396]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800459c:	4a61      	ldr	r2, [pc, #388]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ac:	d115      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7fc ff5b 	bl	8001468 <HAL_GetTick>
 80045b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045b4:	e00b      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b6:	f7fc ff57 	bl	8001468 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d902      	bls.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	75fb      	strb	r3, [r7, #23]
            break;
 80045cc:	e005      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045ce:	4b55      	ldr	r3, [pc, #340]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0ed      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d126      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ee:	d10d      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80045f0:	4b4c      	ldr	r3, [pc, #304]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045fe:	0919      	lsrs	r1, r3, #4
 8004600:	4b4a      	ldr	r3, [pc, #296]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004602:	400b      	ands	r3, r1
 8004604:	4947      	ldr	r1, [pc, #284]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004606:	4313      	orrs	r3, r2
 8004608:	610b      	str	r3, [r1, #16]
 800460a:	e005      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800460c:	4b45      	ldr	r3, [pc, #276]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	4a44      	ldr	r2, [pc, #272]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004612:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004616:	6113      	str	r3, [r2, #16]
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800461a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004626:	493f      	ldr	r1, [pc, #252]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004628:	4313      	orrs	r3, r2
 800462a:	670b      	str	r3, [r1, #112]	; 0x70
 800462c:	e004      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	75bb      	strb	r3, [r7, #22]
 8004632:	e001      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
 8004636:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8085 	beq.w	8004750 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800464a:	2b28      	cmp	r3, #40	; 0x28
 800464c:	d866      	bhi.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800464e:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004731 	.word	0x08004731
 8004658:	0800471d 	.word	0x0800471d
 800465c:	0800471d 	.word	0x0800471d
 8004660:	0800471d 	.word	0x0800471d
 8004664:	0800471d 	.word	0x0800471d
 8004668:	0800471d 	.word	0x0800471d
 800466c:	0800471d 	.word	0x0800471d
 8004670:	0800471d 	.word	0x0800471d
 8004674:	080046f9 	.word	0x080046f9
 8004678:	0800471d 	.word	0x0800471d
 800467c:	0800471d 	.word	0x0800471d
 8004680:	0800471d 	.word	0x0800471d
 8004684:	0800471d 	.word	0x0800471d
 8004688:	0800471d 	.word	0x0800471d
 800468c:	0800471d 	.word	0x0800471d
 8004690:	0800471d 	.word	0x0800471d
 8004694:	0800470b 	.word	0x0800470b
 8004698:	0800471d 	.word	0x0800471d
 800469c:	0800471d 	.word	0x0800471d
 80046a0:	0800471d 	.word	0x0800471d
 80046a4:	0800471d 	.word	0x0800471d
 80046a8:	0800471d 	.word	0x0800471d
 80046ac:	0800471d 	.word	0x0800471d
 80046b0:	0800471d 	.word	0x0800471d
 80046b4:	08004731 	.word	0x08004731
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800471d 	.word	0x0800471d
 80046c0:	0800471d 	.word	0x0800471d
 80046c4:	0800471d 	.word	0x0800471d
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	0800471d 	.word	0x0800471d
 80046d0:	0800471d 	.word	0x0800471d
 80046d4:	08004731 	.word	0x08004731
 80046d8:	0800471d 	.word	0x0800471d
 80046dc:	0800471d 	.word	0x0800471d
 80046e0:	0800471d 	.word	0x0800471d
 80046e4:	0800471d 	.word	0x0800471d
 80046e8:	0800471d 	.word	0x0800471d
 80046ec:	0800471d 	.word	0x0800471d
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	08004731 	.word	0x08004731
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	2101      	movs	r1, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fdfa 	bl	80052f8 <RCCEx_PLL2_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004708:	e013      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3324      	adds	r3, #36	; 0x24
 800470e:	2101      	movs	r1, #1
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fea3 	bl	800545c <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800471a:	e00a      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	75fb      	strb	r3, [r7, #23]
      break;
 8004720:	e007      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004722:	bf00      	nop
 8004724:	58024400 	.word	0x58024400
 8004728:	58024800 	.word	0x58024800
 800472c:	00ffffcf 	.word	0x00ffffcf
      break;
 8004730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004738:	4b96      	ldr	r3, [pc, #600]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004744:	4993      	ldr	r1, [pc, #588]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	654b      	str	r3, [r1, #84]	; 0x54
 800474a:	e001      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	7dfb      	ldrb	r3, [r7, #23]
 800474e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d038      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004760:	2b05      	cmp	r3, #5
 8004762:	d821      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004764:	a201      	add	r2, pc, #4	; (adr r2, 800476c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	080047af 	.word	0x080047af
 8004770:	08004785 	.word	0x08004785
 8004774:	08004797 	.word	0x08004797
 8004778:	080047af 	.word	0x080047af
 800477c:	080047af 	.word	0x080047af
 8004780:	080047af 	.word	0x080047af
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3304      	adds	r3, #4
 8004788:	2101      	movs	r1, #1
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fdb4 	bl	80052f8 <RCCEx_PLL2_Config>
 8004790:	4603      	mov	r3, r0
 8004792:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004794:	e00c      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3324      	adds	r3, #36	; 0x24
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fe5d 	bl	800545c <RCCEx_PLL3_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80047a6:	e003      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	75fb      	strb	r3, [r7, #23]
      break;
 80047ac:	e000      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80047ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047b6:	4b77      	ldr	r3, [pc, #476]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	f023 0207 	bic.w	r2, r3, #7
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c2:	4974      	ldr	r1, [pc, #464]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	654b      	str	r3, [r1, #84]	; 0x54
 80047c8:	e001      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
 80047cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d03a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	2b05      	cmp	r3, #5
 80047e2:	d821      	bhi.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	0800482f 	.word	0x0800482f
 80047f0:	08004805 	.word	0x08004805
 80047f4:	08004817 	.word	0x08004817
 80047f8:	0800482f 	.word	0x0800482f
 80047fc:	0800482f 	.word	0x0800482f
 8004800:	0800482f 	.word	0x0800482f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3304      	adds	r3, #4
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fd74 	bl	80052f8 <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004814:	e00c      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3324      	adds	r3, #36	; 0x24
 800481a:	2101      	movs	r1, #1
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fe1d 	bl	800545c <RCCEx_PLL3_Config>
 8004822:	4603      	mov	r3, r0
 8004824:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	75fb      	strb	r3, [r7, #23]
      break;
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800482e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004830:	7dfb      	ldrb	r3, [r7, #23]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10a      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004836:	4b57      	ldr	r3, [pc, #348]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	f023 0207 	bic.w	r2, r3, #7
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	4953      	ldr	r1, [pc, #332]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004846:	4313      	orrs	r3, r2
 8004848:	658b      	str	r3, [r1, #88]	; 0x58
 800484a:	e001      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d04b      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004866:	d02e      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800486c:	d828      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800486e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004872:	d02a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004878:	d822      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800487a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800487e:	d026      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004880:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004884:	d81c      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800488a:	d010      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800488c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004890:	d816      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01d      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800489a:	d111      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	2100      	movs	r1, #0
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fd28 	bl	80052f8 <RCCEx_PLL2_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048ac:	e012      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	3324      	adds	r3, #36	; 0x24
 80048b2:	2102      	movs	r1, #2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fdd1 	bl	800545c <RCCEx_PLL3_Config>
 80048ba:	4603      	mov	r3, r0
 80048bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80048be:	e009      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	75fb      	strb	r3, [r7, #23]
      break;
 80048c4:	e006      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048c6:	bf00      	nop
 80048c8:	e004      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048ca:	bf00      	nop
 80048cc:	e002      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048ce:	bf00      	nop
 80048d0:	e000      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80048d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048da:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048e8:	492a      	ldr	r1, [pc, #168]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	654b      	str	r3, [r1, #84]	; 0x54
 80048ee:	e001      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f0:	7dfb      	ldrb	r3, [r7, #23]
 80048f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d04d      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004906:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800490a:	d02e      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800490c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004910:	d828      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004916:	d02a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491c:	d822      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800491e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004922:	d026      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004924:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004928:	d81c      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800492a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800492e:	d010      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004934:	d816      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01d      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493e:	d111      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3304      	adds	r3, #4
 8004944:	2100      	movs	r1, #0
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fcd6 	bl	80052f8 <RCCEx_PLL2_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004950:	e012      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3324      	adds	r3, #36	; 0x24
 8004956:	2102      	movs	r1, #2
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fd7f 	bl	800545c <RCCEx_PLL3_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004962:	e009      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	75fb      	strb	r3, [r7, #23]
      break;
 8004968:	e006      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800496a:	bf00      	nop
 800496c:	e004      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800496e:	bf00      	nop
 8004970:	e002      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10c      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004982:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800498c:	4901      	ldr	r1, [pc, #4]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	658b      	str	r3, [r1, #88]	; 0x58
 8004992:	e003      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004994:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d04b      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049b2:	d02e      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80049b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049b8:	d828      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049be:	d02a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c4:	d822      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049ca:	d026      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80049cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049d0:	d81c      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049d6:	d010      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80049d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049dc:	d816      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01d      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80049e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e6:	d111      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fc82 	bl	80052f8 <RCCEx_PLL2_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049f8:	e012      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3324      	adds	r3, #36	; 0x24
 80049fe:	2102      	movs	r1, #2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fd2b 	bl	800545c <RCCEx_PLL3_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004a0a:	e009      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a10:	e006      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a12:	bf00      	nop
 8004a14:	e004      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a16:	bf00      	nop
 8004a18:	e002      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e000      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004a1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10a      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a26:	4b9d      	ldr	r3, [pc, #628]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a34:	4999      	ldr	r1, [pc, #612]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	658b      	str	r3, [r1, #88]	; 0x58
 8004a3a:	e001      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d10a      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3324      	adds	r3, #36	; 0x24
 8004a5c:	2102      	movs	r1, #2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fcfc 	bl	800545c <RCCEx_PLL3_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a6e:	4b8b      	ldr	r3, [pc, #556]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a7c:	4987      	ldr	r1, [pc, #540]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d01a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a98:	d10a      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3324      	adds	r3, #36	; 0x24
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 fcdb 	bl	800545c <RCCEx_PLL3_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ab0:	4b7a      	ldr	r3, [pc, #488]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004abe:	4977      	ldr	r1, [pc, #476]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d034      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ada:	d01d      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ae0:	d817      	bhi.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aea:	d009      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004aec:	e011      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3304      	adds	r3, #4
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fbff 	bl	80052f8 <RCCEx_PLL2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004afe:	e00c      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	2102      	movs	r1, #2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fca8 	bl	800545c <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004b10:	e003      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	75fb      	strb	r3, [r7, #23]
      break;
 8004b16:	e000      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b20:	4b5e      	ldr	r3, [pc, #376]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b2e:	495b      	ldr	r1, [pc, #364]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	658b      	str	r3, [r1, #88]	; 0x58
 8004b34:	e001      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d033      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b50:	d01c      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004b52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b56:	d816      	bhi.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5c:	d003      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b62:	d007      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004b64:	e00f      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b66:	4b4d      	ldr	r3, [pc, #308]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	4a4c      	ldr	r2, [pc, #304]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b72:	e00c      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3324      	adds	r3, #36	; 0x24
 8004b78:	2101      	movs	r1, #1
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fc6e 	bl	800545c <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b84:	e003      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8a:	e000      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b94:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba2:	493e      	ldr	r1, [pc, #248]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	654b      	str	r3, [r1, #84]	; 0x54
 8004ba8:	e001      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d029      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bc6:	d007      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004bc8:	e00f      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bca:	4b34      	ldr	r3, [pc, #208]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	4a33      	ldr	r2, [pc, #204]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fb8a 	bl	80052f8 <RCCEx_PLL2_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	75fb      	strb	r3, [r7, #23]
      break;
 8004bee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf0:	7dfb      	ldrb	r3, [r7, #23]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d109      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bf6:	4b29      	ldr	r3, [pc, #164]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	4926      	ldr	r1, [pc, #152]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c08:	e001      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3324      	adds	r3, #36	; 0x24
 8004c1e:	2102      	movs	r1, #2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fc1b 	bl	800545c <RCCEx_PLL3_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d033      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c44:	d017      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4a:	d811      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c50:	d013      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c56:	d80b      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d010      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c60:	d106      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c62:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	4a0d      	ldr	r2, [pc, #52]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c6e:	e007      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
      break;
 8004c74:	e004      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004c76:	bf00      	nop
 8004c78:	e002      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10c      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c92:	4902      	ldr	r1, [pc, #8]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	654b      	str	r3, [r1, #84]	; 0x54
 8004c98:	e004      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
 8004ca2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cb0:	4b31      	ldr	r3, [pc, #196]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	492e      	ldr	r1, [pc, #184]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004cce:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cdc:	4926      	ldr	r1, [pc, #152]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cee:	4b22      	ldr	r3, [pc, #136]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cfa:	491f      	ldr	r1, [pc, #124]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d16:	6113      	str	r3, [r2, #16]
 8004d18:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d22:	4915      	ldr	r1, [pc, #84]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da08      	bge.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d30:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3c:	490e      	ldr	r1, [pc, #56]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5c:	4906      	ldr	r1, [pc, #24]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d62:	7dbb      	ldrb	r3, [r7, #22]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e000      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	58024400 	.word	0x58024400

08004d7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d80:	f7ff f85a 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b06      	ldr	r3, [pc, #24]	; (8004da0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	091b      	lsrs	r3, r3, #4
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4904      	ldr	r1, [pc, #16]	; (8004da4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	58024400 	.word	0x58024400
 8004da4:	08007a3c 	.word	0x08007a3c

08004da8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	; 0x24
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004db0:	4ba1      	ldr	r3, [pc, #644]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004dba:	4b9f      	ldr	r3, [pc, #636]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	0b1b      	lsrs	r3, r3, #12
 8004dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004dc6:	4b9c      	ldr	r3, [pc, #624]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	091b      	lsrs	r3, r3, #4
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004dd2:	4b99      	ldr	r3, [pc, #612]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	08db      	lsrs	r3, r3, #3
 8004dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8111 	beq.w	8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f000 8083 	beq.w	8004f04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	f200 80a1 	bhi.w	8004f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d056      	beq.n	8004ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e12:	e099      	b.n	8004f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e14:	4b88      	ldr	r3, [pc, #544]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d02d      	beq.n	8004e7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e20:	4b85      	ldr	r3, [pc, #532]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	08db      	lsrs	r3, r3, #3
 8004e26:	f003 0303 	and.w	r3, r3, #3
 8004e2a:	4a84      	ldr	r2, [pc, #528]	; (800503c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e30:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	ee07 3a90 	vmov	s15, r3
 8004e38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e4a:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e7a:	e087      	b.n	8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005044 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8e:	4b6a      	ldr	r3, [pc, #424]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e96:	ee07 3a90 	vmov	s15, r3
 8004e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ea2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ebe:	e065      	b.n	8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed2:	4b59      	ldr	r3, [pc, #356]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ee6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f02:	e043      	b.n	8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800504c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f16:	4b48      	ldr	r3, [pc, #288]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f46:	e021      	b.n	8004f8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5a:	4b37      	ldr	r3, [pc, #220]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f8c:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	0a5b      	lsrs	r3, r3, #9
 8004f92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f96:	ee07 3a90 	vmov	s15, r3
 8004f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb2:	ee17 2a90 	vmov	r2, s15
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004fba:	4b1f      	ldr	r3, [pc, #124]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	0c1b      	lsrs	r3, r3, #16
 8004fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc4:	ee07 3a90 	vmov	s15, r3
 8004fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fe0:	ee17 2a90 	vmov	r2, s15
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004fe8:	4b13      	ldr	r3, [pc, #76]	; (8005038 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	0e1b      	lsrs	r3, r3, #24
 8004fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005002:	edd7 6a07 	vldr	s13, [r7, #28]
 8005006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800500a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500e:	ee17 2a90 	vmov	r2, s15
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005016:	e008      	b.n	800502a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	609a      	str	r2, [r3, #8]
}
 800502a:	bf00      	nop
 800502c:	3724      	adds	r7, #36	; 0x24
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	58024400 	.word	0x58024400
 800503c:	03d09000 	.word	0x03d09000
 8005040:	46000000 	.word	0x46000000
 8005044:	4c742400 	.word	0x4c742400
 8005048:	4a742400 	.word	0x4a742400
 800504c:	4af42400 	.word	0x4af42400

08005050 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	; 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005058:	4ba1      	ldr	r3, [pc, #644]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005062:	4b9f      	ldr	r3, [pc, #636]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	0d1b      	lsrs	r3, r3, #20
 8005068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800506c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800506e:	4b9c      	ldr	r3, [pc, #624]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	0a1b      	lsrs	r3, r3, #8
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800507a:	4b99      	ldr	r3, [pc, #612]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800507c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507e:	08db      	lsrs	r3, r3, #3
 8005080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8111 	beq.w	80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	f000 8083 	beq.w	80051ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	f200 80a1 	bhi.w	80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d056      	beq.n	8005168 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050ba:	e099      	b.n	80051f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050bc:	4b88      	ldr	r3, [pc, #544]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d02d      	beq.n	8005124 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050c8:	4b85      	ldr	r3, [pc, #532]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	08db      	lsrs	r3, r3, #3
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	4a84      	ldr	r2, [pc, #528]	; (80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f2:	4b7b      	ldr	r3, [pc, #492]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005102:	ed97 6a03 	vldr	s12, [r7, #12]
 8005106:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800510a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005122:	e087      	b.n	8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005136:	4b6a      	ldr	r3, [pc, #424]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005146:	ed97 6a03 	vldr	s12, [r7, #12]
 800514a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800514e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005162:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005166:	e065      	b.n	8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517a:	4b59      	ldr	r3, [pc, #356]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518a:	ed97 6a03 	vldr	s12, [r7, #12]
 800518e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051aa:	e043      	b.n	8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051be:	4b48      	ldr	r3, [pc, #288]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ee:	e021      	b.n	8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005202:	4b37      	ldr	r3, [pc, #220]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005212:	ed97 6a03 	vldr	s12, [r7, #12]
 8005216:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800521a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005232:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005234:	4b2a      	ldr	r3, [pc, #168]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	0a5b      	lsrs	r3, r3, #9
 800523a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800524a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525a:	ee17 2a90 	vmov	r2, s15
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005262:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526c:	ee07 3a90 	vmov	s15, r3
 8005270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005278:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005288:	ee17 2a90 	vmov	r2, s15
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005290:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	0e1b      	lsrs	r3, r3, #24
 8005296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b6:	ee17 2a90 	vmov	r2, s15
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052be:	e008      	b.n	80052d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	609a      	str	r2, [r3, #8]
}
 80052d2:	bf00      	nop
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	58024400 	.word	0x58024400
 80052e4:	03d09000 	.word	0x03d09000
 80052e8:	46000000 	.word	0x46000000
 80052ec:	4c742400 	.word	0x4c742400
 80052f0:	4a742400 	.word	0x4a742400
 80052f4:	4af42400 	.word	0x4af42400

080052f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005306:	4b53      	ldr	r3, [pc, #332]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b03      	cmp	r3, #3
 8005310:	d101      	bne.n	8005316 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e099      	b.n	800544a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005316:	4b4f      	ldr	r3, [pc, #316]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a4e      	ldr	r2, [pc, #312]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 800531c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005322:	f7fc f8a1 	bl	8001468 <HAL_GetTick>
 8005326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005328:	e008      	b.n	800533c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800532a:	f7fc f89d 	bl	8001468 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e086      	b.n	800544a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800533c:	4b45      	ldr	r3, [pc, #276]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f0      	bne.n	800532a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005348:	4b42      	ldr	r3, [pc, #264]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	493f      	ldr	r1, [pc, #252]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 8005358:	4313      	orrs	r3, r2
 800535a:	628b      	str	r3, [r1, #40]	; 0x28
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	3b01      	subs	r3, #1
 8005362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	3b01      	subs	r3, #1
 800536c:	025b      	lsls	r3, r3, #9
 800536e:	b29b      	uxth	r3, r3
 8005370:	431a      	orrs	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	3b01      	subs	r3, #1
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	3b01      	subs	r3, #1
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800538c:	4931      	ldr	r1, [pc, #196]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005392:	4b30      	ldr	r3, [pc, #192]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	492d      	ldr	r1, [pc, #180]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053a4:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a8:	f023 0220 	bic.w	r2, r3, #32
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	4928      	ldr	r1, [pc, #160]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053b6:	4b27      	ldr	r3, [pc, #156]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	4a26      	ldr	r2, [pc, #152]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053bc:	f023 0310 	bic.w	r3, r3, #16
 80053c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053c2:	4b24      	ldr	r3, [pc, #144]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053c6:	4b24      	ldr	r3, [pc, #144]	; (8005458 <RCCEx_PLL2_Config+0x160>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	69d2      	ldr	r2, [r2, #28]
 80053ce:	00d2      	lsls	r2, r2, #3
 80053d0:	4920      	ldr	r1, [pc, #128]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053d6:	4b1f      	ldr	r3, [pc, #124]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053dc:	f043 0310 	orr.w	r3, r3, #16
 80053e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053e8:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	4a19      	ldr	r2, [pc, #100]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053f4:	e00f      	b.n	8005416 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d106      	bne.n	800540a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053fc:	4b15      	ldr	r3, [pc, #84]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 80053fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005400:	4a14      	ldr	r2, [pc, #80]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 8005402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005406:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005408:	e005      	b.n	8005416 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800540a:	4b12      	ldr	r3, [pc, #72]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	4a11      	ldr	r2, [pc, #68]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 8005410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005414:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a0e      	ldr	r2, [pc, #56]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 800541c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005422:	f7fc f821 	bl	8001468 <HAL_GetTick>
 8005426:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005428:	e008      	b.n	800543c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800542a:	f7fc f81d 	bl	8001468 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e006      	b.n	800544a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800543c:	4b05      	ldr	r3, [pc, #20]	; (8005454 <RCCEx_PLL2_Config+0x15c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d0f0      	beq.n	800542a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	58024400 	.word	0x58024400
 8005458:	ffff0007 	.word	0xffff0007

0800545c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800546a:	4b53      	ldr	r3, [pc, #332]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b03      	cmp	r3, #3
 8005474:	d101      	bne.n	800547a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e099      	b.n	80055ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800547a:	4b4f      	ldr	r3, [pc, #316]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a4e      	ldr	r2, [pc, #312]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005486:	f7fb ffef 	bl	8001468 <HAL_GetTick>
 800548a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800548c:	e008      	b.n	80054a0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800548e:	f7fb ffeb 	bl	8001468 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e086      	b.n	80055ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054a0:	4b45      	ldr	r3, [pc, #276]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f0      	bne.n	800548e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054ac:	4b42      	ldr	r3, [pc, #264]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 80054ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	051b      	lsls	r3, r3, #20
 80054ba:	493f      	ldr	r1, [pc, #252]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	628b      	str	r3, [r1, #40]	; 0x28
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	025b      	lsls	r3, r3, #9
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	3b01      	subs	r3, #1
 80054dc:	041b      	lsls	r3, r3, #16
 80054de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	061b      	lsls	r3, r3, #24
 80054ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054f0:	4931      	ldr	r1, [pc, #196]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054f6:	4b30      	ldr	r3, [pc, #192]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	492d      	ldr	r1, [pc, #180]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005508:	4b2b      	ldr	r3, [pc, #172]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	4928      	ldr	r1, [pc, #160]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 800551c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551e:	4a26      	ldr	r2, [pc, #152]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005526:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552a:	4b24      	ldr	r3, [pc, #144]	; (80055bc <RCCEx_PLL3_Config+0x160>)
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	69d2      	ldr	r2, [r2, #28]
 8005532:	00d2      	lsls	r2, r2, #3
 8005534:	4920      	ldr	r1, [pc, #128]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005536:	4313      	orrs	r3, r2
 8005538:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800553a:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d106      	bne.n	800555a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005552:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005556:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005558:	e00f      	b.n	800557a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d106      	bne.n	800556e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005560:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	4a14      	ldr	r2, [pc, #80]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800556a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800556c:	e005      	b.n	800557a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800556e:	4b12      	ldr	r3, [pc, #72]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005572:	4a11      	ldr	r2, [pc, #68]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005578:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800557a:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a0e      	ldr	r2, [pc, #56]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005586:	f7fb ff6f 	bl	8001468 <HAL_GetTick>
 800558a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800558c:	e008      	b.n	80055a0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800558e:	f7fb ff6b 	bl	8001468 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	2b02      	cmp	r3, #2
 800559a:	d901      	bls.n	80055a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e006      	b.n	80055ae <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <RCCEx_PLL3_Config+0x15c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0f0      	beq.n	800558e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	58024400 	.word	0x58024400
 80055bc:	ffff0007 	.word	0xffff0007

080055c0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0f1      	b.n	80057b6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a78      	ldr	r2, [pc, #480]	; (80057c0 <HAL_SPI_Init+0x200>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00f      	beq.n	8005602 <HAL_SPI_Init+0x42>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a77      	ldr	r2, [pc, #476]	; (80057c4 <HAL_SPI_Init+0x204>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00a      	beq.n	8005602 <HAL_SPI_Init+0x42>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a75      	ldr	r2, [pc, #468]	; (80057c8 <HAL_SPI_Init+0x208>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d005      	beq.n	8005602 <HAL_SPI_Init+0x42>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b0f      	cmp	r3, #15
 80055fc:	d901      	bls.n	8005602 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e0d9      	b.n	80057b6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fdb0 	bl	8006168 <SPI_GetPacketSize>
 8005608:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a6c      	ldr	r2, [pc, #432]	; (80057c0 <HAL_SPI_Init+0x200>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00c      	beq.n	800562e <HAL_SPI_Init+0x6e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a6a      	ldr	r2, [pc, #424]	; (80057c4 <HAL_SPI_Init+0x204>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d007      	beq.n	800562e <HAL_SPI_Init+0x6e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a69      	ldr	r2, [pc, #420]	; (80057c8 <HAL_SPI_Init+0x208>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d002      	beq.n	800562e <HAL_SPI_Init+0x6e>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b08      	cmp	r3, #8
 800562c:	d811      	bhi.n	8005652 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005632:	4a63      	ldr	r2, [pc, #396]	; (80057c0 <HAL_SPI_Init+0x200>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d009      	beq.n	800564c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a61      	ldr	r2, [pc, #388]	; (80057c4 <HAL_SPI_Init+0x204>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d004      	beq.n	800564c <HAL_SPI_Init+0x8c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a60      	ldr	r2, [pc, #384]	; (80057c8 <HAL_SPI_Init+0x208>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d104      	bne.n	8005656 <HAL_SPI_Init+0x96>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b10      	cmp	r3, #16
 8005650:	d901      	bls.n	8005656 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e0af      	b.n	80057b6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7fb fc6e 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8005692:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800569c:	d119      	bne.n	80056d2 <HAL_SPI_Init+0x112>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a6:	d103      	bne.n	80056b0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d008      	beq.n	80056c2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10c      	bne.n	80056d2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80056bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056c0:	d107      	bne.n	80056d2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	431a      	orrs	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	ea42 0103 	orr.w	r1, r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	431a      	orrs	r2, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005732:	ea42 0103 	orr.w	r1, r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	430a      	orrs	r2, r1
 8005740:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d113      	bne.n	8005772 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800575c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005770:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00a      	beq.n	80057a4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3710      	adds	r7, #16
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	40013000 	.word	0x40013000
 80057c4:	40003800 	.word	0x40003800
 80057c8:	40003c00 	.word	0x40003c00

080057cc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08a      	sub	sp, #40	; 0x28
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	4613      	mov	r3, r2
 80057da:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	3320      	adds	r3, #32
 80057e2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_SPI_Transmit+0x2a>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e1d7      	b.n	8005ba6 <HAL_SPI_Transmit+0x3da>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057fe:	f7fb fe33 	bl	8001468 <HAL_GetTick>
 8005802:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b01      	cmp	r3, #1
 800580e:	d007      	beq.n	8005820 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005810:	2302      	movs	r3, #2
 8005812:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800581c:	7efb      	ldrb	r3, [r7, #27]
 800581e:	e1c2      	b.n	8005ba6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <HAL_SPI_Transmit+0x60>
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005838:	7efb      	ldrb	r3, [r7, #27]
 800583a:	e1b4      	b.n	8005ba6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2203      	movs	r2, #3
 8005840:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	88fa      	ldrh	r2, [r7, #6]
 800585e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800588c:	d107      	bne.n	800589e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800589c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	4b96      	ldr	r3, [pc, #600]	; (8005b00 <HAL_SPI_Transmit+0x334>)
 80058a6:	4013      	ands	r3, r2
 80058a8:	88f9      	ldrh	r1, [r7, #6]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	430b      	orrs	r3, r1
 80058b0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ca:	d107      	bne.n	80058dc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	2b0f      	cmp	r3, #15
 80058e2:	d947      	bls.n	8005974 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80058e4:	e03f      	b.n	8005966 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d114      	bne.n	800591e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005910:	b29b      	uxth	r3, r3
 8005912:	3b01      	subs	r3, #1
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800591c:	e023      	b.n	8005966 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591e:	f7fb fda3 	bl	8001468 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d803      	bhi.n	8005936 <HAL_SPI_Transmit+0x16a>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005934:	d102      	bne.n	800593c <HAL_SPI_Transmit+0x170>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d114      	bne.n	8005966 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fb45 	bl	8005fcc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005950:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e11f      	b.n	8005ba6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1b9      	bne.n	80058e6 <HAL_SPI_Transmit+0x11a>
 8005972:	e0f2      	b.n	8005b5a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b07      	cmp	r3, #7
 800597a:	f240 80e7 	bls.w	8005b4c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800597e:	e05d      	b.n	8005a3c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b02      	cmp	r3, #2
 800598c:	d132      	bne.n	80059f4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d918      	bls.n	80059cc <HAL_SPI_Transmit+0x200>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d014      	beq.n	80059cc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	1d1a      	adds	r2, r3, #4
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b02      	subs	r3, #2
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80059ca:	e037      	b.n	8005a3c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d0:	881a      	ldrh	r2, [r3, #0]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80059f2:	e023      	b.n	8005a3c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059f4:	f7fb fd38 	bl	8001468 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d803      	bhi.n	8005a0c <HAL_SPI_Transmit+0x240>
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0a:	d102      	bne.n	8005a12 <HAL_SPI_Transmit+0x246>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d114      	bne.n	8005a3c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fada 	bl	8005fcc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e0b4      	b.n	8005ba6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d19b      	bne.n	8005980 <HAL_SPI_Transmit+0x1b4>
 8005a48:	e087      	b.n	8005b5a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d155      	bne.n	8005b04 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d918      	bls.n	8005a96 <HAL_SPI_Transmit+0x2ca>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d914      	bls.n	8005a96 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6812      	ldr	r2, [r2, #0]
 8005a76:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a7c:	1d1a      	adds	r2, r3, #4
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b04      	subs	r3, #4
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005a94:	e05a      	b.n	8005b4c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d917      	bls.n	8005ad2 <HAL_SPI_Transmit+0x306>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d013      	beq.n	8005ad2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	881a      	ldrh	r2, [r3, #0]
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab8:	1c9a      	adds	r2, r3, #2
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b02      	subs	r3, #2
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005ad0:	e03c      	b.n	8005b4c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3320      	adds	r3, #32
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005afc:	e026      	b.n	8005b4c <HAL_SPI_Transmit+0x380>
 8005afe:	bf00      	nop
 8005b00:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b04:	f7fb fcb0 	bl	8001468 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d803      	bhi.n	8005b1c <HAL_SPI_Transmit+0x350>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1a:	d102      	bne.n	8005b22 <HAL_SPI_Transmit+0x356>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d114      	bne.n	8005b4c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fa52 	bl	8005fcc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e02c      	b.n	8005ba6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f47f af78 	bne.w	8005a4a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2200      	movs	r2, #0
 8005b62:	2108      	movs	r1, #8
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fad1 	bl	800610c <SPI_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d007      	beq.n	8005b80 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b76:	f043 0220 	orr.w	r2, r3, #32
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 fa23 	bl	8005fcc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8005ba4:	7efb      	ldrb	r3, [r7, #27]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop

08005bb0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b08a      	sub	sp, #40	; 0x28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8005bc8:	6a3a      	ldr	r2, [r7, #32]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005be2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3330      	adds	r3, #48	; 0x30
 8005bea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d113      	bne.n	8005c1e <HAL_SPI_IRQHandler+0x6e>
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10e      	bne.n	8005c1e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	4798      	blx	r3
    hspi->RxISR(hspi);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	4798      	blx	r3
    handled = 1UL;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10f      	bne.n	8005c48 <HAL_SPI_IRQHandler+0x98>
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d105      	bne.n	8005c48 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	4798      	blx	r3
    handled = 1UL;
 8005c44:	2301      	movs	r3, #1
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	f003 0320 	and.w	r3, r3, #32
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10f      	bne.n	8005c72 <HAL_SPI_IRQHandler+0xc2>
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d105      	bne.n	8005c72 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	4798      	blx	r3
    handled = 1UL;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f040 815a 	bne.w	8005f2e <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 808b 	beq.w	8005d9c <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	699a      	ldr	r2, [r3, #24]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0208 	orr.w	r2, r2, #8
 8005c94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0210 	orr.w	r2, r2, #16
 8005ca4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699a      	ldr	r2, [r3, #24]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	691a      	ldr	r2, [r3, #16]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0208 	bic.w	r2, r2, #8
 8005cc4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d13d      	bne.n	8005d50 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8005cd4:	e036      	b.n	8005d44 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	2b0f      	cmp	r3, #15
 8005cdc:	d90b      	bls.n	8005cf6 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ce6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ce8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cee:	1d1a      	adds	r2, r3, #4
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	665a      	str	r2, [r3, #100]	; 0x64
 8005cf4:	e01d      	b.n	8005d32 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	2b07      	cmp	r3, #7
 8005cfc:	d90b      	bls.n	8005d16 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	8812      	ldrh	r2, [r2, #0]
 8005d06:	b292      	uxth	r2, r2
 8005d08:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	665a      	str	r2, [r3, #100]	; 0x64
 8005d14:	e00d      	b.n	8005d32 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d22:	7812      	ldrb	r2, [r2, #0]
 8005d24:	b2d2      	uxtb	r2, r2
 8005d26:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1c2      	bne.n	8005cd6 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f93b 	bl	8005fcc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f90b 	bl	8005f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d6e:	e0e3      	b.n	8005f38 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8005d70:	7cfb      	ldrb	r3, [r7, #19]
 8005d72:	2b05      	cmp	r3, #5
 8005d74:	d103      	bne.n	8005d7e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f8fa 	bl	8005f70 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8005d7c:	e0d9      	b.n	8005f32 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8005d7e:	7cfb      	ldrb	r3, [r7, #19]
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d103      	bne.n	8005d8c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f8e9 	bl	8005f5c <HAL_SPI_RxCpltCallback>
    return;
 8005d8a:	e0d2      	b.n	8005f32 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8005d8c:	7cfb      	ldrb	r3, [r7, #19]
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	f040 80cf 	bne.w	8005f32 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 f8d7 	bl	8005f48 <HAL_SPI_TxCpltCallback>
    return;
 8005d9a:	e0ca      	b.n	8005f32 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00d      	beq.n	8005dc2 <HAL_SPI_IRQHandler+0x212>
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d008      	beq.n	8005dc2 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dbe:	619a      	str	r2, [r3, #24]

    return;
 8005dc0:	e0ba      	b.n	8005f38 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80b5 	beq.w	8005f38 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00f      	beq.n	8005df8 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dde:	f043 0204 	orr.w	r2, r3, #4
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00f      	beq.n	8005e22 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e08:	f043 0201 	orr.w	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e20:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00f      	beq.n	8005e4c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e32:	f043 0208 	orr.w	r2, r3, #8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e4a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f003 0320 	and.w	r3, r3, #32
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00f      	beq.n	8005e76 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	699a      	ldr	r2, [r3, #24]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0220 	orr.w	r2, r2, #32
 8005e74:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d05a      	beq.n	8005f36 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6919      	ldr	r1, [r3, #16]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	4b29      	ldr	r3, [pc, #164]	; (8005f40 <HAL_SPI_IRQHandler+0x390>)
 8005e9c:	400b      	ands	r3, r1
 8005e9e:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ea6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005eaa:	d138      	bne.n	8005f1e <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005eba:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d013      	beq.n	8005eec <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec8:	4a1e      	ldr	r2, [pc, #120]	; (8005f44 <HAL_SPI_IRQHandler+0x394>)
 8005eca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7fb fe27 	bl	8001b24 <HAL_DMA_Abort_IT>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d020      	beq.n	8005f36 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef8:	4a12      	ldr	r2, [pc, #72]	; (8005f44 <HAL_SPI_IRQHandler+0x394>)
 8005efa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fb fe0f 	bl	8001b24 <HAL_DMA_Abort_IT>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d014      	beq.n	8005f36 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f1c:	e00b      	b.n	8005f36 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f82c 	bl	8005f84 <HAL_SPI_ErrorCallback>
    return;
 8005f2c:	e003      	b.n	8005f36 <HAL_SPI_IRQHandler+0x386>
    return;
 8005f2e:	bf00      	nop
 8005f30:	e002      	b.n	8005f38 <HAL_SPI_IRQHandler+0x388>
    return;
 8005f32:	bf00      	nop
 8005f34:	e000      	b.n	8005f38 <HAL_SPI_IRQHandler+0x388>
    return;
 8005f36:	bf00      	nop
  }
}
 8005f38:	3728      	adds	r7, #40	; 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	fffffc94 	.word	0xfffffc94
 8005f44:	08005f99 	.word	0x08005f99

08005f48 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff ffe0 	bl	8005f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0208 	orr.w	r2, r2, #8
 8005fea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0210 	orr.w	r2, r2, #16
 8005ffa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 0201 	bic.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6919      	ldr	r1, [r3, #16]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4b3c      	ldr	r3, [pc, #240]	; (8006108 <SPI_CloseTransfer+0x13c>)
 8006018:	400b      	ands	r3, r1
 800601a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800602a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006032:	b2db      	uxtb	r3, r3
 8006034:	2b04      	cmp	r3, #4
 8006036:	d014      	beq.n	8006062 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00f      	beq.n	8006062 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f042 0220 	orr.w	r2, r2, #32
 8006060:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b03      	cmp	r3, #3
 800606c:	d014      	beq.n	8006098 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00f      	beq.n	8006098 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607e:	f043 0204 	orr.w	r2, r3, #4
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006096:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00f      	beq.n	80060c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a8:	f043 0201 	orr.w	r2, r3, #1
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00f      	beq.n	80060ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d2:	f043 0208 	orr.w	r2, r3, #8
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80060fc:	bf00      	nop
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	fffffc90 	.word	0xfffffc90

0800610c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800611c:	e010      	b.n	8006140 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800611e:	f7fb f9a3 	bl	8001468 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	429a      	cmp	r2, r3
 800612c:	d803      	bhi.n	8006136 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d102      	bne.n	800613c <SPI_WaitOnFlagUntilTimeout+0x30>
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e00f      	b.n	8006160 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695a      	ldr	r2, [r3, #20]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4013      	ands	r3, r2
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	429a      	cmp	r2, r3
 800614e:	bf0c      	ite	eq
 8006150:	2301      	moveq	r3, #1
 8006152:	2300      	movne	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	79fb      	ldrb	r3, [r7, #7]
 800615a:	429a      	cmp	r2, r3
 800615c:	d0df      	beq.n	800611e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3710      	adds	r7, #16
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	3301      	adds	r3, #1
 8006180:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	3307      	adds	r3, #7
 8006186:	08db      	lsrs	r3, r3, #3
 8006188:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	fb02 f303 	mul.w	r3, r2, r3
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b082      	sub	sp, #8
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e042      	b.n	8006236 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fa ff7c 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f8c3 	bl	800636c <UART_SetConfig>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d101      	bne.n	80061f0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e022      	b.n	8006236 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fe1f 	bl	8006e3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800620c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800621c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 fea6 	bl	8006f80 <UART_CheckIdleState>
 8006234:	4603      	mov	r3, r0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b08a      	sub	sp, #40	; 0x28
 8006242:	af02      	add	r7, sp, #8
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	4613      	mov	r3, r2
 800624c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006254:	2b20      	cmp	r3, #32
 8006256:	f040 8083 	bne.w	8006360 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <HAL_UART_Transmit+0x28>
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e07b      	b.n	8006362 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_UART_Transmit+0x3a>
 8006274:	2302      	movs	r3, #2
 8006276:	e074      	b.n	8006362 <HAL_UART_Transmit+0x124>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2221      	movs	r2, #33	; 0x21
 800628c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006290:	f7fb f8ea 	bl	8001468 <HAL_GetTick>
 8006294:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	88fa      	ldrh	r2, [r7, #6]
 800629a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	88fa      	ldrh	r2, [r7, #6]
 80062a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ae:	d108      	bne.n	80062c2 <HAL_UART_Transmit+0x84>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d104      	bne.n	80062c2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	61bb      	str	r3, [r7, #24]
 80062c0:	e003      	b.n	80062ca <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80062d2:	e02c      	b.n	800632e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2200      	movs	r2, #0
 80062dc:	2180      	movs	r1, #128	; 0x80
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fe99 	bl	8007016 <UART_WaitOnFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e039      	b.n	8006362 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10b      	bne.n	800630c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006302:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	3302      	adds	r3, #2
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	e007      	b.n	800631c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	781a      	ldrb	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	3301      	adds	r3, #1
 800631a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006322:	b29b      	uxth	r3, r3
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006334:	b29b      	uxth	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1cc      	bne.n	80062d4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	2140      	movs	r1, #64	; 0x40
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fe66 	bl	8007016 <UART_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d001      	beq.n	8006354 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e006      	b.n	8006362 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2220      	movs	r2, #32
 8006358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	e000      	b.n	8006362 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006360:	2302      	movs	r3, #2
  }
}
 8006362:	4618      	mov	r0, r3
 8006364:	3720      	adds	r7, #32
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800636c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006370:	b092      	sub	sp, #72	; 0x48
 8006372:	af00      	add	r7, sp, #0
 8006374:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	431a      	orrs	r2, r3
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	431a      	orrs	r2, r3
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	4313      	orrs	r3, r2
 8006392:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	4bbe      	ldr	r3, [pc, #760]	; (8006694 <UART_SetConfig+0x328>)
 800639c:	4013      	ands	r3, r2
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	6812      	ldr	r2, [r2, #0]
 80063a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063a4:	430b      	orrs	r3, r1
 80063a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4ab3      	ldr	r2, [pc, #716]	; (8006698 <UART_SetConfig+0x32c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063d4:	4313      	orrs	r3, r2
 80063d6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	4baf      	ldr	r3, [pc, #700]	; (800669c <UART_SetConfig+0x330>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f2:	f023 010f 	bic.w	r1, r3, #15
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	430a      	orrs	r2, r1
 8006400:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4aa6      	ldr	r2, [pc, #664]	; (80066a0 <UART_SetConfig+0x334>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d177      	bne.n	80064fc <UART_SetConfig+0x190>
 800640c:	4ba5      	ldr	r3, [pc, #660]	; (80066a4 <UART_SetConfig+0x338>)
 800640e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006414:	2b28      	cmp	r3, #40	; 0x28
 8006416:	d86d      	bhi.n	80064f4 <UART_SetConfig+0x188>
 8006418:	a201      	add	r2, pc, #4	; (adr r2, 8006420 <UART_SetConfig+0xb4>)
 800641a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641e:	bf00      	nop
 8006420:	080064c5 	.word	0x080064c5
 8006424:	080064f5 	.word	0x080064f5
 8006428:	080064f5 	.word	0x080064f5
 800642c:	080064f5 	.word	0x080064f5
 8006430:	080064f5 	.word	0x080064f5
 8006434:	080064f5 	.word	0x080064f5
 8006438:	080064f5 	.word	0x080064f5
 800643c:	080064f5 	.word	0x080064f5
 8006440:	080064cd 	.word	0x080064cd
 8006444:	080064f5 	.word	0x080064f5
 8006448:	080064f5 	.word	0x080064f5
 800644c:	080064f5 	.word	0x080064f5
 8006450:	080064f5 	.word	0x080064f5
 8006454:	080064f5 	.word	0x080064f5
 8006458:	080064f5 	.word	0x080064f5
 800645c:	080064f5 	.word	0x080064f5
 8006460:	080064d5 	.word	0x080064d5
 8006464:	080064f5 	.word	0x080064f5
 8006468:	080064f5 	.word	0x080064f5
 800646c:	080064f5 	.word	0x080064f5
 8006470:	080064f5 	.word	0x080064f5
 8006474:	080064f5 	.word	0x080064f5
 8006478:	080064f5 	.word	0x080064f5
 800647c:	080064f5 	.word	0x080064f5
 8006480:	080064dd 	.word	0x080064dd
 8006484:	080064f5 	.word	0x080064f5
 8006488:	080064f5 	.word	0x080064f5
 800648c:	080064f5 	.word	0x080064f5
 8006490:	080064f5 	.word	0x080064f5
 8006494:	080064f5 	.word	0x080064f5
 8006498:	080064f5 	.word	0x080064f5
 800649c:	080064f5 	.word	0x080064f5
 80064a0:	080064e5 	.word	0x080064e5
 80064a4:	080064f5 	.word	0x080064f5
 80064a8:	080064f5 	.word	0x080064f5
 80064ac:	080064f5 	.word	0x080064f5
 80064b0:	080064f5 	.word	0x080064f5
 80064b4:	080064f5 	.word	0x080064f5
 80064b8:	080064f5 	.word	0x080064f5
 80064bc:	080064f5 	.word	0x080064f5
 80064c0:	080064ed 	.word	0x080064ed
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ca:	e222      	b.n	8006912 <UART_SetConfig+0x5a6>
 80064cc:	2304      	movs	r3, #4
 80064ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064d2:	e21e      	b.n	8006912 <UART_SetConfig+0x5a6>
 80064d4:	2308      	movs	r3, #8
 80064d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064da:	e21a      	b.n	8006912 <UART_SetConfig+0x5a6>
 80064dc:	2310      	movs	r3, #16
 80064de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064e2:	e216      	b.n	8006912 <UART_SetConfig+0x5a6>
 80064e4:	2320      	movs	r3, #32
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ea:	e212      	b.n	8006912 <UART_SetConfig+0x5a6>
 80064ec:	2340      	movs	r3, #64	; 0x40
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064f2:	e20e      	b.n	8006912 <UART_SetConfig+0x5a6>
 80064f4:	2380      	movs	r3, #128	; 0x80
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e20a      	b.n	8006912 <UART_SetConfig+0x5a6>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a69      	ldr	r2, [pc, #420]	; (80066a8 <UART_SetConfig+0x33c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d130      	bne.n	8006568 <UART_SetConfig+0x1fc>
 8006506:	4b67      	ldr	r3, [pc, #412]	; (80066a4 <UART_SetConfig+0x338>)
 8006508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	2b05      	cmp	r3, #5
 8006510:	d826      	bhi.n	8006560 <UART_SetConfig+0x1f4>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0x1ac>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006531 	.word	0x08006531
 800651c:	08006539 	.word	0x08006539
 8006520:	08006541 	.word	0x08006541
 8006524:	08006549 	.word	0x08006549
 8006528:	08006551 	.word	0x08006551
 800652c:	08006559 	.word	0x08006559
 8006530:	2300      	movs	r3, #0
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006536:	e1ec      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006538:	2304      	movs	r3, #4
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653e:	e1e8      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006540:	2308      	movs	r3, #8
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006546:	e1e4      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654e:	e1e0      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006550:	2320      	movs	r3, #32
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006556:	e1dc      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006558:	2340      	movs	r3, #64	; 0x40
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655e:	e1d8      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006560:	2380      	movs	r3, #128	; 0x80
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e1d4      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a4f      	ldr	r2, [pc, #316]	; (80066ac <UART_SetConfig+0x340>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d130      	bne.n	80065d4 <UART_SetConfig+0x268>
 8006572:	4b4c      	ldr	r3, [pc, #304]	; (80066a4 <UART_SetConfig+0x338>)
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	2b05      	cmp	r3, #5
 800657c:	d826      	bhi.n	80065cc <UART_SetConfig+0x260>
 800657e:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <UART_SetConfig+0x218>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	0800659d 	.word	0x0800659d
 8006588:	080065a5 	.word	0x080065a5
 800658c:	080065ad 	.word	0x080065ad
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065c5 	.word	0x080065c5
 800659c:	2300      	movs	r3, #0
 800659e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065a2:	e1b6      	b.n	8006912 <UART_SetConfig+0x5a6>
 80065a4:	2304      	movs	r3, #4
 80065a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065aa:	e1b2      	b.n	8006912 <UART_SetConfig+0x5a6>
 80065ac:	2308      	movs	r3, #8
 80065ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065b2:	e1ae      	b.n	8006912 <UART_SetConfig+0x5a6>
 80065b4:	2310      	movs	r3, #16
 80065b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ba:	e1aa      	b.n	8006912 <UART_SetConfig+0x5a6>
 80065bc:	2320      	movs	r3, #32
 80065be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065c2:	e1a6      	b.n	8006912 <UART_SetConfig+0x5a6>
 80065c4:	2340      	movs	r3, #64	; 0x40
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ca:	e1a2      	b.n	8006912 <UART_SetConfig+0x5a6>
 80065cc:	2380      	movs	r3, #128	; 0x80
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d2:	e19e      	b.n	8006912 <UART_SetConfig+0x5a6>
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a35      	ldr	r2, [pc, #212]	; (80066b0 <UART_SetConfig+0x344>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d130      	bne.n	8006640 <UART_SetConfig+0x2d4>
 80065de:	4b31      	ldr	r3, [pc, #196]	; (80066a4 <UART_SetConfig+0x338>)
 80065e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d826      	bhi.n	8006638 <UART_SetConfig+0x2cc>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <UART_SetConfig+0x284>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	08006609 	.word	0x08006609
 80065f4:	08006611 	.word	0x08006611
 80065f8:	08006619 	.word	0x08006619
 80065fc:	08006621 	.word	0x08006621
 8006600:	08006629 	.word	0x08006629
 8006604:	08006631 	.word	0x08006631
 8006608:	2300      	movs	r3, #0
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800660e:	e180      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006610:	2304      	movs	r3, #4
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006616:	e17c      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006618:	2308      	movs	r3, #8
 800661a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800661e:	e178      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006620:	2310      	movs	r3, #16
 8006622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006626:	e174      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006628:	2320      	movs	r3, #32
 800662a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800662e:	e170      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006630:	2340      	movs	r3, #64	; 0x40
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006636:	e16c      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006638:	2380      	movs	r3, #128	; 0x80
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663e:	e168      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <UART_SetConfig+0x348>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d142      	bne.n	80066d0 <UART_SetConfig+0x364>
 800664a:	4b16      	ldr	r3, [pc, #88]	; (80066a4 <UART_SetConfig+0x338>)
 800664c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800664e:	f003 0307 	and.w	r3, r3, #7
 8006652:	2b05      	cmp	r3, #5
 8006654:	d838      	bhi.n	80066c8 <UART_SetConfig+0x35c>
 8006656:	a201      	add	r2, pc, #4	; (adr r2, 800665c <UART_SetConfig+0x2f0>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006675 	.word	0x08006675
 8006660:	0800667d 	.word	0x0800667d
 8006664:	08006685 	.word	0x08006685
 8006668:	0800668d 	.word	0x0800668d
 800666c:	080066b9 	.word	0x080066b9
 8006670:	080066c1 	.word	0x080066c1
 8006674:	2300      	movs	r3, #0
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667a:	e14a      	b.n	8006912 <UART_SetConfig+0x5a6>
 800667c:	2304      	movs	r3, #4
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006682:	e146      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006684:	2308      	movs	r3, #8
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668a:	e142      	b.n	8006912 <UART_SetConfig+0x5a6>
 800668c:	2310      	movs	r3, #16
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006692:	e13e      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006694:	cfff69f3 	.word	0xcfff69f3
 8006698:	58000c00 	.word	0x58000c00
 800669c:	11fff4ff 	.word	0x11fff4ff
 80066a0:	40011000 	.word	0x40011000
 80066a4:	58024400 	.word	0x58024400
 80066a8:	40004400 	.word	0x40004400
 80066ac:	40004800 	.word	0x40004800
 80066b0:	40004c00 	.word	0x40004c00
 80066b4:	40005000 	.word	0x40005000
 80066b8:	2320      	movs	r3, #32
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066be:	e128      	b.n	8006912 <UART_SetConfig+0x5a6>
 80066c0:	2340      	movs	r3, #64	; 0x40
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e124      	b.n	8006912 <UART_SetConfig+0x5a6>
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e120      	b.n	8006912 <UART_SetConfig+0x5a6>
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4acb      	ldr	r2, [pc, #812]	; (8006a04 <UART_SetConfig+0x698>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d176      	bne.n	80067c8 <UART_SetConfig+0x45c>
 80066da:	4bcb      	ldr	r3, [pc, #812]	; (8006a08 <UART_SetConfig+0x69c>)
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066e2:	2b28      	cmp	r3, #40	; 0x28
 80066e4:	d86c      	bhi.n	80067c0 <UART_SetConfig+0x454>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <UART_SetConfig+0x380>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	08006791 	.word	0x08006791
 80066f0:	080067c1 	.word	0x080067c1
 80066f4:	080067c1 	.word	0x080067c1
 80066f8:	080067c1 	.word	0x080067c1
 80066fc:	080067c1 	.word	0x080067c1
 8006700:	080067c1 	.word	0x080067c1
 8006704:	080067c1 	.word	0x080067c1
 8006708:	080067c1 	.word	0x080067c1
 800670c:	08006799 	.word	0x08006799
 8006710:	080067c1 	.word	0x080067c1
 8006714:	080067c1 	.word	0x080067c1
 8006718:	080067c1 	.word	0x080067c1
 800671c:	080067c1 	.word	0x080067c1
 8006720:	080067c1 	.word	0x080067c1
 8006724:	080067c1 	.word	0x080067c1
 8006728:	080067c1 	.word	0x080067c1
 800672c:	080067a1 	.word	0x080067a1
 8006730:	080067c1 	.word	0x080067c1
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067c1 	.word	0x080067c1
 800673c:	080067c1 	.word	0x080067c1
 8006740:	080067c1 	.word	0x080067c1
 8006744:	080067c1 	.word	0x080067c1
 8006748:	080067c1 	.word	0x080067c1
 800674c:	080067a9 	.word	0x080067a9
 8006750:	080067c1 	.word	0x080067c1
 8006754:	080067c1 	.word	0x080067c1
 8006758:	080067c1 	.word	0x080067c1
 800675c:	080067c1 	.word	0x080067c1
 8006760:	080067c1 	.word	0x080067c1
 8006764:	080067c1 	.word	0x080067c1
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067b1 	.word	0x080067b1
 8006770:	080067c1 	.word	0x080067c1
 8006774:	080067c1 	.word	0x080067c1
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067c1 	.word	0x080067c1
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
 8006788:	080067c1 	.word	0x080067c1
 800678c:	080067b9 	.word	0x080067b9
 8006790:	2301      	movs	r3, #1
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006796:	e0bc      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679e:	e0b8      	b.n	8006912 <UART_SetConfig+0x5a6>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a6:	e0b4      	b.n	8006912 <UART_SetConfig+0x5a6>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ae:	e0b0      	b.n	8006912 <UART_SetConfig+0x5a6>
 80067b0:	2320      	movs	r3, #32
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b6:	e0ac      	b.n	8006912 <UART_SetConfig+0x5a6>
 80067b8:	2340      	movs	r3, #64	; 0x40
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067be:	e0a8      	b.n	8006912 <UART_SetConfig+0x5a6>
 80067c0:	2380      	movs	r3, #128	; 0x80
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c6:	e0a4      	b.n	8006912 <UART_SetConfig+0x5a6>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a8f      	ldr	r2, [pc, #572]	; (8006a0c <UART_SetConfig+0x6a0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d130      	bne.n	8006834 <UART_SetConfig+0x4c8>
 80067d2:	4b8d      	ldr	r3, [pc, #564]	; (8006a08 <UART_SetConfig+0x69c>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	2b05      	cmp	r3, #5
 80067dc:	d826      	bhi.n	800682c <UART_SetConfig+0x4c0>
 80067de:	a201      	add	r2, pc, #4	; (adr r2, 80067e4 <UART_SetConfig+0x478>)
 80067e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e4:	080067fd 	.word	0x080067fd
 80067e8:	08006805 	.word	0x08006805
 80067ec:	0800680d 	.word	0x0800680d
 80067f0:	08006815 	.word	0x08006815
 80067f4:	0800681d 	.word	0x0800681d
 80067f8:	08006825 	.word	0x08006825
 80067fc:	2300      	movs	r3, #0
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006802:	e086      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006804:	2304      	movs	r3, #4
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680a:	e082      	b.n	8006912 <UART_SetConfig+0x5a6>
 800680c:	2308      	movs	r3, #8
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006812:	e07e      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006814:	2310      	movs	r3, #16
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800681a:	e07a      	b.n	8006912 <UART_SetConfig+0x5a6>
 800681c:	2320      	movs	r3, #32
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006822:	e076      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006824:	2340      	movs	r3, #64	; 0x40
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800682a:	e072      	b.n	8006912 <UART_SetConfig+0x5a6>
 800682c:	2380      	movs	r3, #128	; 0x80
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006832:	e06e      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a75      	ldr	r2, [pc, #468]	; (8006a10 <UART_SetConfig+0x6a4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d130      	bne.n	80068a0 <UART_SetConfig+0x534>
 800683e:	4b72      	ldr	r3, [pc, #456]	; (8006a08 <UART_SetConfig+0x69c>)
 8006840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	2b05      	cmp	r3, #5
 8006848:	d826      	bhi.n	8006898 <UART_SetConfig+0x52c>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <UART_SetConfig+0x4e4>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006869 	.word	0x08006869
 8006854:	08006871 	.word	0x08006871
 8006858:	08006879 	.word	0x08006879
 800685c:	08006881 	.word	0x08006881
 8006860:	08006889 	.word	0x08006889
 8006864:	08006891 	.word	0x08006891
 8006868:	2300      	movs	r3, #0
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800686e:	e050      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006870:	2304      	movs	r3, #4
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006876:	e04c      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006878:	2308      	movs	r3, #8
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800687e:	e048      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006880:	2310      	movs	r3, #16
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006886:	e044      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006888:	2320      	movs	r3, #32
 800688a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800688e:	e040      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006890:	2340      	movs	r3, #64	; 0x40
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006896:	e03c      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006898:	2380      	movs	r3, #128	; 0x80
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800689e:	e038      	b.n	8006912 <UART_SetConfig+0x5a6>
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a5b      	ldr	r2, [pc, #364]	; (8006a14 <UART_SetConfig+0x6a8>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d130      	bne.n	800690c <UART_SetConfig+0x5a0>
 80068aa:	4b57      	ldr	r3, [pc, #348]	; (8006a08 <UART_SetConfig+0x69c>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ae:	f003 0307 	and.w	r3, r3, #7
 80068b2:	2b05      	cmp	r3, #5
 80068b4:	d826      	bhi.n	8006904 <UART_SetConfig+0x598>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <UART_SetConfig+0x550>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068d5 	.word	0x080068d5
 80068c0:	080068dd 	.word	0x080068dd
 80068c4:	080068e5 	.word	0x080068e5
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068f5 	.word	0x080068f5
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	2302      	movs	r3, #2
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068da:	e01a      	b.n	8006912 <UART_SetConfig+0x5a6>
 80068dc:	2304      	movs	r3, #4
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068e2:	e016      	b.n	8006912 <UART_SetConfig+0x5a6>
 80068e4:	2308      	movs	r3, #8
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068ea:	e012      	b.n	8006912 <UART_SetConfig+0x5a6>
 80068ec:	2310      	movs	r3, #16
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068f2:	e00e      	b.n	8006912 <UART_SetConfig+0x5a6>
 80068f4:	2320      	movs	r3, #32
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80068fa:	e00a      	b.n	8006912 <UART_SetConfig+0x5a6>
 80068fc:	2340      	movs	r3, #64	; 0x40
 80068fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006902:	e006      	b.n	8006912 <UART_SetConfig+0x5a6>
 8006904:	2380      	movs	r3, #128	; 0x80
 8006906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800690a:	e002      	b.n	8006912 <UART_SetConfig+0x5a6>
 800690c:	2380      	movs	r3, #128	; 0x80
 800690e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a3f      	ldr	r2, [pc, #252]	; (8006a14 <UART_SetConfig+0x6a8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	f040 80f8 	bne.w	8006b0e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800691e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006922:	2b20      	cmp	r3, #32
 8006924:	dc46      	bgt.n	80069b4 <UART_SetConfig+0x648>
 8006926:	2b02      	cmp	r3, #2
 8006928:	f2c0 8082 	blt.w	8006a30 <UART_SetConfig+0x6c4>
 800692c:	3b02      	subs	r3, #2
 800692e:	2b1e      	cmp	r3, #30
 8006930:	d87e      	bhi.n	8006a30 <UART_SetConfig+0x6c4>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <UART_SetConfig+0x5cc>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	080069bb 	.word	0x080069bb
 800693c:	08006a31 	.word	0x08006a31
 8006940:	080069c3 	.word	0x080069c3
 8006944:	08006a31 	.word	0x08006a31
 8006948:	08006a31 	.word	0x08006a31
 800694c:	08006a31 	.word	0x08006a31
 8006950:	080069d3 	.word	0x080069d3
 8006954:	08006a31 	.word	0x08006a31
 8006958:	08006a31 	.word	0x08006a31
 800695c:	08006a31 	.word	0x08006a31
 8006960:	08006a31 	.word	0x08006a31
 8006964:	08006a31 	.word	0x08006a31
 8006968:	08006a31 	.word	0x08006a31
 800696c:	08006a31 	.word	0x08006a31
 8006970:	080069e3 	.word	0x080069e3
 8006974:	08006a31 	.word	0x08006a31
 8006978:	08006a31 	.word	0x08006a31
 800697c:	08006a31 	.word	0x08006a31
 8006980:	08006a31 	.word	0x08006a31
 8006984:	08006a31 	.word	0x08006a31
 8006988:	08006a31 	.word	0x08006a31
 800698c:	08006a31 	.word	0x08006a31
 8006990:	08006a31 	.word	0x08006a31
 8006994:	08006a31 	.word	0x08006a31
 8006998:	08006a31 	.word	0x08006a31
 800699c:	08006a31 	.word	0x08006a31
 80069a0:	08006a31 	.word	0x08006a31
 80069a4:	08006a31 	.word	0x08006a31
 80069a8:	08006a31 	.word	0x08006a31
 80069ac:	08006a31 	.word	0x08006a31
 80069b0:	08006a23 	.word	0x08006a23
 80069b4:	2b40      	cmp	r3, #64	; 0x40
 80069b6:	d037      	beq.n	8006a28 <UART_SetConfig+0x6bc>
 80069b8:	e03a      	b.n	8006a30 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80069ba:	f7fe f9df 	bl	8004d7c <HAL_RCCEx_GetD3PCLK1Freq>
 80069be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80069c0:	e03c      	b.n	8006a3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe f9ee 	bl	8004da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069d0:	e034      	b.n	8006a3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d2:	f107 0318 	add.w	r3, r7, #24
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe fb3a 	bl	8005050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e0:	e02c      	b.n	8006a3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <UART_SetConfig+0x69c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d016      	beq.n	8006a1c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069ee:	4b06      	ldr	r3, [pc, #24]	; (8006a08 <UART_SetConfig+0x69c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	08db      	lsrs	r3, r3, #3
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	4a07      	ldr	r2, [pc, #28]	; (8006a18 <UART_SetConfig+0x6ac>)
 80069fa:	fa22 f303 	lsr.w	r3, r2, r3
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a00:	e01c      	b.n	8006a3c <UART_SetConfig+0x6d0>
 8006a02:	bf00      	nop
 8006a04:	40011400 	.word	0x40011400
 8006a08:	58024400 	.word	0x58024400
 8006a0c:	40007800 	.word	0x40007800
 8006a10:	40007c00 	.word	0x40007c00
 8006a14:	58000c00 	.word	0x58000c00
 8006a18:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006a1c:	4b9d      	ldr	r3, [pc, #628]	; (8006c94 <UART_SetConfig+0x928>)
 8006a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a20:	e00c      	b.n	8006a3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a22:	4b9d      	ldr	r3, [pc, #628]	; (8006c98 <UART_SetConfig+0x92c>)
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a26:	e009      	b.n	8006a3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a2e:	e005      	b.n	8006a3c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006a3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 81de 	beq.w	8006e00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	4a94      	ldr	r2, [pc, #592]	; (8006c9c <UART_SetConfig+0x930>)
 8006a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a56:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	4413      	add	r3, r2
 8006a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d305      	bcc.n	8006a74 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d903      	bls.n	8006a7c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a7a:	e1c1      	b.n	8006e00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7e:	2200      	movs	r2, #0
 8006a80:	60bb      	str	r3, [r7, #8]
 8006a82:	60fa      	str	r2, [r7, #12]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	4a84      	ldr	r2, [pc, #528]	; (8006c9c <UART_SetConfig+0x930>)
 8006a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	2200      	movs	r2, #0
 8006a92:	603b      	str	r3, [r7, #0]
 8006a94:	607a      	str	r2, [r7, #4]
 8006a96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a9e:	f7f9 fc1b 	bl	80002d8 <__aeabi_uldivmod>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f04f 0200 	mov.w	r2, #0
 8006aae:	f04f 0300 	mov.w	r3, #0
 8006ab2:	020b      	lsls	r3, r1, #8
 8006ab4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ab8:	0202      	lsls	r2, r0, #8
 8006aba:	6979      	ldr	r1, [r7, #20]
 8006abc:	6849      	ldr	r1, [r1, #4]
 8006abe:	0849      	lsrs	r1, r1, #1
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	4605      	mov	r5, r0
 8006ac6:	eb12 0804 	adds.w	r8, r2, r4
 8006aca:	eb43 0905 	adc.w	r9, r3, r5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	469a      	mov	sl, r3
 8006ad6:	4693      	mov	fp, r2
 8006ad8:	4652      	mov	r2, sl
 8006ada:	465b      	mov	r3, fp
 8006adc:	4640      	mov	r0, r8
 8006ade:	4649      	mov	r1, r9
 8006ae0:	f7f9 fbfa 	bl	80002d8 <__aeabi_uldivmod>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4613      	mov	r3, r2
 8006aea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006af2:	d308      	bcc.n	8006b06 <UART_SetConfig+0x79a>
 8006af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afa:	d204      	bcs.n	8006b06 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b02:	60da      	str	r2, [r3, #12]
 8006b04:	e17c      	b.n	8006e00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006b0c:	e178      	b.n	8006e00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b16:	f040 80c5 	bne.w	8006ca4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006b1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	dc48      	bgt.n	8006bb4 <UART_SetConfig+0x848>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	db7b      	blt.n	8006c1e <UART_SetConfig+0x8b2>
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	d879      	bhi.n	8006c1e <UART_SetConfig+0x8b2>
 8006b2a:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <UART_SetConfig+0x7c4>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006bbb 	.word	0x08006bbb
 8006b34:	08006bc3 	.word	0x08006bc3
 8006b38:	08006c1f 	.word	0x08006c1f
 8006b3c:	08006c1f 	.word	0x08006c1f
 8006b40:	08006bcb 	.word	0x08006bcb
 8006b44:	08006c1f 	.word	0x08006c1f
 8006b48:	08006c1f 	.word	0x08006c1f
 8006b4c:	08006c1f 	.word	0x08006c1f
 8006b50:	08006bdb 	.word	0x08006bdb
 8006b54:	08006c1f 	.word	0x08006c1f
 8006b58:	08006c1f 	.word	0x08006c1f
 8006b5c:	08006c1f 	.word	0x08006c1f
 8006b60:	08006c1f 	.word	0x08006c1f
 8006b64:	08006c1f 	.word	0x08006c1f
 8006b68:	08006c1f 	.word	0x08006c1f
 8006b6c:	08006c1f 	.word	0x08006c1f
 8006b70:	08006beb 	.word	0x08006beb
 8006b74:	08006c1f 	.word	0x08006c1f
 8006b78:	08006c1f 	.word	0x08006c1f
 8006b7c:	08006c1f 	.word	0x08006c1f
 8006b80:	08006c1f 	.word	0x08006c1f
 8006b84:	08006c1f 	.word	0x08006c1f
 8006b88:	08006c1f 	.word	0x08006c1f
 8006b8c:	08006c1f 	.word	0x08006c1f
 8006b90:	08006c1f 	.word	0x08006c1f
 8006b94:	08006c1f 	.word	0x08006c1f
 8006b98:	08006c1f 	.word	0x08006c1f
 8006b9c:	08006c1f 	.word	0x08006c1f
 8006ba0:	08006c1f 	.word	0x08006c1f
 8006ba4:	08006c1f 	.word	0x08006c1f
 8006ba8:	08006c1f 	.word	0x08006c1f
 8006bac:	08006c1f 	.word	0x08006c1f
 8006bb0:	08006c11 	.word	0x08006c11
 8006bb4:	2b40      	cmp	r3, #64	; 0x40
 8006bb6:	d02e      	beq.n	8006c16 <UART_SetConfig+0x8aa>
 8006bb8:	e031      	b.n	8006c1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bba:	f7fd f96d 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8006bbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bc0:	e033      	b.n	8006c2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc2:	f7fd f97f 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8006bc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006bc8:	e02f      	b.n	8006c2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7fe f8ea 	bl	8004da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd8:	e027      	b.n	8006c2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bda:	f107 0318 	add.w	r3, r7, #24
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe fa36 	bl	8005050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be8:	e01f      	b.n	8006c2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bea:	4b2d      	ldr	r3, [pc, #180]	; (8006ca0 <UART_SetConfig+0x934>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bf6:	4b2a      	ldr	r3, [pc, #168]	; (8006ca0 <UART_SetConfig+0x934>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	08db      	lsrs	r3, r3, #3
 8006bfc:	f003 0303 	and.w	r3, r3, #3
 8006c00:	4a24      	ldr	r2, [pc, #144]	; (8006c94 <UART_SetConfig+0x928>)
 8006c02:	fa22 f303 	lsr.w	r3, r2, r3
 8006c06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c08:	e00f      	b.n	8006c2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006c0a:	4b22      	ldr	r3, [pc, #136]	; (8006c94 <UART_SetConfig+0x928>)
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c0e:	e00c      	b.n	8006c2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c10:	4b21      	ldr	r3, [pc, #132]	; (8006c98 <UART_SetConfig+0x92c>)
 8006c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c14:	e009      	b.n	8006c2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c1c:	e005      	b.n	8006c2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006c28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80e7 	beq.w	8006e00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	4a19      	ldr	r2, [pc, #100]	; (8006c9c <UART_SetConfig+0x930>)
 8006c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c44:	005a      	lsls	r2, r3, #1
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	085b      	lsrs	r3, r3, #1
 8006c4c:	441a      	add	r2, r3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c56:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	2b0f      	cmp	r3, #15
 8006c5c:	d916      	bls.n	8006c8c <UART_SetConfig+0x920>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c64:	d212      	bcs.n	8006c8c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	f023 030f 	bic.w	r3, r3, #15
 8006c6e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c72:	085b      	lsrs	r3, r3, #1
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006c88:	60da      	str	r2, [r3, #12]
 8006c8a:	e0b9      	b.n	8006e00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c92:	e0b5      	b.n	8006e00 <UART_SetConfig+0xa94>
 8006c94:	03d09000 	.word	0x03d09000
 8006c98:	003d0900 	.word	0x003d0900
 8006c9c:	08007a4c 	.word	0x08007a4c
 8006ca0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ca4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	dc49      	bgt.n	8006d40 <UART_SetConfig+0x9d4>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	db7c      	blt.n	8006daa <UART_SetConfig+0xa3e>
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d87a      	bhi.n	8006daa <UART_SetConfig+0xa3e>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x950>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006d47 	.word	0x08006d47
 8006cc0:	08006d4f 	.word	0x08006d4f
 8006cc4:	08006dab 	.word	0x08006dab
 8006cc8:	08006dab 	.word	0x08006dab
 8006ccc:	08006d57 	.word	0x08006d57
 8006cd0:	08006dab 	.word	0x08006dab
 8006cd4:	08006dab 	.word	0x08006dab
 8006cd8:	08006dab 	.word	0x08006dab
 8006cdc:	08006d67 	.word	0x08006d67
 8006ce0:	08006dab 	.word	0x08006dab
 8006ce4:	08006dab 	.word	0x08006dab
 8006ce8:	08006dab 	.word	0x08006dab
 8006cec:	08006dab 	.word	0x08006dab
 8006cf0:	08006dab 	.word	0x08006dab
 8006cf4:	08006dab 	.word	0x08006dab
 8006cf8:	08006dab 	.word	0x08006dab
 8006cfc:	08006d77 	.word	0x08006d77
 8006d00:	08006dab 	.word	0x08006dab
 8006d04:	08006dab 	.word	0x08006dab
 8006d08:	08006dab 	.word	0x08006dab
 8006d0c:	08006dab 	.word	0x08006dab
 8006d10:	08006dab 	.word	0x08006dab
 8006d14:	08006dab 	.word	0x08006dab
 8006d18:	08006dab 	.word	0x08006dab
 8006d1c:	08006dab 	.word	0x08006dab
 8006d20:	08006dab 	.word	0x08006dab
 8006d24:	08006dab 	.word	0x08006dab
 8006d28:	08006dab 	.word	0x08006dab
 8006d2c:	08006dab 	.word	0x08006dab
 8006d30:	08006dab 	.word	0x08006dab
 8006d34:	08006dab 	.word	0x08006dab
 8006d38:	08006dab 	.word	0x08006dab
 8006d3c:	08006d9d 	.word	0x08006d9d
 8006d40:	2b40      	cmp	r3, #64	; 0x40
 8006d42:	d02e      	beq.n	8006da2 <UART_SetConfig+0xa36>
 8006d44:	e031      	b.n	8006daa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d46:	f7fd f8a7 	bl	8003e98 <HAL_RCC_GetPCLK1Freq>
 8006d4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d4c:	e033      	b.n	8006db6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d4e:	f7fd f8b9 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8006d52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d54:	e02f      	b.n	8006db6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe f824 	bl	8004da8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d64:	e027      	b.n	8006db6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d66:	f107 0318 	add.w	r3, r7, #24
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe f970 	bl	8005050 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d74:	e01f      	b.n	8006db6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d76:	4b2d      	ldr	r3, [pc, #180]	; (8006e2c <UART_SetConfig+0xac0>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d82:	4b2a      	ldr	r3, [pc, #168]	; (8006e2c <UART_SetConfig+0xac0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	08db      	lsrs	r3, r3, #3
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	4a28      	ldr	r2, [pc, #160]	; (8006e30 <UART_SetConfig+0xac4>)
 8006d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d94:	e00f      	b.n	8006db6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d96:	4b26      	ldr	r3, [pc, #152]	; (8006e30 <UART_SetConfig+0xac4>)
 8006d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9a:	e00c      	b.n	8006db6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d9c:	4b25      	ldr	r3, [pc, #148]	; (8006e34 <UART_SetConfig+0xac8>)
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da0:	e009      	b.n	8006db6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da8:	e005      	b.n	8006db6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006db4:	bf00      	nop
    }

    if (pclk != 0U)
 8006db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d021      	beq.n	8006e00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	4a1d      	ldr	r2, [pc, #116]	; (8006e38 <UART_SetConfig+0xacc>)
 8006dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dca:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	441a      	add	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de2:	2b0f      	cmp	r3, #15
 8006de4:	d909      	bls.n	8006dfa <UART_SetConfig+0xa8e>
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dec:	d205      	bcs.n	8006dfa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	60da      	str	r2, [r3, #12]
 8006df8:	e002      	b.n	8006e00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2200      	movs	r2, #0
 8006e14:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006e1c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3748      	adds	r7, #72	; 0x48
 8006e24:	46bd      	mov	sp, r7
 8006e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e2a:	bf00      	nop
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	003d0900 	.word	0x003d0900
 8006e38:	08007a4c 	.word	0x08007a4c

08006e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eae:	f003 0308 	and.w	r3, r3, #8
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	f003 0310 	and.w	r3, r3, #16
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01a      	beq.n	8006f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	430a      	orrs	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f3a:	d10a      	bne.n	8006f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	605a      	str	r2, [r3, #4]
  }
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f90:	f7fa fa6a 	bl	8001468 <HAL_GetTick>
 8006f94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d10e      	bne.n	8006fc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f82f 	bl	8007016 <UART_WaitOnFlagUntilTimeout>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e025      	b.n	800700e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b04      	cmp	r3, #4
 8006fce:	d10e      	bne.n	8006fee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f819 	bl	8007016 <UART_WaitOnFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e00f      	b.n	800700e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b09c      	sub	sp, #112	; 0x70
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	603b      	str	r3, [r7, #0]
 8007022:	4613      	mov	r3, r2
 8007024:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007026:	e0a9      	b.n	800717c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	f000 80a5 	beq.w	800717c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007032:	f7fa fa19 	bl	8001468 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800703e:	429a      	cmp	r2, r3
 8007040:	d302      	bcc.n	8007048 <UART_WaitOnFlagUntilTimeout+0x32>
 8007042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007044:	2b00      	cmp	r3, #0
 8007046:	d140      	bne.n	80070ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007058:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800705c:	667b      	str	r3, [r7, #100]	; 0x64
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	461a      	mov	r2, r3
 8007064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007068:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800706c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e6      	bne.n	8007048 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3308      	adds	r3, #8
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708c:	f023 0301 	bic.w	r3, r3, #1
 8007090:	663b      	str	r3, [r7, #96]	; 0x60
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3308      	adds	r3, #8
 8007098:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800709a:	64ba      	str	r2, [r7, #72]	; 0x48
 800709c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80070a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e5      	bne.n	800707a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e069      	b.n	800719e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d051      	beq.n	800717c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e6:	d149      	bne.n	800717c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007106:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007110:	637b      	str	r3, [r7, #52]	; 0x34
 8007112:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e6      	bne.n	80070f2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3308      	adds	r3, #8
 800712a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	e853 3f00 	ldrex	r3, [r3]
 8007132:	613b      	str	r3, [r7, #16]
   return(result);
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	66bb      	str	r3, [r7, #104]	; 0x68
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3308      	adds	r3, #8
 8007142:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007144:	623a      	str	r2, [r7, #32]
 8007146:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007148:	69f9      	ldr	r1, [r7, #28]
 800714a:	6a3a      	ldr	r2, [r7, #32]
 800714c:	e841 2300 	strex	r3, r2, [r1]
 8007150:	61bb      	str	r3, [r7, #24]
   return(result);
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1e5      	bne.n	8007124 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2220      	movs	r2, #32
 800715c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2220      	movs	r2, #32
 800716c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e010      	b.n	800719e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69da      	ldr	r2, [r3, #28]
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	4013      	ands	r3, r2
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	bf0c      	ite	eq
 800718c:	2301      	moveq	r3, #1
 800718e:	2300      	movne	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	461a      	mov	r2, r3
 8007194:	79fb      	ldrb	r3, [r7, #7]
 8007196:	429a      	cmp	r2, r3
 8007198:	f43f af46 	beq.w	8007028 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3770      	adds	r7, #112	; 0x70
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_UARTEx_DisableFifoMode+0x16>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e027      	b.n	800720c <HAL_UARTEx_DisableFifoMode+0x66>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2224      	movs	r2, #36	; 0x24
 80071c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80071ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2220      	movs	r2, #32
 80071fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007228:	2b01      	cmp	r3, #1
 800722a:	d101      	bne.n	8007230 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800722c:	2302      	movs	r3, #2
 800722e:	e02d      	b.n	800728c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2224      	movs	r2, #36	; 0x24
 800723c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0201 	bic.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f84f 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e02d      	b.n	8007308 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2224      	movs	r2, #36	; 0x24
 80072b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0201 	bic.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	683a      	ldr	r2, [r7, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f811 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2220      	movs	r2, #32
 80072fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800731c:	2b00      	cmp	r3, #0
 800731e:	d108      	bne.n	8007332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007330:	e031      	b.n	8007396 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007332:	2310      	movs	r3, #16
 8007334:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007336:	2310      	movs	r3, #16
 8007338:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	0e5b      	lsrs	r3, r3, #25
 8007342:	b2db      	uxtb	r3, r3
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	0f5b      	lsrs	r3, r3, #29
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	7b3a      	ldrb	r2, [r7, #12]
 800735e:	4911      	ldr	r1, [pc, #68]	; (80073a4 <UARTEx_SetNbDataToProcess+0x94>)
 8007360:	5c8a      	ldrb	r2, [r1, r2]
 8007362:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007366:	7b3a      	ldrb	r2, [r7, #12]
 8007368:	490f      	ldr	r1, [pc, #60]	; (80073a8 <UARTEx_SetNbDataToProcess+0x98>)
 800736a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800736c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	7b7a      	ldrb	r2, [r7, #13]
 800737c:	4909      	ldr	r1, [pc, #36]	; (80073a4 <UARTEx_SetNbDataToProcess+0x94>)
 800737e:	5c8a      	ldrb	r2, [r1, r2]
 8007380:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007384:	7b7a      	ldrb	r2, [r7, #13]
 8007386:	4908      	ldr	r1, [pc, #32]	; (80073a8 <UARTEx_SetNbDataToProcess+0x98>)
 8007388:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800738a:	fb93 f3f2 	sdiv	r3, r3, r2
 800738e:	b29a      	uxth	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007396:	bf00      	nop
 8007398:	3714      	adds	r7, #20
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	08007a64 	.word	0x08007a64
 80073a8:	08007a6c 	.word	0x08007a6c

080073ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073ac:	b084      	sub	sp, #16
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	f107 001c 	add.w	r0, r7, #28
 80073ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d120      	bne.n	8007406 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	4b2a      	ldr	r3, [pc, #168]	; (8007480 <USB_CoreInit+0xd4>)
 80073d6:	4013      	ands	r3, r2
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d105      	bne.n	80073fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 faac 	bl	8007958 <USB_CoreReset>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]
 8007404:	e01a      	b.n	800743c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 faa0 	bl	8007958 <USB_CoreReset>
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800741c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007426:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	639a      	str	r2, [r3, #56]	; 0x38
 800742e:	e005      	b.n	800743c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	2b01      	cmp	r3, #1
 8007440:	d116      	bne.n	8007470 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007446:	b29a      	uxth	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <USB_CoreInit+0xd8>)
 8007452:	4313      	orrs	r3, r2
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f043 0206 	orr.w	r2, r3, #6
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f043 0220 	orr.w	r2, r3, #32
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800747c:	b004      	add	sp, #16
 800747e:	4770      	bx	lr
 8007480:	ffbdffbf 	.word	0xffbdffbf
 8007484:	03ee0000 	.word	0x03ee0000

08007488 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f023 0201 	bic.w	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d115      	bne.n	80074f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074d8:	2001      	movs	r0, #1
 80074da:	f7f9 ffd1 	bl	8001480 <HAL_Delay>
      ms++;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fa29 	bl	800793c <USB_GetMode>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d01e      	beq.n	800752e <USB_SetCurrentMode+0x84>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b31      	cmp	r3, #49	; 0x31
 80074f4:	d9f0      	bls.n	80074d8 <USB_SetCurrentMode+0x2e>
 80074f6:	e01a      	b.n	800752e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d115      	bne.n	800752a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800750a:	2001      	movs	r0, #1
 800750c:	f7f9 ffb8 	bl	8001480 <HAL_Delay>
      ms++;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fa10 	bl	800793c <USB_GetMode>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d005      	beq.n	800752e <USB_SetCurrentMode+0x84>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b31      	cmp	r3, #49	; 0x31
 8007526:	d9f0      	bls.n	800750a <USB_SetCurrentMode+0x60>
 8007528:	e001      	b.n	800752e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e005      	b.n	800753a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b32      	cmp	r3, #50	; 0x32
 8007532:	d101      	bne.n	8007538 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e000      	b.n	800753a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
	...

08007544 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007544:	b084      	sub	sp, #16
 8007546:	b580      	push	{r7, lr}
 8007548:	b086      	sub	sp, #24
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007552:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	e009      	b.n	8007578 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	3340      	adds	r3, #64	; 0x40
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	2200      	movs	r2, #0
 8007570:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	3301      	adds	r3, #1
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2b0e      	cmp	r3, #14
 800757c:	d9f2      	bls.n	8007564 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800757e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11c      	bne.n	80075be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007592:	f043 0302 	orr.w	r3, r3, #2
 8007596:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	e005      	b.n	80075ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075d0:	461a      	mov	r2, r3
 80075d2:	2300      	movs	r3, #0
 80075d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075dc:	4619      	mov	r1, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e4:	461a      	mov	r2, r3
 80075e6:	680b      	ldr	r3, [r1, #0]
 80075e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d10c      	bne.n	800760a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075f6:	2100      	movs	r1, #0
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f965 	bl	80078c8 <USB_SetDevSpeed>
 80075fe:	e008      	b.n	8007612 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007600:	2101      	movs	r1, #1
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f960 	bl	80078c8 <USB_SetDevSpeed>
 8007608:	e003      	b.n	8007612 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800760a:	2103      	movs	r1, #3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f95b 	bl	80078c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007612:	2110      	movs	r1, #16
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f8f3 	bl	8007800 <USB_FlushTxFifo>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f91f 	bl	8007868 <USB_FlushRxFifo>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763a:	461a      	mov	r2, r3
 800763c:	2300      	movs	r3, #0
 800763e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007646:	461a      	mov	r2, r3
 8007648:	2300      	movs	r3, #0
 800764a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007652:	461a      	mov	r2, r3
 8007654:	2300      	movs	r3, #0
 8007656:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007658:	2300      	movs	r3, #0
 800765a:	613b      	str	r3, [r7, #16]
 800765c:	e043      	b.n	80076e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007670:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007674:	d118      	bne.n	80076a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007688:	461a      	mov	r2, r3
 800768a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	e013      	b.n	80076ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769e:	461a      	mov	r2, r3
 80076a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076a4:	6013      	str	r3, [r2, #0]
 80076a6:	e008      	b.n	80076ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	461a      	mov	r2, r3
 80076b6:	2300      	movs	r3, #0
 80076b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	015a      	lsls	r2, r3, #5
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c6:	461a      	mov	r2, r3
 80076c8:	2300      	movs	r3, #0
 80076ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d8:	461a      	mov	r2, r3
 80076da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3301      	adds	r3, #1
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d3b7      	bcc.n	800765e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ee:	2300      	movs	r3, #0
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	e043      	b.n	800777c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800770a:	d118      	bne.n	800773e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	461a      	mov	r2, r3
 8007720:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	e013      	b.n	8007750 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007734:	461a      	mov	r2, r3
 8007736:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	e008      	b.n	8007750 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4413      	add	r3, r2
 8007746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774a:	461a      	mov	r2, r3
 800774c:	2300      	movs	r3, #0
 800774e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	015a      	lsls	r2, r3, #5
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	4413      	add	r3, r2
 8007758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775c:	461a      	mov	r2, r3
 800775e:	2300      	movs	r3, #0
 8007760:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776e:	461a      	mov	r2, r3
 8007770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007774:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	3301      	adds	r3, #1
 800777a:	613b      	str	r3, [r7, #16]
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	693a      	ldr	r2, [r7, #16]
 8007780:	429a      	cmp	r2, r3
 8007782:	d3b7      	bcc.n	80076f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007796:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80077a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d105      	bne.n	80077b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f043 0210 	orr.w	r2, r3, #16
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <USB_DevInit+0x2b4>)
 80077be:	4313      	orrs	r3, r2
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80077c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	f043 0208 	orr.w	r2, r3, #8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d105      	bne.n	80077e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699a      	ldr	r2, [r3, #24]
 80077e0:	4b06      	ldr	r3, [pc, #24]	; (80077fc <USB_DevInit+0x2b8>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077f4:	b004      	add	sp, #16
 80077f6:	4770      	bx	lr
 80077f8:	803c3800 	.word	0x803c3800
 80077fc:	40000004 	.word	0x40000004

08007800 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3301      	adds	r3, #1
 8007812:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a13      	ldr	r2, [pc, #76]	; (8007864 <USB_FlushTxFifo+0x64>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d901      	bls.n	8007820 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e01b      	b.n	8007858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	2b00      	cmp	r3, #0
 8007826:	daf2      	bge.n	800780e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	019b      	lsls	r3, r3, #6
 8007830:	f043 0220 	orr.w	r2, r3, #32
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	3301      	adds	r3, #1
 800783c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	4a08      	ldr	r2, [pc, #32]	; (8007864 <USB_FlushTxFifo+0x64>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d901      	bls.n	800784a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e006      	b.n	8007858 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f003 0320 	and.w	r3, r3, #32
 8007852:	2b20      	cmp	r3, #32
 8007854:	d0f0      	beq.n	8007838 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	00030d40 	.word	0x00030d40

08007868 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3301      	adds	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4a11      	ldr	r2, [pc, #68]	; (80078c4 <USB_FlushRxFifo+0x5c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d901      	bls.n	8007886 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007882:	2303      	movs	r3, #3
 8007884:	e018      	b.n	80078b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	daf2      	bge.n	8007874 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2210      	movs	r2, #16
 8007896:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3301      	adds	r3, #1
 800789c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <USB_FlushRxFifo+0x5c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d901      	bls.n	80078aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e006      	b.n	80078b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	2b10      	cmp	r3, #16
 80078b4:	d0f0      	beq.n	8007898 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	00030d40 	.word	0x00030d40

080078c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078e8:	4313      	orrs	r3, r2
 80078ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007914:	f023 0303 	bic.w	r3, r3, #3
 8007918:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007928:	f043 0302 	orr.w	r3, r3, #2
 800792c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	f003 0301 	and.w	r3, r3, #1
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3301      	adds	r3, #1
 8007968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4a13      	ldr	r2, [pc, #76]	; (80079bc <USB_CoreReset+0x64>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d901      	bls.n	8007976 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e01b      	b.n	80079ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	daf2      	bge.n	8007964 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f043 0201 	orr.w	r2, r3, #1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3301      	adds	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4a09      	ldr	r2, [pc, #36]	; (80079bc <USB_CoreReset+0x64>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d901      	bls.n	80079a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e006      	b.n	80079ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d0f0      	beq.n	800798e <USB_CoreReset+0x36>

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	00030d40 	.word	0x00030d40

080079c0 <__libc_init_array>:
 80079c0:	b570      	push	{r4, r5, r6, lr}
 80079c2:	4d0d      	ldr	r5, [pc, #52]	; (80079f8 <__libc_init_array+0x38>)
 80079c4:	4c0d      	ldr	r4, [pc, #52]	; (80079fc <__libc_init_array+0x3c>)
 80079c6:	1b64      	subs	r4, r4, r5
 80079c8:	10a4      	asrs	r4, r4, #2
 80079ca:	2600      	movs	r6, #0
 80079cc:	42a6      	cmp	r6, r4
 80079ce:	d109      	bne.n	80079e4 <__libc_init_array+0x24>
 80079d0:	4d0b      	ldr	r5, [pc, #44]	; (8007a00 <__libc_init_array+0x40>)
 80079d2:	4c0c      	ldr	r4, [pc, #48]	; (8007a04 <__libc_init_array+0x44>)
 80079d4:	f000 f820 	bl	8007a18 <_init>
 80079d8:	1b64      	subs	r4, r4, r5
 80079da:	10a4      	asrs	r4, r4, #2
 80079dc:	2600      	movs	r6, #0
 80079de:	42a6      	cmp	r6, r4
 80079e0:	d105      	bne.n	80079ee <__libc_init_array+0x2e>
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
 80079e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e8:	4798      	blx	r3
 80079ea:	3601      	adds	r6, #1
 80079ec:	e7ee      	b.n	80079cc <__libc_init_array+0xc>
 80079ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f2:	4798      	blx	r3
 80079f4:	3601      	adds	r6, #1
 80079f6:	e7f2      	b.n	80079de <__libc_init_array+0x1e>
 80079f8:	08007a7c 	.word	0x08007a7c
 80079fc:	08007a7c 	.word	0x08007a7c
 8007a00:	08007a7c 	.word	0x08007a7c
 8007a04:	08007a80 	.word	0x08007a80

08007a08 <memset>:
 8007a08:	4402      	add	r2, r0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d100      	bne.n	8007a12 <memset+0xa>
 8007a10:	4770      	bx	lr
 8007a12:	f803 1b01 	strb.w	r1, [r3], #1
 8007a16:	e7f9      	b.n	8007a0c <memset+0x4>

08007a18 <_init>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	bf00      	nop
 8007a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1e:	bc08      	pop	{r3}
 8007a20:	469e      	mov	lr, r3
 8007a22:	4770      	bx	lr

08007a24 <_fini>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	bf00      	nop
 8007a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2a:	bc08      	pop	{r3}
 8007a2c:	469e      	mov	lr, r3
 8007a2e:	4770      	bx	lr
