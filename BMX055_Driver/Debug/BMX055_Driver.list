
BMX055_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800f48c  0800f48c  0001f48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5cc  0800f5cc  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5cc  0800f5cc  0001f5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5d4  0800f5d4  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5d4  0800f5d4  0001f5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5d8  0800f5d8  0001f5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800f5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          000068ac  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006a10  20006a10  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002dffd  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000064a5  00000000  00000000  0004e191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002708  00000000  00000000  00054638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002488  00000000  00000000  00056d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a5c6  00000000  00000000  000591c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030539  00000000  00000000  0008378e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8085  00000000  00000000  000b3cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019bd4c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000abcc  00000000  00000000  0019bd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f474 	.word	0x0800f474

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800f474 	.word	0x0800f474

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <BMX055_init>:
/**
 @brief Begin Device
 @retval true normaly done
 @retval false device error
*/
bool BMX055_init(BMX055_Handle* bmx055) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  // Set CS pins HIGH
  HAL_GPIO_WritePin(bmx055->acc_CS_port, bmx055->acc_CS_pin, GPIO_PIN_SET);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	6858      	ldr	r0, [r3, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	891b      	ldrh	r3, [r3, #8]
 80004e4:	2201      	movs	r2, #1
 80004e6:	4619      	mov	r1, r3
 80004e8:	f001 ff78 	bl	80023dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(bmx055->gyro_CS_port, bmx055->gyro_CS_pin, GPIO_PIN_SET);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	68d8      	ldr	r0, [r3, #12]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	8a1b      	ldrh	r3, [r3, #16]
 80004f4:	2201      	movs	r2, #1
 80004f6:	4619      	mov	r1, r3
 80004f8:	f001 ff70 	bl	80023dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(bmx055->mag_CS_port, bmx055->mag_CS_pin, GPIO_PIN_SET);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	6958      	ldr	r0, [r3, #20]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	8b1b      	ldrh	r3, [r3, #24]
 8000504:	2201      	movs	r2, #1
 8000506:	4619      	mov	r1, r3
 8000508:	f001 ff68 	bl	80023dc <HAL_GPIO_WritePin>

  if ( BMX055_searchDevice(bmx055) ) {
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f80d 	bl	800052c <BMX055_searchDevice>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d004      	beq.n	8000522 <BMX055_init+0x4e>
    BMX055_configuration(bmx055);
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f000 f824 	bl	8000566 <BMX055_configuration>
    return true;
 800051e:	2301      	movs	r3, #1
 8000520:	e000      	b.n	8000524 <BMX055_init+0x50>
  } else {
    return false;
 8000522:	2300      	movs	r3, #0
  }
}
 8000524:	4618      	mov	r0, r3
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <BMX055_searchDevice>:
 * @brief Search bmx055
 * @retval true  Found Device
 * @retval false : Not Found Device
 */
bool BMX055_searchDevice(BMX055_Handle* bmx055)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
  uint8_t device = 0x00;
 8000534:	2300      	movs	r3, #0
 8000536:	73fb      	strb	r3, [r7, #15]
  BMX055_readSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_WHO_AM_I_REG, &device, 1);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	6859      	ldr	r1, [r3, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	891a      	ldrh	r2, [r3, #8]
 8000540:	2301      	movs	r3, #1
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	f107 030f 	add.w	r3, r7, #15
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	6878      	ldr	r0, [r7, #4]
 800054e:	f000 f913 	bl	8000778 <BMX055_readSPI>

  if(device == BMX055_ACC_DEVICE){
 8000552:	7bfb      	ldrb	r3, [r7, #15]
 8000554:	2bfa      	cmp	r3, #250	; 0xfa
 8000556:	d101      	bne.n	800055c <BMX055_searchDevice+0x30>
    return true;
 8000558:	2301      	movs	r3, #1
 800055a:	e000      	b.n	800055e <BMX055_searchDevice+0x32>
  } else{
    return false;
 800055c:	2300      	movs	r3, #0
  }
}
 800055e:	4618      	mov	r0, r3
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <BMX055_configuration>:

/**
 * @brief Set Config
 */
void BMX055_configuration(BMX055_Handle* bmx055)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af02      	add	r7, sp, #8
 800056c:	6078      	str	r0, [r7, #4]
  /* SoftReset */
  uint8_t data = BMX055_INITIATED_SOFT_RESET;
 800056e:	23b6      	movs	r3, #182	; 0xb6
 8000570:	73fb      	strb	r3, [r7, #15]
  // Accel SoftReset
  BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_RESET_REG, &data, 1);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6859      	ldr	r1, [r3, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	891a      	ldrh	r2, [r3, #8]
 800057a:	2301      	movs	r3, #1
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	f107 030f 	add.w	r3, r7, #15
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2314      	movs	r3, #20
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f000 f8c8 	bl	800071c <BMX055_writeSPI>
  osDelay(2);  // wait 1.8ms
 800058c:	2002      	movs	r0, #2
 800058e:	f00a feca 	bl	800b326 <osDelay>
  // Gyro SoftReset
  BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_RESET_REG, &data, 1);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	68d9      	ldr	r1, [r3, #12]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	8a1a      	ldrh	r2, [r3, #16]
 800059a:	2301      	movs	r3, #1
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	f107 030f 	add.w	r3, r7, #15
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2314      	movs	r3, #20
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 f8b8 	bl	800071c <BMX055_writeSPI>
  osDelay(2);  // wait 1.8ms
 80005ac:	2002      	movs	r0, #2
 80005ae:	f00a feba 	bl	800b326 <osDelay>
  // Mag SoftReset
  BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_RESET_REG, &data, 1);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6959      	ldr	r1, [r3, #20]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	8b1a      	ldrh	r2, [r3, #24]
 80005ba:	2301      	movs	r3, #1
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	f107 030f 	add.w	r3, r7, #15
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2314      	movs	r3, #20
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f000 f8a8 	bl	800071c <BMX055_writeSPI>
  osDelay(2);
 80005cc:	2002      	movs	r0, #2
 80005ce:	f00a feaa 	bl	800b326 <osDelay>

  /* Accel Setting */
  // Select Accel PMU Range
  data = bmx055->acc_range;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7a9b      	ldrb	r3, [r3, #10]
 80005d6:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_RANGE_REG, &data, 1);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6859      	ldr	r1, [r3, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	891a      	ldrh	r2, [r3, #8]
 80005e0:	2301      	movs	r3, #1
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	f107 030f 	add.w	r3, r7, #15
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	230f      	movs	r3, #15
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f895 	bl	800071c <BMX055_writeSPI>
  // Select Accel PMU_BW   
  data = bmx055->acc_range;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7a9b      	ldrb	r3, [r3, #10]
 80005f6:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055, bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_BW_REG, &data, 1);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6859      	ldr	r1, [r3, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	891a      	ldrh	r2, [r3, #8]
 8000600:	2301      	movs	r3, #1
 8000602:	9301      	str	r3, [sp, #4]
 8000604:	f107 030f 	add.w	r3, r7, #15
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2310      	movs	r3, #16
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f885 	bl	800071c <BMX055_writeSPI>
  // Select Accel PMU_LPW  (NomalMode, SleepDuration 0.5ms)
  data = BMX055_ACC_PMU_LPW_MODE_NOMAL|BMX055_ACC_PMU_LPW_SLEEP_DUR_0_5MS;
 8000612:	2300      	movs	r3, #0
 8000614:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055 ,bmx055->acc_CS_port, bmx055->acc_CS_pin, BMX055_ACC_PMU_LPW_REG, &data, 1);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6859      	ldr	r1, [r3, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	891a      	ldrh	r2, [r3, #8]
 800061e:	2301      	movs	r3, #1
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	f107 030f 	add.w	r3, r7, #15
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2311      	movs	r3, #17
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f000 f876 	bl	800071c <BMX055_writeSPI>

  /* Gyro Setting */
  // Select Gyro Range(262.4 LSB/°/s)
  data = bmx055->gyro_range;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	7c9b      	ldrb	r3, [r3, #18]
 8000634:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_RANGE_REG, &data, 1);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	68d9      	ldr	r1, [r3, #12]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8a1a      	ldrh	r2, [r3, #16]
 800063e:	2301      	movs	r3, #1
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	f107 030f 	add.w	r3, r7, #15
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	230f      	movs	r3, #15
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f866 	bl	800071c <BMX055_writeSPI>
  // Select Gyro BW   (32Hz)
  data = bmx055->gyro_bandwidth;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	7cdb      	ldrb	r3, [r3, #19]
 8000654:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_BW_REG, &data, 1);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68d9      	ldr	r1, [r3, #12]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	8a1a      	ldrh	r2, [r3, #16]
 800065e:	2301      	movs	r3, #1
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	f107 030f 	add.w	r3, r7, #15
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2310      	movs	r3, #16
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f000 f856 	bl	800071c <BMX055_writeSPI>
  // Select Gyro LPM1 (NomalMode, SleepDuration 2ms)
  data = BMX055_GYRO_LPM1_MODE_NOMAL|BMX055_GYRO_LPM1_SLEEP_DUR_2MS;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055, bmx055->gyro_CS_port, bmx055->gyro_CS_pin, BMX055_GYRO_LPM1_REG, &data, 1);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68d9      	ldr	r1, [r3, #12]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	8a1a      	ldrh	r2, [r3, #16]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	f107 030f 	add.w	r3, r7, #15
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2311      	movs	r3, #17
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f847 	bl	800071c <BMX055_writeSPI>

  /* Mag Setting */
  // set sleep mode
  data = BMX055_MAG_POW_CTL_SLEEP_MODE;
 800068e:	2301      	movs	r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_POW_CTL_REG, &data, 1);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6959      	ldr	r1, [r3, #20]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	8b1a      	ldrh	r2, [r3, #24]
 800069a:	2301      	movs	r3, #1
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	f107 030f 	add.w	r3, r7, #15
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	234b      	movs	r3, #75	; 0x4b
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f000 f838 	bl	800071c <BMX055_writeSPI>
  osDelay(100);
 80006ac:	2064      	movs	r0, #100	; 0x64
 80006ae:	f00a fe3a 	bl	800b326 <osDelay>
  // adv.st, DataRate, OperationMode, SelfTest (NomalMode)
  data = bmx055->mag_data_rate;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7e9b      	ldrb	r3, [r3, #26]
 80006b6:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_ADV_OP_OUTPUT_REG, &data, 1);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6959      	ldr	r1, [r3, #20]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	8b1a      	ldrh	r2, [r3, #24]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	f107 030f 	add.w	r3, r7, #15
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	234c      	movs	r3, #76	; 0x4c
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f825 	bl	800071c <BMX055_writeSPI>
  // Repetitions for X-Y Axis  0x04 -> 0b00000100 -> (1+2(2^2)) = 9
  data = 0x04;
 80006d2:	2304      	movs	r3, #4
 80006d4:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_XY_REG, &data, 1);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6959      	ldr	r1, [r3, #20]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	8b1a      	ldrh	r2, [r3, #24]
 80006de:	2301      	movs	r3, #1
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	f107 030f 	add.w	r3, r7, #15
 80006e6:	9300      	str	r3, [sp, #0]
 80006e8:	2351      	movs	r3, #81	; 0x51
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f816 	bl	800071c <BMX055_writeSPI>
  // Repetitions for Z-Axis  0x0F-> 0b00001111-> (1 +(2^0 + 2^1 + 2^2 + 2^3) = 15
  data = 0x0F;
 80006f0:	230f      	movs	r3, #15
 80006f2:	73fb      	strb	r3, [r7, #15]
  BMX055_writeSPI(bmx055, bmx055->mag_CS_port, bmx055->mag_CS_pin, BMX055_MAG_REP_Z_REG, &data, 1);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6959      	ldr	r1, [r3, #20]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	8b1a      	ldrh	r2, [r3, #24]
 80006fc:	2301      	movs	r3, #1
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	f107 030f 	add.w	r3, r7, #15
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2352      	movs	r3, #82	; 0x52
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f807 	bl	800071c <BMX055_writeSPI>

  osDelay(200);
 800070e:	20c8      	movs	r0, #200	; 0xc8
 8000710:	f00a fe09 	bl	800b326 <osDelay>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <BMX055_writeSPI>:
 * @param [in] CS_Pin
 * @param [in] register_addr
 * @param [in] data
 * @param [in] len
 */
void BMX055_writeSPI(BMX055_Handle* bmx055, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t* data, size_t len) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	4611      	mov	r1, r2
 8000728:	461a      	mov	r2, r3
 800072a:	460b      	mov	r3, r1
 800072c:	80fb      	strh	r3, [r7, #6]
 800072e:	4613      	mov	r3, r2
 8000730:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 8000732:	88fb      	ldrh	r3, [r7, #6]
 8000734:	2200      	movs	r2, #0
 8000736:	4619      	mov	r1, r3
 8000738:	68b8      	ldr	r0, [r7, #8]
 800073a:	f001 fe4f 	bl	80023dc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(bmx055->hspi, register_addr, len, 1000);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	797b      	ldrb	r3, [r7, #5]
 8000744:	4619      	mov	r1, r3
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	b29a      	uxth	r2, r3
 800074a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074e:	f004 ff9b 	bl	8005688 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(bmx055->hspi, data, len, 1000);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	b29a      	uxth	r2, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	69b9      	ldr	r1, [r7, #24]
 8000760:	f004 ff92 	bl	8005688 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	2201      	movs	r2, #1
 8000768:	4619      	mov	r1, r3
 800076a:	68b8      	ldr	r0, [r7, #8]
 800076c:	f001 fe36 	bl	80023dc <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <BMX055_readSPI>:
 * @param [in] device Device type (gyro, accel or mag)
 * @param [in] register_addr Register Address
 * @param [in] num Data Length
 * @param [out] *buf Read Data
 */
void BMX055_readSPI(BMX055_Handle* bmx055, GPIO_TypeDef* CS_Port, uint16_t CS_Pin, uint8_t register_addr, uint8_t* data, size_t len) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af02      	add	r7, sp, #8
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	4611      	mov	r1, r2
 8000784:	461a      	mov	r2, r3
 8000786:	460b      	mov	r3, r1
 8000788:	80fb      	strh	r3, [r7, #6]
 800078a:	4613      	mov	r3, r2
 800078c:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	2200      	movs	r2, #0
 8000792:	4619      	mov	r1, r3
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f001 fe21 	bl	80023dc <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(bmx055->hspi, register_addr, data, len, 1000);
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6818      	ldr	r0, [r3, #0]
 800079e:	797b      	ldrb	r3, [r7, #5]
 80007a0:	4619      	mov	r1, r3
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007aa:	9200      	str	r2, [sp, #0]
 80007ac:	69ba      	ldr	r2, [r7, #24]
 80007ae:	f005 f8a7 	bl	8005900 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 80007b2:	88fb      	ldrh	r3, [r7, #6]
 80007b4:	2201      	movs	r2, #1
 80007b6:	4619      	mov	r1, r3
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f001 fe0f 	bl	80023dc <HAL_GPIO_WritePin>
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	BMX055_Handle bmx055;
	bmx055.hspi = &hspi2;
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <main+0xa8>)
 80007d0:	607b      	str	r3, [r7, #4]
	// Accelerometer parameters
	bmx055.acc_CS_port = GPIOC;
 80007d2:	4b28      	ldr	r3, [pc, #160]	; (8000874 <main+0xac>)
 80007d4:	60bb      	str	r3, [r7, #8]
	bmx055.acc_CS_pin = ACCEL_CS_Pin;
 80007d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007da:	81bb      	strh	r3, [r7, #12]
	bmx055.acc_range = BMX055_ACC_RANGE_4;
 80007dc:	2305      	movs	r3, #5
 80007de:	73bb      	strb	r3, [r7, #14]
	bmx055.acc_bandwidth = BMX055_ACC_PMU_BW_7_81;
 80007e0:	2308      	movs	r3, #8
 80007e2:	73fb      	strb	r3, [r7, #15]

	// Gyroscope parameters
	bmx055.gyro_CS_port = GPIOC;
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <main+0xac>)
 80007e6:	613b      	str	r3, [r7, #16]
	bmx055.gyro_CS_pin = GYRO_CS_Pin;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	82bb      	strh	r3, [r7, #20]
	bmx055.acc_range = BMX055_GYRO_RANGE_32_8;
 80007ee:	2301      	movs	r3, #1
 80007f0:	73bb      	strb	r3, [r7, #14]
	bmx055.acc_bandwidth = BMX055_GYRO_BW_64;
 80007f2:	2306      	movs	r3, #6
 80007f4:	73fb      	strb	r3, [r7, #15]

	// Magnetometer parameters
	bmx055.mag_CS_port = GPIOC;
 80007f6:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <main+0xac>)
 80007f8:	61bb      	str	r3, [r7, #24]
	bmx055.mag_CS_pin = MAG_CS_Pin;
 80007fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fe:	83bb      	strh	r3, [r7, #28]
	bmx055.mag_data_rate = BMX055_MAG_DATA_RATE_30;
 8000800:	2338      	movs	r3, #56	; 0x38
 8000802:	77bb      	strb	r3, [r7, #30]

	// Init BMX055
	if(!BMX055_init(&bmx055)) {
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fe64 	bl	80004d4 <BMX055_init>
 800080c:	4603      	mov	r3, r0
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d002      	beq.n	800081e <main+0x56>
		printf("[main] BMX055 failed to start\r\n");
 8000818:	4817      	ldr	r0, [pc, #92]	; (8000878 <main+0xb0>)
 800081a:	f00e f99b 	bl	800eb54 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 ff71 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f831 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 fa91 	bl	8000d4c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 800082a:	f000 f92b 	bl	8000a84 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800082e:	f000 f949 	bl	8000ac4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000832:	f000 f97d 	bl	8000b30 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000836:	f000 fa35 	bl	8000ca4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800083a:	f000 f9e5 	bl	8000c08 <MX_TIM3_Init>
  MX_FATFS_Init();
 800083e:	f008 fa09 	bl	8008c54 <MX_FATFS_Init>
  MX_I2C2_Init();
 8000842:	f000 f8f1 	bl	8000a28 <MX_I2C2_Init>
  MX_ADC2_Init();
 8000846:	f000 f889 	bl	800095c <MX_ADC2_Init>
  MX_SPI3_Init();
 800084a:	f000 f9a7 	bl	8000b9c <MX_SPI3_Init>
  MX_USART2_UART_Init();
 800084e:	f000 fa53 	bl	8000cf8 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000852:	f000 f8d5 	bl	8000a00 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000856:	f00a fc53 	bl	800b100 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <main+0xb4>)
 800085c:	2100      	movs	r1, #0
 800085e:	4808      	ldr	r0, [pc, #32]	; (8000880 <main+0xb8>)
 8000860:	f00a fccf 	bl	800b202 <osThreadNew>
 8000864:	4603      	mov	r3, r0
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <main+0xbc>)
 8000868:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800086a:	f00a fc8f 	bl	800b18c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800086e:	e7fe      	b.n	800086e <main+0xa6>
 8000870:	20000300 	.word	0x20000300
 8000874:	40020800 	.word	0x40020800
 8000878:	0800f498 	.word	0x0800f498
 800087c:	0800f518 	.word	0x0800f518
 8000880:	08000eed 	.word	0x08000eed
 8000884:	20000480 	.word	0x20000480

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	2230      	movs	r2, #48	; 0x30
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f00e f8e6 	bl	800ea68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	4b28      	ldr	r3, [pc, #160]	; (8000954 <SystemClock_Config+0xcc>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b4:	4a27      	ldr	r2, [pc, #156]	; (8000954 <SystemClock_Config+0xcc>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ba:	6413      	str	r3, [r2, #64]	; 0x40
 80008bc:	4b25      	ldr	r3, [pc, #148]	; (8000954 <SystemClock_Config+0xcc>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <SystemClock_Config+0xd0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a21      	ldr	r2, [pc, #132]	; (8000958 <SystemClock_Config+0xd0>)
 80008d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d6:	6013      	str	r3, [r2, #0]
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <SystemClock_Config+0xd0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e4:	2301      	movs	r3, #1
 80008e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ee:	2302      	movs	r3, #2
 80008f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80008f8:	230c      	movs	r3, #12
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008fc:	23a8      	movs	r3, #168	; 0xa8
 80008fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000900:	2302      	movs	r3, #2
 8000902:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000904:	2307      	movs	r3, #7
 8000906:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000908:	f107 0320 	add.w	r3, r7, #32
 800090c:	4618      	mov	r0, r3
 800090e:	f003 f941 	bl	8003b94 <HAL_RCC_OscConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000918:	f000 faf2 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091c:	230f      	movs	r3, #15
 800091e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000920:	2302      	movs	r3, #2
 8000922:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000928:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2105      	movs	r1, #5
 800093a:	4618      	mov	r0, r3
 800093c:	f003 fba2 	bl	8004084 <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000946:	f000 fadb 	bl	8000f00 <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	; 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_ADC2_Init+0x98>)
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <MX_ADC2_Init+0x9c>)
 8000972:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_ADC2_Init+0x98>)
 8000976:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800097a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_ADC2_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_ADC2_Init+0x98>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_ADC2_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_ADC2_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_ADC2_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_ADC2_Init+0x98>)
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MX_ADC2_Init+0xa0>)
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_ADC2_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_ADC2_Init+0x98>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_ADC2_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_ADC2_Init+0x98>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_ADC2_Init+0x98>)
 80009be:	f000 ff37 	bl	8001830 <HAL_ADC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80009c8:	f000 fa9a 	bl	8000f00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009cc:	2308      	movs	r3, #8
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_ADC2_Init+0x98>)
 80009de:	f000 ff6b 	bl	80018b8 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80009e8:	f000 fa8a 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000180 	.word	0x20000180
 80009f8:	40012100 	.word	0x40012100
 80009fc:	0f000001 	.word	0x0f000001

08000a00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_CRC_Init+0x20>)
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <MX_CRC_Init+0x24>)
 8000a08:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_CRC_Init+0x20>)
 8000a0c:	f001 fa83 	bl	8001f16 <HAL_CRC_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000a16:	f000 fa73 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001c8 	.word	0x200001c8
 8000a24:	40023000 	.word	0x40023000

08000a28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <MX_I2C2_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_I2C2_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a66:	f001 fcd3 	bl	8002410 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 fa46 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200001d0 	.word	0x200001d0
 8000a7c:	40005800 	.word	0x40005800
 8000a80:	00061a80 	.word	0x00061a80

08000a84 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_SDIO_SD_Init+0x38>)
 8000a8a:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <MX_SDIO_SD_Init+0x3c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_SDIO_SD_Init+0x38>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_SDIO_SD_Init+0x38>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_SDIO_SD_Init+0x38>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_SDIO_SD_Init+0x38>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <MX_SDIO_SD_Init+0x38>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <MX_SDIO_SD_Init+0x38>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	20000224 	.word	0x20000224
 8000ac0:	40012c00 	.word	0x40012c00

08000ac4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000aca:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <MX_SPI1_Init+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000af0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000af4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000b10:	220a      	movs	r2, #10
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	; (8000b28 <MX_SPI1_Init+0x64>)
 8000b16:	f004 fd2e 	bl	8005576 <HAL_SPI_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b20:	f000 f9ee 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200002a8 	.word	0x200002a8
 8000b2c:	40013000 	.word	0x40013000

08000b30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b36:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <MX_SPI2_Init+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	; (8000b94 <MX_SPI2_Init+0x64>)
 8000b82:	f004 fcf8 	bl	8005576 <HAL_SPI_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b8c:	f000 f9b8 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000300 	.word	0x20000300
 8000b98:	40003800 	.word	0x40003800

08000b9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <MX_SPI3_Init+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000bc8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bcc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000be8:	220a      	movs	r2, #10
 8000bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_SPI3_Init+0x64>)
 8000bee:	f004 fcc2 	bl	8005576 <HAL_SPI_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000bf8:	f000 f982 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000358 	.word	0x20000358
 8000c04:	40003c00 	.word	0x40003c00

08000c08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_TIM3_Init+0x94>)
 8000c26:	4a1e      	ldr	r2, [pc, #120]	; (8000ca0 <MX_TIM3_Init+0x98>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_TIM3_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_TIM3_Init+0x94>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_TIM3_Init+0x94>)
 8000c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_TIM3_Init+0x94>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_TIM3_Init+0x94>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c4a:	4814      	ldr	r0, [pc, #80]	; (8000c9c <MX_TIM3_Init+0x94>)
 8000c4c:	f005 f8c4 	bl	8005dd8 <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c56:	f000 f953 	bl	8000f00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <MX_TIM3_Init+0x94>)
 8000c68:	f005 f905 	bl	8005e76 <HAL_TIM_ConfigClockSource>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f000 f945 	bl	8000f00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c76:	2300      	movs	r3, #0
 8000c78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <MX_TIM3_Init+0x94>)
 8000c84:	f005 faf8 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000c8e:	f000 f937 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200003b0 	.word	0x200003b0
 8000ca0:	40000400 	.word	0x40000400

08000ca4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <MX_USART1_UART_Init+0x50>)
 8000cac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	f005 fb48 	bl	8006370 <HAL_UART_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ce6:	f000 f90b 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003f8 	.word	0x200003f8
 8000cf4:	40011000 	.word	0x40011000

08000cf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <MX_USART2_UART_Init+0x50>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d04:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_USART2_UART_Init+0x4c>)
 8000d30:	f005 fb1e 	bl	8006370 <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d3a:	f000 f8e1 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000043c 	.word	0x2000043c
 8000d48:	40004400 	.word	0x40004400

08000d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b5d      	ldr	r3, [pc, #372]	; (8000edc <MX_GPIO_Init+0x190>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a5c      	ldr	r2, [pc, #368]	; (8000edc <MX_GPIO_Init+0x190>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b5a      	ldr	r3, [pc, #360]	; (8000edc <MX_GPIO_Init+0x190>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b56      	ldr	r3, [pc, #344]	; (8000edc <MX_GPIO_Init+0x190>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a55      	ldr	r2, [pc, #340]	; (8000edc <MX_GPIO_Init+0x190>)
 8000d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b53      	ldr	r3, [pc, #332]	; (8000edc <MX_GPIO_Init+0x190>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b4f      	ldr	r3, [pc, #316]	; (8000edc <MX_GPIO_Init+0x190>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a4e      	ldr	r2, [pc, #312]	; (8000edc <MX_GPIO_Init+0x190>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <MX_GPIO_Init+0x190>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b48      	ldr	r3, [pc, #288]	; (8000edc <MX_GPIO_Init+0x190>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	4a47      	ldr	r2, [pc, #284]	; (8000edc <MX_GPIO_Init+0x190>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc6:	4b45      	ldr	r3, [pc, #276]	; (8000edc <MX_GPIO_Init+0x190>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	4b41      	ldr	r3, [pc, #260]	; (8000edc <MX_GPIO_Init+0x190>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a40      	ldr	r2, [pc, #256]	; (8000edc <MX_GPIO_Init+0x190>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <MX_GPIO_Init+0x190>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	603b      	str	r3, [r7, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CONT_TEST_EN_Pin|LED_INDICATOR_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f242 0102 	movw	r1, #8194	; 0x2002
 8000df4:	483a      	ldr	r0, [pc, #232]	; (8000ee0 <MX_GPIO_Init+0x194>)
 8000df6:	f001 faf1 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAIN_L_Pin|MAIN_H_Pin|DROGUE_H_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f241 1103 	movw	r1, #4355	; 0x1103
 8000e00:	4838      	ldr	r0, [pc, #224]	; (8000ee4 <MX_GPIO_Init+0x198>)
 8000e02:	f001 faeb 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAG_CS_Pin|DROGUE_L_Pin|BARO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 519a 	mov.w	r1, #4928	; 0x1340
 8000e0c:	4836      	ldr	r0, [pc, #216]	; (8000ee8 <MX_GPIO_Init+0x19c>)
 8000e0e:	f001 fae5 	bl	80023dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CONT_TEST_EN_Pin LED_INDICATOR_Pin */
  GPIO_InitStruct.Pin = CONT_TEST_EN_Pin|LED_INDICATOR_Pin;
 8000e12:	f242 0302 	movw	r3, #8194	; 0x2002
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	482d      	ldr	r0, [pc, #180]	; (8000ee0 <MX_GPIO_Init+0x194>)
 8000e2c:	f001 f922 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_L_Pin MAIN_H_Pin DROGUE_H_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = MAIN_L_Pin|MAIN_H_Pin|DROGUE_H_Pin|GYRO_CS_Pin;
 8000e30:	f241 1303 	movw	r3, #4355	; 0x1103
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <MX_GPIO_Init+0x198>)
 8000e4a:	f001 f913 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INT_Pin GYRO_INT_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin|GYRO_INT_Pin|MAG_INT_Pin;
 8000e4e:	2370      	movs	r3, #112	; 0x70
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <MX_GPIO_Init+0x194>)
 8000e64:	f001 f906 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_CS_Pin DROGUE_L_Pin BARO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = MAG_CS_Pin|DROGUE_L_Pin|BARO_CS_Pin|ACCEL_CS_Pin;
 8000e68:	f44f 539a 	mov.w	r3, #4928	; 0x1340
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4819      	ldr	r0, [pc, #100]	; (8000ee8 <MX_GPIO_Init+0x19c>)
 8000e82:	f001 f8f7 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8000e86:	2380      	movs	r3, #128	; 0x80
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 0314 	add.w	r3, r7, #20
 8000e96:	4619      	mov	r1, r3
 8000e98:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <MX_GPIO_Init+0x194>)
 8000e9a:	f001 f8eb 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_RF_Pin */
  GPIO_InitStruct.Pin = IO_RF_Pin;
 8000e9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ea8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_RF_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <MX_GPIO_Init+0x198>)
 8000eb6:	f001 f8dd 	bl	8002074 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ebe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <MX_GPIO_Init+0x19c>)
 8000ed0:	f001 f8d0 	bl	8002074 <HAL_GPIO_Init>

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020800 	.word	0x40020800
 8000ee4:	40020000 	.word	0x40020000
 8000ee8:	40020400 	.word	0x40020400

08000eec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ef4:	f00d f88a 	bl	800e00c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f00a fa14 	bl	800b326 <osDelay>
 8000efe:	e7fb      	b.n	8000ef8 <StartDefaultTask+0xc>

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <Error_Handler+0x8>
	...

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_MspInit+0x54>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <HAL_MspInit+0x54>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x54>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_MspInit+0x54>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <HAL_MspInit+0x54>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_MspInit+0x54>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	210f      	movs	r1, #15
 8000f4e:	f06f 0001 	mvn.w	r0, #1
 8000f52:	f000 ffaa 	bl	8001eaa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a24      	ldr	r2, [pc, #144]	; (8001014 <HAL_ADC_MspInit+0xb0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d141      	bne.n	800100a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <HAL_ADC_MspInit+0xb4>)
 8000f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <HAL_ADC_MspInit+0xb4>)
 8000f90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f94:	6453      	str	r3, [r2, #68]	; 0x44
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <HAL_ADC_MspInit+0xb4>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_ADC_MspInit+0xb4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <HAL_ADC_MspInit+0xb4>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_ADC_MspInit+0xb4>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_ADC_MspInit+0xb4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_ADC_MspInit+0xb4>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_ADC_MspInit+0xb4>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = BATT_VOLT_READ_Pin;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_VOLT_READ_GPIO_Port, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <HAL_ADC_MspInit+0xb8>)
 8000fee:	f001 f841 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DROGUE_CONT_Pin|MAIN_CONT_Pin;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4806      	ldr	r0, [pc, #24]	; (8001020 <HAL_ADC_MspInit+0xbc>)
 8001006:	f001 f835 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3728      	adds	r7, #40	; 0x28
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40012100 	.word	0x40012100
 8001018:	40023800 	.word	0x40023800
 800101c:	40020800 	.word	0x40020800
 8001020:	40020400 	.word	0x40020400

08001024 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_CRC_MspInit+0x3c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10d      	bne.n	8001052 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_CRC_MspInit+0x40>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_CRC_MspInit+0x40>)
 8001040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_CRC_MspInit+0x40>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023000 	.word	0x40023000
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a19      	ldr	r2, [pc, #100]	; (80010ec <HAL_I2C_MspInit+0x84>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d12c      	bne.n	80010e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ac:	2312      	movs	r3, #18
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010b8:	2304      	movs	r3, #4
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	480c      	ldr	r0, [pc, #48]	; (80010f4 <HAL_I2C_MspInit+0x8c>)
 80010c4:	f000 ffd6 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 80010d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010d6:	6413      	str	r3, [r2, #64]	; 0x40
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_I2C_MspInit+0x88>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010e4:	bf00      	nop
 80010e6:	3728      	adds	r7, #40	; 0x28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40005800 	.word	0x40005800
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020400 	.word	0x40020400

080010f8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a28      	ldr	r2, [pc, #160]	; (80011b8 <HAL_SD_MspInit+0xc0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d14a      	bne.n	80011b0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b27      	ldr	r3, [pc, #156]	; (80011bc <HAL_SD_MspInit+0xc4>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	4a26      	ldr	r2, [pc, #152]	; (80011bc <HAL_SD_MspInit+0xc4>)
 8001124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001128:	6453      	str	r3, [r2, #68]	; 0x44
 800112a:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_SD_MspInit+0xc4>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_SD_MspInit+0xc4>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <HAL_SD_MspInit+0xc4>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_SD_MspInit+0xc4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_SD_MspInit+0xc4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a18      	ldr	r2, [pc, #96]	; (80011bc <HAL_SD_MspInit+0xc4>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_SD_MspInit+0xc4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800116e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001172:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001180:	230c      	movs	r3, #12
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <HAL_SD_MspInit+0xc8>)
 800118c:	f000 ff72 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001190:	2304      	movs	r3, #4
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119c:	2303      	movs	r3, #3
 800119e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80011a0:	230c      	movs	r3, #12
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <HAL_SD_MspInit+0xcc>)
 80011ac:	f000 ff62 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	; 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020800 	.word	0x40020800
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b090      	sub	sp, #64	; 0x40
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a6a      	ldr	r2, [pc, #424]	; (8001390 <HAL_SPI_MspInit+0x1c8>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d12c      	bne.n	8001244 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ee:	4b69      	ldr	r3, [pc, #420]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a68      	ldr	r2, [pc, #416]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 80011f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b66      	ldr	r3, [pc, #408]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
 800120a:	4b62      	ldr	r3, [pc, #392]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a61      	ldr	r2, [pc, #388]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001222:	23f0      	movs	r3, #240	; 0xf0
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001232:	2305      	movs	r3, #5
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800123a:	4619      	mov	r1, r3
 800123c:	4856      	ldr	r0, [pc, #344]	; (8001398 <HAL_SPI_MspInit+0x1d0>)
 800123e:	f000 ff19 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001242:	e0a0      	b.n	8001386 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a54      	ldr	r2, [pc, #336]	; (800139c <HAL_SPI_MspInit+0x1d4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d14b      	bne.n	80012e6 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
 8001252:	4b50      	ldr	r3, [pc, #320]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	623b      	str	r3, [r7, #32]
 8001268:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a48      	ldr	r2, [pc, #288]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b46      	ldr	r3, [pc, #280]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	4b42      	ldr	r3, [pc, #264]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a41      	ldr	r2, [pc, #260]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012a2:	230c      	movs	r3, #12
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012b2:	2305      	movs	r3, #5
 80012b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012ba:	4619      	mov	r1, r3
 80012bc:	4838      	ldr	r0, [pc, #224]	; (80013a0 <HAL_SPI_MspInit+0x1d8>)
 80012be:	f000 fed9 	bl	8002074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c8:	2302      	movs	r3, #2
 80012ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d4:	2305      	movs	r3, #5
 80012d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012dc:	4619      	mov	r1, r3
 80012de:	4831      	ldr	r0, [pc, #196]	; (80013a4 <HAL_SPI_MspInit+0x1dc>)
 80012e0:	f000 fec8 	bl	8002074 <HAL_GPIO_Init>
}
 80012e4:	e04f      	b.n	8001386 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI3)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <HAL_SPI_MspInit+0x1e0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d14a      	bne.n	8001386 <HAL_SPI_MspInit+0x1be>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a26      	ldr	r2, [pc, #152]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 80012fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001314:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	; 0x30
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4a18      	ldr	r2, [pc, #96]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	6313      	str	r3, [r2, #48]	; 0x30
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_SPI_MspInit+0x1cc>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001356:	2306      	movs	r3, #6
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135e:	4619      	mov	r1, r3
 8001360:	480d      	ldr	r0, [pc, #52]	; (8001398 <HAL_SPI_MspInit+0x1d0>)
 8001362:	f000 fe87 	bl	8002074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001366:	2338      	movs	r3, #56	; 0x38
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001376:	2306      	movs	r3, #6
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137e:	4619      	mov	r1, r3
 8001380:	4808      	ldr	r0, [pc, #32]	; (80013a4 <HAL_SPI_MspInit+0x1dc>)
 8001382:	f000 fe77 	bl	8002074 <HAL_GPIO_Init>
}
 8001386:	bf00      	nop
 8001388:	3740      	adds	r7, #64	; 0x40
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40013000 	.word	0x40013000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40003800 	.word	0x40003800
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40003c00 	.word	0x40003c00

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <HAL_TIM_Base_MspInit+0x3c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d10d      	bne.n	80013da <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_TIM_Base_MspInit+0x40>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40000400 	.word	0x40000400
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a32      	ldr	r2, [pc, #200]	; (80014d8 <HAL_UART_MspInit+0xe8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12d      	bne.n	800146e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <HAL_UART_MspInit+0xec>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a30      	ldr	r2, [pc, #192]	; (80014dc <HAL_UART_MspInit+0xec>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <HAL_UART_MspInit+0xec>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <HAL_UART_MspInit+0xec>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a29      	ldr	r2, [pc, #164]	; (80014dc <HAL_UART_MspInit+0xec>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_UART_MspInit+0xec>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800144a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800145c:	2307      	movs	r3, #7
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	481e      	ldr	r0, [pc, #120]	; (80014e0 <HAL_UART_MspInit+0xf0>)
 8001468:	f000 fe04 	bl	8002074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800146c:	e030      	b.n	80014d0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <HAL_UART_MspInit+0xf4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d12b      	bne.n	80014d0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_UART_MspInit+0xec>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a16      	ldr	r2, [pc, #88]	; (80014dc <HAL_UART_MspInit+0xec>)
 8001482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_UART_MspInit+0xec>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_UART_MspInit+0xec>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a0f      	ldr	r2, [pc, #60]	; (80014dc <HAL_UART_MspInit+0xec>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <HAL_UART_MspInit+0xec>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b0:	230c      	movs	r3, #12
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c0:	2307      	movs	r3, #7
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_UART_MspInit+0xf0>)
 80014cc:	f000 fdd2 	bl	8002074 <HAL_GPIO_Init>
}
 80014d0:	bf00      	nop
 80014d2:	3730      	adds	r7, #48	; 0x30
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40011000 	.word	0x40011000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40004400 	.word	0x40004400

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <NMI_Handler+0x4>

080014ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <HardFault_Handler+0x4>

080014f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <MemManage_Handler+0x4>

080014fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler+0x4>

08001506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001518:	f000 f946 	bl	80017a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800151c:	f00b fd0e 	bl	800cf3c <xTaskGetSchedulerState>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d001      	beq.n	800152a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001526:	f00c faf7 	bl	800db18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <OTG_HS_IRQHandler+0x10>)
 8001536:	f001 f9ff 	bl	8002938 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200062d4 	.word	0x200062d4

08001544 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e00a      	b.n	800156c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001556:	f3af 8000 	nop.w
 800155a:	4601      	mov	r1, r0
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	60ba      	str	r2, [r7, #8]
 8001562:	b2ca      	uxtb	r2, r1
 8001564:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	429a      	cmp	r2, r3
 8001572:	dbf0      	blt.n	8001556 <_read+0x12>
	}

return len;
 8001574:	687b      	ldr	r3, [r7, #4]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	e009      	b.n	80015a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	3301      	adds	r3, #1
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	dbf1      	blt.n	8001590 <_write+0x12>
	}
	return len;
 80015ac:	687b      	ldr	r3, [r7, #4]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_close>:

int _close(int file)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
	return -1;
 80015be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015de:	605a      	str	r2, [r3, #4]
	return 0;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_isatty>:

int _isatty(int file)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
	return 1;
 80015f6:	2301      	movs	r3, #1
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <_sbrk+0x5c>)
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <_sbrk+0x60>)
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <_sbrk+0x64>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800163c:	4b11      	ldr	r3, [pc, #68]	; (8001684 <_sbrk+0x64>)
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <_sbrk+0x68>)
 8001640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d207      	bcs.n	8001660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001650:	f00d f9d2 	bl	800e9f8 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	220c      	movs	r2, #12
 8001658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
 800165e:	e009      	b.n	8001674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <_sbrk+0x64>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <_sbrk+0x64>)
 8001670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20020000 	.word	0x20020000
 8001680:	00000400 	.word	0x00000400
 8001684:	20000484 	.word	0x20000484
 8001688:	20006a10 	.word	0x20006a10

0800168c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <SystemInit+0x20>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a05      	ldr	r2, [pc, #20]	; (80016ac <SystemInit+0x20>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b6:	490e      	ldr	r1, [pc, #56]	; (80016f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b8:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0b      	ldr	r2, [pc, #44]	; (80016f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016cc:	4c0b      	ldr	r4, [pc, #44]	; (80016fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016da:	f7ff ffd7 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f00d f991 	bl	800ea04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7ff f871 	bl	80007c8 <main>
  bx  lr    
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80016f4:	0800f5dc 	.word	0x0800f5dc
  ldr r2, =_sbss
 80016f8:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80016fc:	20006a10 	.word	0x20006a10

08001700 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_Init+0x40>)
 800170e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001712:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_Init+0x40>)
 800171a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_Init+0x40>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 fbb1 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	200f      	movs	r0, #15
 8001734:	f000 f808 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001738:	f7ff fbe8 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023c00 	.word	0x40023c00

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_InitTick+0x54>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_InitTick+0x58>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 fbc9 	bl	8001efe <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 fb91 	bl	8001eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <HAL_InitTick+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_IncTick+0x20>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x24>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <HAL_IncTick+0x24>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000488 	.word	0x20000488

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HAL_GetTick+0x14>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000488 	.word	0x20000488

080017e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f0:	f7ff ffee 	bl	80017d0 <HAL_GetTick>
 80017f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d005      	beq.n	800180e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_Delay+0x44>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4413      	add	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800180e:	bf00      	nop
 8001810:	f7ff ffde 	bl	80017d0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	429a      	cmp	r2, r3
 800181e:	d8f7      	bhi.n	8001810 <HAL_Delay+0x28>
  {
  }
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000008 	.word	0x20000008

08001830 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e033      	b.n	80018ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fb88 	bl	8000f64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0310 	and.w	r3, r3, #16
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001876:	f023 0302 	bic.w	r3, r3, #2
 800187a:	f043 0202 	orr.w	r2, r3, #2
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f93a 	bl	8001afc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f023 0303 	bic.w	r3, r3, #3
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
 800189e:	e001      	b.n	80018a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1c>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e105      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x228>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b09      	cmp	r3, #9
 80018e2:	d925      	bls.n	8001930 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68d9      	ldr	r1, [r3, #12]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	3b1e      	subs	r3, #30
 80018fa:	2207      	movs	r2, #7
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43da      	mvns	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	400a      	ands	r2, r1
 8001908:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68d9      	ldr	r1, [r3, #12]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	4603      	mov	r3, r0
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4403      	add	r3, r0
 8001922:	3b1e      	subs	r3, #30
 8001924:	409a      	lsls	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	e022      	b.n	8001976 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6919      	ldr	r1, [r3, #16]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	2207      	movs	r2, #7
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	400a      	ands	r2, r1
 8001952:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6919      	ldr	r1, [r3, #16]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	4603      	mov	r3, r0
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4403      	add	r3, r0
 800196c:	409a      	lsls	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b06      	cmp	r3, #6
 800197c:	d824      	bhi.n	80019c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b05      	subs	r3, #5
 8001990:	221f      	movs	r2, #31
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43da      	mvns	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	400a      	ands	r2, r1
 800199e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4618      	mov	r0, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	3b05      	subs	r3, #5
 80019ba:	fa00 f203 	lsl.w	r2, r0, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
 80019c6:	e04c      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	d824      	bhi.n	8001a1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	3b23      	subs	r3, #35	; 0x23
 80019e2:	221f      	movs	r2, #31
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43da      	mvns	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	400a      	ands	r2, r1
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b23      	subs	r3, #35	; 0x23
 8001a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
 8001a18:	e023      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	3b41      	subs	r3, #65	; 0x41
 8001a2c:	221f      	movs	r2, #31
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	400a      	ands	r2, r1
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	4618      	mov	r0, r3
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	3b41      	subs	r3, #65	; 0x41
 8001a56:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_ADC_ConfigChannel+0x234>)
 8001a64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <HAL_ADC_ConfigChannel+0x238>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d109      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1cc>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b12      	cmp	r3, #18
 8001a76:	d105      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <HAL_ADC_ConfigChannel+0x238>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d123      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x21e>
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b10      	cmp	r3, #16
 8001a94:	d003      	beq.n	8001a9e <HAL_ADC_ConfigChannel+0x1e6>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b11      	cmp	r3, #17
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b10      	cmp	r3, #16
 8001ab0:	d111      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_ADC_ConfigChannel+0x23c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_ADC_ConfigChannel+0x240>)
 8001ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8001abc:	0c9a      	lsrs	r2, r3, #18
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f9      	bne.n	8001aca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40012300 	.word	0x40012300
 8001af0:	40012000 	.word	0x40012000
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b04:	4b79      	ldr	r3, [pc, #484]	; (8001cec <ADC_Init+0x1f0>)
 8001b06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6859      	ldr	r1, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	021a      	lsls	r2, r3, #8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6899      	ldr	r1, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <ADC_Init+0x1f4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d022      	beq.n	8001bda <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ba2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6899      	ldr	r1, [r3, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6899      	ldr	r1, [r3, #8]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	e00f      	b.n	8001bfa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001be8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f022 0202 	bic.w	r2, r2, #2
 8001c08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6899      	ldr	r1, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7e1b      	ldrb	r3, [r3, #24]
 8001c14:	005a      	lsls	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01b      	beq.n	8001c60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c52:	3b01      	subs	r3, #1
 8001c54:	035a      	lsls	r2, r3, #13
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	e007      	b.n	8001c70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	051a      	lsls	r2, r3, #20
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cb2:	025a      	lsls	r2, r3, #9
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6899      	ldr	r1, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	029a      	lsls	r2, r3, #10
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40012300 	.word	0x40012300
 8001cf0:	0f000001 	.word	0x0f000001

08001cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0a:	68ba      	ldr	r2, [r7, #8]
 8001d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d10:	4013      	ands	r3, r2
 8001d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x44>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <__NVIC_GetPriorityGrouping+0x18>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	f003 0307 	and.w	r3, r3, #7
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db0b      	blt.n	8001d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	4907      	ldr	r1, [pc, #28]	; (8001d90 <__NVIC_EnableIRQ+0x38>)
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2001      	movs	r0, #1
 8001d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	; (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e60:	d301      	bcc.n	8001e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00f      	b.n	8001e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e66:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <SysTick_Config+0x40>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6e:	210f      	movs	r1, #15
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f7ff ff8e 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <SysTick_Config+0x40>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <SysTick_Config+0x40>)
 8001e80:	2207      	movs	r2, #7
 8001e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	e000e010 	.word	0xe000e010

08001e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ff29 	bl	8001cf4 <__NVIC_SetPriorityGrouping>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
 8001eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff3e 	bl	8001d3c <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff8e 	bl	8001de8 <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5d 	bl	8001d94 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff31 	bl	8001d58 <__NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffa2 	bl	8001e50 <SysTick_Config>
 8001f0c:	4603      	mov	r3, r0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e00e      	b.n	8001f46 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	795b      	ldrb	r3, [r3, #5]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff f873 	bl	8001024 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_DMA_Start_IT+0x26>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e040      	b.n	8001ff6 <HAL_DMA_Start_IT+0xa8>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d12f      	bne.n	8001fe8 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f83a 	bl	8002016 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa6:	223f      	movs	r2, #63	; 0x3f
 8001fa8:	409a      	lsls	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0216 	orr.w	r2, r2, #22
 8001fbc:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d007      	beq.n	8001fd6 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0208 	orr.w	r2, r2, #8
 8001fd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f042 0201 	orr.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e005      	b.n	8001ff4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	60f8      	str	r0, [r7, #12]
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002032:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b40      	cmp	r3, #64	; 0x40
 8002042:	d108      	bne.n	8002056 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002054:	e007      	b.n	8002066 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	60da      	str	r2, [r3, #12]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	e16b      	b.n	8002368 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	f040 815a 	bne.w	8002362 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d130      	bne.n	8002128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 0201 	and.w	r2, r3, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b03      	cmp	r3, #3
 8002132:	d017      	beq.n	8002164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d123      	bne.n	80021b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	08da      	lsrs	r2, r3, #3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3208      	adds	r2, #8
 8002178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	220f      	movs	r2, #15
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	691a      	ldr	r2, [r3, #16]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	08da      	lsrs	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3208      	adds	r2, #8
 80021b2:	69b9      	ldr	r1, [r7, #24]
 80021b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80b4 	beq.w	8002362 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	4b60      	ldr	r3, [pc, #384]	; (8002380 <HAL_GPIO_Init+0x30c>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	4a5f      	ldr	r2, [pc, #380]	; (8002380 <HAL_GPIO_Init+0x30c>)
 8002204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002208:	6453      	str	r3, [r2, #68]	; 0x44
 800220a:	4b5d      	ldr	r3, [pc, #372]	; (8002380 <HAL_GPIO_Init+0x30c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <HAL_GPIO_Init+0x310>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_GPIO_Init+0x314>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02b      	beq.n	800229a <HAL_GPIO_Init+0x226>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a51      	ldr	r2, [pc, #324]	; (800238c <HAL_GPIO_Init+0x318>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d025      	beq.n	8002296 <HAL_GPIO_Init+0x222>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a50      	ldr	r2, [pc, #320]	; (8002390 <HAL_GPIO_Init+0x31c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01f      	beq.n	8002292 <HAL_GPIO_Init+0x21e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4f      	ldr	r2, [pc, #316]	; (8002394 <HAL_GPIO_Init+0x320>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d019      	beq.n	800228e <HAL_GPIO_Init+0x21a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4e      	ldr	r2, [pc, #312]	; (8002398 <HAL_GPIO_Init+0x324>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0x216>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4d      	ldr	r2, [pc, #308]	; (800239c <HAL_GPIO_Init+0x328>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00d      	beq.n	8002286 <HAL_GPIO_Init+0x212>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4c      	ldr	r2, [pc, #304]	; (80023a0 <HAL_GPIO_Init+0x32c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d007      	beq.n	8002282 <HAL_GPIO_Init+0x20e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4b      	ldr	r2, [pc, #300]	; (80023a4 <HAL_GPIO_Init+0x330>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d101      	bne.n	800227e <HAL_GPIO_Init+0x20a>
 800227a:	2307      	movs	r3, #7
 800227c:	e00e      	b.n	800229c <HAL_GPIO_Init+0x228>
 800227e:	2308      	movs	r3, #8
 8002280:	e00c      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002282:	2306      	movs	r3, #6
 8002284:	e00a      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002286:	2305      	movs	r3, #5
 8002288:	e008      	b.n	800229c <HAL_GPIO_Init+0x228>
 800228a:	2304      	movs	r3, #4
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x228>
 800228e:	2303      	movs	r3, #3
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x228>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x228>
 800229a:	2300      	movs	r3, #0
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ac:	4935      	ldr	r1, [pc, #212]	; (8002384 <HAL_GPIO_Init+0x310>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_GPIO_Init+0x334>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022de:	4a32      	ldr	r2, [pc, #200]	; (80023a8 <HAL_GPIO_Init+0x334>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022e4:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <HAL_GPIO_Init+0x334>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002308:	4a27      	ldr	r2, [pc, #156]	; (80023a8 <HAL_GPIO_Init+0x334>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_GPIO_Init+0x334>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002332:	4a1d      	ldr	r2, [pc, #116]	; (80023a8 <HAL_GPIO_Init+0x334>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <HAL_GPIO_Init+0x334>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235c:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_GPIO_Init+0x334>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	f67f ae90 	bls.w	8002090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021000 	.word	0x40021000
 800239c:	40021400 	.word	0x40021400
 80023a0:	40021800 	.word	0x40021800
 80023a4:	40021c00 	.word	0x40021c00
 80023a8:	40013c00 	.word	0x40013c00

080023ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	887b      	ldrh	r3, [r7, #2]
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
 80023c8:	e001      	b.n	80023ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
 80023e8:	4613      	mov	r3, r2
 80023ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ec:	787b      	ldrb	r3, [r7, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023f8:	e003      	b.n	8002402 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	619a      	str	r2, [r3, #24]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e12b      	b.n	800267a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fe16 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	; 0x24
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002474:	f001 ffbe 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	4a81      	ldr	r2, [pc, #516]	; (8002684 <HAL_I2C_Init+0x274>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d807      	bhi.n	8002494 <HAL_I2C_Init+0x84>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a80      	ldr	r2, [pc, #512]	; (8002688 <HAL_I2C_Init+0x278>)
 8002488:	4293      	cmp	r3, r2
 800248a:	bf94      	ite	ls
 800248c:	2301      	movls	r3, #1
 800248e:	2300      	movhi	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e006      	b.n	80024a2 <HAL_I2C_Init+0x92>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4a7d      	ldr	r2, [pc, #500]	; (800268c <HAL_I2C_Init+0x27c>)
 8002498:	4293      	cmp	r3, r2
 800249a:	bf94      	ite	ls
 800249c:	2301      	movls	r3, #1
 800249e:	2300      	movhi	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0e7      	b.n	800267a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	4a78      	ldr	r2, [pc, #480]	; (8002690 <HAL_I2C_Init+0x280>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	0c9b      	lsrs	r3, r3, #18
 80024b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a6a      	ldr	r2, [pc, #424]	; (8002684 <HAL_I2C_Init+0x274>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d802      	bhi.n	80024e4 <HAL_I2C_Init+0xd4>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	3301      	adds	r3, #1
 80024e2:	e009      	b.n	80024f8 <HAL_I2C_Init+0xe8>
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024ea:	fb02 f303 	mul.w	r3, r2, r3
 80024ee:	4a69      	ldr	r2, [pc, #420]	; (8002694 <HAL_I2C_Init+0x284>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	3301      	adds	r3, #1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800250a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	495c      	ldr	r1, [pc, #368]	; (8002684 <HAL_I2C_Init+0x274>)
 8002514:	428b      	cmp	r3, r1
 8002516:	d819      	bhi.n	800254c <HAL_I2C_Init+0x13c>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e59      	subs	r1, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fbb1 f3f3 	udiv	r3, r1, r3
 8002526:	1c59      	adds	r1, r3, #1
 8002528:	f640 73fc 	movw	r3, #4092	; 0xffc
 800252c:	400b      	ands	r3, r1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_I2C_Init+0x138>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1e59      	subs	r1, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002540:	3301      	adds	r3, #1
 8002542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002546:	e051      	b.n	80025ec <HAL_I2C_Init+0x1dc>
 8002548:	2304      	movs	r3, #4
 800254a:	e04f      	b.n	80025ec <HAL_I2C_Init+0x1dc>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d111      	bne.n	8002578 <HAL_I2C_Init+0x168>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e58      	subs	r0, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	e012      	b.n	800259e <HAL_I2C_Init+0x18e>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e58      	subs	r0, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	0099      	lsls	r1, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	fbb0 f3f3 	udiv	r3, r0, r3
 800258e:	3301      	adds	r3, #1
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Init+0x196>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e022      	b.n	80025ec <HAL_I2C_Init+0x1dc>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10e      	bne.n	80025cc <HAL_I2C_Init+0x1bc>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1e58      	subs	r0, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6859      	ldr	r1, [r3, #4]
 80025b6:	460b      	mov	r3, r1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	440b      	add	r3, r1
 80025bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ca:	e00f      	b.n	80025ec <HAL_I2C_Init+0x1dc>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	1e58      	subs	r0, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6859      	ldr	r1, [r3, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	0099      	lsls	r1, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	6809      	ldr	r1, [r1, #0]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69da      	ldr	r2, [r3, #28]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800261a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6911      	ldr	r1, [r2, #16]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68d2      	ldr	r2, [r2, #12]
 8002626:	4311      	orrs	r1, r2
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	430b      	orrs	r3, r1
 800262e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2220      	movs	r2, #32
 8002666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	000186a0 	.word	0x000186a0
 8002688:	001e847f 	.word	0x001e847f
 800268c:	003d08ff 	.word	0x003d08ff
 8002690:	431bde83 	.word	0x431bde83
 8002694:	10624dd3 	.word	0x10624dd3

08002698 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269a:	b08f      	sub	sp, #60	; 0x3c
 800269c:	af0a      	add	r7, sp, #40	; 0x28
 800269e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e10f      	b.n	80028ca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f00b fe81 	bl	800e3cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2203      	movs	r2, #3
 80026ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d102      	bne.n	80026e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f004 ff7a 	bl	80075e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	687e      	ldr	r6, [r7, #4]
 80026f6:	466d      	mov	r5, sp
 80026f8:	f106 0410 	add.w	r4, r6, #16
 80026fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002704:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002708:	e885 0003 	stmia.w	r5, {r0, r1}
 800270c:	1d33      	adds	r3, r6, #4
 800270e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002710:	6838      	ldr	r0, [r7, #0]
 8002712:	f004 fe51 	bl	80073b8 <USB_CoreInit>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d0      	b.n	80028ca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f004 ff68 	bl	8007604 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e04a      	b.n	80027d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800273a:	7bfa      	ldrb	r2, [r7, #15]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	333d      	adds	r3, #61	; 0x3d
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	333c      	adds	r3, #60	; 0x3c
 800275e:	7bfa      	ldrb	r2, [r7, #15]
 8002760:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	b298      	uxth	r0, r3
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	3344      	adds	r3, #68	; 0x44
 8002776:	4602      	mov	r2, r0
 8002778:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800277a:	7bfa      	ldrb	r2, [r7, #15]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	3340      	adds	r3, #64	; 0x40
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3348      	adds	r3, #72	; 0x48
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	334c      	adds	r3, #76	; 0x4c
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	6879      	ldr	r1, [r7, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	440b      	add	r3, r1
 80027c4:	3354      	adds	r3, #84	; 0x54
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	3301      	adds	r3, #1
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d3af      	bcc.n	800273a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027da:	2300      	movs	r3, #0
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e044      	b.n	800286a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002822:	7bfa      	ldrb	r2, [r7, #15]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002838:	7bfa      	ldrb	r2, [r7, #15]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800284e:	7bfa      	ldrb	r2, [r7, #15]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	3301      	adds	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	429a      	cmp	r2, r3
 8002872:	d3b5      	bcc.n	80027e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	603b      	str	r3, [r7, #0]
 800287a:	687e      	ldr	r6, [r7, #4]
 800287c:	466d      	mov	r5, sp
 800287e:	f106 0410 	add.w	r4, r6, #16
 8002882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800288a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800288e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002892:	1d33      	adds	r3, r6, #4
 8002894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002896:	6838      	ldr	r0, [r7, #0]
 8002898:	f004 ff00 	bl	800769c <USB_DevInit>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00d      	b.n	80028ca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f006 f84f 	bl	8008966 <USB_DevDisconnect>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_PCD_Start+0x1c>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e020      	b.n	8002930 <HAL_PCD_Start+0x5e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d109      	bne.n	8002912 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002902:	2b01      	cmp	r3, #1
 8002904:	d005      	beq.n	8002912 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fe52 	bl	80075c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f005 ffff 	bl	8008924 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b08d      	sub	sp, #52	; 0x34
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f006 f8bd 	bl	8008ace <USB_GetMode>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	f040 848a 	bne.w	8003270 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f006 f821 	bl	80089a8 <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8480 	beq.w	800326e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f006 f80e 	bl	80089a8 <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d107      	bne.n	80029a6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f002 0202 	and.w	r2, r2, #2
 80029a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f005 fffc 	bl	80089a8 <USB_ReadInterrupts>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d161      	bne.n	8002a7e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699a      	ldr	r2, [r3, #24]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0210 	bic.w	r2, r2, #16
 80029c8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f003 020f 	and.w	r2, r3, #15
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	4413      	add	r3, r2
 80029e6:	3304      	adds	r3, #4
 80029e8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	0c5b      	lsrs	r3, r3, #17
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d124      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d035      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	461a      	mov	r2, r3
 8002a14:	6a38      	ldr	r0, [r7, #32]
 8002a16:	f005 fe33 	bl	8008680 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a26:	441a      	add	r2, r3
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	6a1a      	ldr	r2, [r3, #32]
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a38:	441a      	add	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	621a      	str	r2, [r3, #32]
 8002a3e:	e016      	b.n	8002a6e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	0c5b      	lsrs	r3, r3, #17
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	2b06      	cmp	r3, #6
 8002a4a:	d110      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a52:	2208      	movs	r2, #8
 8002a54:	4619      	mov	r1, r3
 8002a56:	6a38      	ldr	r0, [r7, #32]
 8002a58:	f005 fe12 	bl	8008680 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	6a1a      	ldr	r2, [r3, #32]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	091b      	lsrs	r3, r3, #4
 8002a64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a68:	441a      	add	r2, r3
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699a      	ldr	r2, [r3, #24]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0210 	orr.w	r2, r2, #16
 8002a7c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f005 ff90 	bl	80089a8 <USB_ReadInterrupts>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a92:	f040 80a7 	bne.w	8002be4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f005 ff95 	bl	80089ce <USB_ReadDevAllOutEpInterrupt>
 8002aa4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002aa6:	e099      	b.n	8002bdc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 808e 	beq.w	8002bd0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f005 ffb9 	bl	8008a36 <USB_ReadDevOutEPInterrupt>
 8002ac4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00c      	beq.n	8002aea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002adc:	461a      	mov	r2, r3
 8002ade:	2301      	movs	r3, #1
 8002ae0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fec3 	bl	8003870 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00c      	beq.n	8002b0e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	015a      	lsls	r2, r3, #5
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	4413      	add	r3, r2
 8002afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b00:	461a      	mov	r2, r3
 8002b02:	2308      	movs	r3, #8
 8002b04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 ff99 	bl	8003a40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b24:	461a      	mov	r2, r3
 8002b26:	2310      	movs	r3, #16
 8002b28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d030      	beq.n	8002b96 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3c:	2b80      	cmp	r3, #128	; 0x80
 8002b3e:	d109      	bne.n	8002b54 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b52:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	3304      	adds	r3, #4
 8002b68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	78db      	ldrb	r3, [r3, #3]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d108      	bne.n	8002b84 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f00b fd26 	bl	800e5d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	2302      	movs	r3, #2
 8002b94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bac:	461a      	mov	r2, r3
 8002bae:	2320      	movs	r3, #32
 8002bb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d009      	beq.n	8002bd0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f47f af62 	bne.w	8002aa8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f005 fedd 	bl	80089a8 <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bf8:	f040 80db 	bne.w	8002db2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f005 fefe 	bl	8008a02 <USB_ReadDevAllInEpInterrupt>
 8002c06:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c0c:	e0cd      	b.n	8002daa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80c2 	beq.w	8002d9e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f005 ff24 	bl	8008a72 <USB_ReadDevInEPInterrupt>
 8002c2a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d057      	beq.n	8002ce6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69f9      	ldr	r1, [r7, #28]
 8002c52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c56:	4013      	ands	r3, r2
 8002c58:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c66:	461a      	mov	r2, r3
 8002c68:	2301      	movs	r3, #1
 8002c6a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d132      	bne.n	8002cda <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	334c      	adds	r3, #76	; 0x4c
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4403      	add	r3, r0
 8002c94:	3348      	adds	r3, #72	; 0x48
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4419      	add	r1, r3
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4403      	add	r3, r0
 8002ca8:	334c      	adds	r3, #76	; 0x4c
 8002caa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d113      	bne.n	8002cda <HAL_PCD_IRQHandler+0x3a2>
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3354      	adds	r3, #84	; 0x54
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d108      	bne.n	8002cda <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	f005 ff2b 	bl	8008b30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	4619      	mov	r1, r3
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f00b fbf0 	bl	800e4c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2308      	movs	r3, #8
 8002d00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2310      	movs	r3, #16
 8002d1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d34:	461a      	mov	r2, r3
 8002d36:	2340      	movs	r3, #64	; 0x40
 8002d38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d023      	beq.n	8002d8c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d46:	6a38      	ldr	r0, [r7, #32]
 8002d48:	f004 fe0c 	bl	8007964 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	4613      	mov	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	3338      	adds	r3, #56	; 0x38
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	78db      	ldrb	r3, [r3, #3]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d108      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f00b fc3d 	bl	800e5f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d86:	461a      	mov	r2, r3
 8002d88:	2302      	movs	r3, #2
 8002d8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fcdb 	bl	8003754 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	3301      	adds	r3, #1
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	085b      	lsrs	r3, r3, #1
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f af2e 	bne.w	8002c0e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f005 fdf6 	bl	80089a8 <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc6:	d122      	bne.n	8002e0e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	69fa      	ldr	r2, [r7, #28]
 8002dd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d108      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002dee:	2100      	movs	r1, #0
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 fec3 	bl	8003b7c <HAL_PCDEx_LPM_Callback>
 8002df6:	e002      	b.n	8002dfe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f00b fbdb 	bl	800e5b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f005 fdc8 	bl	80089a8 <USB_ReadInterrupts>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e22:	d112      	bne.n	8002e4a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d102      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f00b fb97 	bl	800e568 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e48:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f005 fdaa 	bl	80089a8 <USB_ReadInterrupts>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5e:	f040 80b7 	bne.w	8002fd0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	69fa      	ldr	r2, [r7, #28]
 8002e6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f004 fd71 	bl	8007964 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e82:	2300      	movs	r3, #0
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e86:	e046      	b.n	8002f16 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e94:	461a      	mov	r2, r3
 8002e96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e9a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eac:	0151      	lsls	r1, r2, #5
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002eb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002eba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ece:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	0151      	lsls	r1, r2, #5
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	440a      	add	r2, r1
 8002ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002eee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	015a      	lsls	r2, r3, #5
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f00:	0151      	lsls	r1, r2, #5
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	440a      	add	r2, r1
 8002f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f0e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	3301      	adds	r3, #1
 8002f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d3b3      	bcc.n	8002e88 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002f32:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d016      	beq.n	8002f6a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f4c:	f043 030b 	orr.w	r3, r3, #11
 8002f50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	69fa      	ldr	r2, [r7, #28]
 8002f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f62:	f043 030b 	orr.w	r3, r3, #11
 8002f66:	6453      	str	r3, [r2, #68]	; 0x44
 8002f68:	e015      	b.n	8002f96 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f7c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f80:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f90:	f043 030b 	orr.w	r3, r3, #11
 8002f94:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fa4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002fa8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f005 fdb8 	bl	8008b30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f005 fce7 	bl	80089a8 <USB_ReadInterrupts>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe4:	d124      	bne.n	8003030 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f005 fd7d 	bl	8008aea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f004 fd32 	bl	8007a5e <USB_GetDevSpeed>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681c      	ldr	r4, [r3, #0]
 8003006:	f001 f9e9 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 800300a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	4620      	mov	r0, r4
 8003016:	f004 fa31 	bl	800747c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f00b fa7b 	bl	800e516 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800302e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f005 fcb7 	bl	80089a8 <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b08      	cmp	r3, #8
 8003042:	d10a      	bne.n	800305a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f00b fa58 	bl	800e4fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f002 0208 	and.w	r2, r2, #8
 8003058:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f005 fca2 	bl	80089a8 <USB_ReadInterrupts>
 8003064:	4603      	mov	r3, r0
 8003066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306a:	2b80      	cmp	r3, #128	; 0x80
 800306c:	d122      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800307a:	2301      	movs	r3, #1
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
 800307e:	e014      	b.n	80030aa <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d105      	bne.n	80030a4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fb27 	bl	80036f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	3301      	adds	r3, #1
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d3e5      	bcc.n	8003080 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f005 fc75 	bl	80089a8 <USB_ReadInterrupts>
 80030be:	4603      	mov	r3, r0
 80030c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c8:	d13b      	bne.n	8003142 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ca:	2301      	movs	r3, #1
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
 80030ce:	e02b      	b.n	8003128 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3340      	adds	r3, #64	; 0x40
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d115      	bne.n	8003122 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80030f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	da12      	bge.n	8003122 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	333f      	adds	r3, #63	; 0x3f
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003118:	b2db      	uxtb	r3, r3
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fae8 	bl	80036f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	3301      	adds	r3, #1
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800312e:	429a      	cmp	r2, r3
 8003130:	d3ce      	bcc.n	80030d0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003140:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f005 fc2e 	bl	80089a8 <USB_ReadInterrupts>
 800314c:	4603      	mov	r3, r0
 800314e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003152:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003156:	d155      	bne.n	8003204 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003158:	2301      	movs	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
 800315c:	e045      	b.n	80031ea <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d12e      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003186:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003188:	2b00      	cmp	r3, #0
 800318a:	da2b      	bge.n	80031e4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003198:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800319c:	429a      	cmp	r2, r3
 800319e:	d121      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e0:	6053      	str	r3, [r2, #4]
            break;
 80031e2:	e007      	b.n	80031f4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	3301      	adds	r3, #1
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d3b4      	bcc.n	800315e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695a      	ldr	r2, [r3, #20]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003202:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f005 fbcd 	bl	80089a8 <USB_ReadInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003218:	d10a      	bne.n	8003230 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f00b f9fc 	bl	800e618 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800322e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f005 fbb7 	bl	80089a8 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b04      	cmp	r3, #4
 8003242:	d115      	bne.n	8003270 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f00b f9ec 	bl	800e634 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	430a      	orrs	r2, r1
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	e000      	b.n	8003270 <HAL_PCD_IRQHandler+0x938>
      return;
 800326e:	bf00      	nop
    }
  }
}
 8003270:	3734      	adds	r7, #52	; 0x34
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}

08003276 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_PCD_SetAddress+0x1a>
 800328c:	2302      	movs	r3, #2
 800328e:	e013      	b.n	80032b8 <HAL_PCD_SetAddress+0x42>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f005 fb15 	bl	80088d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	4608      	mov	r0, r1
 80032ca:	4611      	mov	r1, r2
 80032cc:	461a      	mov	r2, r3
 80032ce:	4603      	mov	r3, r0
 80032d0:	70fb      	strb	r3, [r7, #3]
 80032d2:	460b      	mov	r3, r1
 80032d4:	803b      	strh	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	da0f      	bge.n	8003306 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	3338      	adds	r3, #56	; 0x38
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	3304      	adds	r3, #4
 80032fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2201      	movs	r2, #1
 8003302:	705a      	strb	r2, [r3, #1]
 8003304:	e00f      	b.n	8003326 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	f003 030f 	and.w	r3, r3, #15
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003332:	883a      	ldrh	r2, [r7, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	78ba      	ldrb	r2, [r7, #2]
 800333c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	785b      	ldrb	r3, [r3, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003350:	78bb      	ldrb	r3, [r7, #2]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d102      	bne.n	800335c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_PCD_EP_Open+0xaa>
 8003366:	2302      	movs	r3, #2
 8003368:	e00e      	b.n	8003388 <HAL_PCD_EP_Open+0xc8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	4618      	mov	r0, r3
 800337a:	f004 fb95 	bl	8007aa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003386:	7afb      	ldrb	r3, [r7, #11]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800339c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	da0f      	bge.n	80033c4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	3338      	adds	r3, #56	; 0x38
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	3304      	adds	r3, #4
 80033ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	705a      	strb	r2, [r3, #1]
 80033c2:	e00f      	b.n	80033e4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	3304      	adds	r3, #4
 80033dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_PCD_EP_Close+0x6e>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e00e      	b.n	800341c <HAL_PCD_EP_Close+0x8c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	4618      	mov	r0, r3
 800340e:	f004 fbd3 	bl	8007bb8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b086      	sub	sp, #24
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	603b      	str	r3, [r7, #0]
 8003430:	460b      	mov	r3, r1
 8003432:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003434:	7afb      	ldrb	r3, [r7, #11]
 8003436:	f003 020f 	and.w	r2, r3, #15
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	3304      	adds	r3, #4
 800344c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2200      	movs	r2, #0
 8003464:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003466:	7afb      	ldrb	r3, [r7, #11]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	b2da      	uxtb	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003480:	7afb      	ldrb	r3, [r7, #11]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6818      	ldr	r0, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	6979      	ldr	r1, [r7, #20]
 8003498:	f004 feb2 	bl	8008200 <USB_EP0StartXfer>
 800349c:	e008      	b.n	80034b0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	6979      	ldr	r1, [r7, #20]
 80034ac:	f004 fc60 	bl	8007d70 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80034c6:	78fb      	ldrb	r3, [r7, #3]
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80034dc:	681b      	ldr	r3, [r3, #0]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	460b      	mov	r3, r1
 80034f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034fa:	7afb      	ldrb	r3, [r7, #11]
 80034fc:	f003 020f 	and.w	r2, r3, #15
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	3338      	adds	r3, #56	; 0x38
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4413      	add	r3, r2
 800350e:	3304      	adds	r3, #4
 8003510:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2201      	movs	r2, #1
 8003528:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800352a:	7afb      	ldrb	r3, [r7, #11]
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	b2da      	uxtb	r2, r3
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d102      	bne.n	8003544 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003544:	7afb      	ldrb	r3, [r7, #11]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	6979      	ldr	r1, [r7, #20]
 800355c:	f004 fe50 	bl	8008200 <USB_EP0StartXfer>
 8003560:	e008      	b.n	8003574 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	f004 fbfe 	bl	8007d70 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b084      	sub	sp, #16
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	460b      	mov	r3, r1
 8003588:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 020f 	and.w	r2, r3, #15
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d901      	bls.n	800359c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e050      	b.n	800363e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800359c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	da0f      	bge.n	80035c4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	f003 020f 	and.w	r2, r3, #15
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	3338      	adds	r3, #56	; 0x38
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	705a      	strb	r2, [r3, #1]
 80035c2:	e00d      	b.n	80035e0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	4613      	mov	r3, r2
 80035c8:	00db      	lsls	r3, r3, #3
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	3304      	adds	r3, #4
 80035d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_PCD_EP_SetStall+0x82>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e01e      	b.n	800363e <HAL_PCD_EP_SetStall+0xc0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68f9      	ldr	r1, [r7, #12]
 800360e:	4618      	mov	r0, r3
 8003610:	f005 f88e 	bl	8008730 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	b2d9      	uxtb	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800362e:	461a      	mov	r2, r3
 8003630:	f005 fa7e 	bl	8008b30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	f003 020f 	and.w	r2, r3, #15
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	d901      	bls.n	8003664 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e042      	b.n	80036ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003668:	2b00      	cmp	r3, #0
 800366a:	da0f      	bge.n	800368c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	f003 020f 	and.w	r2, r3, #15
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	3338      	adds	r3, #56	; 0x38
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4413      	add	r3, r2
 8003680:	3304      	adds	r3, #4
 8003682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	705a      	strb	r2, [r3, #1]
 800368a:	e00f      	b.n	80036ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	f003 020f 	and.w	r2, r3, #15
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4413      	add	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	3304      	adds	r3, #4
 80036a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_PCD_EP_ClrStall+0x86>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e00e      	b.n	80036ea <HAL_PCD_EP_ClrStall+0xa4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 f896 	bl	800880c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003702:	2b00      	cmp	r3, #0
 8003704:	da0c      	bge.n	8003720 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	f003 020f 	and.w	r2, r3, #15
 800370c:	4613      	mov	r3, r2
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	3338      	adds	r3, #56	; 0x38
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	3304      	adds	r3, #4
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	e00c      	b.n	800373a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	f003 020f 	and.w	r2, r3, #15
 8003726:	4613      	mov	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	3304      	adds	r3, #4
 8003738:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68f9      	ldr	r1, [r7, #12]
 8003740:	4618      	mov	r0, r3
 8003742:	f004 feb5 	bl	80084b0 <USB_EPStopXfer>
 8003746:	4603      	mov	r3, r0
 8003748:	72fb      	strb	r3, [r7, #11]

  return ret;
 800374a:	7afb      	ldrb	r3, [r7, #11]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08a      	sub	sp, #40	; 0x28
 8003758:	af02      	add	r7, sp, #8
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	3338      	adds	r3, #56	; 0x38
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	429a      	cmp	r2, r3
 8003786:	d901      	bls.n	800378c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e06c      	b.n	8003866 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	699a      	ldr	r2, [r3, #24]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d902      	bls.n	80037a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	3303      	adds	r3, #3
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b0:	e02b      	b.n	800380a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d902      	bls.n	80037ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3303      	adds	r3, #3
 80037d2:	089b      	lsrs	r3, r3, #2
 80037d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6919      	ldr	r1, [r3, #16]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	4603      	mov	r3, r0
 80037ec:	6978      	ldr	r0, [r7, #20]
 80037ee:	f004 ff09 	bl	8008604 <USB_WritePacket>

    ep->xfer_buff  += len;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	441a      	add	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	441a      	add	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	b29b      	uxth	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	429a      	cmp	r2, r3
 800381e:	d809      	bhi.n	8003834 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003828:	429a      	cmp	r2, r3
 800382a:	d203      	bcs.n	8003834 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1be      	bne.n	80037b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	699a      	ldr	r2, [r3, #24]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	429a      	cmp	r2, r3
 800383e:	d811      	bhi.n	8003864 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	2201      	movs	r2, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	43db      	mvns	r3, r3
 800385a:	6939      	ldr	r1, [r7, #16]
 800385c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003860:	4013      	ands	r3, r2
 8003862:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	333c      	adds	r3, #60	; 0x3c
 8003888:	3304      	adds	r3, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d17b      	bne.n	800399e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d015      	beq.n	80038dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4a61      	ldr	r2, [pc, #388]	; (8003a38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	f240 80b9 	bls.w	8003a2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80b3 	beq.w	8003a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d2:	461a      	mov	r2, r3
 80038d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d8:	6093      	str	r3, [r2, #8]
 80038da:	e0a7      	b.n	8003a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d009      	beq.n	80038fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f2:	461a      	mov	r2, r3
 80038f4:	2320      	movs	r3, #32
 80038f6:	6093      	str	r3, [r2, #8]
 80038f8:	e098      	b.n	8003a2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	f040 8093 	bne.w	8003a2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4a4b      	ldr	r2, [pc, #300]	; (8003a38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d90f      	bls.n	800392e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003924:	461a      	mov	r2, r3
 8003926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800392a:	6093      	str	r3, [r2, #8]
 800392c:	e07e      	b.n	8003a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	4613      	mov	r3, r2
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4413      	add	r3, r2
 8003940:	3304      	adds	r3, #4
 8003942:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	0159      	lsls	r1, r3, #5
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	440b      	add	r3, r1
 8003950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d114      	bne.n	8003990 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003978:	461a      	mov	r2, r3
 800397a:	2101      	movs	r1, #1
 800397c:	f005 f8d8 	bl	8008b30 <USB_EP0_OutStart>
 8003980:	e006      	b.n	8003990 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	441a      	add	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	b2db      	uxtb	r3, r3
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f00a fd7a 	bl	800e490 <HAL_PCD_DataOutStageCallback>
 800399c:	e046      	b.n	8003a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d124      	bne.n	80039f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c2:	6093      	str	r3, [r2, #8]
 80039c4:	e032      	b.n	8003a2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	461a      	mov	r2, r3
 80039de:	2320      	movs	r3, #32
 80039e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f00a fd51 	bl	800e490 <HAL_PCD_DataOutStageCallback>
 80039ee:	e01d      	b.n	8003a2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d114      	bne.n	8003a20 <PCD_EP_OutXfrComplete_int+0x1b0>
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	f005 f888 	bl	8008b30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f00a fd32 	bl	800e490 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	4f54300a 	.word	0x4f54300a
 8003a3c:	4f54310a 	.word	0x4f54310a

08003a40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	333c      	adds	r3, #60	; 0x3c
 8003a58:	3304      	adds	r3, #4
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d90e      	bls.n	8003a94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d009      	beq.n	8003a94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f00a fce9 	bl	800e46c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d90c      	bls.n	8003abc <PCD_EP_OutSetupPacket_int+0x7c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d108      	bne.n	8003abc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	f005 f83a 	bl	8008b30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	4f54300a 	.word	0x4f54300a

08003acc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d107      	bne.n	8003afa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003aea:	883b      	ldrh	r3, [r7, #0]
 8003aec:	0419      	lsls	r1, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	629a      	str	r2, [r3, #40]	; 0x28
 8003af8:	e028      	b.n	8003b4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	0c1b      	lsrs	r3, r3, #16
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	4413      	add	r3, r2
 8003b06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
 8003b0c:	e00d      	b.n	8003b2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	3340      	adds	r3, #64	; 0x40
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	4413      	add	r3, r2
 8003b22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	3301      	adds	r3, #1
 8003b28:	73fb      	strb	r3, [r7, #15]
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d3ec      	bcc.n	8003b0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b34:	883b      	ldrh	r3, [r7, #0]
 8003b36:	0418      	lsls	r0, r3, #16
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6819      	ldr	r1, [r3, #0]
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	4302      	orrs	r2, r0
 8003b44:	3340      	adds	r3, #64	; 0x40
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	460b      	mov	r3, r1
 8003b64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	887a      	ldrh	r2, [r7, #2]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	460b      	mov	r3, r1
 8003b86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e267      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bb2:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d00c      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d112      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bca:	4b82      	ldr	r3, [pc, #520]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b7e      	ldr	r3, [pc, #504]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e242      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a75      	ldr	r2, [pc, #468]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b70      	ldr	r3, [pc, #448]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6f      	ldr	r2, [pc, #444]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6c      	ldr	r2, [pc, #432]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b69      	ldr	r3, [pc, #420]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a68      	ldr	r2, [pc, #416]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b66      	ldr	r3, [pc, #408]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a65      	ldr	r2, [pc, #404]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fd fdc0 	bl	80017d0 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd fdbc 	bl	80017d0 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e207      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c66:	4b5b      	ldr	r3, [pc, #364]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c74:	f7fd fdac 	bl	80017d0 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fda8 	bl	80017d0 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e1f3      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8e:	4b51      	ldr	r3, [pc, #324]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d063      	beq.n	8003d72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003caa:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00b      	beq.n	8003cce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d11c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc2:	4b44      	ldr	r3, [pc, #272]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d116      	bne.n	8003cfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cce:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d001      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e1c7      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4937      	ldr	r1, [pc, #220]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfa:	e03a      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d020      	beq.n	8003d46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d04:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <HAL_RCC_OscConfig+0x244>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fd fd61 	bl	80017d0 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d12:	f7fd fd5d 	bl	80017d0 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1a8      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d24:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4925      	ldr	r1, [pc, #148]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	600b      	str	r3, [r1, #0]
 8003d44:	e015      	b.n	8003d72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCC_OscConfig+0x244>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4c:	f7fd fd40 	bl	80017d0 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d54:	f7fd fd3c 	bl	80017d0 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e187      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d66:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f0      	bne.n	8003d54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0308 	and.w	r3, r3, #8
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d036      	beq.n	8003dec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCC_OscConfig+0x248>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fd20 	bl	80017d0 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d94:	f7fd fd1c 	bl	80017d0 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e167      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_OscConfig+0x240>)
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
 8003db2:	e01b      	b.n	8003dec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_OscConfig+0x248>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fd fd09 	bl	80017d0 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc0:	e00e      	b.n	8003de0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd fd05 	bl	80017d0 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d907      	bls.n	8003de0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e150      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	42470000 	.word	0x42470000
 8003ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b88      	ldr	r3, [pc, #544]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ea      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8097 	beq.w	8003f28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfe:	4b81      	ldr	r3, [pc, #516]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	4b7d      	ldr	r3, [pc, #500]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a7c      	ldr	r2, [pc, #496]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b7a      	ldr	r3, [pc, #488]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b77      	ldr	r3, [pc, #476]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b74      	ldr	r3, [pc, #464]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a73      	ldr	r2, [pc, #460]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fd fcc5 	bl	80017d0 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fd fcc1 	bl	80017d0 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e10c      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b6a      	ldr	r3, [pc, #424]	; (8004008 <HAL_RCC_OscConfig+0x474>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x2ea>
 8003e70:	4b64      	ldr	r3, [pc, #400]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a63      	ldr	r2, [pc, #396]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7c:	e01c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x324>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x30c>
 8003e86:	4b5f      	ldr	r3, [pc, #380]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a5e      	ldr	r2, [pc, #376]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	4b5c      	ldr	r3, [pc, #368]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a5b      	ldr	r2, [pc, #364]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0x324>
 8003ea0:	4b58      	ldr	r3, [pc, #352]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a57      	ldr	r2, [pc, #348]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	4b55      	ldr	r3, [pc, #340]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a54      	ldr	r2, [pc, #336]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f023 0304 	bic.w	r3, r3, #4
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd fc86 	bl	80017d0 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd fc82 	bl	80017d0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e0cb      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ede:	4b49      	ldr	r3, [pc, #292]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0ee      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x334>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eec:	f7fd fc70 	bl	80017d0 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fc6c 	bl	80017d0 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e0b5      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0a:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ee      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1c:	4b39      	ldr	r3, [pc, #228]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	4a38      	ldr	r2, [pc, #224]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80a1 	beq.w	8004074 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f32:	4b34      	ldr	r3, [pc, #208]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 030c 	and.w	r3, r3, #12
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d05c      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d141      	bne.n	8003fca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f46:	4b31      	ldr	r3, [pc, #196]	; (800400c <HAL_RCC_OscConfig+0x478>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fc40 	bl	80017d0 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd fc3c 	bl	80017d0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e087      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	019b      	lsls	r3, r3, #6
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	061b      	lsls	r3, r3, #24
 8003f96:	491b      	ldr	r1, [pc, #108]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x478>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd fc15 	bl	80017d0 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fd fc11 	bl	80017d0 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e05c      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fbc:	4b11      	ldr	r3, [pc, #68]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x416>
 8003fc8:	e054      	b.n	8004074 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b10      	ldr	r3, [pc, #64]	; (800400c <HAL_RCC_OscConfig+0x478>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fbfe 	bl	80017d0 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd8:	f7fd fbfa 	bl	80017d0 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e045      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_RCC_OscConfig+0x470>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x444>
 8003ff6:	e03d      	b.n	8004074 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d107      	bne.n	8004010 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e038      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
 8004004:	40023800 	.word	0x40023800
 8004008:	40007000 	.word	0x40007000
 800400c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004010:	4b1b      	ldr	r3, [pc, #108]	; (8004080 <HAL_RCC_OscConfig+0x4ec>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d028      	beq.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d121      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d11a      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004046:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004048:	4293      	cmp	r3, r2
 800404a:	d111      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	3b01      	subs	r3, #1
 800405a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d107      	bne.n	8004070 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d001      	beq.n	8004074 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40023800 	.word	0x40023800

08004084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0cc      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004098:	4b68      	ldr	r3, [pc, #416]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d90c      	bls.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a6:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b63      	ldr	r3, [pc, #396]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0b8      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d020      	beq.n	800410e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d8:	4b59      	ldr	r3, [pc, #356]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a58      	ldr	r2, [pc, #352]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0308 	and.w	r3, r3, #8
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040f0:	4b53      	ldr	r3, [pc, #332]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a52      	ldr	r2, [pc, #328]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040fc:	4b50      	ldr	r3, [pc, #320]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	494d      	ldr	r1, [pc, #308]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d044      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	4b47      	ldr	r3, [pc, #284]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d119      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e07f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d003      	beq.n	8004142 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413e:	2b03      	cmp	r3, #3
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004142:	4b3f      	ldr	r3, [pc, #252]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e06f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e067      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004162:	4b37      	ldr	r3, [pc, #220]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0203 	bic.w	r2, r3, #3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4934      	ldr	r1, [pc, #208]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004174:	f7fd fb2c 	bl	80017d0 <HAL_GetTick>
 8004178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	e00a      	b.n	8004192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800417c:	f7fd fb28 	bl	80017d0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e04f      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f003 020c 	and.w	r2, r3, #12
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d1eb      	bne.n	800417c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d20c      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCC_ClockConfig+0x1b8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e032      	b.n	8004232 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d8:	4b19      	ldr	r3, [pc, #100]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	4916      	ldr	r1, [pc, #88]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	490e      	ldr	r1, [pc, #56]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800420a:	f000 f821 	bl	8004250 <HAL_RCC_GetSysClockFreq>
 800420e:	4602      	mov	r2, r0
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	490a      	ldr	r1, [pc, #40]	; (8004244 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	5ccb      	ldrb	r3, [r1, r3]
 800421e:	fa22 f303 	lsr.w	r3, r2, r3
 8004222:	4a09      	ldr	r2, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <HAL_RCC_ClockConfig+0x1c8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fd fa8c 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00
 8004240:	40023800 	.word	0x40023800
 8004244:	0800f53c 	.word	0x0800f53c
 8004248:	20000000 	.word	0x20000000
 800424c:	20000004 	.word	0x20000004

08004250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004254:	b090      	sub	sp, #64	; 0x40
 8004256:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
 800425c:	2300      	movs	r3, #0
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004260:	2300      	movs	r3, #0
 8004262:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004268:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 030c 	and.w	r3, r3, #12
 8004270:	2b08      	cmp	r3, #8
 8004272:	d00d      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x40>
 8004274:	2b08      	cmp	r3, #8
 8004276:	f200 80a1 	bhi.w	80043bc <HAL_RCC_GetSysClockFreq+0x16c>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x34>
 800427e:	2b04      	cmp	r3, #4
 8004280:	d003      	beq.n	800428a <HAL_RCC_GetSysClockFreq+0x3a>
 8004282:	e09b      	b.n	80043bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004286:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004288:	e09b      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800428c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800428e:	e098      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004290:	4b4f      	ldr	r3, [pc, #316]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429a:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d028      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	2200      	movs	r2, #0
 80042ae:	623b      	str	r3, [r7, #32]
 80042b0:	627a      	str	r2, [r7, #36]	; 0x24
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042b8:	2100      	movs	r1, #0
 80042ba:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042bc:	fb03 f201 	mul.w	r2, r3, r1
 80042c0:	2300      	movs	r3, #0
 80042c2:	fb00 f303 	mul.w	r3, r0, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	4a43      	ldr	r2, [pc, #268]	; (80043d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80042ca:	fba0 1202 	umull	r1, r2, r0, r2
 80042ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042d0:	460a      	mov	r2, r1
 80042d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80042d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d6:	4413      	add	r3, r2
 80042d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042dc:	2200      	movs	r2, #0
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	61fa      	str	r2, [r7, #28]
 80042e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042ea:	f7fb ff71 	bl	80001d0 <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4613      	mov	r3, r2
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f6:	e053      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	2200      	movs	r2, #0
 8004300:	613b      	str	r3, [r7, #16]
 8004302:	617a      	str	r2, [r7, #20]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800430a:	f04f 0b00 	mov.w	fp, #0
 800430e:	4652      	mov	r2, sl
 8004310:	465b      	mov	r3, fp
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	0159      	lsls	r1, r3, #5
 800431c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004320:	0150      	lsls	r0, r2, #5
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
 8004326:	ebb2 080a 	subs.w	r8, r2, sl
 800432a:	eb63 090b 	sbc.w	r9, r3, fp
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800433a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800433e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004342:	ebb2 0408 	subs.w	r4, r2, r8
 8004346:	eb63 0509 	sbc.w	r5, r3, r9
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	f04f 0300 	mov.w	r3, #0
 8004352:	00eb      	lsls	r3, r5, #3
 8004354:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004358:	00e2      	lsls	r2, r4, #3
 800435a:	4614      	mov	r4, r2
 800435c:	461d      	mov	r5, r3
 800435e:	eb14 030a 	adds.w	r3, r4, sl
 8004362:	603b      	str	r3, [r7, #0]
 8004364:	eb45 030b 	adc.w	r3, r5, fp
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004376:	4629      	mov	r1, r5
 8004378:	028b      	lsls	r3, r1, #10
 800437a:	4621      	mov	r1, r4
 800437c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004380:	4621      	mov	r1, r4
 8004382:	028a      	lsls	r2, r1, #10
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438a:	2200      	movs	r2, #0
 800438c:	60bb      	str	r3, [r7, #8]
 800438e:	60fa      	str	r2, [r7, #12]
 8004390:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004394:	f7fb ff1c 	bl	80001d0 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043ba:	e002      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043bc:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80043be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3740      	adds	r7, #64	; 0x40
 80043c8:	46bd      	mov	sp, r7
 80043ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	00f42400 	.word	0x00f42400
 80043d8:	016e3600 	.word	0x016e3600

080043dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043e2:	681b      	ldr	r3, [r3, #0]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20000000 	.word	0x20000000

080043f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043f8:	f7ff fff0 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0a9b      	lsrs	r3, r3, #10
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4903      	ldr	r1, [pc, #12]	; (8004418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40023800 	.word	0x40023800
 8004418:	0800f54c 	.word	0x0800f54c

0800441c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004420:	f7ff ffdc 	bl	80043dc <HAL_RCC_GetHCLKFreq>
 8004424:	4602      	mov	r2, r0
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	0b5b      	lsrs	r3, r3, #13
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	4903      	ldr	r1, [pc, #12]	; (8004440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004432:	5ccb      	ldrb	r3, [r1, r3]
 8004434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004438:	4618      	mov	r0, r3
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40023800 	.word	0x40023800
 8004440:	0800f54c 	.word	0x0800f54c

08004444 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e022      	b.n	800449c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d105      	bne.n	800446e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fc fe45 	bl	80010f8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2203      	movs	r2, #3
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f814 	bl	80044a4 <HAL_SD_InitCard>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e00a      	b.n	800449c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80044a4:	b5b0      	push	{r4, r5, r7, lr}
 80044a6:	b08e      	sub	sp, #56	; 0x38
 80044a8:	af04      	add	r7, sp, #16
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80044b4:	2300      	movs	r3, #0
 80044b6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80044c0:	2376      	movs	r3, #118	; 0x76
 80044c2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681d      	ldr	r5, [r3, #0]
 80044c8:	466c      	mov	r4, sp
 80044ca:	f107 0314 	add.w	r3, r7, #20
 80044ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80044d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80044d6:	f107 0308 	add.w	r3, r7, #8
 80044da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044dc:	4628      	mov	r0, r5
 80044de:	f002 fa09 	bl	80068f4 <SDIO_Init>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80044e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e04f      	b.n	8004594 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80044f4:	4b29      	ldr	r3, [pc, #164]	; (800459c <HAL_SD_InitCard+0xf8>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	f002 fa30 	bl	8006964 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <HAL_SD_InitCard+0xf8>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800450a:	2002      	movs	r0, #2
 800450c:	f7fd f96c 	bl	80017e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fe11 	bl	8005138 <SD_PowerON>
 8004516:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00b      	beq.n	8004536 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e02e      	b.n	8004594 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fd30 	bl	8004f9c <SD_InitCard>
 800453c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00b      	beq.n	800455c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e01b      	b.n	8004594 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004564:	4618      	mov	r0, r3
 8004566:	f002 fa8f 	bl	8006a88 <SDMMC_CmdBlockLength>
 800456a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00f      	beq.n	8004592 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a0a      	ldr	r2, [pc, #40]	; (80045a0 <HAL_SD_InitCard+0xfc>)
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3728      	adds	r7, #40	; 0x28
 8004598:	46bd      	mov	sp, r7
 800459a:	bdb0      	pop	{r4, r5, r7, pc}
 800459c:	422580a0 	.word	0x422580a0
 80045a0:	004005ff 	.word	0x004005ff

080045a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08c      	sub	sp, #48	; 0x30
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d107      	bne.n	80045cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0c0      	b.n	800474e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	f040 80b9 	bne.w	800474c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80045e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	441a      	add	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d907      	bls.n	80045fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0a7      	b.n	800474e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2203      	movs	r2, #3
 8004602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2200      	movs	r2, #0
 800460c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800461c:	f043 0302 	orr.w	r3, r3, #2
 8004620:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	4a4c      	ldr	r2, [pc, #304]	; (8004758 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	4a4b      	ldr	r2, [pc, #300]	; (800475c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004630:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2200      	movs	r2, #0
 8004638:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3380      	adds	r3, #128	; 0x80
 8004668:	4619      	mov	r1, r3
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	025b      	lsls	r3, r3, #9
 8004670:	089b      	lsrs	r3, r3, #2
 8004672:	f7fd fc6c 	bl	8001f4e <HAL_DMA_Start_IT>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d017      	beq.n	80046ac <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800468a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a33      	ldr	r2, [pc, #204]	; (8004760 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e050      	b.n	800474e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80046ac:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d002      	beq.n	80046c0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	025b      	lsls	r3, r3, #9
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80046c0:	f04f 33ff 	mov.w	r3, #4294967295
 80046c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	025b      	lsls	r3, r3, #9
 80046ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80046cc:	2390      	movs	r3, #144	; 0x90
 80046ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80046d0:	2302      	movs	r3, #2
 80046d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80046d8:	2301      	movs	r3, #1
 80046da:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f107 0210 	add.w	r2, r7, #16
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f002 f9a2 	bl	8006a30 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d90a      	bls.n	8004708 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2282      	movs	r2, #130	; 0x82
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046fe:	4618      	mov	r0, r3
 8004700:	f002 fa06 	bl	8006b10 <SDMMC_CmdReadMultiBlock>
 8004704:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004706:	e009      	b.n	800471c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2281      	movs	r2, #129	; 0x81
 800470c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004714:	4618      	mov	r0, r3
 8004716:	f002 f9d9 	bl	8006acc <SDMMC_CmdReadSingleBlock>
 800471a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d012      	beq.n	8004748 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004728:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800472e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004730:	431a      	orrs	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e002      	b.n	800474e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800474c:	2302      	movs	r3, #2
  }
}
 800474e:	4618      	mov	r0, r3
 8004750:	3730      	adds	r7, #48	; 0x30
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	08004e87 	.word	0x08004e87
 800475c:	08004ef9 	.word	0x08004ef9
 8004760:	004005ff 	.word	0x004005ff
 8004764:	4225858c 	.word	0x4225858c

08004768 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0c5      	b.n	800491c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b01      	cmp	r3, #1
 800479a:	f040 80be 	bne.w	800491a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80047a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	441a      	add	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d907      	bls.n	80047c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e0ac      	b.n	800491c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2203      	movs	r2, #3
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2200      	movs	r2, #0
 80047d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	4a4e      	ldr	r2, [pc, #312]	; (8004924 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80047ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	4a4d      	ldr	r2, [pc, #308]	; (8004928 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80047f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	2200      	movs	r2, #0
 80047fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	2b01      	cmp	r3, #1
 8004804:	d002      	beq.n	800480c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	025b      	lsls	r3, r3, #9
 800480a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d90a      	bls.n	8004828 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	22a0      	movs	r2, #160	; 0xa0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800481e:	4618      	mov	r0, r3
 8004820:	f002 f9ba 	bl	8006b98 <SDMMC_CmdWriteMultiBlock>
 8004824:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004826:	e009      	b.n	800483c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2290      	movs	r2, #144	; 0x90
 800482c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004834:	4618      	mov	r0, r3
 8004836:	f002 f98d 	bl	8006b54 <SDMMC_CmdWriteSingleBlock>
 800483a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d012      	beq.n	8004868 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a39      	ldr	r2, [pc, #228]	; (800492c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004850:	431a      	orrs	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e059      	b.n	800491c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004868:	4b31      	ldr	r3, [pc, #196]	; (8004930 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800486a:	2201      	movs	r2, #1
 800486c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004872:	2240      	movs	r2, #64	; 0x40
 8004874:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3380      	adds	r3, #128	; 0x80
 800489e:	461a      	mov	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	025b      	lsls	r3, r3, #9
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	f7fd fb52 	bl	8001f4e <HAL_DMA_Start_IT>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	6812      	ldr	r2, [r2, #0]
 80048ba:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80048be:	f023 0302 	bic.w	r3, r3, #2
 80048c2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e018      	b.n	800491c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80048ea:	f04f 33ff 	mov.w	r3, #4294967295
 80048ee:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	025b      	lsls	r3, r3, #9
 80048f4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80048f6:	2390      	movs	r3, #144	; 0x90
 80048f8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004902:	2301      	movs	r3, #1
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f107 0210 	add.w	r2, r7, #16
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f002 f88d 	bl	8006a30 <SDIO_ConfigData>

      return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e000      	b.n	800491c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800491a:	2302      	movs	r3, #2
  }
}
 800491c:	4618      	mov	r0, r3
 800491e:	3730      	adds	r7, #48	; 0x30
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	08004e5d 	.word	0x08004e5d
 8004928:	08004ef9 	.word	0x08004ef9
 800492c:	004005ff 	.word	0x004005ff
 8004930:	4225858c 	.word	0x4225858c

08004934 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004956:	0f9b      	lsrs	r3, r3, #30
 8004958:	b2da      	uxtb	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004962:	0e9b      	lsrs	r3, r3, #26
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	b2da      	uxtb	r2, r3
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004974:	0e1b      	lsrs	r3, r3, #24
 8004976:	b2db      	uxtb	r3, r3
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	b2da      	uxtb	r2, r3
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004986:	0c1b      	lsrs	r3, r3, #16
 8004988:	b2da      	uxtb	r2, r3
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	b2da      	uxtb	r2, r3
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049a8:	0d1b      	lsrs	r3, r3, #20
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 030f 	and.w	r3, r3, #15
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049c6:	0bdb      	lsrs	r3, r3, #15
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049d8:	0b9b      	lsrs	r3, r3, #14
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049ea:	0b5b      	lsrs	r3, r3, #13
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049fc:	0b1b      	lsrs	r3, r3, #12
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d163      	bne.n	8004ae0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a1c:	009a      	lsls	r2, r3, #2
 8004a1e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a22:	4013      	ands	r3, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004a28:	0f92      	lsrs	r2, r2, #30
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a34:	0edb      	lsrs	r3, r3, #27
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a46:	0e1b      	lsrs	r3, r3, #24
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a58:	0d5b      	lsrs	r3, r3, #21
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6a:	0c9b      	lsrs	r3, r3, #18
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7c:	0bdb      	lsrs	r3, r3, #15
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	7e1b      	ldrb	r3, [r3, #24]
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	3302      	adds	r3, #2
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004aaa:	fb03 f202 	mul.w	r2, r3, r2
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	7a1b      	ldrb	r3, [r3, #8]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	2201      	movs	r2, #1
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004acc:	0a52      	lsrs	r2, r2, #9
 8004ace:	fb03 f202 	mul.w	r2, r3, r2
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60
 8004ade:	e031      	b.n	8004b44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d11d      	bne.n	8004b24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aec:	041b      	lsls	r3, r3, #16
 8004aee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	431a      	orrs	r2, r3
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	3301      	adds	r3, #1
 8004b04:	029a      	lsls	r2, r3, #10
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b18:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	661a      	str	r2, [r3, #96]	; 0x60
 8004b22:	e00f      	b.n	8004b44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a58      	ldr	r2, [pc, #352]	; (8004c8c <HAL_SD_GetCardCSD+0x344>)
 8004b2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e09d      	b.n	8004c80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b48:	0b9b      	lsrs	r3, r3, #14
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b5a:	09db      	lsrs	r3, r3, #7
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7c:	0fdb      	lsrs	r3, r3, #31
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	0f5b      	lsrs	r3, r3, #29
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	0e9b      	lsrs	r3, r3, #26
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	0d9b      	lsrs	r3, r3, #22
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbe:	0d5b      	lsrs	r3, r3, #21
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	0c1b      	lsrs	r3, r3, #16
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	0bdb      	lsrs	r3, r3, #15
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	0b9b      	lsrs	r3, r3, #14
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	0b5b      	lsrs	r3, r3, #13
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	0b1b      	lsrs	r3, r3, #12
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3e:	0a9b      	lsrs	r3, r3, #10
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	0a1b      	lsrs	r3, r3, #8
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	004005ff 	.word	0x004005ff

08004c90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004ce8:	b5b0      	push	{r4, r5, r7, lr}
 8004cea:	b08e      	sub	sp, #56	; 0x38
 8004cec:	af04      	add	r7, sp, #16
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d02e      	beq.n	8004d66 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	d106      	bne.n	8004d1e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d1c:	e029      	b.n	8004d72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d24:	d10a      	bne.n	8004d3c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fabc 	bl	80052a4 <SD_WideBus_Enable>
 8004d2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
 8004d3a:	e01a      	b.n	8004d72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 faf9 	bl	800533a <SD_WideBus_Disable>
 8004d48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	639a      	str	r2, [r3, #56]	; 0x38
 8004d56:	e00c      	b.n	8004d72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
 8004d64:	e005      	b.n	8004d72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00b      	beq.n	8004d92 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a26      	ldr	r2, [pc, #152]	; (8004e18 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d90:	e01f      	b.n	8004dd2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681d      	ldr	r5, [r3, #0]
 8004db8:	466c      	mov	r4, sp
 8004dba:	f107 0314 	add.w	r3, r7, #20
 8004dbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004dc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004dc6:	f107 0308 	add.w	r3, r7, #8
 8004dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f001 fd91 	bl	80068f4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 fe54 	bl	8006a88 <SDMMC_CmdBlockLength>
 8004de0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00c      	beq.n	8004e02 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3728      	adds	r7, #40	; 0x28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bdb0      	pop	{r4, r5, r7, pc}
 8004e16:	bf00      	nop
 8004e18:	004005ff 	.word	0x004005ff

08004e1c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004e28:	f107 030c 	add.w	r3, r7, #12
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa10 	bl	8005254 <SD_SendStatus>
 8004e34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d005      	beq.n	8004e48 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	0a5b      	lsrs	r3, r3, #9
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004e52:	693b      	ldr	r3, [r7, #16]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e78:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	2b82      	cmp	r3, #130	; 0x82
 8004e9a:	d111      	bne.n	8004ec0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 fe9b 	bl	8006bdc <SDMMC_CmdStopTransfer>
 8004ea6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d008      	beq.n	8004ec0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff fd3a 	bl	8004934 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0208 	bic.w	r2, r2, #8
 8004ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f003 ff3d 	bl	8008d68 <HAL_SD_RxCpltCallback>
#endif
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fd f879 	bl	8001ffe <HAL_DMA_GetError>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d03e      	beq.n	8004f90 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f18:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d002      	beq.n	8004f2e <SD_DMAError+0x36>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d12d      	bne.n	8004f8a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a19      	ldr	r2, [pc, #100]	; (8004f98 <SD_DMAError+0xa0>)
 8004f34:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004f44:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004f52:	6978      	ldr	r0, [r7, #20]
 8004f54:	f7ff ff62 	bl	8004e1c <HAL_SD_GetCardState>
 8004f58:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d002      	beq.n	8004f66 <SD_DMAError+0x6e>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d10a      	bne.n	8004f7c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 fe36 	bl	8006bdc <SDMMC_CmdStopTransfer>
 8004f70:	4602      	mov	r2, r0
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	431a      	orrs	r2, r3
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2200      	movs	r2, #0
 8004f88:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004f8a:	6978      	ldr	r0, [r7, #20]
 8004f8c:	f7ff fcd2 	bl	8004934 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004f90:	bf00      	nop
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	004005ff 	.word	0x004005ff

08004f9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004f9c:	b5b0      	push	{r4, r5, r7, lr}
 8004f9e:	b094      	sub	sp, #80	; 0x50
 8004fa0:	af04      	add	r7, sp, #16
 8004fa2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 fce7 	bl	8006980 <SDIO_GetPowerState>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d102      	bne.n	8004fbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004fb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004fbc:	e0b8      	b.n	8005130 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d02f      	beq.n	8005026 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 ff10 	bl	8006df0 <SDMMC_CmdSendCID>
 8004fd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <SD_InitCard+0x40>
    {
      return errorstate;
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fda:	e0a9      	b.n	8005130 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 fd11 	bl	8006a0a <SDIO_GetResponse>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2104      	movs	r1, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 fd08 	bl	8006a0a <SDIO_GetResponse>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2108      	movs	r1, #8
 8005006:	4618      	mov	r0, r3
 8005008:	f001 fcff 	bl	8006a0a <SDIO_GetResponse>
 800500c:	4602      	mov	r2, r0
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	210c      	movs	r1, #12
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fcf6 	bl	8006a0a <SDIO_GetResponse>
 800501e:	4602      	mov	r2, r0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	2b03      	cmp	r3, #3
 800502c:	d00d      	beq.n	800504a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f107 020e 	add.w	r2, r7, #14
 8005036:	4611      	mov	r1, r2
 8005038:	4618      	mov	r0, r3
 800503a:	f001 ff16 	bl	8006e6a <SDMMC_CmdSetRelAdd>
 800503e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <SD_InitCard+0xae>
    {
      return errorstate;
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	e072      	b.n	8005130 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	2b03      	cmp	r3, #3
 8005050:	d036      	beq.n	80050c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005052:	89fb      	ldrh	r3, [r7, #14]
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f001 fee0 	bl	8006e2c <SDMMC_CmdSendCSD>
 800506c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800506e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005076:	e05b      	b.n	8005130 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f001 fcc3 	bl	8006a0a <SDIO_GetResponse>
 8005084:	4602      	mov	r2, r0
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2104      	movs	r1, #4
 8005090:	4618      	mov	r0, r3
 8005092:	f001 fcba 	bl	8006a0a <SDIO_GetResponse>
 8005096:	4602      	mov	r2, r0
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2108      	movs	r1, #8
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 fcb1 	bl	8006a0a <SDIO_GetResponse>
 80050a8:	4602      	mov	r2, r0
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	210c      	movs	r1, #12
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 fca8 	bl	8006a0a <SDIO_GetResponse>
 80050ba:	4602      	mov	r2, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2104      	movs	r1, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f001 fc9f 	bl	8006a0a <SDIO_GetResponse>
 80050cc:	4603      	mov	r3, r0
 80050ce:	0d1a      	lsrs	r2, r3, #20
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80050d4:	f107 0310 	add.w	r3, r7, #16
 80050d8:	4619      	mov	r1, r3
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fc34 	bl	8004948 <HAL_SD_GetCardCSD>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050ea:	e021      	b.n	8005130 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6819      	ldr	r1, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f4:	041b      	lsls	r3, r3, #16
 80050f6:	2200      	movs	r2, #0
 80050f8:	461c      	mov	r4, r3
 80050fa:	4615      	mov	r5, r2
 80050fc:	4622      	mov	r2, r4
 80050fe:	462b      	mov	r3, r5
 8005100:	4608      	mov	r0, r1
 8005102:	f001 fd8d 	bl	8006c20 <SDMMC_CmdSelDesel>
 8005106:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <SD_InitCard+0x176>
  {
    return errorstate;
 800510e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005110:	e00e      	b.n	8005130 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681d      	ldr	r5, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	466c      	mov	r4, sp
 800511a:	f103 0210 	add.w	r2, r3, #16
 800511e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005124:	3304      	adds	r3, #4
 8005126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005128:	4628      	mov	r0, r5
 800512a:	f001 fbe3 	bl	80068f4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3740      	adds	r7, #64	; 0x40
 8005134:	46bd      	mov	sp, r7
 8005136:	bdb0      	pop	{r4, r5, r7, pc}

08005138 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f001 fd88 	bl	8006c66 <SDMMC_CmdGoIdleState>
 8005156:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <SD_PowerON+0x2a>
  {
    return errorstate;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	e072      	b.n	8005248 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f001 fd9b 	bl	8006ca2 <SDMMC_CmdOperCond>
 800516c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00d      	beq.n	8005190 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f001 fd71 	bl	8006c66 <SDMMC_CmdGoIdleState>
 8005184:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d004      	beq.n	8005196 <SD_PowerON+0x5e>
    {
      return errorstate;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	e05b      	b.n	8005248 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519a:	2b01      	cmp	r3, #1
 800519c:	d137      	bne.n	800520e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2100      	movs	r1, #0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 fd9b 	bl	8006ce0 <SDMMC_CmdAppCommand>
 80051aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d02d      	beq.n	800520e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80051b6:	e047      	b.n	8005248 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f001 fd8e 	bl	8006ce0 <SDMMC_CmdAppCommand>
 80051c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	e03b      	b.n	8005248 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	491e      	ldr	r1, [pc, #120]	; (8005250 <SD_PowerON+0x118>)
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 fda4 	bl	8006d24 <SDMMC_CmdAppOperCommand>
 80051dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80051e8:	e02e      	b.n	8005248 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f001 fc0a 	bl	8006a0a <SDIO_GetResponse>
 80051f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	0fdb      	lsrs	r3, r3, #31
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <SD_PowerON+0xcc>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <SD_PowerON+0xce>
 8005204:	2300      	movs	r3, #0
 8005206:	613b      	str	r3, [r7, #16]

    count++;
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	3301      	adds	r3, #1
 800520c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005214:	4293      	cmp	r3, r2
 8005216:	d802      	bhi.n	800521e <SD_PowerON+0xe6>
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0cc      	beq.n	80051b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005224:	4293      	cmp	r3, r2
 8005226:	d902      	bls.n	800522e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800522c:	e00c      	b.n	8005248 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	645a      	str	r2, [r3, #68]	; 0x44
 800523e:	e002      	b.n	8005246 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	c1100000 	.word	0xc1100000

08005254 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d102      	bne.n	800526a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005268:	e018      	b.n	800529c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f001 fe18 	bl	8006eac <SDMMC_CmdSendStatus>
 800527c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	e009      	b.n	800529c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2100      	movs	r1, #0
 800528e:	4618      	mov	r0, r3
 8005290:	f001 fbbb 	bl	8006a0a <SDIO_GetResponse>
 8005294:	4602      	mov	r2, r0
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80052ac:	2300      	movs	r3, #0
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	2300      	movs	r3, #0
 80052b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fba5 	bl	8006a0a <SDIO_GetResponse>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ca:	d102      	bne.n	80052d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80052cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052d0:	e02f      	b.n	8005332 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80052d2:	f107 030c 	add.w	r3, r7, #12
 80052d6:	4619      	mov	r1, r3
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f879 	bl	80053d0 <SD_FindSCR>
 80052de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	e023      	b.n	8005332 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01c      	beq.n	800532e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f001 fced 	bl	8006ce0 <SDMMC_CmdAppCommand>
 8005306:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	e00f      	b.n	8005332 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2102      	movs	r1, #2
 8005318:	4618      	mov	r0, r3
 800531a:	f001 fd26 	bl	8006d6a <SDMMC_CmdBusWidth>
 800531e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	e003      	b.n	8005332 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800532a:	2300      	movs	r3, #0
 800532c:	e001      	b.n	8005332 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800532e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b086      	sub	sp, #24
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f001 fb5a 	bl	8006a0a <SDIO_GetResponse>
 8005356:	4603      	mov	r3, r0
 8005358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005360:	d102      	bne.n	8005368 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005362:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005366:	e02f      	b.n	80053c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005368:	f107 030c 	add.w	r3, r7, #12
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f82e 	bl	80053d0 <SD_FindSCR>
 8005374:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	e023      	b.n	80053c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01c      	beq.n	80053c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f001 fca2 	bl	8006ce0 <SDMMC_CmdAppCommand>
 800539c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	e00f      	b.n	80053c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f001 fcdb 	bl	8006d6a <SDMMC_CmdBusWidth>
 80053b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	e003      	b.n	80053c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e001      	b.n	80053c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80053d0:	b590      	push	{r4, r7, lr}
 80053d2:	b08f      	sub	sp, #60	; 0x3c
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80053da:	f7fc f9f9 	bl	80017d0 <HAL_GetTick>
 80053de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80053e4:	2300      	movs	r3, #0
 80053e6:	60bb      	str	r3, [r7, #8]
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2108      	movs	r1, #8
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 fb46 	bl	8006a88 <SDMMC_CmdBlockLength>
 80053fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	e0b2      	b.n	800556e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f001 fc63 	bl	8006ce0 <SDMMC_CmdAppCommand>
 800541a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	e0a3      	b.n	800556e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800542c:	2308      	movs	r3, #8
 800542e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005430:	2330      	movs	r3, #48	; 0x30
 8005432:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005434:	2302      	movs	r3, #2
 8005436:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005438:	2300      	movs	r3, #0
 800543a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800543c:	2301      	movs	r3, #1
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f107 0210 	add.w	r2, r7, #16
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f001 faf0 	bl	8006a30 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f001 fcaa 	bl	8006dae <SDMMC_CmdSendSCR>
 800545a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	d02a      	beq.n	80054b8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	e083      	b.n	800556e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00f      	beq.n	8005494 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6819      	ldr	r1, [r3, #0]
 8005478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	f107 0208 	add.w	r2, r7, #8
 8005480:	18d4      	adds	r4, r2, r3
 8005482:	4608      	mov	r0, r1
 8005484:	f001 fa61 	bl	800694a <SDIO_ReadFIFO>
 8005488:	4603      	mov	r3, r0
 800548a:	6023      	str	r3, [r4, #0]
      index++;
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	3301      	adds	r3, #1
 8005490:	637b      	str	r3, [r7, #52]	; 0x34
 8005492:	e006      	b.n	80054a2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d012      	beq.n	80054c8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80054a2:	f7fc f995 	bl	80017d0 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d102      	bne.n	80054b8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80054b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054b6:	e05a      	b.n	800556e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0cf      	beq.n	8005466 <SD_FindSCR+0x96>
 80054c6:	e000      	b.n	80054ca <SD_FindSCR+0xfa>
      break;
 80054c8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2208      	movs	r2, #8
 80054de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80054e0:	2308      	movs	r3, #8
 80054e2:	e044      	b.n	800556e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2202      	movs	r2, #2
 80054f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80054fa:	2302      	movs	r3, #2
 80054fc:	e037      	b.n	800556e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2220      	movs	r2, #32
 8005512:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005514:	2320      	movs	r3, #32
 8005516:	e02a      	b.n	800556e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005520:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	061a      	lsls	r2, r3, #24
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800552e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005538:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	0e1b      	lsrs	r3, r3, #24
 800553e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	601a      	str	r2, [r3, #0]
    scr++;
 8005544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005546:	3304      	adds	r3, #4
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	061a      	lsls	r2, r3, #24
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005556:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	0a1b      	lsrs	r3, r3, #8
 800555c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005560:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	0e1b      	lsrs	r3, r3, #24
 8005566:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	373c      	adds	r7, #60	; 0x3c
 8005572:	46bd      	mov	sp, r7
 8005574:	bd90      	pop	{r4, r7, pc}

08005576 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e07b      	b.n	8005680 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005598:	d009      	beq.n	80055ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	61da      	str	r2, [r3, #28]
 80055a0:	e005      	b.n	80055ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f7fb fdfd 	bl	80011c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005600:	431a      	orrs	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	431a      	orrs	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005632:	ea42 0103 	orr.w	r1, r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	f003 0104 	and.w	r1, r3, #4
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	f003 0210 	and.w	r2, r3, #16
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800566e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_SPI_Transmit+0x22>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e126      	b.n	80058f8 <HAL_SPI_Transmit+0x270>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056b2:	f7fc f88d 	bl	80017d0 <HAL_GetTick>
 80056b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056b8:	88fb      	ldrh	r3, [r7, #6]
 80056ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d002      	beq.n	80056ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056c8:	2302      	movs	r3, #2
 80056ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056cc:	e10b      	b.n	80058e6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <HAL_SPI_Transmit+0x52>
 80056d4:	88fb      	ldrh	r3, [r7, #6]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056de:	e102      	b.n	80058e6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2203      	movs	r2, #3
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005726:	d10f      	bne.n	8005748 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005736:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005746:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b40      	cmp	r3, #64	; 0x40
 8005754:	d007      	beq.n	8005766 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005764:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800576e:	d14b      	bne.n	8005808 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_SPI_Transmit+0xf6>
 8005778:	8afb      	ldrh	r3, [r7, #22]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d13e      	bne.n	80057fc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	881a      	ldrh	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	1c9a      	adds	r2, r3, #2
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057a2:	e02b      	b.n	80057fc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d112      	bne.n	80057d8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	881a      	ldrh	r2, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	1c9a      	adds	r2, r3, #2
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80057d6:	e011      	b.n	80057fc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d8:	f7fb fffa 	bl	80017d0 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d803      	bhi.n	80057f0 <HAL_SPI_Transmit+0x168>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_Transmit+0x16e>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057fa:	e074      	b.n	80058e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1ce      	bne.n	80057a4 <HAL_SPI_Transmit+0x11c>
 8005806:	e04c      	b.n	80058a2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <HAL_SPI_Transmit+0x18e>
 8005810:	8afb      	ldrh	r3, [r7, #22]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d140      	bne.n	8005898 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	7812      	ldrb	r2, [r2, #0]
 8005822:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005832:	b29b      	uxth	r3, r3
 8005834:	3b01      	subs	r3, #1
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800583c:	e02c      	b.n	8005898 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b02      	cmp	r3, #2
 800584a:	d113      	bne.n	8005874 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005868:	b29b      	uxth	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	86da      	strh	r2, [r3, #54]	; 0x36
 8005872:	e011      	b.n	8005898 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005874:	f7fb ffac 	bl	80017d0 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d803      	bhi.n	800588c <HAL_SPI_Transmit+0x204>
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d102      	bne.n	8005892 <HAL_SPI_Transmit+0x20a>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005896:	e026      	b.n	80058e6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1cd      	bne.n	800583e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 fa54 	bl	8005d54 <SPI_EndRxTxTransaction>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c0:	2300      	movs	r3, #0
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e000      	b.n	80058e6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80058e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08c      	sub	sp, #48	; 0x30
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800590e:	2301      	movs	r3, #1
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_SPI_TransmitReceive+0x26>
 8005922:	2302      	movs	r3, #2
 8005924:	e18a      	b.n	8005c3c <HAL_SPI_TransmitReceive+0x33c>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800592e:	f7fb ff4f 	bl	80017d0 <HAL_GetTick>
 8005932:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800594c:	2b01      	cmp	r3, #1
 800594e:	d00f      	beq.n	8005970 <HAL_SPI_TransmitReceive+0x70>
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005956:	d107      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d103      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x68>
 8005960:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005964:	2b04      	cmp	r3, #4
 8005966:	d003      	beq.n	8005970 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005968:	2302      	movs	r3, #2
 800596a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800596e:	e15b      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x82>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <HAL_SPI_TransmitReceive+0x82>
 800597c:	887b      	ldrh	r3, [r7, #2]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d103      	bne.n	800598a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005988:	e14e      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b04      	cmp	r3, #4
 8005994:	d003      	beq.n	800599e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2205      	movs	r2, #5
 800599a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	887a      	ldrh	r2, [r7, #2]
 80059ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	887a      	ldrh	r2, [r7, #2]
 80059b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68ba      	ldr	r2, [r7, #8]
 80059ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	887a      	ldrh	r2, [r7, #2]
 80059c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	887a      	ldrh	r2, [r7, #2]
 80059c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d007      	beq.n	80059f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059fa:	d178      	bne.n	8005aee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_SPI_TransmitReceive+0x10a>
 8005a04:	8b7b      	ldrh	r3, [r7, #26]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d166      	bne.n	8005ad8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0e:	881a      	ldrh	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1a:	1c9a      	adds	r2, r3, #2
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a2e:	e053      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d11b      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x176>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d016      	beq.n	8005a76 <HAL_SPI_TransmitReceive+0x176>
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d113      	bne.n	8005a76 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a52:	881a      	ldrh	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5e:	1c9a      	adds	r2, r3, #2
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d119      	bne.n	8005ab8 <HAL_SPI_TransmitReceive+0x1b8>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d014      	beq.n	8005ab8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	b292      	uxth	r2, r2
 8005a9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	1c9a      	adds	r2, r3, #2
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ab8:	f7fb fe8a 	bl	80017d0 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d807      	bhi.n	8005ad8 <HAL_SPI_TransmitReceive+0x1d8>
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ace:	d003      	beq.n	8005ad8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005ad6:	e0a7      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1a6      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x130>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1a1      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x130>
 8005aec:	e07c      	b.n	8005be8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x1fc>
 8005af6:	8b7b      	ldrh	r3, [r7, #26]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d16b      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b22:	e057      	b.n	8005bd4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d11c      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x26c>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d017      	beq.n	8005b6c <HAL_SPI_TransmitReceive+0x26c>
 8005b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d114      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	7812      	ldrb	r2, [r2, #0]
 8005b4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b54:	1c5a      	adds	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d119      	bne.n	8005bae <HAL_SPI_TransmitReceive+0x2ae>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d014      	beq.n	8005bae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005baa:	2301      	movs	r3, #1
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bae:	f7fb fe0f 	bl	80017d0 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d803      	bhi.n	8005bc6 <HAL_SPI_TransmitReceive+0x2c6>
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc4:	d102      	bne.n	8005bcc <HAL_SPI_TransmitReceive+0x2cc>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005bd2:	e029      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1a2      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x224>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d19d      	bne.n	8005b24 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f8b1 	bl	8005d54 <SPI_EndRxTxTransaction>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d006      	beq.n	8005c06 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2220      	movs	r2, #32
 8005c02:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c04:	e010      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	617b      	str	r3, [r7, #20]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	e000      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3730      	adds	r7, #48	; 0x30
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	603b      	str	r3, [r7, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c54:	f7fb fdbc 	bl	80017d0 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	4413      	add	r3, r2
 8005c62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c64:	f7fb fdb4 	bl	80017d0 <HAL_GetTick>
 8005c68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c6a:	4b39      	ldr	r3, [pc, #228]	; (8005d50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	015b      	lsls	r3, r3, #5
 8005c70:	0d1b      	lsrs	r3, r3, #20
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	fb02 f303 	mul.w	r3, r2, r3
 8005c78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c7a:	e054      	b.n	8005d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d050      	beq.n	8005d26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c84:	f7fb fda4 	bl	80017d0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d902      	bls.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d13d      	bne.n	8005d16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ca8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cb2:	d111      	bne.n	8005cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cbc:	d004      	beq.n	8005cc8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc6:	d107      	bne.n	8005cd8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cd6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce0:	d10f      	bne.n	8005d02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e017      	b.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	3b01      	subs	r3, #1
 8005d24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d19b      	bne.n	8005c7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000000 	.word	0x20000000

08005d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d60:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <SPI_EndRxTxTransaction+0x7c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <SPI_EndRxTxTransaction+0x80>)
 8005d66:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6a:	0d5b      	lsrs	r3, r3, #21
 8005d6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d70:	fb02 f303 	mul.w	r3, r2, r3
 8005d74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d7e:	d112      	bne.n	8005da6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2200      	movs	r2, #0
 8005d88:	2180      	movs	r1, #128	; 0x80
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff ff5a 	bl	8005c44 <SPI_WaitFlagStateUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d016      	beq.n	8005dc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e00f      	b.n	8005dc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dbc:	2b80      	cmp	r3, #128	; 0x80
 8005dbe:	d0f2      	beq.n	8005da6 <SPI_EndRxTxTransaction+0x52>
 8005dc0:	e000      	b.n	8005dc4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005dc2:	bf00      	nop
  }

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000000 	.word	0x20000000
 8005dd4:	165e9f81 	.word	0x165e9f81

08005dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e041      	b.n	8005e6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fb fad4 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f000 f8f4 	bl	8006004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d101      	bne.n	8005e92 <HAL_TIM_ConfigClockSource+0x1c>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	e0b4      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x186>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005eb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eb8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eca:	d03e      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0xd4>
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed0:	f200 8087 	bhi.w	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	f000 8086 	beq.w	8005fe8 <HAL_TIM_ConfigClockSource+0x172>
 8005edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee0:	d87f      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee2:	2b70      	cmp	r3, #112	; 0x70
 8005ee4:	d01a      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0xa6>
 8005ee6:	2b70      	cmp	r3, #112	; 0x70
 8005ee8:	d87b      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005eea:	2b60      	cmp	r3, #96	; 0x60
 8005eec:	d050      	beq.n	8005f90 <HAL_TIM_ConfigClockSource+0x11a>
 8005eee:	2b60      	cmp	r3, #96	; 0x60
 8005ef0:	d877      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef2:	2b50      	cmp	r3, #80	; 0x50
 8005ef4:	d03c      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0xfa>
 8005ef6:	2b50      	cmp	r3, #80	; 0x50
 8005ef8:	d873      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d058      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0x13a>
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d86f      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005f02:	2b30      	cmp	r3, #48	; 0x30
 8005f04:	d064      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x15a>
 8005f06:	2b30      	cmp	r3, #48	; 0x30
 8005f08:	d86b      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d060      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x15a>
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d867      	bhi.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d05c      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x15a>
 8005f16:	2b10      	cmp	r3, #16
 8005f18:	d05a      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x15a>
 8005f1a:	e062      	b.n	8005fe2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6899      	ldr	r1, [r3, #8]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f000 f984 	bl	8006238 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f3e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	609a      	str	r2, [r3, #8]
      break;
 8005f48:	e04f      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6899      	ldr	r1, [r3, #8]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f000 f96d 	bl	8006238 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f6c:	609a      	str	r2, [r3, #8]
      break;
 8005f6e:	e03c      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f000 f8e1 	bl	8006144 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2150      	movs	r1, #80	; 0x50
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 f93a 	bl	8006202 <TIM_ITRx_SetConfig>
      break;
 8005f8e:	e02c      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f000 f900 	bl	80061a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2160      	movs	r1, #96	; 0x60
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 f92a 	bl	8006202 <TIM_ITRx_SetConfig>
      break;
 8005fae:	e01c      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f000 f8c1 	bl	8006144 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2140      	movs	r1, #64	; 0x40
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 f91a 	bl	8006202 <TIM_ITRx_SetConfig>
      break;
 8005fce:	e00c      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f000 f911 	bl	8006202 <TIM_ITRx_SetConfig>
      break;
 8005fe0:	e003      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe6:	e000      	b.n	8005fea <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fe8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a40      	ldr	r2, [pc, #256]	; (8006118 <TIM_Base_SetConfig+0x114>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d013      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006022:	d00f      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3d      	ldr	r2, [pc, #244]	; (800611c <TIM_Base_SetConfig+0x118>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00b      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a3c      	ldr	r2, [pc, #240]	; (8006120 <TIM_Base_SetConfig+0x11c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d007      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a3b      	ldr	r2, [pc, #236]	; (8006124 <TIM_Base_SetConfig+0x120>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d003      	beq.n	8006044 <TIM_Base_SetConfig+0x40>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a3a      	ldr	r2, [pc, #232]	; (8006128 <TIM_Base_SetConfig+0x124>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d108      	bne.n	8006056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2f      	ldr	r2, [pc, #188]	; (8006118 <TIM_Base_SetConfig+0x114>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d02b      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006064:	d027      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a2c      	ldr	r2, [pc, #176]	; (800611c <TIM_Base_SetConfig+0x118>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d023      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a2b      	ldr	r2, [pc, #172]	; (8006120 <TIM_Base_SetConfig+0x11c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01f      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a2a      	ldr	r2, [pc, #168]	; (8006124 <TIM_Base_SetConfig+0x120>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01b      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a29      	ldr	r2, [pc, #164]	; (8006128 <TIM_Base_SetConfig+0x124>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d017      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a28      	ldr	r2, [pc, #160]	; (800612c <TIM_Base_SetConfig+0x128>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a27      	ldr	r2, [pc, #156]	; (8006130 <TIM_Base_SetConfig+0x12c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00f      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a26      	ldr	r2, [pc, #152]	; (8006134 <TIM_Base_SetConfig+0x130>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a25      	ldr	r2, [pc, #148]	; (8006138 <TIM_Base_SetConfig+0x134>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d007      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a24      	ldr	r2, [pc, #144]	; (800613c <TIM_Base_SetConfig+0x138>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a23      	ldr	r2, [pc, #140]	; (8006140 <TIM_Base_SetConfig+0x13c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d108      	bne.n	80060c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a0a      	ldr	r2, [pc, #40]	; (8006118 <TIM_Base_SetConfig+0x114>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_Base_SetConfig+0xf8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a0c      	ldr	r2, [pc, #48]	; (8006128 <TIM_Base_SetConfig+0x124>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d103      	bne.n	8006104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	615a      	str	r2, [r3, #20]
}
 800610a:	bf00      	nop
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40010000 	.word	0x40010000
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	40010400 	.word	0x40010400
 800612c:	40014000 	.word	0x40014000
 8006130:	40014400 	.word	0x40014400
 8006134:	40014800 	.word	0x40014800
 8006138:	40001800 	.word	0x40001800
 800613c:	40001c00 	.word	0x40001c00
 8006140:	40002000 	.word	0x40002000

08006144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a1b      	ldr	r3, [r3, #32]
 8006154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0201 	bic.w	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800616e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	011b      	lsls	r3, r3, #4
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f023 030a 	bic.w	r3, r3, #10
 8006180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b087      	sub	sp, #28
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f023 0210 	bic.w	r2, r3, #16
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	031b      	lsls	r3, r3, #12
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006202:	b480      	push	{r7}
 8006204:	b085      	sub	sp, #20
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006218:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	f043 0307 	orr.w	r3, r3, #7
 8006224:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	609a      	str	r2, [r3, #8]
}
 800622c:	bf00      	nop
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	021a      	lsls	r2, r3, #8
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	431a      	orrs	r2, r3
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4313      	orrs	r3, r2
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	609a      	str	r2, [r3, #8]
}
 800626c:	bf00      	nop
 800626e:	371c      	adds	r7, #28
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e05a      	b.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a21      	ldr	r2, [pc, #132]	; (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d022      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062dc:	d01d      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d018      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1b      	ldr	r2, [pc, #108]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1a      	ldr	r2, [pc, #104]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00e      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a18      	ldr	r2, [pc, #96]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d009      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a17      	ldr	r2, [pc, #92]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d004      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a15      	ldr	r2, [pc, #84]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10c      	bne.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006320:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	4313      	orrs	r3, r2
 800632a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40010000 	.word	0x40010000
 8006358:	40000400 	.word	0x40000400
 800635c:	40000800 	.word	0x40000800
 8006360:	40000c00 	.word	0x40000c00
 8006364:	40010400 	.word	0x40010400
 8006368:	40014000 	.word	0x40014000
 800636c:	40001800 	.word	0x40001800

08006370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e03f      	b.n	8006402 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d106      	bne.n	800639c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fb f82a 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2224      	movs	r2, #36	; 0x24
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f829 	bl	800640c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695a      	ldr	r2, [r3, #20]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
	...

0800640c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800640c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006410:	b0c0      	sub	sp, #256	; 0x100
 8006412:	af00      	add	r7, sp, #0
 8006414:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	68d9      	ldr	r1, [r3, #12]
 800642a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	ea40 0301 	orr.w	r3, r0, r1
 8006434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800643a:	689a      	ldr	r2, [r3, #8]
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	431a      	orrs	r2, r3
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	431a      	orrs	r2, r3
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006464:	f021 010c 	bic.w	r1, r1, #12
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006472:	430b      	orrs	r3, r1
 8006474:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006486:	6999      	ldr	r1, [r3, #24]
 8006488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	ea40 0301 	orr.w	r3, r0, r1
 8006492:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4b8f      	ldr	r3, [pc, #572]	; (80066d8 <UART_SetConfig+0x2cc>)
 800649c:	429a      	cmp	r2, r3
 800649e:	d005      	beq.n	80064ac <UART_SetConfig+0xa0>
 80064a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	4b8d      	ldr	r3, [pc, #564]	; (80066dc <UART_SetConfig+0x2d0>)
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d104      	bne.n	80064b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064ac:	f7fd ffb6 	bl	800441c <HAL_RCC_GetPCLK2Freq>
 80064b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80064b4:	e003      	b.n	80064be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064b6:	f7fd ff9d 	bl	80043f4 <HAL_RCC_GetPCLK1Freq>
 80064ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c8:	f040 810c 	bne.w	80066e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80064d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80064da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80064de:	4622      	mov	r2, r4
 80064e0:	462b      	mov	r3, r5
 80064e2:	1891      	adds	r1, r2, r2
 80064e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80064e6:	415b      	adcs	r3, r3
 80064e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80064ee:	4621      	mov	r1, r4
 80064f0:	eb12 0801 	adds.w	r8, r2, r1
 80064f4:	4629      	mov	r1, r5
 80064f6:	eb43 0901 	adc.w	r9, r3, r1
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	f04f 0300 	mov.w	r3, #0
 8006502:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006506:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800650a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800650e:	4690      	mov	r8, r2
 8006510:	4699      	mov	r9, r3
 8006512:	4623      	mov	r3, r4
 8006514:	eb18 0303 	adds.w	r3, r8, r3
 8006518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800651c:	462b      	mov	r3, r5
 800651e:	eb49 0303 	adc.w	r3, r9, r3
 8006522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006532:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006536:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800653a:	460b      	mov	r3, r1
 800653c:	18db      	adds	r3, r3, r3
 800653e:	653b      	str	r3, [r7, #80]	; 0x50
 8006540:	4613      	mov	r3, r2
 8006542:	eb42 0303 	adc.w	r3, r2, r3
 8006546:	657b      	str	r3, [r7, #84]	; 0x54
 8006548:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800654c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006550:	f7f9 fe3e 	bl	80001d0 <__aeabi_uldivmod>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4b61      	ldr	r3, [pc, #388]	; (80066e0 <UART_SetConfig+0x2d4>)
 800655a:	fba3 2302 	umull	r2, r3, r3, r2
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	011c      	lsls	r4, r3, #4
 8006562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006566:	2200      	movs	r2, #0
 8006568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800656c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006570:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	1891      	adds	r1, r2, r2
 800657a:	64b9      	str	r1, [r7, #72]	; 0x48
 800657c:	415b      	adcs	r3, r3
 800657e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006580:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006584:	4641      	mov	r1, r8
 8006586:	eb12 0a01 	adds.w	sl, r2, r1
 800658a:	4649      	mov	r1, r9
 800658c:	eb43 0b01 	adc.w	fp, r3, r1
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800659c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065a4:	4692      	mov	sl, r2
 80065a6:	469b      	mov	fp, r3
 80065a8:	4643      	mov	r3, r8
 80065aa:	eb1a 0303 	adds.w	r3, sl, r3
 80065ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065b2:	464b      	mov	r3, r9
 80065b4:	eb4b 0303 	adc.w	r3, fp, r3
 80065b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80065bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80065cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80065d0:	460b      	mov	r3, r1
 80065d2:	18db      	adds	r3, r3, r3
 80065d4:	643b      	str	r3, [r7, #64]	; 0x40
 80065d6:	4613      	mov	r3, r2
 80065d8:	eb42 0303 	adc.w	r3, r2, r3
 80065dc:	647b      	str	r3, [r7, #68]	; 0x44
 80065de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80065e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80065e6:	f7f9 fdf3 	bl	80001d0 <__aeabi_uldivmod>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4611      	mov	r1, r2
 80065f0:	4b3b      	ldr	r3, [pc, #236]	; (80066e0 <UART_SetConfig+0x2d4>)
 80065f2:	fba3 2301 	umull	r2, r3, r3, r1
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	2264      	movs	r2, #100	; 0x64
 80065fa:	fb02 f303 	mul.w	r3, r2, r3
 80065fe:	1acb      	subs	r3, r1, r3
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006606:	4b36      	ldr	r3, [pc, #216]	; (80066e0 <UART_SetConfig+0x2d4>)
 8006608:	fba3 2302 	umull	r2, r3, r3, r2
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006614:	441c      	add	r4, r3
 8006616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800661a:	2200      	movs	r2, #0
 800661c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006620:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006624:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006628:	4642      	mov	r2, r8
 800662a:	464b      	mov	r3, r9
 800662c:	1891      	adds	r1, r2, r2
 800662e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006630:	415b      	adcs	r3, r3
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006634:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006638:	4641      	mov	r1, r8
 800663a:	1851      	adds	r1, r2, r1
 800663c:	6339      	str	r1, [r7, #48]	; 0x30
 800663e:	4649      	mov	r1, r9
 8006640:	414b      	adcs	r3, r1
 8006642:	637b      	str	r3, [r7, #52]	; 0x34
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006650:	4659      	mov	r1, fp
 8006652:	00cb      	lsls	r3, r1, #3
 8006654:	4651      	mov	r1, sl
 8006656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800665a:	4651      	mov	r1, sl
 800665c:	00ca      	lsls	r2, r1, #3
 800665e:	4610      	mov	r0, r2
 8006660:	4619      	mov	r1, r3
 8006662:	4603      	mov	r3, r0
 8006664:	4642      	mov	r2, r8
 8006666:	189b      	adds	r3, r3, r2
 8006668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800666c:	464b      	mov	r3, r9
 800666e:	460a      	mov	r2, r1
 8006670:	eb42 0303 	adc.w	r3, r2, r3
 8006674:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006684:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006688:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800668c:	460b      	mov	r3, r1
 800668e:	18db      	adds	r3, r3, r3
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
 8006692:	4613      	mov	r3, r2
 8006694:	eb42 0303 	adc.w	r3, r2, r3
 8006698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800669a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800669e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80066a2:	f7f9 fd95 	bl	80001d0 <__aeabi_uldivmod>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
 80066aa:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <UART_SetConfig+0x2d4>)
 80066ac:	fba3 1302 	umull	r1, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	2164      	movs	r1, #100	; 0x64
 80066b4:	fb01 f303 	mul.w	r3, r1, r3
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	3332      	adds	r3, #50	; 0x32
 80066be:	4a08      	ldr	r2, [pc, #32]	; (80066e0 <UART_SetConfig+0x2d4>)
 80066c0:	fba2 2303 	umull	r2, r3, r2, r3
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	f003 0207 	and.w	r2, r3, #7
 80066ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4422      	add	r2, r4
 80066d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066d4:	e105      	b.n	80068e2 <UART_SetConfig+0x4d6>
 80066d6:	bf00      	nop
 80066d8:	40011000 	.word	0x40011000
 80066dc:	40011400 	.word	0x40011400
 80066e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80066ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80066f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80066f6:	4642      	mov	r2, r8
 80066f8:	464b      	mov	r3, r9
 80066fa:	1891      	adds	r1, r2, r2
 80066fc:	6239      	str	r1, [r7, #32]
 80066fe:	415b      	adcs	r3, r3
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
 8006702:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006706:	4641      	mov	r1, r8
 8006708:	1854      	adds	r4, r2, r1
 800670a:	4649      	mov	r1, r9
 800670c:	eb43 0501 	adc.w	r5, r3, r1
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	f04f 0300 	mov.w	r3, #0
 8006718:	00eb      	lsls	r3, r5, #3
 800671a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800671e:	00e2      	lsls	r2, r4, #3
 8006720:	4614      	mov	r4, r2
 8006722:	461d      	mov	r5, r3
 8006724:	4643      	mov	r3, r8
 8006726:	18e3      	adds	r3, r4, r3
 8006728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800672c:	464b      	mov	r3, r9
 800672e:	eb45 0303 	adc.w	r3, r5, r3
 8006732:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006742:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006752:	4629      	mov	r1, r5
 8006754:	008b      	lsls	r3, r1, #2
 8006756:	4621      	mov	r1, r4
 8006758:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800675c:	4621      	mov	r1, r4
 800675e:	008a      	lsls	r2, r1, #2
 8006760:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006764:	f7f9 fd34 	bl	80001d0 <__aeabi_uldivmod>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4b60      	ldr	r3, [pc, #384]	; (80068f0 <UART_SetConfig+0x4e4>)
 800676e:	fba3 2302 	umull	r2, r3, r3, r2
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	011c      	lsls	r4, r3, #4
 8006776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800677a:	2200      	movs	r2, #0
 800677c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006780:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006784:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006788:	4642      	mov	r2, r8
 800678a:	464b      	mov	r3, r9
 800678c:	1891      	adds	r1, r2, r2
 800678e:	61b9      	str	r1, [r7, #24]
 8006790:	415b      	adcs	r3, r3
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006798:	4641      	mov	r1, r8
 800679a:	1851      	adds	r1, r2, r1
 800679c:	6139      	str	r1, [r7, #16]
 800679e:	4649      	mov	r1, r9
 80067a0:	414b      	adcs	r3, r1
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067b0:	4659      	mov	r1, fp
 80067b2:	00cb      	lsls	r3, r1, #3
 80067b4:	4651      	mov	r1, sl
 80067b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ba:	4651      	mov	r1, sl
 80067bc:	00ca      	lsls	r2, r1, #3
 80067be:	4610      	mov	r0, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	4603      	mov	r3, r0
 80067c4:	4642      	mov	r2, r8
 80067c6:	189b      	adds	r3, r3, r2
 80067c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80067cc:	464b      	mov	r3, r9
 80067ce:	460a      	mov	r2, r1
 80067d0:	eb42 0303 	adc.w	r3, r2, r3
 80067d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80067e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80067f0:	4649      	mov	r1, r9
 80067f2:	008b      	lsls	r3, r1, #2
 80067f4:	4641      	mov	r1, r8
 80067f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067fa:	4641      	mov	r1, r8
 80067fc:	008a      	lsls	r2, r1, #2
 80067fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006802:	f7f9 fce5 	bl	80001d0 <__aeabi_uldivmod>
 8006806:	4602      	mov	r2, r0
 8006808:	460b      	mov	r3, r1
 800680a:	4b39      	ldr	r3, [pc, #228]	; (80068f0 <UART_SetConfig+0x4e4>)
 800680c:	fba3 1302 	umull	r1, r3, r3, r2
 8006810:	095b      	lsrs	r3, r3, #5
 8006812:	2164      	movs	r1, #100	; 0x64
 8006814:	fb01 f303 	mul.w	r3, r1, r3
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	3332      	adds	r3, #50	; 0x32
 800681e:	4a34      	ldr	r2, [pc, #208]	; (80068f0 <UART_SetConfig+0x4e4>)
 8006820:	fba2 2303 	umull	r2, r3, r2, r3
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800682a:	441c      	add	r4, r3
 800682c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006830:	2200      	movs	r2, #0
 8006832:	673b      	str	r3, [r7, #112]	; 0x70
 8006834:	677a      	str	r2, [r7, #116]	; 0x74
 8006836:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800683a:	4642      	mov	r2, r8
 800683c:	464b      	mov	r3, r9
 800683e:	1891      	adds	r1, r2, r2
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	415b      	adcs	r3, r3
 8006844:	60fb      	str	r3, [r7, #12]
 8006846:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800684a:	4641      	mov	r1, r8
 800684c:	1851      	adds	r1, r2, r1
 800684e:	6039      	str	r1, [r7, #0]
 8006850:	4649      	mov	r1, r9
 8006852:	414b      	adcs	r3, r1
 8006854:	607b      	str	r3, [r7, #4]
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	f04f 0300 	mov.w	r3, #0
 800685e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006862:	4659      	mov	r1, fp
 8006864:	00cb      	lsls	r3, r1, #3
 8006866:	4651      	mov	r1, sl
 8006868:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800686c:	4651      	mov	r1, sl
 800686e:	00ca      	lsls	r2, r1, #3
 8006870:	4610      	mov	r0, r2
 8006872:	4619      	mov	r1, r3
 8006874:	4603      	mov	r3, r0
 8006876:	4642      	mov	r2, r8
 8006878:	189b      	adds	r3, r3, r2
 800687a:	66bb      	str	r3, [r7, #104]	; 0x68
 800687c:	464b      	mov	r3, r9
 800687e:	460a      	mov	r2, r1
 8006880:	eb42 0303 	adc.w	r3, r2, r3
 8006884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	663b      	str	r3, [r7, #96]	; 0x60
 8006890:	667a      	str	r2, [r7, #100]	; 0x64
 8006892:	f04f 0200 	mov.w	r2, #0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800689e:	4649      	mov	r1, r9
 80068a0:	008b      	lsls	r3, r1, #2
 80068a2:	4641      	mov	r1, r8
 80068a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068a8:	4641      	mov	r1, r8
 80068aa:	008a      	lsls	r2, r1, #2
 80068ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80068b0:	f7f9 fc8e 	bl	80001d0 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <UART_SetConfig+0x4e4>)
 80068ba:	fba3 1302 	umull	r1, r3, r3, r2
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	2164      	movs	r1, #100	; 0x64
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	3332      	adds	r3, #50	; 0x32
 80068cc:	4a08      	ldr	r2, [pc, #32]	; (80068f0 <UART_SetConfig+0x4e4>)
 80068ce:	fba2 2303 	umull	r2, r3, r2, r3
 80068d2:	095b      	lsrs	r3, r3, #5
 80068d4:	f003 020f 	and.w	r2, r3, #15
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4422      	add	r2, r4
 80068e0:	609a      	str	r2, [r3, #8]
}
 80068e2:	bf00      	nop
 80068e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80068e8:	46bd      	mov	sp, r7
 80068ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ee:	bf00      	nop
 80068f0:	51eb851f 	.word	0x51eb851f

080068f4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80068f4:	b084      	sub	sp, #16
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	f107 001c 	add.w	r0, r7, #28
 8006902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800690a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800690c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800690e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006912:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006914:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006916:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800691a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800691e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800692e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	b004      	add	sp, #16
 8006948:	4770      	bx	lr

0800694a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2203      	movs	r2, #3
 8006970:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0303 	and.w	r3, r3, #3
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80069c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80069c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80069d6:	f023 030f 	bic.w	r3, r3, #15
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	b2db      	uxtb	r3, r3
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3314      	adds	r3, #20
 8006a18:	461a      	mov	r2, r3
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
}  
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a56:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006a5c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006a62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	431a      	orrs	r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0

}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006a96:	2310      	movs	r3, #16
 8006a98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a9a:	2340      	movs	r3, #64	; 0x40
 8006a9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aa8:	f107 0308 	add.w	r3, r7, #8
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ff74 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab8:	2110      	movs	r1, #16
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa18 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006ac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3720      	adds	r7, #32
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b088      	sub	sp, #32
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006ada:	2311      	movs	r3, #17
 8006adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ade:	2340      	movs	r3, #64	; 0x40
 8006ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aec:	f107 0308 	add.w	r3, r7, #8
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ff52 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afc:	2111      	movs	r1, #17
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f9f6 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b06:	69fb      	ldr	r3, [r7, #28]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006b1e:	2312      	movs	r3, #18
 8006b20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b22:	2340      	movs	r3, #64	; 0x40
 8006b24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b2e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b30:	f107 0308 	add.w	r3, r7, #8
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff ff30 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b40:	2112      	movs	r1, #18
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 f9d4 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006b48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b4a:	69fb      	ldr	r3, [r7, #28]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3720      	adds	r7, #32
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b088      	sub	sp, #32
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006b62:	2318      	movs	r3, #24
 8006b64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b66:	2340      	movs	r3, #64	; 0x40
 8006b68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b74:	f107 0308 	add.w	r3, r7, #8
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7ff ff0e 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b84:	2118      	movs	r1, #24
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9b2 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006b8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b8e:	69fb      	ldr	r3, [r7, #28]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006ba6:	2319      	movs	r3, #25
 8006ba8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006baa:	2340      	movs	r3, #64	; 0x40
 8006bac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bb8:	f107 0308 	add.w	r3, r7, #8
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff feec 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc8:	2119      	movs	r1, #25
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f990 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006bd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006be8:	230c      	movs	r3, #12
 8006bea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bf8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	4619      	mov	r1, r3
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff fecb 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006c06:	4a05      	ldr	r2, [pc, #20]	; (8006c1c <SDMMC_CmdStopTransfer+0x40>)
 8006c08:	210c      	movs	r1, #12
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f970 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c12:	69fb      	ldr	r3, [r7, #28]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	05f5e100 	.word	0x05f5e100

08006c20 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006c30:	2307      	movs	r3, #7
 8006c32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c34:	2340      	movs	r3, #64	; 0x40
 8006c36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c40:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c42:	f107 0310 	add.w	r3, r7, #16
 8006c46:	4619      	mov	r1, r3
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff fea7 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c52:	2107      	movs	r1, #7
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f94b 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006c5a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3728      	adds	r7, #40	; 0x28
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b088      	sub	sp, #32
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006c76:	2300      	movs	r3, #0
 8006c78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c84:	f107 0308 	add.w	r3, r7, #8
 8006c88:	4619      	mov	r1, r3
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7ff fe86 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 fb65 	bl	8007360 <SDMMC_GetCmdError>
 8006c96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c98:	69fb      	ldr	r3, [r7, #28]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3720      	adds	r7, #32
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b088      	sub	sp, #32
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006caa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006cae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006cb0:	2308      	movs	r3, #8
 8006cb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cb4:	2340      	movs	r3, #64	; 0x40
 8006cb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cc2:	f107 0308 	add.w	r3, r7, #8
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7ff fe67 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 faf8 	bl	80072c4 <SDMMC_GetCmdResp7>
 8006cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cd6:	69fb      	ldr	r3, [r7, #28]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3720      	adds	r7, #32
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b088      	sub	sp, #32
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006cee:	2337      	movs	r3, #55	; 0x37
 8006cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006cf2:	2340      	movs	r3, #64	; 0x40
 8006cf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d00:	f107 0308 	add.w	r3, r7, #8
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff fe48 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	2137      	movs	r1, #55	; 0x37
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f8ec 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006d18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006d3a:	2329      	movs	r3, #41	; 0x29
 8006d3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d3e:	2340      	movs	r3, #64	; 0x40
 8006d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d42:	2300      	movs	r3, #0
 8006d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d4c:	f107 0308 	add.w	r3, r7, #8
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7ff fe22 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 f9ff 	bl	800715c <SDMMC_GetCmdResp3>
 8006d5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d60:	69fb      	ldr	r3, [r7, #28]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b088      	sub	sp, #32
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006d78:	2306      	movs	r3, #6
 8006d7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d7c:	2340      	movs	r3, #64	; 0x40
 8006d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d8a:	f107 0308 	add.w	r3, r7, #8
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fe03 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d9a:	2106      	movs	r1, #6
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8a7 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006da4:	69fb      	ldr	r3, [r7, #28]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b088      	sub	sp, #32
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006dba:	2333      	movs	r3, #51	; 0x33
 8006dbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dbe:	2340      	movs	r3, #64	; 0x40
 8006dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006dcc:	f107 0308 	add.w	r3, r7, #8
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff fde2 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ddc:	2133      	movs	r1, #51	; 0x33
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f886 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006de4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006de6:	69fb      	ldr	r3, [r7, #28]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3720      	adds	r7, #32
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006e00:	23c0      	movs	r3, #192	; 0xc0
 8006e02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e04:	2300      	movs	r3, #0
 8006e06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e0e:	f107 0308 	add.w	r3, r7, #8
 8006e12:	4619      	mov	r1, r3
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7ff fdc1 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f956 	bl	80070cc <SDMMC_GetCmdResp2>
 8006e20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e22:	69fb      	ldr	r3, [r7, #28]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3720      	adds	r7, #32
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006e3a:	2309      	movs	r3, #9
 8006e3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006e3e:	23c0      	movs	r3, #192	; 0xc0
 8006e40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e4c:	f107 0308 	add.w	r3, r7, #8
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fda2 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f937 	bl	80070cc <SDMMC_GetCmdResp2>
 8006e5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e60:	69fb      	ldr	r3, [r7, #28]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b088      	sub	sp, #32
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e88:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e8a:	f107 0308 	add.w	r3, r7, #8
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff fd83 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	2103      	movs	r1, #3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f99c 	bl	80071d8 <SDMMC_GetCmdResp6>
 8006ea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006eba:	230d      	movs	r3, #13
 8006ebc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ebe:	2340      	movs	r3, #64	; 0x40
 8006ec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ecc:	f107 0308 	add.w	r3, r7, #8
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff fd62 	bl	800699c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006edc:	210d      	movs	r1, #13
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f806 	bl	8006ef0 <SDMMC_GetCmdResp1>
 8006ee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3720      	adds	r7, #32
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b088      	sub	sp, #32
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006efe:	4b70      	ldr	r3, [pc, #448]	; (80070c0 <SDMMC_GetCmdResp1+0x1d0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a70      	ldr	r2, [pc, #448]	; (80070c4 <SDMMC_GetCmdResp1+0x1d4>)
 8006f04:	fba2 2303 	umull	r2, r3, r2, r3
 8006f08:	0a5a      	lsrs	r2, r3, #9
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	fb02 f303 	mul.w	r3, r2, r3
 8006f10:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	1e5a      	subs	r2, r3, #1
 8006f16:	61fa      	str	r2, [r7, #28]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d102      	bne.n	8006f22 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006f1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f20:	e0c9      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f26:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0ef      	beq.n	8006f12 <SDMMC_GetCmdResp1+0x22>
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1ea      	bne.n	8006f12 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2204      	movs	r2, #4
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f4e:	2304      	movs	r3, #4
 8006f50:	e0b1      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d004      	beq.n	8006f68 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e0a6      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	22c5      	movs	r2, #197	; 0xc5
 8006f6c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff fd3e 	bl	80069f0 <SDIO_GetCommandResponse>
 8006f74:	4603      	mov	r3, r0
 8006f76:	461a      	mov	r2, r3
 8006f78:	7afb      	ldrb	r3, [r7, #11]
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d001      	beq.n	8006f82 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e099      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006f82:	2100      	movs	r1, #0
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f7ff fd40 	bl	8006a0a <SDIO_GetResponse>
 8006f8a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	4b4e      	ldr	r3, [pc, #312]	; (80070c8 <SDMMC_GetCmdResp1+0x1d8>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e08d      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	da02      	bge.n	8006fa6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006fa4:	e087      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006fb0:	2340      	movs	r3, #64	; 0x40
 8006fb2:	e080      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006fbe:	2380      	movs	r3, #128	; 0x80
 8006fc0:	e079      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd0:	e071      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fe0:	e069      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff0:	e061      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007000:	e059      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800700c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007010:	e051      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800701c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007020:	e049      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d002      	beq.n	8007032 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800702c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007030:	e041      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800703c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007040:	e039      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800704c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007050:	e031      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d002      	beq.n	8007062 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800705c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007060:	e029      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d002      	beq.n	8007072 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800706c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007070:	e021      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800707c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007080:	e019      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d002      	beq.n	8007092 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800708c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007090:	e011      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d002      	beq.n	80070a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800709c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80070a0:	e009      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f003 0308 	and.w	r3, r3, #8
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d002      	beq.n	80070b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80070ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80070b0:	e001      	b.n	80070b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3720      	adds	r7, #32
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	20000000 	.word	0x20000000
 80070c4:	10624dd3 	.word	0x10624dd3
 80070c8:	fdffe008 	.word	0xfdffe008

080070cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070d4:	4b1f      	ldr	r3, [pc, #124]	; (8007154 <SDMMC_GetCmdResp2+0x88>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <SDMMC_GetCmdResp2+0x8c>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	0a5b      	lsrs	r3, r3, #9
 80070e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e4:	fb02 f303 	mul.w	r3, r2, r3
 80070e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	1e5a      	subs	r2, r3, #1
 80070ee:	60fa      	str	r2, [r7, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d102      	bne.n	80070fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070f8:	e026      	b.n	8007148 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0ef      	beq.n	80070ea <SDMMC_GetCmdResp2+0x1e>
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1ea      	bne.n	80070ea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007118:	f003 0304 	and.w	r3, r3, #4
 800711c:	2b00      	cmp	r3, #0
 800711e:	d004      	beq.n	800712a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2204      	movs	r2, #4
 8007124:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007126:	2304      	movs	r3, #4
 8007128:	e00e      	b.n	8007148 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712e:	f003 0301 	and.w	r3, r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	d004      	beq.n	8007140 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800713c:	2301      	movs	r3, #1
 800713e:	e003      	b.n	8007148 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	22c5      	movs	r2, #197	; 0xc5
 8007144:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	20000000 	.word	0x20000000
 8007158:	10624dd3 	.word	0x10624dd3

0800715c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007164:	4b1a      	ldr	r3, [pc, #104]	; (80071d0 <SDMMC_GetCmdResp3+0x74>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1a      	ldr	r2, [pc, #104]	; (80071d4 <SDMMC_GetCmdResp3+0x78>)
 800716a:	fba2 2303 	umull	r2, r3, r2, r3
 800716e:	0a5b      	lsrs	r3, r3, #9
 8007170:	f241 3288 	movw	r2, #5000	; 0x1388
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	1e5a      	subs	r2, r3, #1
 800717e:	60fa      	str	r2, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007188:	e01b      	b.n	80071c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0ef      	beq.n	800717a <SDMMC_GetCmdResp3+0x1e>
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1ea      	bne.n	800717a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2204      	movs	r2, #4
 80071b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071b6:	2304      	movs	r3, #4
 80071b8:	e003      	b.n	80071c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	22c5      	movs	r2, #197	; 0xc5
 80071be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	20000000 	.word	0x20000000
 80071d4:	10624dd3 	.word	0x10624dd3

080071d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	460b      	mov	r3, r1
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80071e6:	4b35      	ldr	r3, [pc, #212]	; (80072bc <SDMMC_GetCmdResp6+0xe4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a35      	ldr	r2, [pc, #212]	; (80072c0 <SDMMC_GetCmdResp6+0xe8>)
 80071ec:	fba2 2303 	umull	r2, r3, r2, r3
 80071f0:	0a5b      	lsrs	r3, r3, #9
 80071f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	1e5a      	subs	r2, r3, #1
 8007200:	61fa      	str	r2, [r7, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d102      	bne.n	800720c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007206:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800720a:	e052      	b.n	80072b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0ef      	beq.n	80071fc <SDMMC_GetCmdResp6+0x24>
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1ea      	bne.n	80071fc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b00      	cmp	r3, #0
 8007230:	d004      	beq.n	800723c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2204      	movs	r2, #4
 8007236:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007238:	2304      	movs	r3, #4
 800723a:	e03a      	b.n	80072b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d004      	beq.n	8007252 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2201      	movs	r2, #1
 800724c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800724e:	2301      	movs	r3, #1
 8007250:	e02f      	b.n	80072b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff fbcc 	bl	80069f0 <SDIO_GetCommandResponse>
 8007258:	4603      	mov	r3, r0
 800725a:	461a      	mov	r2, r3
 800725c:	7afb      	ldrb	r3, [r7, #11]
 800725e:	4293      	cmp	r3, r2
 8007260:	d001      	beq.n	8007266 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007262:	2301      	movs	r3, #1
 8007264:	e025      	b.n	80072b2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	22c5      	movs	r2, #197	; 0xc5
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800726c:	2100      	movs	r1, #0
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff fbcb 	bl	8006a0a <SDIO_GetResponse>
 8007274:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	b29a      	uxth	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800728a:	2300      	movs	r3, #0
 800728c:	e011      	b.n	80072b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800729c:	e009      	b.n	80072b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80072a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072ac:	e001      	b.n	80072b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80072ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3720      	adds	r7, #32
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000000 	.word	0x20000000
 80072c0:	10624dd3 	.word	0x10624dd3

080072c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80072cc:	4b22      	ldr	r3, [pc, #136]	; (8007358 <SDMMC_GetCmdResp7+0x94>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a22      	ldr	r2, [pc, #136]	; (800735c <SDMMC_GetCmdResp7+0x98>)
 80072d2:	fba2 2303 	umull	r2, r3, r2, r3
 80072d6:	0a5b      	lsrs	r3, r3, #9
 80072d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072dc:	fb02 f303 	mul.w	r3, r2, r3
 80072e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1e5a      	subs	r2, r3, #1
 80072e6:	60fa      	str	r2, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d102      	bne.n	80072f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072f0:	e02c      	b.n	800734c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0ef      	beq.n	80072e2 <SDMMC_GetCmdResp7+0x1e>
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1ea      	bne.n	80072e2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2204      	movs	r2, #4
 800731c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800731e:	2304      	movs	r3, #4
 8007320:	e014      	b.n	800734c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007334:	2301      	movs	r3, #1
 8007336:	e009      	b.n	800734c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2240      	movs	r2, #64	; 0x40
 8007348:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800734a:	2300      	movs	r3, #0
  
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	20000000 	.word	0x20000000
 800735c:	10624dd3 	.word	0x10624dd3

08007360 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007368:	4b11      	ldr	r3, [pc, #68]	; (80073b0 <SDMMC_GetCmdError+0x50>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a11      	ldr	r2, [pc, #68]	; (80073b4 <SDMMC_GetCmdError+0x54>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	0a5b      	lsrs	r3, r3, #9
 8007374:	f241 3288 	movw	r2, #5000	; 0x1388
 8007378:	fb02 f303 	mul.w	r3, r2, r3
 800737c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1e5a      	subs	r2, r3, #1
 8007382:	60fa      	str	r2, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d102      	bne.n	800738e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800738c:	e009      	b.n	80073a2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f1      	beq.n	800737e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	22c5      	movs	r2, #197	; 0xc5
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000000 	.word	0x20000000
 80073b4:	10624dd3 	.word	0x10624dd3

080073b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073b8:	b084      	sub	sp, #16
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	f107 001c 	add.w	r0, r7, #28
 80073c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d122      	bne.n	8007416 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80073e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d105      	bne.n	800740a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fbee 	bl	8008bec <USB_CoreReset>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	e01a      	b.n	800744c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fbe2 	bl	8008bec <USB_CoreReset>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800742c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	639a      	str	r2, [r3, #56]	; 0x38
 800743e:	e005      	b.n	800744c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	2b01      	cmp	r3, #1
 8007450:	d10b      	bne.n	800746a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f043 0206 	orr.w	r2, r3, #6
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f043 0220 	orr.w	r2, r3, #32
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800746a:	7bfb      	ldrb	r3, [r7, #15]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007476:	b004      	add	sp, #16
 8007478:	4770      	bx	lr
	...

0800747c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d165      	bne.n	800755c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4a41      	ldr	r2, [pc, #260]	; (8007598 <USB_SetTurnaroundTime+0x11c>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d906      	bls.n	80074a6 <USB_SetTurnaroundTime+0x2a>
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4a40      	ldr	r2, [pc, #256]	; (800759c <USB_SetTurnaroundTime+0x120>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d202      	bcs.n	80074a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80074a0:	230f      	movs	r3, #15
 80074a2:	617b      	str	r3, [r7, #20]
 80074a4:	e062      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	4a3c      	ldr	r2, [pc, #240]	; (800759c <USB_SetTurnaroundTime+0x120>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d306      	bcc.n	80074bc <USB_SetTurnaroundTime+0x40>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	4a3b      	ldr	r2, [pc, #236]	; (80075a0 <USB_SetTurnaroundTime+0x124>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d202      	bcs.n	80074bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80074b6:	230e      	movs	r3, #14
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	e057      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4a38      	ldr	r2, [pc, #224]	; (80075a0 <USB_SetTurnaroundTime+0x124>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d306      	bcc.n	80074d2 <USB_SetTurnaroundTime+0x56>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4a37      	ldr	r2, [pc, #220]	; (80075a4 <USB_SetTurnaroundTime+0x128>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d202      	bcs.n	80074d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80074cc:	230d      	movs	r3, #13
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	e04c      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	4a33      	ldr	r2, [pc, #204]	; (80075a4 <USB_SetTurnaroundTime+0x128>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d306      	bcc.n	80074e8 <USB_SetTurnaroundTime+0x6c>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	4a32      	ldr	r2, [pc, #200]	; (80075a8 <USB_SetTurnaroundTime+0x12c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d802      	bhi.n	80074e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80074e2:	230c      	movs	r3, #12
 80074e4:	617b      	str	r3, [r7, #20]
 80074e6:	e041      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4a2f      	ldr	r2, [pc, #188]	; (80075a8 <USB_SetTurnaroundTime+0x12c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d906      	bls.n	80074fe <USB_SetTurnaroundTime+0x82>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	4a2e      	ldr	r2, [pc, #184]	; (80075ac <USB_SetTurnaroundTime+0x130>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d802      	bhi.n	80074fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80074f8:	230b      	movs	r3, #11
 80074fa:	617b      	str	r3, [r7, #20]
 80074fc:	e036      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	4a2a      	ldr	r2, [pc, #168]	; (80075ac <USB_SetTurnaroundTime+0x130>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d906      	bls.n	8007514 <USB_SetTurnaroundTime+0x98>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4a29      	ldr	r2, [pc, #164]	; (80075b0 <USB_SetTurnaroundTime+0x134>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d802      	bhi.n	8007514 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800750e:	230a      	movs	r3, #10
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	e02b      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	4a26      	ldr	r2, [pc, #152]	; (80075b0 <USB_SetTurnaroundTime+0x134>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d906      	bls.n	800752a <USB_SetTurnaroundTime+0xae>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	4a25      	ldr	r2, [pc, #148]	; (80075b4 <USB_SetTurnaroundTime+0x138>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d202      	bcs.n	800752a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007524:	2309      	movs	r3, #9
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	e020      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	4a21      	ldr	r2, [pc, #132]	; (80075b4 <USB_SetTurnaroundTime+0x138>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d306      	bcc.n	8007540 <USB_SetTurnaroundTime+0xc4>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4a20      	ldr	r2, [pc, #128]	; (80075b8 <USB_SetTurnaroundTime+0x13c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d802      	bhi.n	8007540 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800753a:	2308      	movs	r3, #8
 800753c:	617b      	str	r3, [r7, #20]
 800753e:	e015      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <USB_SetTurnaroundTime+0x13c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d906      	bls.n	8007556 <USB_SetTurnaroundTime+0xda>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4a1c      	ldr	r2, [pc, #112]	; (80075bc <USB_SetTurnaroundTime+0x140>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d202      	bcs.n	8007556 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007550:	2307      	movs	r3, #7
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	e00a      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007556:	2306      	movs	r3, #6
 8007558:	617b      	str	r3, [r7, #20]
 800755a:	e007      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800755c:	79fb      	ldrb	r3, [r7, #7]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d102      	bne.n	8007568 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007562:	2309      	movs	r3, #9
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	e001      	b.n	800756c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007568:	2309      	movs	r3, #9
 800756a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	68da      	ldr	r2, [r3, #12]
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	029b      	lsls	r3, r3, #10
 8007580:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007584:	431a      	orrs	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	00d8acbf 	.word	0x00d8acbf
 800759c:	00e4e1c0 	.word	0x00e4e1c0
 80075a0:	00f42400 	.word	0x00f42400
 80075a4:	01067380 	.word	0x01067380
 80075a8:	011a499f 	.word	0x011a499f
 80075ac:	01312cff 	.word	0x01312cff
 80075b0:	014ca43f 	.word	0x014ca43f
 80075b4:	016e3600 	.word	0x016e3600
 80075b8:	01a6ab1f 	.word	0x01a6ab1f
 80075bc:	01e84800 	.word	0x01e84800

080075c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f043 0201 	orr.w	r2, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f023 0201 	bic.w	r2, r3, #1
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007610:	2300      	movs	r3, #0
 8007612:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d115      	bne.n	8007652 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007632:	2001      	movs	r0, #1
 8007634:	f7fa f8d8 	bl	80017e8 <HAL_Delay>
      ms++;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3301      	adds	r3, #1
 800763c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 fa45 	bl	8008ace <USB_GetMode>
 8007644:	4603      	mov	r3, r0
 8007646:	2b01      	cmp	r3, #1
 8007648:	d01e      	beq.n	8007688 <USB_SetCurrentMode+0x84>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b31      	cmp	r3, #49	; 0x31
 800764e:	d9f0      	bls.n	8007632 <USB_SetCurrentMode+0x2e>
 8007650:	e01a      	b.n	8007688 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d115      	bne.n	8007684 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007664:	2001      	movs	r0, #1
 8007666:	f7fa f8bf 	bl	80017e8 <HAL_Delay>
      ms++;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3301      	adds	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fa2c 	bl	8008ace <USB_GetMode>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <USB_SetCurrentMode+0x84>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b31      	cmp	r3, #49	; 0x31
 8007680:	d9f0      	bls.n	8007664 <USB_SetCurrentMode+0x60>
 8007682:	e001      	b.n	8007688 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e005      	b.n	8007694 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b32      	cmp	r3, #50	; 0x32
 800768c:	d101      	bne.n	8007692 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800769c:	b084      	sub	sp, #16
 800769e:	b580      	push	{r7, lr}
 80076a0:	b086      	sub	sp, #24
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076b6:	2300      	movs	r3, #0
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	e009      	b.n	80076d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	3340      	adds	r3, #64	; 0x40
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4413      	add	r3, r2
 80076c6:	2200      	movs	r2, #0
 80076c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	3301      	adds	r3, #1
 80076ce:	613b      	str	r3, [r7, #16]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2b0e      	cmp	r3, #14
 80076d4:	d9f2      	bls.n	80076bc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11c      	bne.n	8007716 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076ea:	f043 0302 	orr.w	r3, r3, #2
 80076ee:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	639a      	str	r2, [r3, #56]	; 0x38
 8007714:	e00b      	b.n	800772e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007734:	461a      	mov	r2, r3
 8007736:	2300      	movs	r3, #0
 8007738:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007740:	4619      	mov	r1, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007748:	461a      	mov	r2, r3
 800774a:	680b      	ldr	r3, [r1, #0]
 800774c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800774e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007750:	2b01      	cmp	r3, #1
 8007752:	d10c      	bne.n	800776e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007756:	2b00      	cmp	r3, #0
 8007758:	d104      	bne.n	8007764 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800775a:	2100      	movs	r1, #0
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f965 	bl	8007a2c <USB_SetDevSpeed>
 8007762:	e008      	b.n	8007776 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007764:	2101      	movs	r1, #1
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f960 	bl	8007a2c <USB_SetDevSpeed>
 800776c:	e003      	b.n	8007776 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800776e:	2103      	movs	r1, #3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f95b 	bl	8007a2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007776:	2110      	movs	r1, #16
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f8f3 	bl	8007964 <USB_FlushTxFifo>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f91f 	bl	80079cc <USB_FlushRxFifo>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800779e:	461a      	mov	r2, r3
 80077a0:	2300      	movs	r3, #0
 80077a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077aa:	461a      	mov	r2, r3
 80077ac:	2300      	movs	r3, #0
 80077ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b6:	461a      	mov	r2, r3
 80077b8:	2300      	movs	r3, #0
 80077ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077bc:	2300      	movs	r3, #0
 80077be:	613b      	str	r3, [r7, #16]
 80077c0:	e043      	b.n	800784a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d8:	d118      	bne.n	800780c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	461a      	mov	r2, r3
 80077ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	e013      	b.n	800781e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007802:	461a      	mov	r2, r3
 8007804:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	e008      	b.n	800781e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007818:	461a      	mov	r2, r3
 800781a:	2300      	movs	r3, #0
 800781c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782a:	461a      	mov	r2, r3
 800782c:	2300      	movs	r3, #0
 800782e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4413      	add	r3, r2
 8007838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783c:	461a      	mov	r2, r3
 800783e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007842:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	3301      	adds	r3, #1
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	429a      	cmp	r2, r3
 8007850:	d3b7      	bcc.n	80077c2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007852:	2300      	movs	r3, #0
 8007854:	613b      	str	r3, [r7, #16]
 8007856:	e043      	b.n	80078e0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800786a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800786e:	d118      	bne.n	80078a2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007882:	461a      	mov	r2, r3
 8007884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007888:	6013      	str	r3, [r2, #0]
 800788a:	e013      	b.n	80078b4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007898:	461a      	mov	r2, r3
 800789a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800789e:	6013      	str	r3, [r2, #0]
 80078a0:	e008      	b.n	80078b4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ae:	461a      	mov	r2, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	461a      	mov	r2, r3
 80078c2:	2300      	movs	r3, #0
 80078c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d2:	461a      	mov	r2, r3
 80078d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	3301      	adds	r3, #1
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d3b7      	bcc.n	8007858 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007908:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	2b00      	cmp	r3, #0
 800790e:	d105      	bne.n	800791c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	f043 0210 	orr.w	r2, r3, #16
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699a      	ldr	r2, [r3, #24]
 8007920:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <USB_DevInit+0x2c4>)
 8007922:	4313      	orrs	r3, r2
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d005      	beq.n	800793a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f043 0208 	orr.w	r2, r3, #8
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800793a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d107      	bne.n	8007950 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007948:	f043 0304 	orr.w	r3, r3, #4
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007950:	7dfb      	ldrb	r3, [r7, #23]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800795c:	b004      	add	sp, #16
 800795e:	4770      	bx	lr
 8007960:	803c3800 	.word	0x803c3800

08007964 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3301      	adds	r3, #1
 8007976:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4a13      	ldr	r2, [pc, #76]	; (80079c8 <USB_FlushTxFifo+0x64>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d901      	bls.n	8007984 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e01b      	b.n	80079bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	2b00      	cmp	r3, #0
 800798a:	daf2      	bge.n	8007972 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	019b      	lsls	r3, r3, #6
 8007994:	f043 0220 	orr.w	r2, r3, #32
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3301      	adds	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4a08      	ldr	r2, [pc, #32]	; (80079c8 <USB_FlushTxFifo+0x64>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d901      	bls.n	80079ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e006      	b.n	80079bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	d0f0      	beq.n	800799c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	00030d40 	.word	0x00030d40

080079cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4a11      	ldr	r2, [pc, #68]	; (8007a28 <USB_FlushRxFifo+0x5c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d901      	bls.n	80079ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e018      	b.n	8007a1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	daf2      	bge.n	80079d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2210      	movs	r2, #16
 80079fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3301      	adds	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <USB_FlushRxFifo+0x5c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d901      	bls.n	8007a0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e006      	b.n	8007a1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b10      	cmp	r3, #16
 8007a18:	d0f0      	beq.n	80079fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	00030d40 	.word	0x00030d40

08007a2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	78fb      	ldrb	r3, [r7, #3]
 8007a46:	68f9      	ldr	r1, [r7, #12]
 8007a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3714      	adds	r7, #20
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b087      	sub	sp, #28
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0306 	and.w	r3, r3, #6
 8007a76:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d102      	bne.n	8007a84 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	75fb      	strb	r3, [r7, #23]
 8007a82:	e00a      	b.n	8007a9a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d002      	beq.n	8007a90 <USB_GetDevSpeed+0x32>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b06      	cmp	r3, #6
 8007a8e:	d102      	bne.n	8007a96 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007a90:	2302      	movs	r3, #2
 8007a92:	75fb      	strb	r3, [r7, #23]
 8007a94:	e001      	b.n	8007a9a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007a96:	230f      	movs	r3, #15
 8007a98:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d13a      	bne.n	8007b3a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aca:	69da      	ldr	r2, [r3, #28]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	f003 030f 	and.w	r3, r3, #15
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	68f9      	ldr	r1, [r7, #12]
 8007ade:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d155      	bne.n	8007ba8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	791b      	ldrb	r3, [r3, #4]
 8007b16:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b18:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	059b      	lsls	r3, r3, #22
 8007b1e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b20:	4313      	orrs	r3, r2
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	0151      	lsls	r1, r2, #5
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	440a      	add	r2, r1
 8007b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	e036      	b.n	8007ba8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b40:	69da      	ldr	r2, [r3, #28]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	2101      	movs	r1, #1
 8007b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b50:	041b      	lsls	r3, r3, #16
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d11a      	bne.n	8007ba8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	791b      	ldrb	r3, [r3, #4]
 8007b8c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	4313      	orrs	r3, r2
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	0151      	lsls	r1, r2, #5
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	440a      	add	r2, r1
 8007b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ba6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d161      	bne.n	8007c98 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bea:	d11f      	bne.n	8007c2c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c0a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	0151      	lsls	r1, r2, #5
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	440a      	add	r2, r1
 8007c22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	f003 030f 	and.w	r3, r3, #15
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	43db      	mvns	r3, r3
 8007c46:	68f9      	ldr	r1, [r7, #12]
 8007c48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c56:	69da      	ldr	r2, [r3, #28]
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	2101      	movs	r1, #1
 8007c62:	fa01 f303 	lsl.w	r3, r1, r3
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c70:	4013      	ands	r3, r2
 8007c72:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	0159      	lsls	r1, r3, #5
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	440b      	add	r3, r1
 8007c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4b35      	ldr	r3, [pc, #212]	; (8007d68 <USB_DeactivateEndpoint+0x1b0>)
 8007c92:	4013      	ands	r3, r2
 8007c94:	600b      	str	r3, [r1, #0]
 8007c96:	e060      	b.n	8007d5a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cae:	d11f      	bne.n	8007cf0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	0151      	lsls	r1, r2, #5
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	440a      	add	r2, r1
 8007cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007cce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	0151      	lsls	r1, r2, #5
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	440a      	add	r2, r1
 8007ce6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	f003 030f 	and.w	r3, r3, #15
 8007d00:	2101      	movs	r1, #1
 8007d02:	fa01 f303 	lsl.w	r3, r1, r3
 8007d06:	041b      	lsls	r3, r3, #16
 8007d08:	43db      	mvns	r3, r3
 8007d0a:	68f9      	ldr	r1, [r7, #12]
 8007d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d10:	4013      	ands	r3, r2
 8007d12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	f003 030f 	and.w	r3, r3, #15
 8007d24:	2101      	movs	r1, #1
 8007d26:	fa01 f303 	lsl.w	r3, r1, r3
 8007d2a:	041b      	lsls	r3, r3, #16
 8007d2c:	43db      	mvns	r3, r3
 8007d2e:	68f9      	ldr	r1, [r7, #12]
 8007d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d34:	4013      	ands	r3, r2
 8007d36:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	0159      	lsls	r1, r3, #5
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	440b      	add	r3, r1
 8007d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d52:	4619      	mov	r1, r3
 8007d54:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <USB_DeactivateEndpoint+0x1b4>)
 8007d56:	4013      	ands	r3, r2
 8007d58:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	ec337800 	.word	0xec337800
 8007d6c:	eff37800 	.word	0xeff37800

08007d70 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08a      	sub	sp, #40	; 0x28
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	f040 815c 	bne.w	800804a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d132      	bne.n	8007e00 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	0151      	lsls	r1, r2, #5
 8007dac:	69fa      	ldr	r2, [r7, #28]
 8007dae:	440a      	add	r2, r1
 8007db0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007db8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007dbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	69ba      	ldr	r2, [r7, #24]
 8007dce:	0151      	lsls	r1, r2, #5
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	440a      	add	r2, r1
 8007dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ddc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	015a      	lsls	r2, r3, #5
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	69ba      	ldr	r2, [r7, #24]
 8007dee:	0151      	lsls	r1, r2, #5
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	440a      	add	r2, r1
 8007df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df8:	0cdb      	lsrs	r3, r3, #19
 8007dfa:	04db      	lsls	r3, r3, #19
 8007dfc:	6113      	str	r3, [r2, #16]
 8007dfe:	e074      	b.n	8007eea <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1a:	0cdb      	lsrs	r3, r3, #19
 8007e1c:	04db      	lsls	r3, r3, #19
 8007e1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	69fa      	ldr	r2, [r7, #28]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e3a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e3e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e50:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6999      	ldr	r1, [r3, #24]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	440b      	add	r3, r1
 8007e5c:	1e59      	subs	r1, r3, #1
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e66:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007e68:	4b9d      	ldr	r3, [pc, #628]	; (80080e0 <USB_EPStartXfer+0x370>)
 8007e6a:	400b      	ands	r3, r1
 8007e6c:	69b9      	ldr	r1, [r7, #24]
 8007e6e:	0148      	lsls	r0, r1, #5
 8007e70:	69f9      	ldr	r1, [r7, #28]
 8007e72:	4401      	add	r1, r0
 8007e74:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	015a      	lsls	r2, r3, #5
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	4413      	add	r3, r2
 8007e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e92:	69b9      	ldr	r1, [r7, #24]
 8007e94:	0148      	lsls	r0, r1, #5
 8007e96:	69f9      	ldr	r1, [r7, #28]
 8007e98:	4401      	add	r1, r0
 8007e9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	791b      	ldrb	r3, [r3, #4]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d11f      	bne.n	8007eea <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ec8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007eca:	69bb      	ldr	r3, [r7, #24]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	0151      	lsls	r1, r2, #5
 8007edc:	69fa      	ldr	r2, [r7, #28]
 8007ede:	440a      	add	r2, r1
 8007ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ee8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007eea:	79fb      	ldrb	r3, [r7, #7]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d14b      	bne.n	8007f88 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d009      	beq.n	8007f0c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f04:	461a      	mov	r2, r3
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	791b      	ldrb	r3, [r3, #4]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d128      	bne.n	8007f66 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d110      	bne.n	8007f46 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	0151      	lsls	r1, r2, #5
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	440a      	add	r2, r1
 8007f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	e00f      	b.n	8007f66 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	0151      	lsls	r1, r2, #5
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	440a      	add	r2, r1
 8007f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f64:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	0151      	lsls	r1, r2, #5
 8007f78:	69fa      	ldr	r2, [r7, #28]
 8007f7a:	440a      	add	r2, r1
 8007f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	e133      	b.n	80081f0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fa6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	791b      	ldrb	r3, [r3, #4]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d015      	beq.n	8007fdc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 811b 	beq.w	80081f0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 030f 	and.w	r3, r3, #15
 8007fca:	2101      	movs	r1, #1
 8007fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd0:	69f9      	ldr	r1, [r7, #28]
 8007fd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	634b      	str	r3, [r1, #52]	; 0x34
 8007fda:	e109      	b.n	80081f0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d110      	bne.n	800800e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	015a      	lsls	r2, r3, #5
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	0151      	lsls	r1, r2, #5
 8007ffe:	69fa      	ldr	r2, [r7, #28]
 8008000:	440a      	add	r2, r1
 8008002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008006:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	e00f      	b.n	800802e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	4413      	add	r3, r2
 8008016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	440a      	add	r2, r1
 8008024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800802c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6919      	ldr	r1, [r3, #16]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	781a      	ldrb	r2, [r3, #0]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	b298      	uxth	r0, r3
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	4603      	mov	r3, r0
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 fade 	bl	8008604 <USB_WritePacket>
 8008048:	e0d2      	b.n	80081f0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	69ba      	ldr	r2, [r7, #24]
 800805a:	0151      	lsls	r1, r2, #5
 800805c:	69fa      	ldr	r2, [r7, #28]
 800805e:	440a      	add	r2, r1
 8008060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008064:	0cdb      	lsrs	r3, r3, #19
 8008066:	04db      	lsls	r3, r3, #19
 8008068:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	0151      	lsls	r1, r2, #5
 800807c:	69fa      	ldr	r2, [r7, #28]
 800807e:	440a      	add	r2, r1
 8008080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008084:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008088:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800808c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d126      	bne.n	80080e4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a2:	691a      	ldr	r2, [r3, #16]
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ac:	69b9      	ldr	r1, [r7, #24]
 80080ae:	0148      	lsls	r0, r1, #5
 80080b0:	69f9      	ldr	r1, [r7, #28]
 80080b2:	4401      	add	r1, r0
 80080b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80080b8:	4313      	orrs	r3, r2
 80080ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080da:	6113      	str	r3, [r2, #16]
 80080dc:	e03a      	b.n	8008154 <USB_EPStartXfer+0x3e4>
 80080de:	bf00      	nop
 80080e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	699a      	ldr	r2, [r3, #24]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	4413      	add	r3, r2
 80080ee:	1e5a      	subs	r2, r3, #1
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	8afa      	ldrh	r2, [r7, #22]
 8008100:	fb03 f202 	mul.w	r2, r3, r2
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	8afb      	ldrh	r3, [r7, #22]
 8008118:	04d9      	lsls	r1, r3, #19
 800811a:	4b38      	ldr	r3, [pc, #224]	; (80081fc <USB_EPStartXfer+0x48c>)
 800811c:	400b      	ands	r3, r1
 800811e:	69b9      	ldr	r1, [r7, #24]
 8008120:	0148      	lsls	r0, r1, #5
 8008122:	69f9      	ldr	r1, [r7, #28]
 8008124:	4401      	add	r1, r0
 8008126:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800812a:	4313      	orrs	r3, r2
 800812c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008144:	69b9      	ldr	r1, [r7, #24]
 8008146:	0148      	lsls	r0, r1, #5
 8008148:	69f9      	ldr	r1, [r7, #28]
 800814a:	4401      	add	r1, r0
 800814c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008150:	4313      	orrs	r3, r2
 8008152:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008154:	79fb      	ldrb	r3, [r7, #7]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d10d      	bne.n	8008176 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	6919      	ldr	r1, [r3, #16]
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	4413      	add	r3, r2
 800816e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008172:	460a      	mov	r2, r1
 8008174:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	791b      	ldrb	r3, [r3, #4]
 800817a:	2b01      	cmp	r3, #1
 800817c:	d128      	bne.n	80081d0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818a:	2b00      	cmp	r3, #0
 800818c:	d110      	bne.n	80081b0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	015a      	lsls	r2, r3, #5
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	4413      	add	r3, r2
 8008196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	0151      	lsls	r1, r2, #5
 80081a0:	69fa      	ldr	r2, [r7, #28]
 80081a2:	440a      	add	r2, r1
 80081a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	e00f      	b.n	80081d0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	0151      	lsls	r1, r2, #5
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	440a      	add	r2, r1
 80081c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	0151      	lsls	r1, r2, #5
 80081e2:	69fa      	ldr	r2, [r7, #28]
 80081e4:	440a      	add	r2, r1
 80081e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3720      	adds	r7, #32
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	1ff80000 	.word	0x1ff80000

08008200 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b01      	cmp	r3, #1
 800821e:	f040 80ce 	bne.w	80083be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d132      	bne.n	8008290 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	4413      	add	r3, r2
 8008232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	0151      	lsls	r1, r2, #5
 800823c:	697a      	ldr	r2, [r7, #20]
 800823e:	440a      	add	r2, r1
 8008240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008244:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008248:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800824c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	440a      	add	r2, r1
 8008264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800826c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	0151      	lsls	r1, r2, #5
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	440a      	add	r2, r1
 8008284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008288:	0cdb      	lsrs	r3, r3, #19
 800828a:	04db      	lsls	r3, r3, #19
 800828c:	6113      	str	r3, [r2, #16]
 800828e:	e04e      	b.n	800832e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	0151      	lsls	r1, r2, #5
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	440a      	add	r2, r1
 80082a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082aa:	0cdb      	lsrs	r3, r3, #19
 80082ac:	04db      	lsls	r3, r3, #19
 80082ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	015a      	lsls	r2, r3, #5
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	4413      	add	r3, r2
 80082b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	0151      	lsls	r1, r2, #5
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	440a      	add	r2, r1
 80082c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80082ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80082d2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	699a      	ldr	r2, [r3, #24]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d903      	bls.n	80082e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	0151      	lsls	r1, r2, #5
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	440a      	add	r2, r1
 80082fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008302:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008306:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800831e:	6939      	ldr	r1, [r7, #16]
 8008320:	0148      	lsls	r0, r1, #5
 8008322:	6979      	ldr	r1, [r7, #20]
 8008324:	4401      	add	r1, r0
 8008326:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800832a:	4313      	orrs	r3, r2
 800832c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d11e      	bne.n	8008372 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d009      	beq.n	8008350 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008348:	461a      	mov	r2, r3
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	440a      	add	r2, r1
 8008366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	e097      	b.n	80084a2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	440a      	add	r2, r1
 8008388:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800838c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008390:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 8083 	beq.w	80084a2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	2101      	movs	r1, #1
 80083ae:	fa01 f303 	lsl.w	r3, r1, r3
 80083b2:	6979      	ldr	r1, [r7, #20]
 80083b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083b8:	4313      	orrs	r3, r2
 80083ba:	634b      	str	r3, [r1, #52]	; 0x34
 80083bc:	e071      	b.n	80084a2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d8:	0cdb      	lsrs	r3, r3, #19
 80083da:	04db      	lsls	r3, r3, #19
 80083dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80083fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008400:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	68da      	ldr	r2, [r3, #12]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	693a      	ldr	r2, [r7, #16]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008434:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008450:	6939      	ldr	r1, [r7, #16]
 8008452:	0148      	lsls	r0, r1, #5
 8008454:	6979      	ldr	r1, [r7, #20]
 8008456:	4401      	add	r1, r0
 8008458:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800845c:	4313      	orrs	r3, r2
 800845e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008460:	79fb      	ldrb	r3, [r7, #7]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d10d      	bne.n	8008482 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	6919      	ldr	r1, [r3, #16]
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	015a      	lsls	r2, r3, #5
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	4413      	add	r3, r2
 800847a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800847e:	460a      	mov	r2, r1
 8008480:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	4413      	add	r3, r2
 800848a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	0151      	lsls	r1, r2, #5
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	440a      	add	r2, r1
 8008498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800849c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	371c      	adds	r7, #28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	785b      	ldrb	r3, [r3, #1]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d14a      	bne.n	8008564 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084e6:	f040 8086 	bne.w	80085f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	015a      	lsls	r2, r3, #5
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	4413      	add	r3, r2
 80084f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	7812      	ldrb	r2, [r2, #0]
 80084fe:	0151      	lsls	r1, r2, #5
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	440a      	add	r2, r1
 8008504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008508:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800850c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	7812      	ldrb	r2, [r2, #0]
 8008522:	0151      	lsls	r1, r2, #5
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	440a      	add	r2, r1
 8008528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008530:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f242 7210 	movw	r2, #10000	; 0x2710
 800853e:	4293      	cmp	r3, r2
 8008540:	d902      	bls.n	8008548 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	75fb      	strb	r3, [r7, #23]
          break;
 8008546:	e056      	b.n	80085f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	015a      	lsls	r2, r3, #5
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	4413      	add	r3, r2
 8008552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800855c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008560:	d0e7      	beq.n	8008532 <USB_EPStopXfer+0x82>
 8008562:	e048      	b.n	80085f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800857c:	d13b      	bne.n	80085f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	440a      	add	r2, r1
 8008598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	7812      	ldrb	r2, [r2, #0]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d902      	bls.n	80085dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	75fb      	strb	r3, [r7, #23]
          break;
 80085da:	e00c      	b.n	80085f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085f4:	d0e7      	beq.n	80085c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008604:	b480      	push	{r7}
 8008606:	b089      	sub	sp, #36	; 0x24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	4611      	mov	r1, r2
 8008610:	461a      	mov	r2, r3
 8008612:	460b      	mov	r3, r1
 8008614:	71fb      	strb	r3, [r7, #7]
 8008616:	4613      	mov	r3, r2
 8008618:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008622:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d123      	bne.n	8008672 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800862a:	88bb      	ldrh	r3, [r7, #4]
 800862c:	3303      	adds	r3, #3
 800862e:	089b      	lsrs	r3, r3, #2
 8008630:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008632:	2300      	movs	r3, #0
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	e018      	b.n	800866a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	031a      	lsls	r2, r3, #12
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	4413      	add	r3, r2
 8008640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008644:	461a      	mov	r2, r3
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	3301      	adds	r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	3301      	adds	r3, #1
 8008656:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	3301      	adds	r3, #1
 800865c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	3301      	adds	r3, #1
 8008662:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	3301      	adds	r3, #1
 8008668:	61bb      	str	r3, [r7, #24]
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	429a      	cmp	r2, r3
 8008670:	d3e2      	bcc.n	8008638 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3724      	adds	r7, #36	; 0x24
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008680:	b480      	push	{r7}
 8008682:	b08b      	sub	sp, #44	; 0x2c
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008696:	88fb      	ldrh	r3, [r7, #6]
 8008698:	089b      	lsrs	r3, r3, #2
 800869a:	b29b      	uxth	r3, r3
 800869c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	623b      	str	r3, [r7, #32]
 80086aa:	e014      	b.n	80086d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	3301      	adds	r3, #1
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	3301      	adds	r3, #1
 80086c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	3301      	adds	r3, #1
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	3301      	adds	r3, #1
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80086d0:	6a3b      	ldr	r3, [r7, #32]
 80086d2:	3301      	adds	r3, #1
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	6a3a      	ldr	r2, [r7, #32]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d3e6      	bcc.n	80086ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80086de:	8bfb      	ldrh	r3, [r7, #30]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01e      	beq.n	8008722 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ee:	461a      	mov	r2, r3
 80086f0:	f107 0310 	add.w	r3, r7, #16
 80086f4:	6812      	ldr	r2, [r2, #0]
 80086f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	6a3b      	ldr	r3, [r7, #32]
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	fa22 f303 	lsr.w	r3, r2, r3
 8008704:	b2da      	uxtb	r2, r3
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	701a      	strb	r2, [r3, #0]
      i++;
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	3301      	adds	r3, #1
 800870e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	3301      	adds	r3, #1
 8008714:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008716:	8bfb      	ldrh	r3, [r7, #30]
 8008718:	3b01      	subs	r3, #1
 800871a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800871c:	8bfb      	ldrh	r3, [r7, #30]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1ea      	bne.n	80086f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008724:	4618      	mov	r0, r3
 8008726:	372c      	adds	r7, #44	; 0x2c
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d12c      	bne.n	80087a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	db12      	blt.n	8008784 <USB_EPSetStall+0x54>
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00f      	beq.n	8008784 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	015a      	lsls	r2, r3, #5
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4413      	add	r3, r2
 800876c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	0151      	lsls	r1, r2, #5
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	440a      	add	r2, r1
 800877a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800877e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008782:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	0151      	lsls	r1, r2, #5
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	440a      	add	r2, r1
 800879a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800879e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087a2:	6013      	str	r3, [r2, #0]
 80087a4:	e02b      	b.n	80087fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	015a      	lsls	r2, r3, #5
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	db12      	blt.n	80087de <USB_EPSetStall+0xae>
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00f      	beq.n	80087de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	015a      	lsls	r2, r3, #5
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	4413      	add	r3, r2
 80087c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	0151      	lsls	r1, r2, #5
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	440a      	add	r2, r1
 80087d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80087dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	0151      	lsls	r1, r2, #5
 80087f0:	68fa      	ldr	r2, [r7, #12]
 80087f2:	440a      	add	r2, r1
 80087f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80087fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	785b      	ldrb	r3, [r3, #1]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d128      	bne.n	800887a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008846:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	791b      	ldrb	r3, [r3, #4]
 800884c:	2b03      	cmp	r3, #3
 800884e:	d003      	beq.n	8008858 <USB_EPClearStall+0x4c>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	791b      	ldrb	r3, [r3, #4]
 8008854:	2b02      	cmp	r3, #2
 8008856:	d138      	bne.n	80088ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	0151      	lsls	r1, r2, #5
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	440a      	add	r2, r1
 800886e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	e027      	b.n	80088ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	0151      	lsls	r1, r2, #5
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	440a      	add	r2, r1
 8008890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008898:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	791b      	ldrb	r3, [r3, #4]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d003      	beq.n	80088aa <USB_EPClearStall+0x9e>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	791b      	ldrb	r3, [r3, #4]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d10f      	bne.n	80088ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	460b      	mov	r3, r1
 80088e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80088fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	011b      	lsls	r3, r3, #4
 8008908:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800890c:	68f9      	ldr	r1, [r7, #12]
 800890e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008912:	4313      	orrs	r3, r2
 8008914:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008916:	2300      	movs	r3, #0
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800893e:	f023 0303 	bic.w	r3, r3, #3
 8008942:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008952:	f023 0302 	bic.w	r3, r3, #2
 8008956:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008958:	2300      	movs	r3, #0
}
 800895a:	4618      	mov	r0, r3
 800895c:	3714      	adds	r7, #20
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008966:	b480      	push	{r7}
 8008968:	b085      	sub	sp, #20
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008980:	f023 0303 	bic.w	r3, r3, #3
 8008984:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008994:	f043 0302 	orr.w	r3, r3, #2
 8008998:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	695b      	ldr	r3, [r3, #20]
 80089b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	4013      	ands	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80089c0:	68fb      	ldr	r3, [r7, #12]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b085      	sub	sp, #20
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	4013      	ands	r3, r2
 80089f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	0c1b      	lsrs	r3, r3, #16
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b085      	sub	sp, #20
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a14:	699b      	ldr	r3, [r3, #24]
 8008a16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	4013      	ands	r3, r2
 8008a24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	b29b      	uxth	r3, r3
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b085      	sub	sp, #20
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a46:	78fb      	ldrb	r3, [r7, #3]
 8008a48:	015a      	lsls	r2, r3, #5
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	4013      	ands	r3, r2
 8008a62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a64:	68bb      	ldr	r3, [r7, #8]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b087      	sub	sp, #28
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a96:	78fb      	ldrb	r3, [r7, #3]
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa2:	01db      	lsls	r3, r3, #7
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008aac:	78fb      	ldrb	r3, [r7, #3]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	693a      	ldr	r2, [r7, #16]
 8008abc:	4013      	ands	r3, r2
 8008abe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	f003 0301 	and.w	r3, r3, #1
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b085      	sub	sp, #20
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b08:	f023 0307 	bic.w	r3, r3, #7
 8008b0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b087      	sub	sp, #28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	60f8      	str	r0, [r7, #12]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	607a      	str	r2, [r7, #4]
 8008b3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	333c      	adds	r3, #60	; 0x3c
 8008b46:	3304      	adds	r3, #4
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	4a26      	ldr	r2, [pc, #152]	; (8008be8 <USB_EP0_OutStart+0xb8>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d90a      	bls.n	8008b6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b64:	d101      	bne.n	8008b6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	e037      	b.n	8008bda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b70:	461a      	mov	r2, r3
 8008b72:	2300      	movs	r3, #0
 8008b74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b98:	f043 0318 	orr.w	r3, r3, #24
 8008b9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	697a      	ldr	r2, [r7, #20]
 8008ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008bb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008bb2:	7afb      	ldrb	r3, [r7, #11]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d10f      	bne.n	8008bd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	697a      	ldr	r2, [r7, #20]
 8008bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008bd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008bd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	371c      	adds	r7, #28
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	4f54300a 	.word	0x4f54300a

08008bec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	4a13      	ldr	r2, [pc, #76]	; (8008c50 <USB_CoreReset+0x64>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d901      	bls.n	8008c0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e01b      	b.n	8008c42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	daf2      	bge.n	8008bf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f043 0201 	orr.w	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3301      	adds	r3, #1
 8008c26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <USB_CoreReset+0x64>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d901      	bls.n	8008c34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e006      	b.n	8008c42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d0f0      	beq.n	8008c22 <USB_CoreReset+0x36>

  return HAL_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3714      	adds	r7, #20
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	00030d40 	.word	0x00030d40

08008c54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008c58:	4904      	ldr	r1, [pc, #16]	; (8008c6c <MX_FATFS_Init+0x18>)
 8008c5a:	4805      	ldr	r0, [pc, #20]	; (8008c70 <MX_FATFS_Init+0x1c>)
 8008c5c:	f002 fa0c 	bl	800b078 <FATFS_LinkDriver>
 8008c60:	4603      	mov	r3, r0
 8008c62:	461a      	mov	r2, r3
 8008c64:	4b03      	ldr	r3, [pc, #12]	; (8008c74 <MX_FATFS_Init+0x20>)
 8008c66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008c68:	bf00      	nop
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20000490 	.word	0x20000490
 8008c70:	0800f554 	.word	0x0800f554
 8008c74:	2000048c 	.word	0x2000048c

08008c78 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008c82:	f000 f87b 	bl	8008d7c <BSP_SD_IsDetected>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d001      	beq.n	8008c90 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e012      	b.n	8008cb6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008c90:	480b      	ldr	r0, [pc, #44]	; (8008cc0 <BSP_SD_Init+0x48>)
 8008c92:	f7fb fbd7 	bl	8004444 <HAL_SD_Init>
 8008c96:	4603      	mov	r3, r0
 8008c98:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d109      	bne.n	8008cb4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008ca0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ca4:	4806      	ldr	r0, [pc, #24]	; (8008cc0 <BSP_SD_Init+0x48>)
 8008ca6:	f7fc f81f 	bl	8004ce8 <HAL_SD_ConfigWideBusOperation>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20000224 	.word	0x20000224

08008cc4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	68f9      	ldr	r1, [r7, #12]
 8008cda:	4806      	ldr	r0, [pc, #24]	; (8008cf4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008cdc:	f7fb fc62 	bl	80045a4 <HAL_SD_ReadBlocks_DMA>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000224 	.word	0x20000224

08008cf8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	68f9      	ldr	r1, [r7, #12]
 8008d0e:	4806      	ldr	r0, [pc, #24]	; (8008d28 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008d10:	f7fb fd2a 	bl	8004768 <HAL_SD_WriteBlocks_DMA>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000224 	.word	0x20000224

08008d2c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008d30:	4805      	ldr	r0, [pc, #20]	; (8008d48 <BSP_SD_GetCardState+0x1c>)
 8008d32:	f7fc f873 	bl	8004e1c <HAL_SD_GetCardState>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	bf14      	ite	ne
 8008d3c:	2301      	movne	r3, #1
 8008d3e:	2300      	moveq	r3, #0
 8008d40:	b2db      	uxtb	r3, r3
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000224 	.word	0x20000224

08008d4c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	4803      	ldr	r0, [pc, #12]	; (8008d64 <BSP_SD_GetCardInfo+0x18>)
 8008d58:	f7fb ff9a 	bl	8004c90 <HAL_SD_GetCardInfo>
}
 8008d5c:	bf00      	nop
 8008d5e:	3708      	adds	r7, #8
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20000224 	.word	0x20000224

08008d68 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008d70:	f000 f9a2 	bl	80090b8 <BSP_SD_ReadCpltCallback>
}
 8008d74:	bf00      	nop
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008d82:	2301      	movs	r3, #1
 8008d84:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008d86:	f000 f80b 	bl	8008da0 <BSP_PlatformIsDetected>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008d90:	2300      	movs	r3, #0
 8008d92:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008d94:	79fb      	ldrb	r3, [r7, #7]
 8008d96:	b2db      	uxtb	r3, r3
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008da6:	2301      	movs	r3, #1
 8008da8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008daa:	2180      	movs	r1, #128	; 0x80
 8008dac:	4806      	ldr	r0, [pc, #24]	; (8008dc8 <BSP_PlatformIsDetected+0x28>)
 8008dae:	f7f9 fafd 	bl	80023ac <HAL_GPIO_ReadPin>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008db8:	2300      	movs	r3, #0
 8008dba:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008dbc:	79fb      	ldrb	r3, [r7, #7]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	40020800 	.word	0x40020800

08008dcc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8008dd4:	f002 fa00 	bl	800b1d8 <osKernelGetTickCount>
 8008dd8:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8008dda:	e006      	b.n	8008dea <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ddc:	f7ff ffa6 	bl	8008d2c <BSP_SD_GetCardState>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e009      	b.n	8008dfe <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8008dea:	f002 f9f5 	bl	800b1d8 <osKernelGetTickCount>
 8008dee:	4602      	mov	r2, r0
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d8f0      	bhi.n	8008ddc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e12:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <SD_CheckStatus+0x38>)
 8008e14:	2201      	movs	r2, #1
 8008e16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008e18:	f7ff ff88 	bl	8008d2c <BSP_SD_GetCardState>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d107      	bne.n	8008e32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008e22:	4b07      	ldr	r3, [pc, #28]	; (8008e40 <SD_CheckStatus+0x38>)
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	f023 0301 	bic.w	r3, r3, #1
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	4b04      	ldr	r3, [pc, #16]	; (8008e40 <SD_CheckStatus+0x38>)
 8008e30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008e32:	4b03      	ldr	r3, [pc, #12]	; (8008e40 <SD_CheckStatus+0x38>)
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	b2db      	uxtb	r3, r3
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000009 	.word	0x20000009

08008e44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008e4e:	4b1c      	ldr	r3, [pc, #112]	; (8008ec0 <SD_initialize+0x7c>)
 8008e50:	2201      	movs	r2, #1
 8008e52:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008e54:	f002 f978 	bl	800b148 <osKernelGetState>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d129      	bne.n	8008eb2 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008e5e:	f7ff ff0b 	bl	8008c78 <BSP_SD_Init>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d107      	bne.n	8008e78 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7ff ffcc 	bl	8008e08 <SD_CheckStatus>
 8008e70:	4603      	mov	r3, r0
 8008e72:	461a      	mov	r2, r3
 8008e74:	4b12      	ldr	r3, [pc, #72]	; (8008ec0 <SD_initialize+0x7c>)
 8008e76:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008e78:	4b11      	ldr	r3, [pc, #68]	; (8008ec0 <SD_initialize+0x7c>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d017      	beq.n	8008eb2 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008e82:	4b10      	ldr	r3, [pc, #64]	; (8008ec4 <SD_initialize+0x80>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d107      	bne.n	8008e9a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	200a      	movs	r0, #10
 8008e90:	f002 fa64 	bl	800b35c <osMessageQueueNew>
 8008e94:	4603      	mov	r3, r0
 8008e96:	4a0b      	ldr	r2, [pc, #44]	; (8008ec4 <SD_initialize+0x80>)
 8008e98:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8008e9a:	4b0a      	ldr	r3, [pc, #40]	; (8008ec4 <SD_initialize+0x80>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d107      	bne.n	8008eb2 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8008ea2:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <SD_initialize+0x7c>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	b2db      	uxtb	r3, r3
 8008ea8:	f043 0301 	orr.w	r3, r3, #1
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <SD_initialize+0x7c>)
 8008eb0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008eb2:	4b03      	ldr	r3, [pc, #12]	; (8008ec0 <SD_initialize+0x7c>)
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	b2db      	uxtb	r3, r3
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20000009 	.word	0x20000009
 8008ec4:	20000494 	.word	0x20000494

08008ec8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff ff97 	bl	8008e08 <SD_CheckStatus>
 8008eda:	4603      	mov	r3, r0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008ef8:	f247 5030 	movw	r0, #30000	; 0x7530
 8008efc:	f7ff ff66 	bl	8008dcc <SD_CheckStatusWithTimeout>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	da01      	bge.n	8008f0a <SD_read+0x26>
  {
    return res;
 8008f06:	7ffb      	ldrb	r3, [r7, #31]
 8008f08:	e02f      	b.n	8008f6a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	68b8      	ldr	r0, [r7, #8]
 8008f10:	f7ff fed8 	bl	8008cc4 <BSP_SD_ReadBlocks_DMA>
 8008f14:	4603      	mov	r3, r0
 8008f16:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8008f18:	7fbb      	ldrb	r3, [r7, #30]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d124      	bne.n	8008f68 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008f1e:	4b15      	ldr	r3, [pc, #84]	; (8008f74 <SD_read+0x90>)
 8008f20:	6818      	ldr	r0, [r3, #0]
 8008f22:	f107 0112 	add.w	r1, r7, #18
 8008f26:	f247 5330 	movw	r3, #30000	; 0x7530
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f002 faea 	bl	800b504 <osMessageQueueGet>
 8008f30:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d117      	bne.n	8008f68 <SD_read+0x84>
 8008f38:	8a7b      	ldrh	r3, [r7, #18]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d114      	bne.n	8008f68 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8008f3e:	f002 f94b 	bl	800b1d8 <osKernelGetTickCount>
 8008f42:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008f44:	e007      	b.n	8008f56 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008f46:	f7ff fef1 	bl	8008d2c <BSP_SD_GetCardState>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d102      	bne.n	8008f56 <SD_read+0x72>
              {
                res = RES_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8008f54:	e008      	b.n	8008f68 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008f56:	f002 f93f 	bl	800b1d8 <osKernelGetTickCount>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	f247 522f 	movw	r2, #29999	; 0x752f
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d9ee      	bls.n	8008f46 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000494 	.word	0x20000494

08008f78 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b088      	sub	sp, #32
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60b9      	str	r1, [r7, #8]
 8008f80:	607a      	str	r2, [r7, #4]
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008f8c:	f247 5030 	movw	r0, #30000	; 0x7530
 8008f90:	f7ff ff1c 	bl	8008dcc <SD_CheckStatusWithTimeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	da01      	bge.n	8008f9e <SD_write+0x26>
  {
    return res;
 8008f9a:	7ffb      	ldrb	r3, [r7, #31]
 8008f9c:	e02d      	b.n	8008ffa <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	6879      	ldr	r1, [r7, #4]
 8008fa2:	68b8      	ldr	r0, [r7, #8]
 8008fa4:	f7ff fea8 	bl	8008cf8 <BSP_SD_WriteBlocks_DMA>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d124      	bne.n	8008ff8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008fae:	4b15      	ldr	r3, [pc, #84]	; (8009004 <SD_write+0x8c>)
 8008fb0:	6818      	ldr	r0, [r3, #0]
 8008fb2:	f107 0112 	add.w	r1, r7, #18
 8008fb6:	f247 5330 	movw	r3, #30000	; 0x7530
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f002 faa2 	bl	800b504 <osMessageQueueGet>
 8008fc0:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d117      	bne.n	8008ff8 <SD_write+0x80>
 8008fc8:	8a7b      	ldrh	r3, [r7, #18]
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d114      	bne.n	8008ff8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8008fce:	f002 f903 	bl	800b1d8 <osKernelGetTickCount>
 8008fd2:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8008fd4:	e007      	b.n	8008fe6 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008fd6:	f7ff fea9 	bl	8008d2c <BSP_SD_GetCardState>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d102      	bne.n	8008fe6 <SD_write+0x6e>
          {
            res = RES_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	77fb      	strb	r3, [r7, #31]
            break;
 8008fe4:	e008      	b.n	8008ff8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8008fe6:	f002 f8f7 	bl	800b1d8 <osKernelGetTickCount>
 8008fea:	4602      	mov	r2, r0
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	f247 522f 	movw	r2, #29999	; 0x752f
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d9ee      	bls.n	8008fd6 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8008ff8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3720      	adds	r7, #32
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	20000494 	.word	0x20000494

08009008 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08c      	sub	sp, #48	; 0x30
 800900c:	af00      	add	r7, sp, #0
 800900e:	4603      	mov	r3, r0
 8009010:	603a      	str	r2, [r7, #0]
 8009012:	71fb      	strb	r3, [r7, #7]
 8009014:	460b      	mov	r3, r1
 8009016:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800901e:	4b25      	ldr	r3, [pc, #148]	; (80090b4 <SD_ioctl+0xac>)
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <SD_ioctl+0x28>
 800902c:	2303      	movs	r3, #3
 800902e:	e03c      	b.n	80090aa <SD_ioctl+0xa2>

  switch (cmd)
 8009030:	79bb      	ldrb	r3, [r7, #6]
 8009032:	2b03      	cmp	r3, #3
 8009034:	d834      	bhi.n	80090a0 <SD_ioctl+0x98>
 8009036:	a201      	add	r2, pc, #4	; (adr r2, 800903c <SD_ioctl+0x34>)
 8009038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903c:	0800904d 	.word	0x0800904d
 8009040:	08009055 	.word	0x08009055
 8009044:	0800906d 	.word	0x0800906d
 8009048:	08009087 	.word	0x08009087
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009052:	e028      	b.n	80090a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009054:	f107 030c 	add.w	r3, r7, #12
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff fe77 	bl	8008d4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800905e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009064:	2300      	movs	r3, #0
 8009066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800906a:	e01c      	b.n	80090a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800906c:	f107 030c 	add.w	r3, r7, #12
 8009070:	4618      	mov	r0, r3
 8009072:	f7ff fe6b 	bl	8008d4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	b29a      	uxth	r2, r3
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009084:	e00f      	b.n	80090a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009086:	f107 030c 	add.w	r3, r7, #12
 800908a:	4618      	mov	r0, r3
 800908c:	f7ff fe5e 	bl	8008d4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	0a5a      	lsrs	r2, r3, #9
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800909e:	e002      	b.n	80090a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80090a0:	2304      	movs	r3, #4
 80090a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80090a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3730      	adds	r7, #48	; 0x30
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	20000009 	.word	0x20000009

080090b8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80090be:	2301      	movs	r3, #1
 80090c0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80090c2:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <BSP_SD_ReadCpltCallback+0x20>)
 80090c4:	6818      	ldr	r0, [r3, #0]
 80090c6:	1db9      	adds	r1, r7, #6
 80090c8:	2300      	movs	r3, #0
 80090ca:	2200      	movs	r2, #0
 80090cc:	f002 f9ba 	bl	800b444 <osMessageQueuePut>
#endif
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20000494 	.word	0x20000494

080090dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80090e8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80090ec:	f005 fc40 	bl	800e970 <USBD_static_malloc>
 80090f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d109      	bne.n	800910c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	32b0      	adds	r2, #176	; 0xb0
 8009102:	2100      	movs	r1, #0
 8009104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009108:	2302      	movs	r3, #2
 800910a:	e0d4      	b.n	80092b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800910c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009110:	2100      	movs	r1, #0
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f005 fca8 	bl	800ea68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32b0      	adds	r2, #176	; 0xb0
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	32b0      	adds	r2, #176	; 0xb0
 8009132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	7c1b      	ldrb	r3, [r3, #16]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d138      	bne.n	80091b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009144:	4b5e      	ldr	r3, [pc, #376]	; (80092c0 <USBD_CDC_Init+0x1e4>)
 8009146:	7819      	ldrb	r1, [r3, #0]
 8009148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800914c:	2202      	movs	r2, #2
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f005 faeb 	bl	800e72a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009154:	4b5a      	ldr	r3, [pc, #360]	; (80092c0 <USBD_CDC_Init+0x1e4>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f003 020f 	and.w	r2, r3, #15
 800915c:	6879      	ldr	r1, [r7, #4]
 800915e:	4613      	mov	r3, r2
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	3324      	adds	r3, #36	; 0x24
 800916a:	2201      	movs	r2, #1
 800916c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800916e:	4b55      	ldr	r3, [pc, #340]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 8009170:	7819      	ldrb	r1, [r3, #0]
 8009172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009176:	2202      	movs	r2, #2
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f005 fad6 	bl	800e72a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800917e:	4b51      	ldr	r3, [pc, #324]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f003 020f 	and.w	r2, r3, #15
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4613      	mov	r3, r2
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009196:	2201      	movs	r2, #1
 8009198:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800919a:	4b4b      	ldr	r3, [pc, #300]	; (80092c8 <USBD_CDC_Init+0x1ec>)
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	f003 020f 	and.w	r2, r3, #15
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	3326      	adds	r3, #38	; 0x26
 80091b0:	2210      	movs	r2, #16
 80091b2:	801a      	strh	r2, [r3, #0]
 80091b4:	e035      	b.n	8009222 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80091b6:	4b42      	ldr	r3, [pc, #264]	; (80092c0 <USBD_CDC_Init+0x1e4>)
 80091b8:	7819      	ldrb	r1, [r3, #0]
 80091ba:	2340      	movs	r3, #64	; 0x40
 80091bc:	2202      	movs	r2, #2
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f005 fab3 	bl	800e72a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80091c4:	4b3e      	ldr	r3, [pc, #248]	; (80092c0 <USBD_CDC_Init+0x1e4>)
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f003 020f 	and.w	r2, r3, #15
 80091cc:	6879      	ldr	r1, [r7, #4]
 80091ce:	4613      	mov	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4413      	add	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	3324      	adds	r3, #36	; 0x24
 80091da:	2201      	movs	r2, #1
 80091dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80091de:	4b39      	ldr	r3, [pc, #228]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 80091e0:	7819      	ldrb	r1, [r3, #0]
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	2202      	movs	r2, #2
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f005 fa9f 	bl	800e72a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80091ec:	4b35      	ldr	r3, [pc, #212]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	f003 020f 	and.w	r2, r3, #15
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	440b      	add	r3, r1
 8009200:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009204:	2201      	movs	r2, #1
 8009206:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009208:	4b2f      	ldr	r3, [pc, #188]	; (80092c8 <USBD_CDC_Init+0x1ec>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	f003 020f 	and.w	r2, r3, #15
 8009210:	6879      	ldr	r1, [r7, #4]
 8009212:	4613      	mov	r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	3326      	adds	r3, #38	; 0x26
 800921e:	2210      	movs	r2, #16
 8009220:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009222:	4b29      	ldr	r3, [pc, #164]	; (80092c8 <USBD_CDC_Init+0x1ec>)
 8009224:	7819      	ldrb	r1, [r3, #0]
 8009226:	2308      	movs	r3, #8
 8009228:	2203      	movs	r2, #3
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f005 fa7d 	bl	800e72a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009230:	4b25      	ldr	r3, [pc, #148]	; (80092c8 <USBD_CDC_Init+0x1ec>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	f003 020f 	and.w	r2, r3, #15
 8009238:	6879      	ldr	r1, [r7, #4]
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	440b      	add	r3, r1
 8009244:	3324      	adds	r3, #36	; 0x24
 8009246:	2201      	movs	r2, #1
 8009248:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	33b0      	adds	r3, #176	; 0xb0
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009280:	2302      	movs	r3, #2
 8009282:	e018      	b.n	80092b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	7c1b      	ldrb	r3, [r3, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800928c:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 800928e:	7819      	ldrb	r1, [r3, #0]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f005 fb34 	bl	800e908 <USBD_LL_PrepareReceive>
 80092a0:	e008      	b.n	80092b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092a2:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <USBD_CDC_Init+0x1e8>)
 80092a4:	7819      	ldrb	r1, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80092ac:	2340      	movs	r3, #64	; 0x40
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f005 fb2a 	bl	800e908 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20000093 	.word	0x20000093
 80092c4:	20000094 	.word	0x20000094
 80092c8:	20000095 	.word	0x20000095

080092cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80092d8:	4b3a      	ldr	r3, [pc, #232]	; (80093c4 <USBD_CDC_DeInit+0xf8>)
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f005 fa49 	bl	800e776 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80092e4:	4b37      	ldr	r3, [pc, #220]	; (80093c4 <USBD_CDC_DeInit+0xf8>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	f003 020f 	and.w	r2, r3, #15
 80092ec:	6879      	ldr	r1, [r7, #4]
 80092ee:	4613      	mov	r3, r2
 80092f0:	009b      	lsls	r3, r3, #2
 80092f2:	4413      	add	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	440b      	add	r3, r1
 80092f8:	3324      	adds	r3, #36	; 0x24
 80092fa:	2200      	movs	r2, #0
 80092fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80092fe:	4b32      	ldr	r3, [pc, #200]	; (80093c8 <USBD_CDC_DeInit+0xfc>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f005 fa36 	bl	800e776 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800930a:	4b2f      	ldr	r3, [pc, #188]	; (80093c8 <USBD_CDC_DeInit+0xfc>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	f003 020f 	and.w	r2, r3, #15
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009322:	2200      	movs	r2, #0
 8009324:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009326:	4b29      	ldr	r3, [pc, #164]	; (80093cc <USBD_CDC_DeInit+0x100>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f005 fa22 	bl	800e776 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009332:	4b26      	ldr	r3, [pc, #152]	; (80093cc <USBD_CDC_DeInit+0x100>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	f003 020f 	and.w	r2, r3, #15
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	440b      	add	r3, r1
 8009346:	3324      	adds	r3, #36	; 0x24
 8009348:	2200      	movs	r2, #0
 800934a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800934c:	4b1f      	ldr	r3, [pc, #124]	; (80093cc <USBD_CDC_DeInit+0x100>)
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 020f 	and.w	r2, r3, #15
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	440b      	add	r3, r1
 8009360:	3326      	adds	r3, #38	; 0x26
 8009362:	2200      	movs	r2, #0
 8009364:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	32b0      	adds	r2, #176	; 0xb0
 8009370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01f      	beq.n	80093b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	33b0      	adds	r3, #176	; 0xb0
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	4413      	add	r3, r2
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	32b0      	adds	r2, #176	; 0xb0
 8009396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939a:	4618      	mov	r0, r3
 800939c:	f005 faf6 	bl	800e98c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	32b0      	adds	r2, #176	; 0xb0
 80093aa:	2100      	movs	r1, #0
 80093ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000093 	.word	0x20000093
 80093c8:	20000094 	.word	0x20000094
 80093cc:	20000095 	.word	0x20000095

080093d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	32b0      	adds	r2, #176	; 0xb0
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80093ea:	2300      	movs	r3, #0
 80093ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80093ee:	2300      	movs	r3, #0
 80093f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e0bf      	b.n	8009580 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009408:	2b00      	cmp	r3, #0
 800940a:	d050      	beq.n	80094ae <USBD_CDC_Setup+0xde>
 800940c:	2b20      	cmp	r3, #32
 800940e:	f040 80af 	bne.w	8009570 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	88db      	ldrh	r3, [r3, #6]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d03a      	beq.n	8009490 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	b25b      	sxtb	r3, r3
 8009420:	2b00      	cmp	r3, #0
 8009422:	da1b      	bge.n	800945c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	33b0      	adds	r3, #176	; 0xb0
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800943a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	88d2      	ldrh	r2, [r2, #6]
 8009440:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	88db      	ldrh	r3, [r3, #6]
 8009446:	2b07      	cmp	r3, #7
 8009448:	bf28      	it	cs
 800944a:	2307      	movcs	r3, #7
 800944c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	89fa      	ldrh	r2, [r7, #14]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 fd43 	bl	800aee0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800945a:	e090      	b.n	800957e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	785a      	ldrb	r2, [r3, #1]
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	88db      	ldrh	r3, [r3, #6]
 800946a:	2b3f      	cmp	r3, #63	; 0x3f
 800946c:	d803      	bhi.n	8009476 <USBD_CDC_Setup+0xa6>
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	88db      	ldrh	r3, [r3, #6]
 8009472:	b2da      	uxtb	r2, r3
 8009474:	e000      	b.n	8009478 <USBD_CDC_Setup+0xa8>
 8009476:	2240      	movs	r2, #64	; 0x40
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800947e:	6939      	ldr	r1, [r7, #16]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009486:	461a      	mov	r2, r3
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 fd55 	bl	800af38 <USBD_CtlPrepareRx>
      break;
 800948e:	e076      	b.n	800957e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	33b0      	adds	r3, #176	; 0xb0
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	7850      	ldrb	r0, [r2, #1]
 80094a6:	2200      	movs	r2, #0
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	4798      	blx	r3
      break;
 80094ac:	e067      	b.n	800957e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	2b0b      	cmp	r3, #11
 80094b4:	d851      	bhi.n	800955a <USBD_CDC_Setup+0x18a>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <USBD_CDC_Setup+0xec>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094ed 	.word	0x080094ed
 80094c0:	08009569 	.word	0x08009569
 80094c4:	0800955b 	.word	0x0800955b
 80094c8:	0800955b 	.word	0x0800955b
 80094cc:	0800955b 	.word	0x0800955b
 80094d0:	0800955b 	.word	0x0800955b
 80094d4:	0800955b 	.word	0x0800955b
 80094d8:	0800955b 	.word	0x0800955b
 80094dc:	0800955b 	.word	0x0800955b
 80094e0:	0800955b 	.word	0x0800955b
 80094e4:	08009517 	.word	0x08009517
 80094e8:	08009541 	.word	0x08009541
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b03      	cmp	r3, #3
 80094f6:	d107      	bne.n	8009508 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80094f8:	f107 030a 	add.w	r3, r7, #10
 80094fc:	2202      	movs	r2, #2
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 fced 	bl	800aee0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009506:	e032      	b.n	800956e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f001 fc77 	bl	800adfe <USBD_CtlError>
            ret = USBD_FAIL;
 8009510:	2303      	movs	r3, #3
 8009512:	75fb      	strb	r3, [r7, #23]
          break;
 8009514:	e02b      	b.n	800956e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b03      	cmp	r3, #3
 8009520:	d107      	bne.n	8009532 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009522:	f107 030d 	add.w	r3, r7, #13
 8009526:	2201      	movs	r2, #1
 8009528:	4619      	mov	r1, r3
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fcd8 	bl	800aee0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009530:	e01d      	b.n	800956e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009532:	6839      	ldr	r1, [r7, #0]
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 fc62 	bl	800adfe <USBD_CtlError>
            ret = USBD_FAIL;
 800953a:	2303      	movs	r3, #3
 800953c:	75fb      	strb	r3, [r7, #23]
          break;
 800953e:	e016      	b.n	800956e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b03      	cmp	r3, #3
 800954a:	d00f      	beq.n	800956c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f001 fc55 	bl	800adfe <USBD_CtlError>
            ret = USBD_FAIL;
 8009554:	2303      	movs	r3, #3
 8009556:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009558:	e008      	b.n	800956c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f001 fc4e 	bl	800adfe <USBD_CtlError>
          ret = USBD_FAIL;
 8009562:	2303      	movs	r3, #3
 8009564:	75fb      	strb	r3, [r7, #23]
          break;
 8009566:	e002      	b.n	800956e <USBD_CDC_Setup+0x19e>
          break;
 8009568:	bf00      	nop
 800956a:	e008      	b.n	800957e <USBD_CDC_Setup+0x1ae>
          break;
 800956c:	bf00      	nop
      }
      break;
 800956e:	e006      	b.n	800957e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 fc43 	bl	800adfe <USBD_CtlError>
      ret = USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	75fb      	strb	r3, [r7, #23]
      break;
 800957c:	bf00      	nop
  }

  return (uint8_t)ret;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009580:	4618      	mov	r0, r3
 8009582:	3718      	adds	r7, #24
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	460b      	mov	r3, r1
 8009592:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800959a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	32b0      	adds	r2, #176	; 0xb0
 80095a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e065      	b.n	800967e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	32b0      	adds	r2, #176	; 0xb0
 80095bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	f003 020f 	and.w	r2, r3, #15
 80095c8:	6879      	ldr	r1, [r7, #4]
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	3318      	adds	r3, #24
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d02f      	beq.n	800963c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	f003 020f 	and.w	r2, r3, #15
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	4613      	mov	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	440b      	add	r3, r1
 80095ee:	3318      	adds	r3, #24
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	f003 010f 	and.w	r1, r3, #15
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	460b      	mov	r3, r1
 80095fc:	00db      	lsls	r3, r3, #3
 80095fe:	440b      	add	r3, r1
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4403      	add	r3, r0
 8009604:	3348      	adds	r3, #72	; 0x48
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	fbb2 f1f3 	udiv	r1, r2, r3
 800960c:	fb01 f303 	mul.w	r3, r1, r3
 8009610:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009612:	2b00      	cmp	r3, #0
 8009614:	d112      	bne.n	800963c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	f003 020f 	and.w	r2, r3, #15
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	4613      	mov	r3, r2
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	4413      	add	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	3318      	adds	r3, #24
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800962e:	78f9      	ldrb	r1, [r7, #3]
 8009630:	2300      	movs	r3, #0
 8009632:	2200      	movs	r2, #0
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f005 f946 	bl	800e8c6 <USBD_LL_Transmit>
 800963a:	e01f      	b.n	800967c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	2200      	movs	r2, #0
 8009640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	33b0      	adds	r3, #176	; 0xb0
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	4413      	add	r3, r2
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d010      	beq.n	800967c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	33b0      	adds	r3, #176	; 0xb0
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009678:	78fa      	ldrb	r2, [r7, #3]
 800967a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	460b      	mov	r3, r1
 8009690:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	32b0      	adds	r2, #176	; 0xb0
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	32b0      	adds	r2, #176	; 0xb0
 80096ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e01a      	b.n	80096ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f005 f944 	bl	800e94a <USBD_LL_GetRxDataSize>
 80096c2:	4602      	mov	r2, r0
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	33b0      	adds	r3, #176	; 0xb0
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	4413      	add	r3, r2
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80096e8:	4611      	mov	r1, r2
 80096ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b084      	sub	sp, #16
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	32b0      	adds	r2, #176	; 0xb0
 8009708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	e025      	b.n	8009764 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	33b0      	adds	r3, #176	; 0xb0
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d01a      	beq.n	8009762 <USBD_CDC_EP0_RxReady+0x6c>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009732:	2bff      	cmp	r3, #255	; 0xff
 8009734:	d015      	beq.n	8009762 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	33b0      	adds	r3, #176	; 0xb0
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800974e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009756:	b292      	uxth	r2, r2
 8009758:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	22ff      	movs	r2, #255	; 0xff
 800975e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b086      	sub	sp, #24
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009774:	2182      	movs	r1, #130	; 0x82
 8009776:	4818      	ldr	r0, [pc, #96]	; (80097d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009778:	f000 fd09 	bl	800a18e <USBD_GetEpDesc>
 800977c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800977e:	2101      	movs	r1, #1
 8009780:	4815      	ldr	r0, [pc, #84]	; (80097d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009782:	f000 fd04 	bl	800a18e <USBD_GetEpDesc>
 8009786:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009788:	2181      	movs	r1, #129	; 0x81
 800978a:	4813      	ldr	r0, [pc, #76]	; (80097d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800978c:	f000 fcff 	bl	800a18e <USBD_GetEpDesc>
 8009790:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	2210      	movs	r2, #16
 800979c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d006      	beq.n	80097b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097ac:	711a      	strb	r2, [r3, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d006      	beq.n	80097c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097c0:	711a      	strb	r2, [r3, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2243      	movs	r2, #67	; 0x43
 80097ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000050 	.word	0x20000050

080097dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80097e4:	2182      	movs	r1, #130	; 0x82
 80097e6:	4818      	ldr	r0, [pc, #96]	; (8009848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097e8:	f000 fcd1 	bl	800a18e <USBD_GetEpDesc>
 80097ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80097ee:	2101      	movs	r1, #1
 80097f0:	4815      	ldr	r0, [pc, #84]	; (8009848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097f2:	f000 fccc 	bl	800a18e <USBD_GetEpDesc>
 80097f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80097f8:	2181      	movs	r1, #129	; 0x81
 80097fa:	4813      	ldr	r0, [pc, #76]	; (8009848 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80097fc:	f000 fcc7 	bl	800a18e <USBD_GetEpDesc>
 8009800:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d002      	beq.n	800980e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2210      	movs	r2, #16
 800980c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d006      	beq.n	8009822 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	2200      	movs	r2, #0
 8009818:	711a      	strb	r2, [r3, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f042 0202 	orr.w	r2, r2, #2
 8009820:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d006      	beq.n	8009836 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	711a      	strb	r2, [r3, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f042 0202 	orr.w	r2, r2, #2
 8009834:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2243      	movs	r2, #67	; 0x43
 800983a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800983c:	4b02      	ldr	r3, [pc, #8]	; (8009848 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	20000050 	.word	0x20000050

0800984c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009854:	2182      	movs	r1, #130	; 0x82
 8009856:	4818      	ldr	r0, [pc, #96]	; (80098b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009858:	f000 fc99 	bl	800a18e <USBD_GetEpDesc>
 800985c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800985e:	2101      	movs	r1, #1
 8009860:	4815      	ldr	r0, [pc, #84]	; (80098b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009862:	f000 fc94 	bl	800a18e <USBD_GetEpDesc>
 8009866:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009868:	2181      	movs	r1, #129	; 0x81
 800986a:	4813      	ldr	r0, [pc, #76]	; (80098b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800986c:	f000 fc8f 	bl	800a18e <USBD_GetEpDesc>
 8009870:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d002      	beq.n	800987e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2210      	movs	r2, #16
 800987c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d006      	beq.n	8009892 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2200      	movs	r2, #0
 8009888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800988c:	711a      	strb	r2, [r3, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d006      	beq.n	80098a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098a0:	711a      	strb	r2, [r3, #4]
 80098a2:	2200      	movs	r2, #0
 80098a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2243      	movs	r2, #67	; 0x43
 80098aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80098ac:	4b02      	ldr	r3, [pc, #8]	; (80098b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20000050 	.word	0x20000050

080098bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	220a      	movs	r2, #10
 80098c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80098ca:	4b03      	ldr	r3, [pc, #12]	; (80098d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	2000000c 	.word	0x2000000c

080098dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098ec:	2303      	movs	r3, #3
 80098ee:	e009      	b.n	8009904 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	33b0      	adds	r3, #176	; 0xb0
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	683a      	ldr	r2, [r7, #0]
 8009900:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009902:	2300      	movs	r3, #0
}
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009910:	b480      	push	{r7}
 8009912:	b087      	sub	sp, #28
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	32b0      	adds	r2, #176	; 0xb0
 8009926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800992a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d101      	bne.n	8009936 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009932:	2303      	movs	r3, #3
 8009934:	e008      	b.n	8009948 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	371c      	adds	r7, #28
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	32b0      	adds	r2, #176	; 0xb0
 8009968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800996c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009974:	2303      	movs	r3, #3
 8009976:	e004      	b.n	8009982 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
	...

08009990 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	32b0      	adds	r2, #176	; 0xb0
 80099a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	32b0      	adds	r2, #176	; 0xb0
 80099b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d101      	bne.n	80099be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80099ba:	2303      	movs	r3, #3
 80099bc:	e018      	b.n	80099f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	7c1b      	ldrb	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099c6:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <USBD_CDC_ReceivePacket+0x68>)
 80099c8:	7819      	ldrb	r1, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f004 ff97 	bl	800e908 <USBD_LL_PrepareReceive>
 80099da:	e008      	b.n	80099ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80099dc:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <USBD_CDC_ReceivePacket+0x68>)
 80099de:	7819      	ldrb	r1, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099e6:	2340      	movs	r3, #64	; 0x40
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f004 ff8d 	bl	800e908 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20000094 	.word	0x20000094

080099fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	4613      	mov	r3, r2
 8009a08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d101      	bne.n	8009a14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e01f      	b.n	8009a54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	79fa      	ldrb	r2, [r7, #7]
 8009a46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f004 fe01 	bl	800e650 <USBD_LL_Init>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e025      	b.n	8009ac0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	32ae      	adds	r2, #174	; 0xae
 8009a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00f      	beq.n	8009ab0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	32ae      	adds	r2, #174	; 0xae
 8009a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	f107 020e 	add.w	r2, r7, #14
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	4798      	blx	r3
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f004 fe0f 	bl	800e6f4 <USBD_LL_Start>
 8009ad6:	4603      	mov	r3, r0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ae8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b084      	sub	sp, #16
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	460b      	mov	r3, r1
 8009b00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d009      	beq.n	8009b24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	78fa      	ldrb	r2, [r7, #3]
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	4798      	blx	r3
 8009b20:	4603      	mov	r3, r0
 8009b22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3710      	adds	r7, #16
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b084      	sub	sp, #16
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	6078      	str	r0, [r7, #4]
 8009b36:	460b      	mov	r3, r1
 8009b38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	78fa      	ldrb	r2, [r7, #3]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	4798      	blx	r3
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009b54:	2303      	movs	r3, #3
 8009b56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3710      	adds	r7, #16
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009b72:	6839      	ldr	r1, [r7, #0]
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 f908 	bl	800ad8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009b88:	461a      	mov	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b96:	f003 031f 	and.w	r3, r3, #31
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d01a      	beq.n	8009bd4 <USBD_LL_SetupStage+0x72>
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d822      	bhi.n	8009be8 <USBD_LL_SetupStage+0x86>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d002      	beq.n	8009bac <USBD_LL_SetupStage+0x4a>
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d00a      	beq.n	8009bc0 <USBD_LL_SetupStage+0x5e>
 8009baa:	e01d      	b.n	8009be8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fb5f 	bl	800a278 <USBD_StdDevReq>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8009bbe:	e020      	b.n	8009c02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fbc7 	bl	800a35c <USBD_StdItfReq>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd2:	e016      	b.n	8009c02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fc29 	bl	800a434 <USBD_StdEPReq>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]
      break;
 8009be6:	e00c      	b.n	8009c02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009bee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f004 fddc 	bl	800e7b4 <USBD_LL_StallEP>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8009c00:	bf00      	nop
  }

  return ret;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	460b      	mov	r3, r1
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009c1e:	7afb      	ldrb	r3, [r7, #11]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d16e      	bne.n	8009d02 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009c2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	f040 8098 	bne.w	8009d68 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d913      	bls.n	8009c6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	1ad2      	subs	r2, r2, r3
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	bf28      	it	cs
 8009c5e:	4613      	movcs	r3, r2
 8009c60:	461a      	mov	r2, r3
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f001 f984 	bl	800af72 <USBD_CtlContinueRx>
 8009c6a:	e07d      	b.n	8009d68 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c72:	f003 031f 	and.w	r3, r3, #31
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d014      	beq.n	8009ca4 <USBD_LL_DataOutStage+0x98>
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d81d      	bhi.n	8009cba <USBD_LL_DataOutStage+0xae>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d002      	beq.n	8009c88 <USBD_LL_DataOutStage+0x7c>
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d003      	beq.n	8009c8e <USBD_LL_DataOutStage+0x82>
 8009c86:	e018      	b.n	8009cba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	75bb      	strb	r3, [r7, #22]
            break;
 8009c8c:	e018      	b.n	8009cc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	4619      	mov	r1, r3
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	f000 fa5e 	bl	800a15a <USBD_CoreFindIF>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	75bb      	strb	r3, [r7, #22]
            break;
 8009ca2:	e00d      	b.n	8009cc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009caa:	b2db      	uxtb	r3, r3
 8009cac:	4619      	mov	r1, r3
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f000 fa60 	bl	800a174 <USBD_CoreFindEP>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	75bb      	strb	r3, [r7, #22]
            break;
 8009cb8:	e002      	b.n	8009cc0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	75bb      	strb	r3, [r7, #22]
            break;
 8009cbe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009cc0:	7dbb      	ldrb	r3, [r7, #22]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d119      	bne.n	8009cfa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d113      	bne.n	8009cfa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009cd2:	7dba      	ldrb	r2, [r7, #22]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	32ae      	adds	r2, #174	; 0xae
 8009cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00b      	beq.n	8009cfa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009ce2:	7dba      	ldrb	r2, [r7, #22]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009cea:	7dba      	ldrb	r2, [r7, #22]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	32ae      	adds	r2, #174	; 0xae
 8009cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f001 f94a 	bl	800af94 <USBD_CtlSendStatus>
 8009d00:	e032      	b.n	8009d68 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009d02:	7afb      	ldrb	r3, [r7, #11]
 8009d04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f000 fa31 	bl	800a174 <USBD_CoreFindEP>
 8009d12:	4603      	mov	r3, r0
 8009d14:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d16:	7dbb      	ldrb	r3, [r7, #22]
 8009d18:	2bff      	cmp	r3, #255	; 0xff
 8009d1a:	d025      	beq.n	8009d68 <USBD_LL_DataOutStage+0x15c>
 8009d1c:	7dbb      	ldrb	r3, [r7, #22]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d122      	bne.n	8009d68 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d117      	bne.n	8009d5e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009d2e:	7dba      	ldrb	r2, [r7, #22]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	32ae      	adds	r2, #174	; 0xae
 8009d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d38:	699b      	ldr	r3, [r3, #24]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00f      	beq.n	8009d5e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009d3e:	7dba      	ldrb	r2, [r7, #22]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009d46:	7dba      	ldrb	r2, [r7, #22]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	32ae      	adds	r2, #174	; 0xae
 8009d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	7afa      	ldrb	r2, [r7, #11]
 8009d54:	4611      	mov	r1, r2
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	4798      	blx	r3
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	e000      	b.n	8009d6a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3718      	adds	r7, #24
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b086      	sub	sp, #24
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	60f8      	str	r0, [r7, #12]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	607a      	str	r2, [r7, #4]
 8009d7e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d16f      	bne.n	8009e66 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3314      	adds	r3, #20
 8009d8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d15a      	bne.n	8009e4c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	689a      	ldr	r2, [r3, #8]
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d914      	bls.n	8009dcc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	689a      	ldr	r2, [r3, #8]
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	1ad2      	subs	r2, r2, r3
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	461a      	mov	r2, r3
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f001 f8ac 	bl	800af16 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	68f8      	ldr	r0, [r7, #12]
 8009dc6:	f004 fd9f 	bl	800e908 <USBD_LL_PrepareReceive>
 8009dca:	e03f      	b.n	8009e4c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d11c      	bne.n	8009e12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d316      	bcc.n	8009e12 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d20f      	bcs.n	8009e12 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009df2:	2200      	movs	r2, #0
 8009df4:	2100      	movs	r1, #0
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f001 f88d 	bl	800af16 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e04:	2300      	movs	r3, #0
 8009e06:	2200      	movs	r2, #0
 8009e08:	2100      	movs	r1, #0
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f004 fd7c 	bl	800e908 <USBD_LL_PrepareReceive>
 8009e10:	e01c      	b.n	8009e4c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	d10f      	bne.n	8009e3e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d009      	beq.n	8009e3e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e3e:	2180      	movs	r1, #128	; 0x80
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f004 fcb7 	bl	800e7b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f001 f8b7 	bl	800afba <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d03a      	beq.n	8009ecc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f7ff fe42 	bl	8009ae0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009e64:	e032      	b.n	8009ecc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009e66:	7afb      	ldrb	r3, [r7, #11]
 8009e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	4619      	mov	r1, r3
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 f97f 	bl	800a174 <USBD_CoreFindEP>
 8009e76:	4603      	mov	r3, r0
 8009e78:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e7a:	7dfb      	ldrb	r3, [r7, #23]
 8009e7c:	2bff      	cmp	r3, #255	; 0xff
 8009e7e:	d025      	beq.n	8009ecc <USBD_LL_DataInStage+0x15a>
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d122      	bne.n	8009ecc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b03      	cmp	r3, #3
 8009e90:	d11c      	bne.n	8009ecc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009e92:	7dfa      	ldrb	r2, [r7, #23]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	32ae      	adds	r2, #174	; 0xae
 8009e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d014      	beq.n	8009ecc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009ea2:	7dfa      	ldrb	r2, [r7, #23]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009eaa:	7dfa      	ldrb	r2, [r7, #23]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	32ae      	adds	r2, #174	; 0xae
 8009eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	7afa      	ldrb	r2, [r7, #11]
 8009eb8:	4611      	mov	r1, r2
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	4798      	blx	r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009ec2:	7dbb      	ldrb	r3, [r7, #22]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009ec8:	7dbb      	ldrb	r3, [r7, #22]
 8009eca:	e000      	b.n	8009ece <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d014      	beq.n	8009f3c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00e      	beq.n	8009f3c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6852      	ldr	r2, [r2, #4]
 8009f2a:	b2d2      	uxtb	r2, r2
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	4798      	blx	r3
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f3c:	2340      	movs	r3, #64	; 0x40
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2100      	movs	r1, #0
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f004 fbf1 	bl	800e72a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2240      	movs	r2, #64	; 0x40
 8009f54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f58:	2340      	movs	r3, #64	; 0x40
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2180      	movs	r1, #128	; 0x80
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f004 fbe3 	bl	800e72a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2240      	movs	r2, #64	; 0x40
 8009f6e:	621a      	str	r2, [r3, #32]

  return ret;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b083      	sub	sp, #12
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	460b      	mov	r3, r1
 8009f84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	78fa      	ldrb	r2, [r7, #3]
 8009f8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b083      	sub	sp, #12
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2204      	movs	r2, #4
 8009fb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	370c      	adds	r7, #12
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr

08009fc6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b083      	sub	sp, #12
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b04      	cmp	r3, #4
 8009fd8:	d106      	bne.n	8009fe8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009fe0:	b2da      	uxtb	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b03      	cmp	r3, #3
 800a008:	d110      	bne.n	800a02c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00b      	beq.n	800a02c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d005      	beq.n	800a02c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	460b      	mov	r3, r1
 800a040:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	32ae      	adds	r2, #174	; 0xae
 800a04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a054:	2303      	movs	r3, #3
 800a056:	e01c      	b.n	800a092 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	2b03      	cmp	r3, #3
 800a062:	d115      	bne.n	800a090 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	32ae      	adds	r2, #174	; 0xae
 800a06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00b      	beq.n	800a090 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	32ae      	adds	r2, #174	; 0xae
 800a082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	78fa      	ldrb	r2, [r7, #3]
 800a08a:	4611      	mov	r1, r2
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a09a:	b580      	push	{r7, lr}
 800a09c:	b082      	sub	sp, #8
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	6078      	str	r0, [r7, #4]
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	32ae      	adds	r2, #174	; 0xae
 800a0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e01c      	b.n	800a0f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c2:	b2db      	uxtb	r3, r3
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d115      	bne.n	800a0f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	32ae      	adds	r2, #174	; 0xae
 800a0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00b      	beq.n	800a0f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	32ae      	adds	r2, #174	; 0xae
 800a0e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ec:	78fa      	ldrb	r2, [r7, #3]
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00e      	beq.n	800a150 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	687a      	ldr	r2, [r7, #4]
 800a13c:	6852      	ldr	r2, [r2, #4]
 800a13e:	b2d2      	uxtb	r2, r2
 800a140:	4611      	mov	r1, r2
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	4798      	blx	r3
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a14c:	2303      	movs	r3, #3
 800a14e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a150:	7bfb      	ldrb	r3, [r7, #15]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	460b      	mov	r3, r1
 800a164:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a166:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a168:	4618      	mov	r0, r3
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a180:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a182:	4618      	mov	r0, r3
 800a184:	370c      	adds	r7, #12
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b086      	sub	sp, #24
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	885b      	ldrh	r3, [r3, #2]
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d920      	bls.n	800a1f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a1be:	e013      	b.n	800a1e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a1c0:	f107 030a 	add.w	r3, r7, #10
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6978      	ldr	r0, [r7, #20]
 800a1c8:	f000 f81b 	bl	800a202 <USBD_GetNextDesc>
 800a1cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	785b      	ldrb	r3, [r3, #1]
 800a1d2:	2b05      	cmp	r3, #5
 800a1d4:	d108      	bne.n	800a1e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	789b      	ldrb	r3, [r3, #2]
 800a1de:	78fa      	ldrb	r2, [r7, #3]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d008      	beq.n	800a1f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	885b      	ldrh	r3, [r3, #2]
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	897b      	ldrh	r3, [r7, #10]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d8e5      	bhi.n	800a1c0 <USBD_GetEpDesc+0x32>
 800a1f4:	e000      	b.n	800a1f8 <USBD_GetEpDesc+0x6a>
          break;
 800a1f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a1f8:	693b      	ldr	r3, [r7, #16]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3718      	adds	r7, #24
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a202:	b480      	push	{r7}
 800a204:	b085      	sub	sp, #20
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	881a      	ldrh	r2, [r3, #0]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	b29b      	uxth	r3, r3
 800a21a:	4413      	add	r3, r2
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4413      	add	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a22e:	68fb      	ldr	r3, [r7, #12]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b087      	sub	sp, #28
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	3301      	adds	r3, #1
 800a252:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a25a:	8a3b      	ldrh	r3, [r7, #16]
 800a25c:	021b      	lsls	r3, r3, #8
 800a25e:	b21a      	sxth	r2, r3
 800a260:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a264:	4313      	orrs	r3, r2
 800a266:	b21b      	sxth	r3, r3
 800a268:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a26a:	89fb      	ldrh	r3, [r7, #14]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	371c      	adds	r7, #28
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a28e:	2b40      	cmp	r3, #64	; 0x40
 800a290:	d005      	beq.n	800a29e <USBD_StdDevReq+0x26>
 800a292:	2b40      	cmp	r3, #64	; 0x40
 800a294:	d857      	bhi.n	800a346 <USBD_StdDevReq+0xce>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00f      	beq.n	800a2ba <USBD_StdDevReq+0x42>
 800a29a:	2b20      	cmp	r3, #32
 800a29c:	d153      	bne.n	800a346 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	32ae      	adds	r2, #174	; 0xae
 800a2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	4798      	blx	r3
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a2b8:	e04a      	b.n	800a350 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	2b09      	cmp	r3, #9
 800a2c0:	d83b      	bhi.n	800a33a <USBD_StdDevReq+0xc2>
 800a2c2:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <USBD_StdDevReq+0x50>)
 800a2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c8:	0800a31d 	.word	0x0800a31d
 800a2cc:	0800a331 	.word	0x0800a331
 800a2d0:	0800a33b 	.word	0x0800a33b
 800a2d4:	0800a327 	.word	0x0800a327
 800a2d8:	0800a33b 	.word	0x0800a33b
 800a2dc:	0800a2fb 	.word	0x0800a2fb
 800a2e0:	0800a2f1 	.word	0x0800a2f1
 800a2e4:	0800a33b 	.word	0x0800a33b
 800a2e8:	0800a313 	.word	0x0800a313
 800a2ec:	0800a305 	.word	0x0800a305
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f000 fa3c 	bl	800a770 <USBD_GetDescriptor>
          break;
 800a2f8:	e024      	b.n	800a344 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2fa:	6839      	ldr	r1, [r7, #0]
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fba1 	bl	800aa44 <USBD_SetAddress>
          break;
 800a302:	e01f      	b.n	800a344 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 fbe0 	bl	800aacc <USBD_SetConfig>
 800a30c:	4603      	mov	r3, r0
 800a30e:	73fb      	strb	r3, [r7, #15]
          break;
 800a310:	e018      	b.n	800a344 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fc83 	bl	800ac20 <USBD_GetConfig>
          break;
 800a31a:	e013      	b.n	800a344 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a31c:	6839      	ldr	r1, [r7, #0]
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fcb4 	bl	800ac8c <USBD_GetStatus>
          break;
 800a324:	e00e      	b.n	800a344 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 fce3 	bl	800acf4 <USBD_SetFeature>
          break;
 800a32e:	e009      	b.n	800a344 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fd07 	bl	800ad46 <USBD_ClrFeature>
          break;
 800a338:	e004      	b.n	800a344 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a33a:	6839      	ldr	r1, [r7, #0]
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 fd5e 	bl	800adfe <USBD_CtlError>
          break;
 800a342:	bf00      	nop
      }
      break;
 800a344:	e004      	b.n	800a350 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 fd58 	bl	800adfe <USBD_CtlError>
      break;
 800a34e:	bf00      	nop
  }

  return ret;
 800a350:	7bfb      	ldrb	r3, [r7, #15]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop

0800a35c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a372:	2b40      	cmp	r3, #64	; 0x40
 800a374:	d005      	beq.n	800a382 <USBD_StdItfReq+0x26>
 800a376:	2b40      	cmp	r3, #64	; 0x40
 800a378:	d852      	bhi.n	800a420 <USBD_StdItfReq+0xc4>
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d001      	beq.n	800a382 <USBD_StdItfReq+0x26>
 800a37e:	2b20      	cmp	r3, #32
 800a380:	d14e      	bne.n	800a420 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	3b01      	subs	r3, #1
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d840      	bhi.n	800a412 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	889b      	ldrh	r3, [r3, #4]
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b01      	cmp	r3, #1
 800a398:	d836      	bhi.n	800a408 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	889b      	ldrh	r3, [r3, #4]
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff fed9 	bl	800a15a <USBD_CoreFindIF>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3ac:	7bbb      	ldrb	r3, [r7, #14]
 800a3ae:	2bff      	cmp	r3, #255	; 0xff
 800a3b0:	d01d      	beq.n	800a3ee <USBD_StdItfReq+0x92>
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d11a      	bne.n	800a3ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a3b8:	7bba      	ldrb	r2, [r7, #14]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	32ae      	adds	r2, #174	; 0xae
 800a3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00f      	beq.n	800a3e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a3c8:	7bba      	ldrb	r2, [r7, #14]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a3d0:	7bba      	ldrb	r2, [r7, #14]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	32ae      	adds	r2, #174	; 0xae
 800a3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	6839      	ldr	r1, [r7, #0]
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a3e6:	e004      	b.n	800a3f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a3ec:	e001      	b.n	800a3f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a3ee:	2303      	movs	r3, #3
 800a3f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a3f2:	683b      	ldr	r3, [r7, #0]
 800a3f4:	88db      	ldrh	r3, [r3, #6]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d110      	bne.n	800a41c <USBD_StdItfReq+0xc0>
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10d      	bne.n	800a41c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fdc7 	bl	800af94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a406:	e009      	b.n	800a41c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 fcf7 	bl	800adfe <USBD_CtlError>
          break;
 800a410:	e004      	b.n	800a41c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 fcf2 	bl	800adfe <USBD_CtlError>
          break;
 800a41a:	e000      	b.n	800a41e <USBD_StdItfReq+0xc2>
          break;
 800a41c:	bf00      	nop
      }
      break;
 800a41e:	e004      	b.n	800a42a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 fceb 	bl	800adfe <USBD_CtlError>
      break;
 800a428:	bf00      	nop
  }

  return ret;
 800a42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3710      	adds	r7, #16
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}

0800a434 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	889b      	ldrh	r3, [r3, #4]
 800a446:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a450:	2b40      	cmp	r3, #64	; 0x40
 800a452:	d007      	beq.n	800a464 <USBD_StdEPReq+0x30>
 800a454:	2b40      	cmp	r3, #64	; 0x40
 800a456:	f200 817f 	bhi.w	800a758 <USBD_StdEPReq+0x324>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d02a      	beq.n	800a4b4 <USBD_StdEPReq+0x80>
 800a45e:	2b20      	cmp	r3, #32
 800a460:	f040 817a 	bne.w	800a758 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a464:	7bbb      	ldrb	r3, [r7, #14]
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff fe83 	bl	800a174 <USBD_CoreFindEP>
 800a46e:	4603      	mov	r3, r0
 800a470:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a472:	7b7b      	ldrb	r3, [r7, #13]
 800a474:	2bff      	cmp	r3, #255	; 0xff
 800a476:	f000 8174 	beq.w	800a762 <USBD_StdEPReq+0x32e>
 800a47a:	7b7b      	ldrb	r3, [r7, #13]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f040 8170 	bne.w	800a762 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a482:	7b7a      	ldrb	r2, [r7, #13]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a48a:	7b7a      	ldrb	r2, [r7, #13]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	32ae      	adds	r2, #174	; 0xae
 800a490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a494:	689b      	ldr	r3, [r3, #8]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 8163 	beq.w	800a762 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a49c:	7b7a      	ldrb	r2, [r7, #13]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	32ae      	adds	r2, #174	; 0xae
 800a4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	6839      	ldr	r1, [r7, #0]
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	4798      	blx	r3
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a4b2:	e156      	b.n	800a762 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	785b      	ldrb	r3, [r3, #1]
 800a4b8:	2b03      	cmp	r3, #3
 800a4ba:	d008      	beq.n	800a4ce <USBD_StdEPReq+0x9a>
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	f300 8145 	bgt.w	800a74c <USBD_StdEPReq+0x318>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 809b 	beq.w	800a5fe <USBD_StdEPReq+0x1ca>
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d03c      	beq.n	800a546 <USBD_StdEPReq+0x112>
 800a4cc:	e13e      	b.n	800a74c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d002      	beq.n	800a4e0 <USBD_StdEPReq+0xac>
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d016      	beq.n	800a50c <USBD_StdEPReq+0xd8>
 800a4de:	e02c      	b.n	800a53a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00d      	beq.n	800a502 <USBD_StdEPReq+0xce>
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	2b80      	cmp	r3, #128	; 0x80
 800a4ea:	d00a      	beq.n	800a502 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a4ec:	7bbb      	ldrb	r3, [r7, #14]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f004 f95f 	bl	800e7b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4f6:	2180      	movs	r1, #128	; 0x80
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f004 f95b 	bl	800e7b4 <USBD_LL_StallEP>
 800a4fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a500:	e020      	b.n	800a544 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fc7a 	bl	800adfe <USBD_CtlError>
              break;
 800a50a:	e01b      	b.n	800a544 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	885b      	ldrh	r3, [r3, #2]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10e      	bne.n	800a532 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a514:	7bbb      	ldrb	r3, [r7, #14]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00b      	beq.n	800a532 <USBD_StdEPReq+0xfe>
 800a51a:	7bbb      	ldrb	r3, [r7, #14]
 800a51c:	2b80      	cmp	r3, #128	; 0x80
 800a51e:	d008      	beq.n	800a532 <USBD_StdEPReq+0xfe>
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	88db      	ldrh	r3, [r3, #6]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d104      	bne.n	800a532 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	4619      	mov	r1, r3
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f004 f941 	bl	800e7b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fd2e 	bl	800af94 <USBD_CtlSendStatus>

              break;
 800a538:	e004      	b.n	800a544 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fc5e 	bl	800adfe <USBD_CtlError>
              break;
 800a542:	bf00      	nop
          }
          break;
 800a544:	e107      	b.n	800a756 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d002      	beq.n	800a558 <USBD_StdEPReq+0x124>
 800a552:	2b03      	cmp	r3, #3
 800a554:	d016      	beq.n	800a584 <USBD_StdEPReq+0x150>
 800a556:	e04b      	b.n	800a5f0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00d      	beq.n	800a57a <USBD_StdEPReq+0x146>
 800a55e:	7bbb      	ldrb	r3, [r7, #14]
 800a560:	2b80      	cmp	r3, #128	; 0x80
 800a562:	d00a      	beq.n	800a57a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a564:	7bbb      	ldrb	r3, [r7, #14]
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f004 f923 	bl	800e7b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a56e:	2180      	movs	r1, #128	; 0x80
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f004 f91f 	bl	800e7b4 <USBD_LL_StallEP>
 800a576:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a578:	e040      	b.n	800a5fc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fc3e 	bl	800adfe <USBD_CtlError>
              break;
 800a582:	e03b      	b.n	800a5fc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	885b      	ldrh	r3, [r3, #2]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d136      	bne.n	800a5fa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
 800a58e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a592:	2b00      	cmp	r3, #0
 800a594:	d004      	beq.n	800a5a0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	4619      	mov	r1, r3
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f004 f929 	bl	800e7f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fcf7 	bl	800af94 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a5a6:	7bbb      	ldrb	r3, [r7, #14]
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff fde2 	bl	800a174 <USBD_CoreFindEP>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5b4:	7b7b      	ldrb	r3, [r7, #13]
 800a5b6:	2bff      	cmp	r3, #255	; 0xff
 800a5b8:	d01f      	beq.n	800a5fa <USBD_StdEPReq+0x1c6>
 800a5ba:	7b7b      	ldrb	r3, [r7, #13]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d11c      	bne.n	800a5fa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a5c0:	7b7a      	ldrb	r2, [r7, #13]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a5c8:	7b7a      	ldrb	r2, [r7, #13]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	32ae      	adds	r2, #174	; 0xae
 800a5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d010      	beq.n	800a5fa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a5d8:	7b7a      	ldrb	r2, [r7, #13]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	32ae      	adds	r2, #174	; 0xae
 800a5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	6839      	ldr	r1, [r7, #0]
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	4798      	blx	r3
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a5ee:	e004      	b.n	800a5fa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fc03 	bl	800adfe <USBD_CtlError>
              break;
 800a5f8:	e000      	b.n	800a5fc <USBD_StdEPReq+0x1c8>
              break;
 800a5fa:	bf00      	nop
          }
          break;
 800a5fc:	e0ab      	b.n	800a756 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b02      	cmp	r3, #2
 800a608:	d002      	beq.n	800a610 <USBD_StdEPReq+0x1dc>
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d032      	beq.n	800a674 <USBD_StdEPReq+0x240>
 800a60e:	e097      	b.n	800a740 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a610:	7bbb      	ldrb	r3, [r7, #14]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d007      	beq.n	800a626 <USBD_StdEPReq+0x1f2>
 800a616:	7bbb      	ldrb	r3, [r7, #14]
 800a618:	2b80      	cmp	r3, #128	; 0x80
 800a61a:	d004      	beq.n	800a626 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a61c:	6839      	ldr	r1, [r7, #0]
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 fbed 	bl	800adfe <USBD_CtlError>
                break;
 800a624:	e091      	b.n	800a74a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	da0b      	bge.n	800a646 <USBD_StdEPReq+0x212>
 800a62e:	7bbb      	ldrb	r3, [r7, #14]
 800a630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	3310      	adds	r3, #16
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	4413      	add	r3, r2
 800a642:	3304      	adds	r3, #4
 800a644:	e00b      	b.n	800a65e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a658:	687a      	ldr	r2, [r7, #4]
 800a65a:	4413      	add	r3, r2
 800a65c:	3304      	adds	r3, #4
 800a65e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2202      	movs	r2, #2
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fc37 	bl	800aee0 <USBD_CtlSendData>
              break;
 800a672:	e06a      	b.n	800a74a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	da11      	bge.n	800a6a0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	f003 020f 	and.w	r2, r3, #15
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	4613      	mov	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4413      	add	r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	440b      	add	r3, r1
 800a68e:	3324      	adds	r3, #36	; 0x24
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d117      	bne.n	800a6c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fbb0 	bl	800adfe <USBD_CtlError>
                  break;
 800a69e:	e054      	b.n	800a74a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	f003 020f 	and.w	r2, r3, #15
 800a6a6:	6879      	ldr	r1, [r7, #4]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d104      	bne.n	800a6c6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a6bc:	6839      	ldr	r1, [r7, #0]
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fb9d 	bl	800adfe <USBD_CtlError>
                  break;
 800a6c4:	e041      	b.n	800a74a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	da0b      	bge.n	800a6e6 <USBD_StdEPReq+0x2b2>
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	4413      	add	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	3310      	adds	r3, #16
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	e00b      	b.n	800a6fe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	4413      	add	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	3304      	adds	r3, #4
 800a6fe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a700:	7bbb      	ldrb	r3, [r7, #14]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <USBD_StdEPReq+0x2d8>
 800a706:	7bbb      	ldrb	r3, [r7, #14]
 800a708:	2b80      	cmp	r3, #128	; 0x80
 800a70a:	d103      	bne.n	800a714 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	2200      	movs	r2, #0
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	e00e      	b.n	800a732 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a714:	7bbb      	ldrb	r3, [r7, #14]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f004 f889 	bl	800e830 <USBD_LL_IsStallEP>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d003      	beq.n	800a72c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	2201      	movs	r2, #1
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	e002      	b.n	800a732 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2202      	movs	r2, #2
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fbd1 	bl	800aee0 <USBD_CtlSendData>
              break;
 800a73e:	e004      	b.n	800a74a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fb5b 	bl	800adfe <USBD_CtlError>
              break;
 800a748:	bf00      	nop
          }
          break;
 800a74a:	e004      	b.n	800a756 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fb55 	bl	800adfe <USBD_CtlError>
          break;
 800a754:	bf00      	nop
      }
      break;
 800a756:	e005      	b.n	800a764 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 fb4f 	bl	800adfe <USBD_CtlError>
      break;
 800a760:	e000      	b.n	800a764 <USBD_StdEPReq+0x330>
      break;
 800a762:	bf00      	nop
  }

  return ret;
 800a764:	7bfb      	ldrb	r3, [r7, #15]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a77a:	2300      	movs	r3, #0
 800a77c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a782:	2300      	movs	r3, #0
 800a784:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	885b      	ldrh	r3, [r3, #2]
 800a78a:	0a1b      	lsrs	r3, r3, #8
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	3b01      	subs	r3, #1
 800a790:	2b06      	cmp	r3, #6
 800a792:	f200 8128 	bhi.w	800a9e6 <USBD_GetDescriptor+0x276>
 800a796:	a201      	add	r2, pc, #4	; (adr r2, 800a79c <USBD_GetDescriptor+0x2c>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7b9 	.word	0x0800a7b9
 800a7a0:	0800a7d1 	.word	0x0800a7d1
 800a7a4:	0800a811 	.word	0x0800a811
 800a7a8:	0800a9e7 	.word	0x0800a9e7
 800a7ac:	0800a9e7 	.word	0x0800a9e7
 800a7b0:	0800a987 	.word	0x0800a987
 800a7b4:	0800a9b3 	.word	0x0800a9b3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	7c12      	ldrb	r2, [r2, #16]
 800a7c4:	f107 0108 	add.w	r1, r7, #8
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4798      	blx	r3
 800a7cc:	60f8      	str	r0, [r7, #12]
      break;
 800a7ce:	e112      	b.n	800a9f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	7c1b      	ldrb	r3, [r3, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10d      	bne.n	800a7f4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e0:	f107 0208 	add.w	r2, r7, #8
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	4798      	blx	r3
 800a7e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a7f2:	e100      	b.n	800a9f6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fc:	f107 0208 	add.w	r2, r7, #8
 800a800:	4610      	mov	r0, r2
 800a802:	4798      	blx	r3
 800a804:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	3301      	adds	r3, #1
 800a80a:	2202      	movs	r2, #2
 800a80c:	701a      	strb	r2, [r3, #0]
      break;
 800a80e:	e0f2      	b.n	800a9f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	885b      	ldrh	r3, [r3, #2]
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b05      	cmp	r3, #5
 800a818:	f200 80ac 	bhi.w	800a974 <USBD_GetDescriptor+0x204>
 800a81c:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <USBD_GetDescriptor+0xb4>)
 800a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a822:	bf00      	nop
 800a824:	0800a83d 	.word	0x0800a83d
 800a828:	0800a871 	.word	0x0800a871
 800a82c:	0800a8a5 	.word	0x0800a8a5
 800a830:	0800a8d9 	.word	0x0800a8d9
 800a834:	0800a90d 	.word	0x0800a90d
 800a838:	0800a941 	.word	0x0800a941
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	7c12      	ldrb	r2, [r2, #16]
 800a854:	f107 0108 	add.w	r1, r7, #8
 800a858:	4610      	mov	r0, r2
 800a85a:	4798      	blx	r3
 800a85c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a85e:	e091      	b.n	800a984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 facb 	bl	800adfe <USBD_CtlError>
            err++;
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	3301      	adds	r3, #1
 800a86c:	72fb      	strb	r3, [r7, #11]
          break;
 800a86e:	e089      	b.n	800a984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	7c12      	ldrb	r2, [r2, #16]
 800a888:	f107 0108 	add.w	r1, r7, #8
 800a88c:	4610      	mov	r0, r2
 800a88e:	4798      	blx	r3
 800a890:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a892:	e077      	b.n	800a984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fab1 	bl	800adfe <USBD_CtlError>
            err++;
 800a89c:	7afb      	ldrb	r3, [r7, #11]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8a2:	e06f      	b.n	800a984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d00b      	beq.n	800a8c8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	7c12      	ldrb	r2, [r2, #16]
 800a8bc:	f107 0108 	add.w	r1, r7, #8
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	4798      	blx	r3
 800a8c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8c6:	e05d      	b.n	800a984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fa97 	bl	800adfe <USBD_CtlError>
            err++;
 800a8d0:	7afb      	ldrb	r3, [r7, #11]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a8d6:	e055      	b.n	800a984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d00b      	beq.n	800a8fc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	7c12      	ldrb	r2, [r2, #16]
 800a8f0:	f107 0108 	add.w	r1, r7, #8
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	4798      	blx	r3
 800a8f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8fa:	e043      	b.n	800a984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fa7d 	bl	800adfe <USBD_CtlError>
            err++;
 800a904:	7afb      	ldrb	r3, [r7, #11]
 800a906:	3301      	adds	r3, #1
 800a908:	72fb      	strb	r3, [r7, #11]
          break;
 800a90a:	e03b      	b.n	800a984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d00b      	beq.n	800a930 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	7c12      	ldrb	r2, [r2, #16]
 800a924:	f107 0108 	add.w	r1, r7, #8
 800a928:	4610      	mov	r0, r2
 800a92a:	4798      	blx	r3
 800a92c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a92e:	e029      	b.n	800a984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fa63 	bl	800adfe <USBD_CtlError>
            err++;
 800a938:	7afb      	ldrb	r3, [r7, #11]
 800a93a:	3301      	adds	r3, #1
 800a93c:	72fb      	strb	r3, [r7, #11]
          break;
 800a93e:	e021      	b.n	800a984 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	7c12      	ldrb	r2, [r2, #16]
 800a958:	f107 0108 	add.w	r1, r7, #8
 800a95c:	4610      	mov	r0, r2
 800a95e:	4798      	blx	r3
 800a960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a962:	e00f      	b.n	800a984 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fa49 	bl	800adfe <USBD_CtlError>
            err++;
 800a96c:	7afb      	ldrb	r3, [r7, #11]
 800a96e:	3301      	adds	r3, #1
 800a970:	72fb      	strb	r3, [r7, #11]
          break;
 800a972:	e007      	b.n	800a984 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fa41 	bl	800adfe <USBD_CtlError>
          err++;
 800a97c:	7afb      	ldrb	r3, [r7, #11]
 800a97e:	3301      	adds	r3, #1
 800a980:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a982:	bf00      	nop
      }
      break;
 800a984:	e037      	b.n	800a9f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	7c1b      	ldrb	r3, [r3, #16]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d109      	bne.n	800a9a2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a996:	f107 0208 	add.w	r2, r7, #8
 800a99a:	4610      	mov	r0, r2
 800a99c:	4798      	blx	r3
 800a99e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9a0:	e029      	b.n	800a9f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fa2a 	bl	800adfe <USBD_CtlError>
        err++;
 800a9aa:	7afb      	ldrb	r3, [r7, #11]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a9b0:	e021      	b.n	800a9f6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	7c1b      	ldrb	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10d      	bne.n	800a9d6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c2:	f107 0208 	add.w	r2, r7, #8
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	4798      	blx	r3
 800a9ca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	2207      	movs	r2, #7
 800a9d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9d4:	e00f      	b.n	800a9f6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fa10 	bl	800adfe <USBD_CtlError>
        err++;
 800a9de:	7afb      	ldrb	r3, [r7, #11]
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	72fb      	strb	r3, [r7, #11]
      break;
 800a9e4:	e007      	b.n	800a9f6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fa08 	bl	800adfe <USBD_CtlError>
      err++;
 800a9ee:	7afb      	ldrb	r3, [r7, #11]
 800a9f0:	3301      	adds	r3, #1
 800a9f2:	72fb      	strb	r3, [r7, #11]
      break;
 800a9f4:	bf00      	nop
  }

  if (err != 0U)
 800a9f6:	7afb      	ldrb	r3, [r7, #11]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d11e      	bne.n	800aa3a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	88db      	ldrh	r3, [r3, #6]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d016      	beq.n	800aa32 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800aa04:	893b      	ldrh	r3, [r7, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00e      	beq.n	800aa28 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	88da      	ldrh	r2, [r3, #6]
 800aa0e:	893b      	ldrh	r3, [r7, #8]
 800aa10:	4293      	cmp	r3, r2
 800aa12:	bf28      	it	cs
 800aa14:	4613      	movcs	r3, r2
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800aa1a:	893b      	ldrh	r3, [r7, #8]
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	68f9      	ldr	r1, [r7, #12]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 fa5d 	bl	800aee0 <USBD_CtlSendData>
 800aa26:	e009      	b.n	800aa3c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f9e7 	bl	800adfe <USBD_CtlError>
 800aa30:	e004      	b.n	800aa3c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 faae 	bl	800af94 <USBD_CtlSendStatus>
 800aa38:	e000      	b.n	800aa3c <USBD_GetDescriptor+0x2cc>
    return;
 800aa3a:	bf00      	nop
  }
}
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop

0800aa44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	889b      	ldrh	r3, [r3, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d131      	bne.n	800aaba <USBD_SetAddress+0x76>
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	88db      	ldrh	r3, [r3, #6]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d12d      	bne.n	800aaba <USBD_SetAddress+0x76>
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	885b      	ldrh	r3, [r3, #2]
 800aa62:	2b7f      	cmp	r3, #127	; 0x7f
 800aa64:	d829      	bhi.n	800aaba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	885b      	ldrh	r3, [r3, #2]
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d104      	bne.n	800aa88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aa7e:	6839      	ldr	r1, [r7, #0]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f9bc 	bl	800adfe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa86:	e01d      	b.n	800aac4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	7bfa      	ldrb	r2, [r7, #15]
 800aa8c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa90:	7bfb      	ldrb	r3, [r7, #15]
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f003 fef7 	bl	800e888 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fa7a 	bl	800af94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d004      	beq.n	800aab0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2202      	movs	r2, #2
 800aaaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaae:	e009      	b.n	800aac4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab8:	e004      	b.n	800aac4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aaba:	6839      	ldr	r1, [r7, #0]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f99e 	bl	800adfe <USBD_CtlError>
  }
}
 800aac2:	bf00      	nop
 800aac4:	bf00      	nop
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	885b      	ldrh	r3, [r3, #2]
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	4b4e      	ldr	r3, [pc, #312]	; (800ac1c <USBD_SetConfig+0x150>)
 800aae2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aae4:	4b4d      	ldr	r3, [pc, #308]	; (800ac1c <USBD_SetConfig+0x150>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d905      	bls.n	800aaf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f985 	bl	800adfe <USBD_CtlError>
    return USBD_FAIL;
 800aaf4:	2303      	movs	r3, #3
 800aaf6:	e08c      	b.n	800ac12 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d002      	beq.n	800ab0a <USBD_SetConfig+0x3e>
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	d029      	beq.n	800ab5c <USBD_SetConfig+0x90>
 800ab08:	e075      	b.n	800abf6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ab0a:	4b44      	ldr	r3, [pc, #272]	; (800ac1c <USBD_SetConfig+0x150>)
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d020      	beq.n	800ab54 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ab12:	4b42      	ldr	r3, [pc, #264]	; (800ac1c <USBD_SetConfig+0x150>)
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	461a      	mov	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab1c:	4b3f      	ldr	r3, [pc, #252]	; (800ac1c <USBD_SetConfig+0x150>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	4619      	mov	r1, r3
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f7fe ffe7 	bl	8009af6 <USBD_SetClassConfig>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d008      	beq.n	800ab44 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ab32:	6839      	ldr	r1, [r7, #0]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f000 f962 	bl	800adfe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab42:	e065      	b.n	800ac10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fa25 	bl	800af94 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2203      	movs	r2, #3
 800ab4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab52:	e05d      	b.n	800ac10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 fa1d 	bl	800af94 <USBD_CtlSendStatus>
      break;
 800ab5a:	e059      	b.n	800ac10 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ab5c:	4b2f      	ldr	r3, [pc, #188]	; (800ac1c <USBD_SetConfig+0x150>)
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d112      	bne.n	800ab8a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2202      	movs	r2, #2
 800ab68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ab6c:	4b2b      	ldr	r3, [pc, #172]	; (800ac1c <USBD_SetConfig+0x150>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	461a      	mov	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab76:	4b29      	ldr	r3, [pc, #164]	; (800ac1c <USBD_SetConfig+0x150>)
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7fe ffd6 	bl	8009b2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fa06 	bl	800af94 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab88:	e042      	b.n	800ac10 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ab8a:	4b24      	ldr	r3, [pc, #144]	; (800ac1c <USBD_SetConfig+0x150>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d02a      	beq.n	800abee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7fe ffc4 	bl	8009b2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aba6:	4b1d      	ldr	r3, [pc, #116]	; (800ac1c <USBD_SetConfig+0x150>)
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800abb0:	4b1a      	ldr	r3, [pc, #104]	; (800ac1c <USBD_SetConfig+0x150>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7fe ff9d 	bl	8009af6 <USBD_SetClassConfig>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00f      	beq.n	800abe6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800abc6:	6839      	ldr	r1, [r7, #0]
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f918 	bl	800adfe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	4619      	mov	r1, r3
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f7fe ffa9 	bl	8009b2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2202      	movs	r2, #2
 800abe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800abe4:	e014      	b.n	800ac10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f9d4 	bl	800af94 <USBD_CtlSendStatus>
      break;
 800abec:	e010      	b.n	800ac10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f9d0 	bl	800af94 <USBD_CtlSendStatus>
      break;
 800abf4:	e00c      	b.n	800ac10 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800abf6:	6839      	ldr	r1, [r7, #0]
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 f900 	bl	800adfe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800abfe:	4b07      	ldr	r3, [pc, #28]	; (800ac1c <USBD_SetConfig+0x150>)
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7fe ff92 	bl	8009b2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac0e:	bf00      	nop
  }

  return ret;
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20000498 	.word	0x20000498

0800ac20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	88db      	ldrh	r3, [r3, #6]
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d004      	beq.n	800ac3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f8e2 	bl	800adfe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ac3a:	e023      	b.n	800ac84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	dc02      	bgt.n	800ac4e <USBD_GetConfig+0x2e>
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	dc03      	bgt.n	800ac54 <USBD_GetConfig+0x34>
 800ac4c:	e015      	b.n	800ac7a <USBD_GetConfig+0x5a>
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d00b      	beq.n	800ac6a <USBD_GetConfig+0x4a>
 800ac52:	e012      	b.n	800ac7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	3308      	adds	r3, #8
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f93c 	bl	800aee0 <USBD_CtlSendData>
        break;
 800ac68:	e00c      	b.n	800ac84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	2201      	movs	r2, #1
 800ac70:	4619      	mov	r1, r3
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f934 	bl	800aee0 <USBD_CtlSendData>
        break;
 800ac78:	e004      	b.n	800ac84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ac7a:	6839      	ldr	r1, [r7, #0]
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f8be 	bl	800adfe <USBD_CtlError>
        break;
 800ac82:	bf00      	nop
}
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d81e      	bhi.n	800ace2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	88db      	ldrh	r3, [r3, #6]
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	d004      	beq.n	800acb6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f8a5 	bl	800adfe <USBD_CtlError>
        break;
 800acb4:	e01a      	b.n	800acec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2201      	movs	r2, #1
 800acba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d005      	beq.n	800acd2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	f043 0202 	orr.w	r2, r3, #2
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	330c      	adds	r3, #12
 800acd6:	2202      	movs	r2, #2
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f900 	bl	800aee0 <USBD_CtlSendData>
      break;
 800ace0:	e004      	b.n	800acec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 f88a 	bl	800adfe <USBD_CtlError>
      break;
 800acea:	bf00      	nop
  }
}
 800acec:	bf00      	nop
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	885b      	ldrh	r3, [r3, #2]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d107      	bne.n	800ad16 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f940 	bl	800af94 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ad14:	e013      	b.n	800ad3e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	885b      	ldrh	r3, [r3, #2]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d10b      	bne.n	800ad36 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	889b      	ldrh	r3, [r3, #4]
 800ad22:	0a1b      	lsrs	r3, r3, #8
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f930 	bl	800af94 <USBD_CtlSendStatus>
}
 800ad34:	e003      	b.n	800ad3e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 f860 	bl	800adfe <USBD_CtlError>
}
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b082      	sub	sp, #8
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d80b      	bhi.n	800ad76 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	885b      	ldrh	r3, [r3, #2]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d10c      	bne.n	800ad80 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 f910 	bl	800af94 <USBD_CtlSendStatus>
      }
      break;
 800ad74:	e004      	b.n	800ad80 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f840 	bl	800adfe <USBD_CtlError>
      break;
 800ad7e:	e000      	b.n	800ad82 <USBD_ClrFeature+0x3c>
      break;
 800ad80:	bf00      	nop
  }
}
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b084      	sub	sp, #16
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
 800ad92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3301      	adds	r3, #1
 800ada4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	781a      	ldrb	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3301      	adds	r3, #1
 800adb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f7ff fa41 	bl	800a23c <SWAPBYTE>
 800adba:	4603      	mov	r3, r0
 800adbc:	461a      	mov	r2, r3
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3301      	adds	r3, #1
 800adc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	3301      	adds	r3, #1
 800adcc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f7ff fa34 	bl	800a23c <SWAPBYTE>
 800add4:	4603      	mov	r3, r0
 800add6:	461a      	mov	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	3301      	adds	r3, #1
 800ade0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	3301      	adds	r3, #1
 800ade6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f7ff fa27 	bl	800a23c <SWAPBYTE>
 800adee:	4603      	mov	r3, r0
 800adf0:	461a      	mov	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	80da      	strh	r2, [r3, #6]
}
 800adf6:	bf00      	nop
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b082      	sub	sp, #8
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae08:	2180      	movs	r1, #128	; 0x80
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f003 fcd2 	bl	800e7b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ae10:	2100      	movs	r1, #0
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f003 fcce 	bl	800e7b4 <USBD_LL_StallEP>
}
 800ae18:	bf00      	nop
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b086      	sub	sp, #24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d036      	beq.n	800aea4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ae3a:	6938      	ldr	r0, [r7, #16]
 800ae3c:	f000 f836 	bl	800aeac <USBD_GetLen>
 800ae40:	4603      	mov	r3, r0
 800ae42:	3301      	adds	r3, #1
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	005b      	lsls	r3, r3, #1
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ae4e:	7dfb      	ldrb	r3, [r7, #23]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	4413      	add	r3, r2
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	7812      	ldrb	r2, [r2, #0]
 800ae58:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	4413      	add	r3, r2
 800ae66:	2203      	movs	r2, #3
 800ae68:	701a      	strb	r2, [r3, #0]
  idx++;
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ae70:	e013      	b.n	800ae9a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ae72:	7dfb      	ldrb	r3, [r7, #23]
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	4413      	add	r3, r2
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	7812      	ldrb	r2, [r2, #0]
 800ae7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	3301      	adds	r3, #1
 800ae82:	613b      	str	r3, [r7, #16]
    idx++;
 800ae84:	7dfb      	ldrb	r3, [r7, #23]
 800ae86:	3301      	adds	r3, #1
 800ae88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae8a:	7dfb      	ldrb	r3, [r7, #23]
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	4413      	add	r3, r2
 800ae90:	2200      	movs	r2, #0
 800ae92:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae94:	7dfb      	ldrb	r3, [r7, #23]
 800ae96:	3301      	adds	r3, #1
 800ae98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e7      	bne.n	800ae72 <USBD_GetString+0x52>
 800aea2:	e000      	b.n	800aea6 <USBD_GetString+0x86>
    return;
 800aea4:	bf00      	nop
  }
}
 800aea6:	3718      	adds	r7, #24
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800aebc:	e005      	b.n	800aeca <USBD_GetLen+0x1e>
  {
    len++;
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	3301      	adds	r3, #1
 800aec2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	3301      	adds	r3, #1
 800aec8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	781b      	ldrb	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d1f5      	bne.n	800aebe <USBD_GetLen+0x12>
  }

  return len;
 800aed2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2202      	movs	r2, #2
 800aef0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68ba      	ldr	r2, [r7, #8]
 800af04:	2100      	movs	r1, #0
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f003 fcdd 	bl	800e8c6 <USBD_LL_Transmit>

  return USBD_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b084      	sub	sp, #16
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	60f8      	str	r0, [r7, #12]
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	2100      	movs	r1, #0
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f003 fccc 	bl	800e8c6 <USBD_LL_Transmit>

  return USBD_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3710      	adds	r7, #16
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	60f8      	str	r0, [r7, #12]
 800af40:	60b9      	str	r1, [r7, #8]
 800af42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2203      	movs	r2, #3
 800af48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	2100      	movs	r1, #0
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f003 fcd0 	bl	800e908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	60f8      	str	r0, [r7, #12]
 800af7a:	60b9      	str	r1, [r7, #8]
 800af7c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	2100      	movs	r1, #0
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f003 fcbf 	bl	800e908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2204      	movs	r2, #4
 800afa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800afa4:	2300      	movs	r3, #0
 800afa6:	2200      	movs	r2, #0
 800afa8:	2100      	movs	r1, #0
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f003 fc8b 	bl	800e8c6 <USBD_LL_Transmit>

  return USBD_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2205      	movs	r2, #5
 800afc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afca:	2300      	movs	r3, #0
 800afcc:	2200      	movs	r2, #0
 800afce:	2100      	movs	r1, #0
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f003 fc99 	bl	800e908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b087      	sub	sp, #28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	4613      	mov	r3, r2
 800afec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800afee:	2301      	movs	r3, #1
 800aff0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800aff2:	2300      	movs	r3, #0
 800aff4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800aff6:	4b1f      	ldr	r3, [pc, #124]	; (800b074 <FATFS_LinkDriverEx+0x94>)
 800aff8:	7a5b      	ldrb	r3, [r3, #9]
 800affa:	b2db      	uxtb	r3, r3
 800affc:	2b00      	cmp	r3, #0
 800affe:	d131      	bne.n	800b064 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b000:	4b1c      	ldr	r3, [pc, #112]	; (800b074 <FATFS_LinkDriverEx+0x94>)
 800b002:	7a5b      	ldrb	r3, [r3, #9]
 800b004:	b2db      	uxtb	r3, r3
 800b006:	461a      	mov	r2, r3
 800b008:	4b1a      	ldr	r3, [pc, #104]	; (800b074 <FATFS_LinkDriverEx+0x94>)
 800b00a:	2100      	movs	r1, #0
 800b00c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b00e:	4b19      	ldr	r3, [pc, #100]	; (800b074 <FATFS_LinkDriverEx+0x94>)
 800b010:	7a5b      	ldrb	r3, [r3, #9]
 800b012:	b2db      	uxtb	r3, r3
 800b014:	4a17      	ldr	r2, [pc, #92]	; (800b074 <FATFS_LinkDriverEx+0x94>)
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	4413      	add	r3, r2
 800b01a:	68fa      	ldr	r2, [r7, #12]
 800b01c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b01e:	4b15      	ldr	r3, [pc, #84]	; (800b074 <FATFS_LinkDriverEx+0x94>)
 800b020:	7a5b      	ldrb	r3, [r3, #9]
 800b022:	b2db      	uxtb	r3, r3
 800b024:	461a      	mov	r2, r3
 800b026:	4b13      	ldr	r3, [pc, #76]	; (800b074 <FATFS_LinkDriverEx+0x94>)
 800b028:	4413      	add	r3, r2
 800b02a:	79fa      	ldrb	r2, [r7, #7]
 800b02c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b02e:	4b11      	ldr	r3, [pc, #68]	; (800b074 <FATFS_LinkDriverEx+0x94>)
 800b030:	7a5b      	ldrb	r3, [r3, #9]
 800b032:	b2db      	uxtb	r3, r3
 800b034:	1c5a      	adds	r2, r3, #1
 800b036:	b2d1      	uxtb	r1, r2
 800b038:	4a0e      	ldr	r2, [pc, #56]	; (800b074 <FATFS_LinkDriverEx+0x94>)
 800b03a:	7251      	strb	r1, [r2, #9]
 800b03c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b03e:	7dbb      	ldrb	r3, [r7, #22]
 800b040:	3330      	adds	r3, #48	; 0x30
 800b042:	b2da      	uxtb	r2, r3
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	3301      	adds	r3, #1
 800b04c:	223a      	movs	r2, #58	; 0x3a
 800b04e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	3302      	adds	r3, #2
 800b054:	222f      	movs	r2, #47	; 0x2f
 800b056:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	3303      	adds	r3, #3
 800b05c:	2200      	movs	r2, #0
 800b05e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b064:	7dfb      	ldrb	r3, [r7, #23]
}
 800b066:	4618      	mov	r0, r3
 800b068:	371c      	adds	r7, #28
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	2000049c 	.word	0x2000049c

0800b078 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b082:	2200      	movs	r2, #0
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff ffaa 	bl	800afe0 <FATFS_LinkDriverEx>
 800b08c:	4603      	mov	r3, r0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
	...

0800b098 <__NVIC_SetPriority>:
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4603      	mov	r3, r0
 800b0a0:	6039      	str	r1, [r7, #0]
 800b0a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	db0a      	blt.n	800b0c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	490c      	ldr	r1, [pc, #48]	; (800b0e4 <__NVIC_SetPriority+0x4c>)
 800b0b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0b6:	0112      	lsls	r2, r2, #4
 800b0b8:	b2d2      	uxtb	r2, r2
 800b0ba:	440b      	add	r3, r1
 800b0bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b0c0:	e00a      	b.n	800b0d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	4908      	ldr	r1, [pc, #32]	; (800b0e8 <__NVIC_SetPriority+0x50>)
 800b0c8:	79fb      	ldrb	r3, [r7, #7]
 800b0ca:	f003 030f 	and.w	r3, r3, #15
 800b0ce:	3b04      	subs	r3, #4
 800b0d0:	0112      	lsls	r2, r2, #4
 800b0d2:	b2d2      	uxtb	r2, r2
 800b0d4:	440b      	add	r3, r1
 800b0d6:	761a      	strb	r2, [r3, #24]
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	e000e100 	.word	0xe000e100
 800b0e8:	e000ed00 	.word	0xe000ed00

0800b0ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	f06f 0004 	mvn.w	r0, #4
 800b0f6:	f7ff ffcf 	bl	800b098 <__NVIC_SetPriority>
#endif
}
 800b0fa:	bf00      	nop
 800b0fc:	bd80      	pop	{r7, pc}
	...

0800b100 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b106:	f3ef 8305 	mrs	r3, IPSR
 800b10a:	603b      	str	r3, [r7, #0]
  return(result);
 800b10c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b112:	f06f 0305 	mvn.w	r3, #5
 800b116:	607b      	str	r3, [r7, #4]
 800b118:	e00c      	b.n	800b134 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b11a:	4b0a      	ldr	r3, [pc, #40]	; (800b144 <osKernelInitialize+0x44>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d105      	bne.n	800b12e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b122:	4b08      	ldr	r3, [pc, #32]	; (800b144 <osKernelInitialize+0x44>)
 800b124:	2201      	movs	r2, #1
 800b126:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b128:	2300      	movs	r3, #0
 800b12a:	607b      	str	r3, [r7, #4]
 800b12c:	e002      	b.n	800b134 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b12e:	f04f 33ff 	mov.w	r3, #4294967295
 800b132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b134:	687b      	ldr	r3, [r7, #4]
}
 800b136:	4618      	mov	r0, r3
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	200004a8 	.word	0x200004a8

0800b148 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800b14e:	f001 fef5 	bl	800cf3c <xTaskGetSchedulerState>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <osKernelGetState+0x1a>
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d105      	bne.n	800b168 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800b15c:	2302      	movs	r3, #2
 800b15e:	607b      	str	r3, [r7, #4]
      break;
 800b160:	e00c      	b.n	800b17c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800b162:	2303      	movs	r3, #3
 800b164:	607b      	str	r3, [r7, #4]
      break;
 800b166:	e009      	b.n	800b17c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800b168:	4b07      	ldr	r3, [pc, #28]	; (800b188 <osKernelGetState+0x40>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d102      	bne.n	800b176 <osKernelGetState+0x2e>
        state = osKernelReady;
 800b170:	2301      	movs	r3, #1
 800b172:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800b174:	e001      	b.n	800b17a <osKernelGetState+0x32>
        state = osKernelInactive;
 800b176:	2300      	movs	r3, #0
 800b178:	607b      	str	r3, [r7, #4]
      break;
 800b17a:	bf00      	nop
  }

  return (state);
 800b17c:	687b      	ldr	r3, [r7, #4]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3708      	adds	r7, #8
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	200004a8 	.word	0x200004a8

0800b18c <osKernelStart>:

osStatus_t osKernelStart (void) {
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b192:	f3ef 8305 	mrs	r3, IPSR
 800b196:	603b      	str	r3, [r7, #0]
  return(result);
 800b198:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d003      	beq.n	800b1a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b19e:	f06f 0305 	mvn.w	r3, #5
 800b1a2:	607b      	str	r3, [r7, #4]
 800b1a4:	e010      	b.n	800b1c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b1a6:	4b0b      	ldr	r3, [pc, #44]	; (800b1d4 <osKernelStart+0x48>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d109      	bne.n	800b1c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b1ae:	f7ff ff9d 	bl	800b0ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b1b2:	4b08      	ldr	r3, [pc, #32]	; (800b1d4 <osKernelStart+0x48>)
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b1b8:	f001 fa66 	bl	800c688 <vTaskStartScheduler>
      stat = osOK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	607b      	str	r3, [r7, #4]
 800b1c0:	e002      	b.n	800b1c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b1c8:	687b      	ldr	r3, [r7, #4]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
 800b1d2:	bf00      	nop
 800b1d4:	200004a8 	.word	0x200004a8

0800b1d8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1de:	f3ef 8305 	mrs	r3, IPSR
 800b1e2:	603b      	str	r3, [r7, #0]
  return(result);
 800b1e4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d003      	beq.n	800b1f2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800b1ea:	f001 fb6f 	bl	800c8cc <xTaskGetTickCountFromISR>
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	e002      	b.n	800b1f8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800b1f2:	f001 fb5b 	bl	800c8ac <xTaskGetTickCount>
 800b1f6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800b1f8:	687b      	ldr	r3, [r7, #4]
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b202:	b580      	push	{r7, lr}
 800b204:	b08e      	sub	sp, #56	; 0x38
 800b206:	af04      	add	r7, sp, #16
 800b208:	60f8      	str	r0, [r7, #12]
 800b20a:	60b9      	str	r1, [r7, #8]
 800b20c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b212:	f3ef 8305 	mrs	r3, IPSR
 800b216:	617b      	str	r3, [r7, #20]
  return(result);
 800b218:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d17e      	bne.n	800b31c <osThreadNew+0x11a>
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d07b      	beq.n	800b31c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b224:	2380      	movs	r3, #128	; 0x80
 800b226:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b228:	2318      	movs	r3, #24
 800b22a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b22c:	2300      	movs	r3, #0
 800b22e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b230:	f04f 33ff 	mov.w	r3, #4294967295
 800b234:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d045      	beq.n	800b2c8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <osThreadNew+0x48>
        name = attr->name;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	699b      	ldr	r3, [r3, #24]
 800b256:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d008      	beq.n	800b270 <osThreadNew+0x6e>
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	2b38      	cmp	r3, #56	; 0x38
 800b262:	d805      	bhi.n	800b270 <osThreadNew+0x6e>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d001      	beq.n	800b274 <osThreadNew+0x72>
        return (NULL);
 800b270:	2300      	movs	r3, #0
 800b272:	e054      	b.n	800b31e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	695b      	ldr	r3, [r3, #20]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d003      	beq.n	800b284 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	089b      	lsrs	r3, r3, #2
 800b282:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00e      	beq.n	800b2aa <osThreadNew+0xa8>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	68db      	ldr	r3, [r3, #12]
 800b290:	2b5b      	cmp	r3, #91	; 0x5b
 800b292:	d90a      	bls.n	800b2aa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d006      	beq.n	800b2aa <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	695b      	ldr	r3, [r3, #20]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <osThreadNew+0xa8>
        mem = 1;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	61bb      	str	r3, [r7, #24]
 800b2a8:	e010      	b.n	800b2cc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d10c      	bne.n	800b2cc <osThreadNew+0xca>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	68db      	ldr	r3, [r3, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d108      	bne.n	800b2cc <osThreadNew+0xca>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d104      	bne.n	800b2cc <osThreadNew+0xca>
          mem = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	61bb      	str	r3, [r7, #24]
 800b2c6:	e001      	b.n	800b2cc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d110      	bne.n	800b2f4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b2da:	9202      	str	r2, [sp, #8]
 800b2dc:	9301      	str	r3, [sp, #4]
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	6a3a      	ldr	r2, [r7, #32]
 800b2e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 fff7 	bl	800c2dc <xTaskCreateStatic>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	613b      	str	r3, [r7, #16]
 800b2f2:	e013      	b.n	800b31c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d110      	bne.n	800b31c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b2fa:	6a3b      	ldr	r3, [r7, #32]
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	f107 0310 	add.w	r3, r7, #16
 800b302:	9301      	str	r3, [sp, #4]
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	9300      	str	r3, [sp, #0]
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f001 f842 	bl	800c396 <xTaskCreate>
 800b312:	4603      	mov	r3, r0
 800b314:	2b01      	cmp	r3, #1
 800b316:	d001      	beq.n	800b31c <osThreadNew+0x11a>
            hTask = NULL;
 800b318:	2300      	movs	r3, #0
 800b31a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b31c:	693b      	ldr	r3, [r7, #16]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3728      	adds	r7, #40	; 0x28
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b326:	b580      	push	{r7, lr}
 800b328:	b084      	sub	sp, #16
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b32e:	f3ef 8305 	mrs	r3, IPSR
 800b332:	60bb      	str	r3, [r7, #8]
  return(result);
 800b334:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <osDelay+0x1c>
    stat = osErrorISR;
 800b33a:	f06f 0305 	mvn.w	r3, #5
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	e007      	b.n	800b352 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f001 f967 	bl	800c620 <vTaskDelay>
    }
  }

  return (stat);
 800b352:	68fb      	ldr	r3, [r7, #12]
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08a      	sub	sp, #40	; 0x28
 800b360:	af02      	add	r7, sp, #8
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b36c:	f3ef 8305 	mrs	r3, IPSR
 800b370:	613b      	str	r3, [r7, #16]
  return(result);
 800b372:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b374:	2b00      	cmp	r3, #0
 800b376:	d15f      	bne.n	800b438 <osMessageQueueNew+0xdc>
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d05c      	beq.n	800b438 <osMessageQueueNew+0xdc>
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d059      	beq.n	800b438 <osMessageQueueNew+0xdc>
    mem = -1;
 800b384:	f04f 33ff 	mov.w	r3, #4294967295
 800b388:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d029      	beq.n	800b3e4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d012      	beq.n	800b3be <osMessageQueueNew+0x62>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	2b4f      	cmp	r3, #79	; 0x4f
 800b39e:	d90e      	bls.n	800b3be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d00a      	beq.n	800b3be <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	695a      	ldr	r2, [r3, #20]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	68b9      	ldr	r1, [r7, #8]
 800b3b0:	fb01 f303 	mul.w	r3, r1, r3
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d302      	bcc.n	800b3be <osMessageQueueNew+0x62>
        mem = 1;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	61bb      	str	r3, [r7, #24]
 800b3bc:	e014      	b.n	800b3e8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d110      	bne.n	800b3e8 <osMessageQueueNew+0x8c>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10c      	bne.n	800b3e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d108      	bne.n	800b3e8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	695b      	ldr	r3, [r3, #20]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d104      	bne.n	800b3e8 <osMessageQueueNew+0x8c>
          mem = 0;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	61bb      	str	r3, [r7, #24]
 800b3e2:	e001      	b.n	800b3e8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d10b      	bne.n	800b406 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	691a      	ldr	r2, [r3, #16]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	9100      	str	r1, [sp, #0]
 800b3fa:	68b9      	ldr	r1, [r7, #8]
 800b3fc:	68f8      	ldr	r0, [r7, #12]
 800b3fe:	f000 fa2f 	bl	800b860 <xQueueGenericCreateStatic>
 800b402:	61f8      	str	r0, [r7, #28]
 800b404:	e008      	b.n	800b418 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d105      	bne.n	800b418 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b40c:	2200      	movs	r2, #0
 800b40e:	68b9      	ldr	r1, [r7, #8]
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 fa9d 	bl	800b950 <xQueueGenericCreate>
 800b416:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00c      	beq.n	800b438 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <osMessageQueueNew+0xd0>
        name = attr->name;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	617b      	str	r3, [r7, #20]
 800b42a:	e001      	b.n	800b430 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b42c:	2300      	movs	r3, #0
 800b42e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b430:	6979      	ldr	r1, [r7, #20]
 800b432:	69f8      	ldr	r0, [r7, #28]
 800b434:	f000 fef4 	bl	800c220 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b438:	69fb      	ldr	r3, [r7, #28]
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3720      	adds	r7, #32
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	603b      	str	r3, [r7, #0]
 800b450:	4613      	mov	r3, r2
 800b452:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b458:	2300      	movs	r3, #0
 800b45a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b45c:	f3ef 8305 	mrs	r3, IPSR
 800b460:	617b      	str	r3, [r7, #20]
  return(result);
 800b462:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b464:	2b00      	cmp	r3, #0
 800b466:	d028      	beq.n	800b4ba <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d005      	beq.n	800b47a <osMessageQueuePut+0x36>
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <osMessageQueuePut+0x36>
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b47a:	f06f 0303 	mvn.w	r3, #3
 800b47e:	61fb      	str	r3, [r7, #28]
 800b480:	e038      	b.n	800b4f4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b482:	2300      	movs	r3, #0
 800b484:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b486:	f107 0210 	add.w	r2, r7, #16
 800b48a:	2300      	movs	r3, #0
 800b48c:	68b9      	ldr	r1, [r7, #8]
 800b48e:	69b8      	ldr	r0, [r7, #24]
 800b490:	f000 fbba 	bl	800bc08 <xQueueGenericSendFromISR>
 800b494:	4603      	mov	r3, r0
 800b496:	2b01      	cmp	r3, #1
 800b498:	d003      	beq.n	800b4a2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b49a:	f06f 0302 	mvn.w	r3, #2
 800b49e:	61fb      	str	r3, [r7, #28]
 800b4a0:	e028      	b.n	800b4f4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d025      	beq.n	800b4f4 <osMessageQueuePut+0xb0>
 800b4a8:	4b15      	ldr	r3, [pc, #84]	; (800b500 <osMessageQueuePut+0xbc>)
 800b4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	e01c      	b.n	800b4f4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <osMessageQueuePut+0x82>
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d103      	bne.n	800b4ce <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b4c6:	f06f 0303 	mvn.w	r3, #3
 800b4ca:	61fb      	str	r3, [r7, #28]
 800b4cc:	e012      	b.n	800b4f4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	683a      	ldr	r2, [r7, #0]
 800b4d2:	68b9      	ldr	r1, [r7, #8]
 800b4d4:	69b8      	ldr	r0, [r7, #24]
 800b4d6:	f000 fa99 	bl	800ba0c <xQueueGenericSend>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d009      	beq.n	800b4f4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d003      	beq.n	800b4ee <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b4e6:	f06f 0301 	mvn.w	r3, #1
 800b4ea:	61fb      	str	r3, [r7, #28]
 800b4ec:	e002      	b.n	800b4f4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b4ee:	f06f 0302 	mvn.w	r3, #2
 800b4f2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b4f4:	69fb      	ldr	r3, [r7, #28]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3720      	adds	r7, #32
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	e000ed04 	.word	0xe000ed04

0800b504 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b504:	b580      	push	{r7, lr}
 800b506:	b088      	sub	sp, #32
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b516:	2300      	movs	r3, #0
 800b518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b51a:	f3ef 8305 	mrs	r3, IPSR
 800b51e:	617b      	str	r3, [r7, #20]
  return(result);
 800b520:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b522:	2b00      	cmp	r3, #0
 800b524:	d028      	beq.n	800b578 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d005      	beq.n	800b538 <osMessageQueueGet+0x34>
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d002      	beq.n	800b538 <osMessageQueueGet+0x34>
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d003      	beq.n	800b540 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b538:	f06f 0303 	mvn.w	r3, #3
 800b53c:	61fb      	str	r3, [r7, #28]
 800b53e:	e037      	b.n	800b5b0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b540:	2300      	movs	r3, #0
 800b542:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b544:	f107 0310 	add.w	r3, r7, #16
 800b548:	461a      	mov	r2, r3
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	69b8      	ldr	r0, [r7, #24]
 800b54e:	f000 fcd7 	bl	800bf00 <xQueueReceiveFromISR>
 800b552:	4603      	mov	r3, r0
 800b554:	2b01      	cmp	r3, #1
 800b556:	d003      	beq.n	800b560 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b558:	f06f 0302 	mvn.w	r3, #2
 800b55c:	61fb      	str	r3, [r7, #28]
 800b55e:	e027      	b.n	800b5b0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d024      	beq.n	800b5b0 <osMessageQueueGet+0xac>
 800b566:	4b15      	ldr	r3, [pc, #84]	; (800b5bc <osMessageQueueGet+0xb8>)
 800b568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	e01b      	b.n	800b5b0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d002      	beq.n	800b584 <osMessageQueueGet+0x80>
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d103      	bne.n	800b58c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b584:	f06f 0303 	mvn.w	r3, #3
 800b588:	61fb      	str	r3, [r7, #28]
 800b58a:	e011      	b.n	800b5b0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b58c:	683a      	ldr	r2, [r7, #0]
 800b58e:	68b9      	ldr	r1, [r7, #8]
 800b590:	69b8      	ldr	r0, [r7, #24]
 800b592:	f000 fbd5 	bl	800bd40 <xQueueReceive>
 800b596:	4603      	mov	r3, r0
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d009      	beq.n	800b5b0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d003      	beq.n	800b5aa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b5a2:	f06f 0301 	mvn.w	r3, #1
 800b5a6:	61fb      	str	r3, [r7, #28]
 800b5a8:	e002      	b.n	800b5b0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b5aa:	f06f 0302 	mvn.w	r3, #2
 800b5ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b5b0:	69fb      	ldr	r3, [r7, #28]
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3720      	adds	r7, #32
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	e000ed04 	.word	0xe000ed04

0800b5c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	4a07      	ldr	r2, [pc, #28]	; (800b5ec <vApplicationGetIdleTaskMemory+0x2c>)
 800b5d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	4a06      	ldr	r2, [pc, #24]	; (800b5f0 <vApplicationGetIdleTaskMemory+0x30>)
 800b5d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2280      	movs	r2, #128	; 0x80
 800b5dc:	601a      	str	r2, [r3, #0]
}
 800b5de:	bf00      	nop
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	200004ac 	.word	0x200004ac
 800b5f0:	20000508 	.word	0x20000508

0800b5f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	4a07      	ldr	r2, [pc, #28]	; (800b620 <vApplicationGetTimerTaskMemory+0x2c>)
 800b604:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	4a06      	ldr	r2, [pc, #24]	; (800b624 <vApplicationGetTimerTaskMemory+0x30>)
 800b60a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b612:	601a      	str	r2, [r3, #0]
}
 800b614:	bf00      	nop
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	20000708 	.word	0x20000708
 800b624:	20000764 	.word	0x20000764

0800b628 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f103 0208 	add.w	r2, r3, #8
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f04f 32ff 	mov.w	r2, #4294967295
 800b640:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f103 0208 	add.w	r2, r3, #8
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f103 0208 	add.w	r2, r3, #8
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2200      	movs	r2, #0
 800b65a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b65c:	bf00      	nop
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b682:	b480      	push	{r7}
 800b684:	b085      	sub	sp, #20
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	689a      	ldr	r2, [r3, #8]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	1c5a      	adds	r2, r3, #1
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	601a      	str	r2, [r3, #0]
}
 800b6be:	bf00      	nop
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr

0800b6ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6ca:	b480      	push	{r7}
 800b6cc:	b085      	sub	sp, #20
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6e0:	d103      	bne.n	800b6ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	60fb      	str	r3, [r7, #12]
 800b6e8:	e00c      	b.n	800b704 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	3308      	adds	r3, #8
 800b6ee:	60fb      	str	r3, [r7, #12]
 800b6f0:	e002      	b.n	800b6f8 <vListInsert+0x2e>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	60fb      	str	r3, [r7, #12]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	429a      	cmp	r2, r3
 800b702:	d2f6      	bcs.n	800b6f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	601a      	str	r2, [r3, #0]
}
 800b730:	bf00      	nop
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6892      	ldr	r2, [r2, #8]
 800b752:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	6852      	ldr	r2, [r2, #4]
 800b75c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	429a      	cmp	r2, r3
 800b766:	d103      	bne.n	800b770 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689a      	ldr	r2, [r3, #8]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	1e5a      	subs	r2, r3, #1
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d10a      	bne.n	800b7ba <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a8:	f383 8811 	msr	BASEPRI, r3
 800b7ac:	f3bf 8f6f 	isb	sy
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7b6:	bf00      	nop
 800b7b8:	e7fe      	b.n	800b7b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b7ba:	f002 f91b 	bl	800d9f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c6:	68f9      	ldr	r1, [r7, #12]
 800b7c8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7ca:	fb01 f303 	mul.w	r3, r1, r3
 800b7ce:	441a      	add	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	68f9      	ldr	r1, [r7, #12]
 800b7ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7f0:	fb01 f303 	mul.w	r3, r1, r3
 800b7f4:	441a      	add	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	22ff      	movs	r2, #255	; 0xff
 800b7fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	22ff      	movs	r2, #255	; 0xff
 800b806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d114      	bne.n	800b83a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d01a      	beq.n	800b84e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	3310      	adds	r3, #16
 800b81c:	4618      	mov	r0, r3
 800b81e:	f001 f9cf 	bl	800cbc0 <xTaskRemoveFromEventList>
 800b822:	4603      	mov	r3, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d012      	beq.n	800b84e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b828:	4b0c      	ldr	r3, [pc, #48]	; (800b85c <xQueueGenericReset+0xcc>)
 800b82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	f3bf 8f4f 	dsb	sy
 800b834:	f3bf 8f6f 	isb	sy
 800b838:	e009      	b.n	800b84e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	3310      	adds	r3, #16
 800b83e:	4618      	mov	r0, r3
 800b840:	f7ff fef2 	bl	800b628 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3324      	adds	r3, #36	; 0x24
 800b848:	4618      	mov	r0, r3
 800b84a:	f7ff feed 	bl	800b628 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b84e:	f002 f901 	bl	800da54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b852:	2301      	movs	r3, #1
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	e000ed04 	.word	0xe000ed04

0800b860 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08e      	sub	sp, #56	; 0x38
 800b864:	af02      	add	r7, sp, #8
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10a      	bne.n	800b88a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b886:	bf00      	nop
 800b888:	e7fe      	b.n	800b888 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10a      	bne.n	800b8a6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b894:	f383 8811 	msr	BASEPRI, r3
 800b898:	f3bf 8f6f 	isb	sy
 800b89c:	f3bf 8f4f 	dsb	sy
 800b8a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8a2:	bf00      	nop
 800b8a4:	e7fe      	b.n	800b8a4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <xQueueGenericCreateStatic+0x52>
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d001      	beq.n	800b8b6 <xQueueGenericCreateStatic+0x56>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e000      	b.n	800b8b8 <xQueueGenericCreateStatic+0x58>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10a      	bne.n	800b8d2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	623b      	str	r3, [r7, #32]
}
 800b8ce:	bf00      	nop
 800b8d0:	e7fe      	b.n	800b8d0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d102      	bne.n	800b8de <xQueueGenericCreateStatic+0x7e>
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <xQueueGenericCreateStatic+0x82>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e000      	b.n	800b8e4 <xQueueGenericCreateStatic+0x84>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d10a      	bne.n	800b8fe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ec:	f383 8811 	msr	BASEPRI, r3
 800b8f0:	f3bf 8f6f 	isb	sy
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	61fb      	str	r3, [r7, #28]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b8fe:	2350      	movs	r3, #80	; 0x50
 800b900:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b50      	cmp	r3, #80	; 0x50
 800b906:	d00a      	beq.n	800b91e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90c:	f383 8811 	msr	BASEPRI, r3
 800b910:	f3bf 8f6f 	isb	sy
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	61bb      	str	r3, [r7, #24]
}
 800b91a:	bf00      	nop
 800b91c:	e7fe      	b.n	800b91c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b91e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00d      	beq.n	800b946 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b932:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	4613      	mov	r3, r2
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	68b9      	ldr	r1, [r7, #8]
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 f83f 	bl	800b9c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b948:	4618      	mov	r0, r3
 800b94a:	3730      	adds	r7, #48	; 0x30
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08a      	sub	sp, #40	; 0x28
 800b954:	af02      	add	r7, sp, #8
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	4613      	mov	r3, r2
 800b95c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <xQueueGenericCreate+0x2a>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	613b      	str	r3, [r7, #16]
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	fb02 f303 	mul.w	r3, r2, r3
 800b982:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	3350      	adds	r3, #80	; 0x50
 800b988:	4618      	mov	r0, r3
 800b98a:	f002 f955 	bl	800dc38 <pvPortMalloc>
 800b98e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d011      	beq.n	800b9ba <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	3350      	adds	r3, #80	; 0x50
 800b99e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9a8:	79fa      	ldrb	r2, [r7, #7]
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	9300      	str	r3, [sp, #0]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	68b9      	ldr	r1, [r7, #8]
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f000 f805 	bl	800b9c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9ba:	69bb      	ldr	r3, [r7, #24]
	}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3720      	adds	r7, #32
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d103      	bne.n	800b9e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9d8:	69bb      	ldr	r3, [r7, #24]
 800b9da:	69ba      	ldr	r2, [r7, #24]
 800b9dc:	601a      	str	r2, [r3, #0]
 800b9de:	e002      	b.n	800b9e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9ec:	69bb      	ldr	r3, [r7, #24]
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	69b8      	ldr	r0, [r7, #24]
 800b9f6:	f7ff fecb 	bl	800b790 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	78fa      	ldrb	r2, [r7, #3]
 800b9fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba02:	bf00      	nop
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b08e      	sub	sp, #56	; 0x38
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
 800ba18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10a      	bne.n	800ba3e <xQueueGenericSend+0x32>
	__asm volatile
 800ba28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2c:	f383 8811 	msr	BASEPRI, r3
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ba3a:	bf00      	nop
 800ba3c:	e7fe      	b.n	800ba3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d103      	bne.n	800ba4c <xQueueGenericSend+0x40>
 800ba44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <xQueueGenericSend+0x44>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e000      	b.n	800ba52 <xQueueGenericSend+0x46>
 800ba50:	2300      	movs	r3, #0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10a      	bne.n	800ba6c <xQueueGenericSend+0x60>
	__asm volatile
 800ba56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5a:	f383 8811 	msr	BASEPRI, r3
 800ba5e:	f3bf 8f6f 	isb	sy
 800ba62:	f3bf 8f4f 	dsb	sy
 800ba66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba68:	bf00      	nop
 800ba6a:	e7fe      	b.n	800ba6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d103      	bne.n	800ba7a <xQueueGenericSend+0x6e>
 800ba72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba76:	2b01      	cmp	r3, #1
 800ba78:	d101      	bne.n	800ba7e <xQueueGenericSend+0x72>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	e000      	b.n	800ba80 <xQueueGenericSend+0x74>
 800ba7e:	2300      	movs	r3, #0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d10a      	bne.n	800ba9a <xQueueGenericSend+0x8e>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	623b      	str	r3, [r7, #32]
}
 800ba96:	bf00      	nop
 800ba98:	e7fe      	b.n	800ba98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba9a:	f001 fa4f 	bl	800cf3c <xTaskGetSchedulerState>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d102      	bne.n	800baaa <xQueueGenericSend+0x9e>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d101      	bne.n	800baae <xQueueGenericSend+0xa2>
 800baaa:	2301      	movs	r3, #1
 800baac:	e000      	b.n	800bab0 <xQueueGenericSend+0xa4>
 800baae:	2300      	movs	r3, #0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d10a      	bne.n	800baca <xQueueGenericSend+0xbe>
	__asm volatile
 800bab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	61fb      	str	r3, [r7, #28]
}
 800bac6:	bf00      	nop
 800bac8:	e7fe      	b.n	800bac8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800baca:	f001 ff93 	bl	800d9f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d302      	bcc.n	800bae0 <xQueueGenericSend+0xd4>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b02      	cmp	r3, #2
 800bade:	d129      	bne.n	800bb34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bae0:	683a      	ldr	r2, [r7, #0]
 800bae2:	68b9      	ldr	r1, [r7, #8]
 800bae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bae6:	f000 fa8b 	bl	800c000 <prvCopyDataToQueue>
 800baea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d010      	beq.n	800bb16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf6:	3324      	adds	r3, #36	; 0x24
 800baf8:	4618      	mov	r0, r3
 800bafa:	f001 f861 	bl	800cbc0 <xTaskRemoveFromEventList>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d013      	beq.n	800bb2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bb04:	4b3f      	ldr	r3, [pc, #252]	; (800bc04 <xQueueGenericSend+0x1f8>)
 800bb06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	f3bf 8f6f 	isb	sy
 800bb14:	e00a      	b.n	800bb2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d007      	beq.n	800bb2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bb1c:	4b39      	ldr	r3, [pc, #228]	; (800bc04 <xQueueGenericSend+0x1f8>)
 800bb1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb22:	601a      	str	r2, [r3, #0]
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bb2c:	f001 ff92 	bl	800da54 <vPortExitCritical>
				return pdPASS;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e063      	b.n	800bbfc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d103      	bne.n	800bb42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bb3a:	f001 ff8b 	bl	800da54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	e05c      	b.n	800bbfc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d106      	bne.n	800bb56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb48:	f107 0314 	add.w	r3, r7, #20
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f001 f89b 	bl	800cc88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb52:	2301      	movs	r3, #1
 800bb54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb56:	f001 ff7d 	bl	800da54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb5a:	f000 fdfb 	bl	800c754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb5e:	f001 ff49 	bl	800d9f4 <vPortEnterCritical>
 800bb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bb68:	b25b      	sxtb	r3, r3
 800bb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb6e:	d103      	bne.n	800bb78 <xQueueGenericSend+0x16c>
 800bb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb7e:	b25b      	sxtb	r3, r3
 800bb80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb84:	d103      	bne.n	800bb8e <xQueueGenericSend+0x182>
 800bb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb8e:	f001 ff61 	bl	800da54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb92:	1d3a      	adds	r2, r7, #4
 800bb94:	f107 0314 	add.w	r3, r7, #20
 800bb98:	4611      	mov	r1, r2
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f001 f88a 	bl	800ccb4 <xTaskCheckForTimeOut>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d124      	bne.n	800bbf0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bba6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bba8:	f000 fb22 	bl	800c1f0 <prvIsQueueFull>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d018      	beq.n	800bbe4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	3310      	adds	r3, #16
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	4611      	mov	r1, r2
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f000 ffb0 	bl	800cb20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bbc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbc2:	f000 faad 	bl	800c120 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bbc6:	f000 fdd3 	bl	800c770 <xTaskResumeAll>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f47f af7c 	bne.w	800baca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bbd2:	4b0c      	ldr	r3, [pc, #48]	; (800bc04 <xQueueGenericSend+0x1f8>)
 800bbd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	f3bf 8f4f 	dsb	sy
 800bbde:	f3bf 8f6f 	isb	sy
 800bbe2:	e772      	b.n	800baca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bbe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbe6:	f000 fa9b 	bl	800c120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbea:	f000 fdc1 	bl	800c770 <xTaskResumeAll>
 800bbee:	e76c      	b.n	800baca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bbf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbf2:	f000 fa95 	bl	800c120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbf6:	f000 fdbb 	bl	800c770 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bbfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3738      	adds	r7, #56	; 0x38
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	e000ed04 	.word	0xe000ed04

0800bc08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b090      	sub	sp, #64	; 0x40
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d10a      	bne.n	800bc36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc32:	bf00      	nop
 800bc34:	e7fe      	b.n	800bc34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d103      	bne.n	800bc44 <xQueueGenericSendFromISR+0x3c>
 800bc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d101      	bne.n	800bc48 <xQueueGenericSendFromISR+0x40>
 800bc44:	2301      	movs	r3, #1
 800bc46:	e000      	b.n	800bc4a <xQueueGenericSendFromISR+0x42>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10a      	bne.n	800bc64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc52:	f383 8811 	msr	BASEPRI, r3
 800bc56:	f3bf 8f6f 	isb	sy
 800bc5a:	f3bf 8f4f 	dsb	sy
 800bc5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc60:	bf00      	nop
 800bc62:	e7fe      	b.n	800bc62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	2b02      	cmp	r3, #2
 800bc68:	d103      	bne.n	800bc72 <xQueueGenericSendFromISR+0x6a>
 800bc6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d101      	bne.n	800bc76 <xQueueGenericSendFromISR+0x6e>
 800bc72:	2301      	movs	r3, #1
 800bc74:	e000      	b.n	800bc78 <xQueueGenericSendFromISR+0x70>
 800bc76:	2300      	movs	r3, #0
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d10a      	bne.n	800bc92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	623b      	str	r3, [r7, #32]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc92:	f001 ff91 	bl	800dbb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bc96:	f3ef 8211 	mrs	r2, BASEPRI
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	f383 8811 	msr	BASEPRI, r3
 800bca2:	f3bf 8f6f 	isb	sy
 800bca6:	f3bf 8f4f 	dsb	sy
 800bcaa:	61fa      	str	r2, [r7, #28]
 800bcac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bcae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d302      	bcc.n	800bcc4 <xQueueGenericSendFromISR+0xbc>
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d12f      	bne.n	800bd24 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bcc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	68b9      	ldr	r1, [r7, #8]
 800bcd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcda:	f000 f991 	bl	800c000 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bcde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce6:	d112      	bne.n	800bd0e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d016      	beq.n	800bd1e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf2:	3324      	adds	r3, #36	; 0x24
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f000 ff63 	bl	800cbc0 <xTaskRemoveFromEventList>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d00e      	beq.n	800bd1e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00b      	beq.n	800bd1e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2201      	movs	r2, #1
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	e007      	b.n	800bd1e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bd0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd12:	3301      	adds	r3, #1
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	b25a      	sxtb	r2, r3
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bd22:	e001      	b.n	800bd28 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bd32:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3740      	adds	r7, #64	; 0x40
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
	...

0800bd40 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b08c      	sub	sp, #48	; 0x30
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d10a      	bne.n	800bd70 <xQueueReceive+0x30>
	__asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	623b      	str	r3, [r7, #32]
}
 800bd6c:	bf00      	nop
 800bd6e:	e7fe      	b.n	800bd6e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d103      	bne.n	800bd7e <xQueueReceive+0x3e>
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <xQueueReceive+0x42>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e000      	b.n	800bd84 <xQueueReceive+0x44>
 800bd82:	2300      	movs	r3, #0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10a      	bne.n	800bd9e <xQueueReceive+0x5e>
	__asm volatile
 800bd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8c:	f383 8811 	msr	BASEPRI, r3
 800bd90:	f3bf 8f6f 	isb	sy
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	61fb      	str	r3, [r7, #28]
}
 800bd9a:	bf00      	nop
 800bd9c:	e7fe      	b.n	800bd9c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd9e:	f001 f8cd 	bl	800cf3c <xTaskGetSchedulerState>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d102      	bne.n	800bdae <xQueueReceive+0x6e>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <xQueueReceive+0x72>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e000      	b.n	800bdb4 <xQueueReceive+0x74>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10a      	bne.n	800bdce <xQueueReceive+0x8e>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	61bb      	str	r3, [r7, #24]
}
 800bdca:	bf00      	nop
 800bdcc:	e7fe      	b.n	800bdcc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdce:	f001 fe11 	bl	800d9f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d01f      	beq.n	800be1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bdde:	68b9      	ldr	r1, [r7, #8]
 800bde0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde2:	f000 f977 	bl	800c0d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	1e5a      	subs	r2, r3, #1
 800bdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00f      	beq.n	800be16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf8:	3310      	adds	r3, #16
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f000 fee0 	bl	800cbc0 <xTaskRemoveFromEventList>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d007      	beq.n	800be16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be06:	4b3d      	ldr	r3, [pc, #244]	; (800befc <xQueueReceive+0x1bc>)
 800be08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	f3bf 8f4f 	dsb	sy
 800be12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be16:	f001 fe1d 	bl	800da54 <vPortExitCritical>
				return pdPASS;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e069      	b.n	800bef2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be24:	f001 fe16 	bl	800da54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be28:	2300      	movs	r3, #0
 800be2a:	e062      	b.n	800bef2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be32:	f107 0310 	add.w	r3, r7, #16
 800be36:	4618      	mov	r0, r3
 800be38:	f000 ff26 	bl	800cc88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be3c:	2301      	movs	r3, #1
 800be3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be40:	f001 fe08 	bl	800da54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be44:	f000 fc86 	bl	800c754 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be48:	f001 fdd4 	bl	800d9f4 <vPortEnterCritical>
 800be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be52:	b25b      	sxtb	r3, r3
 800be54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be58:	d103      	bne.n	800be62 <xQueueReceive+0x122>
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be68:	b25b      	sxtb	r3, r3
 800be6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6e:	d103      	bne.n	800be78 <xQueueReceive+0x138>
 800be70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be78:	f001 fdec 	bl	800da54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be7c:	1d3a      	adds	r2, r7, #4
 800be7e:	f107 0310 	add.w	r3, r7, #16
 800be82:	4611      	mov	r1, r2
 800be84:	4618      	mov	r0, r3
 800be86:	f000 ff15 	bl	800ccb4 <xTaskCheckForTimeOut>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d123      	bne.n	800bed8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be92:	f000 f997 	bl	800c1c4 <prvIsQueueEmpty>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d017      	beq.n	800becc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	3324      	adds	r3, #36	; 0x24
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	4611      	mov	r1, r2
 800bea4:	4618      	mov	r0, r3
 800bea6:	f000 fe3b 	bl	800cb20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beac:	f000 f938 	bl	800c120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800beb0:	f000 fc5e 	bl	800c770 <xTaskResumeAll>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d189      	bne.n	800bdce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800beba:	4b10      	ldr	r3, [pc, #64]	; (800befc <xQueueReceive+0x1bc>)
 800bebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec0:	601a      	str	r2, [r3, #0]
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	e780      	b.n	800bdce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800becc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bece:	f000 f927 	bl	800c120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bed2:	f000 fc4d 	bl	800c770 <xTaskResumeAll>
 800bed6:	e77a      	b.n	800bdce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beda:	f000 f921 	bl	800c120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bede:	f000 fc47 	bl	800c770 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bee4:	f000 f96e 	bl	800c1c4 <prvIsQueueEmpty>
 800bee8:	4603      	mov	r3, r0
 800beea:	2b00      	cmp	r3, #0
 800beec:	f43f af6f 	beq.w	800bdce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bef0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3730      	adds	r7, #48	; 0x30
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	e000ed04 	.word	0xe000ed04

0800bf00 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b08e      	sub	sp, #56	; 0x38
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10a      	bne.n	800bf2c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bf16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1a:	f383 8811 	msr	BASEPRI, r3
 800bf1e:	f3bf 8f6f 	isb	sy
 800bf22:	f3bf 8f4f 	dsb	sy
 800bf26:	623b      	str	r3, [r7, #32]
}
 800bf28:	bf00      	nop
 800bf2a:	e7fe      	b.n	800bf2a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d103      	bne.n	800bf3a <xQueueReceiveFromISR+0x3a>
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d101      	bne.n	800bf3e <xQueueReceiveFromISR+0x3e>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e000      	b.n	800bf40 <xQueueReceiveFromISR+0x40>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10a      	bne.n	800bf5a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	61fb      	str	r3, [r7, #28]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf5a:	f001 fe2d 	bl	800dbb8 <vPortValidateInterruptPriority>
	__asm volatile
 800bf5e:	f3ef 8211 	mrs	r2, BASEPRI
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	61ba      	str	r2, [r7, #24]
 800bf74:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bf76:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf78:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf7e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d02f      	beq.n	800bfe6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf90:	68b9      	ldr	r1, [r7, #8]
 800bf92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf94:	f000 f89e 	bl	800c0d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9a:	1e5a      	subs	r2, r3, #1
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bfa0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bfa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfa8:	d112      	bne.n	800bfd0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d016      	beq.n	800bfe0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	3310      	adds	r3, #16
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 fe02 	bl	800cbc0 <xTaskRemoveFromEventList>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00e      	beq.n	800bfe0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00b      	beq.n	800bfe0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	601a      	str	r2, [r3, #0]
 800bfce:	e007      	b.n	800bfe0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	b25a      	sxtb	r2, r3
 800bfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe4:	e001      	b.n	800bfea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	637b      	str	r3, [r7, #52]	; 0x34
 800bfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	f383 8811 	msr	BASEPRI, r3
}
 800bff4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3738      	adds	r7, #56	; 0x38
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b086      	sub	sp, #24
 800c004:	af00      	add	r7, sp, #0
 800c006:	60f8      	str	r0, [r7, #12]
 800c008:	60b9      	str	r1, [r7, #8]
 800c00a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c00c:	2300      	movs	r3, #0
 800c00e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c014:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10d      	bne.n	800c03a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d14d      	bne.n	800c0c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 ffa4 	bl	800cf78 <xTaskPriorityDisinherit>
 800c030:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	609a      	str	r2, [r3, #8]
 800c038:	e043      	b.n	800c0c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d119      	bne.n	800c074 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6858      	ldr	r0, [r3, #4]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c048:	461a      	mov	r2, r3
 800c04a:	68b9      	ldr	r1, [r7, #8]
 800c04c:	f002 fcfe 	bl	800ea4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c058:	441a      	add	r2, r3
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	685a      	ldr	r2, [r3, #4]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	429a      	cmp	r2, r3
 800c068:	d32b      	bcc.n	800c0c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	605a      	str	r2, [r3, #4]
 800c072:	e026      	b.n	800c0c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	68d8      	ldr	r0, [r3, #12]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07c:	461a      	mov	r2, r3
 800c07e:	68b9      	ldr	r1, [r7, #8]
 800c080:	f002 fce4 	bl	800ea4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	68da      	ldr	r2, [r3, #12]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	425b      	negs	r3, r3
 800c08e:	441a      	add	r2, r3
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	68da      	ldr	r2, [r3, #12]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d207      	bcs.n	800c0b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	689a      	ldr	r2, [r3, #8]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a8:	425b      	negs	r3, r3
 800c0aa:	441a      	add	r2, r3
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2b02      	cmp	r3, #2
 800c0b4:	d105      	bne.n	800c0c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d002      	beq.n	800c0c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c0ca:	697b      	ldr	r3, [r7, #20]
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d018      	beq.n	800c118 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	68da      	ldr	r2, [r3, #12]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ee:	441a      	add	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	68da      	ldr	r2, [r3, #12]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d303      	bcc.n	800c108 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	68d9      	ldr	r1, [r3, #12]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c110:	461a      	mov	r2, r3
 800c112:	6838      	ldr	r0, [r7, #0]
 800c114:	f002 fc9a 	bl	800ea4c <memcpy>
	}
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c128:	f001 fc64 	bl	800d9f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c132:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c134:	e011      	b.n	800c15a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d012      	beq.n	800c164 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	3324      	adds	r3, #36	; 0x24
 800c142:	4618      	mov	r0, r3
 800c144:	f000 fd3c 	bl	800cbc0 <xTaskRemoveFromEventList>
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d001      	beq.n	800c152 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c14e:	f000 fe13 	bl	800cd78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	3b01      	subs	r3, #1
 800c156:	b2db      	uxtb	r3, r3
 800c158:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	dce9      	bgt.n	800c136 <prvUnlockQueue+0x16>
 800c162:	e000      	b.n	800c166 <prvUnlockQueue+0x46>
					break;
 800c164:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	22ff      	movs	r2, #255	; 0xff
 800c16a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c16e:	f001 fc71 	bl	800da54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c172:	f001 fc3f 	bl	800d9f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c17c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c17e:	e011      	b.n	800c1a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	691b      	ldr	r3, [r3, #16]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d012      	beq.n	800c1ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	3310      	adds	r3, #16
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 fd17 	bl	800cbc0 <xTaskRemoveFromEventList>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d001      	beq.n	800c19c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c198:	f000 fdee 	bl	800cd78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c19c:	7bbb      	ldrb	r3, [r7, #14]
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	dce9      	bgt.n	800c180 <prvUnlockQueue+0x60>
 800c1ac:	e000      	b.n	800c1b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c1ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	22ff      	movs	r2, #255	; 0xff
 800c1b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c1b8:	f001 fc4c 	bl	800da54 <vPortExitCritical>
}
 800c1bc:	bf00      	nop
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1cc:	f001 fc12 	bl	800d9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d102      	bne.n	800c1de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	60fb      	str	r3, [r7, #12]
 800c1dc:	e001      	b.n	800c1e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1e2:	f001 fc37 	bl	800da54 <vPortExitCritical>

	return xReturn;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3710      	adds	r7, #16
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1f8:	f001 fbfc 	bl	800d9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c204:	429a      	cmp	r2, r3
 800c206:	d102      	bne.n	800c20e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c208:	2301      	movs	r3, #1
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	e001      	b.n	800c212 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c20e:	2300      	movs	r3, #0
 800c210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c212:	f001 fc1f 	bl	800da54 <vPortExitCritical>

	return xReturn;
 800c216:	68fb      	ldr	r3, [r7, #12]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3710      	adds	r7, #16
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c22a:	2300      	movs	r3, #0
 800c22c:	60fb      	str	r3, [r7, #12]
 800c22e:	e014      	b.n	800c25a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c230:	4a0f      	ldr	r2, [pc, #60]	; (800c270 <vQueueAddToRegistry+0x50>)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d10b      	bne.n	800c254 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c23c:	490c      	ldr	r1, [pc, #48]	; (800c270 <vQueueAddToRegistry+0x50>)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c246:	4a0a      	ldr	r2, [pc, #40]	; (800c270 <vQueueAddToRegistry+0x50>)
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	4413      	add	r3, r2
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c252:	e006      	b.n	800c262 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3301      	adds	r3, #1
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b07      	cmp	r3, #7
 800c25e:	d9e7      	bls.n	800c230 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c260:	bf00      	nop
 800c262:	bf00      	nop
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	20000b64 	.word	0x20000b64

0800c274 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c284:	f001 fbb6 	bl	800d9f4 <vPortEnterCritical>
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c28e:	b25b      	sxtb	r3, r3
 800c290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c294:	d103      	bne.n	800c29e <vQueueWaitForMessageRestricted+0x2a>
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	2200      	movs	r2, #0
 800c29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2a4:	b25b      	sxtb	r3, r3
 800c2a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2aa:	d103      	bne.n	800c2b4 <vQueueWaitForMessageRestricted+0x40>
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2b4:	f001 fbce 	bl	800da54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d106      	bne.n	800c2ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	3324      	adds	r3, #36	; 0x24
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	68b9      	ldr	r1, [r7, #8]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 fc4d 	bl	800cb68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c2ce:	6978      	ldr	r0, [r7, #20]
 800c2d0:	f7ff ff26 	bl	800c120 <prvUnlockQueue>
	}
 800c2d4:	bf00      	nop
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08e      	sub	sp, #56	; 0x38
 800c2e0:	af04      	add	r7, sp, #16
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
 800c2e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d10a      	bne.n	800c306 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	623b      	str	r3, [r7, #32]
}
 800c302:	bf00      	nop
 800c304:	e7fe      	b.n	800c304 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d10a      	bne.n	800c322 <xTaskCreateStatic+0x46>
	__asm volatile
 800c30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c310:	f383 8811 	msr	BASEPRI, r3
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	f3bf 8f4f 	dsb	sy
 800c31c:	61fb      	str	r3, [r7, #28]
}
 800c31e:	bf00      	nop
 800c320:	e7fe      	b.n	800c320 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c322:	235c      	movs	r3, #92	; 0x5c
 800c324:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	2b5c      	cmp	r3, #92	; 0x5c
 800c32a:	d00a      	beq.n	800c342 <xTaskCreateStatic+0x66>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	61bb      	str	r3, [r7, #24]
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c342:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c346:	2b00      	cmp	r3, #0
 800c348:	d01e      	beq.n	800c388 <xTaskCreateStatic+0xac>
 800c34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d01b      	beq.n	800c388 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c352:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c358:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35c:	2202      	movs	r2, #2
 800c35e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c362:	2300      	movs	r3, #0
 800c364:	9303      	str	r3, [sp, #12]
 800c366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c368:	9302      	str	r3, [sp, #8]
 800c36a:	f107 0314 	add.w	r3, r7, #20
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c372:	9300      	str	r3, [sp, #0]
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	68b9      	ldr	r1, [r7, #8]
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f000 f850 	bl	800c420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c382:	f000 f8dd 	bl	800c540 <prvAddNewTaskToReadyList>
 800c386:	e001      	b.n	800c38c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c388:	2300      	movs	r3, #0
 800c38a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c38c:	697b      	ldr	r3, [r7, #20]
	}
 800c38e:	4618      	mov	r0, r3
 800c390:	3728      	adds	r7, #40	; 0x28
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}

0800c396 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c396:	b580      	push	{r7, lr}
 800c398:	b08c      	sub	sp, #48	; 0x30
 800c39a:	af04      	add	r7, sp, #16
 800c39c:	60f8      	str	r0, [r7, #12]
 800c39e:	60b9      	str	r1, [r7, #8]
 800c3a0:	603b      	str	r3, [r7, #0]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c3a6:	88fb      	ldrh	r3, [r7, #6]
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f001 fc44 	bl	800dc38 <pvPortMalloc>
 800c3b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d00e      	beq.n	800c3d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c3b8:	205c      	movs	r0, #92	; 0x5c
 800c3ba:	f001 fc3d 	bl	800dc38 <pvPortMalloc>
 800c3be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d003      	beq.n	800c3ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	697a      	ldr	r2, [r7, #20]
 800c3ca:	631a      	str	r2, [r3, #48]	; 0x30
 800c3cc:	e005      	b.n	800c3da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c3ce:	6978      	ldr	r0, [r7, #20]
 800c3d0:	f001 fcfe 	bl	800ddd0 <vPortFree>
 800c3d4:	e001      	b.n	800c3da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d017      	beq.n	800c410 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c3e8:	88fa      	ldrh	r2, [r7, #6]
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	9303      	str	r3, [sp, #12]
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	9302      	str	r3, [sp, #8]
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	68b9      	ldr	r1, [r7, #8]
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 f80e 	bl	800c420 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c404:	69f8      	ldr	r0, [r7, #28]
 800c406:	f000 f89b 	bl	800c540 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c40a:	2301      	movs	r3, #1
 800c40c:	61bb      	str	r3, [r7, #24]
 800c40e:	e002      	b.n	800c416 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c410:	f04f 33ff 	mov.w	r3, #4294967295
 800c414:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c416:	69bb      	ldr	r3, [r7, #24]
	}
 800c418:	4618      	mov	r0, r3
 800c41a:	3720      	adds	r7, #32
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
 800c42c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c430:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	009b      	lsls	r3, r3, #2
 800c436:	461a      	mov	r2, r3
 800c438:	21a5      	movs	r1, #165	; 0xa5
 800c43a:	f002 fb15 	bl	800ea68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c448:	3b01      	subs	r3, #1
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	4413      	add	r3, r2
 800c44e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	f023 0307 	bic.w	r3, r3, #7
 800c456:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	f003 0307 	and.w	r3, r3, #7
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00a      	beq.n	800c478 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c466:	f383 8811 	msr	BASEPRI, r3
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	f3bf 8f4f 	dsb	sy
 800c472:	617b      	str	r3, [r7, #20]
}
 800c474:	bf00      	nop
 800c476:	e7fe      	b.n	800c476 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d01f      	beq.n	800c4be <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c47e:	2300      	movs	r3, #0
 800c480:	61fb      	str	r3, [r7, #28]
 800c482:	e012      	b.n	800c4aa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	4413      	add	r3, r2
 800c48a:	7819      	ldrb	r1, [r3, #0]
 800c48c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	4413      	add	r3, r2
 800c492:	3334      	adds	r3, #52	; 0x34
 800c494:	460a      	mov	r2, r1
 800c496:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	4413      	add	r3, r2
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d006      	beq.n	800c4b2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	3301      	adds	r3, #1
 800c4a8:	61fb      	str	r3, [r7, #28]
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	2b0f      	cmp	r3, #15
 800c4ae:	d9e9      	bls.n	800c484 <prvInitialiseNewTask+0x64>
 800c4b0:	e000      	b.n	800c4b4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c4b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c4bc:	e003      	b.n	800c4c6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	2b37      	cmp	r3, #55	; 0x37
 800c4ca:	d901      	bls.n	800c4d0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c4cc:	2337      	movs	r3, #55	; 0x37
 800c4ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	2200      	movs	r2, #0
 800c4e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7ff f8be 	bl	800b668 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ee:	3318      	adds	r3, #24
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff f8b9 	bl	800b668 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c504:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c50a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50e:	2200      	movs	r2, #0
 800c510:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	68f9      	ldr	r1, [r7, #12]
 800c51e:	69b8      	ldr	r0, [r7, #24]
 800c520:	f001 f93a 	bl	800d798 <pxPortInitialiseStack>
 800c524:	4602      	mov	r2, r0
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d002      	beq.n	800c536 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c534:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c536:	bf00      	nop
 800c538:	3720      	adds	r7, #32
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
	...

0800c540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c548:	f001 fa54 	bl	800d9f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c54c:	4b2d      	ldr	r3, [pc, #180]	; (800c604 <prvAddNewTaskToReadyList+0xc4>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3301      	adds	r3, #1
 800c552:	4a2c      	ldr	r2, [pc, #176]	; (800c604 <prvAddNewTaskToReadyList+0xc4>)
 800c554:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c556:	4b2c      	ldr	r3, [pc, #176]	; (800c608 <prvAddNewTaskToReadyList+0xc8>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d109      	bne.n	800c572 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c55e:	4a2a      	ldr	r2, [pc, #168]	; (800c608 <prvAddNewTaskToReadyList+0xc8>)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c564:	4b27      	ldr	r3, [pc, #156]	; (800c604 <prvAddNewTaskToReadyList+0xc4>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d110      	bne.n	800c58e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c56c:	f000 fc28 	bl	800cdc0 <prvInitialiseTaskLists>
 800c570:	e00d      	b.n	800c58e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c572:	4b26      	ldr	r3, [pc, #152]	; (800c60c <prvAddNewTaskToReadyList+0xcc>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d109      	bne.n	800c58e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c57a:	4b23      	ldr	r3, [pc, #140]	; (800c608 <prvAddNewTaskToReadyList+0xc8>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c584:	429a      	cmp	r2, r3
 800c586:	d802      	bhi.n	800c58e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c588:	4a1f      	ldr	r2, [pc, #124]	; (800c608 <prvAddNewTaskToReadyList+0xc8>)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c58e:	4b20      	ldr	r3, [pc, #128]	; (800c610 <prvAddNewTaskToReadyList+0xd0>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3301      	adds	r3, #1
 800c594:	4a1e      	ldr	r2, [pc, #120]	; (800c610 <prvAddNewTaskToReadyList+0xd0>)
 800c596:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c598:	4b1d      	ldr	r3, [pc, #116]	; (800c610 <prvAddNewTaskToReadyList+0xd0>)
 800c59a:	681a      	ldr	r2, [r3, #0]
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a4:	4b1b      	ldr	r3, [pc, #108]	; (800c614 <prvAddNewTaskToReadyList+0xd4>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d903      	bls.n	800c5b4 <prvAddNewTaskToReadyList+0x74>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b0:	4a18      	ldr	r2, [pc, #96]	; (800c614 <prvAddNewTaskToReadyList+0xd4>)
 800c5b2:	6013      	str	r3, [r2, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4a15      	ldr	r2, [pc, #84]	; (800c618 <prvAddNewTaskToReadyList+0xd8>)
 800c5c2:	441a      	add	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	3304      	adds	r3, #4
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	f7ff f859 	bl	800b682 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c5d0:	f001 fa40 	bl	800da54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c5d4:	4b0d      	ldr	r3, [pc, #52]	; (800c60c <prvAddNewTaskToReadyList+0xcc>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00e      	beq.n	800c5fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c5dc:	4b0a      	ldr	r3, [pc, #40]	; (800c608 <prvAddNewTaskToReadyList+0xc8>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d207      	bcs.n	800c5fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c5ea:	4b0c      	ldr	r3, [pc, #48]	; (800c61c <prvAddNewTaskToReadyList+0xdc>)
 800c5ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	f3bf 8f4f 	dsb	sy
 800c5f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5fa:	bf00      	nop
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	20001078 	.word	0x20001078
 800c608:	20000ba4 	.word	0x20000ba4
 800c60c:	20001084 	.word	0x20001084
 800c610:	20001094 	.word	0x20001094
 800c614:	20001080 	.word	0x20001080
 800c618:	20000ba8 	.word	0x20000ba8
 800c61c:	e000ed04 	.word	0xe000ed04

0800c620 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c628:	2300      	movs	r3, #0
 800c62a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d017      	beq.n	800c662 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c632:	4b13      	ldr	r3, [pc, #76]	; (800c680 <vTaskDelay+0x60>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00a      	beq.n	800c650 <vTaskDelay+0x30>
	__asm volatile
 800c63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63e:	f383 8811 	msr	BASEPRI, r3
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	f3bf 8f4f 	dsb	sy
 800c64a:	60bb      	str	r3, [r7, #8]
}
 800c64c:	bf00      	nop
 800c64e:	e7fe      	b.n	800c64e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c650:	f000 f880 	bl	800c754 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c654:	2100      	movs	r1, #0
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fcfc 	bl	800d054 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c65c:	f000 f888 	bl	800c770 <xTaskResumeAll>
 800c660:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d107      	bne.n	800c678 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c668:	4b06      	ldr	r3, [pc, #24]	; (800c684 <vTaskDelay+0x64>)
 800c66a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c66e:	601a      	str	r2, [r3, #0]
 800c670:	f3bf 8f4f 	dsb	sy
 800c674:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c678:	bf00      	nop
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	200010a0 	.word	0x200010a0
 800c684:	e000ed04 	.word	0xe000ed04

0800c688 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08a      	sub	sp, #40	; 0x28
 800c68c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c68e:	2300      	movs	r3, #0
 800c690:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c692:	2300      	movs	r3, #0
 800c694:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c696:	463a      	mov	r2, r7
 800c698:	1d39      	adds	r1, r7, #4
 800c69a:	f107 0308 	add.w	r3, r7, #8
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7fe ff8e 	bl	800b5c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	9202      	str	r2, [sp, #8]
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	460a      	mov	r2, r1
 800c6b6:	4921      	ldr	r1, [pc, #132]	; (800c73c <vTaskStartScheduler+0xb4>)
 800c6b8:	4821      	ldr	r0, [pc, #132]	; (800c740 <vTaskStartScheduler+0xb8>)
 800c6ba:	f7ff fe0f 	bl	800c2dc <xTaskCreateStatic>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	4a20      	ldr	r2, [pc, #128]	; (800c744 <vTaskStartScheduler+0xbc>)
 800c6c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c6c4:	4b1f      	ldr	r3, [pc, #124]	; (800c744 <vTaskStartScheduler+0xbc>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	617b      	str	r3, [r7, #20]
 800c6d0:	e001      	b.n	800c6d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	2b01      	cmp	r3, #1
 800c6da:	d102      	bne.n	800c6e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c6dc:	f000 fd0e 	bl	800d0fc <xTimerCreateTimerTask>
 800c6e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d116      	bne.n	800c716 <vTaskStartScheduler+0x8e>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	613b      	str	r3, [r7, #16]
}
 800c6fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6fc:	4b12      	ldr	r3, [pc, #72]	; (800c748 <vTaskStartScheduler+0xc0>)
 800c6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c702:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c704:	4b11      	ldr	r3, [pc, #68]	; (800c74c <vTaskStartScheduler+0xc4>)
 800c706:	2201      	movs	r2, #1
 800c708:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c70a:	4b11      	ldr	r3, [pc, #68]	; (800c750 <vTaskStartScheduler+0xc8>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c710:	f001 f8ce 	bl	800d8b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c714:	e00e      	b.n	800c734 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71c:	d10a      	bne.n	800c734 <vTaskStartScheduler+0xac>
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	60fb      	str	r3, [r7, #12]
}
 800c730:	bf00      	nop
 800c732:	e7fe      	b.n	800c732 <vTaskStartScheduler+0xaa>
}
 800c734:	bf00      	nop
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	0800f4b8 	.word	0x0800f4b8
 800c740:	0800cd91 	.word	0x0800cd91
 800c744:	2000109c 	.word	0x2000109c
 800c748:	20001098 	.word	0x20001098
 800c74c:	20001084 	.word	0x20001084
 800c750:	2000107c 	.word	0x2000107c

0800c754 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c754:	b480      	push	{r7}
 800c756:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c758:	4b04      	ldr	r3, [pc, #16]	; (800c76c <vTaskSuspendAll+0x18>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	3301      	adds	r3, #1
 800c75e:	4a03      	ldr	r2, [pc, #12]	; (800c76c <vTaskSuspendAll+0x18>)
 800c760:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c762:	bf00      	nop
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	200010a0 	.word	0x200010a0

0800c770 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c776:	2300      	movs	r3, #0
 800c778:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c77a:	2300      	movs	r3, #0
 800c77c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c77e:	4b42      	ldr	r3, [pc, #264]	; (800c888 <xTaskResumeAll+0x118>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d10a      	bne.n	800c79c <xTaskResumeAll+0x2c>
	__asm volatile
 800c786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c78a:	f383 8811 	msr	BASEPRI, r3
 800c78e:	f3bf 8f6f 	isb	sy
 800c792:	f3bf 8f4f 	dsb	sy
 800c796:	603b      	str	r3, [r7, #0]
}
 800c798:	bf00      	nop
 800c79a:	e7fe      	b.n	800c79a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c79c:	f001 f92a 	bl	800d9f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c7a0:	4b39      	ldr	r3, [pc, #228]	; (800c888 <xTaskResumeAll+0x118>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	4a38      	ldr	r2, [pc, #224]	; (800c888 <xTaskResumeAll+0x118>)
 800c7a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7aa:	4b37      	ldr	r3, [pc, #220]	; (800c888 <xTaskResumeAll+0x118>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d162      	bne.n	800c878 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c7b2:	4b36      	ldr	r3, [pc, #216]	; (800c88c <xTaskResumeAll+0x11c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d05e      	beq.n	800c878 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7ba:	e02f      	b.n	800c81c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7bc:	4b34      	ldr	r3, [pc, #208]	; (800c890 <xTaskResumeAll+0x120>)
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	3318      	adds	r3, #24
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f7fe ffb7 	bl	800b73c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe ffb2 	bl	800b73c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7dc:	4b2d      	ldr	r3, [pc, #180]	; (800c894 <xTaskResumeAll+0x124>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d903      	bls.n	800c7ec <xTaskResumeAll+0x7c>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e8:	4a2a      	ldr	r2, [pc, #168]	; (800c894 <xTaskResumeAll+0x124>)
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	4413      	add	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4a27      	ldr	r2, [pc, #156]	; (800c898 <xTaskResumeAll+0x128>)
 800c7fa:	441a      	add	r2, r3
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	3304      	adds	r3, #4
 800c800:	4619      	mov	r1, r3
 800c802:	4610      	mov	r0, r2
 800c804:	f7fe ff3d 	bl	800b682 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c80c:	4b23      	ldr	r3, [pc, #140]	; (800c89c <xTaskResumeAll+0x12c>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c812:	429a      	cmp	r2, r3
 800c814:	d302      	bcc.n	800c81c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c816:	4b22      	ldr	r3, [pc, #136]	; (800c8a0 <xTaskResumeAll+0x130>)
 800c818:	2201      	movs	r2, #1
 800c81a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c81c:	4b1c      	ldr	r3, [pc, #112]	; (800c890 <xTaskResumeAll+0x120>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1cb      	bne.n	800c7bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d001      	beq.n	800c82e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c82a:	f000 fb67 	bl	800cefc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c82e:	4b1d      	ldr	r3, [pc, #116]	; (800c8a4 <xTaskResumeAll+0x134>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d010      	beq.n	800c85c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c83a:	f000 f859 	bl	800c8f0 <xTaskIncrementTick>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d002      	beq.n	800c84a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c844:	4b16      	ldr	r3, [pc, #88]	; (800c8a0 <xTaskResumeAll+0x130>)
 800c846:	2201      	movs	r2, #1
 800c848:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3b01      	subs	r3, #1
 800c84e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1f1      	bne.n	800c83a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c856:	4b13      	ldr	r3, [pc, #76]	; (800c8a4 <xTaskResumeAll+0x134>)
 800c858:	2200      	movs	r2, #0
 800c85a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c85c:	4b10      	ldr	r3, [pc, #64]	; (800c8a0 <xTaskResumeAll+0x130>)
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d009      	beq.n	800c878 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c864:	2301      	movs	r3, #1
 800c866:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c868:	4b0f      	ldr	r3, [pc, #60]	; (800c8a8 <xTaskResumeAll+0x138>)
 800c86a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c86e:	601a      	str	r2, [r3, #0]
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c878:	f001 f8ec 	bl	800da54 <vPortExitCritical>

	return xAlreadyYielded;
 800c87c:	68bb      	ldr	r3, [r7, #8]
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	200010a0 	.word	0x200010a0
 800c88c:	20001078 	.word	0x20001078
 800c890:	20001038 	.word	0x20001038
 800c894:	20001080 	.word	0x20001080
 800c898:	20000ba8 	.word	0x20000ba8
 800c89c:	20000ba4 	.word	0x20000ba4
 800c8a0:	2000108c 	.word	0x2000108c
 800c8a4:	20001088 	.word	0x20001088
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c8b2:	4b05      	ldr	r3, [pc, #20]	; (800c8c8 <xTaskGetTickCount+0x1c>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c8b8:	687b      	ldr	r3, [r7, #4]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	370c      	adds	r7, #12
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	2000107c 	.word	0x2000107c

0800c8cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8d2:	f001 f971 	bl	800dbb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c8da:	4b04      	ldr	r3, [pc, #16]	; (800c8ec <xTaskGetTickCountFromISR+0x20>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8e0:	683b      	ldr	r3, [r7, #0]
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3708      	adds	r7, #8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	2000107c 	.word	0x2000107c

0800c8f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8fa:	4b4f      	ldr	r3, [pc, #316]	; (800ca38 <xTaskIncrementTick+0x148>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f040 808f 	bne.w	800ca22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c904:	4b4d      	ldr	r3, [pc, #308]	; (800ca3c <xTaskIncrementTick+0x14c>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	3301      	adds	r3, #1
 800c90a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c90c:	4a4b      	ldr	r2, [pc, #300]	; (800ca3c <xTaskIncrementTick+0x14c>)
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d120      	bne.n	800c95a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c918:	4b49      	ldr	r3, [pc, #292]	; (800ca40 <xTaskIncrementTick+0x150>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d00a      	beq.n	800c938 <xTaskIncrementTick+0x48>
	__asm volatile
 800c922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c926:	f383 8811 	msr	BASEPRI, r3
 800c92a:	f3bf 8f6f 	isb	sy
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	603b      	str	r3, [r7, #0]
}
 800c934:	bf00      	nop
 800c936:	e7fe      	b.n	800c936 <xTaskIncrementTick+0x46>
 800c938:	4b41      	ldr	r3, [pc, #260]	; (800ca40 <xTaskIncrementTick+0x150>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	60fb      	str	r3, [r7, #12]
 800c93e:	4b41      	ldr	r3, [pc, #260]	; (800ca44 <xTaskIncrementTick+0x154>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a3f      	ldr	r2, [pc, #252]	; (800ca40 <xTaskIncrementTick+0x150>)
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	4a3f      	ldr	r2, [pc, #252]	; (800ca44 <xTaskIncrementTick+0x154>)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	6013      	str	r3, [r2, #0]
 800c94c:	4b3e      	ldr	r3, [pc, #248]	; (800ca48 <xTaskIncrementTick+0x158>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3301      	adds	r3, #1
 800c952:	4a3d      	ldr	r2, [pc, #244]	; (800ca48 <xTaskIncrementTick+0x158>)
 800c954:	6013      	str	r3, [r2, #0]
 800c956:	f000 fad1 	bl	800cefc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c95a:	4b3c      	ldr	r3, [pc, #240]	; (800ca4c <xTaskIncrementTick+0x15c>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	429a      	cmp	r2, r3
 800c962:	d349      	bcc.n	800c9f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c964:	4b36      	ldr	r3, [pc, #216]	; (800ca40 <xTaskIncrementTick+0x150>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d104      	bne.n	800c978 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c96e:	4b37      	ldr	r3, [pc, #220]	; (800ca4c <xTaskIncrementTick+0x15c>)
 800c970:	f04f 32ff 	mov.w	r2, #4294967295
 800c974:	601a      	str	r2, [r3, #0]
					break;
 800c976:	e03f      	b.n	800c9f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c978:	4b31      	ldr	r3, [pc, #196]	; (800ca40 <xTaskIncrementTick+0x150>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d203      	bcs.n	800c998 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c990:	4a2e      	ldr	r2, [pc, #184]	; (800ca4c <xTaskIncrementTick+0x15c>)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c996:	e02f      	b.n	800c9f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	3304      	adds	r3, #4
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fe fecd 	bl	800b73c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d004      	beq.n	800c9b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	3318      	adds	r3, #24
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe fec4 	bl	800b73c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b8:	4b25      	ldr	r3, [pc, #148]	; (800ca50 <xTaskIncrementTick+0x160>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d903      	bls.n	800c9c8 <xTaskIncrementTick+0xd8>
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c4:	4a22      	ldr	r2, [pc, #136]	; (800ca50 <xTaskIncrementTick+0x160>)
 800c9c6:	6013      	str	r3, [r2, #0]
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9cc:	4613      	mov	r3, r2
 800c9ce:	009b      	lsls	r3, r3, #2
 800c9d0:	4413      	add	r3, r2
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4a1f      	ldr	r2, [pc, #124]	; (800ca54 <xTaskIncrementTick+0x164>)
 800c9d6:	441a      	add	r2, r3
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	4619      	mov	r1, r3
 800c9de:	4610      	mov	r0, r2
 800c9e0:	f7fe fe4f 	bl	800b682 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e8:	4b1b      	ldr	r3, [pc, #108]	; (800ca58 <xTaskIncrementTick+0x168>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d3b8      	bcc.n	800c964 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9f6:	e7b5      	b.n	800c964 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c9f8:	4b17      	ldr	r3, [pc, #92]	; (800ca58 <xTaskIncrementTick+0x168>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9fe:	4915      	ldr	r1, [pc, #84]	; (800ca54 <xTaskIncrementTick+0x164>)
 800ca00:	4613      	mov	r3, r2
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	440b      	add	r3, r1
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d901      	bls.n	800ca14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ca10:	2301      	movs	r3, #1
 800ca12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca14:	4b11      	ldr	r3, [pc, #68]	; (800ca5c <xTaskIncrementTick+0x16c>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d007      	beq.n	800ca2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	617b      	str	r3, [r7, #20]
 800ca20:	e004      	b.n	800ca2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca22:	4b0f      	ldr	r3, [pc, #60]	; (800ca60 <xTaskIncrementTick+0x170>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	3301      	adds	r3, #1
 800ca28:	4a0d      	ldr	r2, [pc, #52]	; (800ca60 <xTaskIncrementTick+0x170>)
 800ca2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca2c:	697b      	ldr	r3, [r7, #20]
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	200010a0 	.word	0x200010a0
 800ca3c:	2000107c 	.word	0x2000107c
 800ca40:	20001030 	.word	0x20001030
 800ca44:	20001034 	.word	0x20001034
 800ca48:	20001090 	.word	0x20001090
 800ca4c:	20001098 	.word	0x20001098
 800ca50:	20001080 	.word	0x20001080
 800ca54:	20000ba8 	.word	0x20000ba8
 800ca58:	20000ba4 	.word	0x20000ba4
 800ca5c:	2000108c 	.word	0x2000108c
 800ca60:	20001088 	.word	0x20001088

0800ca64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca6a:	4b28      	ldr	r3, [pc, #160]	; (800cb0c <vTaskSwitchContext+0xa8>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d003      	beq.n	800ca7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca72:	4b27      	ldr	r3, [pc, #156]	; (800cb10 <vTaskSwitchContext+0xac>)
 800ca74:	2201      	movs	r2, #1
 800ca76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca78:	e041      	b.n	800cafe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ca7a:	4b25      	ldr	r3, [pc, #148]	; (800cb10 <vTaskSwitchContext+0xac>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca80:	4b24      	ldr	r3, [pc, #144]	; (800cb14 <vTaskSwitchContext+0xb0>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	e010      	b.n	800caaa <vTaskSwitchContext+0x46>
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10a      	bne.n	800caa4 <vTaskSwitchContext+0x40>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	607b      	str	r3, [r7, #4]
}
 800caa0:	bf00      	nop
 800caa2:	e7fe      	b.n	800caa2 <vTaskSwitchContext+0x3e>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	60fb      	str	r3, [r7, #12]
 800caaa:	491b      	ldr	r1, [pc, #108]	; (800cb18 <vTaskSwitchContext+0xb4>)
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	4613      	mov	r3, r2
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	009b      	lsls	r3, r3, #2
 800cab6:	440b      	add	r3, r1
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0e4      	beq.n	800ca88 <vTaskSwitchContext+0x24>
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	4613      	mov	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4a13      	ldr	r2, [pc, #76]	; (800cb18 <vTaskSwitchContext+0xb4>)
 800caca:	4413      	add	r3, r2
 800cacc:	60bb      	str	r3, [r7, #8]
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	685a      	ldr	r2, [r3, #4]
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	605a      	str	r2, [r3, #4]
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	685a      	ldr	r2, [r3, #4]
 800cadc:	68bb      	ldr	r3, [r7, #8]
 800cade:	3308      	adds	r3, #8
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d104      	bne.n	800caee <vTaskSwitchContext+0x8a>
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	605a      	str	r2, [r3, #4]
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	68db      	ldr	r3, [r3, #12]
 800caf4:	4a09      	ldr	r2, [pc, #36]	; (800cb1c <vTaskSwitchContext+0xb8>)
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	4a06      	ldr	r2, [pc, #24]	; (800cb14 <vTaskSwitchContext+0xb0>)
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	6013      	str	r3, [r2, #0]
}
 800cafe:	bf00      	nop
 800cb00:	3714      	adds	r7, #20
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	200010a0 	.word	0x200010a0
 800cb10:	2000108c 	.word	0x2000108c
 800cb14:	20001080 	.word	0x20001080
 800cb18:	20000ba8 	.word	0x20000ba8
 800cb1c:	20000ba4 	.word	0x20000ba4

0800cb20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10a      	bne.n	800cb46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	60fb      	str	r3, [r7, #12]
}
 800cb42:	bf00      	nop
 800cb44:	e7fe      	b.n	800cb44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb46:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <vTaskPlaceOnEventList+0x44>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3318      	adds	r3, #24
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7fe fdbb 	bl	800b6ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb54:	2101      	movs	r1, #1
 800cb56:	6838      	ldr	r0, [r7, #0]
 800cb58:	f000 fa7c 	bl	800d054 <prvAddCurrentTaskToDelayedList>
}
 800cb5c:	bf00      	nop
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	20000ba4 	.word	0x20000ba4

0800cb68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10a      	bne.n	800cb90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	617b      	str	r3, [r7, #20]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb90:	4b0a      	ldr	r3, [pc, #40]	; (800cbbc <vTaskPlaceOnEventListRestricted+0x54>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3318      	adds	r3, #24
 800cb96:	4619      	mov	r1, r3
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7fe fd72 	bl	800b682 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cba4:	f04f 33ff 	mov.w	r3, #4294967295
 800cba8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	68b8      	ldr	r0, [r7, #8]
 800cbae:	f000 fa51 	bl	800d054 <prvAddCurrentTaskToDelayedList>
	}
 800cbb2:	bf00      	nop
 800cbb4:	3718      	adds	r7, #24
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20000ba4 	.word	0x20000ba4

0800cbc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d10a      	bne.n	800cbec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	60fb      	str	r3, [r7, #12]
}
 800cbe8:	bf00      	nop
 800cbea:	e7fe      	b.n	800cbea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	3318      	adds	r3, #24
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fe fda3 	bl	800b73c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbf6:	4b1e      	ldr	r3, [pc, #120]	; (800cc70 <xTaskRemoveFromEventList+0xb0>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d11d      	bne.n	800cc3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3304      	adds	r3, #4
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fe fd9a 	bl	800b73c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0c:	4b19      	ldr	r3, [pc, #100]	; (800cc74 <xTaskRemoveFromEventList+0xb4>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d903      	bls.n	800cc1c <xTaskRemoveFromEventList+0x5c>
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc18:	4a16      	ldr	r2, [pc, #88]	; (800cc74 <xTaskRemoveFromEventList+0xb4>)
 800cc1a:	6013      	str	r3, [r2, #0]
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc20:	4613      	mov	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4413      	add	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4a13      	ldr	r2, [pc, #76]	; (800cc78 <xTaskRemoveFromEventList+0xb8>)
 800cc2a:	441a      	add	r2, r3
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	3304      	adds	r3, #4
 800cc30:	4619      	mov	r1, r3
 800cc32:	4610      	mov	r0, r2
 800cc34:	f7fe fd25 	bl	800b682 <vListInsertEnd>
 800cc38:	e005      	b.n	800cc46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	3318      	adds	r3, #24
 800cc3e:	4619      	mov	r1, r3
 800cc40:	480e      	ldr	r0, [pc, #56]	; (800cc7c <xTaskRemoveFromEventList+0xbc>)
 800cc42:	f7fe fd1e 	bl	800b682 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <xTaskRemoveFromEventList+0xc0>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d905      	bls.n	800cc60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc54:	2301      	movs	r3, #1
 800cc56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc58:	4b0a      	ldr	r3, [pc, #40]	; (800cc84 <xTaskRemoveFromEventList+0xc4>)
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	e001      	b.n	800cc64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cc60:	2300      	movs	r3, #0
 800cc62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc64:	697b      	ldr	r3, [r7, #20]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	200010a0 	.word	0x200010a0
 800cc74:	20001080 	.word	0x20001080
 800cc78:	20000ba8 	.word	0x20000ba8
 800cc7c:	20001038 	.word	0x20001038
 800cc80:	20000ba4 	.word	0x20000ba4
 800cc84:	2000108c 	.word	0x2000108c

0800cc88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc90:	4b06      	ldr	r3, [pc, #24]	; (800ccac <vTaskInternalSetTimeOutState+0x24>)
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc98:	4b05      	ldr	r3, [pc, #20]	; (800ccb0 <vTaskInternalSetTimeOutState+0x28>)
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	605a      	str	r2, [r3, #4]
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	20001090 	.word	0x20001090
 800ccb0:	2000107c 	.word	0x2000107c

0800ccb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b088      	sub	sp, #32
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	613b      	str	r3, [r7, #16]
}
 800ccd6:	bf00      	nop
 800ccd8:	e7fe      	b.n	800ccd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10a      	bne.n	800ccf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	60fb      	str	r3, [r7, #12]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ccf6:	f000 fe7d 	bl	800d9f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ccfa:	4b1d      	ldr	r3, [pc, #116]	; (800cd70 <xTaskCheckForTimeOut+0xbc>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	69ba      	ldr	r2, [r7, #24]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd12:	d102      	bne.n	800cd1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd14:	2300      	movs	r3, #0
 800cd16:	61fb      	str	r3, [r7, #28]
 800cd18:	e023      	b.n	800cd62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	4b15      	ldr	r3, [pc, #84]	; (800cd74 <xTaskCheckForTimeOut+0xc0>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d007      	beq.n	800cd36 <xTaskCheckForTimeOut+0x82>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	69ba      	ldr	r2, [r7, #24]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d302      	bcc.n	800cd36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd30:	2301      	movs	r3, #1
 800cd32:	61fb      	str	r3, [r7, #28]
 800cd34:	e015      	b.n	800cd62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d20b      	bcs.n	800cd58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	1ad2      	subs	r2, r2, r3
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff ff9b 	bl	800cc88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd52:	2300      	movs	r3, #0
 800cd54:	61fb      	str	r3, [r7, #28]
 800cd56:	e004      	b.n	800cd62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd62:	f000 fe77 	bl	800da54 <vPortExitCritical>

	return xReturn;
 800cd66:	69fb      	ldr	r3, [r7, #28]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3720      	adds	r7, #32
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	2000107c 	.word	0x2000107c
 800cd74:	20001090 	.word	0x20001090

0800cd78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd78:	b480      	push	{r7}
 800cd7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd7c:	4b03      	ldr	r3, [pc, #12]	; (800cd8c <vTaskMissedYield+0x14>)
 800cd7e:	2201      	movs	r2, #1
 800cd80:	601a      	str	r2, [r3, #0]
}
 800cd82:	bf00      	nop
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	2000108c 	.word	0x2000108c

0800cd90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd98:	f000 f852 	bl	800ce40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <prvIdleTask+0x28>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d9f9      	bls.n	800cd98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cda4:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <prvIdleTask+0x2c>)
 800cda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cdb4:	e7f0      	b.n	800cd98 <prvIdleTask+0x8>
 800cdb6:	bf00      	nop
 800cdb8:	20000ba8 	.word	0x20000ba8
 800cdbc:	e000ed04 	.word	0xe000ed04

0800cdc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	607b      	str	r3, [r7, #4]
 800cdca:	e00c      	b.n	800cde6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4413      	add	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4a12      	ldr	r2, [pc, #72]	; (800ce20 <prvInitialiseTaskLists+0x60>)
 800cdd8:	4413      	add	r3, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe fc24 	bl	800b628 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3301      	adds	r3, #1
 800cde4:	607b      	str	r3, [r7, #4]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b37      	cmp	r3, #55	; 0x37
 800cdea:	d9ef      	bls.n	800cdcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cdec:	480d      	ldr	r0, [pc, #52]	; (800ce24 <prvInitialiseTaskLists+0x64>)
 800cdee:	f7fe fc1b 	bl	800b628 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdf2:	480d      	ldr	r0, [pc, #52]	; (800ce28 <prvInitialiseTaskLists+0x68>)
 800cdf4:	f7fe fc18 	bl	800b628 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cdf8:	480c      	ldr	r0, [pc, #48]	; (800ce2c <prvInitialiseTaskLists+0x6c>)
 800cdfa:	f7fe fc15 	bl	800b628 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cdfe:	480c      	ldr	r0, [pc, #48]	; (800ce30 <prvInitialiseTaskLists+0x70>)
 800ce00:	f7fe fc12 	bl	800b628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce04:	480b      	ldr	r0, [pc, #44]	; (800ce34 <prvInitialiseTaskLists+0x74>)
 800ce06:	f7fe fc0f 	bl	800b628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce0a:	4b0b      	ldr	r3, [pc, #44]	; (800ce38 <prvInitialiseTaskLists+0x78>)
 800ce0c:	4a05      	ldr	r2, [pc, #20]	; (800ce24 <prvInitialiseTaskLists+0x64>)
 800ce0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce10:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <prvInitialiseTaskLists+0x7c>)
 800ce12:	4a05      	ldr	r2, [pc, #20]	; (800ce28 <prvInitialiseTaskLists+0x68>)
 800ce14:	601a      	str	r2, [r3, #0]
}
 800ce16:	bf00      	nop
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20000ba8 	.word	0x20000ba8
 800ce24:	20001008 	.word	0x20001008
 800ce28:	2000101c 	.word	0x2000101c
 800ce2c:	20001038 	.word	0x20001038
 800ce30:	2000104c 	.word	0x2000104c
 800ce34:	20001064 	.word	0x20001064
 800ce38:	20001030 	.word	0x20001030
 800ce3c:	20001034 	.word	0x20001034

0800ce40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce46:	e019      	b.n	800ce7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce48:	f000 fdd4 	bl	800d9f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce4c:	4b10      	ldr	r3, [pc, #64]	; (800ce90 <prvCheckTasksWaitingTermination+0x50>)
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3304      	adds	r3, #4
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fe fc6f 	bl	800b73c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <prvCheckTasksWaitingTermination+0x54>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3b01      	subs	r3, #1
 800ce64:	4a0b      	ldr	r2, [pc, #44]	; (800ce94 <prvCheckTasksWaitingTermination+0x54>)
 800ce66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce68:	4b0b      	ldr	r3, [pc, #44]	; (800ce98 <prvCheckTasksWaitingTermination+0x58>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	4a0a      	ldr	r2, [pc, #40]	; (800ce98 <prvCheckTasksWaitingTermination+0x58>)
 800ce70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce72:	f000 fdef 	bl	800da54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f810 	bl	800ce9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce7c:	4b06      	ldr	r3, [pc, #24]	; (800ce98 <prvCheckTasksWaitingTermination+0x58>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1e1      	bne.n	800ce48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce84:	bf00      	nop
 800ce86:	bf00      	nop
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	2000104c 	.word	0x2000104c
 800ce94:	20001078 	.word	0x20001078
 800ce98:	20001060 	.word	0x20001060

0800ce9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d108      	bne.n	800cec0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 ff8c 	bl	800ddd0 <vPortFree>
				vPortFree( pxTCB );
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 ff89 	bl	800ddd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cebe:	e018      	b.n	800cef2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cec6:	2b01      	cmp	r3, #1
 800cec8:	d103      	bne.n	800ced2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f000 ff80 	bl	800ddd0 <vPortFree>
	}
 800ced0:	e00f      	b.n	800cef2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ced8:	2b02      	cmp	r3, #2
 800ceda:	d00a      	beq.n	800cef2 <prvDeleteTCB+0x56>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	60fb      	str	r3, [r7, #12]
}
 800ceee:	bf00      	nop
 800cef0:	e7fe      	b.n	800cef0 <prvDeleteTCB+0x54>
	}
 800cef2:	bf00      	nop
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
	...

0800cefc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf02:	4b0c      	ldr	r3, [pc, #48]	; (800cf34 <prvResetNextTaskUnblockTime+0x38>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d104      	bne.n	800cf16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf0c:	4b0a      	ldr	r3, [pc, #40]	; (800cf38 <prvResetNextTaskUnblockTime+0x3c>)
 800cf0e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf14:	e008      	b.n	800cf28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf16:	4b07      	ldr	r3, [pc, #28]	; (800cf34 <prvResetNextTaskUnblockTime+0x38>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	4a04      	ldr	r2, [pc, #16]	; (800cf38 <prvResetNextTaskUnblockTime+0x3c>)
 800cf26:	6013      	str	r3, [r2, #0]
}
 800cf28:	bf00      	nop
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr
 800cf34:	20001030 	.word	0x20001030
 800cf38:	20001098 	.word	0x20001098

0800cf3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf42:	4b0b      	ldr	r3, [pc, #44]	; (800cf70 <xTaskGetSchedulerState+0x34>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d102      	bne.n	800cf50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	607b      	str	r3, [r7, #4]
 800cf4e:	e008      	b.n	800cf62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf50:	4b08      	ldr	r3, [pc, #32]	; (800cf74 <xTaskGetSchedulerState+0x38>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d102      	bne.n	800cf5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf58:	2302      	movs	r3, #2
 800cf5a:	607b      	str	r3, [r7, #4]
 800cf5c:	e001      	b.n	800cf62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf62:	687b      	ldr	r3, [r7, #4]
	}
 800cf64:	4618      	mov	r0, r3
 800cf66:	370c      	adds	r7, #12
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	20001084 	.word	0x20001084
 800cf74:	200010a0 	.word	0x200010a0

0800cf78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cf84:	2300      	movs	r3, #0
 800cf86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d056      	beq.n	800d03c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cf8e:	4b2e      	ldr	r3, [pc, #184]	; (800d048 <xTaskPriorityDisinherit+0xd0>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	693a      	ldr	r2, [r7, #16]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d00a      	beq.n	800cfae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800cf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9c:	f383 8811 	msr	BASEPRI, r3
 800cfa0:	f3bf 8f6f 	isb	sy
 800cfa4:	f3bf 8f4f 	dsb	sy
 800cfa8:	60fb      	str	r3, [r7, #12]
}
 800cfaa:	bf00      	nop
 800cfac:	e7fe      	b.n	800cfac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10a      	bne.n	800cfcc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800cfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	60bb      	str	r3, [r7, #8]
}
 800cfc8:	bf00      	nop
 800cfca:	e7fe      	b.n	800cfca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfd0:	1e5a      	subs	r2, r3, #1
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d02c      	beq.n	800d03c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d128      	bne.n	800d03c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	3304      	adds	r3, #4
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fe fba4 	bl	800b73c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cff8:	693b      	ldr	r3, [r7, #16]
 800cffa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d000:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00c:	4b0f      	ldr	r3, [pc, #60]	; (800d04c <xTaskPriorityDisinherit+0xd4>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	429a      	cmp	r2, r3
 800d012:	d903      	bls.n	800d01c <xTaskPriorityDisinherit+0xa4>
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d018:	4a0c      	ldr	r2, [pc, #48]	; (800d04c <xTaskPriorityDisinherit+0xd4>)
 800d01a:	6013      	str	r3, [r2, #0]
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d020:	4613      	mov	r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4413      	add	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4a09      	ldr	r2, [pc, #36]	; (800d050 <xTaskPriorityDisinherit+0xd8>)
 800d02a:	441a      	add	r2, r3
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	3304      	adds	r3, #4
 800d030:	4619      	mov	r1, r3
 800d032:	4610      	mov	r0, r2
 800d034:	f7fe fb25 	bl	800b682 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d038:	2301      	movs	r3, #1
 800d03a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d03c:	697b      	ldr	r3, [r7, #20]
	}
 800d03e:	4618      	mov	r0, r3
 800d040:	3718      	adds	r7, #24
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20000ba4 	.word	0x20000ba4
 800d04c:	20001080 	.word	0x20001080
 800d050:	20000ba8 	.word	0x20000ba8

0800d054 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b084      	sub	sp, #16
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d05e:	4b21      	ldr	r3, [pc, #132]	; (800d0e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d064:	4b20      	ldr	r3, [pc, #128]	; (800d0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3304      	adds	r3, #4
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fb66 	bl	800b73c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d076:	d10a      	bne.n	800d08e <prvAddCurrentTaskToDelayedList+0x3a>
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d007      	beq.n	800d08e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d07e:	4b1a      	ldr	r3, [pc, #104]	; (800d0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	3304      	adds	r3, #4
 800d084:	4619      	mov	r1, r3
 800d086:	4819      	ldr	r0, [pc, #100]	; (800d0ec <prvAddCurrentTaskToDelayedList+0x98>)
 800d088:	f7fe fafb 	bl	800b682 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d08c:	e026      	b.n	800d0dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d08e:	68fa      	ldr	r2, [r7, #12]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	4413      	add	r3, r2
 800d094:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d096:	4b14      	ldr	r3, [pc, #80]	; (800d0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68ba      	ldr	r2, [r7, #8]
 800d09c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d209      	bcs.n	800d0ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4b0f      	ldr	r3, [pc, #60]	; (800d0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4610      	mov	r0, r2
 800d0b4:	f7fe fb09 	bl	800b6ca <vListInsert>
}
 800d0b8:	e010      	b.n	800d0dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0ba:	4b0e      	ldr	r3, [pc, #56]	; (800d0f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d0bc:	681a      	ldr	r2, [r3, #0]
 800d0be:	4b0a      	ldr	r3, [pc, #40]	; (800d0e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	4610      	mov	r0, r2
 800d0c8:	f7fe faff 	bl	800b6ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68ba      	ldr	r2, [r7, #8]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d202      	bcs.n	800d0dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d0d6:	4a08      	ldr	r2, [pc, #32]	; (800d0f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	6013      	str	r3, [r2, #0]
}
 800d0dc:	bf00      	nop
 800d0de:	3710      	adds	r7, #16
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	2000107c 	.word	0x2000107c
 800d0e8:	20000ba4 	.word	0x20000ba4
 800d0ec:	20001064 	.word	0x20001064
 800d0f0:	20001034 	.word	0x20001034
 800d0f4:	20001030 	.word	0x20001030
 800d0f8:	20001098 	.word	0x20001098

0800d0fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b08a      	sub	sp, #40	; 0x28
 800d100:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d102:	2300      	movs	r3, #0
 800d104:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d106:	f000 fb07 	bl	800d718 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d10a:	4b1c      	ldr	r3, [pc, #112]	; (800d17c <xTimerCreateTimerTask+0x80>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d021      	beq.n	800d156 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d112:	2300      	movs	r3, #0
 800d114:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d116:	2300      	movs	r3, #0
 800d118:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d11a:	1d3a      	adds	r2, r7, #4
 800d11c:	f107 0108 	add.w	r1, r7, #8
 800d120:	f107 030c 	add.w	r3, r7, #12
 800d124:	4618      	mov	r0, r3
 800d126:	f7fe fa65 	bl	800b5f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d12a:	6879      	ldr	r1, [r7, #4]
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	68fa      	ldr	r2, [r7, #12]
 800d130:	9202      	str	r2, [sp, #8]
 800d132:	9301      	str	r3, [sp, #4]
 800d134:	2302      	movs	r3, #2
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	2300      	movs	r3, #0
 800d13a:	460a      	mov	r2, r1
 800d13c:	4910      	ldr	r1, [pc, #64]	; (800d180 <xTimerCreateTimerTask+0x84>)
 800d13e:	4811      	ldr	r0, [pc, #68]	; (800d184 <xTimerCreateTimerTask+0x88>)
 800d140:	f7ff f8cc 	bl	800c2dc <xTaskCreateStatic>
 800d144:	4603      	mov	r3, r0
 800d146:	4a10      	ldr	r2, [pc, #64]	; (800d188 <xTimerCreateTimerTask+0x8c>)
 800d148:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d14a:	4b0f      	ldr	r3, [pc, #60]	; (800d188 <xTimerCreateTimerTask+0x8c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d152:	2301      	movs	r3, #1
 800d154:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10a      	bne.n	800d172 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	613b      	str	r3, [r7, #16]
}
 800d16e:	bf00      	nop
 800d170:	e7fe      	b.n	800d170 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d172:	697b      	ldr	r3, [r7, #20]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	200010d4 	.word	0x200010d4
 800d180:	0800f4c0 	.word	0x0800f4c0
 800d184:	0800d2c1 	.word	0x0800d2c1
 800d188:	200010d8 	.word	0x200010d8

0800d18c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b08a      	sub	sp, #40	; 0x28
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	607a      	str	r2, [r7, #4]
 800d198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d19a:	2300      	movs	r3, #0
 800d19c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d10a      	bne.n	800d1ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800d1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a8:	f383 8811 	msr	BASEPRI, r3
 800d1ac:	f3bf 8f6f 	isb	sy
 800d1b0:	f3bf 8f4f 	dsb	sy
 800d1b4:	623b      	str	r3, [r7, #32]
}
 800d1b6:	bf00      	nop
 800d1b8:	e7fe      	b.n	800d1b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d1ba:	4b1a      	ldr	r3, [pc, #104]	; (800d224 <xTimerGenericCommand+0x98>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d02a      	beq.n	800d218 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	2b05      	cmp	r3, #5
 800d1d2:	dc18      	bgt.n	800d206 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d1d4:	f7ff feb2 	bl	800cf3c <xTaskGetSchedulerState>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d109      	bne.n	800d1f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d1de:	4b11      	ldr	r3, [pc, #68]	; (800d224 <xTimerGenericCommand+0x98>)
 800d1e0:	6818      	ldr	r0, [r3, #0]
 800d1e2:	f107 0110 	add.w	r1, r7, #16
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1ea:	f7fe fc0f 	bl	800ba0c <xQueueGenericSend>
 800d1ee:	6278      	str	r0, [r7, #36]	; 0x24
 800d1f0:	e012      	b.n	800d218 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d1f2:	4b0c      	ldr	r3, [pc, #48]	; (800d224 <xTimerGenericCommand+0x98>)
 800d1f4:	6818      	ldr	r0, [r3, #0]
 800d1f6:	f107 0110 	add.w	r1, r7, #16
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	f7fe fc05 	bl	800ba0c <xQueueGenericSend>
 800d202:	6278      	str	r0, [r7, #36]	; 0x24
 800d204:	e008      	b.n	800d218 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d206:	4b07      	ldr	r3, [pc, #28]	; (800d224 <xTimerGenericCommand+0x98>)
 800d208:	6818      	ldr	r0, [r3, #0]
 800d20a:	f107 0110 	add.w	r1, r7, #16
 800d20e:	2300      	movs	r3, #0
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	f7fe fcf9 	bl	800bc08 <xQueueGenericSendFromISR>
 800d216:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3728      	adds	r7, #40	; 0x28
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	200010d4 	.word	0x200010d4

0800d228 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b088      	sub	sp, #32
 800d22c:	af02      	add	r7, sp, #8
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d232:	4b22      	ldr	r3, [pc, #136]	; (800d2bc <prvProcessExpiredTimer+0x94>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	3304      	adds	r3, #4
 800d240:	4618      	mov	r0, r3
 800d242:	f7fe fa7b 	bl	800b73c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d24c:	f003 0304 	and.w	r3, r3, #4
 800d250:	2b00      	cmp	r3, #0
 800d252:	d022      	beq.n	800d29a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	699a      	ldr	r2, [r3, #24]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	18d1      	adds	r1, r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	6978      	ldr	r0, [r7, #20]
 800d262:	f000 f8d1 	bl	800d408 <prvInsertTimerInActiveList>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01f      	beq.n	800d2ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d26c:	2300      	movs	r3, #0
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	2300      	movs	r3, #0
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	2100      	movs	r1, #0
 800d276:	6978      	ldr	r0, [r7, #20]
 800d278:	f7ff ff88 	bl	800d18c <xTimerGenericCommand>
 800d27c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d113      	bne.n	800d2ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d288:	f383 8811 	msr	BASEPRI, r3
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f3bf 8f4f 	dsb	sy
 800d294:	60fb      	str	r3, [r7, #12]
}
 800d296:	bf00      	nop
 800d298:	e7fe      	b.n	800d298 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2a0:	f023 0301 	bic.w	r3, r3, #1
 800d2a4:	b2da      	uxtb	r2, r3
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	6a1b      	ldr	r3, [r3, #32]
 800d2b0:	6978      	ldr	r0, [r7, #20]
 800d2b2:	4798      	blx	r3
}
 800d2b4:	bf00      	nop
 800d2b6:	3718      	adds	r7, #24
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	200010cc 	.word	0x200010cc

0800d2c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d2c8:	f107 0308 	add.w	r3, r7, #8
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f000 f857 	bl	800d380 <prvGetNextExpireTime>
 800d2d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f000 f803 	bl	800d2e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d2de:	f000 f8d5 	bl	800d48c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d2e2:	e7f1      	b.n	800d2c8 <prvTimerTask+0x8>

0800d2e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d2ee:	f7ff fa31 	bl	800c754 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2f2:	f107 0308 	add.w	r3, r7, #8
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 f866 	bl	800d3c8 <prvSampleTimeNow>
 800d2fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d130      	bne.n	800d366 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10a      	bne.n	800d320 <prvProcessTimerOrBlockTask+0x3c>
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d806      	bhi.n	800d320 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d312:	f7ff fa2d 	bl	800c770 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d316:	68f9      	ldr	r1, [r7, #12]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff ff85 	bl	800d228 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d31e:	e024      	b.n	800d36a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d008      	beq.n	800d338 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d326:	4b13      	ldr	r3, [pc, #76]	; (800d374 <prvProcessTimerOrBlockTask+0x90>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d101      	bne.n	800d334 <prvProcessTimerOrBlockTask+0x50>
 800d330:	2301      	movs	r3, #1
 800d332:	e000      	b.n	800d336 <prvProcessTimerOrBlockTask+0x52>
 800d334:	2300      	movs	r3, #0
 800d336:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d338:	4b0f      	ldr	r3, [pc, #60]	; (800d378 <prvProcessTimerOrBlockTask+0x94>)
 800d33a:	6818      	ldr	r0, [r3, #0]
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	683a      	ldr	r2, [r7, #0]
 800d344:	4619      	mov	r1, r3
 800d346:	f7fe ff95 	bl	800c274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d34a:	f7ff fa11 	bl	800c770 <xTaskResumeAll>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10a      	bne.n	800d36a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d354:	4b09      	ldr	r3, [pc, #36]	; (800d37c <prvProcessTimerOrBlockTask+0x98>)
 800d356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d35a:	601a      	str	r2, [r3, #0]
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	f3bf 8f6f 	isb	sy
}
 800d364:	e001      	b.n	800d36a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d366:	f7ff fa03 	bl	800c770 <xTaskResumeAll>
}
 800d36a:	bf00      	nop
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	200010d0 	.word	0x200010d0
 800d378:	200010d4 	.word	0x200010d4
 800d37c:	e000ed04 	.word	0xe000ed04

0800d380 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d388:	4b0e      	ldr	r3, [pc, #56]	; (800d3c4 <prvGetNextExpireTime+0x44>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <prvGetNextExpireTime+0x16>
 800d392:	2201      	movs	r2, #1
 800d394:	e000      	b.n	800d398 <prvGetNextExpireTime+0x18>
 800d396:	2200      	movs	r2, #0
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d105      	bne.n	800d3b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3a4:	4b07      	ldr	r3, [pc, #28]	; (800d3c4 <prvGetNextExpireTime+0x44>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	60fb      	str	r3, [r7, #12]
 800d3ae:	e001      	b.n	800d3b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3714      	adds	r7, #20
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop
 800d3c4:	200010cc 	.word	0x200010cc

0800d3c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d3d0:	f7ff fa6c 	bl	800c8ac <xTaskGetTickCount>
 800d3d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d3d6:	4b0b      	ldr	r3, [pc, #44]	; (800d404 <prvSampleTimeNow+0x3c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68fa      	ldr	r2, [r7, #12]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d205      	bcs.n	800d3ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d3e0:	f000 f936 	bl	800d650 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	e002      	b.n	800d3f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d3f2:	4a04      	ldr	r2, [pc, #16]	; (800d404 <prvSampleTimeNow+0x3c>)
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	200010dc 	.word	0x200010dc

0800d408 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d416:	2300      	movs	r3, #0
 800d418:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d426:	68ba      	ldr	r2, [r7, #8]
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d812      	bhi.n	800d454 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	1ad2      	subs	r2, r2, r3
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	699b      	ldr	r3, [r3, #24]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d302      	bcc.n	800d442 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d43c:	2301      	movs	r3, #1
 800d43e:	617b      	str	r3, [r7, #20]
 800d440:	e01b      	b.n	800d47a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d442:	4b10      	ldr	r3, [pc, #64]	; (800d484 <prvInsertTimerInActiveList+0x7c>)
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3304      	adds	r3, #4
 800d44a:	4619      	mov	r1, r3
 800d44c:	4610      	mov	r0, r2
 800d44e:	f7fe f93c 	bl	800b6ca <vListInsert>
 800d452:	e012      	b.n	800d47a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d206      	bcs.n	800d46a <prvInsertTimerInActiveList+0x62>
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	429a      	cmp	r2, r3
 800d462:	d302      	bcc.n	800d46a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d464:	2301      	movs	r3, #1
 800d466:	617b      	str	r3, [r7, #20]
 800d468:	e007      	b.n	800d47a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d46a:	4b07      	ldr	r3, [pc, #28]	; (800d488 <prvInsertTimerInActiveList+0x80>)
 800d46c:	681a      	ldr	r2, [r3, #0]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	3304      	adds	r3, #4
 800d472:	4619      	mov	r1, r3
 800d474:	4610      	mov	r0, r2
 800d476:	f7fe f928 	bl	800b6ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d47a:	697b      	ldr	r3, [r7, #20]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3718      	adds	r7, #24
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	200010d0 	.word	0x200010d0
 800d488:	200010cc 	.word	0x200010cc

0800d48c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b08e      	sub	sp, #56	; 0x38
 800d490:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d492:	e0ca      	b.n	800d62a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	da18      	bge.n	800d4cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d49a:	1d3b      	adds	r3, r7, #4
 800d49c:	3304      	adds	r3, #4
 800d49e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d10a      	bne.n	800d4bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	61fb      	str	r3, [r7, #28]
}
 800d4b8:	bf00      	nop
 800d4ba:	e7fe      	b.n	800d4ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4c2:	6850      	ldr	r0, [r2, #4]
 800d4c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4c6:	6892      	ldr	r2, [r2, #8]
 800d4c8:	4611      	mov	r1, r2
 800d4ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f2c0 80aa 	blt.w	800d628 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e2:	3304      	adds	r3, #4
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7fe f929 	bl	800b73c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4ea:	463b      	mov	r3, r7
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7ff ff6b 	bl	800d3c8 <prvSampleTimeNow>
 800d4f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b09      	cmp	r3, #9
 800d4f8:	f200 8097 	bhi.w	800d62a <prvProcessReceivedCommands+0x19e>
 800d4fc:	a201      	add	r2, pc, #4	; (adr r2, 800d504 <prvProcessReceivedCommands+0x78>)
 800d4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d502:	bf00      	nop
 800d504:	0800d52d 	.word	0x0800d52d
 800d508:	0800d52d 	.word	0x0800d52d
 800d50c:	0800d52d 	.word	0x0800d52d
 800d510:	0800d5a1 	.word	0x0800d5a1
 800d514:	0800d5b5 	.word	0x0800d5b5
 800d518:	0800d5ff 	.word	0x0800d5ff
 800d51c:	0800d52d 	.word	0x0800d52d
 800d520:	0800d52d 	.word	0x0800d52d
 800d524:	0800d5a1 	.word	0x0800d5a1
 800d528:	0800d5b5 	.word	0x0800d5b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d52e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d532:	f043 0301 	orr.w	r3, r3, #1
 800d536:	b2da      	uxtb	r2, r3
 800d538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d53e:	68ba      	ldr	r2, [r7, #8]
 800d540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	18d1      	adds	r1, r2, r3
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d54a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d54c:	f7ff ff5c 	bl	800d408 <prvInsertTimerInActiveList>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d069      	beq.n	800d62a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d55c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d564:	f003 0304 	and.w	r3, r3, #4
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d05e      	beq.n	800d62a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	441a      	add	r2, r3
 800d574:	2300      	movs	r3, #0
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	2300      	movs	r3, #0
 800d57a:	2100      	movs	r1, #0
 800d57c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d57e:	f7ff fe05 	bl	800d18c <xTimerGenericCommand>
 800d582:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d584:	6a3b      	ldr	r3, [r7, #32]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d14f      	bne.n	800d62a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d58e:	f383 8811 	msr	BASEPRI, r3
 800d592:	f3bf 8f6f 	isb	sy
 800d596:	f3bf 8f4f 	dsb	sy
 800d59a:	61bb      	str	r3, [r7, #24]
}
 800d59c:	bf00      	nop
 800d59e:	e7fe      	b.n	800d59e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5a6:	f023 0301 	bic.w	r3, r3, #1
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d5b2:	e03a      	b.n	800d62a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5ba:	f043 0301 	orr.w	r3, r3, #1
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10a      	bne.n	800d5ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	617b      	str	r3, [r7, #20]
}
 800d5e6:	bf00      	nop
 800d5e8:	e7fe      	b.n	800d5e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ec:	699a      	ldr	r2, [r3, #24]
 800d5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f0:	18d1      	adds	r1, r2, r3
 800d5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5f8:	f7ff ff06 	bl	800d408 <prvInsertTimerInActiveList>
					break;
 800d5fc:	e015      	b.n	800d62a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d103      	bne.n	800d614 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d60c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d60e:	f000 fbdf 	bl	800ddd0 <vPortFree>
 800d612:	e00a      	b.n	800d62a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d61a:	f023 0301 	bic.w	r3, r3, #1
 800d61e:	b2da      	uxtb	r2, r3
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d626:	e000      	b.n	800d62a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d628:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d62a:	4b08      	ldr	r3, [pc, #32]	; (800d64c <prvProcessReceivedCommands+0x1c0>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	1d39      	adds	r1, r7, #4
 800d630:	2200      	movs	r2, #0
 800d632:	4618      	mov	r0, r3
 800d634:	f7fe fb84 	bl	800bd40 <xQueueReceive>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f47f af2a 	bne.w	800d494 <prvProcessReceivedCommands+0x8>
	}
}
 800d640:	bf00      	nop
 800d642:	bf00      	nop
 800d644:	3730      	adds	r7, #48	; 0x30
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	200010d4 	.word	0x200010d4

0800d650 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b088      	sub	sp, #32
 800d654:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d656:	e048      	b.n	800d6ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d658:	4b2d      	ldr	r3, [pc, #180]	; (800d710 <prvSwitchTimerLists+0xc0>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d662:	4b2b      	ldr	r3, [pc, #172]	; (800d710 <prvSwitchTimerLists+0xc0>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68db      	ldr	r3, [r3, #12]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	3304      	adds	r3, #4
 800d670:	4618      	mov	r0, r3
 800d672:	f7fe f863 	bl	800b73c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	68f8      	ldr	r0, [r7, #12]
 800d67c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d684:	f003 0304 	and.w	r3, r3, #4
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d02e      	beq.n	800d6ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	699b      	ldr	r3, [r3, #24]
 800d690:	693a      	ldr	r2, [r7, #16]
 800d692:	4413      	add	r3, r2
 800d694:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d696:	68ba      	ldr	r2, [r7, #8]
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d90e      	bls.n	800d6bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	68ba      	ldr	r2, [r7, #8]
 800d6a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d6aa:	4b19      	ldr	r3, [pc, #100]	; (800d710 <prvSwitchTimerLists+0xc0>)
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	3304      	adds	r3, #4
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	4610      	mov	r0, r2
 800d6b6:	f7fe f808 	bl	800b6ca <vListInsert>
 800d6ba:	e016      	b.n	800d6ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d6bc:	2300      	movs	r3, #0
 800d6be:	9300      	str	r3, [sp, #0]
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	693a      	ldr	r2, [r7, #16]
 800d6c4:	2100      	movs	r1, #0
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	f7ff fd60 	bl	800d18c <xTimerGenericCommand>
 800d6cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10a      	bne.n	800d6ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	603b      	str	r3, [r7, #0]
}
 800d6e6:	bf00      	nop
 800d6e8:	e7fe      	b.n	800d6e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6ea:	4b09      	ldr	r3, [pc, #36]	; (800d710 <prvSwitchTimerLists+0xc0>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d1b1      	bne.n	800d658 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d6f4:	4b06      	ldr	r3, [pc, #24]	; (800d710 <prvSwitchTimerLists+0xc0>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d6fa:	4b06      	ldr	r3, [pc, #24]	; (800d714 <prvSwitchTimerLists+0xc4>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a04      	ldr	r2, [pc, #16]	; (800d710 <prvSwitchTimerLists+0xc0>)
 800d700:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d702:	4a04      	ldr	r2, [pc, #16]	; (800d714 <prvSwitchTimerLists+0xc4>)
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	6013      	str	r3, [r2, #0]
}
 800d708:	bf00      	nop
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	200010cc 	.word	0x200010cc
 800d714:	200010d0 	.word	0x200010d0

0800d718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d71e:	f000 f969 	bl	800d9f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d722:	4b15      	ldr	r3, [pc, #84]	; (800d778 <prvCheckForValidListAndQueue+0x60>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d120      	bne.n	800d76c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d72a:	4814      	ldr	r0, [pc, #80]	; (800d77c <prvCheckForValidListAndQueue+0x64>)
 800d72c:	f7fd ff7c 	bl	800b628 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d730:	4813      	ldr	r0, [pc, #76]	; (800d780 <prvCheckForValidListAndQueue+0x68>)
 800d732:	f7fd ff79 	bl	800b628 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d736:	4b13      	ldr	r3, [pc, #76]	; (800d784 <prvCheckForValidListAndQueue+0x6c>)
 800d738:	4a10      	ldr	r2, [pc, #64]	; (800d77c <prvCheckForValidListAndQueue+0x64>)
 800d73a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d73c:	4b12      	ldr	r3, [pc, #72]	; (800d788 <prvCheckForValidListAndQueue+0x70>)
 800d73e:	4a10      	ldr	r2, [pc, #64]	; (800d780 <prvCheckForValidListAndQueue+0x68>)
 800d740:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d742:	2300      	movs	r3, #0
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	4b11      	ldr	r3, [pc, #68]	; (800d78c <prvCheckForValidListAndQueue+0x74>)
 800d748:	4a11      	ldr	r2, [pc, #68]	; (800d790 <prvCheckForValidListAndQueue+0x78>)
 800d74a:	2110      	movs	r1, #16
 800d74c:	200a      	movs	r0, #10
 800d74e:	f7fe f887 	bl	800b860 <xQueueGenericCreateStatic>
 800d752:	4603      	mov	r3, r0
 800d754:	4a08      	ldr	r2, [pc, #32]	; (800d778 <prvCheckForValidListAndQueue+0x60>)
 800d756:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d758:	4b07      	ldr	r3, [pc, #28]	; (800d778 <prvCheckForValidListAndQueue+0x60>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d005      	beq.n	800d76c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d760:	4b05      	ldr	r3, [pc, #20]	; (800d778 <prvCheckForValidListAndQueue+0x60>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	490b      	ldr	r1, [pc, #44]	; (800d794 <prvCheckForValidListAndQueue+0x7c>)
 800d766:	4618      	mov	r0, r3
 800d768:	f7fe fd5a 	bl	800c220 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d76c:	f000 f972 	bl	800da54 <vPortExitCritical>
}
 800d770:	bf00      	nop
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	200010d4 	.word	0x200010d4
 800d77c:	200010a4 	.word	0x200010a4
 800d780:	200010b8 	.word	0x200010b8
 800d784:	200010cc 	.word	0x200010cc
 800d788:	200010d0 	.word	0x200010d0
 800d78c:	20001180 	.word	0x20001180
 800d790:	200010e0 	.word	0x200010e0
 800d794:	0800f4c8 	.word	0x0800f4c8

0800d798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d798:	b480      	push	{r7}
 800d79a:	b085      	sub	sp, #20
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	3b04      	subs	r3, #4
 800d7a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d7b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	3b04      	subs	r3, #4
 800d7b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	f023 0201 	bic.w	r2, r3, #1
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	3b04      	subs	r3, #4
 800d7c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d7c8:	4a0c      	ldr	r2, [pc, #48]	; (800d7fc <pxPortInitialiseStack+0x64>)
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	3b14      	subs	r3, #20
 800d7d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	3b04      	subs	r3, #4
 800d7de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f06f 0202 	mvn.w	r2, #2
 800d7e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	3b20      	subs	r3, #32
 800d7ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3714      	adds	r7, #20
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	0800d801 	.word	0x0800d801

0800d800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d80a:	4b12      	ldr	r3, [pc, #72]	; (800d854 <prvTaskExitError+0x54>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d812:	d00a      	beq.n	800d82a <prvTaskExitError+0x2a>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	60fb      	str	r3, [r7, #12]
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <prvTaskExitError+0x28>
	__asm volatile
 800d82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	60bb      	str	r3, [r7, #8]
}
 800d83c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d83e:	bf00      	nop
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d0fc      	beq.n	800d840 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d846:	bf00      	nop
 800d848:	bf00      	nop
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr
 800d854:	20000098 	.word	0x20000098
	...

0800d860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d860:	4b07      	ldr	r3, [pc, #28]	; (800d880 <pxCurrentTCBConst2>)
 800d862:	6819      	ldr	r1, [r3, #0]
 800d864:	6808      	ldr	r0, [r1, #0]
 800d866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86a:	f380 8809 	msr	PSP, r0
 800d86e:	f3bf 8f6f 	isb	sy
 800d872:	f04f 0000 	mov.w	r0, #0
 800d876:	f380 8811 	msr	BASEPRI, r0
 800d87a:	4770      	bx	lr
 800d87c:	f3af 8000 	nop.w

0800d880 <pxCurrentTCBConst2>:
 800d880:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d884:	bf00      	nop
 800d886:	bf00      	nop

0800d888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d888:	4808      	ldr	r0, [pc, #32]	; (800d8ac <prvPortStartFirstTask+0x24>)
 800d88a:	6800      	ldr	r0, [r0, #0]
 800d88c:	6800      	ldr	r0, [r0, #0]
 800d88e:	f380 8808 	msr	MSP, r0
 800d892:	f04f 0000 	mov.w	r0, #0
 800d896:	f380 8814 	msr	CONTROL, r0
 800d89a:	b662      	cpsie	i
 800d89c:	b661      	cpsie	f
 800d89e:	f3bf 8f4f 	dsb	sy
 800d8a2:	f3bf 8f6f 	isb	sy
 800d8a6:	df00      	svc	0
 800d8a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d8aa:	bf00      	nop
 800d8ac:	e000ed08 	.word	0xe000ed08

0800d8b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d8b6:	4b46      	ldr	r3, [pc, #280]	; (800d9d0 <xPortStartScheduler+0x120>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a46      	ldr	r2, [pc, #280]	; (800d9d4 <xPortStartScheduler+0x124>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d10a      	bne.n	800d8d6 <xPortStartScheduler+0x26>
	__asm volatile
 800d8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	613b      	str	r3, [r7, #16]
}
 800d8d2:	bf00      	nop
 800d8d4:	e7fe      	b.n	800d8d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d8d6:	4b3e      	ldr	r3, [pc, #248]	; (800d9d0 <xPortStartScheduler+0x120>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a3f      	ldr	r2, [pc, #252]	; (800d9d8 <xPortStartScheduler+0x128>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d10a      	bne.n	800d8f6 <xPortStartScheduler+0x46>
	__asm volatile
 800d8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	60fb      	str	r3, [r7, #12]
}
 800d8f2:	bf00      	nop
 800d8f4:	e7fe      	b.n	800d8f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d8f6:	4b39      	ldr	r3, [pc, #228]	; (800d9dc <xPortStartScheduler+0x12c>)
 800d8f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	b2db      	uxtb	r3, r3
 800d900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	22ff      	movs	r2, #255	; 0xff
 800d906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d910:	78fb      	ldrb	r3, [r7, #3]
 800d912:	b2db      	uxtb	r3, r3
 800d914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	4b31      	ldr	r3, [pc, #196]	; (800d9e0 <xPortStartScheduler+0x130>)
 800d91c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d91e:	4b31      	ldr	r3, [pc, #196]	; (800d9e4 <xPortStartScheduler+0x134>)
 800d920:	2207      	movs	r2, #7
 800d922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d924:	e009      	b.n	800d93a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d926:	4b2f      	ldr	r3, [pc, #188]	; (800d9e4 <xPortStartScheduler+0x134>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	3b01      	subs	r3, #1
 800d92c:	4a2d      	ldr	r2, [pc, #180]	; (800d9e4 <xPortStartScheduler+0x134>)
 800d92e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d930:	78fb      	ldrb	r3, [r7, #3]
 800d932:	b2db      	uxtb	r3, r3
 800d934:	005b      	lsls	r3, r3, #1
 800d936:	b2db      	uxtb	r3, r3
 800d938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d93a:	78fb      	ldrb	r3, [r7, #3]
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d942:	2b80      	cmp	r3, #128	; 0x80
 800d944:	d0ef      	beq.n	800d926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d946:	4b27      	ldr	r3, [pc, #156]	; (800d9e4 <xPortStartScheduler+0x134>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f1c3 0307 	rsb	r3, r3, #7
 800d94e:	2b04      	cmp	r3, #4
 800d950:	d00a      	beq.n	800d968 <xPortStartScheduler+0xb8>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	60bb      	str	r3, [r7, #8]
}
 800d964:	bf00      	nop
 800d966:	e7fe      	b.n	800d966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d968:	4b1e      	ldr	r3, [pc, #120]	; (800d9e4 <xPortStartScheduler+0x134>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	021b      	lsls	r3, r3, #8
 800d96e:	4a1d      	ldr	r2, [pc, #116]	; (800d9e4 <xPortStartScheduler+0x134>)
 800d970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d972:	4b1c      	ldr	r3, [pc, #112]	; (800d9e4 <xPortStartScheduler+0x134>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d97a:	4a1a      	ldr	r2, [pc, #104]	; (800d9e4 <xPortStartScheduler+0x134>)
 800d97c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	b2da      	uxtb	r2, r3
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d986:	4b18      	ldr	r3, [pc, #96]	; (800d9e8 <xPortStartScheduler+0x138>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a17      	ldr	r2, [pc, #92]	; (800d9e8 <xPortStartScheduler+0x138>)
 800d98c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d992:	4b15      	ldr	r3, [pc, #84]	; (800d9e8 <xPortStartScheduler+0x138>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a14      	ldr	r2, [pc, #80]	; (800d9e8 <xPortStartScheduler+0x138>)
 800d998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d99c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d99e:	f000 f8dd 	bl	800db5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d9a2:	4b12      	ldr	r3, [pc, #72]	; (800d9ec <xPortStartScheduler+0x13c>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d9a8:	f000 f8fc 	bl	800dba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d9ac:	4b10      	ldr	r3, [pc, #64]	; (800d9f0 <xPortStartScheduler+0x140>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a0f      	ldr	r2, [pc, #60]	; (800d9f0 <xPortStartScheduler+0x140>)
 800d9b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d9b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d9b8:	f7ff ff66 	bl	800d888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d9bc:	f7ff f852 	bl	800ca64 <vTaskSwitchContext>
	prvTaskExitError();
 800d9c0:	f7ff ff1e 	bl	800d800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3718      	adds	r7, #24
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	e000ed00 	.word	0xe000ed00
 800d9d4:	410fc271 	.word	0x410fc271
 800d9d8:	410fc270 	.word	0x410fc270
 800d9dc:	e000e400 	.word	0xe000e400
 800d9e0:	200011d0 	.word	0x200011d0
 800d9e4:	200011d4 	.word	0x200011d4
 800d9e8:	e000ed20 	.word	0xe000ed20
 800d9ec:	20000098 	.word	0x20000098
 800d9f0:	e000ef34 	.word	0xe000ef34

0800d9f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b083      	sub	sp, #12
 800d9f8:	af00      	add	r7, sp, #0
	__asm volatile
 800d9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fe:	f383 8811 	msr	BASEPRI, r3
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	f3bf 8f4f 	dsb	sy
 800da0a:	607b      	str	r3, [r7, #4]
}
 800da0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800da0e:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <vPortEnterCritical+0x58>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	3301      	adds	r3, #1
 800da14:	4a0d      	ldr	r2, [pc, #52]	; (800da4c <vPortEnterCritical+0x58>)
 800da16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800da18:	4b0c      	ldr	r3, [pc, #48]	; (800da4c <vPortEnterCritical+0x58>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d10f      	bne.n	800da40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da20:	4b0b      	ldr	r3, [pc, #44]	; (800da50 <vPortEnterCritical+0x5c>)
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	b2db      	uxtb	r3, r3
 800da26:	2b00      	cmp	r3, #0
 800da28:	d00a      	beq.n	800da40 <vPortEnterCritical+0x4c>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	603b      	str	r3, [r7, #0]
}
 800da3c:	bf00      	nop
 800da3e:	e7fe      	b.n	800da3e <vPortEnterCritical+0x4a>
	}
}
 800da40:	bf00      	nop
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	20000098 	.word	0x20000098
 800da50:	e000ed04 	.word	0xe000ed04

0800da54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800da5a:	4b12      	ldr	r3, [pc, #72]	; (800daa4 <vPortExitCritical+0x50>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d10a      	bne.n	800da78 <vPortExitCritical+0x24>
	__asm volatile
 800da62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da66:	f383 8811 	msr	BASEPRI, r3
 800da6a:	f3bf 8f6f 	isb	sy
 800da6e:	f3bf 8f4f 	dsb	sy
 800da72:	607b      	str	r3, [r7, #4]
}
 800da74:	bf00      	nop
 800da76:	e7fe      	b.n	800da76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800da78:	4b0a      	ldr	r3, [pc, #40]	; (800daa4 <vPortExitCritical+0x50>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	3b01      	subs	r3, #1
 800da7e:	4a09      	ldr	r2, [pc, #36]	; (800daa4 <vPortExitCritical+0x50>)
 800da80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da82:	4b08      	ldr	r3, [pc, #32]	; (800daa4 <vPortExitCritical+0x50>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d105      	bne.n	800da96 <vPortExitCritical+0x42>
 800da8a:	2300      	movs	r3, #0
 800da8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	f383 8811 	msr	BASEPRI, r3
}
 800da94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da96:	bf00      	nop
 800da98:	370c      	adds	r7, #12
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
 800daa2:	bf00      	nop
 800daa4:	20000098 	.word	0x20000098
	...

0800dab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dab0:	f3ef 8009 	mrs	r0, PSP
 800dab4:	f3bf 8f6f 	isb	sy
 800dab8:	4b15      	ldr	r3, [pc, #84]	; (800db10 <pxCurrentTCBConst>)
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	f01e 0f10 	tst.w	lr, #16
 800dac0:	bf08      	it	eq
 800dac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daca:	6010      	str	r0, [r2, #0]
 800dacc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dad4:	f380 8811 	msr	BASEPRI, r0
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	f3bf 8f6f 	isb	sy
 800dae0:	f7fe ffc0 	bl	800ca64 <vTaskSwitchContext>
 800dae4:	f04f 0000 	mov.w	r0, #0
 800dae8:	f380 8811 	msr	BASEPRI, r0
 800daec:	bc09      	pop	{r0, r3}
 800daee:	6819      	ldr	r1, [r3, #0]
 800daf0:	6808      	ldr	r0, [r1, #0]
 800daf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf6:	f01e 0f10 	tst.w	lr, #16
 800dafa:	bf08      	it	eq
 800dafc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800db00:	f380 8809 	msr	PSP, r0
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	4770      	bx	lr
 800db0a:	bf00      	nop
 800db0c:	f3af 8000 	nop.w

0800db10 <pxCurrentTCBConst>:
 800db10:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800db14:	bf00      	nop
 800db16:	bf00      	nop

0800db18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
	__asm volatile
 800db1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db22:	f383 8811 	msr	BASEPRI, r3
 800db26:	f3bf 8f6f 	isb	sy
 800db2a:	f3bf 8f4f 	dsb	sy
 800db2e:	607b      	str	r3, [r7, #4]
}
 800db30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800db32:	f7fe fedd 	bl	800c8f0 <xTaskIncrementTick>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d003      	beq.n	800db44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db3c:	4b06      	ldr	r3, [pc, #24]	; (800db58 <xPortSysTickHandler+0x40>)
 800db3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db42:	601a      	str	r2, [r3, #0]
 800db44:	2300      	movs	r3, #0
 800db46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	f383 8811 	msr	BASEPRI, r3
}
 800db4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	e000ed04 	.word	0xe000ed04

0800db5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800db5c:	b480      	push	{r7}
 800db5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800db60:	4b0b      	ldr	r3, [pc, #44]	; (800db90 <vPortSetupTimerInterrupt+0x34>)
 800db62:	2200      	movs	r2, #0
 800db64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800db66:	4b0b      	ldr	r3, [pc, #44]	; (800db94 <vPortSetupTimerInterrupt+0x38>)
 800db68:	2200      	movs	r2, #0
 800db6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db6c:	4b0a      	ldr	r3, [pc, #40]	; (800db98 <vPortSetupTimerInterrupt+0x3c>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4a0a      	ldr	r2, [pc, #40]	; (800db9c <vPortSetupTimerInterrupt+0x40>)
 800db72:	fba2 2303 	umull	r2, r3, r2, r3
 800db76:	099b      	lsrs	r3, r3, #6
 800db78:	4a09      	ldr	r2, [pc, #36]	; (800dba0 <vPortSetupTimerInterrupt+0x44>)
 800db7a:	3b01      	subs	r3, #1
 800db7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db7e:	4b04      	ldr	r3, [pc, #16]	; (800db90 <vPortSetupTimerInterrupt+0x34>)
 800db80:	2207      	movs	r2, #7
 800db82:	601a      	str	r2, [r3, #0]
}
 800db84:	bf00      	nop
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	e000e010 	.word	0xe000e010
 800db94:	e000e018 	.word	0xe000e018
 800db98:	20000000 	.word	0x20000000
 800db9c:	10624dd3 	.word	0x10624dd3
 800dba0:	e000e014 	.word	0xe000e014

0800dba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dbb4 <vPortEnableVFP+0x10>
 800dba8:	6801      	ldr	r1, [r0, #0]
 800dbaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dbae:	6001      	str	r1, [r0, #0]
 800dbb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dbb2:	bf00      	nop
 800dbb4:	e000ed88 	.word	0xe000ed88

0800dbb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dbb8:	b480      	push	{r7}
 800dbba:	b085      	sub	sp, #20
 800dbbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dbbe:	f3ef 8305 	mrs	r3, IPSR
 800dbc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	2b0f      	cmp	r3, #15
 800dbc8:	d914      	bls.n	800dbf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dbca:	4a17      	ldr	r2, [pc, #92]	; (800dc28 <vPortValidateInterruptPriority+0x70>)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	4413      	add	r3, r2
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dbd4:	4b15      	ldr	r3, [pc, #84]	; (800dc2c <vPortValidateInterruptPriority+0x74>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	7afa      	ldrb	r2, [r7, #11]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d20a      	bcs.n	800dbf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	607b      	str	r3, [r7, #4]
}
 800dbf0:	bf00      	nop
 800dbf2:	e7fe      	b.n	800dbf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dbf4:	4b0e      	ldr	r3, [pc, #56]	; (800dc30 <vPortValidateInterruptPriority+0x78>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dbfc:	4b0d      	ldr	r3, [pc, #52]	; (800dc34 <vPortValidateInterruptPriority+0x7c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d90a      	bls.n	800dc1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc08:	f383 8811 	msr	BASEPRI, r3
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	603b      	str	r3, [r7, #0]
}
 800dc16:	bf00      	nop
 800dc18:	e7fe      	b.n	800dc18 <vPortValidateInterruptPriority+0x60>
	}
 800dc1a:	bf00      	nop
 800dc1c:	3714      	adds	r7, #20
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	e000e3f0 	.word	0xe000e3f0
 800dc2c:	200011d0 	.word	0x200011d0
 800dc30:	e000ed0c 	.word	0xe000ed0c
 800dc34:	200011d4 	.word	0x200011d4

0800dc38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08a      	sub	sp, #40	; 0x28
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dc40:	2300      	movs	r3, #0
 800dc42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dc44:	f7fe fd86 	bl	800c754 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dc48:	4b5b      	ldr	r3, [pc, #364]	; (800ddb8 <pvPortMalloc+0x180>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d101      	bne.n	800dc54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dc50:	f000 f920 	bl	800de94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dc54:	4b59      	ldr	r3, [pc, #356]	; (800ddbc <pvPortMalloc+0x184>)
 800dc56:	681a      	ldr	r2, [r3, #0]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	4013      	ands	r3, r2
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	f040 8093 	bne.w	800dd88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d01d      	beq.n	800dca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dc68:	2208      	movs	r2, #8
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f003 0307 	and.w	r3, r3, #7
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d014      	beq.n	800dca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f023 0307 	bic.w	r3, r3, #7
 800dc80:	3308      	adds	r3, #8
 800dc82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f003 0307 	and.w	r3, r3, #7
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00a      	beq.n	800dca4 <pvPortMalloc+0x6c>
	__asm volatile
 800dc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc92:	f383 8811 	msr	BASEPRI, r3
 800dc96:	f3bf 8f6f 	isb	sy
 800dc9a:	f3bf 8f4f 	dsb	sy
 800dc9e:	617b      	str	r3, [r7, #20]
}
 800dca0:	bf00      	nop
 800dca2:	e7fe      	b.n	800dca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d06e      	beq.n	800dd88 <pvPortMalloc+0x150>
 800dcaa:	4b45      	ldr	r3, [pc, #276]	; (800ddc0 <pvPortMalloc+0x188>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d869      	bhi.n	800dd88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dcb4:	4b43      	ldr	r3, [pc, #268]	; (800ddc4 <pvPortMalloc+0x18c>)
 800dcb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dcb8:	4b42      	ldr	r3, [pc, #264]	; (800ddc4 <pvPortMalloc+0x18c>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dcbe:	e004      	b.n	800dcca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d903      	bls.n	800dcdc <pvPortMalloc+0xa4>
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d1f1      	bne.n	800dcc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dcdc:	4b36      	ldr	r3, [pc, #216]	; (800ddb8 <pvPortMalloc+0x180>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d050      	beq.n	800dd88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dce6:	6a3b      	ldr	r3, [r7, #32]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2208      	movs	r2, #8
 800dcec:	4413      	add	r3, r2
 800dcee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	681a      	ldr	r2, [r3, #0]
 800dcf4:	6a3b      	ldr	r3, [r7, #32]
 800dcf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	685a      	ldr	r2, [r3, #4]
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	1ad2      	subs	r2, r2, r3
 800dd00:	2308      	movs	r3, #8
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d91f      	bls.n	800dd48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	f003 0307 	and.w	r3, r3, #7
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <pvPortMalloc+0xf8>
	__asm volatile
 800dd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1e:	f383 8811 	msr	BASEPRI, r3
 800dd22:	f3bf 8f6f 	isb	sy
 800dd26:	f3bf 8f4f 	dsb	sy
 800dd2a:	613b      	str	r3, [r7, #16]
}
 800dd2c:	bf00      	nop
 800dd2e:	e7fe      	b.n	800dd2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd32:	685a      	ldr	r2, [r3, #4]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	1ad2      	subs	r2, r2, r3
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dd42:	69b8      	ldr	r0, [r7, #24]
 800dd44:	f000 f908 	bl	800df58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dd48:	4b1d      	ldr	r3, [pc, #116]	; (800ddc0 <pvPortMalloc+0x188>)
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	4a1b      	ldr	r2, [pc, #108]	; (800ddc0 <pvPortMalloc+0x188>)
 800dd54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dd56:	4b1a      	ldr	r3, [pc, #104]	; (800ddc0 <pvPortMalloc+0x188>)
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	4b1b      	ldr	r3, [pc, #108]	; (800ddc8 <pvPortMalloc+0x190>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d203      	bcs.n	800dd6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dd62:	4b17      	ldr	r3, [pc, #92]	; (800ddc0 <pvPortMalloc+0x188>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	4a18      	ldr	r2, [pc, #96]	; (800ddc8 <pvPortMalloc+0x190>)
 800dd68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6c:	685a      	ldr	r2, [r3, #4]
 800dd6e:	4b13      	ldr	r3, [pc, #76]	; (800ddbc <pvPortMalloc+0x184>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	431a      	orrs	r2, r3
 800dd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dd7e:	4b13      	ldr	r3, [pc, #76]	; (800ddcc <pvPortMalloc+0x194>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3301      	adds	r3, #1
 800dd84:	4a11      	ldr	r2, [pc, #68]	; (800ddcc <pvPortMalloc+0x194>)
 800dd86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd88:	f7fe fcf2 	bl	800c770 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	f003 0307 	and.w	r3, r3, #7
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00a      	beq.n	800ddac <pvPortMalloc+0x174>
	__asm volatile
 800dd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9a:	f383 8811 	msr	BASEPRI, r3
 800dd9e:	f3bf 8f6f 	isb	sy
 800dda2:	f3bf 8f4f 	dsb	sy
 800dda6:	60fb      	str	r3, [r7, #12]
}
 800dda8:	bf00      	nop
 800ddaa:	e7fe      	b.n	800ddaa <pvPortMalloc+0x172>
	return pvReturn;
 800ddac:	69fb      	ldr	r3, [r7, #28]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3728      	adds	r7, #40	; 0x28
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20004de0 	.word	0x20004de0
 800ddbc:	20004df4 	.word	0x20004df4
 800ddc0:	20004de4 	.word	0x20004de4
 800ddc4:	20004dd8 	.word	0x20004dd8
 800ddc8:	20004de8 	.word	0x20004de8
 800ddcc:	20004dec 	.word	0x20004dec

0800ddd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d04d      	beq.n	800de7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dde2:	2308      	movs	r3, #8
 800dde4:	425b      	negs	r3, r3
 800dde6:	697a      	ldr	r2, [r7, #20]
 800dde8:	4413      	add	r3, r2
 800ddea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	4b24      	ldr	r3, [pc, #144]	; (800de88 <vPortFree+0xb8>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4013      	ands	r3, r2
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d10a      	bne.n	800de14 <vPortFree+0x44>
	__asm volatile
 800ddfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de02:	f383 8811 	msr	BASEPRI, r3
 800de06:	f3bf 8f6f 	isb	sy
 800de0a:	f3bf 8f4f 	dsb	sy
 800de0e:	60fb      	str	r3, [r7, #12]
}
 800de10:	bf00      	nop
 800de12:	e7fe      	b.n	800de12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d00a      	beq.n	800de32 <vPortFree+0x62>
	__asm volatile
 800de1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de20:	f383 8811 	msr	BASEPRI, r3
 800de24:	f3bf 8f6f 	isb	sy
 800de28:	f3bf 8f4f 	dsb	sy
 800de2c:	60bb      	str	r3, [r7, #8]
}
 800de2e:	bf00      	nop
 800de30:	e7fe      	b.n	800de30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	685a      	ldr	r2, [r3, #4]
 800de36:	4b14      	ldr	r3, [pc, #80]	; (800de88 <vPortFree+0xb8>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4013      	ands	r3, r2
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d01e      	beq.n	800de7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d11a      	bne.n	800de7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	4b0e      	ldr	r3, [pc, #56]	; (800de88 <vPortFree+0xb8>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	43db      	mvns	r3, r3
 800de52:	401a      	ands	r2, r3
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800de58:	f7fe fc7c 	bl	800c754 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	4b0a      	ldr	r3, [pc, #40]	; (800de8c <vPortFree+0xbc>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4413      	add	r3, r2
 800de66:	4a09      	ldr	r2, [pc, #36]	; (800de8c <vPortFree+0xbc>)
 800de68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de6a:	6938      	ldr	r0, [r7, #16]
 800de6c:	f000 f874 	bl	800df58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800de70:	4b07      	ldr	r3, [pc, #28]	; (800de90 <vPortFree+0xc0>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	3301      	adds	r3, #1
 800de76:	4a06      	ldr	r2, [pc, #24]	; (800de90 <vPortFree+0xc0>)
 800de78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800de7a:	f7fe fc79 	bl	800c770 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de7e:	bf00      	nop
 800de80:	3718      	adds	r7, #24
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
 800de86:	bf00      	nop
 800de88:	20004df4 	.word	0x20004df4
 800de8c:	20004de4 	.word	0x20004de4
 800de90:	20004df0 	.word	0x20004df0

0800de94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de94:	b480      	push	{r7}
 800de96:	b085      	sub	sp, #20
 800de98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800de9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dea0:	4b27      	ldr	r3, [pc, #156]	; (800df40 <prvHeapInit+0xac>)
 800dea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f003 0307 	and.w	r3, r3, #7
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d00c      	beq.n	800dec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	3307      	adds	r3, #7
 800deb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	f023 0307 	bic.w	r3, r3, #7
 800deba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	1ad3      	subs	r3, r2, r3
 800dec2:	4a1f      	ldr	r2, [pc, #124]	; (800df40 <prvHeapInit+0xac>)
 800dec4:	4413      	add	r3, r2
 800dec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800decc:	4a1d      	ldr	r2, [pc, #116]	; (800df44 <prvHeapInit+0xb0>)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ded2:	4b1c      	ldr	r3, [pc, #112]	; (800df44 <prvHeapInit+0xb0>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	68ba      	ldr	r2, [r7, #8]
 800dedc:	4413      	add	r3, r2
 800dede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dee0:	2208      	movs	r2, #8
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	1a9b      	subs	r3, r3, r2
 800dee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f023 0307 	bic.w	r3, r3, #7
 800deee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	4a15      	ldr	r2, [pc, #84]	; (800df48 <prvHeapInit+0xb4>)
 800def4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800def6:	4b14      	ldr	r3, [pc, #80]	; (800df48 <prvHeapInit+0xb4>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2200      	movs	r2, #0
 800defc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800defe:	4b12      	ldr	r3, [pc, #72]	; (800df48 <prvHeapInit+0xb4>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2200      	movs	r2, #0
 800df04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	1ad2      	subs	r2, r2, r3
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800df14:	4b0c      	ldr	r3, [pc, #48]	; (800df48 <prvHeapInit+0xb4>)
 800df16:	681a      	ldr	r2, [r3, #0]
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	4a0a      	ldr	r2, [pc, #40]	; (800df4c <prvHeapInit+0xb8>)
 800df22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	4a09      	ldr	r2, [pc, #36]	; (800df50 <prvHeapInit+0xbc>)
 800df2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800df2c:	4b09      	ldr	r3, [pc, #36]	; (800df54 <prvHeapInit+0xc0>)
 800df2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800df32:	601a      	str	r2, [r3, #0]
}
 800df34:	bf00      	nop
 800df36:	3714      	adds	r7, #20
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr
 800df40:	200011d8 	.word	0x200011d8
 800df44:	20004dd8 	.word	0x20004dd8
 800df48:	20004de0 	.word	0x20004de0
 800df4c:	20004de8 	.word	0x20004de8
 800df50:	20004de4 	.word	0x20004de4
 800df54:	20004df4 	.word	0x20004df4

0800df58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800df60:	4b28      	ldr	r3, [pc, #160]	; (800e004 <prvInsertBlockIntoFreeList+0xac>)
 800df62:	60fb      	str	r3, [r7, #12]
 800df64:	e002      	b.n	800df6c <prvInsertBlockIntoFreeList+0x14>
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	60fb      	str	r3, [r7, #12]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	429a      	cmp	r2, r3
 800df74:	d8f7      	bhi.n	800df66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	4413      	add	r3, r2
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	429a      	cmp	r2, r3
 800df86:	d108      	bne.n	800df9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	441a      	add	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	441a      	add	r2, r3
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d118      	bne.n	800dfe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	4b15      	ldr	r3, [pc, #84]	; (800e008 <prvInsertBlockIntoFreeList+0xb0>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d00d      	beq.n	800dfd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	685a      	ldr	r2, [r3, #4]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	441a      	add	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	601a      	str	r2, [r3, #0]
 800dfd4:	e008      	b.n	800dfe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dfd6:	4b0c      	ldr	r3, [pc, #48]	; (800e008 <prvInsertBlockIntoFreeList+0xb0>)
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	601a      	str	r2, [r3, #0]
 800dfde:	e003      	b.n	800dfe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d002      	beq.n	800dff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dff6:	bf00      	nop
 800dff8:	3714      	adds	r7, #20
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	20004dd8 	.word	0x20004dd8
 800e008:	20004de0 	.word	0x20004de0

0800e00c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e010:	2201      	movs	r2, #1
 800e012:	4912      	ldr	r1, [pc, #72]	; (800e05c <MX_USB_DEVICE_Init+0x50>)
 800e014:	4812      	ldr	r0, [pc, #72]	; (800e060 <MX_USB_DEVICE_Init+0x54>)
 800e016:	f7fb fcf1 	bl	80099fc <USBD_Init>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e020:	f7f2 ff6e 	bl	8000f00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e024:	490f      	ldr	r1, [pc, #60]	; (800e064 <MX_USB_DEVICE_Init+0x58>)
 800e026:	480e      	ldr	r0, [pc, #56]	; (800e060 <MX_USB_DEVICE_Init+0x54>)
 800e028:	f7fb fd18 	bl	8009a5c <USBD_RegisterClass>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d001      	beq.n	800e036 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e032:	f7f2 ff65 	bl	8000f00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e036:	490c      	ldr	r1, [pc, #48]	; (800e068 <MX_USB_DEVICE_Init+0x5c>)
 800e038:	4809      	ldr	r0, [pc, #36]	; (800e060 <MX_USB_DEVICE_Init+0x54>)
 800e03a:	f7fb fc4f 	bl	80098dc <USBD_CDC_RegisterInterface>
 800e03e:	4603      	mov	r3, r0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d001      	beq.n	800e048 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e044:	f7f2 ff5c 	bl	8000f00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e048:	4805      	ldr	r0, [pc, #20]	; (800e060 <MX_USB_DEVICE_Init+0x54>)
 800e04a:	f7fb fd3d 	bl	8009ac8 <USBD_Start>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e054:	f7f2 ff54 	bl	8000f00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e058:	bf00      	nop
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	200000b0 	.word	0x200000b0
 800e060:	20004df8 	.word	0x20004df8
 800e064:	20000018 	.word	0x20000018
 800e068:	2000009c 	.word	0x2000009c

0800e06c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e070:	2200      	movs	r2, #0
 800e072:	4905      	ldr	r1, [pc, #20]	; (800e088 <CDC_Init_HS+0x1c>)
 800e074:	4805      	ldr	r0, [pc, #20]	; (800e08c <CDC_Init_HS+0x20>)
 800e076:	f7fb fc4b 	bl	8009910 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e07a:	4905      	ldr	r1, [pc, #20]	; (800e090 <CDC_Init_HS+0x24>)
 800e07c:	4803      	ldr	r0, [pc, #12]	; (800e08c <CDC_Init_HS+0x20>)
 800e07e:	f7fb fc69 	bl	8009954 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e082:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e084:	4618      	mov	r0, r3
 800e086:	bd80      	pop	{r7, pc}
 800e088:	200058d4 	.word	0x200058d4
 800e08c:	20004df8 	.word	0x20004df8
 800e090:	200050d4 	.word	0x200050d4

0800e094 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e094:	b480      	push	{r7}
 800e096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e098:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr

0800e0a4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	6039      	str	r1, [r7, #0]
 800e0ae:	71fb      	strb	r3, [r7, #7]
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e0b4:	79fb      	ldrb	r3, [r7, #7]
 800e0b6:	2b23      	cmp	r3, #35	; 0x23
 800e0b8:	d84a      	bhi.n	800e150 <CDC_Control_HS+0xac>
 800e0ba:	a201      	add	r2, pc, #4	; (adr r2, 800e0c0 <CDC_Control_HS+0x1c>)
 800e0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c0:	0800e151 	.word	0x0800e151
 800e0c4:	0800e151 	.word	0x0800e151
 800e0c8:	0800e151 	.word	0x0800e151
 800e0cc:	0800e151 	.word	0x0800e151
 800e0d0:	0800e151 	.word	0x0800e151
 800e0d4:	0800e151 	.word	0x0800e151
 800e0d8:	0800e151 	.word	0x0800e151
 800e0dc:	0800e151 	.word	0x0800e151
 800e0e0:	0800e151 	.word	0x0800e151
 800e0e4:	0800e151 	.word	0x0800e151
 800e0e8:	0800e151 	.word	0x0800e151
 800e0ec:	0800e151 	.word	0x0800e151
 800e0f0:	0800e151 	.word	0x0800e151
 800e0f4:	0800e151 	.word	0x0800e151
 800e0f8:	0800e151 	.word	0x0800e151
 800e0fc:	0800e151 	.word	0x0800e151
 800e100:	0800e151 	.word	0x0800e151
 800e104:	0800e151 	.word	0x0800e151
 800e108:	0800e151 	.word	0x0800e151
 800e10c:	0800e151 	.word	0x0800e151
 800e110:	0800e151 	.word	0x0800e151
 800e114:	0800e151 	.word	0x0800e151
 800e118:	0800e151 	.word	0x0800e151
 800e11c:	0800e151 	.word	0x0800e151
 800e120:	0800e151 	.word	0x0800e151
 800e124:	0800e151 	.word	0x0800e151
 800e128:	0800e151 	.word	0x0800e151
 800e12c:	0800e151 	.word	0x0800e151
 800e130:	0800e151 	.word	0x0800e151
 800e134:	0800e151 	.word	0x0800e151
 800e138:	0800e151 	.word	0x0800e151
 800e13c:	0800e151 	.word	0x0800e151
 800e140:	0800e151 	.word	0x0800e151
 800e144:	0800e151 	.word	0x0800e151
 800e148:	0800e151 	.word	0x0800e151
 800e14c:	0800e151 	.word	0x0800e151
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e150:	bf00      	nop
  }

  return (USBD_OK);
 800e152:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e154:	4618      	mov	r0, r3
 800e156:	370c      	adds	r7, #12
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr

0800e160 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800e16a:	6879      	ldr	r1, [r7, #4]
 800e16c:	4805      	ldr	r0, [pc, #20]	; (800e184 <CDC_Receive_HS+0x24>)
 800e16e:	f7fb fbf1 	bl	8009954 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800e172:	4804      	ldr	r0, [pc, #16]	; (800e184 <CDC_Receive_HS+0x24>)
 800e174:	f7fb fc0c 	bl	8009990 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e178:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3708      	adds	r7, #8
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	20004df8 	.word	0x20004df8

0800e188 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e188:	b480      	push	{r7}
 800e18a:	b087      	sub	sp, #28
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	4613      	mov	r3, r2
 800e194:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e196:	2300      	movs	r3, #0
 800e198:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800e19a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	371c      	adds	r7, #28
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
	...

0800e1ac <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	6039      	str	r1, [r7, #0]
 800e1b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	2212      	movs	r2, #18
 800e1bc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800e1be:	4b03      	ldr	r3, [pc, #12]	; (800e1cc <USBD_HS_DeviceDescriptor+0x20>)
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	200000cc 	.word	0x200000cc

0800e1d0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	6039      	str	r1, [r7, #0]
 800e1da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	2204      	movs	r2, #4
 800e1e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e1e2:	4b03      	ldr	r3, [pc, #12]	; (800e1f0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	370c      	adds	r7, #12
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr
 800e1f0:	200000e0 	.word	0x200000e0

0800e1f4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b082      	sub	sp, #8
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	6039      	str	r1, [r7, #0]
 800e1fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e200:	79fb      	ldrb	r3, [r7, #7]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d105      	bne.n	800e212 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	4907      	ldr	r1, [pc, #28]	; (800e228 <USBD_HS_ProductStrDescriptor+0x34>)
 800e20a:	4808      	ldr	r0, [pc, #32]	; (800e22c <USBD_HS_ProductStrDescriptor+0x38>)
 800e20c:	f7fc fe08 	bl	800ae20 <USBD_GetString>
 800e210:	e004      	b.n	800e21c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	4904      	ldr	r1, [pc, #16]	; (800e228 <USBD_HS_ProductStrDescriptor+0x34>)
 800e216:	4805      	ldr	r0, [pc, #20]	; (800e22c <USBD_HS_ProductStrDescriptor+0x38>)
 800e218:	f7fc fe02 	bl	800ae20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e21c:	4b02      	ldr	r3, [pc, #8]	; (800e228 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3708      	adds	r7, #8
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	200060d4 	.word	0x200060d4
 800e22c:	0800f4d0 	.word	0x0800f4d0

0800e230 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b082      	sub	sp, #8
 800e234:	af00      	add	r7, sp, #0
 800e236:	4603      	mov	r3, r0
 800e238:	6039      	str	r1, [r7, #0]
 800e23a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e23c:	683a      	ldr	r2, [r7, #0]
 800e23e:	4904      	ldr	r1, [pc, #16]	; (800e250 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e240:	4804      	ldr	r0, [pc, #16]	; (800e254 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e242:	f7fc fded 	bl	800ae20 <USBD_GetString>
  return USBD_StrDesc;
 800e246:	4b02      	ldr	r3, [pc, #8]	; (800e250 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	200060d4 	.word	0x200060d4
 800e254:	0800f4e8 	.word	0x0800f4e8

0800e258 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	4603      	mov	r3, r0
 800e260:	6039      	str	r1, [r7, #0]
 800e262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	221a      	movs	r2, #26
 800e268:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e26a:	f000 f843 	bl	800e2f4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e26e:	4b02      	ldr	r3, [pc, #8]	; (800e278 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e270:	4618      	mov	r0, r3
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	200000e4 	.word	0x200000e4

0800e27c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	4603      	mov	r3, r0
 800e284:	6039      	str	r1, [r7, #0]
 800e286:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e288:	79fb      	ldrb	r3, [r7, #7]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d105      	bne.n	800e29a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	4907      	ldr	r1, [pc, #28]	; (800e2b0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e292:	4808      	ldr	r0, [pc, #32]	; (800e2b4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e294:	f7fc fdc4 	bl	800ae20 <USBD_GetString>
 800e298:	e004      	b.n	800e2a4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	4904      	ldr	r1, [pc, #16]	; (800e2b0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e29e:	4805      	ldr	r0, [pc, #20]	; (800e2b4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e2a0:	f7fc fdbe 	bl	800ae20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2a4:	4b02      	ldr	r3, [pc, #8]	; (800e2b0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	200060d4 	.word	0x200060d4
 800e2b4:	0800f4fc 	.word	0x0800f4fc

0800e2b8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	6039      	str	r1, [r7, #0]
 800e2c2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e2c4:	79fb      	ldrb	r3, [r7, #7]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d105      	bne.n	800e2d6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e2ca:	683a      	ldr	r2, [r7, #0]
 800e2cc:	4907      	ldr	r1, [pc, #28]	; (800e2ec <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e2ce:	4808      	ldr	r0, [pc, #32]	; (800e2f0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e2d0:	f7fc fda6 	bl	800ae20 <USBD_GetString>
 800e2d4:	e004      	b.n	800e2e0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e2d6:	683a      	ldr	r2, [r7, #0]
 800e2d8:	4904      	ldr	r1, [pc, #16]	; (800e2ec <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e2da:	4805      	ldr	r0, [pc, #20]	; (800e2f0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e2dc:	f7fc fda0 	bl	800ae20 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e2e0:	4b02      	ldr	r3, [pc, #8]	; (800e2ec <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3708      	adds	r7, #8
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop
 800e2ec:	200060d4 	.word	0x200060d4
 800e2f0:	0800f508 	.word	0x0800f508

0800e2f4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e2fa:	4b0f      	ldr	r3, [pc, #60]	; (800e338 <Get_SerialNum+0x44>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e300:	4b0e      	ldr	r3, [pc, #56]	; (800e33c <Get_SerialNum+0x48>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e306:	4b0e      	ldr	r3, [pc, #56]	; (800e340 <Get_SerialNum+0x4c>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e30c:	68fa      	ldr	r2, [r7, #12]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	4413      	add	r3, r2
 800e312:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d009      	beq.n	800e32e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e31a:	2208      	movs	r2, #8
 800e31c:	4909      	ldr	r1, [pc, #36]	; (800e344 <Get_SerialNum+0x50>)
 800e31e:	68f8      	ldr	r0, [r7, #12]
 800e320:	f000 f814 	bl	800e34c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e324:	2204      	movs	r2, #4
 800e326:	4908      	ldr	r1, [pc, #32]	; (800e348 <Get_SerialNum+0x54>)
 800e328:	68b8      	ldr	r0, [r7, #8]
 800e32a:	f000 f80f 	bl	800e34c <IntToUnicode>
  }
}
 800e32e:	bf00      	nop
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	1fff7a10 	.word	0x1fff7a10
 800e33c:	1fff7a14 	.word	0x1fff7a14
 800e340:	1fff7a18 	.word	0x1fff7a18
 800e344:	200000e6 	.word	0x200000e6
 800e348:	200000f6 	.word	0x200000f6

0800e34c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b087      	sub	sp, #28
 800e350:	af00      	add	r7, sp, #0
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	4613      	mov	r3, r2
 800e358:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e35a:	2300      	movs	r3, #0
 800e35c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e35e:	2300      	movs	r3, #0
 800e360:	75fb      	strb	r3, [r7, #23]
 800e362:	e027      	b.n	800e3b4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	0f1b      	lsrs	r3, r3, #28
 800e368:	2b09      	cmp	r3, #9
 800e36a:	d80b      	bhi.n	800e384 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	0f1b      	lsrs	r3, r3, #28
 800e370:	b2da      	uxtb	r2, r3
 800e372:	7dfb      	ldrb	r3, [r7, #23]
 800e374:	005b      	lsls	r3, r3, #1
 800e376:	4619      	mov	r1, r3
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	440b      	add	r3, r1
 800e37c:	3230      	adds	r2, #48	; 0x30
 800e37e:	b2d2      	uxtb	r2, r2
 800e380:	701a      	strb	r2, [r3, #0]
 800e382:	e00a      	b.n	800e39a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	0f1b      	lsrs	r3, r3, #28
 800e388:	b2da      	uxtb	r2, r3
 800e38a:	7dfb      	ldrb	r3, [r7, #23]
 800e38c:	005b      	lsls	r3, r3, #1
 800e38e:	4619      	mov	r1, r3
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	440b      	add	r3, r1
 800e394:	3237      	adds	r2, #55	; 0x37
 800e396:	b2d2      	uxtb	r2, r2
 800e398:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	011b      	lsls	r3, r3, #4
 800e39e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	005b      	lsls	r3, r3, #1
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e3ae:	7dfb      	ldrb	r3, [r7, #23]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	75fb      	strb	r3, [r7, #23]
 800e3b4:	7dfa      	ldrb	r2, [r7, #23]
 800e3b6:	79fb      	ldrb	r3, [r7, #7]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d3d3      	bcc.n	800e364 <IntToUnicode+0x18>
  }
}
 800e3bc:	bf00      	nop
 800e3be:	bf00      	nop
 800e3c0:	371c      	adds	r7, #28
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c8:	4770      	bx	lr
	...

0800e3cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b08a      	sub	sp, #40	; 0x28
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3d4:	f107 0314 	add.w	r3, r7, #20
 800e3d8:	2200      	movs	r2, #0
 800e3da:	601a      	str	r2, [r3, #0]
 800e3dc:	605a      	str	r2, [r3, #4]
 800e3de:	609a      	str	r2, [r3, #8]
 800e3e0:	60da      	str	r2, [r3, #12]
 800e3e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a1d      	ldr	r2, [pc, #116]	; (800e460 <HAL_PCD_MspInit+0x94>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d134      	bne.n	800e458 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	613b      	str	r3, [r7, #16]
 800e3f2:	4b1c      	ldr	r3, [pc, #112]	; (800e464 <HAL_PCD_MspInit+0x98>)
 800e3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3f6:	4a1b      	ldr	r2, [pc, #108]	; (800e464 <HAL_PCD_MspInit+0x98>)
 800e3f8:	f043 0302 	orr.w	r3, r3, #2
 800e3fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e3fe:	4b19      	ldr	r3, [pc, #100]	; (800e464 <HAL_PCD_MspInit+0x98>)
 800e400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e402:	f003 0302 	and.w	r3, r3, #2
 800e406:	613b      	str	r3, [r7, #16]
 800e408:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800e40a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800e40e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e410:	2302      	movs	r3, #2
 800e412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e414:	2300      	movs	r3, #0
 800e416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e418:	2303      	movs	r3, #3
 800e41a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e41c:	230c      	movs	r3, #12
 800e41e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e420:	f107 0314 	add.w	r3, r7, #20
 800e424:	4619      	mov	r1, r3
 800e426:	4810      	ldr	r0, [pc, #64]	; (800e468 <HAL_PCD_MspInit+0x9c>)
 800e428:	f7f3 fe24 	bl	8002074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e42c:	2300      	movs	r3, #0
 800e42e:	60fb      	str	r3, [r7, #12]
 800e430:	4b0c      	ldr	r3, [pc, #48]	; (800e464 <HAL_PCD_MspInit+0x98>)
 800e432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e434:	4a0b      	ldr	r2, [pc, #44]	; (800e464 <HAL_PCD_MspInit+0x98>)
 800e436:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e43a:	6313      	str	r3, [r2, #48]	; 0x30
 800e43c:	4b09      	ldr	r3, [pc, #36]	; (800e464 <HAL_PCD_MspInit+0x98>)
 800e43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e444:	60fb      	str	r3, [r7, #12]
 800e446:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e448:	2200      	movs	r2, #0
 800e44a:	2105      	movs	r1, #5
 800e44c:	204d      	movs	r0, #77	; 0x4d
 800e44e:	f7f3 fd2c 	bl	8001eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e452:	204d      	movs	r0, #77	; 0x4d
 800e454:	f7f3 fd45 	bl	8001ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e458:	bf00      	nop
 800e45a:	3728      	adds	r7, #40	; 0x28
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	40040000 	.word	0x40040000
 800e464:	40023800 	.word	0x40023800
 800e468:	40020400 	.word	0x40020400

0800e46c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e480:	4619      	mov	r1, r3
 800e482:	4610      	mov	r0, r2
 800e484:	f7fb fb6d 	bl	8009b62 <USBD_LL_SetupStage>
}
 800e488:	bf00      	nop
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e4a2:	78fa      	ldrb	r2, [r7, #3]
 800e4a4:	6879      	ldr	r1, [r7, #4]
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	00db      	lsls	r3, r3, #3
 800e4aa:	4413      	add	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	440b      	add	r3, r1
 800e4b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	78fb      	ldrb	r3, [r7, #3]
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	f7fb fba7 	bl	8009c0c <USBD_LL_DataOutStage>
}
 800e4be:	bf00      	nop
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b082      	sub	sp, #8
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e4d8:	78fa      	ldrb	r2, [r7, #3]
 800e4da:	6879      	ldr	r1, [r7, #4]
 800e4dc:	4613      	mov	r3, r2
 800e4de:	00db      	lsls	r3, r3, #3
 800e4e0:	4413      	add	r3, r2
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	440b      	add	r3, r1
 800e4e6:	334c      	adds	r3, #76	; 0x4c
 800e4e8:	681a      	ldr	r2, [r3, #0]
 800e4ea:	78fb      	ldrb	r3, [r7, #3]
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	f7fb fc40 	bl	8009d72 <USBD_LL_DataInStage>
}
 800e4f2:	bf00      	nop
 800e4f4:	3708      	adds	r7, #8
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}

0800e4fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4fa:	b580      	push	{r7, lr}
 800e4fc:	b082      	sub	sp, #8
 800e4fe:	af00      	add	r7, sp, #0
 800e500:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fb fd74 	bl	8009ff6 <USBD_LL_SOF>
}
 800e50e:	bf00      	nop
 800e510:	3708      	adds	r7, #8
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b084      	sub	sp, #16
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e51e:	2301      	movs	r3, #1
 800e520:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d102      	bne.n	800e530 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e52a:	2300      	movs	r3, #0
 800e52c:	73fb      	strb	r3, [r7, #15]
 800e52e:	e008      	b.n	800e542 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	68db      	ldr	r3, [r3, #12]
 800e534:	2b02      	cmp	r3, #2
 800e536:	d102      	bne.n	800e53e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e538:	2301      	movs	r3, #1
 800e53a:	73fb      	strb	r3, [r7, #15]
 800e53c:	e001      	b.n	800e542 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e53e:	f7f2 fcdf 	bl	8000f00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e548:	7bfa      	ldrb	r2, [r7, #15]
 800e54a:	4611      	mov	r1, r2
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7fb fd14 	bl	8009f7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fb fcbc 	bl	8009ed6 <USBD_LL_Reset>
}
 800e55e:	bf00      	nop
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
	...

0800e568 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e576:	4618      	mov	r0, r3
 800e578:	f7fb fd0f 	bl	8009f9a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	6812      	ldr	r2, [r2, #0]
 800e58a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e58e:	f043 0301 	orr.w	r3, r3, #1
 800e592:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6a1b      	ldr	r3, [r3, #32]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d005      	beq.n	800e5a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e59c:	4b04      	ldr	r3, [pc, #16]	; (800e5b0 <HAL_PCD_SuspendCallback+0x48>)
 800e59e:	691b      	ldr	r3, [r3, #16]
 800e5a0:	4a03      	ldr	r2, [pc, #12]	; (800e5b0 <HAL_PCD_SuspendCallback+0x48>)
 800e5a2:	f043 0306 	orr.w	r3, r3, #6
 800e5a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e5a8:	bf00      	nop
 800e5aa:	3708      	adds	r7, #8
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	e000ed00 	.word	0xe000ed00

0800e5b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7fb fcff 	bl	8009fc6 <USBD_LL_Resume>
}
 800e5c8:	bf00      	nop
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b082      	sub	sp, #8
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
 800e5d8:	460b      	mov	r3, r1
 800e5da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e5e2:	78fa      	ldrb	r2, [r7, #3]
 800e5e4:	4611      	mov	r1, r2
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fb fd57 	bl	800a09a <USBD_LL_IsoOUTIncomplete>
}
 800e5ec:	bf00      	nop
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e606:	78fa      	ldrb	r2, [r7, #3]
 800e608:	4611      	mov	r1, r2
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fb fd13 	bl	800a036 <USBD_LL_IsoINIncomplete>
}
 800e610:	bf00      	nop
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e626:	4618      	mov	r0, r3
 800e628:	f7fb fd69 	bl	800a0fe <USBD_LL_DevConnected>
}
 800e62c:	bf00      	nop
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e642:	4618      	mov	r0, r3
 800e644:	f7fb fd66 	bl	800a114 <USBD_LL_DevDisconnected>
}
 800e648:	bf00      	nop
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d140      	bne.n	800e6e2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800e660:	4a22      	ldr	r2, [pc, #136]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	4a20      	ldr	r2, [pc, #128]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e66c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e670:	4b1e      	ldr	r3, [pc, #120]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e672:	4a1f      	ldr	r2, [pc, #124]	; (800e6f0 <USBD_LL_Init+0xa0>)
 800e674:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800e676:	4b1d      	ldr	r3, [pc, #116]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e678:	2206      	movs	r2, #6
 800e67a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800e67c:	4b1b      	ldr	r3, [pc, #108]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e67e:	2202      	movs	r2, #2
 800e680:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e682:	4b1a      	ldr	r3, [pc, #104]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e684:	2200      	movs	r2, #0
 800e686:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e688:	4b18      	ldr	r3, [pc, #96]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e68a:	2202      	movs	r2, #2
 800e68c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e68e:	4b17      	ldr	r3, [pc, #92]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e690:	2200      	movs	r2, #0
 800e692:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e694:	4b15      	ldr	r3, [pc, #84]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e696:	2200      	movs	r2, #0
 800e698:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e69a:	4b14      	ldr	r3, [pc, #80]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e69c:	2200      	movs	r2, #0
 800e69e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e6a0:	4b12      	ldr	r3, [pc, #72]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e6a6:	4b11      	ldr	r3, [pc, #68]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e6ac:	4b0f      	ldr	r3, [pc, #60]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e6b2:	480e      	ldr	r0, [pc, #56]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e6b4:	f7f3 fff0 	bl	8002698 <HAL_PCD_Init>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e6be:	f7f2 fc1f 	bl	8000f00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e6c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e6c6:	4809      	ldr	r0, [pc, #36]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e6c8:	f7f5 fa47 	bl	8003b5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e6cc:	2280      	movs	r2, #128	; 0x80
 800e6ce:	2100      	movs	r1, #0
 800e6d0:	4806      	ldr	r0, [pc, #24]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e6d2:	f7f5 f9fb 	bl	8003acc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e6d6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800e6da:	2101      	movs	r1, #1
 800e6dc:	4803      	ldr	r0, [pc, #12]	; (800e6ec <USBD_LL_Init+0x9c>)
 800e6de:	f7f5 f9f5 	bl	8003acc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e6e2:	2300      	movs	r3, #0
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3708      	adds	r7, #8
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}
 800e6ec:	200062d4 	.word	0x200062d4
 800e6f0:	40040000 	.word	0x40040000

0800e6f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7f4 f8e1 	bl	80028d2 <HAL_PCD_Start>
 800e710:	4603      	mov	r3, r0
 800e712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e714:	7bfb      	ldrb	r3, [r7, #15]
 800e716:	4618      	mov	r0, r3
 800e718:	f000 f942 	bl	800e9a0 <USBD_Get_USB_Status>
 800e71c:	4603      	mov	r3, r0
 800e71e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e720:	7bbb      	ldrb	r3, [r7, #14]
}
 800e722:	4618      	mov	r0, r3
 800e724:	3710      	adds	r7, #16
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}

0800e72a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e72a:	b580      	push	{r7, lr}
 800e72c:	b084      	sub	sp, #16
 800e72e:	af00      	add	r7, sp, #0
 800e730:	6078      	str	r0, [r7, #4]
 800e732:	4608      	mov	r0, r1
 800e734:	4611      	mov	r1, r2
 800e736:	461a      	mov	r2, r3
 800e738:	4603      	mov	r3, r0
 800e73a:	70fb      	strb	r3, [r7, #3]
 800e73c:	460b      	mov	r3, r1
 800e73e:	70bb      	strb	r3, [r7, #2]
 800e740:	4613      	mov	r3, r2
 800e742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e744:	2300      	movs	r3, #0
 800e746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e748:	2300      	movs	r3, #0
 800e74a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e752:	78bb      	ldrb	r3, [r7, #2]
 800e754:	883a      	ldrh	r2, [r7, #0]
 800e756:	78f9      	ldrb	r1, [r7, #3]
 800e758:	f7f4 fdb2 	bl	80032c0 <HAL_PCD_EP_Open>
 800e75c:	4603      	mov	r3, r0
 800e75e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e760:	7bfb      	ldrb	r3, [r7, #15]
 800e762:	4618      	mov	r0, r3
 800e764:	f000 f91c 	bl	800e9a0 <USBD_Get_USB_Status>
 800e768:	4603      	mov	r3, r0
 800e76a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e76c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3710      	adds	r7, #16
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e776:	b580      	push	{r7, lr}
 800e778:	b084      	sub	sp, #16
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
 800e77e:	460b      	mov	r3, r1
 800e780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e782:	2300      	movs	r3, #0
 800e784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e790:	78fa      	ldrb	r2, [r7, #3]
 800e792:	4611      	mov	r1, r2
 800e794:	4618      	mov	r0, r3
 800e796:	f7f4 fdfb 	bl	8003390 <HAL_PCD_EP_Close>
 800e79a:	4603      	mov	r3, r0
 800e79c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e79e:	7bfb      	ldrb	r3, [r7, #15]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 f8fd 	bl	800e9a0 <USBD_Get_USB_Status>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3710      	adds	r7, #16
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e7ce:	78fa      	ldrb	r2, [r7, #3]
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7f4 fed3 	bl	800357e <HAL_PCD_EP_SetStall>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f000 f8de 	bl	800e9a0 <USBD_Get_USB_Status>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b084      	sub	sp, #16
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e802:	2300      	movs	r3, #0
 800e804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e80c:	78fa      	ldrb	r2, [r7, #3]
 800e80e:	4611      	mov	r1, r2
 800e810:	4618      	mov	r0, r3
 800e812:	f7f4 ff18 	bl	8003646 <HAL_PCD_EP_ClrStall>
 800e816:	4603      	mov	r3, r0
 800e818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e81a:	7bfb      	ldrb	r3, [r7, #15]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f000 f8bf 	bl	800e9a0 <USBD_Get_USB_Status>
 800e822:	4603      	mov	r3, r0
 800e824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e826:	7bbb      	ldrb	r3, [r7, #14]
}
 800e828:	4618      	mov	r0, r3
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e830:	b480      	push	{r7}
 800e832:	b085      	sub	sp, #20
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	460b      	mov	r3, r1
 800e83a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e842:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	da0b      	bge.n	800e864 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e84c:	78fb      	ldrb	r3, [r7, #3]
 800e84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e852:	68f9      	ldr	r1, [r7, #12]
 800e854:	4613      	mov	r3, r2
 800e856:	00db      	lsls	r3, r3, #3
 800e858:	4413      	add	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	440b      	add	r3, r1
 800e85e:	333e      	adds	r3, #62	; 0x3e
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	e00b      	b.n	800e87c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e864:	78fb      	ldrb	r3, [r7, #3]
 800e866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e86a:	68f9      	ldr	r1, [r7, #12]
 800e86c:	4613      	mov	r3, r2
 800e86e:	00db      	lsls	r3, r3, #3
 800e870:	4413      	add	r3, r2
 800e872:	009b      	lsls	r3, r3, #2
 800e874:	440b      	add	r3, r1
 800e876:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e87a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3714      	adds	r7, #20
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e898:	2300      	movs	r3, #0
 800e89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e8a2:	78fa      	ldrb	r2, [r7, #3]
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7f4 fce5 	bl	8003276 <HAL_PCD_SetAddress>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8b0:	7bfb      	ldrb	r3, [r7, #15]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f000 f874 	bl	800e9a0 <USBD_Get_USB_Status>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3710      	adds	r7, #16
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	bd80      	pop	{r7, pc}

0800e8c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e8c6:	b580      	push	{r7, lr}
 800e8c8:	b086      	sub	sp, #24
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	60f8      	str	r0, [r7, #12]
 800e8ce:	607a      	str	r2, [r7, #4]
 800e8d0:	603b      	str	r3, [r7, #0]
 800e8d2:	460b      	mov	r3, r1
 800e8d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8da:	2300      	movs	r3, #0
 800e8dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e8e4:	7af9      	ldrb	r1, [r7, #11]
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	687a      	ldr	r2, [r7, #4]
 800e8ea:	f7f4 fdfe 	bl	80034ea <HAL_PCD_EP_Transmit>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e8f2:	7dfb      	ldrb	r3, [r7, #23]
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f000 f853 	bl	800e9a0 <USBD_Get_USB_Status>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e8fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800e900:	4618      	mov	r0, r3
 800e902:	3718      	adds	r7, #24
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b086      	sub	sp, #24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	607a      	str	r2, [r7, #4]
 800e912:	603b      	str	r3, [r7, #0]
 800e914:	460b      	mov	r3, r1
 800e916:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e918:	2300      	movs	r3, #0
 800e91a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e91c:	2300      	movs	r3, #0
 800e91e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e926:	7af9      	ldrb	r1, [r7, #11]
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	f7f4 fd7a 	bl	8003424 <HAL_PCD_EP_Receive>
 800e930:	4603      	mov	r3, r0
 800e932:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e934:	7dfb      	ldrb	r3, [r7, #23]
 800e936:	4618      	mov	r0, r3
 800e938:	f000 f832 	bl	800e9a0 <USBD_Get_USB_Status>
 800e93c:	4603      	mov	r3, r0
 800e93e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e940:	7dbb      	ldrb	r3, [r7, #22]
}
 800e942:	4618      	mov	r0, r3
 800e944:	3718      	adds	r7, #24
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b082      	sub	sp, #8
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
 800e952:	460b      	mov	r3, r1
 800e954:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e95c:	78fa      	ldrb	r2, [r7, #3]
 800e95e:	4611      	mov	r1, r2
 800e960:	4618      	mov	r0, r3
 800e962:	f7f4 fdaa 	bl	80034ba <HAL_PCD_EP_GetRxCount>
 800e966:	4603      	mov	r3, r0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3708      	adds	r7, #8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e978:	4b03      	ldr	r3, [pc, #12]	; (800e988 <USBD_static_malloc+0x18>)
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	370c      	adds	r7, #12
 800e97e:	46bd      	mov	sp, r7
 800e980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	200067e0 	.word	0x200067e0

0800e98c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]

}
 800e994:	bf00      	nop
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e9ae:	79fb      	ldrb	r3, [r7, #7]
 800e9b0:	2b03      	cmp	r3, #3
 800e9b2:	d817      	bhi.n	800e9e4 <USBD_Get_USB_Status+0x44>
 800e9b4:	a201      	add	r2, pc, #4	; (adr r2, 800e9bc <USBD_Get_USB_Status+0x1c>)
 800e9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ba:	bf00      	nop
 800e9bc:	0800e9cd 	.word	0x0800e9cd
 800e9c0:	0800e9d3 	.word	0x0800e9d3
 800e9c4:	0800e9d9 	.word	0x0800e9d9
 800e9c8:	0800e9df 	.word	0x0800e9df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e9d0:	e00b      	b.n	800e9ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e9d2:	2303      	movs	r3, #3
 800e9d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e9d6:	e008      	b.n	800e9ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	73fb      	strb	r3, [r7, #15]
    break;
 800e9dc:	e005      	b.n	800e9ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e9de:	2303      	movs	r3, #3
 800e9e0:	73fb      	strb	r3, [r7, #15]
    break;
 800e9e2:	e002      	b.n	800e9ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e9e4:	2303      	movs	r3, #3
 800e9e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e9e8:	bf00      	nop
  }
  return usb_status;
 800e9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3714      	adds	r7, #20
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <__errno>:
 800e9f8:	4b01      	ldr	r3, [pc, #4]	; (800ea00 <__errno+0x8>)
 800e9fa:	6818      	ldr	r0, [r3, #0]
 800e9fc:	4770      	bx	lr
 800e9fe:	bf00      	nop
 800ea00:	20000100 	.word	0x20000100

0800ea04 <__libc_init_array>:
 800ea04:	b570      	push	{r4, r5, r6, lr}
 800ea06:	4d0d      	ldr	r5, [pc, #52]	; (800ea3c <__libc_init_array+0x38>)
 800ea08:	4c0d      	ldr	r4, [pc, #52]	; (800ea40 <__libc_init_array+0x3c>)
 800ea0a:	1b64      	subs	r4, r4, r5
 800ea0c:	10a4      	asrs	r4, r4, #2
 800ea0e:	2600      	movs	r6, #0
 800ea10:	42a6      	cmp	r6, r4
 800ea12:	d109      	bne.n	800ea28 <__libc_init_array+0x24>
 800ea14:	4d0b      	ldr	r5, [pc, #44]	; (800ea44 <__libc_init_array+0x40>)
 800ea16:	4c0c      	ldr	r4, [pc, #48]	; (800ea48 <__libc_init_array+0x44>)
 800ea18:	f000 fd2c 	bl	800f474 <_init>
 800ea1c:	1b64      	subs	r4, r4, r5
 800ea1e:	10a4      	asrs	r4, r4, #2
 800ea20:	2600      	movs	r6, #0
 800ea22:	42a6      	cmp	r6, r4
 800ea24:	d105      	bne.n	800ea32 <__libc_init_array+0x2e>
 800ea26:	bd70      	pop	{r4, r5, r6, pc}
 800ea28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea2c:	4798      	blx	r3
 800ea2e:	3601      	adds	r6, #1
 800ea30:	e7ee      	b.n	800ea10 <__libc_init_array+0xc>
 800ea32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea36:	4798      	blx	r3
 800ea38:	3601      	adds	r6, #1
 800ea3a:	e7f2      	b.n	800ea22 <__libc_init_array+0x1e>
 800ea3c:	0800f5d4 	.word	0x0800f5d4
 800ea40:	0800f5d4 	.word	0x0800f5d4
 800ea44:	0800f5d4 	.word	0x0800f5d4
 800ea48:	0800f5d8 	.word	0x0800f5d8

0800ea4c <memcpy>:
 800ea4c:	440a      	add	r2, r1
 800ea4e:	4291      	cmp	r1, r2
 800ea50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea54:	d100      	bne.n	800ea58 <memcpy+0xc>
 800ea56:	4770      	bx	lr
 800ea58:	b510      	push	{r4, lr}
 800ea5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea62:	4291      	cmp	r1, r2
 800ea64:	d1f9      	bne.n	800ea5a <memcpy+0xe>
 800ea66:	bd10      	pop	{r4, pc}

0800ea68 <memset>:
 800ea68:	4402      	add	r2, r0
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d100      	bne.n	800ea72 <memset+0xa>
 800ea70:	4770      	bx	lr
 800ea72:	f803 1b01 	strb.w	r1, [r3], #1
 800ea76:	e7f9      	b.n	800ea6c <memset+0x4>

0800ea78 <_puts_r>:
 800ea78:	b570      	push	{r4, r5, r6, lr}
 800ea7a:	460e      	mov	r6, r1
 800ea7c:	4605      	mov	r5, r0
 800ea7e:	b118      	cbz	r0, 800ea88 <_puts_r+0x10>
 800ea80:	6983      	ldr	r3, [r0, #24]
 800ea82:	b90b      	cbnz	r3, 800ea88 <_puts_r+0x10>
 800ea84:	f000 fa48 	bl	800ef18 <__sinit>
 800ea88:	69ab      	ldr	r3, [r5, #24]
 800ea8a:	68ac      	ldr	r4, [r5, #8]
 800ea8c:	b913      	cbnz	r3, 800ea94 <_puts_r+0x1c>
 800ea8e:	4628      	mov	r0, r5
 800ea90:	f000 fa42 	bl	800ef18 <__sinit>
 800ea94:	4b2c      	ldr	r3, [pc, #176]	; (800eb48 <_puts_r+0xd0>)
 800ea96:	429c      	cmp	r4, r3
 800ea98:	d120      	bne.n	800eadc <_puts_r+0x64>
 800ea9a:	686c      	ldr	r4, [r5, #4]
 800ea9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea9e:	07db      	lsls	r3, r3, #31
 800eaa0:	d405      	bmi.n	800eaae <_puts_r+0x36>
 800eaa2:	89a3      	ldrh	r3, [r4, #12]
 800eaa4:	0598      	lsls	r0, r3, #22
 800eaa6:	d402      	bmi.n	800eaae <_puts_r+0x36>
 800eaa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaaa:	f000 fad3 	bl	800f054 <__retarget_lock_acquire_recursive>
 800eaae:	89a3      	ldrh	r3, [r4, #12]
 800eab0:	0719      	lsls	r1, r3, #28
 800eab2:	d51d      	bpl.n	800eaf0 <_puts_r+0x78>
 800eab4:	6923      	ldr	r3, [r4, #16]
 800eab6:	b1db      	cbz	r3, 800eaf0 <_puts_r+0x78>
 800eab8:	3e01      	subs	r6, #1
 800eaba:	68a3      	ldr	r3, [r4, #8]
 800eabc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eac0:	3b01      	subs	r3, #1
 800eac2:	60a3      	str	r3, [r4, #8]
 800eac4:	bb39      	cbnz	r1, 800eb16 <_puts_r+0x9e>
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	da38      	bge.n	800eb3c <_puts_r+0xc4>
 800eaca:	4622      	mov	r2, r4
 800eacc:	210a      	movs	r1, #10
 800eace:	4628      	mov	r0, r5
 800ead0:	f000 f848 	bl	800eb64 <__swbuf_r>
 800ead4:	3001      	adds	r0, #1
 800ead6:	d011      	beq.n	800eafc <_puts_r+0x84>
 800ead8:	250a      	movs	r5, #10
 800eada:	e011      	b.n	800eb00 <_puts_r+0x88>
 800eadc:	4b1b      	ldr	r3, [pc, #108]	; (800eb4c <_puts_r+0xd4>)
 800eade:	429c      	cmp	r4, r3
 800eae0:	d101      	bne.n	800eae6 <_puts_r+0x6e>
 800eae2:	68ac      	ldr	r4, [r5, #8]
 800eae4:	e7da      	b.n	800ea9c <_puts_r+0x24>
 800eae6:	4b1a      	ldr	r3, [pc, #104]	; (800eb50 <_puts_r+0xd8>)
 800eae8:	429c      	cmp	r4, r3
 800eaea:	bf08      	it	eq
 800eaec:	68ec      	ldreq	r4, [r5, #12]
 800eaee:	e7d5      	b.n	800ea9c <_puts_r+0x24>
 800eaf0:	4621      	mov	r1, r4
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f000 f888 	bl	800ec08 <__swsetup_r>
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	d0dd      	beq.n	800eab8 <_puts_r+0x40>
 800eafc:	f04f 35ff 	mov.w	r5, #4294967295
 800eb00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb02:	07da      	lsls	r2, r3, #31
 800eb04:	d405      	bmi.n	800eb12 <_puts_r+0x9a>
 800eb06:	89a3      	ldrh	r3, [r4, #12]
 800eb08:	059b      	lsls	r3, r3, #22
 800eb0a:	d402      	bmi.n	800eb12 <_puts_r+0x9a>
 800eb0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb0e:	f000 faa2 	bl	800f056 <__retarget_lock_release_recursive>
 800eb12:	4628      	mov	r0, r5
 800eb14:	bd70      	pop	{r4, r5, r6, pc}
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	da04      	bge.n	800eb24 <_puts_r+0xac>
 800eb1a:	69a2      	ldr	r2, [r4, #24]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	dc06      	bgt.n	800eb2e <_puts_r+0xb6>
 800eb20:	290a      	cmp	r1, #10
 800eb22:	d004      	beq.n	800eb2e <_puts_r+0xb6>
 800eb24:	6823      	ldr	r3, [r4, #0]
 800eb26:	1c5a      	adds	r2, r3, #1
 800eb28:	6022      	str	r2, [r4, #0]
 800eb2a:	7019      	strb	r1, [r3, #0]
 800eb2c:	e7c5      	b.n	800eaba <_puts_r+0x42>
 800eb2e:	4622      	mov	r2, r4
 800eb30:	4628      	mov	r0, r5
 800eb32:	f000 f817 	bl	800eb64 <__swbuf_r>
 800eb36:	3001      	adds	r0, #1
 800eb38:	d1bf      	bne.n	800eaba <_puts_r+0x42>
 800eb3a:	e7df      	b.n	800eafc <_puts_r+0x84>
 800eb3c:	6823      	ldr	r3, [r4, #0]
 800eb3e:	250a      	movs	r5, #10
 800eb40:	1c5a      	adds	r2, r3, #1
 800eb42:	6022      	str	r2, [r4, #0]
 800eb44:	701d      	strb	r5, [r3, #0]
 800eb46:	e7db      	b.n	800eb00 <_puts_r+0x88>
 800eb48:	0800f58c 	.word	0x0800f58c
 800eb4c:	0800f5ac 	.word	0x0800f5ac
 800eb50:	0800f56c 	.word	0x0800f56c

0800eb54 <puts>:
 800eb54:	4b02      	ldr	r3, [pc, #8]	; (800eb60 <puts+0xc>)
 800eb56:	4601      	mov	r1, r0
 800eb58:	6818      	ldr	r0, [r3, #0]
 800eb5a:	f7ff bf8d 	b.w	800ea78 <_puts_r>
 800eb5e:	bf00      	nop
 800eb60:	20000100 	.word	0x20000100

0800eb64 <__swbuf_r>:
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	460e      	mov	r6, r1
 800eb68:	4614      	mov	r4, r2
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	b118      	cbz	r0, 800eb76 <__swbuf_r+0x12>
 800eb6e:	6983      	ldr	r3, [r0, #24]
 800eb70:	b90b      	cbnz	r3, 800eb76 <__swbuf_r+0x12>
 800eb72:	f000 f9d1 	bl	800ef18 <__sinit>
 800eb76:	4b21      	ldr	r3, [pc, #132]	; (800ebfc <__swbuf_r+0x98>)
 800eb78:	429c      	cmp	r4, r3
 800eb7a:	d12b      	bne.n	800ebd4 <__swbuf_r+0x70>
 800eb7c:	686c      	ldr	r4, [r5, #4]
 800eb7e:	69a3      	ldr	r3, [r4, #24]
 800eb80:	60a3      	str	r3, [r4, #8]
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	071a      	lsls	r2, r3, #28
 800eb86:	d52f      	bpl.n	800ebe8 <__swbuf_r+0x84>
 800eb88:	6923      	ldr	r3, [r4, #16]
 800eb8a:	b36b      	cbz	r3, 800ebe8 <__swbuf_r+0x84>
 800eb8c:	6923      	ldr	r3, [r4, #16]
 800eb8e:	6820      	ldr	r0, [r4, #0]
 800eb90:	1ac0      	subs	r0, r0, r3
 800eb92:	6963      	ldr	r3, [r4, #20]
 800eb94:	b2f6      	uxtb	r6, r6
 800eb96:	4283      	cmp	r3, r0
 800eb98:	4637      	mov	r7, r6
 800eb9a:	dc04      	bgt.n	800eba6 <__swbuf_r+0x42>
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f000 f926 	bl	800edf0 <_fflush_r>
 800eba4:	bb30      	cbnz	r0, 800ebf4 <__swbuf_r+0x90>
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	60a3      	str	r3, [r4, #8]
 800ebac:	6823      	ldr	r3, [r4, #0]
 800ebae:	1c5a      	adds	r2, r3, #1
 800ebb0:	6022      	str	r2, [r4, #0]
 800ebb2:	701e      	strb	r6, [r3, #0]
 800ebb4:	6963      	ldr	r3, [r4, #20]
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	4283      	cmp	r3, r0
 800ebba:	d004      	beq.n	800ebc6 <__swbuf_r+0x62>
 800ebbc:	89a3      	ldrh	r3, [r4, #12]
 800ebbe:	07db      	lsls	r3, r3, #31
 800ebc0:	d506      	bpl.n	800ebd0 <__swbuf_r+0x6c>
 800ebc2:	2e0a      	cmp	r6, #10
 800ebc4:	d104      	bne.n	800ebd0 <__swbuf_r+0x6c>
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f000 f911 	bl	800edf0 <_fflush_r>
 800ebce:	b988      	cbnz	r0, 800ebf4 <__swbuf_r+0x90>
 800ebd0:	4638      	mov	r0, r7
 800ebd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebd4:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <__swbuf_r+0x9c>)
 800ebd6:	429c      	cmp	r4, r3
 800ebd8:	d101      	bne.n	800ebde <__swbuf_r+0x7a>
 800ebda:	68ac      	ldr	r4, [r5, #8]
 800ebdc:	e7cf      	b.n	800eb7e <__swbuf_r+0x1a>
 800ebde:	4b09      	ldr	r3, [pc, #36]	; (800ec04 <__swbuf_r+0xa0>)
 800ebe0:	429c      	cmp	r4, r3
 800ebe2:	bf08      	it	eq
 800ebe4:	68ec      	ldreq	r4, [r5, #12]
 800ebe6:	e7ca      	b.n	800eb7e <__swbuf_r+0x1a>
 800ebe8:	4621      	mov	r1, r4
 800ebea:	4628      	mov	r0, r5
 800ebec:	f000 f80c 	bl	800ec08 <__swsetup_r>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d0cb      	beq.n	800eb8c <__swbuf_r+0x28>
 800ebf4:	f04f 37ff 	mov.w	r7, #4294967295
 800ebf8:	e7ea      	b.n	800ebd0 <__swbuf_r+0x6c>
 800ebfa:	bf00      	nop
 800ebfc:	0800f58c 	.word	0x0800f58c
 800ec00:	0800f5ac 	.word	0x0800f5ac
 800ec04:	0800f56c 	.word	0x0800f56c

0800ec08 <__swsetup_r>:
 800ec08:	4b32      	ldr	r3, [pc, #200]	; (800ecd4 <__swsetup_r+0xcc>)
 800ec0a:	b570      	push	{r4, r5, r6, lr}
 800ec0c:	681d      	ldr	r5, [r3, #0]
 800ec0e:	4606      	mov	r6, r0
 800ec10:	460c      	mov	r4, r1
 800ec12:	b125      	cbz	r5, 800ec1e <__swsetup_r+0x16>
 800ec14:	69ab      	ldr	r3, [r5, #24]
 800ec16:	b913      	cbnz	r3, 800ec1e <__swsetup_r+0x16>
 800ec18:	4628      	mov	r0, r5
 800ec1a:	f000 f97d 	bl	800ef18 <__sinit>
 800ec1e:	4b2e      	ldr	r3, [pc, #184]	; (800ecd8 <__swsetup_r+0xd0>)
 800ec20:	429c      	cmp	r4, r3
 800ec22:	d10f      	bne.n	800ec44 <__swsetup_r+0x3c>
 800ec24:	686c      	ldr	r4, [r5, #4]
 800ec26:	89a3      	ldrh	r3, [r4, #12]
 800ec28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec2c:	0719      	lsls	r1, r3, #28
 800ec2e:	d42c      	bmi.n	800ec8a <__swsetup_r+0x82>
 800ec30:	06dd      	lsls	r5, r3, #27
 800ec32:	d411      	bmi.n	800ec58 <__swsetup_r+0x50>
 800ec34:	2309      	movs	r3, #9
 800ec36:	6033      	str	r3, [r6, #0]
 800ec38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec3c:	81a3      	strh	r3, [r4, #12]
 800ec3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec42:	e03e      	b.n	800ecc2 <__swsetup_r+0xba>
 800ec44:	4b25      	ldr	r3, [pc, #148]	; (800ecdc <__swsetup_r+0xd4>)
 800ec46:	429c      	cmp	r4, r3
 800ec48:	d101      	bne.n	800ec4e <__swsetup_r+0x46>
 800ec4a:	68ac      	ldr	r4, [r5, #8]
 800ec4c:	e7eb      	b.n	800ec26 <__swsetup_r+0x1e>
 800ec4e:	4b24      	ldr	r3, [pc, #144]	; (800ece0 <__swsetup_r+0xd8>)
 800ec50:	429c      	cmp	r4, r3
 800ec52:	bf08      	it	eq
 800ec54:	68ec      	ldreq	r4, [r5, #12]
 800ec56:	e7e6      	b.n	800ec26 <__swsetup_r+0x1e>
 800ec58:	0758      	lsls	r0, r3, #29
 800ec5a:	d512      	bpl.n	800ec82 <__swsetup_r+0x7a>
 800ec5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec5e:	b141      	cbz	r1, 800ec72 <__swsetup_r+0x6a>
 800ec60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec64:	4299      	cmp	r1, r3
 800ec66:	d002      	beq.n	800ec6e <__swsetup_r+0x66>
 800ec68:	4630      	mov	r0, r6
 800ec6a:	f000 fa5b 	bl	800f124 <_free_r>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	6363      	str	r3, [r4, #52]	; 0x34
 800ec72:	89a3      	ldrh	r3, [r4, #12]
 800ec74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec78:	81a3      	strh	r3, [r4, #12]
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	6063      	str	r3, [r4, #4]
 800ec7e:	6923      	ldr	r3, [r4, #16]
 800ec80:	6023      	str	r3, [r4, #0]
 800ec82:	89a3      	ldrh	r3, [r4, #12]
 800ec84:	f043 0308 	orr.w	r3, r3, #8
 800ec88:	81a3      	strh	r3, [r4, #12]
 800ec8a:	6923      	ldr	r3, [r4, #16]
 800ec8c:	b94b      	cbnz	r3, 800eca2 <__swsetup_r+0x9a>
 800ec8e:	89a3      	ldrh	r3, [r4, #12]
 800ec90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ec94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec98:	d003      	beq.n	800eca2 <__swsetup_r+0x9a>
 800ec9a:	4621      	mov	r1, r4
 800ec9c:	4630      	mov	r0, r6
 800ec9e:	f000 fa01 	bl	800f0a4 <__smakebuf_r>
 800eca2:	89a0      	ldrh	r0, [r4, #12]
 800eca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eca8:	f010 0301 	ands.w	r3, r0, #1
 800ecac:	d00a      	beq.n	800ecc4 <__swsetup_r+0xbc>
 800ecae:	2300      	movs	r3, #0
 800ecb0:	60a3      	str	r3, [r4, #8]
 800ecb2:	6963      	ldr	r3, [r4, #20]
 800ecb4:	425b      	negs	r3, r3
 800ecb6:	61a3      	str	r3, [r4, #24]
 800ecb8:	6923      	ldr	r3, [r4, #16]
 800ecba:	b943      	cbnz	r3, 800ecce <__swsetup_r+0xc6>
 800ecbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ecc0:	d1ba      	bne.n	800ec38 <__swsetup_r+0x30>
 800ecc2:	bd70      	pop	{r4, r5, r6, pc}
 800ecc4:	0781      	lsls	r1, r0, #30
 800ecc6:	bf58      	it	pl
 800ecc8:	6963      	ldrpl	r3, [r4, #20]
 800ecca:	60a3      	str	r3, [r4, #8]
 800eccc:	e7f4      	b.n	800ecb8 <__swsetup_r+0xb0>
 800ecce:	2000      	movs	r0, #0
 800ecd0:	e7f7      	b.n	800ecc2 <__swsetup_r+0xba>
 800ecd2:	bf00      	nop
 800ecd4:	20000100 	.word	0x20000100
 800ecd8:	0800f58c 	.word	0x0800f58c
 800ecdc:	0800f5ac 	.word	0x0800f5ac
 800ece0:	0800f56c 	.word	0x0800f56c

0800ece4 <__sflush_r>:
 800ece4:	898a      	ldrh	r2, [r1, #12]
 800ece6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecea:	4605      	mov	r5, r0
 800ecec:	0710      	lsls	r0, r2, #28
 800ecee:	460c      	mov	r4, r1
 800ecf0:	d458      	bmi.n	800eda4 <__sflush_r+0xc0>
 800ecf2:	684b      	ldr	r3, [r1, #4]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	dc05      	bgt.n	800ed04 <__sflush_r+0x20>
 800ecf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	dc02      	bgt.n	800ed04 <__sflush_r+0x20>
 800ecfe:	2000      	movs	r0, #0
 800ed00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed06:	2e00      	cmp	r6, #0
 800ed08:	d0f9      	beq.n	800ecfe <__sflush_r+0x1a>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed10:	682f      	ldr	r7, [r5, #0]
 800ed12:	602b      	str	r3, [r5, #0]
 800ed14:	d032      	beq.n	800ed7c <__sflush_r+0x98>
 800ed16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed18:	89a3      	ldrh	r3, [r4, #12]
 800ed1a:	075a      	lsls	r2, r3, #29
 800ed1c:	d505      	bpl.n	800ed2a <__sflush_r+0x46>
 800ed1e:	6863      	ldr	r3, [r4, #4]
 800ed20:	1ac0      	subs	r0, r0, r3
 800ed22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed24:	b10b      	cbz	r3, 800ed2a <__sflush_r+0x46>
 800ed26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed28:	1ac0      	subs	r0, r0, r3
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	4602      	mov	r2, r0
 800ed2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed30:	6a21      	ldr	r1, [r4, #32]
 800ed32:	4628      	mov	r0, r5
 800ed34:	47b0      	blx	r6
 800ed36:	1c43      	adds	r3, r0, #1
 800ed38:	89a3      	ldrh	r3, [r4, #12]
 800ed3a:	d106      	bne.n	800ed4a <__sflush_r+0x66>
 800ed3c:	6829      	ldr	r1, [r5, #0]
 800ed3e:	291d      	cmp	r1, #29
 800ed40:	d82c      	bhi.n	800ed9c <__sflush_r+0xb8>
 800ed42:	4a2a      	ldr	r2, [pc, #168]	; (800edec <__sflush_r+0x108>)
 800ed44:	40ca      	lsrs	r2, r1
 800ed46:	07d6      	lsls	r6, r2, #31
 800ed48:	d528      	bpl.n	800ed9c <__sflush_r+0xb8>
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	6062      	str	r2, [r4, #4]
 800ed4e:	04d9      	lsls	r1, r3, #19
 800ed50:	6922      	ldr	r2, [r4, #16]
 800ed52:	6022      	str	r2, [r4, #0]
 800ed54:	d504      	bpl.n	800ed60 <__sflush_r+0x7c>
 800ed56:	1c42      	adds	r2, r0, #1
 800ed58:	d101      	bne.n	800ed5e <__sflush_r+0x7a>
 800ed5a:	682b      	ldr	r3, [r5, #0]
 800ed5c:	b903      	cbnz	r3, 800ed60 <__sflush_r+0x7c>
 800ed5e:	6560      	str	r0, [r4, #84]	; 0x54
 800ed60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed62:	602f      	str	r7, [r5, #0]
 800ed64:	2900      	cmp	r1, #0
 800ed66:	d0ca      	beq.n	800ecfe <__sflush_r+0x1a>
 800ed68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed6c:	4299      	cmp	r1, r3
 800ed6e:	d002      	beq.n	800ed76 <__sflush_r+0x92>
 800ed70:	4628      	mov	r0, r5
 800ed72:	f000 f9d7 	bl	800f124 <_free_r>
 800ed76:	2000      	movs	r0, #0
 800ed78:	6360      	str	r0, [r4, #52]	; 0x34
 800ed7a:	e7c1      	b.n	800ed00 <__sflush_r+0x1c>
 800ed7c:	6a21      	ldr	r1, [r4, #32]
 800ed7e:	2301      	movs	r3, #1
 800ed80:	4628      	mov	r0, r5
 800ed82:	47b0      	blx	r6
 800ed84:	1c41      	adds	r1, r0, #1
 800ed86:	d1c7      	bne.n	800ed18 <__sflush_r+0x34>
 800ed88:	682b      	ldr	r3, [r5, #0]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d0c4      	beq.n	800ed18 <__sflush_r+0x34>
 800ed8e:	2b1d      	cmp	r3, #29
 800ed90:	d001      	beq.n	800ed96 <__sflush_r+0xb2>
 800ed92:	2b16      	cmp	r3, #22
 800ed94:	d101      	bne.n	800ed9a <__sflush_r+0xb6>
 800ed96:	602f      	str	r7, [r5, #0]
 800ed98:	e7b1      	b.n	800ecfe <__sflush_r+0x1a>
 800ed9a:	89a3      	ldrh	r3, [r4, #12]
 800ed9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eda0:	81a3      	strh	r3, [r4, #12]
 800eda2:	e7ad      	b.n	800ed00 <__sflush_r+0x1c>
 800eda4:	690f      	ldr	r7, [r1, #16]
 800eda6:	2f00      	cmp	r7, #0
 800eda8:	d0a9      	beq.n	800ecfe <__sflush_r+0x1a>
 800edaa:	0793      	lsls	r3, r2, #30
 800edac:	680e      	ldr	r6, [r1, #0]
 800edae:	bf08      	it	eq
 800edb0:	694b      	ldreq	r3, [r1, #20]
 800edb2:	600f      	str	r7, [r1, #0]
 800edb4:	bf18      	it	ne
 800edb6:	2300      	movne	r3, #0
 800edb8:	eba6 0807 	sub.w	r8, r6, r7
 800edbc:	608b      	str	r3, [r1, #8]
 800edbe:	f1b8 0f00 	cmp.w	r8, #0
 800edc2:	dd9c      	ble.n	800ecfe <__sflush_r+0x1a>
 800edc4:	6a21      	ldr	r1, [r4, #32]
 800edc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800edc8:	4643      	mov	r3, r8
 800edca:	463a      	mov	r2, r7
 800edcc:	4628      	mov	r0, r5
 800edce:	47b0      	blx	r6
 800edd0:	2800      	cmp	r0, #0
 800edd2:	dc06      	bgt.n	800ede2 <__sflush_r+0xfe>
 800edd4:	89a3      	ldrh	r3, [r4, #12]
 800edd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edda:	81a3      	strh	r3, [r4, #12]
 800eddc:	f04f 30ff 	mov.w	r0, #4294967295
 800ede0:	e78e      	b.n	800ed00 <__sflush_r+0x1c>
 800ede2:	4407      	add	r7, r0
 800ede4:	eba8 0800 	sub.w	r8, r8, r0
 800ede8:	e7e9      	b.n	800edbe <__sflush_r+0xda>
 800edea:	bf00      	nop
 800edec:	20400001 	.word	0x20400001

0800edf0 <_fflush_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	690b      	ldr	r3, [r1, #16]
 800edf4:	4605      	mov	r5, r0
 800edf6:	460c      	mov	r4, r1
 800edf8:	b913      	cbnz	r3, 800ee00 <_fflush_r+0x10>
 800edfa:	2500      	movs	r5, #0
 800edfc:	4628      	mov	r0, r5
 800edfe:	bd38      	pop	{r3, r4, r5, pc}
 800ee00:	b118      	cbz	r0, 800ee0a <_fflush_r+0x1a>
 800ee02:	6983      	ldr	r3, [r0, #24]
 800ee04:	b90b      	cbnz	r3, 800ee0a <_fflush_r+0x1a>
 800ee06:	f000 f887 	bl	800ef18 <__sinit>
 800ee0a:	4b14      	ldr	r3, [pc, #80]	; (800ee5c <_fflush_r+0x6c>)
 800ee0c:	429c      	cmp	r4, r3
 800ee0e:	d11b      	bne.n	800ee48 <_fflush_r+0x58>
 800ee10:	686c      	ldr	r4, [r5, #4]
 800ee12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d0ef      	beq.n	800edfa <_fflush_r+0xa>
 800ee1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee1c:	07d0      	lsls	r0, r2, #31
 800ee1e:	d404      	bmi.n	800ee2a <_fflush_r+0x3a>
 800ee20:	0599      	lsls	r1, r3, #22
 800ee22:	d402      	bmi.n	800ee2a <_fflush_r+0x3a>
 800ee24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee26:	f000 f915 	bl	800f054 <__retarget_lock_acquire_recursive>
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	4621      	mov	r1, r4
 800ee2e:	f7ff ff59 	bl	800ece4 <__sflush_r>
 800ee32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee34:	07da      	lsls	r2, r3, #31
 800ee36:	4605      	mov	r5, r0
 800ee38:	d4e0      	bmi.n	800edfc <_fflush_r+0xc>
 800ee3a:	89a3      	ldrh	r3, [r4, #12]
 800ee3c:	059b      	lsls	r3, r3, #22
 800ee3e:	d4dd      	bmi.n	800edfc <_fflush_r+0xc>
 800ee40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee42:	f000 f908 	bl	800f056 <__retarget_lock_release_recursive>
 800ee46:	e7d9      	b.n	800edfc <_fflush_r+0xc>
 800ee48:	4b05      	ldr	r3, [pc, #20]	; (800ee60 <_fflush_r+0x70>)
 800ee4a:	429c      	cmp	r4, r3
 800ee4c:	d101      	bne.n	800ee52 <_fflush_r+0x62>
 800ee4e:	68ac      	ldr	r4, [r5, #8]
 800ee50:	e7df      	b.n	800ee12 <_fflush_r+0x22>
 800ee52:	4b04      	ldr	r3, [pc, #16]	; (800ee64 <_fflush_r+0x74>)
 800ee54:	429c      	cmp	r4, r3
 800ee56:	bf08      	it	eq
 800ee58:	68ec      	ldreq	r4, [r5, #12]
 800ee5a:	e7da      	b.n	800ee12 <_fflush_r+0x22>
 800ee5c:	0800f58c 	.word	0x0800f58c
 800ee60:	0800f5ac 	.word	0x0800f5ac
 800ee64:	0800f56c 	.word	0x0800f56c

0800ee68 <std>:
 800ee68:	2300      	movs	r3, #0
 800ee6a:	b510      	push	{r4, lr}
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ee72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee76:	6083      	str	r3, [r0, #8]
 800ee78:	8181      	strh	r1, [r0, #12]
 800ee7a:	6643      	str	r3, [r0, #100]	; 0x64
 800ee7c:	81c2      	strh	r2, [r0, #14]
 800ee7e:	6183      	str	r3, [r0, #24]
 800ee80:	4619      	mov	r1, r3
 800ee82:	2208      	movs	r2, #8
 800ee84:	305c      	adds	r0, #92	; 0x5c
 800ee86:	f7ff fdef 	bl	800ea68 <memset>
 800ee8a:	4b05      	ldr	r3, [pc, #20]	; (800eea0 <std+0x38>)
 800ee8c:	6263      	str	r3, [r4, #36]	; 0x24
 800ee8e:	4b05      	ldr	r3, [pc, #20]	; (800eea4 <std+0x3c>)
 800ee90:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee92:	4b05      	ldr	r3, [pc, #20]	; (800eea8 <std+0x40>)
 800ee94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee96:	4b05      	ldr	r3, [pc, #20]	; (800eeac <std+0x44>)
 800ee98:	6224      	str	r4, [r4, #32]
 800ee9a:	6323      	str	r3, [r4, #48]	; 0x30
 800ee9c:	bd10      	pop	{r4, pc}
 800ee9e:	bf00      	nop
 800eea0:	0800f305 	.word	0x0800f305
 800eea4:	0800f327 	.word	0x0800f327
 800eea8:	0800f35f 	.word	0x0800f35f
 800eeac:	0800f383 	.word	0x0800f383

0800eeb0 <_cleanup_r>:
 800eeb0:	4901      	ldr	r1, [pc, #4]	; (800eeb8 <_cleanup_r+0x8>)
 800eeb2:	f000 b8af 	b.w	800f014 <_fwalk_reent>
 800eeb6:	bf00      	nop
 800eeb8:	0800edf1 	.word	0x0800edf1

0800eebc <__sfmoreglue>:
 800eebc:	b570      	push	{r4, r5, r6, lr}
 800eebe:	2268      	movs	r2, #104	; 0x68
 800eec0:	1e4d      	subs	r5, r1, #1
 800eec2:	4355      	muls	r5, r2
 800eec4:	460e      	mov	r6, r1
 800eec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eeca:	f000 f997 	bl	800f1fc <_malloc_r>
 800eece:	4604      	mov	r4, r0
 800eed0:	b140      	cbz	r0, 800eee4 <__sfmoreglue+0x28>
 800eed2:	2100      	movs	r1, #0
 800eed4:	e9c0 1600 	strd	r1, r6, [r0]
 800eed8:	300c      	adds	r0, #12
 800eeda:	60a0      	str	r0, [r4, #8]
 800eedc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eee0:	f7ff fdc2 	bl	800ea68 <memset>
 800eee4:	4620      	mov	r0, r4
 800eee6:	bd70      	pop	{r4, r5, r6, pc}

0800eee8 <__sfp_lock_acquire>:
 800eee8:	4801      	ldr	r0, [pc, #4]	; (800eef0 <__sfp_lock_acquire+0x8>)
 800eeea:	f000 b8b3 	b.w	800f054 <__retarget_lock_acquire_recursive>
 800eeee:	bf00      	nop
 800eef0:	20006a01 	.word	0x20006a01

0800eef4 <__sfp_lock_release>:
 800eef4:	4801      	ldr	r0, [pc, #4]	; (800eefc <__sfp_lock_release+0x8>)
 800eef6:	f000 b8ae 	b.w	800f056 <__retarget_lock_release_recursive>
 800eefa:	bf00      	nop
 800eefc:	20006a01 	.word	0x20006a01

0800ef00 <__sinit_lock_acquire>:
 800ef00:	4801      	ldr	r0, [pc, #4]	; (800ef08 <__sinit_lock_acquire+0x8>)
 800ef02:	f000 b8a7 	b.w	800f054 <__retarget_lock_acquire_recursive>
 800ef06:	bf00      	nop
 800ef08:	20006a02 	.word	0x20006a02

0800ef0c <__sinit_lock_release>:
 800ef0c:	4801      	ldr	r0, [pc, #4]	; (800ef14 <__sinit_lock_release+0x8>)
 800ef0e:	f000 b8a2 	b.w	800f056 <__retarget_lock_release_recursive>
 800ef12:	bf00      	nop
 800ef14:	20006a02 	.word	0x20006a02

0800ef18 <__sinit>:
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	f7ff fff0 	bl	800ef00 <__sinit_lock_acquire>
 800ef20:	69a3      	ldr	r3, [r4, #24]
 800ef22:	b11b      	cbz	r3, 800ef2c <__sinit+0x14>
 800ef24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef28:	f7ff bff0 	b.w	800ef0c <__sinit_lock_release>
 800ef2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ef30:	6523      	str	r3, [r4, #80]	; 0x50
 800ef32:	4b13      	ldr	r3, [pc, #76]	; (800ef80 <__sinit+0x68>)
 800ef34:	4a13      	ldr	r2, [pc, #76]	; (800ef84 <__sinit+0x6c>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	62a2      	str	r2, [r4, #40]	; 0x28
 800ef3a:	42a3      	cmp	r3, r4
 800ef3c:	bf04      	itt	eq
 800ef3e:	2301      	moveq	r3, #1
 800ef40:	61a3      	streq	r3, [r4, #24]
 800ef42:	4620      	mov	r0, r4
 800ef44:	f000 f820 	bl	800ef88 <__sfp>
 800ef48:	6060      	str	r0, [r4, #4]
 800ef4a:	4620      	mov	r0, r4
 800ef4c:	f000 f81c 	bl	800ef88 <__sfp>
 800ef50:	60a0      	str	r0, [r4, #8]
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 f818 	bl	800ef88 <__sfp>
 800ef58:	2200      	movs	r2, #0
 800ef5a:	60e0      	str	r0, [r4, #12]
 800ef5c:	2104      	movs	r1, #4
 800ef5e:	6860      	ldr	r0, [r4, #4]
 800ef60:	f7ff ff82 	bl	800ee68 <std>
 800ef64:	68a0      	ldr	r0, [r4, #8]
 800ef66:	2201      	movs	r2, #1
 800ef68:	2109      	movs	r1, #9
 800ef6a:	f7ff ff7d 	bl	800ee68 <std>
 800ef6e:	68e0      	ldr	r0, [r4, #12]
 800ef70:	2202      	movs	r2, #2
 800ef72:	2112      	movs	r1, #18
 800ef74:	f7ff ff78 	bl	800ee68 <std>
 800ef78:	2301      	movs	r3, #1
 800ef7a:	61a3      	str	r3, [r4, #24]
 800ef7c:	e7d2      	b.n	800ef24 <__sinit+0xc>
 800ef7e:	bf00      	nop
 800ef80:	0800f568 	.word	0x0800f568
 800ef84:	0800eeb1 	.word	0x0800eeb1

0800ef88 <__sfp>:
 800ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8a:	4607      	mov	r7, r0
 800ef8c:	f7ff ffac 	bl	800eee8 <__sfp_lock_acquire>
 800ef90:	4b1e      	ldr	r3, [pc, #120]	; (800f00c <__sfp+0x84>)
 800ef92:	681e      	ldr	r6, [r3, #0]
 800ef94:	69b3      	ldr	r3, [r6, #24]
 800ef96:	b913      	cbnz	r3, 800ef9e <__sfp+0x16>
 800ef98:	4630      	mov	r0, r6
 800ef9a:	f7ff ffbd 	bl	800ef18 <__sinit>
 800ef9e:	3648      	adds	r6, #72	; 0x48
 800efa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800efa4:	3b01      	subs	r3, #1
 800efa6:	d503      	bpl.n	800efb0 <__sfp+0x28>
 800efa8:	6833      	ldr	r3, [r6, #0]
 800efaa:	b30b      	cbz	r3, 800eff0 <__sfp+0x68>
 800efac:	6836      	ldr	r6, [r6, #0]
 800efae:	e7f7      	b.n	800efa0 <__sfp+0x18>
 800efb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800efb4:	b9d5      	cbnz	r5, 800efec <__sfp+0x64>
 800efb6:	4b16      	ldr	r3, [pc, #88]	; (800f010 <__sfp+0x88>)
 800efb8:	60e3      	str	r3, [r4, #12]
 800efba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800efbe:	6665      	str	r5, [r4, #100]	; 0x64
 800efc0:	f000 f847 	bl	800f052 <__retarget_lock_init_recursive>
 800efc4:	f7ff ff96 	bl	800eef4 <__sfp_lock_release>
 800efc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800efcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800efd0:	6025      	str	r5, [r4, #0]
 800efd2:	61a5      	str	r5, [r4, #24]
 800efd4:	2208      	movs	r2, #8
 800efd6:	4629      	mov	r1, r5
 800efd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800efdc:	f7ff fd44 	bl	800ea68 <memset>
 800efe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800efe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800efe8:	4620      	mov	r0, r4
 800efea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efec:	3468      	adds	r4, #104	; 0x68
 800efee:	e7d9      	b.n	800efa4 <__sfp+0x1c>
 800eff0:	2104      	movs	r1, #4
 800eff2:	4638      	mov	r0, r7
 800eff4:	f7ff ff62 	bl	800eebc <__sfmoreglue>
 800eff8:	4604      	mov	r4, r0
 800effa:	6030      	str	r0, [r6, #0]
 800effc:	2800      	cmp	r0, #0
 800effe:	d1d5      	bne.n	800efac <__sfp+0x24>
 800f000:	f7ff ff78 	bl	800eef4 <__sfp_lock_release>
 800f004:	230c      	movs	r3, #12
 800f006:	603b      	str	r3, [r7, #0]
 800f008:	e7ee      	b.n	800efe8 <__sfp+0x60>
 800f00a:	bf00      	nop
 800f00c:	0800f568 	.word	0x0800f568
 800f010:	ffff0001 	.word	0xffff0001

0800f014 <_fwalk_reent>:
 800f014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f018:	4606      	mov	r6, r0
 800f01a:	4688      	mov	r8, r1
 800f01c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f020:	2700      	movs	r7, #0
 800f022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f026:	f1b9 0901 	subs.w	r9, r9, #1
 800f02a:	d505      	bpl.n	800f038 <_fwalk_reent+0x24>
 800f02c:	6824      	ldr	r4, [r4, #0]
 800f02e:	2c00      	cmp	r4, #0
 800f030:	d1f7      	bne.n	800f022 <_fwalk_reent+0xe>
 800f032:	4638      	mov	r0, r7
 800f034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f038:	89ab      	ldrh	r3, [r5, #12]
 800f03a:	2b01      	cmp	r3, #1
 800f03c:	d907      	bls.n	800f04e <_fwalk_reent+0x3a>
 800f03e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f042:	3301      	adds	r3, #1
 800f044:	d003      	beq.n	800f04e <_fwalk_reent+0x3a>
 800f046:	4629      	mov	r1, r5
 800f048:	4630      	mov	r0, r6
 800f04a:	47c0      	blx	r8
 800f04c:	4307      	orrs	r7, r0
 800f04e:	3568      	adds	r5, #104	; 0x68
 800f050:	e7e9      	b.n	800f026 <_fwalk_reent+0x12>

0800f052 <__retarget_lock_init_recursive>:
 800f052:	4770      	bx	lr

0800f054 <__retarget_lock_acquire_recursive>:
 800f054:	4770      	bx	lr

0800f056 <__retarget_lock_release_recursive>:
 800f056:	4770      	bx	lr

0800f058 <__swhatbuf_r>:
 800f058:	b570      	push	{r4, r5, r6, lr}
 800f05a:	460e      	mov	r6, r1
 800f05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f060:	2900      	cmp	r1, #0
 800f062:	b096      	sub	sp, #88	; 0x58
 800f064:	4614      	mov	r4, r2
 800f066:	461d      	mov	r5, r3
 800f068:	da08      	bge.n	800f07c <__swhatbuf_r+0x24>
 800f06a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	602a      	str	r2, [r5, #0]
 800f072:	061a      	lsls	r2, r3, #24
 800f074:	d410      	bmi.n	800f098 <__swhatbuf_r+0x40>
 800f076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f07a:	e00e      	b.n	800f09a <__swhatbuf_r+0x42>
 800f07c:	466a      	mov	r2, sp
 800f07e:	f000 f9a7 	bl	800f3d0 <_fstat_r>
 800f082:	2800      	cmp	r0, #0
 800f084:	dbf1      	blt.n	800f06a <__swhatbuf_r+0x12>
 800f086:	9a01      	ldr	r2, [sp, #4]
 800f088:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f08c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f090:	425a      	negs	r2, r3
 800f092:	415a      	adcs	r2, r3
 800f094:	602a      	str	r2, [r5, #0]
 800f096:	e7ee      	b.n	800f076 <__swhatbuf_r+0x1e>
 800f098:	2340      	movs	r3, #64	; 0x40
 800f09a:	2000      	movs	r0, #0
 800f09c:	6023      	str	r3, [r4, #0]
 800f09e:	b016      	add	sp, #88	; 0x58
 800f0a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f0a4 <__smakebuf_r>:
 800f0a4:	898b      	ldrh	r3, [r1, #12]
 800f0a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f0a8:	079d      	lsls	r5, r3, #30
 800f0aa:	4606      	mov	r6, r0
 800f0ac:	460c      	mov	r4, r1
 800f0ae:	d507      	bpl.n	800f0c0 <__smakebuf_r+0x1c>
 800f0b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f0b4:	6023      	str	r3, [r4, #0]
 800f0b6:	6123      	str	r3, [r4, #16]
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	6163      	str	r3, [r4, #20]
 800f0bc:	b002      	add	sp, #8
 800f0be:	bd70      	pop	{r4, r5, r6, pc}
 800f0c0:	ab01      	add	r3, sp, #4
 800f0c2:	466a      	mov	r2, sp
 800f0c4:	f7ff ffc8 	bl	800f058 <__swhatbuf_r>
 800f0c8:	9900      	ldr	r1, [sp, #0]
 800f0ca:	4605      	mov	r5, r0
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f000 f895 	bl	800f1fc <_malloc_r>
 800f0d2:	b948      	cbnz	r0, 800f0e8 <__smakebuf_r+0x44>
 800f0d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0d8:	059a      	lsls	r2, r3, #22
 800f0da:	d4ef      	bmi.n	800f0bc <__smakebuf_r+0x18>
 800f0dc:	f023 0303 	bic.w	r3, r3, #3
 800f0e0:	f043 0302 	orr.w	r3, r3, #2
 800f0e4:	81a3      	strh	r3, [r4, #12]
 800f0e6:	e7e3      	b.n	800f0b0 <__smakebuf_r+0xc>
 800f0e8:	4b0d      	ldr	r3, [pc, #52]	; (800f120 <__smakebuf_r+0x7c>)
 800f0ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800f0ec:	89a3      	ldrh	r3, [r4, #12]
 800f0ee:	6020      	str	r0, [r4, #0]
 800f0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0f4:	81a3      	strh	r3, [r4, #12]
 800f0f6:	9b00      	ldr	r3, [sp, #0]
 800f0f8:	6163      	str	r3, [r4, #20]
 800f0fa:	9b01      	ldr	r3, [sp, #4]
 800f0fc:	6120      	str	r0, [r4, #16]
 800f0fe:	b15b      	cbz	r3, 800f118 <__smakebuf_r+0x74>
 800f100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f104:	4630      	mov	r0, r6
 800f106:	f000 f975 	bl	800f3f4 <_isatty_r>
 800f10a:	b128      	cbz	r0, 800f118 <__smakebuf_r+0x74>
 800f10c:	89a3      	ldrh	r3, [r4, #12]
 800f10e:	f023 0303 	bic.w	r3, r3, #3
 800f112:	f043 0301 	orr.w	r3, r3, #1
 800f116:	81a3      	strh	r3, [r4, #12]
 800f118:	89a0      	ldrh	r0, [r4, #12]
 800f11a:	4305      	orrs	r5, r0
 800f11c:	81a5      	strh	r5, [r4, #12]
 800f11e:	e7cd      	b.n	800f0bc <__smakebuf_r+0x18>
 800f120:	0800eeb1 	.word	0x0800eeb1

0800f124 <_free_r>:
 800f124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f126:	2900      	cmp	r1, #0
 800f128:	d044      	beq.n	800f1b4 <_free_r+0x90>
 800f12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f12e:	9001      	str	r0, [sp, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	f1a1 0404 	sub.w	r4, r1, #4
 800f136:	bfb8      	it	lt
 800f138:	18e4      	addlt	r4, r4, r3
 800f13a:	f000 f97d 	bl	800f438 <__malloc_lock>
 800f13e:	4a1e      	ldr	r2, [pc, #120]	; (800f1b8 <_free_r+0x94>)
 800f140:	9801      	ldr	r0, [sp, #4]
 800f142:	6813      	ldr	r3, [r2, #0]
 800f144:	b933      	cbnz	r3, 800f154 <_free_r+0x30>
 800f146:	6063      	str	r3, [r4, #4]
 800f148:	6014      	str	r4, [r2, #0]
 800f14a:	b003      	add	sp, #12
 800f14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f150:	f000 b978 	b.w	800f444 <__malloc_unlock>
 800f154:	42a3      	cmp	r3, r4
 800f156:	d908      	bls.n	800f16a <_free_r+0x46>
 800f158:	6825      	ldr	r5, [r4, #0]
 800f15a:	1961      	adds	r1, r4, r5
 800f15c:	428b      	cmp	r3, r1
 800f15e:	bf01      	itttt	eq
 800f160:	6819      	ldreq	r1, [r3, #0]
 800f162:	685b      	ldreq	r3, [r3, #4]
 800f164:	1949      	addeq	r1, r1, r5
 800f166:	6021      	streq	r1, [r4, #0]
 800f168:	e7ed      	b.n	800f146 <_free_r+0x22>
 800f16a:	461a      	mov	r2, r3
 800f16c:	685b      	ldr	r3, [r3, #4]
 800f16e:	b10b      	cbz	r3, 800f174 <_free_r+0x50>
 800f170:	42a3      	cmp	r3, r4
 800f172:	d9fa      	bls.n	800f16a <_free_r+0x46>
 800f174:	6811      	ldr	r1, [r2, #0]
 800f176:	1855      	adds	r5, r2, r1
 800f178:	42a5      	cmp	r5, r4
 800f17a:	d10b      	bne.n	800f194 <_free_r+0x70>
 800f17c:	6824      	ldr	r4, [r4, #0]
 800f17e:	4421      	add	r1, r4
 800f180:	1854      	adds	r4, r2, r1
 800f182:	42a3      	cmp	r3, r4
 800f184:	6011      	str	r1, [r2, #0]
 800f186:	d1e0      	bne.n	800f14a <_free_r+0x26>
 800f188:	681c      	ldr	r4, [r3, #0]
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	6053      	str	r3, [r2, #4]
 800f18e:	4421      	add	r1, r4
 800f190:	6011      	str	r1, [r2, #0]
 800f192:	e7da      	b.n	800f14a <_free_r+0x26>
 800f194:	d902      	bls.n	800f19c <_free_r+0x78>
 800f196:	230c      	movs	r3, #12
 800f198:	6003      	str	r3, [r0, #0]
 800f19a:	e7d6      	b.n	800f14a <_free_r+0x26>
 800f19c:	6825      	ldr	r5, [r4, #0]
 800f19e:	1961      	adds	r1, r4, r5
 800f1a0:	428b      	cmp	r3, r1
 800f1a2:	bf04      	itt	eq
 800f1a4:	6819      	ldreq	r1, [r3, #0]
 800f1a6:	685b      	ldreq	r3, [r3, #4]
 800f1a8:	6063      	str	r3, [r4, #4]
 800f1aa:	bf04      	itt	eq
 800f1ac:	1949      	addeq	r1, r1, r5
 800f1ae:	6021      	streq	r1, [r4, #0]
 800f1b0:	6054      	str	r4, [r2, #4]
 800f1b2:	e7ca      	b.n	800f14a <_free_r+0x26>
 800f1b4:	b003      	add	sp, #12
 800f1b6:	bd30      	pop	{r4, r5, pc}
 800f1b8:	20006a04 	.word	0x20006a04

0800f1bc <sbrk_aligned>:
 800f1bc:	b570      	push	{r4, r5, r6, lr}
 800f1be:	4e0e      	ldr	r6, [pc, #56]	; (800f1f8 <sbrk_aligned+0x3c>)
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	6831      	ldr	r1, [r6, #0]
 800f1c4:	4605      	mov	r5, r0
 800f1c6:	b911      	cbnz	r1, 800f1ce <sbrk_aligned+0x12>
 800f1c8:	f000 f88c 	bl	800f2e4 <_sbrk_r>
 800f1cc:	6030      	str	r0, [r6, #0]
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	f000 f887 	bl	800f2e4 <_sbrk_r>
 800f1d6:	1c43      	adds	r3, r0, #1
 800f1d8:	d00a      	beq.n	800f1f0 <sbrk_aligned+0x34>
 800f1da:	1cc4      	adds	r4, r0, #3
 800f1dc:	f024 0403 	bic.w	r4, r4, #3
 800f1e0:	42a0      	cmp	r0, r4
 800f1e2:	d007      	beq.n	800f1f4 <sbrk_aligned+0x38>
 800f1e4:	1a21      	subs	r1, r4, r0
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	f000 f87c 	bl	800f2e4 <_sbrk_r>
 800f1ec:	3001      	adds	r0, #1
 800f1ee:	d101      	bne.n	800f1f4 <sbrk_aligned+0x38>
 800f1f0:	f04f 34ff 	mov.w	r4, #4294967295
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	bd70      	pop	{r4, r5, r6, pc}
 800f1f8:	20006a08 	.word	0x20006a08

0800f1fc <_malloc_r>:
 800f1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f200:	1ccd      	adds	r5, r1, #3
 800f202:	f025 0503 	bic.w	r5, r5, #3
 800f206:	3508      	adds	r5, #8
 800f208:	2d0c      	cmp	r5, #12
 800f20a:	bf38      	it	cc
 800f20c:	250c      	movcc	r5, #12
 800f20e:	2d00      	cmp	r5, #0
 800f210:	4607      	mov	r7, r0
 800f212:	db01      	blt.n	800f218 <_malloc_r+0x1c>
 800f214:	42a9      	cmp	r1, r5
 800f216:	d905      	bls.n	800f224 <_malloc_r+0x28>
 800f218:	230c      	movs	r3, #12
 800f21a:	603b      	str	r3, [r7, #0]
 800f21c:	2600      	movs	r6, #0
 800f21e:	4630      	mov	r0, r6
 800f220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f224:	4e2e      	ldr	r6, [pc, #184]	; (800f2e0 <_malloc_r+0xe4>)
 800f226:	f000 f907 	bl	800f438 <__malloc_lock>
 800f22a:	6833      	ldr	r3, [r6, #0]
 800f22c:	461c      	mov	r4, r3
 800f22e:	bb34      	cbnz	r4, 800f27e <_malloc_r+0x82>
 800f230:	4629      	mov	r1, r5
 800f232:	4638      	mov	r0, r7
 800f234:	f7ff ffc2 	bl	800f1bc <sbrk_aligned>
 800f238:	1c43      	adds	r3, r0, #1
 800f23a:	4604      	mov	r4, r0
 800f23c:	d14d      	bne.n	800f2da <_malloc_r+0xde>
 800f23e:	6834      	ldr	r4, [r6, #0]
 800f240:	4626      	mov	r6, r4
 800f242:	2e00      	cmp	r6, #0
 800f244:	d140      	bne.n	800f2c8 <_malloc_r+0xcc>
 800f246:	6823      	ldr	r3, [r4, #0]
 800f248:	4631      	mov	r1, r6
 800f24a:	4638      	mov	r0, r7
 800f24c:	eb04 0803 	add.w	r8, r4, r3
 800f250:	f000 f848 	bl	800f2e4 <_sbrk_r>
 800f254:	4580      	cmp	r8, r0
 800f256:	d13a      	bne.n	800f2ce <_malloc_r+0xd2>
 800f258:	6821      	ldr	r1, [r4, #0]
 800f25a:	3503      	adds	r5, #3
 800f25c:	1a6d      	subs	r5, r5, r1
 800f25e:	f025 0503 	bic.w	r5, r5, #3
 800f262:	3508      	adds	r5, #8
 800f264:	2d0c      	cmp	r5, #12
 800f266:	bf38      	it	cc
 800f268:	250c      	movcc	r5, #12
 800f26a:	4629      	mov	r1, r5
 800f26c:	4638      	mov	r0, r7
 800f26e:	f7ff ffa5 	bl	800f1bc <sbrk_aligned>
 800f272:	3001      	adds	r0, #1
 800f274:	d02b      	beq.n	800f2ce <_malloc_r+0xd2>
 800f276:	6823      	ldr	r3, [r4, #0]
 800f278:	442b      	add	r3, r5
 800f27a:	6023      	str	r3, [r4, #0]
 800f27c:	e00e      	b.n	800f29c <_malloc_r+0xa0>
 800f27e:	6822      	ldr	r2, [r4, #0]
 800f280:	1b52      	subs	r2, r2, r5
 800f282:	d41e      	bmi.n	800f2c2 <_malloc_r+0xc6>
 800f284:	2a0b      	cmp	r2, #11
 800f286:	d916      	bls.n	800f2b6 <_malloc_r+0xba>
 800f288:	1961      	adds	r1, r4, r5
 800f28a:	42a3      	cmp	r3, r4
 800f28c:	6025      	str	r5, [r4, #0]
 800f28e:	bf18      	it	ne
 800f290:	6059      	strne	r1, [r3, #4]
 800f292:	6863      	ldr	r3, [r4, #4]
 800f294:	bf08      	it	eq
 800f296:	6031      	streq	r1, [r6, #0]
 800f298:	5162      	str	r2, [r4, r5]
 800f29a:	604b      	str	r3, [r1, #4]
 800f29c:	4638      	mov	r0, r7
 800f29e:	f104 060b 	add.w	r6, r4, #11
 800f2a2:	f000 f8cf 	bl	800f444 <__malloc_unlock>
 800f2a6:	f026 0607 	bic.w	r6, r6, #7
 800f2aa:	1d23      	adds	r3, r4, #4
 800f2ac:	1af2      	subs	r2, r6, r3
 800f2ae:	d0b6      	beq.n	800f21e <_malloc_r+0x22>
 800f2b0:	1b9b      	subs	r3, r3, r6
 800f2b2:	50a3      	str	r3, [r4, r2]
 800f2b4:	e7b3      	b.n	800f21e <_malloc_r+0x22>
 800f2b6:	6862      	ldr	r2, [r4, #4]
 800f2b8:	42a3      	cmp	r3, r4
 800f2ba:	bf0c      	ite	eq
 800f2bc:	6032      	streq	r2, [r6, #0]
 800f2be:	605a      	strne	r2, [r3, #4]
 800f2c0:	e7ec      	b.n	800f29c <_malloc_r+0xa0>
 800f2c2:	4623      	mov	r3, r4
 800f2c4:	6864      	ldr	r4, [r4, #4]
 800f2c6:	e7b2      	b.n	800f22e <_malloc_r+0x32>
 800f2c8:	4634      	mov	r4, r6
 800f2ca:	6876      	ldr	r6, [r6, #4]
 800f2cc:	e7b9      	b.n	800f242 <_malloc_r+0x46>
 800f2ce:	230c      	movs	r3, #12
 800f2d0:	603b      	str	r3, [r7, #0]
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	f000 f8b6 	bl	800f444 <__malloc_unlock>
 800f2d8:	e7a1      	b.n	800f21e <_malloc_r+0x22>
 800f2da:	6025      	str	r5, [r4, #0]
 800f2dc:	e7de      	b.n	800f29c <_malloc_r+0xa0>
 800f2de:	bf00      	nop
 800f2e0:	20006a04 	.word	0x20006a04

0800f2e4 <_sbrk_r>:
 800f2e4:	b538      	push	{r3, r4, r5, lr}
 800f2e6:	4d06      	ldr	r5, [pc, #24]	; (800f300 <_sbrk_r+0x1c>)
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	4604      	mov	r4, r0
 800f2ec:	4608      	mov	r0, r1
 800f2ee:	602b      	str	r3, [r5, #0]
 800f2f0:	f7f2 f996 	bl	8001620 <_sbrk>
 800f2f4:	1c43      	adds	r3, r0, #1
 800f2f6:	d102      	bne.n	800f2fe <_sbrk_r+0x1a>
 800f2f8:	682b      	ldr	r3, [r5, #0]
 800f2fa:	b103      	cbz	r3, 800f2fe <_sbrk_r+0x1a>
 800f2fc:	6023      	str	r3, [r4, #0]
 800f2fe:	bd38      	pop	{r3, r4, r5, pc}
 800f300:	20006a0c 	.word	0x20006a0c

0800f304 <__sread>:
 800f304:	b510      	push	{r4, lr}
 800f306:	460c      	mov	r4, r1
 800f308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f30c:	f000 f8a0 	bl	800f450 <_read_r>
 800f310:	2800      	cmp	r0, #0
 800f312:	bfab      	itete	ge
 800f314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f316:	89a3      	ldrhlt	r3, [r4, #12]
 800f318:	181b      	addge	r3, r3, r0
 800f31a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f31e:	bfac      	ite	ge
 800f320:	6563      	strge	r3, [r4, #84]	; 0x54
 800f322:	81a3      	strhlt	r3, [r4, #12]
 800f324:	bd10      	pop	{r4, pc}

0800f326 <__swrite>:
 800f326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f32a:	461f      	mov	r7, r3
 800f32c:	898b      	ldrh	r3, [r1, #12]
 800f32e:	05db      	lsls	r3, r3, #23
 800f330:	4605      	mov	r5, r0
 800f332:	460c      	mov	r4, r1
 800f334:	4616      	mov	r6, r2
 800f336:	d505      	bpl.n	800f344 <__swrite+0x1e>
 800f338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f33c:	2302      	movs	r3, #2
 800f33e:	2200      	movs	r2, #0
 800f340:	f000 f868 	bl	800f414 <_lseek_r>
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f34a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f34e:	81a3      	strh	r3, [r4, #12]
 800f350:	4632      	mov	r2, r6
 800f352:	463b      	mov	r3, r7
 800f354:	4628      	mov	r0, r5
 800f356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f35a:	f000 b817 	b.w	800f38c <_write_r>

0800f35e <__sseek>:
 800f35e:	b510      	push	{r4, lr}
 800f360:	460c      	mov	r4, r1
 800f362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f366:	f000 f855 	bl	800f414 <_lseek_r>
 800f36a:	1c43      	adds	r3, r0, #1
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	bf15      	itete	ne
 800f370:	6560      	strne	r0, [r4, #84]	; 0x54
 800f372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f37a:	81a3      	strheq	r3, [r4, #12]
 800f37c:	bf18      	it	ne
 800f37e:	81a3      	strhne	r3, [r4, #12]
 800f380:	bd10      	pop	{r4, pc}

0800f382 <__sclose>:
 800f382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f386:	f000 b813 	b.w	800f3b0 <_close_r>
	...

0800f38c <_write_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4d07      	ldr	r5, [pc, #28]	; (800f3ac <_write_r+0x20>)
 800f390:	4604      	mov	r4, r0
 800f392:	4608      	mov	r0, r1
 800f394:	4611      	mov	r1, r2
 800f396:	2200      	movs	r2, #0
 800f398:	602a      	str	r2, [r5, #0]
 800f39a:	461a      	mov	r2, r3
 800f39c:	f7f2 f8ef 	bl	800157e <_write>
 800f3a0:	1c43      	adds	r3, r0, #1
 800f3a2:	d102      	bne.n	800f3aa <_write_r+0x1e>
 800f3a4:	682b      	ldr	r3, [r5, #0]
 800f3a6:	b103      	cbz	r3, 800f3aa <_write_r+0x1e>
 800f3a8:	6023      	str	r3, [r4, #0]
 800f3aa:	bd38      	pop	{r3, r4, r5, pc}
 800f3ac:	20006a0c 	.word	0x20006a0c

0800f3b0 <_close_r>:
 800f3b0:	b538      	push	{r3, r4, r5, lr}
 800f3b2:	4d06      	ldr	r5, [pc, #24]	; (800f3cc <_close_r+0x1c>)
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	4608      	mov	r0, r1
 800f3ba:	602b      	str	r3, [r5, #0]
 800f3bc:	f7f2 f8fb 	bl	80015b6 <_close>
 800f3c0:	1c43      	adds	r3, r0, #1
 800f3c2:	d102      	bne.n	800f3ca <_close_r+0x1a>
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	b103      	cbz	r3, 800f3ca <_close_r+0x1a>
 800f3c8:	6023      	str	r3, [r4, #0]
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}
 800f3cc:	20006a0c 	.word	0x20006a0c

0800f3d0 <_fstat_r>:
 800f3d0:	b538      	push	{r3, r4, r5, lr}
 800f3d2:	4d07      	ldr	r5, [pc, #28]	; (800f3f0 <_fstat_r+0x20>)
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	4608      	mov	r0, r1
 800f3da:	4611      	mov	r1, r2
 800f3dc:	602b      	str	r3, [r5, #0]
 800f3de:	f7f2 f8f6 	bl	80015ce <_fstat>
 800f3e2:	1c43      	adds	r3, r0, #1
 800f3e4:	d102      	bne.n	800f3ec <_fstat_r+0x1c>
 800f3e6:	682b      	ldr	r3, [r5, #0]
 800f3e8:	b103      	cbz	r3, 800f3ec <_fstat_r+0x1c>
 800f3ea:	6023      	str	r3, [r4, #0]
 800f3ec:	bd38      	pop	{r3, r4, r5, pc}
 800f3ee:	bf00      	nop
 800f3f0:	20006a0c 	.word	0x20006a0c

0800f3f4 <_isatty_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d06      	ldr	r5, [pc, #24]	; (800f410 <_isatty_r+0x1c>)
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	4608      	mov	r0, r1
 800f3fe:	602b      	str	r3, [r5, #0]
 800f400:	f7f2 f8f5 	bl	80015ee <_isatty>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d102      	bne.n	800f40e <_isatty_r+0x1a>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	b103      	cbz	r3, 800f40e <_isatty_r+0x1a>
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	bd38      	pop	{r3, r4, r5, pc}
 800f410:	20006a0c 	.word	0x20006a0c

0800f414 <_lseek_r>:
 800f414:	b538      	push	{r3, r4, r5, lr}
 800f416:	4d07      	ldr	r5, [pc, #28]	; (800f434 <_lseek_r+0x20>)
 800f418:	4604      	mov	r4, r0
 800f41a:	4608      	mov	r0, r1
 800f41c:	4611      	mov	r1, r2
 800f41e:	2200      	movs	r2, #0
 800f420:	602a      	str	r2, [r5, #0]
 800f422:	461a      	mov	r2, r3
 800f424:	f7f2 f8ee 	bl	8001604 <_lseek>
 800f428:	1c43      	adds	r3, r0, #1
 800f42a:	d102      	bne.n	800f432 <_lseek_r+0x1e>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	b103      	cbz	r3, 800f432 <_lseek_r+0x1e>
 800f430:	6023      	str	r3, [r4, #0]
 800f432:	bd38      	pop	{r3, r4, r5, pc}
 800f434:	20006a0c 	.word	0x20006a0c

0800f438 <__malloc_lock>:
 800f438:	4801      	ldr	r0, [pc, #4]	; (800f440 <__malloc_lock+0x8>)
 800f43a:	f7ff be0b 	b.w	800f054 <__retarget_lock_acquire_recursive>
 800f43e:	bf00      	nop
 800f440:	20006a00 	.word	0x20006a00

0800f444 <__malloc_unlock>:
 800f444:	4801      	ldr	r0, [pc, #4]	; (800f44c <__malloc_unlock+0x8>)
 800f446:	f7ff be06 	b.w	800f056 <__retarget_lock_release_recursive>
 800f44a:	bf00      	nop
 800f44c:	20006a00 	.word	0x20006a00

0800f450 <_read_r>:
 800f450:	b538      	push	{r3, r4, r5, lr}
 800f452:	4d07      	ldr	r5, [pc, #28]	; (800f470 <_read_r+0x20>)
 800f454:	4604      	mov	r4, r0
 800f456:	4608      	mov	r0, r1
 800f458:	4611      	mov	r1, r2
 800f45a:	2200      	movs	r2, #0
 800f45c:	602a      	str	r2, [r5, #0]
 800f45e:	461a      	mov	r2, r3
 800f460:	f7f2 f870 	bl	8001544 <_read>
 800f464:	1c43      	adds	r3, r0, #1
 800f466:	d102      	bne.n	800f46e <_read_r+0x1e>
 800f468:	682b      	ldr	r3, [r5, #0]
 800f46a:	b103      	cbz	r3, 800f46e <_read_r+0x1e>
 800f46c:	6023      	str	r3, [r4, #0]
 800f46e:	bd38      	pop	{r3, r4, r5, pc}
 800f470:	20006a0c 	.word	0x20006a0c

0800f474 <_init>:
 800f474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f476:	bf00      	nop
 800f478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f47a:	bc08      	pop	{r3}
 800f47c:	469e      	mov	lr, r3
 800f47e:	4770      	bx	lr

0800f480 <_fini>:
 800f480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f482:	bf00      	nop
 800f484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f486:	bc08      	pop	{r3}
 800f488:	469e      	mov	lr, r3
 800f48a:	4770      	bx	lr
