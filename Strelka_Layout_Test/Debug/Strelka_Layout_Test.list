
Strelka_Layout_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800acd0  0800acd0  0001acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad44  0800ad44  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad44  0800ad44  0001ad44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad4c  0800ad4c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad4c  0800ad4c  0001ad4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad50  0800ad50  0001ad50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800ad54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001ef4  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ff0  20001ff0  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000214cc  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000460b  00000000  00000000  000415f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cc8  00000000  00000000  00045c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b08  00000000  00000000  000478d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cb0  00000000  00000000  000493d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024b62  00000000  00000000  00070088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daf02  00000000  00000000  00094bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016faec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a58  00000000  00000000  0016fb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800acb8 	.word	0x0800acb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	0800acb8 	.word	0x0800acb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fdfe 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f818 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa3a 	bl	8000950 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80004dc:	f000 f8fe 	bl	80006dc <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80004e0:	f000 f91c 	bl	800071c <MX_SPI1_Init>
  MX_SPI2_Init();
 80004e4:	f000 f950 	bl	8000788 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004e8:	f000 fa08 	bl	80008fc <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f009 fec2 	bl	800a274 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80004f0:	f000 f9b6 	bl	8000860 <MX_TIM3_Init>
  MX_FATFS_Init();
 80004f4:	f007 fd42 	bl	8007f7c <MX_FATFS_Init>
  MX_I2C2_Init();
 80004f8:	f000 f8c2 	bl	8000680 <MX_I2C2_Init>
  MX_ADC2_Init();
 80004fc:	f000 f86e 	bl	80005dc <MX_ADC2_Init>
  MX_SPI3_Init();
 8000500:	f000 f978 	bl	80007f4 <MX_SPI3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x38>
	...

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00a fbc6 	bl	800aca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000578:	230c      	movs	r3, #12
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800057c:	23a8      	movs	r3, #168	; 0xa8
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0320 	add.w	r3, r7, #32
 800058c:	4618      	mov	r0, r3
 800058e:	f002 ff39 	bl	8003404 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000598:	f000 fa90 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f99a 	bl	80038f4 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 fa79 	bl	8000abc <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC2_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <MX_ADC2_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC2_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_ADC2_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC2_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC2_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC2_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_ADC2_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_ADC2_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	; (800067c <MX_ADC2_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_ADC2_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_ADC2_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_ADC2_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_ADC2_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <MX_ADC2_Init+0x98>)
 800063e:	f000 fddd 	bl	80011fc <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fa38 	bl	8000abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800064c:	2303      	movs	r3, #3
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC2_Init+0x98>)
 800065e:	f000 fe11 	bl	8001284 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fa28 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000118 	.word	0x20000118
 8000678:	40012100 	.word	0x40012100
 800067c:	0f000001 	.word	0x0f000001

08000680 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_I2C2_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_I2C2_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_I2C2_Init+0x50>)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_I2C2_Init+0x58>)
 800068e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_I2C2_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_I2C2_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_I2C2_Init+0x50>)
 800069e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_I2C2_Init+0x50>)
 80006be:	f001 fadf 	bl	8001c80 <HAL_I2C_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 f9f8 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000160 	.word	0x20000160
 80006d4:	40005800 	.word	0x40005800
 80006d8:	00061a80 	.word	0x00061a80

080006dc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_SDIO_SD_Init+0x38>)
 80006e2:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <MX_SDIO_SD_Init+0x3c>)
 80006e4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_SDIO_SD_Init+0x38>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_SDIO_SD_Init+0x38>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_SDIO_SD_Init+0x38>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_SDIO_SD_Init+0x38>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <MX_SDIO_SD_Init+0x38>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <MX_SDIO_SD_Init+0x38>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	200001b4 	.word	0x200001b4
 8000718:	40012c00 	.word	0x40012c00

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f004 fc2c 	bl	8004fca <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f9a0 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000238 	.word	0x20000238
 8000784:	40013000 	.word	0x40013000

08000788 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_SPI2_Init+0x64>)
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <MX_SPI2_Init+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <MX_SPI2_Init+0x64>)
 8000794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000798:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_SPI2_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_SPI2_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_SPI2_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_SPI2_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_SPI2_Init+0x64>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_SPI2_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <MX_SPI2_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_SPI2_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <MX_SPI2_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_SPI2_Init+0x64>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_SPI2_Init+0x64>)
 80007da:	f004 fbf6 	bl	8004fca <HAL_SPI_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007e4:	f000 f96a 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000290 	.word	0x20000290
 80007f0:	40003800 	.word	0x40003800

080007f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_SPI3_Init+0x64>)
 80007fa:	4a18      	ldr	r2, [pc, #96]	; (800085c <MX_SPI3_Init+0x68>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_SPI3_Init+0x64>)
 8000800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000804:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_SPI3_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_SPI3_Init+0x64>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_SPI3_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_SPI3_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_SPI3_Init+0x64>)
 8000820:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000824:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_SPI3_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_SPI3_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_SPI3_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_SPI3_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_SPI3_Init+0x64>)
 8000840:	220a      	movs	r2, #10
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_SPI3_Init+0x64>)
 8000846:	f004 fbc0 	bl	8004fca <HAL_SPI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000850:	f000 f934 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200002e8 	.word	0x200002e8
 800085c:	40003c00 	.word	0x40003c00

08000860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_TIM3_Init+0x94>)
 800087e:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <MX_TIM3_Init+0x98>)
 8000880:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_TIM3_Init+0x94>)
 8000884:	2200      	movs	r2, #0
 8000886:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_TIM3_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_TIM3_Init+0x94>)
 8000890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000894:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_TIM3_Init+0x94>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM3_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008a2:	4814      	ldr	r0, [pc, #80]	; (80008f4 <MX_TIM3_Init+0x94>)
 80008a4:	f004 fc1a 	bl	80050dc <HAL_TIM_Base_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 f905 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_TIM3_Init+0x94>)
 80008c0:	f004 fc5b 	bl	800517a <HAL_TIM_ConfigClockSource>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80008ca:	f000 f8f7 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_TIM3_Init+0x94>)
 80008dc:	f004 fe4e 	bl	800557c <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80008e6:	f000 f8e9 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000340 	.word	0x20000340
 80008f8:	40000400 	.word	0x40000400

080008fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_USART1_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_USART1_UART_Init+0x4c>)
 8000934:	f004 fe9e 	bl	8005674 <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f8bd 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000388 	.word	0x20000388
 800094c:	40011000 	.word	0x40011000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b50      	ldr	r3, [pc, #320]	; (8000aac <MX_GPIO_Init+0x15c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a4f      	ldr	r2, [pc, #316]	; (8000aac <MX_GPIO_Init+0x15c>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <MX_GPIO_Init+0x15c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b49      	ldr	r3, [pc, #292]	; (8000aac <MX_GPIO_Init+0x15c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a48      	ldr	r2, [pc, #288]	; (8000aac <MX_GPIO_Init+0x15c>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b46      	ldr	r3, [pc, #280]	; (8000aac <MX_GPIO_Init+0x15c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b42      	ldr	r3, [pc, #264]	; (8000aac <MX_GPIO_Init+0x15c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a41      	ldr	r2, [pc, #260]	; (8000aac <MX_GPIO_Init+0x15c>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b3f      	ldr	r3, [pc, #252]	; (8000aac <MX_GPIO_Init+0x15c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b3b      	ldr	r3, [pc, #236]	; (8000aac <MX_GPIO_Init+0x15c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a3a      	ldr	r2, [pc, #232]	; (8000aac <MX_GPIO_Init+0x15c>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b38      	ldr	r3, [pc, #224]	; (8000aac <MX_GPIO_Init+0x15c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <MX_GPIO_Init+0x15c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <MX_GPIO_Init+0x15c>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_GPIO_Init+0x15c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CONT_TEST_EN_Pin|LED_INDICATOR_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f242 0102 	movw	r1, #8194	; 0x2002
 80009f8:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x160>)
 80009fa:	f001 f927 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAIN_L_Pin|MAIN_H_Pin|DROGUE_H_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f241 1103 	movw	r1, #4355	; 0x1103
 8000a04:	482b      	ldr	r0, [pc, #172]	; (8000ab4 <MX_GPIO_Init+0x164>)
 8000a06:	f001 f921 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAG_CS_Pin|DROGUE_L_Pin|BARO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 519a 	mov.w	r1, #4928	; 0x1340
 8000a10:	4829      	ldr	r0, [pc, #164]	; (8000ab8 <MX_GPIO_Init+0x168>)
 8000a12:	f001 f91b 	bl	8001c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CONT_TEST_EN_Pin LED_INDICATOR_Pin */
  GPIO_InitStruct.Pin = CONT_TEST_EN_Pin|LED_INDICATOR_Pin;
 8000a16:	f242 0302 	movw	r3, #8194	; 0x2002
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <MX_GPIO_Init+0x160>)
 8000a30:	f000 ff58 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_L_Pin MAIN_H_Pin DROGUE_H_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = MAIN_L_Pin|MAIN_H_Pin|DROGUE_H_Pin|GYRO_CS_Pin;
 8000a34:	f241 1303 	movw	r3, #4355	; 0x1103
 8000a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4819      	ldr	r0, [pc, #100]	; (8000ab4 <MX_GPIO_Init+0x164>)
 8000a4e:	f000 ff49 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INT_Pin GYRO_INT_Pin MAG_INT_Pin SD_DET_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin|GYRO_INT_Pin|MAG_INT_Pin|SD_DET_Pin;
 8000a52:	23f0      	movs	r3, #240	; 0xf0
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <MX_GPIO_Init+0x160>)
 8000a66:	f000 ff3d 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_CS_Pin DROGUE_L_Pin BARO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = MAG_CS_Pin|DROGUE_L_Pin|BARO_CS_Pin|ACCEL_CS_Pin;
 8000a6a:	f44f 539a 	mov.w	r3, #4928	; 0x1340
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_GPIO_Init+0x168>)
 8000a84:	f000 ff2e 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_RF_Pin */
  GPIO_InitStruct.Pin = IO_RF_Pin;
 8000a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_RF_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_GPIO_Init+0x164>)
 8000a9e:	f000 ff21 	bl	80018e4 <HAL_GPIO_Init>

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020400 	.word	0x40020400

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	4a0f      	ldr	r2, [pc, #60]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x4c>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40023800 	.word	0x40023800

08000b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <HAL_ADC_MspInit+0xb0>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d141      	bne.n	8000bbe <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a1b      	ldr	r2, [pc, #108]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <HAL_ADC_MspInit+0xb4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    PA2     ------> ADC2_IN2
    PA3     ------> ADC2_IN3
    */
    GPIO_InitStruct.Pin = BATT_VOLT_READ_Pin;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b92:	2303      	movs	r3, #3
 8000b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_VOLT_READ_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <HAL_ADC_MspInit+0xb8>)
 8000ba2:	f000 fe9f 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DROGUE_CONT_Pin|MAIN_CONT_Pin;
 8000ba6:	230c      	movs	r3, #12
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <HAL_ADC_MspInit+0xbc>)
 8000bba:	f000 fe93 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012100 	.word	0x40012100
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_I2C_MspInit+0x84>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12c      	bne.n	8000c54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a17      	ldr	r2, [pc, #92]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1c:	2312      	movs	r3, #18
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	480c      	ldr	r0, [pc, #48]	; (8000c64 <HAL_I2C_MspInit+0x8c>)
 8000c34:	f000 fe56 	bl	80018e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_I2C_MspInit+0x88>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3728      	adds	r7, #40	; 0x28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40005800 	.word	0x40005800
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020400 	.word	0x40020400

08000c68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a28      	ldr	r2, [pc, #160]	; (8000d28 <HAL_SD_MspInit+0xc0>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d14a      	bne.n	8000d20 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b27      	ldr	r3, [pc, #156]	; (8000d2c <HAL_SD_MspInit+0xc4>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a26      	ldr	r2, [pc, #152]	; (8000d2c <HAL_SD_MspInit+0xc4>)
 8000c94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <HAL_SD_MspInit+0xc4>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_SD_MspInit+0xc4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <HAL_SD_MspInit+0xc4>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_SD_MspInit+0xc4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_SD_MspInit+0xc4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <HAL_SD_MspInit+0xc4>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_SD_MspInit+0xc4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000cde:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ce2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <HAL_SD_MspInit+0xc8>)
 8000cfc:	f000 fdf2 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d00:	2304      	movs	r3, #4
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d10:	230c      	movs	r3, #12
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <HAL_SD_MspInit+0xcc>)
 8000d1c:	f000 fde2 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000d20:	bf00      	nop
 8000d22:	3728      	adds	r7, #40	; 0x28
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	40012c00 	.word	0x40012c00
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020c00 	.word	0x40020c00

08000d38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	; 0x40
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a6a      	ldr	r2, [pc, #424]	; (8000f00 <HAL_SPI_MspInit+0x1c8>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12c      	bne.n	8000db4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d5e:	4b69      	ldr	r3, [pc, #420]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a68      	ldr	r2, [pc, #416]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000d64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b66      	ldr	r3, [pc, #408]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d74:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7a:	4b62      	ldr	r3, [pc, #392]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a61      	ldr	r2, [pc, #388]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b5f      	ldr	r3, [pc, #380]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d92:	23f0      	movs	r3, #240	; 0xf0
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000da2:	2305      	movs	r3, #5
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	4856      	ldr	r0, [pc, #344]	; (8000f08 <HAL_SPI_MspInit+0x1d0>)
 8000dae:	f000 fd99 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000db2:	e0a0      	b.n	8000ef6 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a54      	ldr	r2, [pc, #336]	; (8000f0c <HAL_SPI_MspInit+0x1d4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d14b      	bne.n	8000e56 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
 8000dc2:	4b50      	ldr	r3, [pc, #320]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a4f      	ldr	r2, [pc, #316]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b4d      	ldr	r3, [pc, #308]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	623b      	str	r3, [r7, #32]
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a48      	ldr	r2, [pc, #288]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b46      	ldr	r3, [pc, #280]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a41      	ldr	r2, [pc, #260]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b3f      	ldr	r3, [pc, #252]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
 8000e10:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e12:	230c      	movs	r3, #12
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e22:	2305      	movs	r3, #5
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4838      	ldr	r0, [pc, #224]	; (8000f10 <HAL_SPI_MspInit+0x1d8>)
 8000e2e:	f000 fd59 	bl	80018e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e44:	2305      	movs	r3, #5
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4831      	ldr	r0, [pc, #196]	; (8000f14 <HAL_SPI_MspInit+0x1dc>)
 8000e50:	f000 fd48 	bl	80018e4 <HAL_GPIO_Init>
}
 8000e54:	e04f      	b.n	8000ef6 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI3)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <HAL_SPI_MspInit+0x1e0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d14a      	bne.n	8000ef6 <HAL_SPI_MspInit+0x1be>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_SPI_MspInit+0x1cc>)
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <HAL_SPI_MspInit+0x1d0>)
 8000ed2:	f000 fd07 	bl	80018e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ed6:	2338      	movs	r3, #56	; 0x38
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <HAL_SPI_MspInit+0x1dc>)
 8000ef2:	f000 fcf7 	bl	80018e4 <HAL_GPIO_Init>
}
 8000ef6:	bf00      	nop
 8000ef8:	3740      	adds	r7, #64	; 0x40
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40013000 	.word	0x40013000
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40003800 	.word	0x40003800
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40003c00 	.word	0x40003c00

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <HAL_TIM_Base_MspInit+0x3c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10d      	bne.n	8000f4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_TIM_Base_MspInit+0x40>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <HAL_TIM_Base_MspInit+0x40>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_TIM_Base_MspInit+0x40>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40000400 	.word	0x40000400
 8000f5c:	40023800 	.word	0x40023800

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <HAL_UART_MspInit+0x84>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12c      	bne.n	8000fdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f8c:	f043 0310 	orr.w	r3, r3, #16
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a10      	ldr	r2, [pc, #64]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_UART_MspInit+0x88>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <HAL_UART_MspInit+0x8c>)
 8000fd8:	f000 fc84 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fdc:	bf00      	nop
 8000fde:	3728      	adds	r7, #40	; 0x28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40011000 	.word	0x40011000
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f89a 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <OTG_HS_IRQHandler+0x10>)
 800104a:	f001 f8ad 	bl	80021a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200018c4 	.word	0x200018c4

08001058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <SystemInit+0x20>)
 800105e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <SystemInit+0x20>)
 8001064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001084:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001098:	4c0b      	ldr	r4, [pc, #44]	; (80010c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010a6:	f7ff ffd7 	bl	8001058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f009 fdd9 	bl	800ac60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fa0d 	bl	80004cc <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80010c0:	0800ad54 	.word	0x0800ad54
  ldr r2, =_sbss
 80010c4:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80010c8:	20001ff0 	.word	0x20001ff0

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 fbb1 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	200f      	movs	r0, #15
 8001100:	f000 f808 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fce0 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x54>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x58>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	fbb3 f3f1 	udiv	r3, r3, r1
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fbc9 	bl	80018ca <HAL_SYSTICK_Config>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e00e      	b.n	8001160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d80a      	bhi.n	800115e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f000 fb91 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4a06      	ldr	r2, [pc, #24]	; (8001170 <HAL_InitTick+0x5c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	20000008 	.word	0x20000008
 8001170:	20000004 	.word	0x20000004

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000008 	.word	0x20000008
 8001198:	200003cc 	.word	0x200003cc

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200003cc 	.word	0x200003cc

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff ffee 	bl	800119c <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d005      	beq.n	80011da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <HAL_Delay+0x44>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4413      	add	r3, r2
 80011d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011da:	bf00      	nop
 80011dc:	f7ff ffde 	bl	800119c <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8f7      	bhi.n	80011dc <HAL_Delay+0x28>
  {
  }
}
 80011ec:	bf00      	nop
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000008 	.word	0x20000008

080011fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e033      	b.n	800127a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	2b00      	cmp	r3, #0
 8001218:	d109      	bne.n	800122e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fc7c 	bl	8000b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	2b00      	cmp	r3, #0
 8001238:	d118      	bne.n	800126c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001242:	f023 0302 	bic.w	r3, r3, #2
 8001246:	f043 0202 	orr.w	r2, r3, #2
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f93a 	bl	80014c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f023 0303 	bic.w	r3, r3, #3
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
 800126a:	e001      	b.n	8001270 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1c>
 800129c:	2302      	movs	r3, #2
 800129e:	e105      	b.n	80014ac <HAL_ADC_ConfigChannel+0x228>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d925      	bls.n	80012fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68d9      	ldr	r1, [r3, #12]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	3b1e      	subs	r3, #30
 80012c6:	2207      	movs	r2, #7
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43da      	mvns	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	400a      	ands	r2, r1
 80012d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68d9      	ldr	r1, [r3, #12]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4403      	add	r3, r0
 80012ee:	3b1e      	subs	r3, #30
 80012f0:	409a      	lsls	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	e022      	b.n	8001342 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6919      	ldr	r1, [r3, #16]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	2207      	movs	r2, #7
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	400a      	ands	r2, r1
 800131e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6919      	ldr	r1, [r3, #16]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	4603      	mov	r3, r0
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4403      	add	r3, r0
 8001338:	409a      	lsls	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b06      	cmp	r3, #6
 8001348:	d824      	bhi.n	8001394 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b05      	subs	r3, #5
 800135c:	221f      	movs	r2, #31
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	400a      	ands	r2, r1
 800136a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3b05      	subs	r3, #5
 8001386:	fa00 f203 	lsl.w	r2, r0, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	635a      	str	r2, [r3, #52]	; 0x34
 8001392:	e04c      	b.n	800142e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b0c      	cmp	r3, #12
 800139a:	d824      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b23      	subs	r3, #35	; 0x23
 80013ae:	221f      	movs	r2, #31
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43da      	mvns	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	400a      	ands	r2, r1
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b23      	subs	r3, #35	; 0x23
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
 80013e4:	e023      	b.n	800142e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b41      	subs	r3, #65	; 0x41
 80013f8:	221f      	movs	r2, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	400a      	ands	r2, r1
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b41      	subs	r3, #65	; 0x41
 8001422:	fa00 f203 	lsl.w	r2, r0, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <HAL_ADC_ConfigChannel+0x234>)
 8001430:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a21      	ldr	r2, [pc, #132]	; (80014bc <HAL_ADC_ConfigChannel+0x238>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d109      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x1cc>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b12      	cmp	r3, #18
 8001442:	d105      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <HAL_ADC_ConfigChannel+0x238>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d123      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x21e>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b10      	cmp	r3, #16
 8001460:	d003      	beq.n	800146a <HAL_ADC_ConfigChannel+0x1e6>
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b11      	cmp	r3, #17
 8001468:	d11b      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b10      	cmp	r3, #16
 800147c:	d111      	bne.n	80014a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_ADC_ConfigChannel+0x23c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_ADC_ConfigChannel+0x240>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	0c9a      	lsrs	r2, r3, #18
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001494:	e002      	b.n	800149c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3b01      	subs	r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f9      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40012300 	.word	0x40012300
 80014bc:	40012000 	.word	0x40012000
 80014c0:	20000000 	.word	0x20000000
 80014c4:	431bde83 	.word	0x431bde83

080014c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d0:	4b79      	ldr	r3, [pc, #484]	; (80016b8 <ADC_Init+0x1f0>)
 80014d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	021a      	lsls	r2, r3, #8
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6899      	ldr	r1, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	430a      	orrs	r2, r1
 8001554:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155a:	4a58      	ldr	r2, [pc, #352]	; (80016bc <ADC_Init+0x1f4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d022      	beq.n	80015a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800156e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6899      	ldr	r1, [r3, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	430a      	orrs	r2, r1
 8001580:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6899      	ldr	r1, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	e00f      	b.n	80015c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 0202 	bic.w	r2, r2, #2
 80015d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6899      	ldr	r1, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	7e1b      	ldrb	r3, [r3, #24]
 80015e0:	005a      	lsls	r2, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01b      	beq.n	800162c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001602:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001612:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6859      	ldr	r1, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	3b01      	subs	r3, #1
 8001620:	035a      	lsls	r2, r3, #13
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	e007      	b.n	800163c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800163a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	3b01      	subs	r3, #1
 8001658:	051a      	lsls	r2, r3, #20
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6899      	ldr	r1, [r3, #8]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800167e:	025a      	lsls	r2, r3, #9
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6899      	ldr	r1, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	029a      	lsls	r2, r3, #10
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40012300 	.word	0x40012300
 80016bc:	0f000001 	.word	0x0f000001

080016c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d6:	68ba      	ldr	r2, [r7, #8]
 80016d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016dc:	4013      	ands	r3, r2
 80016de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f2:	4a04      	ldr	r2, [pc, #16]	; (8001704 <__NVIC_SetPriorityGrouping+0x44>)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60d3      	str	r3, [r2, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <__NVIC_GetPriorityGrouping+0x18>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0a1b      	lsrs	r3, r3, #8
 8001712:	f003 0307 	and.w	r3, r3, #7
}
 8001716:	4618      	mov	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	2b00      	cmp	r3, #0
 8001734:	db0b      	blt.n	800174e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	f003 021f 	and.w	r2, r3, #31
 800173c:	4907      	ldr	r1, [pc, #28]	; (800175c <__NVIC_EnableIRQ+0x38>)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	2001      	movs	r0, #1
 8001746:	fa00 f202 	lsl.w	r2, r0, r2
 800174a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff29 	bl	80016c0 <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff3e 	bl	8001708 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ff31 	bl	8001724 <__NVIC_EnableIRQ>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff ffa2 	bl	800181c <SysTick_Config>
 80018d8:	4603      	mov	r3, r0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e16b      	b.n	8001bd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 815a 	bne.w	8001bd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d005      	beq.n	8001936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	2b02      	cmp	r3, #2
 8001934:	d130      	bne.n	8001998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0201 	and.w	r2, r3, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d017      	beq.n	80019d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d123      	bne.n	8001a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80b4 	beq.w	8001bd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a5f      	ldr	r2, [pc, #380]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <HAL_GPIO_Init+0x30c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a86:	4a5b      	ldr	r2, [pc, #364]	; (8001bf4 <HAL_GPIO_Init+0x310>)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_GPIO_Init+0x314>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d02b      	beq.n	8001b0a <HAL_GPIO_Init+0x226>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <HAL_GPIO_Init+0x318>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d025      	beq.n	8001b06 <HAL_GPIO_Init+0x222>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a50      	ldr	r2, [pc, #320]	; (8001c00 <HAL_GPIO_Init+0x31c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d01f      	beq.n	8001b02 <HAL_GPIO_Init+0x21e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <HAL_GPIO_Init+0x320>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d019      	beq.n	8001afe <HAL_GPIO_Init+0x21a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <HAL_GPIO_Init+0x324>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0x216>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_GPIO_Init+0x328>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_GPIO_Init+0x212>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4c      	ldr	r2, [pc, #304]	; (8001c10 <HAL_GPIO_Init+0x32c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x20e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4b      	ldr	r2, [pc, #300]	; (8001c14 <HAL_GPIO_Init+0x330>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_GPIO_Init+0x20a>
 8001aea:	2307      	movs	r3, #7
 8001aec:	e00e      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001aee:	2308      	movs	r3, #8
 8001af0:	e00c      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001af2:	2306      	movs	r3, #6
 8001af4:	e00a      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001af6:	2305      	movs	r3, #5
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x228>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	f002 0203 	and.w	r2, r2, #3
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <HAL_GPIO_Init+0x310>)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2a:	4b3b      	ldr	r3, [pc, #236]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4013      	ands	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b4e:	4a32      	ldr	r2, [pc, #200]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b54:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b7e:	4b26      	ldr	r3, [pc, #152]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba2:	4a1d      	ldr	r2, [pc, #116]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	f67f ae90 	bls.w	8001900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40013800 	.word	0x40013800
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40020800 	.word	0x40020800
 8001c04:	40020c00 	.word	0x40020c00
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40021400 	.word	0x40021400
 8001c10:	40021800 	.word	0x40021800
 8001c14:	40021c00 	.word	0x40021c00
 8001c18:	40013c00 	.word	0x40013c00

08001c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	807b      	strh	r3, [r7, #2]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c5c:	787b      	ldrb	r3, [r7, #1]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c68:	e003      	b.n	8001c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c6a:	887b      	ldrh	r3, [r7, #2]
 8001c6c:	041a      	lsls	r2, r3, #16
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	619a      	str	r2, [r3, #24]
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e12b      	b.n	8001eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7fe ff96 	bl	8000bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2224      	movs	r2, #36	; 0x24
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0201 	bic.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ce4:	f001 ffbe 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8001ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4a81      	ldr	r2, [pc, #516]	; (8001ef4 <HAL_I2C_Init+0x274>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d807      	bhi.n	8001d04 <HAL_I2C_Init+0x84>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a80      	ldr	r2, [pc, #512]	; (8001ef8 <HAL_I2C_Init+0x278>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	bf94      	ite	ls
 8001cfc:	2301      	movls	r3, #1
 8001cfe:	2300      	movhi	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	e006      	b.n	8001d12 <HAL_I2C_Init+0x92>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4a7d      	ldr	r2, [pc, #500]	; (8001efc <HAL_I2C_Init+0x27c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	bf94      	ite	ls
 8001d0c:	2301      	movls	r3, #1
 8001d0e:	2300      	movhi	r3, #0
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0e7      	b.n	8001eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4a78      	ldr	r2, [pc, #480]	; (8001f00 <HAL_I2C_Init+0x280>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0c9b      	lsrs	r3, r3, #18
 8001d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68ba      	ldr	r2, [r7, #8]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	4a6a      	ldr	r2, [pc, #424]	; (8001ef4 <HAL_I2C_Init+0x274>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d802      	bhi.n	8001d54 <HAL_I2C_Init+0xd4>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3301      	adds	r3, #1
 8001d52:	e009      	b.n	8001d68 <HAL_I2C_Init+0xe8>
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	4a69      	ldr	r2, [pc, #420]	; (8001f04 <HAL_I2C_Init+0x284>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	099b      	lsrs	r3, r3, #6
 8001d66:	3301      	adds	r3, #1
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	495c      	ldr	r1, [pc, #368]	; (8001ef4 <HAL_I2C_Init+0x274>)
 8001d84:	428b      	cmp	r3, r1
 8001d86:	d819      	bhi.n	8001dbc <HAL_I2C_Init+0x13c>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1e59      	subs	r1, r3, #1
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d96:	1c59      	adds	r1, r3, #1
 8001d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00a      	beq.n	8001db8 <HAL_I2C_Init+0x138>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1e59      	subs	r1, r3, #1
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db6:	e051      	b.n	8001e5c <HAL_I2C_Init+0x1dc>
 8001db8:	2304      	movs	r3, #4
 8001dba:	e04f      	b.n	8001e5c <HAL_I2C_Init+0x1dc>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d111      	bne.n	8001de8 <HAL_I2C_Init+0x168>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1e58      	subs	r0, r3, #1
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	440b      	add	r3, r1
 8001dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e012      	b.n	8001e0e <HAL_I2C_Init+0x18e>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	440b      	add	r3, r1
 8001df6:	0099      	lsls	r1, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfe:	3301      	adds	r3, #1
 8001e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Init+0x196>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e022      	b.n	8001e5c <HAL_I2C_Init+0x1dc>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10e      	bne.n	8001e3c <HAL_I2C_Init+0x1bc>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1e58      	subs	r0, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	440b      	add	r3, r1
 8001e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e30:	3301      	adds	r3, #1
 8001e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e3a:	e00f      	b.n	8001e5c <HAL_I2C_Init+0x1dc>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1e58      	subs	r0, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6859      	ldr	r1, [r3, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	0099      	lsls	r1, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	6809      	ldr	r1, [r1, #0]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6911      	ldr	r1, [r2, #16]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68d2      	ldr	r2, [r2, #12]
 8001e96:	4311      	orrs	r1, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	000186a0 	.word	0x000186a0
 8001ef8:	001e847f 	.word	0x001e847f
 8001efc:	003d08ff 	.word	0x003d08ff
 8001f00:	431bde83 	.word	0x431bde83
 8001f04:	10624dd3 	.word	0x10624dd3

08001f08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0a:	b08f      	sub	sp, #60	; 0x3c
 8001f0c:	af0a      	add	r7, sp, #40	; 0x28
 8001f0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e10f      	b.n	800213a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d106      	bne.n	8001f3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f008 fb7d 	bl	800a634 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f004 fcd6 	bl	800690a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	687e      	ldr	r6, [r7, #4]
 8001f66:	466d      	mov	r5, sp
 8001f68:	f106 0410 	add.w	r4, r6, #16
 8001f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f78:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f7c:	1d33      	adds	r3, r6, #4
 8001f7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	f004 fbad 	bl	80066e0 <USB_CoreInit>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0d0      	b.n	800213a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 fcc4 	bl	800692c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e04a      	b.n	8002040 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	333d      	adds	r3, #61	; 0x3d
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	333c      	adds	r3, #60	; 0x3c
 8001fce:	7bfa      	ldrb	r2, [r7, #15]
 8001fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	b298      	uxth	r0, r3
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3344      	adds	r3, #68	; 0x44
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3340      	adds	r3, #64	; 0x40
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	3348      	adds	r3, #72	; 0x48
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	334c      	adds	r3, #76	; 0x4c
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	3354      	adds	r3, #84	; 0x54
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	3301      	adds	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	429a      	cmp	r2, r3
 8002048:	d3af      	bcc.n	8001faa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e044      	b.n	80020da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020a8:	7bfa      	ldrb	r2, [r7, #15]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	3301      	adds	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d3b5      	bcc.n	8002050 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	687e      	ldr	r6, [r7, #4]
 80020ec:	466d      	mov	r5, sp
 80020ee:	f106 0410 	add.w	r4, r6, #16
 80020f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002102:	1d33      	adds	r3, r6, #4
 8002104:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002106:	6838      	ldr	r0, [r7, #0]
 8002108:	f004 fc5c 	bl	80069c4 <USB_DevInit>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2202      	movs	r2, #2
 8002116:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00d      	b.n	800213a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f005 fdab 	bl	8007c8e <USB_DevDisconnect>

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002142 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_PCD_Start+0x1c>
 800215a:	2302      	movs	r3, #2
 800215c:	e020      	b.n	80021a0 <HAL_PCD_Start+0x5e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	2b01      	cmp	r3, #1
 800216c:	d109      	bne.n	8002182 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002172:	2b01      	cmp	r3, #1
 8002174:	d005      	beq.n	8002182 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fbae 	bl	80068e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f005 fd5b 	bl	8007c4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b08d      	sub	sp, #52	; 0x34
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f005 fe19 	bl	8007df6 <USB_GetMode>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 848a 	bne.w	8002ae0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f005 fd7d 	bl	8007cd0 <USB_ReadInterrupts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 8480 	beq.w	8002ade <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 fd6a 	bl	8007cd0 <USB_ReadInterrupts>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	d107      	bne.n	8002216 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f002 0202 	and.w	r2, r2, #2
 8002214:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f005 fd58 	bl	8007cd0 <USB_ReadInterrupts>
 8002220:	4603      	mov	r3, r0
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b10      	cmp	r3, #16
 8002228:	d161      	bne.n	80022ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0210 	bic.w	r2, r2, #16
 8002238:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	f003 020f 	and.w	r2, r3, #15
 8002246:	4613      	mov	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	3304      	adds	r3, #4
 8002258:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	0c5b      	lsrs	r3, r3, #17
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	2b02      	cmp	r3, #2
 8002264:	d124      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d035      	beq.n	80022de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800227c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	6a38      	ldr	r0, [r7, #32]
 8002286:	f005 fb8f 	bl	80079a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002296:	441a      	add	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	6a1a      	ldr	r2, [r3, #32]
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	091b      	lsrs	r3, r3, #4
 80022a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022a8:	441a      	add	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	621a      	str	r2, [r3, #32]
 80022ae:	e016      	b.n	80022de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	0c5b      	lsrs	r3, r3, #17
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	2b06      	cmp	r3, #6
 80022ba:	d110      	bne.n	80022de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c2:	2208      	movs	r2, #8
 80022c4:	4619      	mov	r1, r3
 80022c6:	6a38      	ldr	r0, [r7, #32]
 80022c8:	f005 fb6e 	bl	80079a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d8:	441a      	add	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699a      	ldr	r2, [r3, #24]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0210 	orr.w	r2, r2, #16
 80022ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f005 fcec 	bl	8007cd0 <USB_ReadInterrupts>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002302:	f040 80a7 	bne.w	8002454 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f005 fcf1 	bl	8007cf6 <USB_ReadDevAllOutEpInterrupt>
 8002314:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002316:	e099      	b.n	800244c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 808e 	beq.w	8002440 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f005 fd15 	bl	8007d5e <USB_ReadDevOutEPInterrupt>
 8002334:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00c      	beq.n	800235a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	2301      	movs	r3, #1
 8002350:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fec3 	bl	80030e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00c      	beq.n	800237e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002370:	461a      	mov	r2, r3
 8002372:	2308      	movs	r3, #8
 8002374:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 ff99 	bl	80032b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002394:	461a      	mov	r2, r3
 8002396:	2310      	movs	r3, #16
 8002398:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d030      	beq.n	8002406 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ac:	2b80      	cmp	r3, #128	; 0x80
 80023ae:	d109      	bne.n	80023c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	69fa      	ldr	r2, [r7, #28]
 80023ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	78db      	ldrb	r3, [r3, #3]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2200      	movs	r2, #0
 80023e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f008 fa22 	bl	800a838 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	015a      	lsls	r2, r3, #5
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002400:	461a      	mov	r2, r3
 8002402:	2302      	movs	r3, #2
 8002404:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	015a      	lsls	r2, r3, #5
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	4413      	add	r3, r2
 8002418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241c:	461a      	mov	r2, r3
 800241e:	2320      	movs	r3, #32
 8002420:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002438:	461a      	mov	r2, r3
 800243a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800243e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	3301      	adds	r3, #1
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002448:	085b      	lsrs	r3, r3, #1
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	2b00      	cmp	r3, #0
 8002450:	f47f af62 	bne.w	8002318 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f005 fc39 	bl	8007cd0 <USB_ReadInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002464:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002468:	f040 80db 	bne.w	8002622 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f005 fc5a 	bl	8007d2a <USB_ReadDevAllInEpInterrupt>
 8002476:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800247c:	e0cd      	b.n	800261a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80c2 	beq.w	800260e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f005 fc80 	bl	8007d9a <USB_ReadDevInEPInterrupt>
 800249a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d057      	beq.n	8002556 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	2201      	movs	r2, #1
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69f9      	ldr	r1, [r7, #28]
 80024c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024c6:	4013      	ands	r3, r2
 80024c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d6:	461a      	mov	r2, r3
 80024d8:	2301      	movs	r3, #1
 80024da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d132      	bne.n	800254a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334c      	adds	r3, #76	; 0x4c
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4403      	add	r3, r0
 8002504:	3348      	adds	r3, #72	; 0x48
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4419      	add	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4403      	add	r3, r0
 8002518:	334c      	adds	r3, #76	; 0x4c
 800251a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	2b00      	cmp	r3, #0
 8002520:	d113      	bne.n	800254a <HAL_PCD_IRQHandler+0x3a2>
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3354      	adds	r3, #84	; 0x54
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d108      	bne.n	800254a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002542:	461a      	mov	r2, r3
 8002544:	2101      	movs	r1, #1
 8002546:	f005 fc87 	bl	8007e58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	b2db      	uxtb	r3, r3
 800254e:	4619      	mov	r1, r3
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f008 f8ec 	bl	800a72e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d008      	beq.n	8002572 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800256c:	461a      	mov	r2, r3
 800256e:	2308      	movs	r3, #8
 8002570:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	4413      	add	r3, r2
 8002584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002588:	461a      	mov	r2, r3
 800258a:	2310      	movs	r3, #16
 800258c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b00      	cmp	r3, #0
 8002596:	d008      	beq.n	80025aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a4:	461a      	mov	r2, r3
 80025a6:	2340      	movs	r3, #64	; 0x40
 80025a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025b6:	6a38      	ldr	r0, [r7, #32]
 80025b8:	f004 fb68 	bl	8006c8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	4613      	mov	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	3338      	adds	r3, #56	; 0x38
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	3304      	adds	r3, #4
 80025ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	78db      	ldrb	r3, [r3, #3]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2200      	movs	r2, #0
 80025dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	4619      	mov	r1, r3
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f008 f939 	bl	800a85c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ec:	015a      	lsls	r2, r3, #5
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	4413      	add	r3, r2
 80025f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025f6:	461a      	mov	r2, r3
 80025f8:	2302      	movs	r3, #2
 80025fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fcdb 	bl	8002fc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	f47f af2e 	bne.w	800247e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f005 fb52 	bl	8007cd0 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002636:	d122      	bne.n	800267e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002646:	f023 0301 	bic.w	r3, r3, #1
 800264a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800265e:	2100      	movs	r1, #0
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 fec3 	bl	80033ec <HAL_PCDEx_LPM_Callback>
 8002666:	e002      	b.n	800266e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f008 f8d7 	bl	800a81c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695a      	ldr	r2, [r3, #20]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800267c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f005 fb24 	bl	8007cd0 <USB_ReadInterrupts>
 8002688:	4603      	mov	r3, r0
 800268a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800268e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002692:	d112      	bne.n	80026ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d102      	bne.n	80026aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f008 f893 	bl	800a7d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026b8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f005 fb06 	bl	8007cd0 <USB_ReadInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ce:	f040 80b7 	bne.w	8002840 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2110      	movs	r1, #16
 80026ec:	4618      	mov	r0, r3
 80026ee:	f004 facd 	bl	8006c8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f6:	e046      	b.n	8002786 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002704:	461a      	mov	r2, r3
 8002706:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800270a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270e:	015a      	lsls	r2, r3, #5
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800271c:	0151      	lsls	r1, r2, #5
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	440a      	add	r2, r1
 8002722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002726:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800272a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800273e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	4413      	add	r3, r2
 8002748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002750:	0151      	lsls	r1, r2, #5
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	440a      	add	r2, r1
 8002756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800275a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800275e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	4413      	add	r3, r2
 8002768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002770:	0151      	lsls	r1, r2, #5
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	440a      	add	r2, r1
 8002776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800277a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800277e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	3301      	adds	r3, #1
 8002784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278c:	429a      	cmp	r2, r3
 800278e:	d3b3      	bcc.n	80026f8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	69fa      	ldr	r2, [r7, #28]
 800279a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80027a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d016      	beq.n	80027da <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027bc:	f043 030b 	orr.w	r3, r3, #11
 80027c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027d2:	f043 030b 	orr.w	r3, r3, #11
 80027d6:	6453      	str	r3, [r2, #68]	; 0x44
 80027d8:	e015      	b.n	8002806 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002800:	f043 030b 	orr.w	r3, r3, #11
 8002804:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002814:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002818:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800282a:	461a      	mov	r2, r3
 800282c:	f005 fb14 	bl	8007e58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800283e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f005 fa43 	bl	8007cd0 <USB_ReadInterrupts>
 800284a:	4603      	mov	r3, r0
 800284c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002854:	d124      	bne.n	80028a0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f005 fad9 	bl	8007e12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f004 fa8e 	bl	8006d86 <USB_GetDevSpeed>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681c      	ldr	r4, [r3, #0]
 8002876:	f001 f9e9 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 800287a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	4620      	mov	r0, r4
 8002886:	f003 ff8d 	bl	80067a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f007 ff77 	bl	800a77e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695a      	ldr	r2, [r3, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800289e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f005 fa13 	bl	8007cd0 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d10a      	bne.n	80028ca <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f007 ff54 	bl	800a762 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f002 0208 	and.w	r2, r2, #8
 80028c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f005 f9fe 	bl	8007cd0 <USB_ReadInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028da:	2b80      	cmp	r3, #128	; 0x80
 80028dc:	d122      	bne.n	8002924 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ea:	2301      	movs	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	e014      	b.n	800291a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	b2db      	uxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fb27 	bl	8002f62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	3301      	adds	r3, #1
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002920:	429a      	cmp	r2, r3
 8002922:	d3e5      	bcc.n	80028f0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f005 f9d1 	bl	8007cd0 <USB_ReadInterrupts>
 800292e:	4603      	mov	r3, r0
 8002930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002938:	d13b      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800293a:	2301      	movs	r3, #1
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
 800293e:	e02b      	b.n	8002998 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3340      	adds	r3, #64	; 0x40
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d115      	bne.n	8002992 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002966:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002968:	2b00      	cmp	r3, #0
 800296a:	da12      	bge.n	8002992 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	333f      	adds	r3, #63	; 0x3f
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fae8 	bl	8002f62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	3301      	adds	r3, #1
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299e:	429a      	cmp	r2, r3
 80029a0:	d3ce      	bcc.n	8002940 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f005 f98a 	bl	8007cd0 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c6:	d155      	bne.n	8002a74 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
 80029cc:	e045      	b.n	8002a5a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d12e      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da2b      	bge.n	8002a54 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002a08:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d121      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a14:	4613      	mov	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10a      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	69fa      	ldr	r2, [r7, #28]
 8002a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a50:	6053      	str	r3, [r2, #4]
            break;
 8002a52:	e007      	b.n	8002a64 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	3301      	adds	r3, #1
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d3b4      	bcc.n	80029ce <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f005 f929 	bl	8007cd0 <USB_ReadInterrupts>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a88:	d10a      	bne.n	8002aa0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f007 fef8 	bl	800a880 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f005 f913 	bl	8007cd0 <USB_ReadInterrupts>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d115      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f007 fee8 	bl	800a89c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6859      	ldr	r1, [r3, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	e000      	b.n	8002ae0 <HAL_PCD_IRQHandler+0x938>
      return;
 8002ade:	bf00      	nop
    }
  }
}
 8002ae0:	3734      	adds	r7, #52	; 0x34
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd90      	pop	{r4, r7, pc}

08002ae6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_PCD_SetAddress+0x1a>
 8002afc:	2302      	movs	r3, #2
 8002afe:	e013      	b.n	8002b28 <HAL_PCD_SetAddress+0x42>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f005 f871 	bl	8007c00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	4608      	mov	r0, r1
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4603      	mov	r3, r0
 8002b40:	70fb      	strb	r3, [r7, #3]
 8002b42:	460b      	mov	r3, r1
 8002b44:	803b      	strh	r3, [r7, #0]
 8002b46:	4613      	mov	r3, r2
 8002b48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	da0f      	bge.n	8002b76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b56:	78fb      	ldrb	r3, [r7, #3]
 8002b58:	f003 020f 	and.w	r2, r3, #15
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	3338      	adds	r3, #56	; 0x38
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4413      	add	r3, r2
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	705a      	strb	r2, [r3, #1]
 8002b74:	e00f      	b.n	8002b96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b76:	78fb      	ldrb	r3, [r7, #3]
 8002b78:	f003 020f 	and.w	r2, r3, #15
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ba2:	883a      	ldrh	r2, [r7, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	78ba      	ldrb	r2, [r7, #2]
 8002bac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d004      	beq.n	8002bc0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bc0:	78bb      	ldrb	r3, [r7, #2]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d102      	bne.n	8002bcc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_PCD_EP_Open+0xaa>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e00e      	b.n	8002bf8 <HAL_PCD_EP_Open+0xc8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68f9      	ldr	r1, [r7, #12]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f004 f8f1 	bl	8006dd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	da0f      	bge.n	8002c34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 020f 	and.w	r2, r3, #15
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	3338      	adds	r3, #56	; 0x38
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	705a      	strb	r2, [r3, #1]
 8002c32:	e00f      	b.n	8002c54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 020f 	and.w	r2, r3, #15
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_PCD_EP_Close+0x6e>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e00e      	b.n	8002c8c <HAL_PCD_EP_Close+0x8c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f004 f92f 	bl	8006ee0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca4:	7afb      	ldrb	r3, [r7, #11]
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3304      	adds	r3, #4
 8002cbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd6:	7afb      	ldrb	r3, [r7, #11]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d102      	bne.n	8002cf0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cf0:	7afb      	ldrb	r3, [r7, #11]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	6979      	ldr	r1, [r7, #20]
 8002d08:	f004 fc0e 	bl	8007528 <USB_EP0StartXfer>
 8002d0c:	e008      	b.n	8002d20 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6979      	ldr	r1, [r7, #20]
 8002d1c:	f004 f9bc 	bl	8007098 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	f003 020f 	and.w	r2, r3, #15
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002d4c:	681b      	ldr	r3, [r3, #0]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	460b      	mov	r3, r1
 8002d68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
 8002d6c:	f003 020f 	and.w	r2, r3, #15
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	3338      	adds	r3, #56	; 0x38
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3304      	adds	r3, #4
 8002d80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2201      	movs	r2, #1
 8002d98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d102      	bne.n	8002db4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002db4:	7afb      	ldrb	r3, [r7, #11]
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6979      	ldr	r1, [r7, #20]
 8002dcc:	f004 fbac 	bl	8007528 <USB_EP0StartXfer>
 8002dd0:	e008      	b.n	8002de4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	6979      	ldr	r1, [r7, #20]
 8002de0:	f004 f95a 	bl	8007098 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d901      	bls.n	8002e0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e050      	b.n	8002eae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	da0f      	bge.n	8002e34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	f003 020f 	and.w	r2, r3, #15
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	3338      	adds	r3, #56	; 0x38
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	4413      	add	r3, r2
 8002e28:	3304      	adds	r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	705a      	strb	r2, [r3, #1]
 8002e32:	e00d      	b.n	8002e50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e56:	78fb      	ldrb	r3, [r7, #3]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_PCD_EP_SetStall+0x82>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e01e      	b.n	8002eae <HAL_PCD_EP_SetStall+0xc0>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68f9      	ldr	r1, [r7, #12]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 fdea 	bl	8007a58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	b2d9      	uxtb	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f004 ffda 	bl	8007e58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d901      	bls.n	8002ed4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e042      	b.n	8002f5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da0f      	bge.n	8002efc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 020f 	and.w	r2, r3, #15
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	3338      	adds	r3, #56	; 0x38
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	4413      	add	r3, r2
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	705a      	strb	r2, [r3, #1]
 8002efa:	e00f      	b.n	8002f1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	f003 020f 	and.w	r2, r3, #15
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	3304      	adds	r3, #4
 8002f14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_PCD_EP_ClrStall+0x86>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e00e      	b.n	8002f5a <HAL_PCD_EP_ClrStall+0xa4>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68f9      	ldr	r1, [r7, #12]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 fdf2 	bl	8007b34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da0c      	bge.n	8002f90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	3338      	adds	r3, #56	; 0x38
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	e00c      	b.n	8002faa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 020f 	and.w	r2, r3, #15
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68f9      	ldr	r1, [r7, #12]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fc11 	bl	80077d8 <USB_EPStopXfer>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002fba:	7afb      	ldrb	r3, [r7, #11]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	3338      	adds	r3, #56	; 0x38
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a1a      	ldr	r2, [r3, #32]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d901      	bls.n	8002ffc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e06c      	b.n	80030d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	429a      	cmp	r2, r3
 8003010:	d902      	bls.n	8003018 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	3303      	adds	r3, #3
 800301c:	089b      	lsrs	r3, r3, #2
 800301e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003020:	e02b      	b.n	800307a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	429a      	cmp	r2, r3
 8003036:	d902      	bls.n	800303e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3303      	adds	r3, #3
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6919      	ldr	r1, [r3, #16]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	b2da      	uxtb	r2, r3
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003056:	b2db      	uxtb	r3, r3
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4603      	mov	r3, r0
 800305c:	6978      	ldr	r0, [r7, #20]
 800305e:	f004 fc65 	bl	800792c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	691a      	ldr	r2, [r3, #16]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	441a      	add	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1a      	ldr	r2, [r3, #32]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	441a      	add	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	b29b      	uxth	r3, r3
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	429a      	cmp	r2, r3
 800308e:	d809      	bhi.n	80030a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003098:	429a      	cmp	r2, r3
 800309a:	d203      	bcs.n	80030a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1be      	bne.n	8003022 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	699a      	ldr	r2, [r3, #24]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d811      	bhi.n	80030d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	2201      	movs	r2, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	6939      	ldr	r1, [r7, #16]
 80030cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030d0:	4013      	ands	r3, r2
 80030d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	333c      	adds	r3, #60	; 0x3c
 80030f8:	3304      	adds	r3, #4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d17b      	bne.n	800320e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	4a61      	ldr	r2, [pc, #388]	; (80032a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	f240 80b9 	bls.w	800329c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80b3 	beq.w	800329c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	461a      	mov	r2, r3
 8003144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003148:	6093      	str	r3, [r2, #8]
 800314a:	e0a7      	b.n	800329c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003162:	461a      	mov	r2, r3
 8003164:	2320      	movs	r3, #32
 8003166:	6093      	str	r3, [r2, #8]
 8003168:	e098      	b.n	800329c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	f040 8093 	bne.w	800329c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	4a4b      	ldr	r2, [pc, #300]	; (80032a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d90f      	bls.n	800319e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	4413      	add	r3, r2
 8003190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003194:	461a      	mov	r2, r3
 8003196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800319a:	6093      	str	r3, [r2, #8]
 800319c:	e07e      	b.n	800329c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	3304      	adds	r3, #4
 80031b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	69da      	ldr	r2, [r3, #28]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	0159      	lsls	r1, r3, #5
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	440b      	add	r3, r1
 80031c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ca:	1ad2      	subs	r2, r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d114      	bne.n	8003200 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d109      	bne.n	80031f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031e8:	461a      	mov	r2, r3
 80031ea:	2101      	movs	r1, #1
 80031ec:	f004 fe34 	bl	8007e58 <USB_EP0_OutStart>
 80031f0:	e006      	b.n	8003200 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	441a      	add	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f007 fa76 	bl	800a6f8 <HAL_PCD_DataOutStageCallback>
 800320c:	e046      	b.n	800329c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	4a26      	ldr	r2, [pc, #152]	; (80032ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d124      	bne.n	8003260 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00a      	beq.n	8003236 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322c:	461a      	mov	r2, r3
 800322e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003232:	6093      	str	r3, [r2, #8]
 8003234:	e032      	b.n	800329c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324c:	461a      	mov	r2, r3
 800324e:	2320      	movs	r3, #32
 8003250:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	4619      	mov	r1, r3
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f007 fa4d 	bl	800a6f8 <HAL_PCD_DataOutStageCallback>
 800325e:	e01d      	b.n	800329c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d114      	bne.n	8003290 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d108      	bne.n	8003290 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003288:	461a      	mov	r2, r3
 800328a:	2100      	movs	r1, #0
 800328c:	f004 fde4 	bl	8007e58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f007 fa2e 	bl	800a6f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	4f54300a 	.word	0x4f54300a
 80032ac:	4f54310a 	.word	0x4f54310a

080032b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	333c      	adds	r3, #60	; 0x3c
 80032c8:	3304      	adds	r3, #4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a15      	ldr	r2, [pc, #84]	; (8003338 <PCD_EP_OutSetupPacket_int+0x88>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d90e      	bls.n	8003304 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003302:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f007 f9e5 	bl	800a6d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <PCD_EP_OutSetupPacket_int+0x88>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d90c      	bls.n	800332c <PCD_EP_OutSetupPacket_int+0x7c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d108      	bne.n	800332c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003324:	461a      	mov	r2, r3
 8003326:	2101      	movs	r1, #1
 8003328:	f004 fd96 	bl	8007e58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	4f54300a 	.word	0x4f54300a

0800333c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
 8003348:	4613      	mov	r3, r2
 800334a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d107      	bne.n	800336a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800335a:	883b      	ldrh	r3, [r7, #0]
 800335c:	0419      	lsls	r1, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	430a      	orrs	r2, r1
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
 8003368:	e028      	b.n	80033bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003370:	0c1b      	lsrs	r3, r3, #16
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	4413      	add	r3, r2
 8003376:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003378:	2300      	movs	r3, #0
 800337a:	73fb      	strb	r3, [r7, #15]
 800337c:	e00d      	b.n	800339a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	3340      	adds	r3, #64	; 0x40
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4413      	add	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	3301      	adds	r3, #1
 8003398:	73fb      	strb	r3, [r7, #15]
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	3b01      	subs	r3, #1
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d3ec      	bcc.n	800337e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033a4:	883b      	ldrh	r3, [r7, #0]
 80033a6:	0418      	lsls	r0, r3, #16
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	4302      	orrs	r2, r0
 80033b4:	3340      	adds	r3, #64	; 0x40
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	887a      	ldrh	r2, [r7, #2]
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e267      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d075      	beq.n	800350e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003422:	4b88      	ldr	r3, [pc, #544]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b04      	cmp	r3, #4
 800342c:	d00c      	beq.n	8003448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342e:	4b85      	ldr	r3, [pc, #532]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003436:	2b08      	cmp	r3, #8
 8003438:	d112      	bne.n	8003460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343a:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003446:	d10b      	bne.n	8003460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d05b      	beq.n	800350c <HAL_RCC_OscConfig+0x108>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d157      	bne.n	800350c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e242      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d106      	bne.n	8003478 <HAL_RCC_OscConfig+0x74>
 800346a:	4b76      	ldr	r3, [pc, #472]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a75      	ldr	r2, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e01d      	b.n	80034b4 <HAL_RCC_OscConfig+0xb0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x98>
 8003482:	4b70      	ldr	r3, [pc, #448]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6f      	ldr	r2, [pc, #444]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b6d      	ldr	r3, [pc, #436]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6c      	ldr	r2, [pc, #432]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0xb0>
 800349c:	4b69      	ldr	r3, [pc, #420]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a68      	ldr	r2, [pc, #416]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4b66      	ldr	r3, [pc, #408]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a65      	ldr	r2, [pc, #404]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fd fe6e 	bl	800119c <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fd fe6a 	bl	800119c <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e207      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b5b      	ldr	r3, [pc, #364]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0xc0>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7fd fe5a 	bl	800119c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fd fe56 	bl	800119c <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e1f3      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	4b51      	ldr	r3, [pc, #324]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0xe8>
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d063      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351a:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352e:	2b08      	cmp	r3, #8
 8003530:	d11c      	bne.n	800356c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003532:	4b44      	ldr	r3, [pc, #272]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d116      	bne.n	800356c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	4b41      	ldr	r3, [pc, #260]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_RCC_OscConfig+0x152>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1c7      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4937      	ldr	r1, [pc, #220]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	e03a      	b.n	80035e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003574:	4b34      	ldr	r3, [pc, #208]	; (8003648 <HAL_RCC_OscConfig+0x244>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fd fe0f 	bl	800119c <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003582:	f7fd fe0b 	bl	800119c <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e1a8      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003594:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4925      	ldr	r1, [pc, #148]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]
 80035b4:	e015      	b.n	80035e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_OscConfig+0x244>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fd fdee 	bl	800119c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c4:	f7fd fdea 	bl	800119c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e187      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d036      	beq.n	800365c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d016      	beq.n	8003624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_RCC_OscConfig+0x248>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fd fdce 	bl	800119c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003604:	f7fd fdca 	bl	800119c <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e167      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x200>
 8003622:	e01b      	b.n	800365c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_OscConfig+0x248>)
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362a:	f7fd fdb7 	bl	800119c <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	e00e      	b.n	8003650 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003632:	f7fd fdb3 	bl	800119c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d907      	bls.n	8003650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e150      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
 8003644:	40023800 	.word	0x40023800
 8003648:	42470000 	.word	0x42470000
 800364c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	4b88      	ldr	r3, [pc, #544]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ea      	bne.n	8003632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8097 	beq.w	8003798 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366e:	4b81      	ldr	r3, [pc, #516]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	4b7d      	ldr	r3, [pc, #500]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a7c      	ldr	r2, [pc, #496]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	4b7a      	ldr	r3, [pc, #488]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b77      	ldr	r3, [pc, #476]	; (8003878 <HAL_RCC_OscConfig+0x474>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d118      	bne.n	80036d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a6:	4b74      	ldr	r3, [pc, #464]	; (8003878 <HAL_RCC_OscConfig+0x474>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a73      	ldr	r2, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x474>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b2:	f7fd fd73 	bl	800119c <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ba:	f7fd fd6f 	bl	800119c <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e10c      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_OscConfig+0x474>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x2ea>
 80036e0:	4b64      	ldr	r3, [pc, #400]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	4a63      	ldr	r2, [pc, #396]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
 80036ec:	e01c      	b.n	8003728 <HAL_RCC_OscConfig+0x324>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b05      	cmp	r3, #5
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x30c>
 80036f6:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a5e      	ldr	r2, [pc, #376]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80036fc:	f043 0304 	orr.w	r3, r3, #4
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
 8003702:	4b5c      	ldr	r3, [pc, #368]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a5b      	ldr	r2, [pc, #364]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	e00b      	b.n	8003728 <HAL_RCC_OscConfig+0x324>
 8003710:	4b58      	ldr	r3, [pc, #352]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a57      	ldr	r2, [pc, #348]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
 800371c:	4b55      	ldr	r3, [pc, #340]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a54      	ldr	r2, [pc, #336]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003722:	f023 0304 	bic.w	r3, r3, #4
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fd fd34 	bl	800119c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fd fd30 	bl	800119c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0cb      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0ee      	beq.n	8003738 <HAL_RCC_OscConfig+0x334>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375c:	f7fd fd1e 	bl	800119c <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fd fd1a 	bl	800119c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0b5      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377a:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ee      	bne.n	8003764 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378c:	4b39      	ldr	r3, [pc, #228]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	4a38      	ldr	r2, [pc, #224]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003796:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80a1 	beq.w	80038e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a2:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d05c      	beq.n	8003868 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d141      	bne.n	800383a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b6:	4b31      	ldr	r3, [pc, #196]	; (800387c <HAL_RCC_OscConfig+0x478>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fcee 	bl	800119c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fd fcea 	bl	800119c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e087      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69da      	ldr	r2, [r3, #28]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	019b      	lsls	r3, r3, #6
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	3b01      	subs	r3, #1
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	491b      	ldr	r1, [pc, #108]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_RCC_OscConfig+0x478>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fd fcc3 	bl	800119c <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381a:	f7fd fcbf 	bl	800119c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e05c      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x416>
 8003838:	e054      	b.n	80038e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_RCC_OscConfig+0x478>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fd fcac 	bl	800119c <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003848:	f7fd fca8 	bl	800119c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e045      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x444>
 8003866:	e03d      	b.n	80038e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e038      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000
 800387c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x4ec>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d028      	beq.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d121      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d11a      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038b0:	4013      	ands	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d111      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	3b01      	subs	r3, #1
 80038ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d107      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800

080038f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0cc      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b68      	ldr	r3, [pc, #416]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d90c      	bls.n	8003930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b8      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a58      	ldr	r2, [pc, #352]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a52      	ldr	r2, [pc, #328]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800396a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800396c:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	494d      	ldr	r1, [pc, #308]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d044      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d119      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e07f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e067      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4934      	ldr	r1, [pc, #208]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e4:	f7fd fbda 	bl	800119c <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fd fbd6 	bl	800119c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e04f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 020c 	and.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1eb      	bne.n	80039ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d20c      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b22      	ldr	r3, [pc, #136]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e032      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4916      	ldr	r1, [pc, #88]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a7a:	f000 f821 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8c:	5ccb      	ldrb	r3, [r1, r3]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fd fb3a 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	0800ad18 	.word	0x0800ad18
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	20000004 	.word	0x20000004

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac4:	b090      	sub	sp, #64	; 0x40
 8003ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
 8003acc:	2300      	movs	r3, #0
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad8:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d00d      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x40>
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	f200 80a1 	bhi.w	8003c2c <HAL_RCC_GetSysClockFreq+0x16c>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x34>
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0x3a>
 8003af2:	e09b      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003af8:	e09b      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003afa:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003afe:	e098      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b00:	4b4f      	ldr	r3, [pc, #316]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b0a:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d028      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b16:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	627a      	str	r2, [r7, #36]	; 0x24
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b2c:	fb03 f201 	mul.w	r2, r3, r1
 8003b30:	2300      	movs	r3, #0
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	4a43      	ldr	r2, [pc, #268]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b40:	460a      	mov	r2, r1
 8003b42:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b46:	4413      	add	r3, r2
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	61fa      	str	r2, [r7, #28]
 8003b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b5a:	f7fc fb35 	bl	80001c8 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4613      	mov	r3, r2
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b66:	e053      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b68:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	099b      	lsrs	r3, r3, #6
 8003b6e:	2200      	movs	r2, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	617a      	str	r2, [r7, #20]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b7a:	f04f 0b00 	mov.w	fp, #0
 8003b7e:	4652      	mov	r2, sl
 8003b80:	465b      	mov	r3, fp
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	0159      	lsls	r1, r3, #5
 8003b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b90:	0150      	lsls	r0, r2, #5
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	ebb2 080a 	subs.w	r8, r2, sl
 8003b9a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003baa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bb2:	ebb2 0408 	subs.w	r4, r2, r8
 8003bb6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	00eb      	lsls	r3, r5, #3
 8003bc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc8:	00e2      	lsls	r2, r4, #3
 8003bca:	4614      	mov	r4, r2
 8003bcc:	461d      	mov	r5, r3
 8003bce:	eb14 030a 	adds.w	r3, r4, sl
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	eb45 030b 	adc.w	r3, r5, fp
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003be6:	4629      	mov	r1, r5
 8003be8:	028b      	lsls	r3, r1, #10
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c04:	f7fc fae0 	bl	80001c8 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3740      	adds	r7, #64	; 0x40
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	016e3600 	.word	0x016e3600

08003c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000000 	.word	0x20000000

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff0 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800ad28 	.word	0x0800ad28

08003c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c90:	f7ff ffdc 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	0b5b      	lsrs	r3, r3, #13
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	0800ad28 	.word	0x0800ad28

08003cb4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e022      	b.n	8003d0c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d105      	bne.n	8003cde <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7fc ffc5 	bl	8000c68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f814 	bl	8003d14 <HAL_SD_InitCard>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00a      	b.n	8003d0c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003d14:	b5b0      	push	{r4, r5, r7, lr}
 8003d16:	b08e      	sub	sp, #56	; 0x38
 8003d18:	af04      	add	r7, sp, #16
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003d30:	2376      	movs	r3, #118	; 0x76
 8003d32:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681d      	ldr	r5, [r3, #0]
 8003d38:	466c      	mov	r4, sp
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f001 ff53 	bl	8005bf8 <SDIO_Init>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e04f      	b.n	8003e04 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003d64:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <HAL_SD_InitCard+0xf8>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 ff8b 	bl	8005c8a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003d74:	4b25      	ldr	r3, [pc, #148]	; (8003e0c <HAL_SD_InitCard+0xf8>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8003d7a:	2002      	movs	r0, #2
 8003d7c:	f7fd fa1a 	bl	80011b4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 ff03 	bl	8004b8c <SD_PowerON>
 8003d86:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e02e      	b.n	8003e04 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fe22 	bl	80049f0 <SD_InitCard>
 8003dac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dae:	6a3b      	ldr	r3, [r7, #32]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00b      	beq.n	8003dcc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e01b      	b.n	8003e04 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f001 ffea 	bl	8005dae <SDMMC_CmdBlockLength>
 8003dda:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00f      	beq.n	8003e02 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a0a      	ldr	r2, [pc, #40]	; (8003e10 <HAL_SD_InitCard+0xfc>)
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3728      	adds	r7, #40	; 0x28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8003e0c:	422580a0 	.word	0x422580a0
 8003e10:	004005ff 	.word	0x004005ff

08003e14 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b092      	sub	sp, #72	; 0x48
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003e22:	f7fd f9bb 	bl	800119c <HAL_GetTick>
 8003e26:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d107      	bne.n	8003e46 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e1bd      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	f040 81b0 	bne.w	80041b4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	441a      	add	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d907      	bls.n	8003e78 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e1a4      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2203      	movs	r2, #3
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2200      	movs	r2, #0
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d002      	beq.n	8003e96 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	025b      	lsls	r3, r3, #9
 8003e94:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	025b      	lsls	r3, r3, #9
 8003ea0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003ea2:	2390      	movs	r3, #144	; 0x90
 8003ea4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f107 0214 	add.w	r2, r7, #20
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 ff4a 	bl	8005d56 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d90a      	bls.n	8003ede <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 ffae 	bl	8005e36 <SDMMC_CmdReadMultiBlock>
 8003eda:	6478      	str	r0, [r7, #68]	; 0x44
 8003edc:	e009      	b.n	8003ef2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eea:	4618      	mov	r0, r3
 8003eec:	f001 ff81 	bl	8005df2 <SDMMC_CmdReadSingleBlock>
 8003ef0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d012      	beq.n	8003f1e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a7a      	ldr	r2, [pc, #488]	; (80040e8 <HAL_SD_ReadBlocks+0x2d4>)
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e151      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003f22:	e061      	b.n	8003fe8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d03c      	beq.n	8003fac <HAL_SD_ReadBlocks+0x198>
 8003f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d039      	beq.n	8003fac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f3c:	e033      	b.n	8003fa6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 fe83 	bl	8005c4e <SDIO_ReadFIFO>
 8003f48:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f50:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	3301      	adds	r3, #1
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	0a1b      	lsrs	r3, r3, #8
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f70:	3b01      	subs	r3, #1
 8003f72:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	3301      	adds	r3, #1
 8003f82:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f86:	3b01      	subs	r3, #1
 8003f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	0e1b      	lsrs	r3, r3, #24
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f92:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f96:	3301      	adds	r3, #1
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa8:	2b07      	cmp	r3, #7
 8003faa:	d9c8      	bls.n	8003f3e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003fac:	f7fd f8f6 	bl	800119c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d902      	bls.n	8003fc2 <HAL_SD_ReadBlocks+0x1ae>
 8003fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d112      	bne.n	8003fe8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a48      	ldr	r2, [pc, #288]	; (80040e8 <HAL_SD_ReadBlocks+0x2d4>)
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e0ec      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fee:	f240 332a 	movw	r3, #810	; 0x32a
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d095      	beq.n	8003f24 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d022      	beq.n	800404c <HAL_SD_ReadBlocks+0x238>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d91f      	bls.n	800404c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	2b03      	cmp	r3, #3
 8004012:	d01b      	beq.n	800404c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f001 ff73 	bl	8005f04 <SDMMC_CmdStopTransfer>
 800401e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004022:	2b00      	cmp	r3, #0
 8004024:	d012      	beq.n	800404c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2f      	ldr	r2, [pc, #188]	; (80040e8 <HAL_SD_ReadBlocks+0x2d4>)
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004034:	431a      	orrs	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0ba      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d012      	beq.n	8004080 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a22      	ldr	r2, [pc, #136]	; (80040e8 <HAL_SD_ReadBlocks+0x2d4>)
 8004060:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004066:	f043 0208 	orr.w	r2, r3, #8
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0a0      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d012      	beq.n	80040b4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a15      	ldr	r2, [pc, #84]	; (80040e8 <HAL_SD_ReadBlocks+0x2d4>)
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	f043 0202 	orr.w	r2, r3, #2
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e086      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d063      	beq.n	800418a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a08      	ldr	r2, [pc, #32]	; (80040e8 <HAL_SD_ReadBlocks+0x2d4>)
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	f043 0220 	orr.w	r2, r3, #32
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e06c      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
 80040e8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fdac 	bl	8005c4e <SDIO_ReadFIFO>
 80040f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80040f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004102:	3301      	adds	r3, #1
 8004104:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004108:	3b01      	subs	r3, #1
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	0a1b      	lsrs	r3, r3, #8
 8004110:	b2da      	uxtb	r2, r3
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004118:	3301      	adds	r3, #1
 800411a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800411c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411e:	3b01      	subs	r3, #1
 8004120:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	0c1b      	lsrs	r3, r3, #16
 8004126:	b2da      	uxtb	r2, r3
 8004128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800412c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412e:	3301      	adds	r3, #1
 8004130:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004134:	3b01      	subs	r3, #1
 8004136:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	0e1b      	lsrs	r3, r3, #24
 800413c:	b2da      	uxtb	r2, r3
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004140:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004144:	3301      	adds	r3, #1
 8004146:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414a:	3b01      	subs	r3, #1
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800414e:	f7fd f825 	bl	800119c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800415a:	429a      	cmp	r2, r3
 800415c:	d902      	bls.n	8004164 <HAL_SD_ReadBlocks+0x350>
 800415e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004160:	2b00      	cmp	r3, #0
 8004162:	d112      	bne.n	800418a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_SD_ReadBlocks+0x3b8>)
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e01b      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d002      	beq.n	800419e <HAL_SD_ReadBlocks+0x38a>
 8004198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1a6      	bne.n	80040ec <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e006      	b.n	80041c2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
  }
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3748      	adds	r7, #72	; 0x48
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	004005ff 	.word	0x004005ff

080041d0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b092      	sub	sp, #72	; 0x48
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80041de:	f7fc ffdd 	bl	800119c <HAL_GetTick>
 80041e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d107      	bne.n	8004202 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e166      	b.n	80044d0 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	f040 8159 	bne.w	80044c2 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	441a      	add	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	429a      	cmp	r2, r3
 8004222:	d907      	bls.n	8004234 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e14d      	b.n	80044d0 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2203      	movs	r2, #3
 8004238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2200      	movs	r2, #0
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004248:	2b01      	cmp	r3, #1
 800424a:	d002      	beq.n	8004252 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	025b      	lsls	r3, r3, #9
 8004250:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004252:	f04f 33ff 	mov.w	r3, #4294967295
 8004256:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	025b      	lsls	r3, r3, #9
 800425c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800425e:	2390      	movs	r3, #144	; 0x90
 8004260:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004266:	2300      	movs	r3, #0
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800426a:	2301      	movs	r3, #1
 800426c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f107 0218 	add.w	r2, r7, #24
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f001 fd6c 	bl	8005d56 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d90a      	bls.n	800429a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004290:	4618      	mov	r0, r3
 8004292:	f001 fe14 	bl	8005ebe <SDMMC_CmdWriteMultiBlock>
 8004296:	6478      	str	r0, [r7, #68]	; 0x44
 8004298:	e009      	b.n	80042ae <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2210      	movs	r2, #16
 800429e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fde7 	bl	8005e7a <SDMMC_CmdWriteSingleBlock>
 80042ac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80042ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d012      	beq.n	80042da <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a87      	ldr	r2, [pc, #540]	; (80044d8 <HAL_SD_WriteBlocks+0x308>)
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e0fa      	b.n	80044d0 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80042de:	e065      	b.n	80043ac <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d040      	beq.n	8004370 <HAL_SD_WriteBlocks+0x1a0>
 80042ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d03d      	beq.n	8004370 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	643b      	str	r3, [r7, #64]	; 0x40
 80042f8:	e037      	b.n	800436a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80042fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	3301      	adds	r3, #1
 8004304:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004308:	3b01      	subs	r3, #1
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	021a      	lsls	r2, r3, #8
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	3301      	adds	r3, #1
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800431e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004320:	3b01      	subs	r3, #1
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	041a      	lsls	r2, r3, #16
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004332:	3301      	adds	r3, #1
 8004334:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	3b01      	subs	r3, #1
 800433a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800433c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	061a      	lsls	r2, r3, #24
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434a:	3301      	adds	r3, #1
 800434c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800434e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004350:	3b01      	subs	r3, #1
 8004352:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f107 0214 	add.w	r2, r7, #20
 800435c:	4611      	mov	r1, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f001 fc82 	bl	8005c68 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004366:	3301      	adds	r3, #1
 8004368:	643b      	str	r3, [r7, #64]	; 0x40
 800436a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436c:	2b07      	cmp	r3, #7
 800436e:	d9c4      	bls.n	80042fa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004370:	f7fc ff14 	bl	800119c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800437c:	429a      	cmp	r2, r3
 800437e:	d902      	bls.n	8004386 <HAL_SD_WriteBlocks+0x1b6>
 8004380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004382:	2b00      	cmp	r3, #0
 8004384:	d112      	bne.n	80043ac <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a53      	ldr	r2, [pc, #332]	; (80044d8 <HAL_SD_WriteBlocks+0x308>)
 800438c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004394:	431a      	orrs	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e091      	b.n	80044d0 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b2:	f240 331a 	movw	r3, #794	; 0x31a
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d091      	beq.n	80042e0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d022      	beq.n	8004410 <HAL_SD_WriteBlocks+0x240>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d91f      	bls.n	8004410 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d01b      	beq.n	8004410 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 fd91 	bl	8005f04 <SDMMC_CmdStopTransfer>
 80043e2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80043e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d012      	beq.n	8004410 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a3a      	ldr	r2, [pc, #232]	; (80044d8 <HAL_SD_WriteBlocks+0x308>)
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f8:	431a      	orrs	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e05f      	b.n	80044d0 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d012      	beq.n	8004444 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <HAL_SD_WriteBlocks+0x308>)
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	f043 0208 	orr.w	r2, r3, #8
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e045      	b.n	80044d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d012      	beq.n	8004478 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a20      	ldr	r2, [pc, #128]	; (80044d8 <HAL_SD_WriteBlocks+0x308>)
 8004458:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	f043 0202 	orr.w	r2, r3, #2
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e02b      	b.n	80044d0 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	2b00      	cmp	r3, #0
 8004484:	d012      	beq.n	80044ac <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a13      	ldr	r2, [pc, #76]	; (80044d8 <HAL_SD_WriteBlocks+0x308>)
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	f043 0210 	orr.w	r2, r3, #16
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e011      	b.n	80044d0 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80044b4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	e006      	b.n	80044d0 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3748      	adds	r7, #72	; 0x48
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	004005ff 	.word	0x004005ff

080044dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ea:	0f9b      	lsrs	r3, r3, #30
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044f6:	0e9b      	lsrs	r3, r3, #26
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004508:	0e1b      	lsrs	r3, r3, #24
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	b2da      	uxtb	r2, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	b2da      	uxtb	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	b2da      	uxtb	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004532:	b2da      	uxtb	r2, r3
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800453c:	0d1b      	lsrs	r3, r3, #20
 800453e:	b29a      	uxth	r2, r3
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	b2da      	uxtb	r2, r3
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800455a:	0bdb      	lsrs	r3, r3, #15
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	b2da      	uxtb	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800456c:	0b9b      	lsrs	r3, r3, #14
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	b2da      	uxtb	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457e:	0b5b      	lsrs	r3, r3, #13
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	b2da      	uxtb	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004590:	0b1b      	lsrs	r3, r3, #12
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	b2da      	uxtb	r2, r3
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2200      	movs	r2, #0
 80045a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d163      	bne.n	8004674 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b0:	009a      	lsls	r2, r3, #2
 80045b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045b6:	4013      	ands	r3, r2
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80045bc:	0f92      	lsrs	r2, r2, #30
 80045be:	431a      	orrs	r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c8:	0edb      	lsrs	r3, r3, #27
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045da:	0e1b      	lsrs	r3, r3, #24
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ec:	0d5b      	lsrs	r3, r3, #21
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	f003 0307 	and.w	r3, r3, #7
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fe:	0c9b      	lsrs	r3, r3, #18
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	b2da      	uxtb	r2, r3
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004610:	0bdb      	lsrs	r3, r3, #15
 8004612:	b2db      	uxtb	r3, r3
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	b2da      	uxtb	r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	7e1b      	ldrb	r3, [r3, #24]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	3302      	adds	r3, #2
 8004634:	2201      	movs	r2, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800463e:	fb03 f202 	mul.w	r2, r3, r2
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	7a1b      	ldrb	r3, [r3, #8]
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	2201      	movs	r2, #1
 8004652:	409a      	lsls	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004660:	0a52      	lsrs	r2, r2, #9
 8004662:	fb03 f202 	mul.w	r2, r3, r2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004670:	661a      	str	r2, [r3, #96]	; 0x60
 8004672:	e031      	b.n	80046d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	2b01      	cmp	r3, #1
 800467a:	d11d      	bne.n	80046b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004680:	041b      	lsls	r3, r3, #16
 8004682:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468a:	0c1b      	lsrs	r3, r3, #16
 800468c:	431a      	orrs	r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	3301      	adds	r3, #1
 8004698:	029a      	lsls	r2, r3, #10
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	661a      	str	r2, [r3, #96]	; 0x60
 80046b6:	e00f      	b.n	80046d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a58      	ldr	r2, [pc, #352]	; (8004820 <HAL_SD_GetCardCSD+0x344>)
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e09d      	b.n	8004814 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046dc:	0b9b      	lsrs	r3, r3, #14
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ee:	09db      	lsrs	r3, r3, #7
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004706:	b2da      	uxtb	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	0fdb      	lsrs	r3, r3, #31
 8004712:	b2da      	uxtb	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471c:	0f5b      	lsrs	r3, r3, #29
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	b2da      	uxtb	r2, r3
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472e:	0e9b      	lsrs	r3, r3, #26
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	b2da      	uxtb	r2, r3
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	0d9b      	lsrs	r3, r3, #22
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	b2da      	uxtb	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	0d5b      	lsrs	r3, r3, #21
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	0c1b      	lsrs	r3, r3, #16
 8004770:	b2db      	uxtb	r3, r3
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	b2da      	uxtb	r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	0bdb      	lsrs	r3, r3, #15
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	b2da      	uxtb	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004796:	0b9b      	lsrs	r3, r3, #14
 8004798:	b2db      	uxtb	r3, r3
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	0b5b      	lsrs	r3, r3, #13
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	0b1b      	lsrs	r3, r3, #12
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d2:	0a9b      	lsrs	r3, r3, #10
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004802:	b2da      	uxtb	r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	004005ff 	.word	0x004005ff

08004824 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800487c:	b5b0      	push	{r4, r5, r7, lr}
 800487e:	b08e      	sub	sp, #56	; 0x38
 8004880:	af04      	add	r7, sp, #16
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2203      	movs	r2, #3
 8004890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004898:	2b03      	cmp	r3, #3
 800489a:	d02e      	beq.n	80048fa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a2:	d106      	bne.n	80048b2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38
 80048b0:	e029      	b.n	8004906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048b8:	d10a      	bne.n	80048d0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 fa1c 	bl	8004cf8 <SD_WideBus_Enable>
 80048c0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c6:	6a3b      	ldr	r3, [r7, #32]
 80048c8:	431a      	orrs	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
 80048ce:	e01a      	b.n	8004906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 fa59 	bl	8004d8e <SD_WideBus_Disable>
 80048dc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38
 80048ea:	e00c      	b.n	8004906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	639a      	str	r2, [r3, #56]	; 0x38
 80048f8:	e005      	b.n	8004906 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8004914:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004924:	e01f      	b.n	8004966 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681d      	ldr	r5, [r3, #0]
 800494c:	466c      	mov	r4, sp
 800494e:	f107 0314 	add.w	r3, r7, #20
 8004952:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004956:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800495a:	f107 0308 	add.w	r3, r7, #8
 800495e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004960:	4628      	mov	r0, r5
 8004962:	f001 f949 	bl	8005bf8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800496e:	4618      	mov	r0, r3
 8004970:	f001 fa1d 	bl	8005dae <SDMMC_CmdBlockLength>
 8004974:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00c      	beq.n	8004996 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <HAL_SD_ConfigWideBusOperation+0x130>)
 8004982:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800499e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3728      	adds	r7, #40	; 0x28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bdb0      	pop	{r4, r5, r7, pc}
 80049aa:	bf00      	nop
 80049ac:	004005ff 	.word	0x004005ff

080049b0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80049bc:	f107 030c 	add.w	r3, r7, #12
 80049c0:	4619      	mov	r1, r3
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f970 	bl	8004ca8 <SD_SendStatus>
 80049c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	0a5b      	lsrs	r3, r3, #9
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80049e6:	693b      	ldr	r3, [r7, #16]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80049f0:	b5b0      	push	{r4, r5, r7, lr}
 80049f2:	b094      	sub	sp, #80	; 0x50
 80049f4:	af04      	add	r7, sp, #16
 80049f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80049f8:	2301      	movs	r3, #1
 80049fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 f950 	bl	8005ca6 <SDIO_GetPowerState>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d102      	bne.n	8004a12 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004a10:	e0b8      	b.n	8004b84 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d02f      	beq.n	8004a7a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 fb7a 	bl	8006118 <SDMMC_CmdSendCID>
 8004a24:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <SD_InitCard+0x40>
    {
      return errorstate;
 8004a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a2e:	e0a9      	b.n	8004b84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 f97a 	bl	8005d30 <SDIO_GetResponse>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2104      	movs	r1, #4
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f001 f971 	bl	8005d30 <SDIO_GetResponse>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2108      	movs	r1, #8
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f968 	bl	8005d30 <SDIO_GetResponse>
 8004a60:	4602      	mov	r2, r0
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	210c      	movs	r1, #12
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 f95f 	bl	8005d30 <SDIO_GetResponse>
 8004a72:	4602      	mov	r2, r0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d00d      	beq.n	8004a9e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f107 020e 	add.w	r2, r7, #14
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 fb80 	bl	8006192 <SDMMC_CmdSetRelAdd>
 8004a92:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <SD_InitCard+0xae>
    {
      return errorstate;
 8004a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9c:	e072      	b.n	8004b84 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d036      	beq.n	8004b14 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004aa6:	89fb      	ldrh	r3, [r7, #14]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f001 fb4a 	bl	8006154 <SDMMC_CmdSendCSD>
 8004ac0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <SD_InitCard+0xdc>
    {
      return errorstate;
 8004ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aca:	e05b      	b.n	8004b84 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 f92c 	bl	8005d30 <SDIO_GetResponse>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2104      	movs	r1, #4
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f001 f923 	bl	8005d30 <SDIO_GetResponse>
 8004aea:	4602      	mov	r2, r0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2108      	movs	r1, #8
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 f91a 	bl	8005d30 <SDIO_GetResponse>
 8004afc:	4602      	mov	r2, r0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	210c      	movs	r1, #12
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 f911 	bl	8005d30 <SDIO_GetResponse>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2104      	movs	r1, #4
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f001 f908 	bl	8005d30 <SDIO_GetResponse>
 8004b20:	4603      	mov	r3, r0
 8004b22:	0d1a      	lsrs	r2, r3, #20
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004b28:	f107 0310 	add.w	r3, r7, #16
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff fcd4 	bl	80044dc <HAL_SD_GetCardCSD>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b3e:	e021      	b.n	8004b84 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6819      	ldr	r1, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	461c      	mov	r4, r3
 8004b4e:	4615      	mov	r5, r2
 8004b50:	4622      	mov	r2, r4
 8004b52:	462b      	mov	r3, r5
 8004b54:	4608      	mov	r0, r1
 8004b56:	f001 f9f7 	bl	8005f48 <SDMMC_CmdSelDesel>
 8004b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <SD_InitCard+0x176>
  {
    return errorstate;
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	e00e      	b.n	8004b84 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681d      	ldr	r5, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	466c      	mov	r4, sp
 8004b6e:	f103 0210 	add.w	r2, r3, #16
 8004b72:	ca07      	ldmia	r2, {r0, r1, r2}
 8004b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b78:	3304      	adds	r3, #4
 8004b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f001 f83b 	bl	8005bf8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3740      	adds	r7, #64	; 0x40
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bdb0      	pop	{r4, r5, r7, pc}

08004b8c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f001 f9f2 	bl	8005f8e <SDMMC_CmdGoIdleState>
 8004baa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	e072      	b.n	8004c9c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fa05 	bl	8005fca <SDMMC_CmdOperCond>
 8004bc0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00d      	beq.n	8004be4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 f9db 	bl	8005f8e <SDMMC_CmdGoIdleState>
 8004bd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d004      	beq.n	8004bea <SD_PowerON+0x5e>
    {
      return errorstate;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	e05b      	b.n	8004c9c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d137      	bne.n	8004c62 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 fa05 	bl	8006008 <SDMMC_CmdAppCommand>
 8004bfe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d02d      	beq.n	8004c62 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c0a:	e047      	b.n	8004c9c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 f9f8 	bl	8006008 <SDMMC_CmdAppCommand>
 8004c18:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <SD_PowerON+0x98>
    {
      return errorstate;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	e03b      	b.n	8004c9c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	491e      	ldr	r1, [pc, #120]	; (8004ca4 <SD_PowerON+0x118>)
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fa0e 	bl	800604c <SDMMC_CmdAppOperCommand>
 8004c30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c3c:	e02e      	b.n	8004c9c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2100      	movs	r1, #0
 8004c44:	4618      	mov	r0, r3
 8004c46:	f001 f873 	bl	8005d30 <SDIO_GetResponse>
 8004c4a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	0fdb      	lsrs	r3, r3, #31
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <SD_PowerON+0xcc>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <SD_PowerON+0xce>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	613b      	str	r3, [r7, #16]

    count++;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d802      	bhi.n	8004c72 <SD_PowerON+0xe6>
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0cc      	beq.n	8004c0c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d902      	bls.n	8004c82 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004c7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c80:	e00c      	b.n	8004c9c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	645a      	str	r2, [r3, #68]	; 0x44
 8004c92:	e002      	b.n	8004c9a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	c1100000 	.word	0xc1100000

08004ca8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004cbc:	e018      	b.n	8004cf0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f001 fa82 	bl	80061d4 <SDMMC_CmdSendStatus>
 8004cd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <SD_SendStatus+0x34>
  {
    return errorstate;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	e009      	b.n	8004cf0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f001 f824 	bl	8005d30 <SDIO_GetResponse>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 f80e 	bl	8005d30 <SDIO_GetResponse>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d1e:	d102      	bne.n	8004d26 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d24:	e02f      	b.n	8004d86 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004d26:	f107 030c 	add.w	r3, r7, #12
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f879 	bl	8004e24 <SD_FindSCR>
 8004d32:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	e023      	b.n	8004d86 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01c      	beq.n	8004d82 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	4619      	mov	r1, r3
 8004d54:	4610      	mov	r0, r2
 8004d56:	f001 f957 	bl	8006008 <SDMMC_CmdAppCommand>
 8004d5a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	e00f      	b.n	8004d86 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f001 f990 	bl	8006092 <SDMMC_CmdBusWidth>
 8004d72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	e003      	b.n	8004d86 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	e001      	b.n	8004d86 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004d96:	2300      	movs	r3, #0
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2100      	movs	r1, #0
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 ffc3 	bl	8005d30 <SDIO_GetResponse>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004db4:	d102      	bne.n	8004dbc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004db6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004dba:	e02f      	b.n	8004e1c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004dbc:	f107 030c 	add.w	r3, r7, #12
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f82e 	bl	8004e24 <SD_FindSCR>
 8004dc8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	e023      	b.n	8004e1c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d01c      	beq.n	8004e18 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de6:	041b      	lsls	r3, r3, #16
 8004de8:	4619      	mov	r1, r3
 8004dea:	4610      	mov	r0, r2
 8004dec:	f001 f90c 	bl	8006008 <SDMMC_CmdAppCommand>
 8004df0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	e00f      	b.n	8004e1c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2100      	movs	r1, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	f001 f945 	bl	8006092 <SDMMC_CmdBusWidth>
 8004e08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	e003      	b.n	8004e1c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e001      	b.n	8004e1c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004e18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3718      	adds	r7, #24
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004e24:	b590      	push	{r4, r7, lr}
 8004e26:	b08f      	sub	sp, #60	; 0x3c
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004e2e:	f7fc f9b5 	bl	800119c <HAL_GetTick>
 8004e32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2108      	movs	r1, #8
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 ffaf 	bl	8005dae <SDMMC_CmdBlockLength>
 8004e50:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5a:	e0b2      	b.n	8004fc2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	041b      	lsls	r3, r3, #16
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f001 f8cd 	bl	8006008 <SDMMC_CmdAppCommand>
 8004e6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	e0a3      	b.n	8004fc2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004e80:	2308      	movs	r3, #8
 8004e82:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004e84:	2330      	movs	r3, #48	; 0x30
 8004e86:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f107 0210 	add.w	r2, r7, #16
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 ff59 	bl	8005d56 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f001 f914 	bl	80060d6 <SDMMC_CmdSendSCR>
 8004eae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d02a      	beq.n	8004f0c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	e083      	b.n	8004fc2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00f      	beq.n	8004ee8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6819      	ldr	r1, [r3, #0]
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	f107 0208 	add.w	r2, r7, #8
 8004ed4:	18d4      	adds	r4, r2, r3
 8004ed6:	4608      	mov	r0, r1
 8004ed8:	f000 feb9 	bl	8005c4e <SDIO_ReadFIFO>
 8004edc:	4603      	mov	r3, r0
 8004ede:	6023      	str	r3, [r4, #0]
      index++;
 8004ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee6:	e006      	b.n	8004ef6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d012      	beq.n	8004f1c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004ef6:	f7fc f951 	bl	800119c <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d102      	bne.n	8004f0c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004f06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f0a:	e05a      	b.n	8004fc2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f12:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0cf      	beq.n	8004eba <SD_FindSCR+0x96>
 8004f1a:	e000      	b.n	8004f1e <SD_FindSCR+0xfa>
      break;
 8004f1c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2208      	movs	r2, #8
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004f34:	2308      	movs	r3, #8
 8004f36:	e044      	b.n	8004fc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e037      	b.n	8004fc2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	f003 0320 	and.w	r3, r3, #32
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2220      	movs	r2, #32
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004f68:	2320      	movs	r3, #32
 8004f6a:	e02a      	b.n	8004fc2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f240 523a 	movw	r2, #1338	; 0x53a
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	061a      	lsls	r2, r3, #24
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f82:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f8c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	0e1b      	lsrs	r3, r3, #24
 8004f92:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	601a      	str	r2, [r3, #0]
    scr++;
 8004f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	061a      	lsls	r2, r3, #24
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004faa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004fb4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	0e1b      	lsrs	r3, r3, #24
 8004fba:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	373c      	adds	r7, #60	; 0x3c
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd90      	pop	{r4, r7, pc}

08004fca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e07b      	b.n	80050d4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d108      	bne.n	8004ff6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fec:	d009      	beq.n	8005002 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	61da      	str	r2, [r3, #28]
 8004ff4:	e005      	b.n	8005002 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7fb fe8b 	bl	8000d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005038:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005086:	ea42 0103 	orr.w	r1, r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	0c1b      	lsrs	r3, r3, #16
 80050a0:	f003 0104 	and.w	r1, r3, #4
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	f003 0210 	and.w	r2, r3, #16
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e041      	b.n	8005172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fb ff0a 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 f8f4 	bl	8005308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b084      	sub	sp, #16
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_TIM_ConfigClockSource+0x1c>
 8005192:	2302      	movs	r3, #2
 8005194:	e0b4      	b.n	8005300 <HAL_TIM_ConfigClockSource+0x186>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ce:	d03e      	beq.n	800524e <HAL_TIM_ConfigClockSource+0xd4>
 80051d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d4:	f200 8087 	bhi.w	80052e6 <HAL_TIM_ConfigClockSource+0x16c>
 80051d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051dc:	f000 8086 	beq.w	80052ec <HAL_TIM_ConfigClockSource+0x172>
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d87f      	bhi.n	80052e6 <HAL_TIM_ConfigClockSource+0x16c>
 80051e6:	2b70      	cmp	r3, #112	; 0x70
 80051e8:	d01a      	beq.n	8005220 <HAL_TIM_ConfigClockSource+0xa6>
 80051ea:	2b70      	cmp	r3, #112	; 0x70
 80051ec:	d87b      	bhi.n	80052e6 <HAL_TIM_ConfigClockSource+0x16c>
 80051ee:	2b60      	cmp	r3, #96	; 0x60
 80051f0:	d050      	beq.n	8005294 <HAL_TIM_ConfigClockSource+0x11a>
 80051f2:	2b60      	cmp	r3, #96	; 0x60
 80051f4:	d877      	bhi.n	80052e6 <HAL_TIM_ConfigClockSource+0x16c>
 80051f6:	2b50      	cmp	r3, #80	; 0x50
 80051f8:	d03c      	beq.n	8005274 <HAL_TIM_ConfigClockSource+0xfa>
 80051fa:	2b50      	cmp	r3, #80	; 0x50
 80051fc:	d873      	bhi.n	80052e6 <HAL_TIM_ConfigClockSource+0x16c>
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d058      	beq.n	80052b4 <HAL_TIM_ConfigClockSource+0x13a>
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d86f      	bhi.n	80052e6 <HAL_TIM_ConfigClockSource+0x16c>
 8005206:	2b30      	cmp	r3, #48	; 0x30
 8005208:	d064      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0x15a>
 800520a:	2b30      	cmp	r3, #48	; 0x30
 800520c:	d86b      	bhi.n	80052e6 <HAL_TIM_ConfigClockSource+0x16c>
 800520e:	2b20      	cmp	r3, #32
 8005210:	d060      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0x15a>
 8005212:	2b20      	cmp	r3, #32
 8005214:	d867      	bhi.n	80052e6 <HAL_TIM_ConfigClockSource+0x16c>
 8005216:	2b00      	cmp	r3, #0
 8005218:	d05c      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0x15a>
 800521a:	2b10      	cmp	r3, #16
 800521c:	d05a      	beq.n	80052d4 <HAL_TIM_ConfigClockSource+0x15a>
 800521e:	e062      	b.n	80052e6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	6899      	ldr	r1, [r3, #8]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f000 f984 	bl	800553c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005242:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	609a      	str	r2, [r3, #8]
      break;
 800524c:	e04f      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6899      	ldr	r1, [r3, #8]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f000 f96d 	bl	800553c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005270:	609a      	str	r2, [r3, #8]
      break;
 8005272:	e03c      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	461a      	mov	r2, r3
 8005282:	f000 f8e1 	bl	8005448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2150      	movs	r1, #80	; 0x50
 800528c:	4618      	mov	r0, r3
 800528e:	f000 f93a 	bl	8005506 <TIM_ITRx_SetConfig>
      break;
 8005292:	e02c      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	461a      	mov	r2, r3
 80052a2:	f000 f900 	bl	80054a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2160      	movs	r1, #96	; 0x60
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f92a 	bl	8005506 <TIM_ITRx_SetConfig>
      break;
 80052b2:	e01c      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6859      	ldr	r1, [r3, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	461a      	mov	r2, r3
 80052c2:	f000 f8c1 	bl	8005448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2140      	movs	r1, #64	; 0x40
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f91a 	bl	8005506 <TIM_ITRx_SetConfig>
      break;
 80052d2:	e00c      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f000 f911 	bl	8005506 <TIM_ITRx_SetConfig>
      break;
 80052e4:	e003      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	73fb      	strb	r3, [r7, #15]
      break;
 80052ea:	e000      	b.n	80052ee <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a40      	ldr	r2, [pc, #256]	; (800541c <TIM_Base_SetConfig+0x114>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005326:	d00f      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a3d      	ldr	r2, [pc, #244]	; (8005420 <TIM_Base_SetConfig+0x118>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a3c      	ldr	r2, [pc, #240]	; (8005424 <TIM_Base_SetConfig+0x11c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a3b      	ldr	r2, [pc, #236]	; (8005428 <TIM_Base_SetConfig+0x120>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a3a      	ldr	r2, [pc, #232]	; (800542c <TIM_Base_SetConfig+0x124>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a2f      	ldr	r2, [pc, #188]	; (800541c <TIM_Base_SetConfig+0x114>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d02b      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005368:	d027      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a2c      	ldr	r2, [pc, #176]	; (8005420 <TIM_Base_SetConfig+0x118>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d023      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2b      	ldr	r2, [pc, #172]	; (8005424 <TIM_Base_SetConfig+0x11c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01f      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <TIM_Base_SetConfig+0x120>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d01b      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a29      	ldr	r2, [pc, #164]	; (800542c <TIM_Base_SetConfig+0x124>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d017      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a28      	ldr	r2, [pc, #160]	; (8005430 <TIM_Base_SetConfig+0x128>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a27      	ldr	r2, [pc, #156]	; (8005434 <TIM_Base_SetConfig+0x12c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00f      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a26      	ldr	r2, [pc, #152]	; (8005438 <TIM_Base_SetConfig+0x130>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d00b      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a25      	ldr	r2, [pc, #148]	; (800543c <TIM_Base_SetConfig+0x134>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d007      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a24      	ldr	r2, [pc, #144]	; (8005440 <TIM_Base_SetConfig+0x138>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d003      	beq.n	80053ba <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a23      	ldr	r2, [pc, #140]	; (8005444 <TIM_Base_SetConfig+0x13c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d108      	bne.n	80053cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a0a      	ldr	r2, [pc, #40]	; (800541c <TIM_Base_SetConfig+0x114>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_Base_SetConfig+0xf8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a0c      	ldr	r2, [pc, #48]	; (800542c <TIM_Base_SetConfig+0x124>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d103      	bne.n	8005408 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	615a      	str	r2, [r3, #20]
}
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40010000 	.word	0x40010000
 8005420:	40000400 	.word	0x40000400
 8005424:	40000800 	.word	0x40000800
 8005428:	40000c00 	.word	0x40000c00
 800542c:	40010400 	.word	0x40010400
 8005430:	40014000 	.word	0x40014000
 8005434:	40014400 	.word	0x40014400
 8005438:	40014800 	.word	0x40014800
 800543c:	40001800 	.word	0x40001800
 8005440:	40001c00 	.word	0x40001c00
 8005444:	40002000 	.word	0x40002000

08005448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f023 0201 	bic.w	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f023 030a 	bic.w	r3, r3, #10
 8005484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b087      	sub	sp, #28
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f023 0210 	bic.w	r2, r3, #16
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	031b      	lsls	r3, r3, #12
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	621a      	str	r2, [r3, #32]
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005506:	b480      	push	{r7}
 8005508:	b085      	sub	sp, #20
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	f043 0307 	orr.w	r3, r3, #7
 8005528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	609a      	str	r2, [r3, #8]
}
 8005530:	bf00      	nop
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	021a      	lsls	r2, r3, #8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	431a      	orrs	r2, r3
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	4313      	orrs	r3, r2
 8005568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	609a      	str	r2, [r3, #8]
}
 8005570:	bf00      	nop
 8005572:	371c      	adds	r7, #28
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005590:	2302      	movs	r3, #2
 8005592:	e05a      	b.n	800564a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a21      	ldr	r2, [pc, #132]	; (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d022      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e0:	d01d      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1d      	ldr	r2, [pc, #116]	; (800565c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d018      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a1b      	ldr	r2, [pc, #108]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1a      	ldr	r2, [pc, #104]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00e      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a18      	ldr	r2, [pc, #96]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d009      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a17      	ldr	r2, [pc, #92]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a15      	ldr	r2, [pc, #84]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d10c      	bne.n	8005638 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005624:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4313      	orrs	r3, r2
 800562e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40010000 	.word	0x40010000
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800
 8005664:	40000c00 	.word	0x40000c00
 8005668:	40010400 	.word	0x40010400
 800566c:	40014000 	.word	0x40014000
 8005670:	40001800 	.word	0x40001800

08005674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e03f      	b.n	8005706 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d106      	bne.n	80056a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7fb fc60 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2224      	movs	r2, #36	; 0x24
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f829 	bl	8005710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695a      	ldr	r2, [r3, #20]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2220      	movs	r2, #32
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005714:	b0c0      	sub	sp, #256	; 0x100
 8005716:	af00      	add	r7, sp, #0
 8005718:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800571c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800572c:	68d9      	ldr	r1, [r3, #12]
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	ea40 0301 	orr.w	r3, r0, r1
 8005738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800573a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	431a      	orrs	r2, r3
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	431a      	orrs	r2, r3
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	4313      	orrs	r3, r2
 8005758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005768:	f021 010c 	bic.w	r1, r1, #12
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005776:	430b      	orrs	r3, r1
 8005778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578a:	6999      	ldr	r1, [r3, #24]
 800578c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	ea40 0301 	orr.w	r3, r0, r1
 8005796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	4b8f      	ldr	r3, [pc, #572]	; (80059dc <UART_SetConfig+0x2cc>)
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d005      	beq.n	80057b0 <UART_SetConfig+0xa0>
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	4b8d      	ldr	r3, [pc, #564]	; (80059e0 <UART_SetConfig+0x2d0>)
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d104      	bne.n	80057ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057b0:	f7fe fa6c 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 80057b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80057b8:	e003      	b.n	80057c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ba:	f7fe fa53 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80057be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057cc:	f040 810c 	bne.w	80059e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057e2:	4622      	mov	r2, r4
 80057e4:	462b      	mov	r3, r5
 80057e6:	1891      	adds	r1, r2, r2
 80057e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80057ea:	415b      	adcs	r3, r3
 80057ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057f2:	4621      	mov	r1, r4
 80057f4:	eb12 0801 	adds.w	r8, r2, r1
 80057f8:	4629      	mov	r1, r5
 80057fa:	eb43 0901 	adc.w	r9, r3, r1
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800580a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800580e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005812:	4690      	mov	r8, r2
 8005814:	4699      	mov	r9, r3
 8005816:	4623      	mov	r3, r4
 8005818:	eb18 0303 	adds.w	r3, r8, r3
 800581c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005820:	462b      	mov	r3, r5
 8005822:	eb49 0303 	adc.w	r3, r9, r3
 8005826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800582a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005836:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800583a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800583e:	460b      	mov	r3, r1
 8005840:	18db      	adds	r3, r3, r3
 8005842:	653b      	str	r3, [r7, #80]	; 0x50
 8005844:	4613      	mov	r3, r2
 8005846:	eb42 0303 	adc.w	r3, r2, r3
 800584a:	657b      	str	r3, [r7, #84]	; 0x54
 800584c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005854:	f7fa fcb8 	bl	80001c8 <__aeabi_uldivmod>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4b61      	ldr	r3, [pc, #388]	; (80059e4 <UART_SetConfig+0x2d4>)
 800585e:	fba3 2302 	umull	r2, r3, r3, r2
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	011c      	lsls	r4, r3, #4
 8005866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800586a:	2200      	movs	r2, #0
 800586c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005870:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005878:	4642      	mov	r2, r8
 800587a:	464b      	mov	r3, r9
 800587c:	1891      	adds	r1, r2, r2
 800587e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005880:	415b      	adcs	r3, r3
 8005882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005888:	4641      	mov	r1, r8
 800588a:	eb12 0a01 	adds.w	sl, r2, r1
 800588e:	4649      	mov	r1, r9
 8005890:	eb43 0b01 	adc.w	fp, r3, r1
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a8:	4692      	mov	sl, r2
 80058aa:	469b      	mov	fp, r3
 80058ac:	4643      	mov	r3, r8
 80058ae:	eb1a 0303 	adds.w	r3, sl, r3
 80058b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058b6:	464b      	mov	r3, r9
 80058b8:	eb4b 0303 	adc.w	r3, fp, r3
 80058bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80058d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80058d4:	460b      	mov	r3, r1
 80058d6:	18db      	adds	r3, r3, r3
 80058d8:	643b      	str	r3, [r7, #64]	; 0x40
 80058da:	4613      	mov	r3, r2
 80058dc:	eb42 0303 	adc.w	r3, r2, r3
 80058e0:	647b      	str	r3, [r7, #68]	; 0x44
 80058e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058ea:	f7fa fc6d 	bl	80001c8 <__aeabi_uldivmod>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4611      	mov	r1, r2
 80058f4:	4b3b      	ldr	r3, [pc, #236]	; (80059e4 <UART_SetConfig+0x2d4>)
 80058f6:	fba3 2301 	umull	r2, r3, r3, r1
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	2264      	movs	r2, #100	; 0x64
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	1acb      	subs	r3, r1, r3
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800590a:	4b36      	ldr	r3, [pc, #216]	; (80059e4 <UART_SetConfig+0x2d4>)
 800590c:	fba3 2302 	umull	r2, r3, r3, r2
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005918:	441c      	add	r4, r3
 800591a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800591e:	2200      	movs	r2, #0
 8005920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005924:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800592c:	4642      	mov	r2, r8
 800592e:	464b      	mov	r3, r9
 8005930:	1891      	adds	r1, r2, r2
 8005932:	63b9      	str	r1, [r7, #56]	; 0x38
 8005934:	415b      	adcs	r3, r3
 8005936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800593c:	4641      	mov	r1, r8
 800593e:	1851      	adds	r1, r2, r1
 8005940:	6339      	str	r1, [r7, #48]	; 0x30
 8005942:	4649      	mov	r1, r9
 8005944:	414b      	adcs	r3, r1
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005954:	4659      	mov	r1, fp
 8005956:	00cb      	lsls	r3, r1, #3
 8005958:	4651      	mov	r1, sl
 800595a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800595e:	4651      	mov	r1, sl
 8005960:	00ca      	lsls	r2, r1, #3
 8005962:	4610      	mov	r0, r2
 8005964:	4619      	mov	r1, r3
 8005966:	4603      	mov	r3, r0
 8005968:	4642      	mov	r2, r8
 800596a:	189b      	adds	r3, r3, r2
 800596c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005970:	464b      	mov	r3, r9
 8005972:	460a      	mov	r2, r1
 8005974:	eb42 0303 	adc.w	r3, r2, r3
 8005978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800597c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005988:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800598c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005990:	460b      	mov	r3, r1
 8005992:	18db      	adds	r3, r3, r3
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
 8005996:	4613      	mov	r3, r2
 8005998:	eb42 0303 	adc.w	r3, r2, r3
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80059a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80059a6:	f7fa fc0f 	bl	80001c8 <__aeabi_uldivmod>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <UART_SetConfig+0x2d4>)
 80059b0:	fba3 1302 	umull	r1, r3, r3, r2
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	2164      	movs	r1, #100	; 0x64
 80059b8:	fb01 f303 	mul.w	r3, r1, r3
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	3332      	adds	r3, #50	; 0x32
 80059c2:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <UART_SetConfig+0x2d4>)
 80059c4:	fba2 2303 	umull	r2, r3, r2, r3
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	f003 0207 	and.w	r2, r3, #7
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4422      	add	r2, r4
 80059d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059d8:	e105      	b.n	8005be6 <UART_SetConfig+0x4d6>
 80059da:	bf00      	nop
 80059dc:	40011000 	.word	0x40011000
 80059e0:	40011400 	.word	0x40011400
 80059e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059fa:	4642      	mov	r2, r8
 80059fc:	464b      	mov	r3, r9
 80059fe:	1891      	adds	r1, r2, r2
 8005a00:	6239      	str	r1, [r7, #32]
 8005a02:	415b      	adcs	r3, r3
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
 8005a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a0a:	4641      	mov	r1, r8
 8005a0c:	1854      	adds	r4, r2, r1
 8005a0e:	4649      	mov	r1, r9
 8005a10:	eb43 0501 	adc.w	r5, r3, r1
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	00eb      	lsls	r3, r5, #3
 8005a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a22:	00e2      	lsls	r2, r4, #3
 8005a24:	4614      	mov	r4, r2
 8005a26:	461d      	mov	r5, r3
 8005a28:	4643      	mov	r3, r8
 8005a2a:	18e3      	adds	r3, r4, r3
 8005a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005a30:	464b      	mov	r3, r9
 8005a32:	eb45 0303 	adc.w	r3, r5, r3
 8005a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a56:	4629      	mov	r1, r5
 8005a58:	008b      	lsls	r3, r1, #2
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a60:	4621      	mov	r1, r4
 8005a62:	008a      	lsls	r2, r1, #2
 8005a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a68:	f7fa fbae 	bl	80001c8 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4b60      	ldr	r3, [pc, #384]	; (8005bf4 <UART_SetConfig+0x4e4>)
 8005a72:	fba3 2302 	umull	r2, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	011c      	lsls	r4, r3, #4
 8005a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	1891      	adds	r1, r2, r2
 8005a92:	61b9      	str	r1, [r7, #24]
 8005a94:	415b      	adcs	r3, r3
 8005a96:	61fb      	str	r3, [r7, #28]
 8005a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a9c:	4641      	mov	r1, r8
 8005a9e:	1851      	adds	r1, r2, r1
 8005aa0:	6139      	str	r1, [r7, #16]
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	414b      	adcs	r3, r1
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ab4:	4659      	mov	r1, fp
 8005ab6:	00cb      	lsls	r3, r1, #3
 8005ab8:	4651      	mov	r1, sl
 8005aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005abe:	4651      	mov	r1, sl
 8005ac0:	00ca      	lsls	r2, r1, #3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4642      	mov	r2, r8
 8005aca:	189b      	adds	r3, r3, r2
 8005acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ad0:	464b      	mov	r3, r9
 8005ad2:	460a      	mov	r2, r1
 8005ad4:	eb42 0303 	adc.w	r3, r2, r3
 8005ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005af4:	4649      	mov	r1, r9
 8005af6:	008b      	lsls	r3, r1, #2
 8005af8:	4641      	mov	r1, r8
 8005afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005afe:	4641      	mov	r1, r8
 8005b00:	008a      	lsls	r2, r1, #2
 8005b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b06:	f7fa fb5f 	bl	80001c8 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4b39      	ldr	r3, [pc, #228]	; (8005bf4 <UART_SetConfig+0x4e4>)
 8005b10:	fba3 1302 	umull	r1, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	2164      	movs	r1, #100	; 0x64
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	3332      	adds	r3, #50	; 0x32
 8005b22:	4a34      	ldr	r2, [pc, #208]	; (8005bf4 <UART_SetConfig+0x4e4>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b2e:	441c      	add	r4, r3
 8005b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b34:	2200      	movs	r2, #0
 8005b36:	673b      	str	r3, [r7, #112]	; 0x70
 8005b38:	677a      	str	r2, [r7, #116]	; 0x74
 8005b3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b3e:	4642      	mov	r2, r8
 8005b40:	464b      	mov	r3, r9
 8005b42:	1891      	adds	r1, r2, r2
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	415b      	adcs	r3, r3
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b4e:	4641      	mov	r1, r8
 8005b50:	1851      	adds	r1, r2, r1
 8005b52:	6039      	str	r1, [r7, #0]
 8005b54:	4649      	mov	r1, r9
 8005b56:	414b      	adcs	r3, r1
 8005b58:	607b      	str	r3, [r7, #4]
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b66:	4659      	mov	r1, fp
 8005b68:	00cb      	lsls	r3, r1, #3
 8005b6a:	4651      	mov	r1, sl
 8005b6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b70:	4651      	mov	r1, sl
 8005b72:	00ca      	lsls	r2, r1, #3
 8005b74:	4610      	mov	r0, r2
 8005b76:	4619      	mov	r1, r3
 8005b78:	4603      	mov	r3, r0
 8005b7a:	4642      	mov	r2, r8
 8005b7c:	189b      	adds	r3, r3, r2
 8005b7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b80:	464b      	mov	r3, r9
 8005b82:	460a      	mov	r2, r1
 8005b84:	eb42 0303 	adc.w	r3, r2, r3
 8005b88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	663b      	str	r3, [r7, #96]	; 0x60
 8005b94:	667a      	str	r2, [r7, #100]	; 0x64
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ba2:	4649      	mov	r1, r9
 8005ba4:	008b      	lsls	r3, r1, #2
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bac:	4641      	mov	r1, r8
 8005bae:	008a      	lsls	r2, r1, #2
 8005bb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005bb4:	f7fa fb08 	bl	80001c8 <__aeabi_uldivmod>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <UART_SetConfig+0x4e4>)
 8005bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	2164      	movs	r1, #100	; 0x64
 8005bc6:	fb01 f303 	mul.w	r3, r1, r3
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	3332      	adds	r3, #50	; 0x32
 8005bd0:	4a08      	ldr	r2, [pc, #32]	; (8005bf4 <UART_SetConfig+0x4e4>)
 8005bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	f003 020f 	and.w	r2, r3, #15
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4422      	add	r2, r4
 8005be4:	609a      	str	r2, [r3, #8]
}
 8005be6:	bf00      	nop
 8005be8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bec:	46bd      	mov	sp, r7
 8005bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bf2:	bf00      	nop
 8005bf4:	51eb851f 	.word	0x51eb851f

08005bf8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	f107 001c 	add.w	r0, r7, #28
 8005c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005c0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005c10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005c12:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005c16:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005c1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005c1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005c22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005c32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	b004      	add	sp, #16
 8005c4c:	4770      	bx	lr

08005c4e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c66:	4770      	bx	lr

08005c68 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2203      	movs	r2, #3
 8005c96:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005ce0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005ce6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005cec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005cfc:	f023 030f 	bic.w	r3, r3, #15
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	b2db      	uxtb	r3, r3
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3314      	adds	r3, #20
 8005d3e:	461a      	mov	r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	4413      	add	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
}  
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d7c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005d82:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005d88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0

}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b088      	sub	sp, #32
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005dbc:	2310      	movs	r3, #16
 8005dbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005dc0:	2340      	movs	r3, #64	; 0x40
 8005dc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005dce:	f107 0308 	add.w	r3, r7, #8
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff ff74 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dde:	2110      	movs	r1, #16
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fa19 	bl	8006218 <SDMMC_GetCmdResp1>
 8005de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005de8:	69fb      	ldr	r3, [r7, #28]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3720      	adds	r7, #32
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b088      	sub	sp, #32
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005e00:	2311      	movs	r3, #17
 8005e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e04:	2340      	movs	r3, #64	; 0x40
 8005e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e12:	f107 0308 	add.w	r3, r7, #8
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ff52 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e22:	2111      	movs	r1, #17
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f9f7 	bl	8006218 <SDMMC_GetCmdResp1>
 8005e2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b088      	sub	sp, #32
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005e44:	2312      	movs	r3, #18
 8005e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e48:	2340      	movs	r3, #64	; 0x40
 8005e4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff ff30 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e66:	2112      	movs	r1, #18
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f9d5 	bl	8006218 <SDMMC_GetCmdResp1>
 8005e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e70:	69fb      	ldr	r3, [r7, #28]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b088      	sub	sp, #32
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
 8005e82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005e88:	2318      	movs	r3, #24
 8005e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005e9a:	f107 0308 	add.w	r3, r7, #8
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff0e 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eaa:	2118      	movs	r1, #24
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9b3 	bl	8006218 <SDMMC_GetCmdResp1>
 8005eb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005ecc:	2319      	movs	r3, #25
 8005ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ed0:	2340      	movs	r3, #64	; 0x40
 8005ed2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005edc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ede:	f107 0308 	add.w	r3, r7, #8
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff feec 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	2119      	movs	r1, #25
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f991 	bl	8006218 <SDMMC_GetCmdResp1>
 8005ef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ef8:	69fb      	ldr	r3, [r7, #28]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3720      	adds	r7, #32
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005f10:	230c      	movs	r3, #12
 8005f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f14:	2340      	movs	r3, #64	; 0x40
 8005f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff feca 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005f2e:	4a05      	ldr	r2, [pc, #20]	; (8005f44 <SDMMC_CmdStopTransfer+0x40>)
 8005f30:	210c      	movs	r1, #12
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f970 	bl	8006218 <SDMMC_GetCmdResp1>
 8005f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3720      	adds	r7, #32
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	05f5e100 	.word	0x05f5e100

08005f48 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08a      	sub	sp, #40	; 0x28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005f58:	2307      	movs	r3, #7
 8005f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f5c:	2340      	movs	r3, #64	; 0x40
 8005f5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f60:	2300      	movs	r3, #0
 8005f62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f68:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f6a:	f107 0310 	add.w	r3, r7, #16
 8005f6e:	4619      	mov	r1, r3
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7ff fea6 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f7a:	2107      	movs	r1, #7
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f94b 	bl	8006218 <SDMMC_GetCmdResp1>
 8005f82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3728      	adds	r7, #40	; 0x28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b088      	sub	sp, #32
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005faa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fac:	f107 0308 	add.w	r3, r7, #8
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff fe85 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fb65 	bl	8006688 <SDMMC_GetCmdError>
 8005fbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b088      	sub	sp, #32
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005fd2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005fd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005fd8:	2308      	movs	r3, #8
 8005fda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fdc:	2340      	movs	r3, #64	; 0x40
 8005fde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fea:	f107 0308 	add.w	r3, r7, #8
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff fe66 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 faf8 	bl	80065ec <SDMMC_GetCmdResp7>
 8005ffc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006016:	2337      	movs	r3, #55	; 0x37
 8006018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800601a:	2340      	movs	r3, #64	; 0x40
 800601c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800601e:	2300      	movs	r3, #0
 8006020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006026:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fe47 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006034:	f241 3288 	movw	r2, #5000	; 0x1388
 8006038:	2137      	movs	r1, #55	; 0x37
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8ec 	bl	8006218 <SDMMC_GetCmdResp1>
 8006040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006042:	69fb      	ldr	r3, [r7, #28]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3720      	adds	r7, #32
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800605c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006062:	2329      	movs	r3, #41	; 0x29
 8006064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006066:	2340      	movs	r3, #64	; 0x40
 8006068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800606e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006072:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006074:	f107 0308 	add.w	r3, r7, #8
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff fe21 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f9ff 	bl	8006484 <SDMMC_GetCmdResp3>
 8006086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006088:	69fb      	ldr	r3, [r7, #28]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3720      	adds	r7, #32
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b088      	sub	sp, #32
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80060a0:	2306      	movs	r3, #6
 80060a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060a4:	2340      	movs	r3, #64	; 0x40
 80060a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060b2:	f107 0308 	add.w	r3, r7, #8
 80060b6:	4619      	mov	r1, r3
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff fe02 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80060be:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c2:	2106      	movs	r1, #6
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8a7 	bl	8006218 <SDMMC_GetCmdResp1>
 80060ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060cc:	69fb      	ldr	r3, [r7, #28]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b088      	sub	sp, #32
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80060e2:	2333      	movs	r3, #51	; 0x33
 80060e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060e6:	2340      	movs	r3, #64	; 0x40
 80060e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060f4:	f107 0308 	add.w	r3, r7, #8
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fde1 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006100:	f241 3288 	movw	r2, #5000	; 0x1388
 8006104:	2133      	movs	r1, #51	; 0x33
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f886 	bl	8006218 <SDMMC_GetCmdResp1>
 800610c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800610e:	69fb      	ldr	r3, [r7, #28]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3720      	adds	r7, #32
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006124:	2302      	movs	r3, #2
 8006126:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006128:	23c0      	movs	r3, #192	; 0xc0
 800612a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006130:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006134:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006136:	f107 0308 	add.w	r3, r7, #8
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f7ff fdc0 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f956 	bl	80063f4 <SDMMC_GetCmdResp2>
 8006148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800614a:	69fb      	ldr	r3, [r7, #28]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006162:	2309      	movs	r3, #9
 8006164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006166:	23c0      	movs	r3, #192	; 0xc0
 8006168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800616e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006172:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006174:	f107 0308 	add.w	r3, r7, #8
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff fda1 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f937 	bl	80063f4 <SDMMC_GetCmdResp2>
 8006186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006188:	69fb      	ldr	r3, [r7, #28]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b088      	sub	sp, #32
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80061a0:	2303      	movs	r3, #3
 80061a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061a4:	2340      	movs	r3, #64	; 0x40
 80061a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061a8:	2300      	movs	r3, #0
 80061aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061b2:	f107 0308 	add.w	r3, r7, #8
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff fd82 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	2103      	movs	r1, #3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f99c 	bl	8006500 <SDMMC_GetCmdResp6>
 80061c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061ca:	69fb      	ldr	r3, [r7, #28]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3720      	adds	r7, #32
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80061e2:	230d      	movs	r3, #13
 80061e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061e6:	2340      	movs	r3, #64	; 0x40
 80061e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061f4:	f107 0308 	add.w	r3, r7, #8
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7ff fd61 	bl	8005cc2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006200:	f241 3288 	movw	r2, #5000	; 0x1388
 8006204:	210d      	movs	r1, #13
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f806 	bl	8006218 <SDMMC_GetCmdResp1>
 800620c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800620e:	69fb      	ldr	r3, [r7, #28]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3720      	adds	r7, #32
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	460b      	mov	r3, r1
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006226:	4b70      	ldr	r3, [pc, #448]	; (80063e8 <SDMMC_GetCmdResp1+0x1d0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a70      	ldr	r2, [pc, #448]	; (80063ec <SDMMC_GetCmdResp1+0x1d4>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	0a5a      	lsrs	r2, r3, #9
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	fb02 f303 	mul.w	r3, r2, r3
 8006238:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	1e5a      	subs	r2, r3, #1
 800623e:	61fa      	str	r2, [r7, #28]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006248:	e0c9      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ef      	beq.n	800623a <SDMMC_GetCmdResp1+0x22>
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1ea      	bne.n	800623a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	d004      	beq.n	800627a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2204      	movs	r2, #4
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006276:	2304      	movs	r3, #4
 8006278:	e0b1      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d004      	beq.n	8006290 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800628c:	2301      	movs	r3, #1
 800628e:	e0a6      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	22c5      	movs	r2, #197	; 0xc5
 8006294:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fd3d 	bl	8005d16 <SDIO_GetCommandResponse>
 800629c:	4603      	mov	r3, r0
 800629e:	461a      	mov	r2, r3
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d001      	beq.n	80062aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e099      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80062aa:	2100      	movs	r1, #0
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fd3f 	bl	8005d30 <SDIO_GetResponse>
 80062b2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4b4e      	ldr	r3, [pc, #312]	; (80063f0 <SDMMC_GetCmdResp1+0x1d8>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80062be:	2300      	movs	r3, #0
 80062c0:	e08d      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da02      	bge.n	80062ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80062c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062cc:	e087      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80062d8:	2340      	movs	r3, #64	; 0x40
 80062da:	e080      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80062e6:	2380      	movs	r3, #128	; 0x80
 80062e8:	e079      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80062f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062f8:	e071      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006304:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006308:	e069      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006318:	e061      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006328:	e059      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006338:	e051      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006344:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006348:	e049      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006354:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006358:	e041      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006364:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006368:	e039      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006374:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006378:	e031      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d002      	beq.n	800638a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006384:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006388:	e029      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006394:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006398:	e021      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80063a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80063a8:	e019      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80063b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80063b8:	e011      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80063c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063c8:	e009      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 0308 	and.w	r3, r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d002      	beq.n	80063da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80063d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80063d8:	e001      	b.n	80063de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80063da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000000 	.word	0x20000000
 80063ec:	10624dd3 	.word	0x10624dd3
 80063f0:	fdffe008 	.word	0xfdffe008

080063f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80063fc:	4b1f      	ldr	r3, [pc, #124]	; (800647c <SDMMC_GetCmdResp2+0x88>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a1f      	ldr	r2, [pc, #124]	; (8006480 <SDMMC_GetCmdResp2+0x8c>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	0a5b      	lsrs	r3, r3, #9
 8006408:	f241 3288 	movw	r2, #5000	; 0x1388
 800640c:	fb02 f303 	mul.w	r3, r2, r3
 8006410:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1e5a      	subs	r2, r3, #1
 8006416:	60fa      	str	r2, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800641c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006420:	e026      	b.n	8006470 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006426:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0ef      	beq.n	8006412 <SDMMC_GetCmdResp2+0x1e>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1ea      	bne.n	8006412 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2204      	movs	r2, #4
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800644e:	2304      	movs	r3, #4
 8006450:	e00e      	b.n	8006470 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006464:	2301      	movs	r3, #1
 8006466:	e003      	b.n	8006470 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	22c5      	movs	r2, #197	; 0xc5
 800646c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000000 	.word	0x20000000
 8006480:	10624dd3 	.word	0x10624dd3

08006484 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800648c:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <SDMMC_GetCmdResp3+0x74>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1a      	ldr	r2, [pc, #104]	; (80064fc <SDMMC_GetCmdResp3+0x78>)
 8006492:	fba2 2303 	umull	r2, r3, r2, r3
 8006496:	0a5b      	lsrs	r3, r3, #9
 8006498:	f241 3288 	movw	r2, #5000	; 0x1388
 800649c:	fb02 f303 	mul.w	r3, r2, r3
 80064a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1e5a      	subs	r2, r3, #1
 80064a6:	60fa      	str	r2, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d102      	bne.n	80064b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064b0:	e01b      	b.n	80064ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0ef      	beq.n	80064a2 <SDMMC_GetCmdResp3+0x1e>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1ea      	bne.n	80064a2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2204      	movs	r2, #4
 80064dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064de:	2304      	movs	r3, #4
 80064e0:	e003      	b.n	80064ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	22c5      	movs	r2, #197	; 0xc5
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20000000 	.word	0x20000000
 80064fc:	10624dd3 	.word	0x10624dd3

08006500 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	460b      	mov	r3, r1
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800650e:	4b35      	ldr	r3, [pc, #212]	; (80065e4 <SDMMC_GetCmdResp6+0xe4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a35      	ldr	r2, [pc, #212]	; (80065e8 <SDMMC_GetCmdResp6+0xe8>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	0a5b      	lsrs	r3, r3, #9
 800651a:	f241 3288 	movw	r2, #5000	; 0x1388
 800651e:	fb02 f303 	mul.w	r3, r2, r3
 8006522:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	1e5a      	subs	r2, r3, #1
 8006528:	61fa      	str	r2, [r7, #28]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d102      	bne.n	8006534 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800652e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006532:	e052      	b.n	80065da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006538:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0ef      	beq.n	8006524 <SDMMC_GetCmdResp6+0x24>
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1ea      	bne.n	8006524 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2204      	movs	r2, #4
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006560:	2304      	movs	r3, #4
 8006562:	e03a      	b.n	80065da <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2201      	movs	r2, #1
 8006574:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006576:	2301      	movs	r3, #1
 8006578:	e02f      	b.n	80065da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff fbcb 	bl	8005d16 <SDIO_GetCommandResponse>
 8006580:	4603      	mov	r3, r0
 8006582:	461a      	mov	r2, r3
 8006584:	7afb      	ldrb	r3, [r7, #11]
 8006586:	4293      	cmp	r3, r2
 8006588:	d001      	beq.n	800658e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800658a:	2301      	movs	r3, #1
 800658c:	e025      	b.n	80065da <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	22c5      	movs	r2, #197	; 0xc5
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006594:	2100      	movs	r1, #0
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f7ff fbca 	bl	8005d30 <SDIO_GetResponse>
 800659c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	0c1b      	lsrs	r3, r3, #16
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e011      	b.n	80065da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065c4:	e009      	b.n	80065da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065d4:	e001      	b.n	80065da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80065d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000000 	.word	0x20000000
 80065e8:	10624dd3 	.word	0x10624dd3

080065ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065f4:	4b22      	ldr	r3, [pc, #136]	; (8006680 <SDMMC_GetCmdResp7+0x94>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a22      	ldr	r2, [pc, #136]	; (8006684 <SDMMC_GetCmdResp7+0x98>)
 80065fa:	fba2 2303 	umull	r2, r3, r2, r3
 80065fe:	0a5b      	lsrs	r3, r3, #9
 8006600:	f241 3288 	movw	r2, #5000	; 0x1388
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1e5a      	subs	r2, r3, #1
 800660e:	60fa      	str	r2, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006618:	e02c      	b.n	8006674 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0ef      	beq.n	800660a <SDMMC_GetCmdResp7+0x1e>
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1ea      	bne.n	800660a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d004      	beq.n	800664a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2204      	movs	r2, #4
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006646:	2304      	movs	r3, #4
 8006648:	e014      	b.n	8006674 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800665c:	2301      	movs	r3, #1
 800665e:	e009      	b.n	8006674 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2240      	movs	r2, #64	; 0x40
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006672:	2300      	movs	r3, #0
  
}
 8006674:	4618      	mov	r0, r3
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	20000000 	.word	0x20000000
 8006684:	10624dd3 	.word	0x10624dd3

08006688 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006690:	4b11      	ldr	r3, [pc, #68]	; (80066d8 <SDMMC_GetCmdError+0x50>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a11      	ldr	r2, [pc, #68]	; (80066dc <SDMMC_GetCmdError+0x54>)
 8006696:	fba2 2303 	umull	r2, r3, r2, r3
 800669a:	0a5b      	lsrs	r3, r3, #9
 800669c:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a0:	fb02 f303 	mul.w	r3, r2, r3
 80066a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1e5a      	subs	r2, r3, #1
 80066aa:	60fa      	str	r2, [r7, #12]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066b4:	e009      	b.n	80066ca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f1      	beq.n	80066a6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	22c5      	movs	r2, #197	; 0xc5
 80066c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000000 	.word	0x20000000
 80066dc:	10624dd3 	.word	0x10624dd3

080066e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066e0:	b084      	sub	sp, #16
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	f107 001c 	add.w	r0, r7, #28
 80066ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d122      	bne.n	800673e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800670c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d105      	bne.n	8006732 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fbee 	bl	8007f14 <USB_CoreReset>
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
 800673c:	e01a      	b.n	8006774 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f001 fbe2 	bl	8007f14 <USB_CoreReset>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006756:	2b00      	cmp	r3, #0
 8006758:	d106      	bne.n	8006768 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
 8006766:	e005      	b.n	8006774 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	2b01      	cmp	r3, #1
 8006778:	d10b      	bne.n	8006792 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f043 0206 	orr.w	r2, r3, #6
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f043 0220 	orr.w	r2, r3, #32
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800679e:	b004      	add	sp, #16
 80067a0:	4770      	bx	lr
	...

080067a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d165      	bne.n	8006884 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4a41      	ldr	r2, [pc, #260]	; (80068c0 <USB_SetTurnaroundTime+0x11c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d906      	bls.n	80067ce <USB_SetTurnaroundTime+0x2a>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4a40      	ldr	r2, [pc, #256]	; (80068c4 <USB_SetTurnaroundTime+0x120>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d202      	bcs.n	80067ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80067c8:	230f      	movs	r3, #15
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e062      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	4a3c      	ldr	r2, [pc, #240]	; (80068c4 <USB_SetTurnaroundTime+0x120>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d306      	bcc.n	80067e4 <USB_SetTurnaroundTime+0x40>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4a3b      	ldr	r2, [pc, #236]	; (80068c8 <USB_SetTurnaroundTime+0x124>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d202      	bcs.n	80067e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80067de:	230e      	movs	r3, #14
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	e057      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4a38      	ldr	r2, [pc, #224]	; (80068c8 <USB_SetTurnaroundTime+0x124>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d306      	bcc.n	80067fa <USB_SetTurnaroundTime+0x56>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4a37      	ldr	r2, [pc, #220]	; (80068cc <USB_SetTurnaroundTime+0x128>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d202      	bcs.n	80067fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80067f4:	230d      	movs	r3, #13
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	e04c      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4a33      	ldr	r2, [pc, #204]	; (80068cc <USB_SetTurnaroundTime+0x128>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d306      	bcc.n	8006810 <USB_SetTurnaroundTime+0x6c>
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4a32      	ldr	r2, [pc, #200]	; (80068d0 <USB_SetTurnaroundTime+0x12c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d802      	bhi.n	8006810 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800680a:	230c      	movs	r3, #12
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	e041      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4a2f      	ldr	r2, [pc, #188]	; (80068d0 <USB_SetTurnaroundTime+0x12c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d906      	bls.n	8006826 <USB_SetTurnaroundTime+0x82>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4a2e      	ldr	r2, [pc, #184]	; (80068d4 <USB_SetTurnaroundTime+0x130>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d802      	bhi.n	8006826 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006820:	230b      	movs	r3, #11
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	e036      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4a2a      	ldr	r2, [pc, #168]	; (80068d4 <USB_SetTurnaroundTime+0x130>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d906      	bls.n	800683c <USB_SetTurnaroundTime+0x98>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	4a29      	ldr	r2, [pc, #164]	; (80068d8 <USB_SetTurnaroundTime+0x134>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d802      	bhi.n	800683c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006836:	230a      	movs	r3, #10
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	e02b      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4a26      	ldr	r2, [pc, #152]	; (80068d8 <USB_SetTurnaroundTime+0x134>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d906      	bls.n	8006852 <USB_SetTurnaroundTime+0xae>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4a25      	ldr	r2, [pc, #148]	; (80068dc <USB_SetTurnaroundTime+0x138>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d202      	bcs.n	8006852 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800684c:	2309      	movs	r3, #9
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e020      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4a21      	ldr	r2, [pc, #132]	; (80068dc <USB_SetTurnaroundTime+0x138>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d306      	bcc.n	8006868 <USB_SetTurnaroundTime+0xc4>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4a20      	ldr	r2, [pc, #128]	; (80068e0 <USB_SetTurnaroundTime+0x13c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d802      	bhi.n	8006868 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006862:	2308      	movs	r3, #8
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e015      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4a1d      	ldr	r2, [pc, #116]	; (80068e0 <USB_SetTurnaroundTime+0x13c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d906      	bls.n	800687e <USB_SetTurnaroundTime+0xda>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <USB_SetTurnaroundTime+0x140>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d202      	bcs.n	800687e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006878:	2307      	movs	r3, #7
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	e00a      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800687e:	2306      	movs	r3, #6
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	e007      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800688a:	2309      	movs	r3, #9
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	e001      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006890:	2309      	movs	r3, #9
 8006892:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	00d8acbf 	.word	0x00d8acbf
 80068c4:	00e4e1c0 	.word	0x00e4e1c0
 80068c8:	00f42400 	.word	0x00f42400
 80068cc:	01067380 	.word	0x01067380
 80068d0:	011a499f 	.word	0x011a499f
 80068d4:	01312cff 	.word	0x01312cff
 80068d8:	014ca43f 	.word	0x014ca43f
 80068dc:	016e3600 	.word	0x016e3600
 80068e0:	01a6ab1f 	.word	0x01a6ab1f
 80068e4:	01e84800 	.word	0x01e84800

080068e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f043 0201 	orr.w	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f023 0201 	bic.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d115      	bne.n	800697a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800695a:	2001      	movs	r0, #1
 800695c:	f7fa fc2a 	bl	80011b4 <HAL_Delay>
      ms++;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3301      	adds	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fa45 	bl	8007df6 <USB_GetMode>
 800696c:	4603      	mov	r3, r0
 800696e:	2b01      	cmp	r3, #1
 8006970:	d01e      	beq.n	80069b0 <USB_SetCurrentMode+0x84>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2b31      	cmp	r3, #49	; 0x31
 8006976:	d9f0      	bls.n	800695a <USB_SetCurrentMode+0x2e>
 8006978:	e01a      	b.n	80069b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d115      	bne.n	80069ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800698c:	2001      	movs	r0, #1
 800698e:	f7fa fc11 	bl	80011b4 <HAL_Delay>
      ms++;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	3301      	adds	r3, #1
 8006996:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 fa2c 	bl	8007df6 <USB_GetMode>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <USB_SetCurrentMode+0x84>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b31      	cmp	r3, #49	; 0x31
 80069a8:	d9f0      	bls.n	800698c <USB_SetCurrentMode+0x60>
 80069aa:	e001      	b.n	80069b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e005      	b.n	80069bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b32      	cmp	r3, #50	; 0x32
 80069b4:	d101      	bne.n	80069ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069c4:	b084      	sub	sp, #16
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	e009      	b.n	80069f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	3340      	adds	r3, #64	; 0x40
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	2200      	movs	r2, #0
 80069f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	3301      	adds	r3, #1
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b0e      	cmp	r3, #14
 80069fc:	d9f2      	bls.n	80069e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d11c      	bne.n	8006a3e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a12:	f043 0302 	orr.w	r3, r3, #2
 8006a16:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	639a      	str	r2, [r3, #56]	; 0x38
 8006a3c:	e00b      	b.n	8006a56 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a68:	4619      	mov	r1, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a70:	461a      	mov	r2, r3
 8006a72:	680b      	ldr	r3, [r1, #0]
 8006a74:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d10c      	bne.n	8006a96 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a82:	2100      	movs	r1, #0
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f965 	bl	8006d54 <USB_SetDevSpeed>
 8006a8a:	e008      	b.n	8006a9e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f960 	bl	8006d54 <USB_SetDevSpeed>
 8006a94:	e003      	b.n	8006a9e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a96:	2103      	movs	r1, #3
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 f95b 	bl	8006d54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a9e:	2110      	movs	r1, #16
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f8f3 	bl	8006c8c <USB_FlushTxFifo>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f91f 	bl	8006cf4 <USB_FlushRxFifo>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	2300      	movs	r3, #0
 8006aca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	461a      	mov	r2, r3
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	e043      	b.n	8006b72 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b00:	d118      	bne.n	8006b34 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b14:	461a      	mov	r2, r3
 8006b16:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	e013      	b.n	8006b46 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	e008      	b.n	8006b46 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b40:	461a      	mov	r2, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b52:	461a      	mov	r2, r3
 8006b54:	2300      	movs	r3, #0
 8006b56:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	461a      	mov	r2, r3
 8006b66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d3b7      	bcc.n	8006aea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	e043      	b.n	8006c08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b96:	d118      	bne.n	8006bca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10a      	bne.n	8006bb4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	461a      	mov	r2, r3
 8006bac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	e013      	b.n	8006bdc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	e008      	b.n	8006bdc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be8:	461a      	mov	r2, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3301      	adds	r3, #1
 8006c06:	613b      	str	r3, [r7, #16]
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d3b7      	bcc.n	8006b80 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d105      	bne.n	8006c44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	f043 0210 	orr.w	r2, r3, #16
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699a      	ldr	r2, [r3, #24]
 8006c48:	4b0f      	ldr	r3, [pc, #60]	; (8006c88 <USB_DevInit+0x2c4>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d005      	beq.n	8006c62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f043 0208 	orr.w	r2, r3, #8
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d107      	bne.n	8006c78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c70:	f043 0304 	orr.w	r3, r3, #4
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c84:	b004      	add	sp, #16
 8006c86:	4770      	bx	lr
 8006c88:	803c3800 	.word	0x803c3800

08006c8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <USB_FlushTxFifo+0x64>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d901      	bls.n	8006cac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e01b      	b.n	8006ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	daf2      	bge.n	8006c9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	019b      	lsls	r3, r3, #6
 8006cbc:	f043 0220 	orr.w	r2, r3, #32
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <USB_FlushTxFifo+0x64>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e006      	b.n	8006ce4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d0f0      	beq.n	8006cc4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	00030d40 	.word	0x00030d40

08006cf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a11      	ldr	r2, [pc, #68]	; (8006d50 <USB_FlushRxFifo+0x5c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d901      	bls.n	8006d12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e018      	b.n	8006d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	daf2      	bge.n	8006d00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2210      	movs	r2, #16
 8006d22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <USB_FlushRxFifo+0x5c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e006      	b.n	8006d44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f003 0310 	and.w	r3, r3, #16
 8006d3e:	2b10      	cmp	r3, #16
 8006d40:	d0f0      	beq.n	8006d24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	00030d40 	.word	0x00030d40

08006d54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d74:	4313      	orrs	r3, r2
 8006d76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b087      	sub	sp, #28
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 0306 	and.w	r3, r3, #6
 8006d9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006da6:	2300      	movs	r3, #0
 8006da8:	75fb      	strb	r3, [r7, #23]
 8006daa:	e00a      	b.n	8006dc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d002      	beq.n	8006db8 <USB_GetDevSpeed+0x32>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b06      	cmp	r3, #6
 8006db6:	d102      	bne.n	8006dbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006db8:	2302      	movs	r3, #2
 8006dba:	75fb      	strb	r3, [r7, #23]
 8006dbc:	e001      	b.n	8006dc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006dbe:	230f      	movs	r3, #15
 8006dc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	371c      	adds	r7, #28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d13a      	bne.n	8006e62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df2:	69da      	ldr	r2, [r3, #28]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f003 030f 	and.w	r3, r3, #15
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	68f9      	ldr	r1, [r7, #12]
 8006e06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d155      	bne.n	8006ed0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	791b      	ldrb	r3, [r3, #4]
 8006e3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	059b      	lsls	r3, r3, #22
 8006e46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	e036      	b.n	8006ed0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	2101      	movs	r1, #1
 8006e74:	fa01 f303 	lsl.w	r3, r1, r3
 8006e78:	041b      	lsls	r3, r3, #16
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d11a      	bne.n	8006ed0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	791b      	ldrb	r3, [r3, #4]
 8006eb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ece:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	785b      	ldrb	r3, [r3, #1]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d161      	bne.n	8006fc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f12:	d11f      	bne.n	8006f54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	0151      	lsls	r1, r2, #5
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	440a      	add	r2, r1
 8006f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	2101      	movs	r1, #1
 8006f66:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	43db      	mvns	r3, r3
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f74:	4013      	ands	r3, r2
 8006f76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	2101      	movs	r1, #1
 8006f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	43db      	mvns	r3, r3
 8006f92:	68f9      	ldr	r1, [r7, #12]
 8006f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f98:	4013      	ands	r3, r2
 8006f9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	0159      	lsls	r1, r3, #5
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	440b      	add	r3, r1
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4b35      	ldr	r3, [pc, #212]	; (8007090 <USB_DeactivateEndpoint+0x1b0>)
 8006fba:	4013      	ands	r3, r2
 8006fbc:	600b      	str	r3, [r1, #0]
 8006fbe:	e060      	b.n	8007082 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd6:	d11f      	bne.n	8007018 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	015a      	lsls	r2, r3, #5
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	0151      	lsls	r1, r2, #5
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	440a      	add	r2, r1
 8006fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ff2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ff6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	0151      	lsls	r1, r2, #5
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	440a      	add	r2, r1
 800700e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007016:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800701e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	f003 030f 	and.w	r3, r3, #15
 8007028:	2101      	movs	r1, #1
 800702a:	fa01 f303 	lsl.w	r3, r1, r3
 800702e:	041b      	lsls	r3, r3, #16
 8007030:	43db      	mvns	r3, r3
 8007032:	68f9      	ldr	r1, [r7, #12]
 8007034:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007038:	4013      	ands	r3, r2
 800703a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	f003 030f 	and.w	r3, r3, #15
 800704c:	2101      	movs	r1, #1
 800704e:	fa01 f303 	lsl.w	r3, r1, r3
 8007052:	041b      	lsls	r3, r3, #16
 8007054:	43db      	mvns	r3, r3
 8007056:	68f9      	ldr	r1, [r7, #12]
 8007058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800705c:	4013      	ands	r3, r2
 800705e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	0159      	lsls	r1, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	440b      	add	r3, r1
 8007076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707a:	4619      	mov	r1, r3
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <USB_DeactivateEndpoint+0x1b4>)
 800707e:	4013      	ands	r3, r2
 8007080:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	ec337800 	.word	0xec337800
 8007094:	eff37800 	.word	0xeff37800

08007098 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08a      	sub	sp, #40	; 0x28
 800709c:	af02      	add	r7, sp, #8
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	4613      	mov	r3, r2
 80070a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	f040 815c 	bne.w	8007372 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d132      	bne.n	8007128 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	0151      	lsls	r1, r2, #5
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	440a      	add	r2, r1
 80070fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007100:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007120:	0cdb      	lsrs	r3, r3, #19
 8007122:	04db      	lsls	r3, r3, #19
 8007124:	6113      	str	r3, [r2, #16]
 8007126:	e074      	b.n	8007212 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007142:	0cdb      	lsrs	r3, r3, #19
 8007144:	04db      	lsls	r3, r3, #19
 8007146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	0151      	lsls	r1, r2, #5
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	440a      	add	r2, r1
 800715e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007162:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007166:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800716a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007178:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	6999      	ldr	r1, [r3, #24]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	440b      	add	r3, r1
 8007184:	1e59      	subs	r1, r3, #1
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	fbb1 f3f3 	udiv	r3, r1, r3
 800718e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007190:	4b9d      	ldr	r3, [pc, #628]	; (8007408 <USB_EPStartXfer+0x370>)
 8007192:	400b      	ands	r3, r1
 8007194:	69b9      	ldr	r1, [r7, #24]
 8007196:	0148      	lsls	r0, r1, #5
 8007198:	69f9      	ldr	r1, [r7, #28]
 800719a:	4401      	add	r1, r0
 800719c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071a0:	4313      	orrs	r3, r2
 80071a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ba:	69b9      	ldr	r1, [r7, #24]
 80071bc:	0148      	lsls	r0, r1, #5
 80071be:	69f9      	ldr	r1, [r7, #28]
 80071c0:	4401      	add	r1, r0
 80071c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071c6:	4313      	orrs	r3, r2
 80071c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	791b      	ldrb	r3, [r3, #4]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d11f      	bne.n	8007212 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80071f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	0151      	lsls	r1, r2, #5
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	440a      	add	r2, r1
 8007208:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800720c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007210:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d14b      	bne.n	80072b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d009      	beq.n	8007234 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	461a      	mov	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	791b      	ldrb	r3, [r3, #4]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d128      	bne.n	800728e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007248:	2b00      	cmp	r3, #0
 800724a:	d110      	bne.n	800726e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	4413      	add	r3, r2
 8007254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	0151      	lsls	r1, r2, #5
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	440a      	add	r2, r1
 8007262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007266:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800726a:	6013      	str	r3, [r2, #0]
 800726c:	e00f      	b.n	800728e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	69fa      	ldr	r2, [r7, #28]
 8007282:	440a      	add	r2, r1
 8007284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800728c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	69ba      	ldr	r2, [r7, #24]
 800729e:	0151      	lsls	r1, r2, #5
 80072a0:	69fa      	ldr	r2, [r7, #28]
 80072a2:	440a      	add	r2, r1
 80072a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	e133      	b.n	8007518 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	0151      	lsls	r1, r2, #5
 80072c2:	69fa      	ldr	r2, [r7, #28]
 80072c4:	440a      	add	r2, r1
 80072c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	791b      	ldrb	r3, [r3, #4]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d015      	beq.n	8007304 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 811b 	beq.w	8007518 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	2101      	movs	r1, #1
 80072f4:	fa01 f303 	lsl.w	r3, r1, r3
 80072f8:	69f9      	ldr	r1, [r7, #28]
 80072fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072fe:	4313      	orrs	r3, r2
 8007300:	634b      	str	r3, [r1, #52]	; 0x34
 8007302:	e109      	b.n	8007518 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007310:	2b00      	cmp	r3, #0
 8007312:	d110      	bne.n	8007336 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	69fa      	ldr	r2, [r7, #28]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800732e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	e00f      	b.n	8007356 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007354:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6919      	ldr	r1, [r3, #16]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	781a      	ldrb	r2, [r3, #0]
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	b298      	uxth	r0, r3
 8007364:	79fb      	ldrb	r3, [r7, #7]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	4603      	mov	r3, r0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fade 	bl	800792c <USB_WritePacket>
 8007370:	e0d2      	b.n	8007518 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738c:	0cdb      	lsrs	r3, r3, #19
 800738e:	04db      	lsls	r3, r3, #19
 8007390:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	0151      	lsls	r1, r2, #5
 80073a4:	69fa      	ldr	r2, [r7, #28]
 80073a6:	440a      	add	r2, r1
 80073a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d126      	bne.n	800740c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ca:	691a      	ldr	r2, [r3, #16]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d4:	69b9      	ldr	r1, [r7, #24]
 80073d6:	0148      	lsls	r0, r1, #5
 80073d8:	69f9      	ldr	r1, [r7, #28]
 80073da:	4401      	add	r1, r0
 80073dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073e0:	4313      	orrs	r3, r2
 80073e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	0151      	lsls	r1, r2, #5
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	440a      	add	r2, r1
 80073fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007402:	6113      	str	r3, [r2, #16]
 8007404:	e03a      	b.n	800747c <USB_EPStartXfer+0x3e4>
 8007406:	bf00      	nop
 8007408:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	699a      	ldr	r2, [r3, #24]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	4413      	add	r3, r2
 8007416:	1e5a      	subs	r2, r3, #1
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007420:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	8afa      	ldrh	r2, [r7, #22]
 8007428:	fb03 f202 	mul.w	r2, r3, r2
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	8afb      	ldrh	r3, [r7, #22]
 8007440:	04d9      	lsls	r1, r3, #19
 8007442:	4b38      	ldr	r3, [pc, #224]	; (8007524 <USB_EPStartXfer+0x48c>)
 8007444:	400b      	ands	r3, r1
 8007446:	69b9      	ldr	r1, [r7, #24]
 8007448:	0148      	lsls	r0, r1, #5
 800744a:	69f9      	ldr	r1, [r7, #28]
 800744c:	4401      	add	r1, r0
 800744e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007452:	4313      	orrs	r3, r2
 8007454:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800746c:	69b9      	ldr	r1, [r7, #24]
 800746e:	0148      	lsls	r0, r1, #5
 8007470:	69f9      	ldr	r1, [r7, #28]
 8007472:	4401      	add	r1, r0
 8007474:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007478:	4313      	orrs	r3, r2
 800747a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d10d      	bne.n	800749e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6919      	ldr	r1, [r3, #16]
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800749a:	460a      	mov	r2, r1
 800749c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	791b      	ldrb	r3, [r3, #4]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d128      	bne.n	80074f8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d110      	bne.n	80074d8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	0151      	lsls	r1, r2, #5
 80074c8:	69fa      	ldr	r2, [r7, #28]
 80074ca:	440a      	add	r2, r1
 80074cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074d4:	6013      	str	r3, [r2, #0]
 80074d6:	e00f      	b.n	80074f8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	440a      	add	r2, r1
 800750e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007512:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	1ff80000 	.word	0x1ff80000

08007528 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	4613      	mov	r3, r2
 8007534:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	785b      	ldrb	r3, [r3, #1]
 8007544:	2b01      	cmp	r3, #1
 8007546:	f040 80ce 	bne.w	80076e6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d132      	bne.n	80075b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800756c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007570:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007574:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	0151      	lsls	r1, r2, #5
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	440a      	add	r2, r1
 800758c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007594:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b0:	0cdb      	lsrs	r3, r3, #19
 80075b2:	04db      	lsls	r3, r3, #19
 80075b4:	6113      	str	r3, [r2, #16]
 80075b6:	e04e      	b.n	8007656 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	0151      	lsls	r1, r2, #5
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	440a      	add	r2, r1
 80075ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d2:	0cdb      	lsrs	r3, r3, #19
 80075d4:	04db      	lsls	r3, r3, #19
 80075d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	0151      	lsls	r1, r2, #5
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	440a      	add	r2, r1
 80075ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	699a      	ldr	r2, [r3, #24]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	429a      	cmp	r2, r3
 8007606:	d903      	bls.n	8007610 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	68da      	ldr	r2, [r3, #12]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	440a      	add	r2, r1
 8007626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800762e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763c:	691a      	ldr	r2, [r3, #16]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007646:	6939      	ldr	r1, [r7, #16]
 8007648:	0148      	lsls	r0, r1, #5
 800764a:	6979      	ldr	r1, [r7, #20]
 800764c:	4401      	add	r1, r0
 800764e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007652:	4313      	orrs	r3, r2
 8007654:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d11e      	bne.n	800769a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	461a      	mov	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	693a      	ldr	r2, [r7, #16]
 8007688:	0151      	lsls	r1, r2, #5
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	440a      	add	r2, r1
 800768e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	e097      	b.n	80077ca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	0151      	lsls	r1, r2, #5
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	440a      	add	r2, r1
 80076b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 8083 	beq.w	80077ca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	2101      	movs	r1, #1
 80076d6:	fa01 f303 	lsl.w	r3, r1, r3
 80076da:	6979      	ldr	r1, [r7, #20]
 80076dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e0:	4313      	orrs	r3, r2
 80076e2:	634b      	str	r3, [r1, #52]	; 0x34
 80076e4:	e071      	b.n	80077ca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	015a      	lsls	r2, r3, #5
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	0151      	lsls	r1, r2, #5
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	440a      	add	r2, r1
 80076fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007700:	0cdb      	lsrs	r3, r3, #19
 8007702:	04db      	lsls	r3, r3, #19
 8007704:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	693a      	ldr	r2, [r7, #16]
 8007716:	0151      	lsls	r1, r2, #5
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	440a      	add	r2, r1
 800771c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007720:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007724:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007728:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	4413      	add	r3, r2
 800774a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	0151      	lsls	r1, r2, #5
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	440a      	add	r2, r1
 8007758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800775c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007760:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007778:	6939      	ldr	r1, [r7, #16]
 800777a:	0148      	lsls	r0, r1, #5
 800777c:	6979      	ldr	r1, [r7, #20]
 800777e:	4401      	add	r1, r0
 8007780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007784:	4313      	orrs	r3, r2
 8007786:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d10d      	bne.n	80077aa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6919      	ldr	r1, [r3, #16]
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a6:	460a      	mov	r2, r1
 80077a8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	0151      	lsls	r1, r2, #5
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	440a      	add	r2, r1
 80077c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	371c      	adds	r7, #28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	785b      	ldrb	r3, [r3, #1]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d14a      	bne.n	800788c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800780a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800780e:	f040 8086 	bne.w	800791e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	7812      	ldrb	r2, [r2, #0]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	440a      	add	r2, r1
 800782c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007830:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007834:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	7812      	ldrb	r2, [r2, #0]
 800784a:	0151      	lsls	r1, r2, #5
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	440a      	add	r2, r1
 8007850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	3301      	adds	r3, #1
 800785e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f242 7210 	movw	r2, #10000	; 0x2710
 8007866:	4293      	cmp	r3, r2
 8007868:	d902      	bls.n	8007870 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	75fb      	strb	r3, [r7, #23]
          break;
 800786e:	e056      	b.n	800791e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007884:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007888:	d0e7      	beq.n	800785a <USB_EPStopXfer+0x82>
 800788a:	e048      	b.n	800791e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078a4:	d13b      	bne.n	800791e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	683a      	ldr	r2, [r7, #0]
 80078b8:	7812      	ldrb	r2, [r2, #0]
 80078ba:	0151      	lsls	r1, r2, #5
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	440a      	add	r2, r1
 80078c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3301      	adds	r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d902      	bls.n	8007904 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	75fb      	strb	r3, [r7, #23]
          break;
 8007902:	e00c      	b.n	800791e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800791c:	d0e7      	beq.n	80078ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800791e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007920:	4618      	mov	r0, r3
 8007922:	371c      	adds	r7, #28
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800792c:	b480      	push	{r7}
 800792e:	b089      	sub	sp, #36	; 0x24
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	4611      	mov	r1, r2
 8007938:	461a      	mov	r2, r3
 800793a:	460b      	mov	r3, r1
 800793c:	71fb      	strb	r3, [r7, #7]
 800793e:	4613      	mov	r3, r2
 8007940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800794a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800794e:	2b00      	cmp	r3, #0
 8007950:	d123      	bne.n	800799a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007952:	88bb      	ldrh	r3, [r7, #4]
 8007954:	3303      	adds	r3, #3
 8007956:	089b      	lsrs	r3, r3, #2
 8007958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800795a:	2300      	movs	r3, #0
 800795c:	61bb      	str	r3, [r7, #24]
 800795e:	e018      	b.n	8007992 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007960:	79fb      	ldrb	r3, [r7, #7]
 8007962:	031a      	lsls	r2, r3, #12
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800796c:	461a      	mov	r2, r3
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	3301      	adds	r3, #1
 8007978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3301      	adds	r3, #1
 800797e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	3301      	adds	r3, #1
 8007984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	3301      	adds	r3, #1
 800798a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	3301      	adds	r3, #1
 8007990:	61bb      	str	r3, [r7, #24]
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	429a      	cmp	r2, r3
 8007998:	d3e2      	bcc.n	8007960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3724      	adds	r7, #36	; 0x24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b08b      	sub	sp, #44	; 0x2c
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80079be:	88fb      	ldrh	r3, [r7, #6]
 80079c0:	089b      	lsrs	r3, r3, #2
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	f003 0303 	and.w	r3, r3, #3
 80079cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079ce:	2300      	movs	r3, #0
 80079d0:	623b      	str	r3, [r7, #32]
 80079d2:	e014      	b.n	80079fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	601a      	str	r2, [r3, #0]
    pDest++;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	3301      	adds	r3, #1
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	3301      	adds	r3, #1
 80079ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	3301      	adds	r3, #1
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	3301      	adds	r3, #1
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	3301      	adds	r3, #1
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d3e6      	bcc.n	80079d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a06:	8bfb      	ldrh	r3, [r7, #30]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01e      	beq.n	8007a4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a16:	461a      	mov	r2, r3
 8007a18:	f107 0310 	add.w	r3, r7, #16
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	701a      	strb	r2, [r3, #0]
      i++;
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	3301      	adds	r3, #1
 8007a36:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a3e:	8bfb      	ldrh	r3, [r7, #30]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a44:	8bfb      	ldrh	r3, [r7, #30]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1ea      	bne.n	8007a20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	372c      	adds	r7, #44	; 0x2c
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	785b      	ldrb	r3, [r3, #1]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d12c      	bne.n	8007ace <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	db12      	blt.n	8007aac <USB_EPSetStall+0x54>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00f      	beq.n	8007aac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	015a      	lsls	r2, r3, #5
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	4413      	add	r3, r2
 8007a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	0151      	lsls	r1, r2, #5
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	440a      	add	r2, r1
 8007aa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007aaa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	0151      	lsls	r1, r2, #5
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	440a      	add	r2, r1
 8007ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aca:	6013      	str	r3, [r2, #0]
 8007acc:	e02b      	b.n	8007b26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	db12      	blt.n	8007b06 <USB_EPSetStall+0xae>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00f      	beq.n	8007b06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d128      	bne.n	8007ba2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	015a      	lsls	r2, r3, #5
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	4413      	add	r3, r2
 8007b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	0151      	lsls	r1, r2, #5
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	440a      	add	r2, r1
 8007b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	791b      	ldrb	r3, [r3, #4]
 8007b74:	2b03      	cmp	r3, #3
 8007b76:	d003      	beq.n	8007b80 <USB_EPClearStall+0x4c>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	791b      	ldrb	r3, [r3, #4]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d138      	bne.n	8007bf2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	e027      	b.n	8007bf2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	791b      	ldrb	r3, [r3, #4]
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d003      	beq.n	8007bd2 <USB_EPClearStall+0x9e>
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	791b      	ldrb	r3, [r3, #4]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d10f      	bne.n	8007bf2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	0151      	lsls	r1, r2, #5
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	440a      	add	r2, r1
 8007be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c34:	68f9      	ldr	r1, [r7, #12]
 8007c36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c66:	f023 0303 	bic.w	r3, r3, #3
 8007c6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c7a:	f023 0302 	bic.w	r3, r3, #2
 8007c7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b085      	sub	sp, #20
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ca8:	f023 0303 	bic.w	r3, r3, #3
 8007cac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cbc:	f043 0302 	orr.w	r3, r3, #2
 8007cc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	699b      	ldr	r3, [r3, #24]
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	4013      	ands	r3, r2
 8007d18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	0c1b      	lsrs	r3, r3, #16
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	b29b      	uxth	r3, r3
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d6e:	78fb      	ldrb	r3, [r7, #3]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	4013      	ands	r3, r2
 8007d8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d8c:	68bb      	ldr	r3, [r7, #8]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b087      	sub	sp, #28
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	460b      	mov	r3, r1
 8007da4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007dbe:	78fb      	ldrb	r3, [r7, #3]
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dca:	01db      	lsls	r3, r3, #7
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	4013      	ands	r3, r2
 8007de6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007de8:	68bb      	ldr	r3, [r7, #8]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	371c      	adds	r7, #28
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f003 0301 	and.w	r3, r3, #1
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b085      	sub	sp, #20
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e30:	f023 0307 	bic.w	r3, r3, #7
 8007e34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3714      	adds	r7, #20
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	460b      	mov	r3, r1
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	333c      	adds	r3, #60	; 0x3c
 8007e6e:	3304      	adds	r3, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	4a26      	ldr	r2, [pc, #152]	; (8007f10 <USB_EP0_OutStart+0xb8>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d90a      	bls.n	8007e92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e8c:	d101      	bne.n	8007e92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e037      	b.n	8007f02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e98:	461a      	mov	r2, r3
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec0:	f043 0318 	orr.w	r3, r3, #24
 8007ec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	697a      	ldr	r2, [r7, #20]
 8007ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007ed8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007eda:	7afb      	ldrb	r3, [r7, #11]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d10f      	bne.n	8007f00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007efa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007efe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	371c      	adds	r7, #28
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	4f54300a 	.word	0x4f54300a

08007f14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	4a13      	ldr	r2, [pc, #76]	; (8007f78 <USB_CoreReset+0x64>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d901      	bls.n	8007f32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e01b      	b.n	8007f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	daf2      	bge.n	8007f20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	f043 0201 	orr.w	r2, r3, #1
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4a09      	ldr	r2, [pc, #36]	; (8007f78 <USB_CoreReset+0x64>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d901      	bls.n	8007f5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e006      	b.n	8007f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d0f0      	beq.n	8007f4a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	00030d40 	.word	0x00030d40

08007f7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007f80:	4904      	ldr	r1, [pc, #16]	; (8007f94 <MX_FATFS_Init+0x18>)
 8007f82:	4805      	ldr	r0, [pc, #20]	; (8007f98 <MX_FATFS_Init+0x1c>)
 8007f84:	f002 f966 	bl	800a254 <FATFS_LinkDriver>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	4b03      	ldr	r3, [pc, #12]	; (8007f9c <MX_FATFS_Init+0x20>)
 8007f8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007f90:	bf00      	nop
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	200003d4 	.word	0x200003d4
 8007f98:	0800ad30 	.word	0x0800ad30
 8007f9c:	200003d0 	.word	0x200003d0

08007fa0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007faa:	f000 f879 	bl	80080a0 <BSP_SD_IsDetected>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d001      	beq.n	8007fb8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e012      	b.n	8007fde <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007fb8:	480b      	ldr	r0, [pc, #44]	; (8007fe8 <BSP_SD_Init+0x48>)
 8007fba:	f7fb fe7b 	bl	8003cb4 <HAL_SD_Init>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d109      	bne.n	8007fdc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007fcc:	4806      	ldr	r0, [pc, #24]	; (8007fe8 <BSP_SD_Init+0x48>)
 8007fce:	f7fc fc55 	bl	800487c <HAL_SD_ConfigWideBusOperation>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200001b4 	.word	0x200001b4

08007fec <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af02      	add	r7, sp, #8
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
 8007ff8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	68f9      	ldr	r1, [r7, #12]
 8008008:	4806      	ldr	r0, [pc, #24]	; (8008024 <BSP_SD_ReadBlocks+0x38>)
 800800a:	f7fb ff03 	bl	8003e14 <HAL_SD_ReadBlocks>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	200001b4 	.word	0x200001b4

08008028 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b088      	sub	sp, #32
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	4806      	ldr	r0, [pc, #24]	; (8008060 <BSP_SD_WriteBlocks+0x38>)
 8008046:	f7fc f8c3 	bl	80041d0 <HAL_SD_WriteBlocks>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008054:	7dfb      	ldrb	r3, [r7, #23]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
 800805e:	bf00      	nop
 8008060:	200001b4 	.word	0x200001b4

08008064 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008068:	4805      	ldr	r0, [pc, #20]	; (8008080 <BSP_SD_GetCardState+0x1c>)
 800806a:	f7fc fca1 	bl	80049b0 <HAL_SD_GetCardState>
 800806e:	4603      	mov	r3, r0
 8008070:	2b04      	cmp	r3, #4
 8008072:	bf14      	ite	ne
 8008074:	2301      	movne	r3, #1
 8008076:	2300      	moveq	r3, #0
 8008078:	b2db      	uxtb	r3, r3
}
 800807a:	4618      	mov	r0, r3
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	200001b4 	.word	0x200001b4

08008084 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	4803      	ldr	r0, [pc, #12]	; (800809c <BSP_SD_GetCardInfo+0x18>)
 8008090:	f7fc fbc8 	bl	8004824 <HAL_SD_GetCardInfo>
}
 8008094:	bf00      	nop
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	200001b4 	.word	0x200001b4

080080a0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80080a6:	2301      	movs	r3, #1
 80080a8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80080aa:	f000 f80b 	bl	80080c4 <BSP_PlatformIsDetected>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80080b4:	2300      	movs	r3, #0
 80080b6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	b2db      	uxtb	r3, r3
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80080ca:	2301      	movs	r3, #1
 80080cc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80080ce:	2180      	movs	r1, #128	; 0x80
 80080d0:	4806      	ldr	r0, [pc, #24]	; (80080ec <BSP_PlatformIsDetected+0x28>)
 80080d2:	f7f9 fda3 	bl	8001c1c <HAL_GPIO_ReadPin>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80080dc:	2300      	movs	r3, #0
 80080de:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80080e0:	79fb      	ldrb	r3, [r7, #7]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	40020800 	.word	0x40020800

080080f0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80080fa:	4b0b      	ldr	r3, [pc, #44]	; (8008128 <SD_CheckStatus+0x38>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008100:	f7ff ffb0 	bl	8008064 <BSP_SD_GetCardState>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d107      	bne.n	800811a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800810a:	4b07      	ldr	r3, [pc, #28]	; (8008128 <SD_CheckStatus+0x38>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	b2da      	uxtb	r2, r3
 8008116:	4b04      	ldr	r3, [pc, #16]	; (8008128 <SD_CheckStatus+0x38>)
 8008118:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800811a:	4b03      	ldr	r3, [pc, #12]	; (8008128 <SD_CheckStatus+0x38>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	b2db      	uxtb	r3, r3
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000009 	.word	0x20000009

0800812c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	4603      	mov	r3, r0
 8008134:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008136:	4b0b      	ldr	r3, [pc, #44]	; (8008164 <SD_initialize+0x38>)
 8008138:	2201      	movs	r2, #1
 800813a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800813c:	f7ff ff30 	bl	8007fa0 <BSP_SD_Init>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d107      	bne.n	8008156 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff ffd1 	bl	80080f0 <SD_CheckStatus>
 800814e:	4603      	mov	r3, r0
 8008150:	461a      	mov	r2, r3
 8008152:	4b04      	ldr	r3, [pc, #16]	; (8008164 <SD_initialize+0x38>)
 8008154:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008156:	4b03      	ldr	r3, [pc, #12]	; (8008164 <SD_initialize+0x38>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	b2db      	uxtb	r3, r3
}
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	20000009 	.word	0x20000009

08008168 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff ffbb 	bl	80080f0 <SD_CheckStatus>
 800817a:	4603      	mov	r3, r0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	60b9      	str	r1, [r7, #8]
 800818c:	607a      	str	r2, [r7, #4]
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008198:	f04f 33ff 	mov.w	r3, #4294967295
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	68b8      	ldr	r0, [r7, #8]
 80081a2:	f7ff ff23 	bl	8007fec <BSP_SD_ReadBlocks>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d107      	bne.n	80081bc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80081ac:	bf00      	nop
 80081ae:	f7ff ff59 	bl	8008064 <BSP_SD_GetCardState>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1fa      	bne.n	80081ae <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80081bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b086      	sub	sp, #24
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80081da:	f04f 33ff 	mov.w	r3, #4294967295
 80081de:	683a      	ldr	r2, [r7, #0]
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	68b8      	ldr	r0, [r7, #8]
 80081e4:	f7ff ff20 	bl	8008028 <BSP_SD_WriteBlocks>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d107      	bne.n	80081fe <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80081ee:	bf00      	nop
 80081f0:	f7ff ff38 	bl	8008064 <BSP_SD_GetCardState>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1fa      	bne.n	80081f0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08c      	sub	sp, #48	; 0x30
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	603a      	str	r2, [r7, #0]
 8008212:	71fb      	strb	r3, [r7, #7]
 8008214:	460b      	mov	r3, r1
 8008216:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800821e:	4b25      	ldr	r3, [pc, #148]	; (80082b4 <SD_ioctl+0xac>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <SD_ioctl+0x28>
 800822c:	2303      	movs	r3, #3
 800822e:	e03c      	b.n	80082aa <SD_ioctl+0xa2>

  switch (cmd)
 8008230:	79bb      	ldrb	r3, [r7, #6]
 8008232:	2b03      	cmp	r3, #3
 8008234:	d834      	bhi.n	80082a0 <SD_ioctl+0x98>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <SD_ioctl+0x34>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	0800824d 	.word	0x0800824d
 8008240:	08008255 	.word	0x08008255
 8008244:	0800826d 	.word	0x0800826d
 8008248:	08008287 	.word	0x08008287
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008252:	e028      	b.n	80082a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008254:	f107 030c 	add.w	r3, r7, #12
 8008258:	4618      	mov	r0, r3
 800825a:	f7ff ff13 	bl	8008084 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800825e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008264:	2300      	movs	r3, #0
 8008266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800826a:	e01c      	b.n	80082a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800826c:	f107 030c 	add.w	r3, r7, #12
 8008270:	4618      	mov	r0, r3
 8008272:	f7ff ff07 	bl	8008084 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	b29a      	uxth	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800827e:	2300      	movs	r3, #0
 8008280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008284:	e00f      	b.n	80082a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008286:	f107 030c 	add.w	r3, r7, #12
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fefa 	bl	8008084 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	0a5a      	lsrs	r2, r3, #9
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800829e:	e002      	b.n	80082a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80082a0:	2304      	movs	r3, #4
 80082a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80082a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3730      	adds	r7, #48	; 0x30
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	20000009 	.word	0x20000009

080082b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80082c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80082c8:	f002 fc86 	bl	800abd8 <USBD_static_malloc>
 80082cc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d109      	bne.n	80082e8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	32b0      	adds	r2, #176	; 0xb0
 80082de:	2100      	movs	r1, #0
 80082e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80082e4:	2302      	movs	r3, #2
 80082e6:	e0d4      	b.n	8008492 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80082e8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80082ec:	2100      	movs	r1, #0
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f002 fcda 	bl	800aca8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	32b0      	adds	r2, #176	; 0xb0
 80082fe:	68f9      	ldr	r1, [r7, #12]
 8008300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	32b0      	adds	r2, #176	; 0xb0
 800830e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7c1b      	ldrb	r3, [r3, #16]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d138      	bne.n	8008392 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008320:	4b5e      	ldr	r3, [pc, #376]	; (800849c <USBD_CDC_Init+0x1e4>)
 8008322:	7819      	ldrb	r1, [r3, #0]
 8008324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008328:	2202      	movs	r2, #2
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f002 fb31 	bl	800a992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008330:	4b5a      	ldr	r3, [pc, #360]	; (800849c <USBD_CDC_Init+0x1e4>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	f003 020f 	and.w	r2, r3, #15
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	440b      	add	r3, r1
 8008344:	3324      	adds	r3, #36	; 0x24
 8008346:	2201      	movs	r2, #1
 8008348:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800834a:	4b55      	ldr	r3, [pc, #340]	; (80084a0 <USBD_CDC_Init+0x1e8>)
 800834c:	7819      	ldrb	r1, [r3, #0]
 800834e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008352:	2202      	movs	r2, #2
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f002 fb1c 	bl	800a992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800835a:	4b51      	ldr	r3, [pc, #324]	; (80084a0 <USBD_CDC_Init+0x1e8>)
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	f003 020f 	and.w	r2, r3, #15
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4613      	mov	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008372:	2201      	movs	r2, #1
 8008374:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008376:	4b4b      	ldr	r3, [pc, #300]	; (80084a4 <USBD_CDC_Init+0x1ec>)
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	f003 020f 	and.w	r2, r3, #15
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	3326      	adds	r3, #38	; 0x26
 800838c:	2210      	movs	r2, #16
 800838e:	801a      	strh	r2, [r3, #0]
 8008390:	e035      	b.n	80083fe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008392:	4b42      	ldr	r3, [pc, #264]	; (800849c <USBD_CDC_Init+0x1e4>)
 8008394:	7819      	ldrb	r1, [r3, #0]
 8008396:	2340      	movs	r3, #64	; 0x40
 8008398:	2202      	movs	r2, #2
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f002 faf9 	bl	800a992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80083a0:	4b3e      	ldr	r3, [pc, #248]	; (800849c <USBD_CDC_Init+0x1e4>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	f003 020f 	and.w	r2, r3, #15
 80083a8:	6879      	ldr	r1, [r7, #4]
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	440b      	add	r3, r1
 80083b4:	3324      	adds	r3, #36	; 0x24
 80083b6:	2201      	movs	r2, #1
 80083b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80083ba:	4b39      	ldr	r3, [pc, #228]	; (80084a0 <USBD_CDC_Init+0x1e8>)
 80083bc:	7819      	ldrb	r1, [r3, #0]
 80083be:	2340      	movs	r3, #64	; 0x40
 80083c0:	2202      	movs	r2, #2
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f002 fae5 	bl	800a992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80083c8:	4b35      	ldr	r3, [pc, #212]	; (80084a0 <USBD_CDC_Init+0x1e8>)
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	f003 020f 	and.w	r2, r3, #15
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083e0:	2201      	movs	r2, #1
 80083e2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80083e4:	4b2f      	ldr	r3, [pc, #188]	; (80084a4 <USBD_CDC_Init+0x1ec>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	f003 020f 	and.w	r2, r3, #15
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	3326      	adds	r3, #38	; 0x26
 80083fa:	2210      	movs	r2, #16
 80083fc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80083fe:	4b29      	ldr	r3, [pc, #164]	; (80084a4 <USBD_CDC_Init+0x1ec>)
 8008400:	7819      	ldrb	r1, [r3, #0]
 8008402:	2308      	movs	r3, #8
 8008404:	2203      	movs	r2, #3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f002 fac3 	bl	800a992 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800840c:	4b25      	ldr	r3, [pc, #148]	; (80084a4 <USBD_CDC_Init+0x1ec>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 020f 	and.w	r2, r3, #15
 8008414:	6879      	ldr	r1, [r7, #4]
 8008416:	4613      	mov	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	440b      	add	r3, r1
 8008420:	3324      	adds	r3, #36	; 0x24
 8008422:	2201      	movs	r2, #1
 8008424:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	33b0      	adds	r3, #176	; 0xb0
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	4413      	add	r3, r2
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800845c:	2302      	movs	r3, #2
 800845e:	e018      	b.n	8008492 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	7c1b      	ldrb	r3, [r3, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008468:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <USBD_CDC_Init+0x1e8>)
 800846a:	7819      	ldrb	r1, [r3, #0]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f002 fb7a 	bl	800ab70 <USBD_LL_PrepareReceive>
 800847c:	e008      	b.n	8008490 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800847e:	4b08      	ldr	r3, [pc, #32]	; (80084a0 <USBD_CDC_Init+0x1e8>)
 8008480:	7819      	ldrb	r1, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008488:	2340      	movs	r3, #64	; 0x40
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f002 fb70 	bl	800ab70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000093 	.word	0x20000093
 80084a0:	20000094 	.word	0x20000094
 80084a4:	20000095 	.word	0x20000095

080084a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80084b4:	4b3a      	ldr	r3, [pc, #232]	; (80085a0 <USBD_CDC_DeInit+0xf8>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	4619      	mov	r1, r3
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f002 fa8f 	bl	800a9de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80084c0:	4b37      	ldr	r3, [pc, #220]	; (80085a0 <USBD_CDC_DeInit+0xf8>)
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	f003 020f 	and.w	r2, r3, #15
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	440b      	add	r3, r1
 80084d4:	3324      	adds	r3, #36	; 0x24
 80084d6:	2200      	movs	r2, #0
 80084d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80084da:	4b32      	ldr	r3, [pc, #200]	; (80085a4 <USBD_CDC_DeInit+0xfc>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f002 fa7c 	bl	800a9de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80084e6:	4b2f      	ldr	r3, [pc, #188]	; (80085a4 <USBD_CDC_DeInit+0xfc>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	f003 020f 	and.w	r2, r3, #15
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	4613      	mov	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	440b      	add	r3, r1
 80084fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80084fe:	2200      	movs	r2, #0
 8008500:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008502:	4b29      	ldr	r3, [pc, #164]	; (80085a8 <USBD_CDC_DeInit+0x100>)
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f002 fa68 	bl	800a9de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800850e:	4b26      	ldr	r3, [pc, #152]	; (80085a8 <USBD_CDC_DeInit+0x100>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f003 020f 	and.w	r2, r3, #15
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4613      	mov	r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	3324      	adds	r3, #36	; 0x24
 8008524:	2200      	movs	r2, #0
 8008526:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008528:	4b1f      	ldr	r3, [pc, #124]	; (80085a8 <USBD_CDC_DeInit+0x100>)
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	f003 020f 	and.w	r2, r3, #15
 8008530:	6879      	ldr	r1, [r7, #4]
 8008532:	4613      	mov	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	440b      	add	r3, r1
 800853c:	3326      	adds	r3, #38	; 0x26
 800853e:	2200      	movs	r2, #0
 8008540:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	32b0      	adds	r2, #176	; 0xb0
 800854c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01f      	beq.n	8008594 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	33b0      	adds	r3, #176	; 0xb0
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	32b0      	adds	r2, #176	; 0xb0
 8008572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008576:	4618      	mov	r0, r3
 8008578:	f002 fb3c 	bl	800abf4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	32b0      	adds	r2, #176	; 0xb0
 8008586:	2100      	movs	r1, #0
 8008588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20000093 	.word	0x20000093
 80085a4:	20000094 	.word	0x20000094
 80085a8:	20000095 	.word	0x20000095

080085ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	32b0      	adds	r2, #176	; 0xb0
 80085c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80085d8:	2303      	movs	r3, #3
 80085da:	e0bf      	b.n	800875c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d050      	beq.n	800868a <USBD_CDC_Setup+0xde>
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	f040 80af 	bne.w	800874c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	88db      	ldrh	r3, [r3, #6]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d03a      	beq.n	800866c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	b25b      	sxtb	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	da1b      	bge.n	8008638 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	33b0      	adds	r3, #176	; 0xb0
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	4413      	add	r3, r2
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008616:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	88d2      	ldrh	r2, [r2, #6]
 800861c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	88db      	ldrh	r3, [r3, #6]
 8008622:	2b07      	cmp	r3, #7
 8008624:	bf28      	it	cs
 8008626:	2307      	movcs	r3, #7
 8008628:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	89fa      	ldrh	r2, [r7, #14]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 fd43 	bl	800a0bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008636:	e090      	b.n	800875a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	785a      	ldrb	r2, [r3, #1]
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	88db      	ldrh	r3, [r3, #6]
 8008646:	2b3f      	cmp	r3, #63	; 0x3f
 8008648:	d803      	bhi.n	8008652 <USBD_CDC_Setup+0xa6>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	88db      	ldrh	r3, [r3, #6]
 800864e:	b2da      	uxtb	r2, r3
 8008650:	e000      	b.n	8008654 <USBD_CDC_Setup+0xa8>
 8008652:	2240      	movs	r2, #64	; 0x40
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800865a:	6939      	ldr	r1, [r7, #16]
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008662:	461a      	mov	r2, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 fd55 	bl	800a114 <USBD_CtlPrepareRx>
      break;
 800866a:	e076      	b.n	800875a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	33b0      	adds	r3, #176	; 0xb0
 8008676:	009b      	lsls	r3, r3, #2
 8008678:	4413      	add	r3, r2
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	683a      	ldr	r2, [r7, #0]
 8008680:	7850      	ldrb	r0, [r2, #1]
 8008682:	2200      	movs	r2, #0
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	4798      	blx	r3
      break;
 8008688:	e067      	b.n	800875a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	2b0b      	cmp	r3, #11
 8008690:	d851      	bhi.n	8008736 <USBD_CDC_Setup+0x18a>
 8008692:	a201      	add	r2, pc, #4	; (adr r2, 8008698 <USBD_CDC_Setup+0xec>)
 8008694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008698:	080086c9 	.word	0x080086c9
 800869c:	08008745 	.word	0x08008745
 80086a0:	08008737 	.word	0x08008737
 80086a4:	08008737 	.word	0x08008737
 80086a8:	08008737 	.word	0x08008737
 80086ac:	08008737 	.word	0x08008737
 80086b0:	08008737 	.word	0x08008737
 80086b4:	08008737 	.word	0x08008737
 80086b8:	08008737 	.word	0x08008737
 80086bc:	08008737 	.word	0x08008737
 80086c0:	080086f3 	.word	0x080086f3
 80086c4:	0800871d 	.word	0x0800871d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d107      	bne.n	80086e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80086d4:	f107 030a 	add.w	r3, r7, #10
 80086d8:	2202      	movs	r2, #2
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 fced 	bl	800a0bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80086e2:	e032      	b.n	800874a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80086e4:	6839      	ldr	r1, [r7, #0]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f001 fc77 	bl	8009fda <USBD_CtlError>
            ret = USBD_FAIL;
 80086ec:	2303      	movs	r3, #3
 80086ee:	75fb      	strb	r3, [r7, #23]
          break;
 80086f0:	e02b      	b.n	800874a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b03      	cmp	r3, #3
 80086fc:	d107      	bne.n	800870e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80086fe:	f107 030d 	add.w	r3, r7, #13
 8008702:	2201      	movs	r2, #1
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 fcd8 	bl	800a0bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800870c:	e01d      	b.n	800874a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800870e:	6839      	ldr	r1, [r7, #0]
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f001 fc62 	bl	8009fda <USBD_CtlError>
            ret = USBD_FAIL;
 8008716:	2303      	movs	r3, #3
 8008718:	75fb      	strb	r3, [r7, #23]
          break;
 800871a:	e016      	b.n	800874a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b03      	cmp	r3, #3
 8008726:	d00f      	beq.n	8008748 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008728:	6839      	ldr	r1, [r7, #0]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f001 fc55 	bl	8009fda <USBD_CtlError>
            ret = USBD_FAIL;
 8008730:	2303      	movs	r3, #3
 8008732:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008734:	e008      	b.n	8008748 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 fc4e 	bl	8009fda <USBD_CtlError>
          ret = USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	75fb      	strb	r3, [r7, #23]
          break;
 8008742:	e002      	b.n	800874a <USBD_CDC_Setup+0x19e>
          break;
 8008744:	bf00      	nop
 8008746:	e008      	b.n	800875a <USBD_CDC_Setup+0x1ae>
          break;
 8008748:	bf00      	nop
      }
      break;
 800874a:	e006      	b.n	800875a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800874c:	6839      	ldr	r1, [r7, #0]
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f001 fc43 	bl	8009fda <USBD_CtlError>
      ret = USBD_FAIL;
 8008754:	2303      	movs	r3, #3
 8008756:	75fb      	strb	r3, [r7, #23]
      break;
 8008758:	bf00      	nop
  }

  return (uint8_t)ret;
 800875a:	7dfb      	ldrb	r3, [r7, #23]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008776:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	32b0      	adds	r2, #176	; 0xb0
 8008782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800878a:	2303      	movs	r3, #3
 800878c:	e065      	b.n	800885a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	32b0      	adds	r2, #176	; 0xb0
 8008798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	f003 020f 	and.w	r2, r3, #15
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	3318      	adds	r3, #24
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d02f      	beq.n	8008818 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80087b8:	78fb      	ldrb	r3, [r7, #3]
 80087ba:	f003 020f 	and.w	r2, r3, #15
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	3318      	adds	r3, #24
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	f003 010f 	and.w	r1, r3, #15
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	460b      	mov	r3, r1
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	440b      	add	r3, r1
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4403      	add	r3, r0
 80087e0:	3348      	adds	r3, #72	; 0x48
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80087e8:	fb01 f303 	mul.w	r3, r1, r3
 80087ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d112      	bne.n	8008818 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80087f2:	78fb      	ldrb	r3, [r7, #3]
 80087f4:	f003 020f 	and.w	r2, r3, #15
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	4613      	mov	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	4413      	add	r3, r2
 8008800:	009b      	lsls	r3, r3, #2
 8008802:	440b      	add	r3, r1
 8008804:	3318      	adds	r3, #24
 8008806:	2200      	movs	r2, #0
 8008808:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800880a:	78f9      	ldrb	r1, [r7, #3]
 800880c:	2300      	movs	r3, #0
 800880e:	2200      	movs	r2, #0
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f002 f98c 	bl	800ab2e <USBD_LL_Transmit>
 8008816:	e01f      	b.n	8008858 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	33b0      	adds	r3, #176	; 0xb0
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d010      	beq.n	8008858 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	33b0      	adds	r3, #176	; 0xb0
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b084      	sub	sp, #16
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	460b      	mov	r3, r1
 800886c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	32b0      	adds	r2, #176	; 0xb0
 8008878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	32b0      	adds	r2, #176	; 0xb0
 8008888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008890:	2303      	movs	r3, #3
 8008892:	e01a      	b.n	80088ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f002 f98a 	bl	800abb2 <USBD_LL_GetRxDataSize>
 800889e:	4602      	mov	r2, r0
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	33b0      	adds	r3, #176	; 0xb0
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80088c4:	4611      	mov	r1, r2
 80088c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	32b0      	adds	r2, #176	; 0xb0
 80088e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e025      	b.n	8008940 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	33b0      	adds	r3, #176	; 0xb0
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01a      	beq.n	800893e <USBD_CDC_EP0_RxReady+0x6c>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800890e:	2bff      	cmp	r3, #255	; 0xff
 8008910:	d015      	beq.n	800893e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	33b0      	adds	r3, #176	; 0xb0
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800892a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800892c:	68fa      	ldr	r2, [r7, #12]
 800892e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008932:	b292      	uxth	r2, r2
 8008934:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	22ff      	movs	r2, #255	; 0xff
 800893a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008950:	2182      	movs	r1, #130	; 0x82
 8008952:	4818      	ldr	r0, [pc, #96]	; (80089b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008954:	f000 fd09 	bl	800936a <USBD_GetEpDesc>
 8008958:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800895a:	2101      	movs	r1, #1
 800895c:	4815      	ldr	r0, [pc, #84]	; (80089b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800895e:	f000 fd04 	bl	800936a <USBD_GetEpDesc>
 8008962:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008964:	2181      	movs	r1, #129	; 0x81
 8008966:	4813      	ldr	r0, [pc, #76]	; (80089b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008968:	f000 fcff 	bl	800936a <USBD_GetEpDesc>
 800896c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	2210      	movs	r2, #16
 8008978:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d006      	beq.n	800898e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	2200      	movs	r2, #0
 8008984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008988:	711a      	strb	r2, [r3, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d006      	beq.n	80089a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800899c:	711a      	strb	r2, [r3, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2243      	movs	r2, #67	; 0x43
 80089a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80089a8:	4b02      	ldr	r3, [pc, #8]	; (80089b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	20000050 	.word	0x20000050

080089b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80089c0:	2182      	movs	r1, #130	; 0x82
 80089c2:	4818      	ldr	r0, [pc, #96]	; (8008a24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089c4:	f000 fcd1 	bl	800936a <USBD_GetEpDesc>
 80089c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80089ca:	2101      	movs	r1, #1
 80089cc:	4815      	ldr	r0, [pc, #84]	; (8008a24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089ce:	f000 fccc 	bl	800936a <USBD_GetEpDesc>
 80089d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80089d4:	2181      	movs	r1, #129	; 0x81
 80089d6:	4813      	ldr	r0, [pc, #76]	; (8008a24 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80089d8:	f000 fcc7 	bl	800936a <USBD_GetEpDesc>
 80089dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	2210      	movs	r2, #16
 80089e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d006      	beq.n	80089fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	2200      	movs	r2, #0
 80089f4:	711a      	strb	r2, [r3, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f042 0202 	orr.w	r2, r2, #2
 80089fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d006      	beq.n	8008a12 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2200      	movs	r2, #0
 8008a08:	711a      	strb	r2, [r3, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f042 0202 	orr.w	r2, r2, #2
 8008a10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2243      	movs	r2, #67	; 0x43
 8008a16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a18:	4b02      	ldr	r3, [pc, #8]	; (8008a24 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3718      	adds	r7, #24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000050 	.word	0x20000050

08008a28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b086      	sub	sp, #24
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008a30:	2182      	movs	r1, #130	; 0x82
 8008a32:	4818      	ldr	r0, [pc, #96]	; (8008a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a34:	f000 fc99 	bl	800936a <USBD_GetEpDesc>
 8008a38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	4815      	ldr	r0, [pc, #84]	; (8008a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a3e:	f000 fc94 	bl	800936a <USBD_GetEpDesc>
 8008a42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008a44:	2181      	movs	r1, #129	; 0x81
 8008a46:	4813      	ldr	r0, [pc, #76]	; (8008a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008a48:	f000 fc8f 	bl	800936a <USBD_GetEpDesc>
 8008a4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2210      	movs	r2, #16
 8008a58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d006      	beq.n	8008a6e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a68:	711a      	strb	r2, [r3, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d006      	beq.n	8008a82 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a7c:	711a      	strb	r2, [r3, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2243      	movs	r2, #67	; 0x43
 8008a86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008a88:	4b02      	ldr	r3, [pc, #8]	; (8008a94 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20000050 	.word	0x20000050

08008a98 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	220a      	movs	r2, #10
 8008aa4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008aa6:	4b03      	ldr	r3, [pc, #12]	; (8008ab4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	2000000c 	.word	0x2000000c

08008ab8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d101      	bne.n	8008acc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e009      	b.n	8008ae0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	33b0      	adds	r3, #176	; 0xb0
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	32b0      	adds	r2, #176	; 0xb0
 8008b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b06:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e008      	b.n	8008b24 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	371c      	adds	r7, #28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	32b0      	adds	r2, #176	; 0xb0
 8008b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008b50:	2303      	movs	r3, #3
 8008b52:	e004      	b.n	8008b5e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
	...

08008b6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	32b0      	adds	r2, #176	; 0xb0
 8008b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b82:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	32b0      	adds	r2, #176	; 0xb0
 8008b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e018      	b.n	8008bcc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7c1b      	ldrb	r3, [r3, #16]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10a      	bne.n	8008bb8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008ba2:	4b0c      	ldr	r3, [pc, #48]	; (8008bd4 <USBD_CDC_ReceivePacket+0x68>)
 8008ba4:	7819      	ldrb	r1, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f001 ffdd 	bl	800ab70 <USBD_LL_PrepareReceive>
 8008bb6:	e008      	b.n	8008bca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bb8:	4b06      	ldr	r3, [pc, #24]	; (8008bd4 <USBD_CDC_ReceivePacket+0x68>)
 8008bba:	7819      	ldrb	r1, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bc2:	2340      	movs	r3, #64	; 0x40
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 ffd3 	bl	800ab70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000094 	.word	0x20000094

08008bd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bec:	2303      	movs	r3, #3
 8008bee:	e01f      	b.n	8008c30 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	79fa      	ldrb	r2, [r7, #7]
 8008c22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f001 fe47 	bl	800a8b8 <USBD_LL_Init>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e025      	b.n	8008c9c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	32ae      	adds	r2, #174	; 0xae
 8008c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00f      	beq.n	8008c8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	32ae      	adds	r2, #174	; 0xae
 8008c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	f107 020e 	add.w	r2, r7, #14
 8008c80:	4610      	mov	r0, r2
 8008c82:	4798      	blx	r3
 8008c84:	4602      	mov	r2, r0
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c92:	1c5a      	adds	r2, r3, #1
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fe55 	bl	800a95c <USBD_LL_Start>
 8008cb2:	4603      	mov	r3, r0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cc4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d009      	beq.n	8008d00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	78fa      	ldrb	r2, [r7, #3]
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	4798      	blx	r3
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	460b      	mov	r3, r1
 8008d14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	4611      	mov	r1, r2
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	4798      	blx	r3
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d30:	2303      	movs	r3, #3
 8008d32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 f908 	bl	8009f66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d64:	461a      	mov	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d72:	f003 031f 	and.w	r3, r3, #31
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d01a      	beq.n	8008db0 <USBD_LL_SetupStage+0x72>
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d822      	bhi.n	8008dc4 <USBD_LL_SetupStage+0x86>
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <USBD_LL_SetupStage+0x4a>
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d00a      	beq.n	8008d9c <USBD_LL_SetupStage+0x5e>
 8008d86:	e01d      	b.n	8008dc4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fb5f 	bl	8009454 <USBD_StdDevReq>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73fb      	strb	r3, [r7, #15]
      break;
 8008d9a:	e020      	b.n	8008dde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008da2:	4619      	mov	r1, r3
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 fbc7 	bl	8009538 <USBD_StdItfReq>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73fb      	strb	r3, [r7, #15]
      break;
 8008dae:	e016      	b.n	8008dde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 fc29 	bl	8009610 <USBD_StdEPReq>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc2:	e00c      	b.n	8008dde <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008dca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fe22 	bl	800aa1c <USBD_LL_StallEP>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	73fb      	strb	r3, [r7, #15]
      break;
 8008ddc:	bf00      	nop
  }

  return ret;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	460b      	mov	r3, r1
 8008df2:	607a      	str	r2, [r7, #4]
 8008df4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008dfa:	7afb      	ldrb	r3, [r7, #11]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d16e      	bne.n	8008ede <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008e06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	f040 8098 	bne.w	8008f44 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d913      	bls.n	8008e48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	1ad2      	subs	r2, r2, r3
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	4293      	cmp	r3, r2
 8008e38:	bf28      	it	cs
 8008e3a:	4613      	movcs	r3, r2
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f001 f984 	bl	800a14e <USBD_CtlContinueRx>
 8008e46:	e07d      	b.n	8008f44 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e4e:	f003 031f 	and.w	r3, r3, #31
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d014      	beq.n	8008e80 <USBD_LL_DataOutStage+0x98>
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d81d      	bhi.n	8008e96 <USBD_LL_DataOutStage+0xae>
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <USBD_LL_DataOutStage+0x7c>
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d003      	beq.n	8008e6a <USBD_LL_DataOutStage+0x82>
 8008e62:	e018      	b.n	8008e96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	75bb      	strb	r3, [r7, #22]
            break;
 8008e68:	e018      	b.n	8008e9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	4619      	mov	r1, r3
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 fa5e 	bl	8009336 <USBD_CoreFindIF>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	75bb      	strb	r3, [r7, #22]
            break;
 8008e7e:	e00d      	b.n	8008e9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	4619      	mov	r1, r3
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f000 fa60 	bl	8009350 <USBD_CoreFindEP>
 8008e90:	4603      	mov	r3, r0
 8008e92:	75bb      	strb	r3, [r7, #22]
            break;
 8008e94:	e002      	b.n	8008e9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	75bb      	strb	r3, [r7, #22]
            break;
 8008e9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e9c:	7dbb      	ldrb	r3, [r7, #22]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d119      	bne.n	8008ed6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d113      	bne.n	8008ed6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008eae:	7dba      	ldrb	r2, [r7, #22]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	32ae      	adds	r2, #174	; 0xae
 8008eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008ebe:	7dba      	ldrb	r2, [r7, #22]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008ec6:	7dba      	ldrb	r2, [r7, #22]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	32ae      	adds	r2, #174	; 0xae
 8008ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f001 f94a 	bl	800a170 <USBD_CtlSendStatus>
 8008edc:	e032      	b.n	8008f44 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ede:	7afb      	ldrb	r3, [r7, #11]
 8008ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 fa31 	bl	8009350 <USBD_CoreFindEP>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ef2:	7dbb      	ldrb	r3, [r7, #22]
 8008ef4:	2bff      	cmp	r3, #255	; 0xff
 8008ef6:	d025      	beq.n	8008f44 <USBD_LL_DataOutStage+0x15c>
 8008ef8:	7dbb      	ldrb	r3, [r7, #22]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d122      	bne.n	8008f44 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b03      	cmp	r3, #3
 8008f08:	d117      	bne.n	8008f3a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008f0a:	7dba      	ldrb	r2, [r7, #22]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	32ae      	adds	r2, #174	; 0xae
 8008f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00f      	beq.n	8008f3a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f1a:	7dba      	ldrb	r2, [r7, #22]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f22:	7dba      	ldrb	r2, [r7, #22]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	32ae      	adds	r2, #174	; 0xae
 8008f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2c:	699b      	ldr	r3, [r3, #24]
 8008f2e:	7afa      	ldrb	r2, [r7, #11]
 8008f30:	4611      	mov	r1, r2
 8008f32:	68f8      	ldr	r0, [r7, #12]
 8008f34:	4798      	blx	r3
 8008f36:	4603      	mov	r3, r0
 8008f38:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
 8008f42:	e000      	b.n	8008f46 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}

08008f4e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f4e:	b580      	push	{r7, lr}
 8008f50:	b086      	sub	sp, #24
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	60f8      	str	r0, [r7, #12]
 8008f56:	460b      	mov	r3, r1
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f5c:	7afb      	ldrb	r3, [r7, #11]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d16f      	bne.n	8009042 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	3314      	adds	r3, #20
 8008f66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d15a      	bne.n	8009028 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d914      	bls.n	8008fa8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	1ad2      	subs	r2, r2, r3
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	461a      	mov	r2, r3
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f001 f8ac 	bl	800a0f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f001 fde5 	bl	800ab70 <USBD_LL_PrepareReceive>
 8008fa6:	e03f      	b.n	8009028 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d11c      	bne.n	8008fee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d316      	bcc.n	8008fee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d20f      	bcs.n	8008fee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	68f8      	ldr	r0, [r7, #12]
 8008fd4:	f001 f88d 	bl	800a0f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f001 fdc2 	bl	800ab70 <USBD_LL_PrepareReceive>
 8008fec:	e01c      	b.n	8009028 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d10f      	bne.n	800901a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d009      	beq.n	800901a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2200      	movs	r2, #0
 800900a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800901a:	2180      	movs	r1, #128	; 0x80
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f001 fcfd 	bl	800aa1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f001 f8b7 	bl	800a196 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d03a      	beq.n	80090a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff fe42 	bl	8008cbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009040:	e032      	b.n	80090a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009042:	7afb      	ldrb	r3, [r7, #11]
 8009044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009048:	b2db      	uxtb	r3, r3
 800904a:	4619      	mov	r1, r3
 800904c:	68f8      	ldr	r0, [r7, #12]
 800904e:	f000 f97f 	bl	8009350 <USBD_CoreFindEP>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	2bff      	cmp	r3, #255	; 0xff
 800905a:	d025      	beq.n	80090a8 <USBD_LL_DataInStage+0x15a>
 800905c:	7dfb      	ldrb	r3, [r7, #23]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d122      	bne.n	80090a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b03      	cmp	r3, #3
 800906c:	d11c      	bne.n	80090a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800906e:	7dfa      	ldrb	r2, [r7, #23]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	32ae      	adds	r2, #174	; 0xae
 8009074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d014      	beq.n	80090a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800907e:	7dfa      	ldrb	r2, [r7, #23]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009086:	7dfa      	ldrb	r2, [r7, #23]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	32ae      	adds	r2, #174	; 0xae
 800908c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	7afa      	ldrb	r2, [r7, #11]
 8009094:	4611      	mov	r1, r2
 8009096:	68f8      	ldr	r0, [r7, #12]
 8009098:	4798      	blx	r3
 800909a:	4603      	mov	r3, r0
 800909c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800909e:	7dbb      	ldrb	r3, [r7, #22]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d001      	beq.n	80090a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80090a4:	7dbb      	ldrb	r3, [r7, #22]
 80090a6:	e000      	b.n	80090aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3718      	adds	r7, #24
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d014      	beq.n	8009118 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00e      	beq.n	8009118 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	6852      	ldr	r2, [r2, #4]
 8009106:	b2d2      	uxtb	r2, r2
 8009108:	4611      	mov	r1, r2
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	4798      	blx	r3
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009114:	2303      	movs	r3, #3
 8009116:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009118:	2340      	movs	r3, #64	; 0x40
 800911a:	2200      	movs	r2, #0
 800911c:	2100      	movs	r1, #0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fc37 	bl	800a992 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2240      	movs	r2, #64	; 0x40
 8009130:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009134:	2340      	movs	r3, #64	; 0x40
 8009136:	2200      	movs	r2, #0
 8009138:	2180      	movs	r1, #128	; 0x80
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 fc29 	bl	800a992 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2240      	movs	r2, #64	; 0x40
 800914a:	621a      	str	r2, [r3, #32]

  return ret;
 800914c:	7bfb      	ldrb	r3, [r7, #15]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009156:	b480      	push	{r7}
 8009158:	b083      	sub	sp, #12
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	460b      	mov	r3, r1
 8009160:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	78fa      	ldrb	r2, [r7, #3]
 8009166:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009184:	b2da      	uxtb	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2204      	movs	r2, #4
 8009190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b083      	sub	sp, #12
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b04      	cmp	r3, #4
 80091b4:	d106      	bne.n	80091c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr

080091d2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d110      	bne.n	8009208 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d00b      	beq.n	8009208 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009208:	2300      	movs	r3, #0
}
 800920a:	4618      	mov	r0, r3
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	460b      	mov	r3, r1
 800921c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	32ae      	adds	r2, #174	; 0xae
 8009228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009230:	2303      	movs	r3, #3
 8009232:	e01c      	b.n	800926e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800923a:	b2db      	uxtb	r3, r3
 800923c:	2b03      	cmp	r3, #3
 800923e:	d115      	bne.n	800926c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	32ae      	adds	r2, #174	; 0xae
 800924a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	32ae      	adds	r2, #174	; 0xae
 800925e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	78fa      	ldrb	r2, [r7, #3]
 8009266:	4611      	mov	r1, r2
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	32ae      	adds	r2, #174	; 0xae
 800928c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009294:	2303      	movs	r3, #3
 8009296:	e01c      	b.n	80092d2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d115      	bne.n	80092d0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	32ae      	adds	r2, #174	; 0xae
 80092ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d00b      	beq.n	80092d0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	32ae      	adds	r2, #174	; 0xae
 80092c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c8:	78fa      	ldrb	r2, [r7, #3]
 80092ca:	4611      	mov	r1, r2
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800930a:	2b00      	cmp	r3, #0
 800930c:	d00e      	beq.n	800932c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	6852      	ldr	r2, [r2, #4]
 800931a:	b2d2      	uxtb	r2, r2
 800931c:	4611      	mov	r1, r2
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d001      	beq.n	800932c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009328:	2303      	movs	r3, #3
 800932a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009336:	b480      	push	{r7}
 8009338:	b083      	sub	sp, #12
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009342:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009344:	4618      	mov	r0, r3
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800935c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800935e:	4618      	mov	r0, r3
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b086      	sub	sp, #24
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	460b      	mov	r3, r1
 8009374:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	885b      	ldrh	r3, [r3, #2]
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	b29b      	uxth	r3, r3
 800938e:	429a      	cmp	r2, r3
 8009390:	d920      	bls.n	80093d4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	b29b      	uxth	r3, r3
 8009398:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800939a:	e013      	b.n	80093c4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800939c:	f107 030a 	add.w	r3, r7, #10
 80093a0:	4619      	mov	r1, r3
 80093a2:	6978      	ldr	r0, [r7, #20]
 80093a4:	f000 f81b 	bl	80093de <USBD_GetNextDesc>
 80093a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	785b      	ldrb	r3, [r3, #1]
 80093ae:	2b05      	cmp	r3, #5
 80093b0:	d108      	bne.n	80093c4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	789b      	ldrb	r3, [r3, #2]
 80093ba:	78fa      	ldrb	r2, [r7, #3]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d008      	beq.n	80093d2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80093c0:	2300      	movs	r3, #0
 80093c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	885b      	ldrh	r3, [r3, #2]
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	897b      	ldrh	r3, [r7, #10]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d8e5      	bhi.n	800939c <USBD_GetEpDesc+0x32>
 80093d0:	e000      	b.n	80093d4 <USBD_GetEpDesc+0x6a>
          break;
 80093d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093d4:	693b      	ldr	r3, [r7, #16]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3718      	adds	r7, #24
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093de:	b480      	push	{r7}
 80093e0:	b085      	sub	sp, #20
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	881a      	ldrh	r2, [r3, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	4413      	add	r3, r2
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	461a      	mov	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4413      	add	r3, r2
 8009408:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800940a:	68fb      	ldr	r3, [r7, #12]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3714      	adds	r7, #20
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009418:	b480      	push	{r7}
 800941a:	b087      	sub	sp, #28
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	3301      	adds	r3, #1
 800942e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009436:	8a3b      	ldrh	r3, [r7, #16]
 8009438:	021b      	lsls	r3, r3, #8
 800943a:	b21a      	sxth	r2, r3
 800943c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009440:	4313      	orrs	r3, r2
 8009442:	b21b      	sxth	r3, r3
 8009444:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009446:	89fb      	ldrh	r3, [r7, #14]
}
 8009448:	4618      	mov	r0, r3
 800944a:	371c      	adds	r7, #28
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800946a:	2b40      	cmp	r3, #64	; 0x40
 800946c:	d005      	beq.n	800947a <USBD_StdDevReq+0x26>
 800946e:	2b40      	cmp	r3, #64	; 0x40
 8009470:	d857      	bhi.n	8009522 <USBD_StdDevReq+0xce>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00f      	beq.n	8009496 <USBD_StdDevReq+0x42>
 8009476:	2b20      	cmp	r3, #32
 8009478:	d153      	bne.n	8009522 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	32ae      	adds	r2, #174	; 0xae
 8009484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	4798      	blx	r3
 8009490:	4603      	mov	r3, r0
 8009492:	73fb      	strb	r3, [r7, #15]
      break;
 8009494:	e04a      	b.n	800952c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	785b      	ldrb	r3, [r3, #1]
 800949a:	2b09      	cmp	r3, #9
 800949c:	d83b      	bhi.n	8009516 <USBD_StdDevReq+0xc2>
 800949e:	a201      	add	r2, pc, #4	; (adr r2, 80094a4 <USBD_StdDevReq+0x50>)
 80094a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a4:	080094f9 	.word	0x080094f9
 80094a8:	0800950d 	.word	0x0800950d
 80094ac:	08009517 	.word	0x08009517
 80094b0:	08009503 	.word	0x08009503
 80094b4:	08009517 	.word	0x08009517
 80094b8:	080094d7 	.word	0x080094d7
 80094bc:	080094cd 	.word	0x080094cd
 80094c0:	08009517 	.word	0x08009517
 80094c4:	080094ef 	.word	0x080094ef
 80094c8:	080094e1 	.word	0x080094e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80094cc:	6839      	ldr	r1, [r7, #0]
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fa3c 	bl	800994c <USBD_GetDescriptor>
          break;
 80094d4:	e024      	b.n	8009520 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094d6:	6839      	ldr	r1, [r7, #0]
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fba1 	bl	8009c20 <USBD_SetAddress>
          break;
 80094de:	e01f      	b.n	8009520 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fbe0 	bl	8009ca8 <USBD_SetConfig>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73fb      	strb	r3, [r7, #15]
          break;
 80094ec:	e018      	b.n	8009520 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fc83 	bl	8009dfc <USBD_GetConfig>
          break;
 80094f6:	e013      	b.n	8009520 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fcb4 	bl	8009e68 <USBD_GetStatus>
          break;
 8009500:	e00e      	b.n	8009520 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fce3 	bl	8009ed0 <USBD_SetFeature>
          break;
 800950a:	e009      	b.n	8009520 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800950c:	6839      	ldr	r1, [r7, #0]
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fd07 	bl	8009f22 <USBD_ClrFeature>
          break;
 8009514:	e004      	b.n	8009520 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fd5e 	bl	8009fda <USBD_CtlError>
          break;
 800951e:	bf00      	nop
      }
      break;
 8009520:	e004      	b.n	800952c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fd58 	bl	8009fda <USBD_CtlError>
      break;
 800952a:	bf00      	nop
  }

  return ret;
 800952c:	7bfb      	ldrb	r3, [r7, #15]
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop

08009538 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800954e:	2b40      	cmp	r3, #64	; 0x40
 8009550:	d005      	beq.n	800955e <USBD_StdItfReq+0x26>
 8009552:	2b40      	cmp	r3, #64	; 0x40
 8009554:	d852      	bhi.n	80095fc <USBD_StdItfReq+0xc4>
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <USBD_StdItfReq+0x26>
 800955a:	2b20      	cmp	r3, #32
 800955c:	d14e      	bne.n	80095fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009564:	b2db      	uxtb	r3, r3
 8009566:	3b01      	subs	r3, #1
 8009568:	2b02      	cmp	r3, #2
 800956a:	d840      	bhi.n	80095ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	889b      	ldrh	r3, [r3, #4]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b01      	cmp	r3, #1
 8009574:	d836      	bhi.n	80095e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	889b      	ldrh	r3, [r3, #4]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fed9 	bl	8009336 <USBD_CoreFindIF>
 8009584:	4603      	mov	r3, r0
 8009586:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2bff      	cmp	r3, #255	; 0xff
 800958c:	d01d      	beq.n	80095ca <USBD_StdItfReq+0x92>
 800958e:	7bbb      	ldrb	r3, [r7, #14]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d11a      	bne.n	80095ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009594:	7bba      	ldrb	r2, [r7, #14]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	32ae      	adds	r2, #174	; 0xae
 800959a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00f      	beq.n	80095c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80095a4:	7bba      	ldrb	r2, [r7, #14]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095ac:	7bba      	ldrb	r2, [r7, #14]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	32ae      	adds	r2, #174	; 0xae
 80095b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
 80095be:	4603      	mov	r3, r0
 80095c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095c2:	e004      	b.n	80095ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80095c4:	2303      	movs	r3, #3
 80095c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80095c8:	e001      	b.n	80095ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80095ca:	2303      	movs	r3, #3
 80095cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	88db      	ldrh	r3, [r3, #6]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d110      	bne.n	80095f8 <USBD_StdItfReq+0xc0>
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10d      	bne.n	80095f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fdc7 	bl	800a170 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095e2:	e009      	b.n	80095f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095e4:	6839      	ldr	r1, [r7, #0]
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fcf7 	bl	8009fda <USBD_CtlError>
          break;
 80095ec:	e004      	b.n	80095f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fcf2 	bl	8009fda <USBD_CtlError>
          break;
 80095f6:	e000      	b.n	80095fa <USBD_StdItfReq+0xc2>
          break;
 80095f8:	bf00      	nop
      }
      break;
 80095fa:	e004      	b.n	8009606 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80095fc:	6839      	ldr	r1, [r7, #0]
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 fceb 	bl	8009fda <USBD_CtlError>
      break;
 8009604:	bf00      	nop
  }

  return ret;
 8009606:	7bfb      	ldrb	r3, [r7, #15]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	889b      	ldrh	r3, [r3, #4]
 8009622:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800962c:	2b40      	cmp	r3, #64	; 0x40
 800962e:	d007      	beq.n	8009640 <USBD_StdEPReq+0x30>
 8009630:	2b40      	cmp	r3, #64	; 0x40
 8009632:	f200 817f 	bhi.w	8009934 <USBD_StdEPReq+0x324>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d02a      	beq.n	8009690 <USBD_StdEPReq+0x80>
 800963a:	2b20      	cmp	r3, #32
 800963c:	f040 817a 	bne.w	8009934 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009640:	7bbb      	ldrb	r3, [r7, #14]
 8009642:	4619      	mov	r1, r3
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fe83 	bl	8009350 <USBD_CoreFindEP>
 800964a:	4603      	mov	r3, r0
 800964c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800964e:	7b7b      	ldrb	r3, [r7, #13]
 8009650:	2bff      	cmp	r3, #255	; 0xff
 8009652:	f000 8174 	beq.w	800993e <USBD_StdEPReq+0x32e>
 8009656:	7b7b      	ldrb	r3, [r7, #13]
 8009658:	2b00      	cmp	r3, #0
 800965a:	f040 8170 	bne.w	800993e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800965e:	7b7a      	ldrb	r2, [r7, #13]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009666:	7b7a      	ldrb	r2, [r7, #13]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	32ae      	adds	r2, #174	; 0xae
 800966c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	f000 8163 	beq.w	800993e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009678:	7b7a      	ldrb	r2, [r7, #13]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	32ae      	adds	r2, #174	; 0xae
 800967e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	4798      	blx	r3
 800968a:	4603      	mov	r3, r0
 800968c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800968e:	e156      	b.n	800993e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	785b      	ldrb	r3, [r3, #1]
 8009694:	2b03      	cmp	r3, #3
 8009696:	d008      	beq.n	80096aa <USBD_StdEPReq+0x9a>
 8009698:	2b03      	cmp	r3, #3
 800969a:	f300 8145 	bgt.w	8009928 <USBD_StdEPReq+0x318>
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 809b 	beq.w	80097da <USBD_StdEPReq+0x1ca>
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d03c      	beq.n	8009722 <USBD_StdEPReq+0x112>
 80096a8:	e13e      	b.n	8009928 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d002      	beq.n	80096bc <USBD_StdEPReq+0xac>
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d016      	beq.n	80096e8 <USBD_StdEPReq+0xd8>
 80096ba:	e02c      	b.n	8009716 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00d      	beq.n	80096de <USBD_StdEPReq+0xce>
 80096c2:	7bbb      	ldrb	r3, [r7, #14]
 80096c4:	2b80      	cmp	r3, #128	; 0x80
 80096c6:	d00a      	beq.n	80096de <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	4619      	mov	r1, r3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 f9a5 	bl	800aa1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096d2:	2180      	movs	r1, #128	; 0x80
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 f9a1 	bl	800aa1c <USBD_LL_StallEP>
 80096da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096dc:	e020      	b.n	8009720 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fc7a 	bl	8009fda <USBD_CtlError>
              break;
 80096e6:	e01b      	b.n	8009720 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	885b      	ldrh	r3, [r3, #2]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10e      	bne.n	800970e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00b      	beq.n	800970e <USBD_StdEPReq+0xfe>
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b80      	cmp	r3, #128	; 0x80
 80096fa:	d008      	beq.n	800970e <USBD_StdEPReq+0xfe>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	88db      	ldrh	r3, [r3, #6]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d104      	bne.n	800970e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f001 f987 	bl	800aa1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fd2e 	bl	800a170 <USBD_CtlSendStatus>

              break;
 8009714:	e004      	b.n	8009720 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009716:	6839      	ldr	r1, [r7, #0]
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f000 fc5e 	bl	8009fda <USBD_CtlError>
              break;
 800971e:	bf00      	nop
          }
          break;
 8009720:	e107      	b.n	8009932 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b02      	cmp	r3, #2
 800972c:	d002      	beq.n	8009734 <USBD_StdEPReq+0x124>
 800972e:	2b03      	cmp	r3, #3
 8009730:	d016      	beq.n	8009760 <USBD_StdEPReq+0x150>
 8009732:	e04b      	b.n	80097cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00d      	beq.n	8009756 <USBD_StdEPReq+0x146>
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	2b80      	cmp	r3, #128	; 0x80
 800973e:	d00a      	beq.n	8009756 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 f969 	bl	800aa1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800974a:	2180      	movs	r1, #128	; 0x80
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 f965 	bl	800aa1c <USBD_LL_StallEP>
 8009752:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009754:	e040      	b.n	80097d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fc3e 	bl	8009fda <USBD_CtlError>
              break;
 800975e:	e03b      	b.n	80097d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	885b      	ldrh	r3, [r3, #2]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d136      	bne.n	80097d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009768:	7bbb      	ldrb	r3, [r7, #14]
 800976a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800976e:	2b00      	cmp	r3, #0
 8009770:	d004      	beq.n	800977c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f001 f96f 	bl	800aa5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 fcf7 	bl	800a170 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f7ff fde2 	bl	8009350 <USBD_CoreFindEP>
 800978c:	4603      	mov	r3, r0
 800978e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009790:	7b7b      	ldrb	r3, [r7, #13]
 8009792:	2bff      	cmp	r3, #255	; 0xff
 8009794:	d01f      	beq.n	80097d6 <USBD_StdEPReq+0x1c6>
 8009796:	7b7b      	ldrb	r3, [r7, #13]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d11c      	bne.n	80097d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800979c:	7b7a      	ldrb	r2, [r7, #13]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80097a4:	7b7a      	ldrb	r2, [r7, #13]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	32ae      	adds	r2, #174	; 0xae
 80097aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d010      	beq.n	80097d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097b4:	7b7a      	ldrb	r2, [r7, #13]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	32ae      	adds	r2, #174	; 0xae
 80097ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	4798      	blx	r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80097ca:	e004      	b.n	80097d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 fc03 	bl	8009fda <USBD_CtlError>
              break;
 80097d4:	e000      	b.n	80097d8 <USBD_StdEPReq+0x1c8>
              break;
 80097d6:	bf00      	nop
          }
          break;
 80097d8:	e0ab      	b.n	8009932 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d002      	beq.n	80097ec <USBD_StdEPReq+0x1dc>
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d032      	beq.n	8009850 <USBD_StdEPReq+0x240>
 80097ea:	e097      	b.n	800991c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d007      	beq.n	8009802 <USBD_StdEPReq+0x1f2>
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d004      	beq.n	8009802 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fbed 	bl	8009fda <USBD_CtlError>
                break;
 8009800:	e091      	b.n	8009926 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009802:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009806:	2b00      	cmp	r3, #0
 8009808:	da0b      	bge.n	8009822 <USBD_StdEPReq+0x212>
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	3310      	adds	r3, #16
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	4413      	add	r3, r2
 800981e:	3304      	adds	r3, #4
 8009820:	e00b      	b.n	800983a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009828:	4613      	mov	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	4413      	add	r3, r2
 8009838:	3304      	adds	r3, #4
 800983a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2202      	movs	r2, #2
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f000 fc37 	bl	800a0bc <USBD_CtlSendData>
              break;
 800984e:	e06a      	b.n	8009926 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009854:	2b00      	cmp	r3, #0
 8009856:	da11      	bge.n	800987c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	f003 020f 	and.w	r2, r3, #15
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	4613      	mov	r3, r2
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	440b      	add	r3, r1
 800986a:	3324      	adds	r3, #36	; 0x24
 800986c:	881b      	ldrh	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d117      	bne.n	80098a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009872:	6839      	ldr	r1, [r7, #0]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fbb0 	bl	8009fda <USBD_CtlError>
                  break;
 800987a:	e054      	b.n	8009926 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	f003 020f 	and.w	r2, r3, #15
 8009882:	6879      	ldr	r1, [r7, #4]
 8009884:	4613      	mov	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	4413      	add	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	440b      	add	r3, r1
 800988e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d104      	bne.n	80098a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fb9d 	bl	8009fda <USBD_CtlError>
                  break;
 80098a0:	e041      	b.n	8009926 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	da0b      	bge.n	80098c2 <USBD_StdEPReq+0x2b2>
 80098aa:	7bbb      	ldrb	r3, [r7, #14]
 80098ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	3310      	adds	r3, #16
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	4413      	add	r3, r2
 80098be:	3304      	adds	r3, #4
 80098c0:	e00b      	b.n	80098da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098c2:	7bbb      	ldrb	r3, [r7, #14]
 80098c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098c8:	4613      	mov	r3, r2
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	4413      	add	r3, r2
 80098d8:	3304      	adds	r3, #4
 80098da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098dc:	7bbb      	ldrb	r3, [r7, #14]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d002      	beq.n	80098e8 <USBD_StdEPReq+0x2d8>
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	2b80      	cmp	r3, #128	; 0x80
 80098e6:	d103      	bne.n	80098f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e00e      	b.n	800990e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098f0:	7bbb      	ldrb	r3, [r7, #14]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 f8cf 	bl	800aa98 <USBD_LL_IsStallEP>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2201      	movs	r2, #1
 8009904:	601a      	str	r2, [r3, #0]
 8009906:	e002      	b.n	800990e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2202      	movs	r2, #2
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fbd1 	bl	800a0bc <USBD_CtlSendData>
              break;
 800991a:	e004      	b.n	8009926 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800991c:	6839      	ldr	r1, [r7, #0]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fb5b 	bl	8009fda <USBD_CtlError>
              break;
 8009924:	bf00      	nop
          }
          break;
 8009926:	e004      	b.n	8009932 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009928:	6839      	ldr	r1, [r7, #0]
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 fb55 	bl	8009fda <USBD_CtlError>
          break;
 8009930:	bf00      	nop
      }
      break;
 8009932:	e005      	b.n	8009940 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fb4f 	bl	8009fda <USBD_CtlError>
      break;
 800993c:	e000      	b.n	8009940 <USBD_StdEPReq+0x330>
      break;
 800993e:	bf00      	nop
  }

  return ret;
 8009940:	7bfb      	ldrb	r3, [r7, #15]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009956:	2300      	movs	r3, #0
 8009958:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800995e:	2300      	movs	r3, #0
 8009960:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	885b      	ldrh	r3, [r3, #2]
 8009966:	0a1b      	lsrs	r3, r3, #8
 8009968:	b29b      	uxth	r3, r3
 800996a:	3b01      	subs	r3, #1
 800996c:	2b06      	cmp	r3, #6
 800996e:	f200 8128 	bhi.w	8009bc2 <USBD_GetDescriptor+0x276>
 8009972:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <USBD_GetDescriptor+0x2c>)
 8009974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009978:	08009995 	.word	0x08009995
 800997c:	080099ad 	.word	0x080099ad
 8009980:	080099ed 	.word	0x080099ed
 8009984:	08009bc3 	.word	0x08009bc3
 8009988:	08009bc3 	.word	0x08009bc3
 800998c:	08009b63 	.word	0x08009b63
 8009990:	08009b8f 	.word	0x08009b8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	7c12      	ldrb	r2, [r2, #16]
 80099a0:	f107 0108 	add.w	r1, r7, #8
 80099a4:	4610      	mov	r0, r2
 80099a6:	4798      	blx	r3
 80099a8:	60f8      	str	r0, [r7, #12]
      break;
 80099aa:	e112      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	7c1b      	ldrb	r3, [r3, #16]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d10d      	bne.n	80099d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099bc:	f107 0208 	add.w	r2, r7, #8
 80099c0:	4610      	mov	r0, r2
 80099c2:	4798      	blx	r3
 80099c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	3301      	adds	r3, #1
 80099ca:	2202      	movs	r2, #2
 80099cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099ce:	e100      	b.n	8009bd2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	f107 0208 	add.w	r2, r7, #8
 80099dc:	4610      	mov	r0, r2
 80099de:	4798      	blx	r3
 80099e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3301      	adds	r3, #1
 80099e6:	2202      	movs	r2, #2
 80099e8:	701a      	strb	r2, [r3, #0]
      break;
 80099ea:	e0f2      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	885b      	ldrh	r3, [r3, #2]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b05      	cmp	r3, #5
 80099f4:	f200 80ac 	bhi.w	8009b50 <USBD_GetDescriptor+0x204>
 80099f8:	a201      	add	r2, pc, #4	; (adr r2, 8009a00 <USBD_GetDescriptor+0xb4>)
 80099fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fe:	bf00      	nop
 8009a00:	08009a19 	.word	0x08009a19
 8009a04:	08009a4d 	.word	0x08009a4d
 8009a08:	08009a81 	.word	0x08009a81
 8009a0c:	08009ab5 	.word	0x08009ab5
 8009a10:	08009ae9 	.word	0x08009ae9
 8009a14:	08009b1d 	.word	0x08009b1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00b      	beq.n	8009a3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	7c12      	ldrb	r2, [r2, #16]
 8009a30:	f107 0108 	add.w	r1, r7, #8
 8009a34:	4610      	mov	r0, r2
 8009a36:	4798      	blx	r3
 8009a38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a3a:	e091      	b.n	8009b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 facb 	bl	8009fda <USBD_CtlError>
            err++;
 8009a44:	7afb      	ldrb	r3, [r7, #11]
 8009a46:	3301      	adds	r3, #1
 8009a48:	72fb      	strb	r3, [r7, #11]
          break;
 8009a4a:	e089      	b.n	8009b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00b      	beq.n	8009a70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	7c12      	ldrb	r2, [r2, #16]
 8009a64:	f107 0108 	add.w	r1, r7, #8
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4798      	blx	r3
 8009a6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a6e:	e077      	b.n	8009b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fab1 	bl	8009fda <USBD_CtlError>
            err++;
 8009a78:	7afb      	ldrb	r3, [r7, #11]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a7e:	e06f      	b.n	8009b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00b      	beq.n	8009aa4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	7c12      	ldrb	r2, [r2, #16]
 8009a98:	f107 0108 	add.w	r1, r7, #8
 8009a9c:	4610      	mov	r0, r2
 8009a9e:	4798      	blx	r3
 8009aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aa2:	e05d      	b.n	8009b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fa97 	bl	8009fda <USBD_CtlError>
            err++;
 8009aac:	7afb      	ldrb	r3, [r7, #11]
 8009aae:	3301      	adds	r3, #1
 8009ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ab2:	e055      	b.n	8009b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00b      	beq.n	8009ad8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	7c12      	ldrb	r2, [r2, #16]
 8009acc:	f107 0108 	add.w	r1, r7, #8
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	4798      	blx	r3
 8009ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ad6:	e043      	b.n	8009b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa7d 	bl	8009fda <USBD_CtlError>
            err++;
 8009ae0:	7afb      	ldrb	r3, [r7, #11]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ae6:	e03b      	b.n	8009b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aee:	695b      	ldr	r3, [r3, #20]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00b      	beq.n	8009b0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afa:	695b      	ldr	r3, [r3, #20]
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	7c12      	ldrb	r2, [r2, #16]
 8009b00:	f107 0108 	add.w	r1, r7, #8
 8009b04:	4610      	mov	r0, r2
 8009b06:	4798      	blx	r3
 8009b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b0a:	e029      	b.n	8009b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b0c:	6839      	ldr	r1, [r7, #0]
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa63 	bl	8009fda <USBD_CtlError>
            err++;
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	3301      	adds	r3, #1
 8009b18:	72fb      	strb	r3, [r7, #11]
          break;
 8009b1a:	e021      	b.n	8009b60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	7c12      	ldrb	r2, [r2, #16]
 8009b34:	f107 0108 	add.w	r1, r7, #8
 8009b38:	4610      	mov	r0, r2
 8009b3a:	4798      	blx	r3
 8009b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b3e:	e00f      	b.n	8009b60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa49 	bl	8009fda <USBD_CtlError>
            err++;
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b4e:	e007      	b.n	8009b60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fa41 	bl	8009fda <USBD_CtlError>
          err++;
 8009b58:	7afb      	ldrb	r3, [r7, #11]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b5e:	bf00      	nop
      }
      break;
 8009b60:	e037      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	7c1b      	ldrb	r3, [r3, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d109      	bne.n	8009b7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b72:	f107 0208 	add.w	r2, r7, #8
 8009b76:	4610      	mov	r0, r2
 8009b78:	4798      	blx	r3
 8009b7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b7c:	e029      	b.n	8009bd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fa2a 	bl	8009fda <USBD_CtlError>
        err++;
 8009b86:	7afb      	ldrb	r3, [r7, #11]
 8009b88:	3301      	adds	r3, #1
 8009b8a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b8c:	e021      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	7c1b      	ldrb	r3, [r3, #16]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10d      	bne.n	8009bb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9e:	f107 0208 	add.w	r2, r7, #8
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	4798      	blx	r3
 8009ba6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3301      	adds	r3, #1
 8009bac:	2207      	movs	r2, #7
 8009bae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bb0:	e00f      	b.n	8009bd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fa10 	bl	8009fda <USBD_CtlError>
        err++;
 8009bba:	7afb      	ldrb	r3, [r7, #11]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8009bc0:	e007      	b.n	8009bd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fa08 	bl	8009fda <USBD_CtlError>
      err++;
 8009bca:	7afb      	ldrb	r3, [r7, #11]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	72fb      	strb	r3, [r7, #11]
      break;
 8009bd0:	bf00      	nop
  }

  if (err != 0U)
 8009bd2:	7afb      	ldrb	r3, [r7, #11]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d11e      	bne.n	8009c16 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	88db      	ldrh	r3, [r3, #6]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d016      	beq.n	8009c0e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009be0:	893b      	ldrh	r3, [r7, #8]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00e      	beq.n	8009c04 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	88da      	ldrh	r2, [r3, #6]
 8009bea:	893b      	ldrh	r3, [r7, #8]
 8009bec:	4293      	cmp	r3, r2
 8009bee:	bf28      	it	cs
 8009bf0:	4613      	movcs	r3, r2
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bf6:	893b      	ldrh	r3, [r7, #8]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	68f9      	ldr	r1, [r7, #12]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fa5d 	bl	800a0bc <USBD_CtlSendData>
 8009c02:	e009      	b.n	8009c18 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f9e7 	bl	8009fda <USBD_CtlError>
 8009c0c:	e004      	b.n	8009c18 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 faae 	bl	800a170 <USBD_CtlSendStatus>
 8009c14:	e000      	b.n	8009c18 <USBD_GetDescriptor+0x2cc>
    return;
 8009c16:	bf00      	nop
  }
}
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop

08009c20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	889b      	ldrh	r3, [r3, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d131      	bne.n	8009c96 <USBD_SetAddress+0x76>
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	88db      	ldrh	r3, [r3, #6]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d12d      	bne.n	8009c96 <USBD_SetAddress+0x76>
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8009c40:	d829      	bhi.n	8009c96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	885b      	ldrh	r3, [r3, #2]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d104      	bne.n	8009c64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f9bc 	bl	8009fda <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c62:	e01d      	b.n	8009ca0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	7bfa      	ldrb	r2, [r7, #15]
 8009c68:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 ff3d 	bl	800aaf0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa7a 	bl	800a170 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c7c:	7bfb      	ldrb	r3, [r7, #15]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d004      	beq.n	8009c8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2202      	movs	r2, #2
 8009c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8a:	e009      	b.n	8009ca0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c94:	e004      	b.n	8009ca0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f99e 	bl	8009fda <USBD_CtlError>
  }
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	885b      	ldrh	r3, [r3, #2]
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	4b4e      	ldr	r3, [pc, #312]	; (8009df8 <USBD_SetConfig+0x150>)
 8009cbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009cc0:	4b4d      	ldr	r3, [pc, #308]	; (8009df8 <USBD_SetConfig+0x150>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b01      	cmp	r3, #1
 8009cc6:	d905      	bls.n	8009cd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009cc8:	6839      	ldr	r1, [r7, #0]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f985 	bl	8009fda <USBD_CtlError>
    return USBD_FAIL;
 8009cd0:	2303      	movs	r3, #3
 8009cd2:	e08c      	b.n	8009dee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d002      	beq.n	8009ce6 <USBD_SetConfig+0x3e>
 8009ce0:	2b03      	cmp	r3, #3
 8009ce2:	d029      	beq.n	8009d38 <USBD_SetConfig+0x90>
 8009ce4:	e075      	b.n	8009dd2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009ce6:	4b44      	ldr	r3, [pc, #272]	; (8009df8 <USBD_SetConfig+0x150>)
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d020      	beq.n	8009d30 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009cee:	4b42      	ldr	r3, [pc, #264]	; (8009df8 <USBD_SetConfig+0x150>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cf8:	4b3f      	ldr	r3, [pc, #252]	; (8009df8 <USBD_SetConfig+0x150>)
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7fe ffe7 	bl	8008cd2 <USBD_SetClassConfig>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d008      	beq.n	8009d20 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f962 	bl	8009fda <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2202      	movs	r2, #2
 8009d1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d1e:	e065      	b.n	8009dec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fa25 	bl	800a170 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2203      	movs	r2, #3
 8009d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d2e:	e05d      	b.n	8009dec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fa1d 	bl	800a170 <USBD_CtlSendStatus>
      break;
 8009d36:	e059      	b.n	8009dec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d38:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <USBD_SetConfig+0x150>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d112      	bne.n	8009d66 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2202      	movs	r2, #2
 8009d44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d48:	4b2b      	ldr	r3, [pc, #172]	; (8009df8 <USBD_SetConfig+0x150>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d52:	4b29      	ldr	r3, [pc, #164]	; (8009df8 <USBD_SetConfig+0x150>)
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7fe ffd6 	bl	8008d0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fa06 	bl	800a170 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d64:	e042      	b.n	8009dec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d66:	4b24      	ldr	r3, [pc, #144]	; (8009df8 <USBD_SetConfig+0x150>)
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d02a      	beq.n	8009dca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7fe ffc4 	bl	8008d0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d82:	4b1d      	ldr	r3, [pc, #116]	; (8009df8 <USBD_SetConfig+0x150>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	461a      	mov	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d8c:	4b1a      	ldr	r3, [pc, #104]	; (8009df8 <USBD_SetConfig+0x150>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	4619      	mov	r1, r3
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7fe ff9d 	bl	8008cd2 <USBD_SetClassConfig>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00f      	beq.n	8009dc2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009da2:	6839      	ldr	r1, [r7, #0]
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f918 	bl	8009fda <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7fe ffa9 	bl	8008d0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009dc0:	e014      	b.n	8009dec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f9d4 	bl	800a170 <USBD_CtlSendStatus>
      break;
 8009dc8:	e010      	b.n	8009dec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f9d0 	bl	800a170 <USBD_CtlSendStatus>
      break;
 8009dd0:	e00c      	b.n	8009dec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f900 	bl	8009fda <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dda:	4b07      	ldr	r3, [pc, #28]	; (8009df8 <USBD_SetConfig+0x150>)
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f7fe ff92 	bl	8008d0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009de6:	2303      	movs	r3, #3
 8009de8:	73fb      	strb	r3, [r7, #15]
      break;
 8009dea:	bf00      	nop
  }

  return ret;
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	200003d8 	.word	0x200003d8

08009dfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b082      	sub	sp, #8
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	88db      	ldrh	r3, [r3, #6]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d004      	beq.n	8009e18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f8e2 	bl	8009fda <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e16:	e023      	b.n	8009e60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	dc02      	bgt.n	8009e2a <USBD_GetConfig+0x2e>
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	dc03      	bgt.n	8009e30 <USBD_GetConfig+0x34>
 8009e28:	e015      	b.n	8009e56 <USBD_GetConfig+0x5a>
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d00b      	beq.n	8009e46 <USBD_GetConfig+0x4a>
 8009e2e:	e012      	b.n	8009e56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3308      	adds	r3, #8
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f93c 	bl	800a0bc <USBD_CtlSendData>
        break;
 8009e44:	e00c      	b.n	8009e60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	3304      	adds	r3, #4
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f934 	bl	800a0bc <USBD_CtlSendData>
        break;
 8009e54:	e004      	b.n	8009e60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f8be 	bl	8009fda <USBD_CtlError>
        break;
 8009e5e:	bf00      	nop
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d81e      	bhi.n	8009ebe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	88db      	ldrh	r3, [r3, #6]
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d004      	beq.n	8009e92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f8a5 	bl	8009fda <USBD_CtlError>
        break;
 8009e90:	e01a      	b.n	8009ec8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	f043 0202 	orr.w	r2, r3, #2
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	330c      	adds	r3, #12
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 f900 	bl	800a0bc <USBD_CtlSendData>
      break;
 8009ebc:	e004      	b.n	8009ec8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f88a 	bl	8009fda <USBD_CtlError>
      break;
 8009ec6:	bf00      	nop
  }
}
 8009ec8:	bf00      	nop
 8009eca:	3708      	adds	r7, #8
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	885b      	ldrh	r3, [r3, #2]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d107      	bne.n	8009ef2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f940 	bl	800a170 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ef0:	e013      	b.n	8009f1a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d10b      	bne.n	8009f12 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	889b      	ldrh	r3, [r3, #4]
 8009efe:	0a1b      	lsrs	r3, r3, #8
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f930 	bl	800a170 <USBD_CtlSendStatus>
}
 8009f10:	e003      	b.n	8009f1a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f860 	bl	8009fda <USBD_CtlError>
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	3b01      	subs	r3, #1
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d80b      	bhi.n	8009f52 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	885b      	ldrh	r3, [r3, #2]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d10c      	bne.n	8009f5c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f910 	bl	800a170 <USBD_CtlSendStatus>
      }
      break;
 8009f50:	e004      	b.n	8009f5c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f840 	bl	8009fda <USBD_CtlError>
      break;
 8009f5a:	e000      	b.n	8009f5e <USBD_ClrFeature+0x3c>
      break;
 8009f5c:	bf00      	nop
  }
}
 8009f5e:	bf00      	nop
 8009f60:	3708      	adds	r7, #8
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b084      	sub	sp, #16
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	781a      	ldrb	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f7ff fa41 	bl	8009418 <SWAPBYTE>
 8009f96:	4603      	mov	r3, r0
 8009f98:	461a      	mov	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff fa34 	bl	8009418 <SWAPBYTE>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	3301      	adds	r3, #1
 8009fbc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7ff fa27 	bl	8009418 <SWAPBYTE>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	461a      	mov	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	80da      	strh	r2, [r3, #6]
}
 8009fd2:	bf00      	nop
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
 8009fe2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fe4:	2180      	movs	r1, #128	; 0x80
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 fd18 	bl	800aa1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fec:	2100      	movs	r1, #0
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fd14 	bl	800aa1c <USBD_LL_StallEP>
}
 8009ff4:	bf00      	nop
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d036      	beq.n	800a080 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a016:	6938      	ldr	r0, [r7, #16]
 800a018:	f000 f836 	bl	800a088 <USBD_GetLen>
 800a01c:	4603      	mov	r3, r0
 800a01e:	3301      	adds	r3, #1
 800a020:	b29b      	uxth	r3, r3
 800a022:	005b      	lsls	r3, r3, #1
 800a024:	b29a      	uxth	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a02a:	7dfb      	ldrb	r3, [r7, #23]
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	4413      	add	r3, r2
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	7812      	ldrb	r2, [r2, #0]
 800a034:	701a      	strb	r2, [r3, #0]
  idx++;
 800a036:	7dfb      	ldrb	r3, [r7, #23]
 800a038:	3301      	adds	r3, #1
 800a03a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a03c:	7dfb      	ldrb	r3, [r7, #23]
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	4413      	add	r3, r2
 800a042:	2203      	movs	r2, #3
 800a044:	701a      	strb	r2, [r3, #0]
  idx++;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
 800a048:	3301      	adds	r3, #1
 800a04a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a04c:	e013      	b.n	800a076 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	4413      	add	r3, r2
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	7812      	ldrb	r2, [r2, #0]
 800a058:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	3301      	adds	r3, #1
 800a05e:	613b      	str	r3, [r7, #16]
    idx++;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	3301      	adds	r3, #1
 800a064:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	4413      	add	r3, r2
 800a06c:	2200      	movs	r2, #0
 800a06e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a070:	7dfb      	ldrb	r3, [r7, #23]
 800a072:	3301      	adds	r3, #1
 800a074:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e7      	bne.n	800a04e <USBD_GetString+0x52>
 800a07e:	e000      	b.n	800a082 <USBD_GetString+0x86>
    return;
 800a080:	bf00      	nop
  }
}
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a098:	e005      	b.n	800a0a6 <USBD_GetLen+0x1e>
  {
    len++;
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	3301      	adds	r3, #1
 800a09e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1f5      	bne.n	800a09a <USBD_GetLen+0x12>
  }

  return len;
 800a0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 fd23 	bl	800ab2e <USBD_LL_Transmit>

  return USBD_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b084      	sub	sp, #16
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	60f8      	str	r0, [r7, #12]
 800a0fa:	60b9      	str	r1, [r7, #8]
 800a0fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68ba      	ldr	r2, [r7, #8]
 800a102:	2100      	movs	r1, #0
 800a104:	68f8      	ldr	r0, [r7, #12]
 800a106:	f000 fd12 	bl	800ab2e <USBD_LL_Transmit>

  return USBD_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2203      	movs	r2, #3
 800a124:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	2100      	movs	r1, #0
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 fd16 	bl	800ab70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	2100      	movs	r1, #0
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 fd05 	bl	800ab70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2204      	movs	r2, #4
 800a17c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a180:	2300      	movs	r3, #0
 800a182:	2200      	movs	r2, #0
 800a184:	2100      	movs	r1, #0
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 fcd1 	bl	800ab2e <USBD_LL_Transmit>

  return USBD_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2205      	movs	r2, #5
 800a1a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f000 fcdf 	bl	800ab70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b087      	sub	sp, #28
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a1d2:	4b1f      	ldr	r3, [pc, #124]	; (800a250 <FATFS_LinkDriverEx+0x94>)
 800a1d4:	7a5b      	ldrb	r3, [r3, #9]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d131      	bne.n	800a240 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a1dc:	4b1c      	ldr	r3, [pc, #112]	; (800a250 <FATFS_LinkDriverEx+0x94>)
 800a1de:	7a5b      	ldrb	r3, [r3, #9]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	4b1a      	ldr	r3, [pc, #104]	; (800a250 <FATFS_LinkDriverEx+0x94>)
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a1ea:	4b19      	ldr	r3, [pc, #100]	; (800a250 <FATFS_LinkDriverEx+0x94>)
 800a1ec:	7a5b      	ldrb	r3, [r3, #9]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	4a17      	ldr	r2, [pc, #92]	; (800a250 <FATFS_LinkDriverEx+0x94>)
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a1fa:	4b15      	ldr	r3, [pc, #84]	; (800a250 <FATFS_LinkDriverEx+0x94>)
 800a1fc:	7a5b      	ldrb	r3, [r3, #9]
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	461a      	mov	r2, r3
 800a202:	4b13      	ldr	r3, [pc, #76]	; (800a250 <FATFS_LinkDriverEx+0x94>)
 800a204:	4413      	add	r3, r2
 800a206:	79fa      	ldrb	r2, [r7, #7]
 800a208:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a20a:	4b11      	ldr	r3, [pc, #68]	; (800a250 <FATFS_LinkDriverEx+0x94>)
 800a20c:	7a5b      	ldrb	r3, [r3, #9]
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	b2d1      	uxtb	r1, r2
 800a214:	4a0e      	ldr	r2, [pc, #56]	; (800a250 <FATFS_LinkDriverEx+0x94>)
 800a216:	7251      	strb	r1, [r2, #9]
 800a218:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a21a:	7dbb      	ldrb	r3, [r7, #22]
 800a21c:	3330      	adds	r3, #48	; 0x30
 800a21e:	b2da      	uxtb	r2, r3
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	3301      	adds	r3, #1
 800a228:	223a      	movs	r2, #58	; 0x3a
 800a22a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	3302      	adds	r3, #2
 800a230:	222f      	movs	r2, #47	; 0x2f
 800a232:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	3303      	adds	r3, #3
 800a238:	2200      	movs	r2, #0
 800a23a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a240:	7dfb      	ldrb	r3, [r7, #23]
}
 800a242:	4618      	mov	r0, r3
 800a244:	371c      	adds	r7, #28
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	200003dc 	.word	0x200003dc

0800a254 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a25e:	2200      	movs	r2, #0
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff ffaa 	bl	800a1bc <FATFS_LinkDriverEx>
 800a268:	4603      	mov	r3, r0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a278:	2201      	movs	r2, #1
 800a27a:	4912      	ldr	r1, [pc, #72]	; (800a2c4 <MX_USB_DEVICE_Init+0x50>)
 800a27c:	4812      	ldr	r0, [pc, #72]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a27e:	f7fe fcab 	bl	8008bd8 <USBD_Init>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d001      	beq.n	800a28c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a288:	f7f6 fc18 	bl	8000abc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a28c:	490f      	ldr	r1, [pc, #60]	; (800a2cc <MX_USB_DEVICE_Init+0x58>)
 800a28e:	480e      	ldr	r0, [pc, #56]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a290:	f7fe fcd2 	bl	8008c38 <USBD_RegisterClass>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a29a:	f7f6 fc0f 	bl	8000abc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a29e:	490c      	ldr	r1, [pc, #48]	; (800a2d0 <MX_USB_DEVICE_Init+0x5c>)
 800a2a0:	4809      	ldr	r0, [pc, #36]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a2a2:	f7fe fc09 	bl	8008ab8 <USBD_CDC_RegisterInterface>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a2ac:	f7f6 fc06 	bl	8000abc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a2b0:	4805      	ldr	r0, [pc, #20]	; (800a2c8 <MX_USB_DEVICE_Init+0x54>)
 800a2b2:	f7fe fcf7 	bl	8008ca4 <USBD_Start>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d001      	beq.n	800a2c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a2bc:	f7f6 fbfe 	bl	8000abc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a2c0:	bf00      	nop
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	200000ac 	.word	0x200000ac
 800a2c8:	200003e8 	.word	0x200003e8
 800a2cc:	20000018 	.word	0x20000018
 800a2d0:	20000098 	.word	0x20000098

0800a2d4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800a2d8:	2200      	movs	r2, #0
 800a2da:	4905      	ldr	r1, [pc, #20]	; (800a2f0 <CDC_Init_HS+0x1c>)
 800a2dc:	4805      	ldr	r0, [pc, #20]	; (800a2f4 <CDC_Init_HS+0x20>)
 800a2de:	f7fe fc05 	bl	8008aec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800a2e2:	4905      	ldr	r1, [pc, #20]	; (800a2f8 <CDC_Init_HS+0x24>)
 800a2e4:	4803      	ldr	r0, [pc, #12]	; (800a2f4 <CDC_Init_HS+0x20>)
 800a2e6:	f7fe fc23 	bl	8008b30 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a2ea:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	20000ec4 	.word	0x20000ec4
 800a2f4:	200003e8 	.word	0x200003e8
 800a2f8:	200006c4 	.word	0x200006c4

0800a2fc <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800a300:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800a302:	4618      	mov	r0, r3
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	4603      	mov	r3, r0
 800a314:	6039      	str	r1, [r7, #0]
 800a316:	71fb      	strb	r3, [r7, #7]
 800a318:	4613      	mov	r3, r2
 800a31a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800a31c:	79fb      	ldrb	r3, [r7, #7]
 800a31e:	2b23      	cmp	r3, #35	; 0x23
 800a320:	d84a      	bhi.n	800a3b8 <CDC_Control_HS+0xac>
 800a322:	a201      	add	r2, pc, #4	; (adr r2, 800a328 <CDC_Control_HS+0x1c>)
 800a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a328:	0800a3b9 	.word	0x0800a3b9
 800a32c:	0800a3b9 	.word	0x0800a3b9
 800a330:	0800a3b9 	.word	0x0800a3b9
 800a334:	0800a3b9 	.word	0x0800a3b9
 800a338:	0800a3b9 	.word	0x0800a3b9
 800a33c:	0800a3b9 	.word	0x0800a3b9
 800a340:	0800a3b9 	.word	0x0800a3b9
 800a344:	0800a3b9 	.word	0x0800a3b9
 800a348:	0800a3b9 	.word	0x0800a3b9
 800a34c:	0800a3b9 	.word	0x0800a3b9
 800a350:	0800a3b9 	.word	0x0800a3b9
 800a354:	0800a3b9 	.word	0x0800a3b9
 800a358:	0800a3b9 	.word	0x0800a3b9
 800a35c:	0800a3b9 	.word	0x0800a3b9
 800a360:	0800a3b9 	.word	0x0800a3b9
 800a364:	0800a3b9 	.word	0x0800a3b9
 800a368:	0800a3b9 	.word	0x0800a3b9
 800a36c:	0800a3b9 	.word	0x0800a3b9
 800a370:	0800a3b9 	.word	0x0800a3b9
 800a374:	0800a3b9 	.word	0x0800a3b9
 800a378:	0800a3b9 	.word	0x0800a3b9
 800a37c:	0800a3b9 	.word	0x0800a3b9
 800a380:	0800a3b9 	.word	0x0800a3b9
 800a384:	0800a3b9 	.word	0x0800a3b9
 800a388:	0800a3b9 	.word	0x0800a3b9
 800a38c:	0800a3b9 	.word	0x0800a3b9
 800a390:	0800a3b9 	.word	0x0800a3b9
 800a394:	0800a3b9 	.word	0x0800a3b9
 800a398:	0800a3b9 	.word	0x0800a3b9
 800a39c:	0800a3b9 	.word	0x0800a3b9
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3b9 	.word	0x0800a3b9
 800a3a8:	0800a3b9 	.word	0x0800a3b9
 800a3ac:	0800a3b9 	.word	0x0800a3b9
 800a3b0:	0800a3b9 	.word	0x0800a3b9
 800a3b4:	0800a3b9 	.word	0x0800a3b9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a3b8:	bf00      	nop
  }

  return (USBD_OK);
 800a3ba:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800a3d2:	6879      	ldr	r1, [r7, #4]
 800a3d4:	4805      	ldr	r0, [pc, #20]	; (800a3ec <CDC_Receive_HS+0x24>)
 800a3d6:	f7fe fbab 	bl	8008b30 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800a3da:	4804      	ldr	r0, [pc, #16]	; (800a3ec <CDC_Receive_HS+0x24>)
 800a3dc:	f7fe fbc6 	bl	8008b6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a3e0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	200003e8 	.word	0x200003e8

0800a3f0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	4613      	mov	r3, r2
 800a3fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800a402:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a406:	4618      	mov	r0, r3
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
	...

0800a414 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	6039      	str	r1, [r7, #0]
 800a41e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2212      	movs	r2, #18
 800a424:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800a426:	4b03      	ldr	r3, [pc, #12]	; (800a434 <USBD_HS_DeviceDescriptor+0x20>)
}
 800a428:	4618      	mov	r0, r3
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	200000c8 	.word	0x200000c8

0800a438 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	4603      	mov	r3, r0
 800a440:	6039      	str	r1, [r7, #0]
 800a442:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2204      	movs	r2, #4
 800a448:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a44a:	4b03      	ldr	r3, [pc, #12]	; (800a458 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	370c      	adds	r7, #12
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	200000dc 	.word	0x200000dc

0800a45c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	6039      	str	r1, [r7, #0]
 800a466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a468:	79fb      	ldrb	r3, [r7, #7]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d105      	bne.n	800a47a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	4907      	ldr	r1, [pc, #28]	; (800a490 <USBD_HS_ProductStrDescriptor+0x34>)
 800a472:	4808      	ldr	r0, [pc, #32]	; (800a494 <USBD_HS_ProductStrDescriptor+0x38>)
 800a474:	f7ff fdc2 	bl	8009ffc <USBD_GetString>
 800a478:	e004      	b.n	800a484 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	4904      	ldr	r1, [pc, #16]	; (800a490 <USBD_HS_ProductStrDescriptor+0x34>)
 800a47e:	4805      	ldr	r0, [pc, #20]	; (800a494 <USBD_HS_ProductStrDescriptor+0x38>)
 800a480:	f7ff fdbc 	bl	8009ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a484:	4b02      	ldr	r3, [pc, #8]	; (800a490 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	200016c4 	.word	0x200016c4
 800a494:	0800acd0 	.word	0x0800acd0

0800a498 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	6039      	str	r1, [r7, #0]
 800a4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a4a4:	683a      	ldr	r2, [r7, #0]
 800a4a6:	4904      	ldr	r1, [pc, #16]	; (800a4b8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800a4a8:	4804      	ldr	r0, [pc, #16]	; (800a4bc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800a4aa:	f7ff fda7 	bl	8009ffc <USBD_GetString>
  return USBD_StrDesc;
 800a4ae:	4b02      	ldr	r3, [pc, #8]	; (800a4b8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	200016c4 	.word	0x200016c4
 800a4bc:	0800ace8 	.word	0x0800ace8

0800a4c0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	6039      	str	r1, [r7, #0]
 800a4ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	221a      	movs	r2, #26
 800a4d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a4d2:	f000 f843 	bl	800a55c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800a4d6:	4b02      	ldr	r3, [pc, #8]	; (800a4e0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	200000e0 	.word	0x200000e0

0800a4e4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	6039      	str	r1, [r7, #0]
 800a4ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d105      	bne.n	800a502 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	4907      	ldr	r1, [pc, #28]	; (800a518 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a4fa:	4808      	ldr	r0, [pc, #32]	; (800a51c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a4fc:	f7ff fd7e 	bl	8009ffc <USBD_GetString>
 800a500:	e004      	b.n	800a50c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	4904      	ldr	r1, [pc, #16]	; (800a518 <USBD_HS_ConfigStrDescriptor+0x34>)
 800a506:	4805      	ldr	r0, [pc, #20]	; (800a51c <USBD_HS_ConfigStrDescriptor+0x38>)
 800a508:	f7ff fd78 	bl	8009ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a50c:	4b02      	ldr	r3, [pc, #8]	; (800a518 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200016c4 	.word	0x200016c4
 800a51c:	0800acfc 	.word	0x0800acfc

0800a520 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	6039      	str	r1, [r7, #0]
 800a52a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d105      	bne.n	800a53e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	4907      	ldr	r1, [pc, #28]	; (800a554 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a536:	4808      	ldr	r0, [pc, #32]	; (800a558 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a538:	f7ff fd60 	bl	8009ffc <USBD_GetString>
 800a53c:	e004      	b.n	800a548 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800a53e:	683a      	ldr	r2, [r7, #0]
 800a540:	4904      	ldr	r1, [pc, #16]	; (800a554 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800a542:	4805      	ldr	r0, [pc, #20]	; (800a558 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800a544:	f7ff fd5a 	bl	8009ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a548:	4b02      	ldr	r3, [pc, #8]	; (800a554 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	200016c4 	.word	0x200016c4
 800a558:	0800ad08 	.word	0x0800ad08

0800a55c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a562:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <Get_SerialNum+0x44>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a568:	4b0e      	ldr	r3, [pc, #56]	; (800a5a4 <Get_SerialNum+0x48>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a56e:	4b0e      	ldr	r3, [pc, #56]	; (800a5a8 <Get_SerialNum+0x4c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4413      	add	r3, r2
 800a57a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d009      	beq.n	800a596 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a582:	2208      	movs	r2, #8
 800a584:	4909      	ldr	r1, [pc, #36]	; (800a5ac <Get_SerialNum+0x50>)
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 f814 	bl	800a5b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a58c:	2204      	movs	r2, #4
 800a58e:	4908      	ldr	r1, [pc, #32]	; (800a5b0 <Get_SerialNum+0x54>)
 800a590:	68b8      	ldr	r0, [r7, #8]
 800a592:	f000 f80f 	bl	800a5b4 <IntToUnicode>
  }
}
 800a596:	bf00      	nop
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	1fff7a10 	.word	0x1fff7a10
 800a5a4:	1fff7a14 	.word	0x1fff7a14
 800a5a8:	1fff7a18 	.word	0x1fff7a18
 800a5ac:	200000e2 	.word	0x200000e2
 800a5b0:	200000f2 	.word	0x200000f2

0800a5b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	75fb      	strb	r3, [r7, #23]
 800a5ca:	e027      	b.n	800a61c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	0f1b      	lsrs	r3, r3, #28
 800a5d0:	2b09      	cmp	r3, #9
 800a5d2:	d80b      	bhi.n	800a5ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	0f1b      	lsrs	r3, r3, #28
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	005b      	lsls	r3, r3, #1
 800a5de:	4619      	mov	r1, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	440b      	add	r3, r1
 800a5e4:	3230      	adds	r2, #48	; 0x30
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	e00a      	b.n	800a602 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	0f1b      	lsrs	r3, r3, #28
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	005b      	lsls	r3, r3, #1
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	440b      	add	r3, r1
 800a5fc:	3237      	adds	r2, #55	; 0x37
 800a5fe:	b2d2      	uxtb	r2, r2
 800a600:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	011b      	lsls	r3, r3, #4
 800a606:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	005b      	lsls	r3, r3, #1
 800a60c:	3301      	adds	r3, #1
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	4413      	add	r3, r2
 800a612:	2200      	movs	r2, #0
 800a614:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a616:	7dfb      	ldrb	r3, [r7, #23]
 800a618:	3301      	adds	r3, #1
 800a61a:	75fb      	strb	r3, [r7, #23]
 800a61c:	7dfa      	ldrb	r2, [r7, #23]
 800a61e:	79fb      	ldrb	r3, [r7, #7]
 800a620:	429a      	cmp	r2, r3
 800a622:	d3d3      	bcc.n	800a5cc <IntToUnicode+0x18>
  }
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop
 800a628:	371c      	adds	r7, #28
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
	...

0800a634 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b08a      	sub	sp, #40	; 0x28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a63c:	f107 0314 	add.w	r3, r7, #20
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]
 800a644:	605a      	str	r2, [r3, #4]
 800a646:	609a      	str	r2, [r3, #8]
 800a648:	60da      	str	r2, [r3, #12]
 800a64a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a1d      	ldr	r2, [pc, #116]	; (800a6c8 <HAL_PCD_MspInit+0x94>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d134      	bne.n	800a6c0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a656:	2300      	movs	r3, #0
 800a658:	613b      	str	r3, [r7, #16]
 800a65a:	4b1c      	ldr	r3, [pc, #112]	; (800a6cc <HAL_PCD_MspInit+0x98>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	4a1b      	ldr	r2, [pc, #108]	; (800a6cc <HAL_PCD_MspInit+0x98>)
 800a660:	f043 0302 	orr.w	r3, r3, #2
 800a664:	6313      	str	r3, [r2, #48]	; 0x30
 800a666:	4b19      	ldr	r3, [pc, #100]	; (800a6cc <HAL_PCD_MspInit+0x98>)
 800a668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	613b      	str	r3, [r7, #16]
 800a670:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800a672:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a678:	2302      	movs	r3, #2
 800a67a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a67c:	2300      	movs	r3, #0
 800a67e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a680:	2303      	movs	r3, #3
 800a682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800a684:	230c      	movs	r3, #12
 800a686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a688:	f107 0314 	add.w	r3, r7, #20
 800a68c:	4619      	mov	r1, r3
 800a68e:	4810      	ldr	r0, [pc, #64]	; (800a6d0 <HAL_PCD_MspInit+0x9c>)
 800a690:	f7f7 f928 	bl	80018e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a694:	2300      	movs	r3, #0
 800a696:	60fb      	str	r3, [r7, #12]
 800a698:	4b0c      	ldr	r3, [pc, #48]	; (800a6cc <HAL_PCD_MspInit+0x98>)
 800a69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69c:	4a0b      	ldr	r2, [pc, #44]	; (800a6cc <HAL_PCD_MspInit+0x98>)
 800a69e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6a2:	6313      	str	r3, [r2, #48]	; 0x30
 800a6a4:	4b09      	ldr	r3, [pc, #36]	; (800a6cc <HAL_PCD_MspInit+0x98>)
 800a6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	204d      	movs	r0, #77	; 0x4d
 800a6b6:	f7f7 f8de 	bl	8001876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a6ba:	204d      	movs	r0, #77	; 0x4d
 800a6bc:	f7f7 f8f7 	bl	80018ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a6c0:	bf00      	nop
 800a6c2:	3728      	adds	r7, #40	; 0x28
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	40040000 	.word	0x40040000
 800a6cc:	40023800 	.word	0x40023800
 800a6d0:	40020400 	.word	0x40020400

0800a6d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a6e8:	4619      	mov	r1, r3
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	f7fe fb27 	bl	8008d3e <USBD_LL_SetupStage>
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a70a:	78fa      	ldrb	r2, [r7, #3]
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	4613      	mov	r3, r2
 800a710:	00db      	lsls	r3, r3, #3
 800a712:	4413      	add	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	440b      	add	r3, r1
 800a718:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	4619      	mov	r1, r3
 800a722:	f7fe fb61 	bl	8008de8 <USBD_LL_DataOutStage>
}
 800a726:	bf00      	nop
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b082      	sub	sp, #8
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	460b      	mov	r3, r1
 800a738:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a740:	78fa      	ldrb	r2, [r7, #3]
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	4613      	mov	r3, r2
 800a746:	00db      	lsls	r3, r3, #3
 800a748:	4413      	add	r3, r2
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	440b      	add	r3, r1
 800a74e:	334c      	adds	r3, #76	; 0x4c
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	78fb      	ldrb	r3, [r7, #3]
 800a754:	4619      	mov	r1, r3
 800a756:	f7fe fbfa 	bl	8008f4e <USBD_LL_DataInStage>
}
 800a75a:	bf00      	nop
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a762:	b580      	push	{r7, lr}
 800a764:	b082      	sub	sp, #8
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a770:	4618      	mov	r0, r3
 800a772:	f7fe fd2e 	bl	80091d2 <USBD_LL_SOF>
}
 800a776:	bf00      	nop
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a786:	2301      	movs	r3, #1
 800a788:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d102      	bne.n	800a798 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a792:	2300      	movs	r3, #0
 800a794:	73fb      	strb	r3, [r7, #15]
 800a796:	e008      	b.n	800a7aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d102      	bne.n	800a7a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	73fb      	strb	r3, [r7, #15]
 800a7a4:	e001      	b.n	800a7aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a7a6:	f7f6 f989 	bl	8000abc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7b0:	7bfa      	ldrb	r2, [r7, #15]
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7fe fcce 	bl	8009156 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7fe fc76 	bl	80090b2 <USBD_LL_Reset>
}
 800a7c6:	bf00      	nop
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe fcc9 	bl	8009176 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	6812      	ldr	r2, [r2, #0]
 800a7f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7f6:	f043 0301 	orr.w	r3, r3, #1
 800a7fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a1b      	ldr	r3, [r3, #32]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d005      	beq.n	800a810 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a804:	4b04      	ldr	r3, [pc, #16]	; (800a818 <HAL_PCD_SuspendCallback+0x48>)
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	4a03      	ldr	r2, [pc, #12]	; (800a818 <HAL_PCD_SuspendCallback+0x48>)
 800a80a:	f043 0306 	orr.w	r3, r3, #6
 800a80e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a810:	bf00      	nop
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	e000ed00 	.word	0xe000ed00

0800a81c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe fcb9 	bl	80091a2 <USBD_LL_Resume>
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	460b      	mov	r3, r1
 800a842:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a84a:	78fa      	ldrb	r2, [r7, #3]
 800a84c:	4611      	mov	r1, r2
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fd11 	bl	8009276 <USBD_LL_IsoOUTIncomplete>
}
 800a854:	bf00      	nop
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a86e:	78fa      	ldrb	r2, [r7, #3]
 800a870:	4611      	mov	r1, r2
 800a872:	4618      	mov	r0, r3
 800a874:	f7fe fccd 	bl	8009212 <USBD_LL_IsoINIncomplete>
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe fd23 	bl	80092da <USBD_LL_DevConnected>
}
 800a894:	bf00      	nop
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe fd20 	bl	80092f0 <USBD_LL_DevDisconnected>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d140      	bne.n	800a94a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a8c8:	4a22      	ldr	r2, [pc, #136]	; (800a954 <USBD_LL_Init+0x9c>)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a20      	ldr	r2, [pc, #128]	; (800a954 <USBD_LL_Init+0x9c>)
 800a8d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a8d8:	4b1e      	ldr	r3, [pc, #120]	; (800a954 <USBD_LL_Init+0x9c>)
 800a8da:	4a1f      	ldr	r2, [pc, #124]	; (800a958 <USBD_LL_Init+0xa0>)
 800a8dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800a8de:	4b1d      	ldr	r3, [pc, #116]	; (800a954 <USBD_LL_Init+0x9c>)
 800a8e0:	2206      	movs	r2, #6
 800a8e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a8e4:	4b1b      	ldr	r3, [pc, #108]	; (800a954 <USBD_LL_Init+0x9c>)
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a8ea:	4b1a      	ldr	r3, [pc, #104]	; (800a954 <USBD_LL_Init+0x9c>)
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a8f0:	4b18      	ldr	r3, [pc, #96]	; (800a954 <USBD_LL_Init+0x9c>)
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a8f6:	4b17      	ldr	r3, [pc, #92]	; (800a954 <USBD_LL_Init+0x9c>)
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a8fc:	4b15      	ldr	r3, [pc, #84]	; (800a954 <USBD_LL_Init+0x9c>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a902:	4b14      	ldr	r3, [pc, #80]	; (800a954 <USBD_LL_Init+0x9c>)
 800a904:	2200      	movs	r2, #0
 800a906:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a908:	4b12      	ldr	r3, [pc, #72]	; (800a954 <USBD_LL_Init+0x9c>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a90e:	4b11      	ldr	r3, [pc, #68]	; (800a954 <USBD_LL_Init+0x9c>)
 800a910:	2200      	movs	r2, #0
 800a912:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a914:	4b0f      	ldr	r3, [pc, #60]	; (800a954 <USBD_LL_Init+0x9c>)
 800a916:	2200      	movs	r2, #0
 800a918:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a91a:	480e      	ldr	r0, [pc, #56]	; (800a954 <USBD_LL_Init+0x9c>)
 800a91c:	f7f7 faf4 	bl	8001f08 <HAL_PCD_Init>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a926:	f7f6 f8c9 	bl	8000abc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a92a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a92e:	4809      	ldr	r0, [pc, #36]	; (800a954 <USBD_LL_Init+0x9c>)
 800a930:	f7f8 fd4b 	bl	80033ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a934:	2280      	movs	r2, #128	; 0x80
 800a936:	2100      	movs	r1, #0
 800a938:	4806      	ldr	r0, [pc, #24]	; (800a954 <USBD_LL_Init+0x9c>)
 800a93a:	f7f8 fcff 	bl	800333c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a93e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800a942:	2101      	movs	r1, #1
 800a944:	4803      	ldr	r0, [pc, #12]	; (800a954 <USBD_LL_Init+0x9c>)
 800a946:	f7f8 fcf9 	bl	800333c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	200018c4 	.word	0x200018c4
 800a958:	40040000 	.word	0x40040000

0800a95c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b084      	sub	sp, #16
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a968:	2300      	movs	r3, #0
 800a96a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a972:	4618      	mov	r0, r3
 800a974:	f7f7 fbe5 	bl	8002142 <HAL_PCD_Start>
 800a978:	4603      	mov	r3, r0
 800a97a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 f942 	bl	800ac08 <USBD_Get_USB_Status>
 800a984:	4603      	mov	r3, r0
 800a986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a988:	7bbb      	ldrb	r3, [r7, #14]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b084      	sub	sp, #16
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	4608      	mov	r0, r1
 800a99c:	4611      	mov	r1, r2
 800a99e:	461a      	mov	r2, r3
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	70fb      	strb	r3, [r7, #3]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70bb      	strb	r3, [r7, #2]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a9ba:	78bb      	ldrb	r3, [r7, #2]
 800a9bc:	883a      	ldrh	r2, [r7, #0]
 800a9be:	78f9      	ldrb	r1, [r7, #3]
 800a9c0:	f7f8 f8b6 	bl	8002b30 <HAL_PCD_EP_Open>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f000 f91c 	bl	800ac08 <USBD_Get_USB_Status>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9f8:	78fa      	ldrb	r2, [r7, #3]
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7f8 f8ff 	bl	8002c00 <HAL_PCD_EP_Close>
 800aa02:	4603      	mov	r3, r0
 800aa04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa06:	7bfb      	ldrb	r3, [r7, #15]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f000 f8fd 	bl	800ac08 <USBD_Get_USB_Status>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa12:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	460b      	mov	r3, r1
 800aa26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa36:	78fa      	ldrb	r2, [r7, #3]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7f8 f9d7 	bl	8002dee <HAL_PCD_EP_SetStall>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 f8de 	bl	800ac08 <USBD_Get_USB_Status>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b084      	sub	sp, #16
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	460b      	mov	r3, r1
 800aa64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa74:	78fa      	ldrb	r2, [r7, #3]
 800aa76:	4611      	mov	r1, r2
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7f8 fa1c 	bl	8002eb6 <HAL_PCD_EP_ClrStall>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa82:	7bfb      	ldrb	r3, [r7, #15]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f000 f8bf 	bl	800ac08 <USBD_Get_USB_Status>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3710      	adds	r7, #16
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aaaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aaac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	da0b      	bge.n	800aacc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aab4:	78fb      	ldrb	r3, [r7, #3]
 800aab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aaba:	68f9      	ldr	r1, [r7, #12]
 800aabc:	4613      	mov	r3, r2
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	4413      	add	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	440b      	add	r3, r1
 800aac6:	333e      	adds	r3, #62	; 0x3e
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	e00b      	b.n	800aae4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aad2:	68f9      	ldr	r1, [r7, #12]
 800aad4:	4613      	mov	r3, r2
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	440b      	add	r3, r1
 800aade:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800aae2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab0a:	78fa      	ldrb	r2, [r7, #3]
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7f7 ffe9 	bl	8002ae6 <HAL_PCD_SetAddress>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 f874 	bl	800ac08 <USBD_Get_USB_Status>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b086      	sub	sp, #24
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	60f8      	str	r0, [r7, #12]
 800ab36:	607a      	str	r2, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]
 800ab3a:	460b      	mov	r3, r1
 800ab3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab42:	2300      	movs	r3, #0
 800ab44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab4c:	7af9      	ldrb	r1, [r7, #11]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	f7f8 f902 	bl	8002d5a <HAL_PCD_EP_Transmit>
 800ab56:	4603      	mov	r3, r0
 800ab58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab5a:	7dfb      	ldrb	r3, [r7, #23]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 f853 	bl	800ac08 <USBD_Get_USB_Status>
 800ab62:	4603      	mov	r3, r0
 800ab64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab66:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	607a      	str	r2, [r7, #4]
 800ab7a:	603b      	str	r3, [r7, #0]
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab84:	2300      	movs	r3, #0
 800ab86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab8e:	7af9      	ldrb	r1, [r7, #11]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	f7f8 f87e 	bl	8002c94 <HAL_PCD_EP_Receive>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab9c:	7dfb      	ldrb	r3, [r7, #23]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f000 f832 	bl	800ac08 <USBD_Get_USB_Status>
 800aba4:	4603      	mov	r3, r0
 800aba6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aba8:	7dbb      	ldrb	r3, [r7, #22]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b082      	sub	sp, #8
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	460b      	mov	r3, r1
 800abbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abc4:	78fa      	ldrb	r2, [r7, #3]
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f8 f8ae 	bl	8002d2a <HAL_PCD_EP_GetRxCount>
 800abce:	4603      	mov	r3, r0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800abe0:	4b03      	ldr	r3, [pc, #12]	; (800abf0 <USBD_static_malloc+0x18>)
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	20001dd0 	.word	0x20001dd0

0800abf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]

}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	4603      	mov	r3, r0
 800ac10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	2b03      	cmp	r3, #3
 800ac1a:	d817      	bhi.n	800ac4c <USBD_Get_USB_Status+0x44>
 800ac1c:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <USBD_Get_USB_Status+0x1c>)
 800ac1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac22:	bf00      	nop
 800ac24:	0800ac35 	.word	0x0800ac35
 800ac28:	0800ac3b 	.word	0x0800ac3b
 800ac2c:	0800ac41 	.word	0x0800ac41
 800ac30:	0800ac47 	.word	0x0800ac47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73fb      	strb	r3, [r7, #15]
    break;
 800ac38:	e00b      	b.n	800ac52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac3a:	2303      	movs	r3, #3
 800ac3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ac3e:	e008      	b.n	800ac52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac40:	2301      	movs	r3, #1
 800ac42:	73fb      	strb	r3, [r7, #15]
    break;
 800ac44:	e005      	b.n	800ac52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac46:	2303      	movs	r3, #3
 800ac48:	73fb      	strb	r3, [r7, #15]
    break;
 800ac4a:	e002      	b.n	800ac52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac50:	bf00      	nop
  }
  return usb_status;
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <__libc_init_array>:
 800ac60:	b570      	push	{r4, r5, r6, lr}
 800ac62:	4d0d      	ldr	r5, [pc, #52]	; (800ac98 <__libc_init_array+0x38>)
 800ac64:	4c0d      	ldr	r4, [pc, #52]	; (800ac9c <__libc_init_array+0x3c>)
 800ac66:	1b64      	subs	r4, r4, r5
 800ac68:	10a4      	asrs	r4, r4, #2
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	42a6      	cmp	r6, r4
 800ac6e:	d109      	bne.n	800ac84 <__libc_init_array+0x24>
 800ac70:	4d0b      	ldr	r5, [pc, #44]	; (800aca0 <__libc_init_array+0x40>)
 800ac72:	4c0c      	ldr	r4, [pc, #48]	; (800aca4 <__libc_init_array+0x44>)
 800ac74:	f000 f820 	bl	800acb8 <_init>
 800ac78:	1b64      	subs	r4, r4, r5
 800ac7a:	10a4      	asrs	r4, r4, #2
 800ac7c:	2600      	movs	r6, #0
 800ac7e:	42a6      	cmp	r6, r4
 800ac80:	d105      	bne.n	800ac8e <__libc_init_array+0x2e>
 800ac82:	bd70      	pop	{r4, r5, r6, pc}
 800ac84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac88:	4798      	blx	r3
 800ac8a:	3601      	adds	r6, #1
 800ac8c:	e7ee      	b.n	800ac6c <__libc_init_array+0xc>
 800ac8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac92:	4798      	blx	r3
 800ac94:	3601      	adds	r6, #1
 800ac96:	e7f2      	b.n	800ac7e <__libc_init_array+0x1e>
 800ac98:	0800ad4c 	.word	0x0800ad4c
 800ac9c:	0800ad4c 	.word	0x0800ad4c
 800aca0:	0800ad4c 	.word	0x0800ad4c
 800aca4:	0800ad50 	.word	0x0800ad50

0800aca8 <memset>:
 800aca8:	4402      	add	r2, r0
 800acaa:	4603      	mov	r3, r0
 800acac:	4293      	cmp	r3, r2
 800acae:	d100      	bne.n	800acb2 <memset+0xa>
 800acb0:	4770      	bx	lr
 800acb2:	f803 1b01 	strb.w	r1, [r3], #1
 800acb6:	e7f9      	b.n	800acac <memset+0x4>

0800acb8 <_init>:
 800acb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acba:	bf00      	nop
 800acbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acbe:	bc08      	pop	{r3}
 800acc0:	469e      	mov	lr, r3
 800acc2:	4770      	bx	lr

0800acc4 <_fini>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	bf00      	nop
 800acc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acca:	bc08      	pop	{r3}
 800accc:	469e      	mov	lr, r3
 800acce:	4770      	bx	lr
